[[["_relative_fp","24.Servlet规范/注解与可插拔.html"],["title","注解与可插拔.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","注解"],["body","\n"],["body","\n"],["body","metadata-complete 属性标识 是否应该在部署时检查jar文件的类文件，以查找注解和web片段"],["body","\n"],["body","\n"],["body","@WebServlet"],["body","\n\n"],["body","该注解在一个类上指定并包含声明 Servlet 的元数据。"],["body","\n"],["body","如果没有指定 Servlet 名字则默认是全限定类名。"],["body","\n"],["body","被注解的 sevlet必须指定至少一个 url 模式进行部署。"],["body","\n"],["body","如果同一个 Servlet 类以不同的名字声明在部署描述符中，必须实例\n化一个新的 Servlet 实例。"],["body","\n\n"],["body","@WebFilter"],["body","\n"],["body","注解的 urlPatterns 属性, servletNames 属性 或 value 属性必须被指"],["body","\n"],["body","@WebInitParam"],["body","\n"],["body","指定必须传递到 Servlet 或 Filter 的任何初始化参数。它是 WebServlet 和 WebFilter 注解的一个属性。"],["body","\n"],["body","@WebListener"],["body","\n"],["body","■ javax.servlet.ServletContextListener\n■ javax.servlet.ServletContextAttributeListener\n■ javax.servlet.ServletRequestListener\n■ javax.servlet.ServletRequestAttributeListener\n■ javax.servlet.http.HttpSessionListener\n■ javax.servlet.http.HttpSessionAttributeListener\n■ javax.servlet.http.HttpSessionIdListener\n"],["body","\n"],["body","@MultipartConfig"],["body","\n"],["body","表示请求期望是 mime/multipart 类型"],["body","\n"],["body","默认的 welcome-file-list 有  index.html  index.jsp"],["body","\n"],["h1","web fragment"],["body","\n\n"],["body","\n"],["body","webfragment 是 web应用部署描述符的 一个逻辑分区,使用跟 web.xml一致,除了 根元素改为 web-fragment, 文件名改为 web-fragment.xml."],["body","\n"],["body","\n"],["body","\n"],["body","如果一个jar包 需要带有 web-fragment.xml. 则应放在 jar下 meta-inf/ 目录"],["body","\n"],["body","\n"],["body","\n"],["body","示例"],["body","\n"],["body","<web-fragment>\n<servlet>\n<servlet-name>welcome</servlet-name>\n<servlet-class>\nWelcomeServlet\n</servlet-class>\n</servlet>\n<listener>\n<listener-class>\nRequestListener\n</listener-class>\n</listener>\n</web-fragment>\n"],["body","\n"],["body","\n\n"],["h1","web.xml 和 和 web-fragment.xml 顺序"],["body","\n"],["headingLink","绝对顺序"],["heading","绝对顺序"],["body","\n"],["body","absolute-ordering"],["body","\n"],["body","\n"],["body","在 web.xml 中的元素。在一个 web.xml 中仅能有一个\n元素。"],["body","\n"],["body","\n"],["body","相对顺序 必须被忽略"],["body","\n"],["body","<web-app>\n<absolute-ordering>\n<name>MyFragment3</name>\n<name>MyFragment2</name>\n</absolute-ordering>\n...\n</web-app>\n"],["body","\n"],["headingLink","相对顺序"],["heading","相对顺序"],["body","\n"],["body","\n"],["body","在 web-fragment.xml 中的元素，一个 web-fragment.xml 只能有一个元素"],["body","\n"],["body","\n"],["body","web-fragment.xml\n<web-fragment>\n<name>MyFragment1</name>\n<ordering><after><name>MyFragment2</name></after></ordering>\n...\n</web-fragment>\n\n<before>\n<others/>\n<name>\nB\n</name>\n</before>\n\n<after>\n<others/>\n</after>\n<before>\n<name>\nC\n</name>\n</before>\n"],["body","\n"],["h1","装配 web.xmlweb-fragment.xml 描述符和注解"],["body","\n\n"],["body","如果有关的 Listener、Servlet 和 Filter 的顺序必须指定，那么必须指定在 web-fragment.xml 或 web.xml。"],["body","\n"],["body","顺序将依据它们定义在描述符中的顺序，和依赖于 web.xml 中的 absolute-ordering 元素或\nweb-fragment.xml 中的 ordering 元素，如果存在。\na. 匹配请求的过滤器链的顺序是它们在 web.xml 中声明的顺序。\nb. Servlet 在请求处理时实例化或在部署时立即实例化。在后一种情况，以它们的 load-on-startup 元素\n表示的顺序实例化。\nc. 在之前发布的规范，上下文 Listener 以随机顺序调用。在 Servlet3.0，Listener 以它们在 web.xml 中\n声明的顺序调用，如下所示：\ni. javax.servlet.ServletContextListener 实 现 的 contextInitialized 方 法 以 声 明 时 顺 序 调 用 ，\ncontextDestroyed 以相反顺序调用。\nii. javax.servlet.ServletRequestListener 实 现 的 requestInitialized 以 声 明 时 顺 序 调 用 ，\n64\nrequestDestroyed 方法以相反顺序调用。\niii. javax.servlet.http.HttpSessionListener 实 现 的 sessionCreated 方 法 以 声 明 时 顺 序 调 用 ，\nsessionDestroyed 方法以相反顺序调用。\niv. 当 相 应 的 事 件 触 发 时 ， javax.servlet.ServletContextAttributeListener 、\njavax.servlet.ServletRequestAttributeListener和javax.servlet.HttpSessionAttributeListener 的方法按照\n它们声明的顺序调用。"],["body","\n"],["body","如果在 web.xml 使用 enabled 元素禁用引入的 servlet，那么该 servlet 将不可以指定 url-pattern。"],["body","\n"],["body","当在 web.xml、web-fragment.xml 和 注解之间解析发生冲突时 web 应用的 web.xml 具有最高优先级。"],["body","\n"],["body","如果没有在描述符中指定 metadata-complete 或在部署描述符中设置为 false，通过组合出现在注解和描\n述符中的 metadata 导出有效的 metadata。合并的规则具体如下：\na. 在 web fragment 中的配置设置用于扩充那些已指定在主 web.xml 的配置设置，使用这种方式就好像\n它们指定在同一个 web.xml。\nb. 添加到主 web.xml 的 web fragment 中的配置设置的顺序由 8-70 页的 8.2.2 节“web.xml 和\nweb-fragment.xml 顺序”指定。\nc. 当主 web.xml 的 metadata-complete 属性设置为 true，被认为是完整的且在部署时不会扫描注解和\nfragment。如果有 absolute-ordering 和 ordering 元素将被忽略。当设置 fragment 上的为 true 时，\nmetadata-complete 属性仅适用于在特定的 jar 包中扫描注解。\nd. 除非 metadata-complete 设置为 true，否则 web fragment 被合并到主 web.xml。合并发生在相关\nfragment 的注解处理之后。\ne. 当使用 web fragment 扩充 web.xml 时以下被认为配置冲突：\ni. 多个元素使用相同的但不同的\nii. 多个元素使用相同的但不同的\nf. 上面的配置冲突被解析为如下：\ni. 在主 web.xml 和 web fragment 之间的配置冲突被解析为在 web.xml 的配置具有高优先级。\nii. 在两个 web fragment 之间的配置冲突，冲突的中心元素没有出现在主 web.xml，将导致一个错\n误。必须记录一个有用的消息，且应用必须部署失败。\ng. 上面的冲突被解析后，这些额外的规则适用：\ni. 可以在多个 web-frament 中声明任意多次元素并生成到 web.xml。比如，元素可\n以以不同的名字添加。\nii. 如果指定在web.xml中的覆盖了指定在web-fragment中的同名的值，则可以声明任意多次元素。\niii. 如果是最少出现零次且最多出现一次的元素存在于 web fragment，且没有在主 web.xml 中，则\n主 web.xml 继承 web fragment 的设置。如果元素出现在主 web.xml 和 web fragment，则主 web.xml\n的配置设置具有高优先级。例如，如果在主 web.xml 和 web fragment 中都声明了相同的 servlet，\n且声明在 web fragment 中的 servlet 指定了元素，且没在主 web.xml 指定，则 web\nfragment 的元素将被使用并合并到 web.xml。\niv. 如果是最少出现零次且最多出现一次的元素指定在两个 web fragment，且没有出现在主\n65\nweb.xml，则认为是错误的。例如，如果两个 web fragment 声明了相同的 Servlet，但具有不同的\n元素，且相同的 Servlet 也声明在主 web.xml，但没有，则必须报\n告一个错误。\nv. 声明是可添加的。\nvi. 具有相同的元素可以添加到多个 web-fragment。在 web.xml 中\n指定的覆盖在 web-fragment 中指定的同名的的。\nvii. 具有相同的元素可以添加到多个 web-fragment。在 web.xml 中指\n定的覆盖在 web-fragment 中指定的同名的的。\nviii. 具有相同的多个元素被当作一个声明。\nix. 合并产生的 web.xml 被认为是，仅当所有它的 web fragment 也被标记为\n。\nx. web fragment 的顶级和它的孩子元素，，和元素被忽略。\nxi. jsp-property-group 是可添加的。当绑定静态资源到 jar 包的 META-INF/resources 目录，推荐\njsp-config 元素使用 url-pattern，反对使用 extension 映射。此外，如果存在一个 fragment 的 JSP 资\n源，则应该在一个与 fragment 同名的子目录中。这有助于防止一个 web-fragment 的\njsp-property-group 受到来自应用的主 docroot 中的 JSP 的影响和受到来自一个 fragment 的\nMETA-INF/resources 的 JSP 的影响。\nh. 对于所有资源引用元素 (env-entry, ejb-ref, ejb-local-ref, service-ref, resource-ref, resource-env-ref,\nmessage-destination-ref, persistence-context-ref and persistence-unit-ref) 如下规则适用：\ni. 如果任意资源引用元素出现在 web fragment，主 web.xml 继承 web fragment 的值。 如果该元素\n同时出现在主 web.xml 和 web fragment，使用相同的名字，web.xml 具有高优先级。所有 fragment\n的子元素除下面指定的 injection-target 被合并到主 web.xml。例如，如果主 web.xml 和 web fragment\n都使用相同的声明一个，将使用 web.xml 中的且不\n会合并 fragment 中的任意子元素除下面声明的。\nii. 如果资源引用元素指定在两个 fragment，当没有指定在主 web.xml 中，且资源引用元素的所有\n属性和子元素都是一样的，资源引用将被合并到主 web.xml。如果使用相同名字在两个 fragment\n中指定资源引用元素，且没有在 web.xml 中指定，属性和子元素是不一样的，那么被认为是错误\n的。错误必须被报告且应用必须部署失败。例如，如果两个 web fragment 使用相同的\n声明了但类型一个指定为 javax.sql.DataSource 另一个指定为\nJavaMail，这是错误的且应用必须部署失败。\niii. 对于在 fragment 中使用相同名称的 的资源引用元素将被合并到主 web.xml。\ni. 除了上面定义的 web-fragment.xml 的合并规则之外，下面的规则适用于使用资源引用注解\n(@Resource, @Resources, @EJB, @EJBs, @WebServiceRef, @WebServiceRefs, @PersistenceContext,\n@PersistenceContexts,@PersistenceUnit, and @PersistenceUnits)。\n如果资源引用注解应用到类上，这等价于定义了一个资源，但是这不等价于定义一个\ninjection-target。在这种情况下上述规则适用于 injection-target 元素。\n如果在字段上使用资源引用注解，这等价于在 web.xml 定义 injection-target 元素。但是如果在描述\n符中没有injection-target元素，那么fragment中的injection-target仍将被合并到上面定义的web.xml。\n66\n如果从另一方面来说，在主 web.xml 中有一个 injection-target 并同时有一个同资源名的资源引用注\n解，那么这被认为是对资源引用注解的覆盖。在这种情况下，由于在描述符中指定了一个\ninjection-target，上述定义的规则将适用于除了覆盖的资源引用注解。\nj. 如果在两个 fragment 中指定了 data-source 元素，而没有出现在主 web.xml，且 data-source 元素的所有属\n性和子元素都是一样的，data-source 将被合并到主 web.xml。如果在两个 fragment 中指定同名的 data-source\n元素，而没有出现在主 web.xml 且两个 fragment 的属性和子元素不是一样的，这被认为是错误的。在这种\n情况下，必须报告一个错误且引用必须部署失败。"],["body","\n\n"],["h1","共享库 / 运行时可插拔性"],["body","\n"],["body","除了支持 fragment 和使用注解的外，要求之一是我们不仅能 plug-in 绑定在 WEB-INF/lib 下的，也能 plugin\n73\n框架共享副本—包括能 plug-in 到容器的如建议在 web 容器之上的 JAX-WS、JAX-RS 和 JSF。\nServletContainerInitializer 允许处理这样的使用情况下，如下所述。\nServletContainerInitializer 类通过 jar services API 查找。对于每一个应用，应用启动时，由容器创建一个\nServletContainerInitializer 实 例 。 框 架 提 供 的 ServletContainerInitializer 实 现 必 须 绑 定 在 jar 包 的\nMETA-INF/services 目录中的一个叫做 javax.servlet.ServletContainerInitializer 的文件，根据 jar services API，\n指定 ServletContainerInitializer 的实现。\n除 ServletContainerInitializer 外，我们还有一个注解—HandlesTypes。在 ServletContainerInitializer 实现上的\nHandlesTypes 注解用于表示感兴趣的一些类，它们可能指定了 HandlesTypes 的 value 中的注解（类型、方\n法或自动级别的注解），或者是其类型的超类继承/实现了这些类之一。无论是否设置了 metadata-complete，\nHandlesTypes 注解将应用。\n当检测一个应用的类看是否它们匹配 ServletContainerInitializer 的 HandlesTypes 指定的条件时，如果应用的\n一个或多个可选的 JAR 包缺失，容器可能遇到类装载问题。由于容器不能决定是否这些类型的类装载失败\n将阻止应用正常工作，它必须忽略它们，同时也提供一个将记录它们的配置选项。\n如果 ServletContainerInitializer 实现没有@HandlesTypes 注解，或如果没有匹配任何指定的 HandlesType，那\n么它会为每个应用使用 null 值的集合调用一次。这将允许 initializer 基于应用中可用的资源决定是否需要初\n始化 Servlet/Filter。\n在任何 Servlet Listener 的事件被触发之前，当应用正在启动时，ServletContainerInitializer 的 onStartup 方法\n将被调用。\nServletContainerInitializer’s 的 onStartup 得到一个类的 Set，其或者继承/实现 initializer 表示感兴趣的类，或\n者它是使用指定在@HandlesTypes 注解中的任意类注解的。\n下面一个具体的例子展示了这是如何工作的。\n让我们学习 JAX-WS web service 运行时。\nJAX-WS 运行时实现通常不是绑定到每个 war 包。其实现将绑定一个 ServletContainerInitializer 的实现（如\n下所示）且容器将查找使用的 services API（绑定在 jar 包中的 META-INF/services 目录中的一个叫做\njavax.servlet.ServletContainerInitializer 的文件，它将指出如下所示的 JAXWSServletContainerInitializer）。\n@HandlesTypes(WebService.class)\nJAXWSServletContainerInitializer implements ServletContainerInitializer {\npublic void onStartup(Set<Class<?>> c, ServletContext ctx) throws ServletException {\n// 在此，使用 JAX-WS 特定的代码来初始化运行库和设置 mapping 等。\nServletRegistration reg = ctx.addServlet(\"JAXWSServlet\", \"com.sun.webservice.JAXWSServlet\");\nreg.addServletMapping(\"/foo\");\n}\n}\n框架的 jar 包也可能被绑定到 war 报目录中的 WEB-INF/lib 目录。如果 ServletContainerInitializer 被绑定到\n应用的WEB-INF/lib目录内的一个JAR包中，它的onStartup方法在绑定到的应用启动期间将被仅调用一次。\n如果，相反，ServletContainerInitialzer 被绑定到 WEB-INF/lib 目录外的一个 JAR 包中，但仍能被运行时的\n服务提供商查找机制发现时，每次启动应用时，它的 onStartup 方法将被调用。\nServletContainerInitializer 接口的实现将被运行时的服务查找机制或语义上与它等价的容器特定机制发现。\n在任一种情况，web fragment JAR 包的 ServletContainerInitializer 服务被排除于一个 absolute ordering 必须\n74\n被忽略，这些服务被发现的顺序必须遵照应用的类装载委托模型。"],["body","\n"],["h1","JSP 容器可插拔性"],["body","\n"],["body","ServletContainerInitializer 和编程式注册特性可以在 Servlet 和 JSP 容器之间提供一个清晰的职责分离，通过\n由 Servlet 容器只负责解析 web.xml 和 web-fragment.xml 资源，而解析标签库描述符（TLD）资源委托给 JSP\n容器。\n在此之前，web 容器必须扫描 TLD 资源寻找任何 Listener 声明。使用 Servlet3.0 和后续版本后，该职责可\n以委托给 JSP 容器。JSP 容器是内嵌到一个 Servlet3.0 兼容的 Servlet 容器中，可以提供它自己的\nServletContainerInitializer 实现，搜索传递到它的 onStartup 方法的 ServletContext 参数寻找任何 TLD 资源，\n扫描这些资源寻找 Listener 声明，并向 ServletContext 注册相关的 Listener。\n另外，Servlet3.0 之前，JSP 容器用于必须扫描应用的部署描述符寻找 jsp-config 相关的配置。使用 Servlet3.0\n和后续版本后，Servlet 容器必须提供通过 ServletContext.getJspConfigDescriptor 方法得到应用的 web.xml 和\nweb-fragment.xml 部署描述符中的任何 jsp-config 相关的配置。\n在 TLD 中发现的和编程注册的任何 ServletContextListener 在它们提供的功能上是有限的。任何试图调用一\n个在 Servlet3.0 中加入的 ServletContext API 方法将导致一个 UnsupportedOperationException。\n另外，Servlet3.0 和后续版本兼容的 Servlet 容器必须提供一个名字为 javax.servlet.context.orderedLibs 的\nServletContext 属性，它的值（java.util.List<java.lang.String>类型）包含了由 ServletContext 所代表的应用的\nWEB-INF/lib 目录中的 JAR 文件的名字列表，按照它们的 web fragment 名字的排序（可能排除如果 fragment\nJAR 包已经被排除在 absolute-ordering），或者 null 如果应用没有指定任意绝对或相对顺序"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","24.Servlet规范/httpServlet接口.html"],["title","httpServlet接口.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Servlet接口"],["body","\n"],["headingLink","请求处理"],["heading","请求处理"],["body","\n"],["headingLink","请求方法"],["heading","请求方法"],["body","\n"],["headingLink","doget"],["heading","doGet"],["body","\n"],["body","一般用于查询,资源获取"],["body","\n"],["headingLink","dopost"],["heading","doPost"],["body","\n"],["body","用于修改服务器资源"],["body","\n"],["headingLink","doput"],["heading","doPut"],["body","\n"],["body","用于文件上传"],["body","\n"],["headingLink","dodelete"],["heading","doDelete"],["body","\n"],["body","删除资源"],["body","\n"],["headingLink","dohead"],["heading","doHead"],["body","\n"],["body","只返回DoGet请求的 头"],["body","\n"],["headingLink","dooptions"],["heading","doOptions"],["body","\n"],["body","返回HttpServlet支持的 方法,通过 Allow 响应头返回支持的 HTTP 操作，如 GET、POST"],["body","\n"],["headingLink","dotrace"],["heading","doTrace"],["body","\n"],["body","返回的响应包含 TRACE 请求的所有头信息"],["body","\n"],["headingLink","有条件-get-支持"],["heading","有条件 GET 支持"],["body","\n"],["body","HttpServlet 定义了用于支持有条件 GET 操作的 getLastModified 方法。所谓的有条件 GET 操作是指客户端\n通过 GET 请求获取资源时，当资源自第一次获取那个时间点发生更改后才再次发生数据，否则将使用客户\n端缓存的数据。在一些适当的场合，实现此方法可以更有效的利用网络资源，减少不必要的数据发送"],["body","\n"],["headingLink","servlet实例数量"],["heading","Servlet实例数量"],["body","\n"],["body","单实例的Servlet"],["body","\n\n"],["body","\n"],["body","通过注解描述的（第 8 章 注解和可插拔性）或者在 Web 应用程序的部署描述符（第 14 章 部署描述符）中描述的 servlet 声明，控制着 servlet 容器如何提供 servlet 实例"],["body","\n"],["body","\n"],["body","\n"],["body","对于未托管在分布式环境中（默认）的 servlet 而言，servlet 容器对于每一个 Servlet 声明必须且只能产生一\n个实例。不过，如果 Servlet 实现了 SingleThreadModel 接口，servlet 容器可以选择实例化多个实例以便处\n理高负荷请求或者串行化请求到一个特定实例。\n如果 servlet 以分布式方式进行部署，容器可以为每个虚拟机（JVM）的每个 Servlet 声明产生一个实例。但\n是，如果在分布式环境中 servlet 实现了 SingleThreadModel 接口，此时容器可以为每个容器的 JVM 实例化\n多个 Servlet 实例"],["body","\n"],["body","\n\n"],["body","SingleThreadModel"],["body","\n\n"],["body","\n"],["body","它保证在  同一时刻 只能由一个 线程执行 service方法 "],["body","\n"],["body","\n"],["body","\n"],["body","实现的方式大致由两种"],["body","\n\n"],["body","针对 单实例 进行 同步锁定"],["body","\n"],["body","针对 多实例 维护实例池 , 分配空闲实例"],["body","\n\n"],["body","\n"],["body","\n"],["body","但是 仍然避免不了 线程安全问题, 尤其是在 多个servlet针对  session的attribute时"],["body","\n"],["body","\n"],["body","\n"],["body","最好的办法是 不要编写 有状态的 servlet"],["body","\n"],["body","\n"],["body","\n"],["body","已经过时"],["body","\n"],["body","\n\n"],["headingLink","生命周期"],["heading","生命周期"],["body","\n"],["headingLink","加载和实例化"],["heading","加载和实例化"],["body","\n"],["body","Servlet 容器负责加载和实例化 Servlet。加载和实例化可以发生在容器启动时，或者延迟初始化直到容器决定有请求需要处理时。当 Servlet 引擎启动后，servlet 容器必须定位所需要的 Servlet 类。Servlet 容器使用普通的 Java 类加载设施加载 Servlet 类。可以从本地文件系统或远程文件系统或者其他网络服务加载。加载\n完 Servlet 类后，容器就可以实例化它并使用了"],["body","\n"],["headingLink","初始化"],["heading","初始化"],["body","\n"],["body","一旦一个 Servlet 对象实例化完毕，容器接下来必须在处理客户端请求之前初始化该 Servlet 实例。初始化\n的目的是以便 Servlet 能读取持久化配置数据，初始化一些代价高的资源（比如 JDBC API 连接），或者执\n行一些一次性的动作。"],["body","\n"],["body","init(ServletConfig config)\n"],["body","\n"],["body","初始化时的错误条件\n在初始化阶段，servlet 实现可能抛出 UnavailableException 或 ServletException 异常。在这种情况下，Servlet\n不能放置到活动服务中，而且 Servlet 容器必须释放它。如果初始化没有成功，destroy 方法不应该被调用。\n在实例初始化失败后容器可能再实例化和初始化一个新的实例。此规则的例外是，当抛出的\nUnavailableException 表示一个不可用的最小时间，容器在创建和初始化一个新的 servlet 实例之前必须等待\n一段时间。"],["body","\n"],["headingLink","请求处理-1"],["heading","请求处理"],["body","\n"],["headingLink","forward与include"],["heading","forward与include"],["body","\n\n"],["body","\n"],["body","forward"],["body","\n"],["body","一旦调用forward,除了保留forward前的response里的header外，其它的都不保留"],["body","\n"],["body","//该命令 会立马 分派到指定servlet\nrequest.getRequestDispatcher(\"/forwardDemo02\").forward(request,response);\n"],["body","\n"],["body","\n"],["body","\n"],["body","include "],["body","\n"],["body","包含 该URL的 内容,(printer) 其他 header 都不要"],["body","\n"],["body","\n"],["body","\n"],["body","forward include之间的数据共享可以通过  request.attribute 实现"],["body","\n"],["body","\n\n"],["headingLink","多线程问题"],["heading","多线程问题"],["body","\n"],["body","不要编写有状态的 Servlet"],["body","\n"],["headingLink","请求处理时的异常"],["heading","请求处理时的异常"],["body","\n"],["body","UnavailableException"],["body","\n"],["body","永久性不可用"],["body","\n\n"],["body","Servlet 容器必须从服务中移除这个 Servlet，调用它的 destroy 方法，并释放 Servlet 实例。"],["body","\n"],["body","所有被容器拒绝的请求，都会返回一个 SC_NOT_FOUND (404) 响\n应。"],["body","\n\n"],["body","临时不可用"],["body","\n\n"],["body","返回一个 SC_SERVICE_UNAVAILABLE (503)"],["body","\n"],["body","同时会返回一个 Retry-After 头指示此 Servlet 什么时候可用"],["body","\n\n"],["body","容器可以选择忽略永久性和临时性不可用的区别，并把 UnavailableExceptions 视为永久性的，从而 Servlet 抛出 UnavailableException 后需要把它从服务中移除。"],["body","\n"],["headingLink","异步处理"],["heading","异步处理"],["body","\n"],["body","\n"],["body","Filter 及/或 Servlet 在生成响应之前必须等待一些资源或事件以便完成请求处理,比如，Servlet 在进行生成一个响应之前可能等待一个可用的 JDBC 连接，或者一个远程 web 服务的响应，或者一个 JMS 消息，或者一个应用程序事件, 在 Servlet 中等待是一个低效的操作，因为这是阻塞操作，从而白白占用一个\n线程或其他一些受限资源"],["body","\n"],["body","\n"],["body","异步请求事件顺序"],["body","\n\n"],["body","收到请求, 通过一系列的 filter"],["body","\n"],["body","处理请求参数"],["body","\n"],["body","发出请求去获取一些资源或数据 例如获取JDBC连接,发起Web远程服务"],["body","\n"],["body","servlet 不产生响应并返回"],["body","\n"],["body","过了一段时间后，所请求的资源变为可用，此时处理线程继续处理事件，要么在同一个线程，要么通过\nAsyncContext 分派到容器中的一个资源上"],["body","\n\n"],["body","异步的操作"],["body","\n"],["body","startAsync() //使用原生的未经包装的 request对象\nstartAsync(req,resp)//包装的 req,resp对象\ncomplete() //完成\n"],["body","\n"],["body","异步的限制"],["body","\n\n"],["body","\n"],["body","所有涉及到 异步调用链的  filter必须是支持异步的"],["body","\n"],["body","\n"],["body","\n"],["body","当 从一个异步servlet 分派到 同步servlet 时, servlet结束后,会自动调用 complete"],["body","\n"],["body","\n"],["body","\n"],["body","同步 servlet 不能 分派到 异步servlet"],["body","\n"],["body","\n"],["body","\n"],["body","异步servlet 的响应 等到 调用 complete 才返回"],["body","\n"],["body","\n"],["body","\n"],["body","异步超时之后 会自动 提交响应"],["body","\n"],["body","\n\n"],["body","{\n        System.out.println(\"servlet1\");\n        System.out.println(req.getClass());\n        System.out.println(response.getClass());\n        AsyncContext asyncContext = req.startAsync();\n        if(asyncContext.hasOriginalRequestAndResponse()){\n            asyncContext.start(()->{\n                try {\n                    Thread.sleep(2000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                // 设置响应内容类型\n                response.setContentType(\"text/html;charset=UTF-8\");\n                //格式化输出\n                PrintWriter out;\n                try {\n                    out = response.getWriter();\n                    String title = \"自动刷新 Header 设置 - 菜鸟教程实例\";\n                    String docType =\n                            \"<!DOCTYPE html>\\n\";\n                    out.println(docType +\n                            \"<html>\\n\" +\n                            \"<head><title>\" + title + \"</title></head>\\n\"+\n                            \"<body bgcolor=\\\"#f0f0f0\\\">\\n\" +\n                            \"<h1 align=\\\"center\\\">\" + title + \"</h1>\\n\" +\n                            \"<p>当前时间是：\" + LocalDateTime.now() + \"</p>\\n\");\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                asyncContext.dispatch();\n            });\n        }else{\n            //开始干另一件事\n            System.out.println(\"异步处理完毕了哈哈哈\");\n            asyncContext.complete();\n        }\n        System.out.println(\"立即返回\");\n    }\n"],["body","\n"],["body","升级处理"],["body","\n\n"],["body","\n"],["body","在 HTTP/1.1，Upgrade 通用头（general-header）允许客户端指定其支持和希望使用的其他通信协议。如果\n服务器找到合适的切换协议，那么新的协议将在之后的通信中使用。"],["body","\n"],["body","\n"],["body","\n"],["body","Servlet 容器提供了 HTTP 升级机制。不过，Servlet 容器本身不知道任何升级协议。协议处理封装在 HttpUpgradeHandler 协议处理器。在容器和HttpUpgradeHandler 协议处理器之间通过字节流进行数据读取或写入"],["body","\n"],["body","\n"],["body","\n"],["body","流程"],["body","\n\n"],["body","当收到一个升级（upgrade）请求，servlet 可以调用 HttpServletRequest.upgrade 方法启动升级处理。该方法\n实例化给定的 HttpUpgradeHandler 类，返回的 HttpUpgradeHandler 实例可以被进一步的定制。"],["body","\n"],["body","应用准备发送一个合适的响应到客户端。"],["body","\n"],["body","退出 servlet service 方法之后，servlet 容器完成所有过滤器的处理并标记连接已交给 HttpUpgradeHandler 协议处理器处理。"],["body","\n"],["body","然后调用 HttpUpgradeHandler 协议处理器的 init 方法，传入一个 WebConnection 以允许 HttpUpgradeHandler 协议处理器访问数据流。"],["body","\n"],["body","Servlet 过滤器仅处理初始的 HTTP 请求和响应，然后它们将不会再参与到后续的通信中。换句话说，一旦请求被升级，它们将不会被调用。"],["body","\n"],["body","协议处理器（ProtocolHandler）可以使用非阻塞 IO（non blocking IO）消费和生产消息。当处理 HTTP 升级时，开发人员负责线程安全的访问 ServletInputStream 和 ServletOutputStream。当升级处理已经完成，将调用 HttpUpgradeHandler.destroy 方法。"],["body","\n\n"],["body","\n\n"],["headingLink","终止服务"],["heading","终止服务"],["body","\n\n"],["body","\n"],["body","Servlet 容器没必要保持装载的 Servlet 持续任何特定的一段时间。"],["body","\n"],["body","\n"],["body","\n"],["body","一个 Servlet 实例可能会在 servlet 容器内保持活跃（active）持续一段时间（以毫秒为单位），Servlet 容器的寿命可能是几天，几个月，或几年，或者是任何之间的时间。当 Servlet 容器确定 servlet 应该从服务中移除时，将调用 Servlet 接口的 destroy 方法以允许 Servlet 释放它使\n用的任何资源和保存任何持久化的状态。例如，当想要节省内存资源或它被关闭时，容器可以做这个。"],["body","\n"],["body","\n"],["body","\n"],["body","在 servlet 容器调用 destroy 方法之前，它必须让当前正在执行 service 方法的任何线程完成执行，或者超过\n了服务器定义的时间限制。一旦调用了 servlet 实例的 destroy 方法，容器无法再路由其他请求到该 servlet 实例了。如果容器需要再次使用该 servlet，它必须用该 servlet 类的一个新的实例。"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","24.Servlet规范/入门.html"],["title","入门.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Servlet 是什么？"],["body","\n"],["body","Servlet（Server Applet），全称Java Servlet，未有中文译文。是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。"],["body","\n"],["body","Servlet运行于支持Java的应用服务器中。从原理上讲，Servlet可以响应任何类型的请求，但绝大多数情况下Servlet只用来扩展基于HTTP协议的Web服务器。"],["body","\n"],["h1","Servlet由来"],["body","\n"],["body","java appplet客户端运行程序"],["body","\n"],["body","Servlet 是在服务器上运行的小程序。这个词是在 Java applet的环境中创造的，Java applet 是一种当作单独文件跟网页一起发送的小程序，它通常用于在客户端运行，结果得到为用户进行运算或者根据用户互作用定位图形等服务。"],["body","\n"],["body","CGI服务端运行程序"],["body","\n"],["body","服务器上需要一些程序，常常是根据用户输入访问数据库的程序。这些通常是使用公共网关接口（Common Gateway Interface，CGI）应用程序完成的。然而，在服务器上运行 Java，这种程序可使用 Java 编程语言实现。在通信量大的服务器上，JavaServlet 的优点在于它们的执行速度更快于 CGI 程序。各个用户请求被激活成单个程序中的一个线程，而无需创建单独的进程，这意味着服务器端处理请求的系统开销将明显降低。"],["body","\n"],["body","实现过程"],["body","\n"],["body","最早支持 Servlet 技术的是 JavaSoft 的 Java Web Server。此后，一些其它的基于 Java 的 Web Server 开始支持标准的 Servlet API。Servlet 的主要功能在于交互式地浏览和修改数据，生成动态 Web 内容。这个过程为："],["body","\n\n"],["body","客户端发送请求至服务器端；"],["body","\n"],["body","服务器将请求信息发送至 Servlet；"],["body","\n"],["body","Servlet 生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；"],["body","\n"],["body","服务器将响应返回给客户端。"],["body","\n\n"],["body","一个 Servlet 就是 Java 编程语言中的一个类，它被用来扩展服务器的性能，服务器上驻留着可以通过“请求-响应”编程模型来访问的应用程序。虽然 Servlet 可以对任何类型的请求产生响应，但通常只用来扩展 Web 服务器的应用程序。\n目前最新版本为 4.0。"],["body","\n"],["h1","Servlet命名"],["body","\n"],["body","Servlet 的命名可以看出 sun 命名的特点，如 Applet 表示小应用程序；Scriptlet = Script + Applet，表示小脚本程序；同样 Servlet = Service + Applet，表示小服务程序。"],["body","\n"],["h1","Servlet 包"],["body","\n"],["body","Servlet 可以使用 javax.servlet 和 javax.servlet.http 包创建，它是 Java 企业版的标准组成部分，Java 企业版是支持大型开发项目的 Java 类库的扩展版本。"],["body","\n"],["h1","Servlet 环境设置"],["body","\n"],["headingLink","设置-web-服务器tomcat"],["heading","设置 Web 服务器：Tomcat"],["body","\n"],["body","省略"],["body","\n"],["headingLink","设置-classpath"],["heading","设置 CLASSPATH"],["body","\n"],["body","由于 Servlet 不是 Java 平台标准版的组成部分，所以您必须为编译器指定 Servlet 类的路径。"],["body","\n"],["body","setenv CATALINA=/usr/local/apache-tomcat-5.5.29\nsetenv CLASSPATH $CATALINA/common/lib/servlet-api.jar:$CLASSPATH\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","24.Servlet规范/servletContext.html"],["title","servletContext.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","ServletContext作用范围"],["body","\n"],["body","ServletContext 是非分布式的且仅存在于一个 JVM 中"],["body","\n"],["body","\n"],["body","每个 JVM 的每个 Web 应用将有一个 ServletContext 实例"],["body","\n"],["body","\n"],["h1","初始化参数"],["body","\n"],["body","\n"],["body","容器启动的初始化参数"],["body","\n"],["body","\n"],["body","getInitParameter\ngetInitParameterNames"],["body","\n"],["h1","配置方法"],["body","\n\n"],["body","\n"],["body","从 Servlet 3.0 开始,可以以编程方式定义 Servlet、Filter 和它们映射到的url 模式,"],["body","\n"],["body","这些方法只能从 ServletContextListener 实现的 contexInitialized 方法或者\nServletContainerInitializer 实现的 onStartup 方法进行的应用初始化过程中调用。 "],["body","\n"],["body","\n"],["body","\n"],["body","也可以查找关联到 Servlet 或 Filter 的一个 Registration 对象实例，或者到 Servlet 或 Filter 的所有 Registration对象的 map。"],["body","\n"],["body","\n"],["body","\n"],["body","如果 ServletContext 传到了 ServletContextListener 的 contextInitialized 方法，但该 ServletContextListener 即没 有在 web.xml 或 web-fragment.xml 中声明也没有使用@WebListener 注解，则在 ServletContext 中定义的用于Servlet、Filter 和 Listener 的编程式配置的所有方法必须抛出 UnsupportedOperationException"],["body","\n"],["body","\n\n"],["headingLink","编程式添加和配置-servlet"],["heading","编程式添加和配置 Servlet"],["body","\n"],["body","addServlet(String servletName, String className)\naddServlet(String servletName, Servlet servlet)\naddServlet(String servletName, Class <? extends Servlet> servletClass)\n<T extends Servlet> T createServlet(Class<T> clazz)\nServletRegistration getServletRegistration(String servletName)\nMap<String, ? extends ServletRegistration> getServletRegistrations()\n"],["body","\n"],["headingLink","编程式添加和配置-filter"],["heading","编程式添加和配置 Filter"],["body","\n"],["body","addFilter(String filterName, String className)\naddFilter(String filterName, Filter filter)\naddFilter(String filterName, Class <? extends Filter> filterClass)\n<T extends Filter> T createFilter(Class<T> clazz)\nFilterRegistration getFilterRegistration(String filterName)\nMap<String, ? extends FilterRegistration> getFilterRegistrations()\n"],["body","\n"],["headingLink","编程式添加和配置-listener"],["heading","编程式添加和配置 Listener"],["body","\n"],["body","listener接口"],["body","\n"],["body","javax.servlet.ServletContextAttributeListener\njavax.servlet.ServletRequestListener\njavax.servlet.ServletRequestAttributeListener\njavax.servlet.http.HttpSessionListener\njavax.servlet.http.HttpSessionAttributeListener\njavax.servlet.http.HttpSessionIdListener\n"],["body","\n"],["body","配置API"],["body","\n"],["body","<T extends EventListener> void addListener(T t)\nvoid addListener(String className)\n<T extends EventListener> void addListener(T t)\nvoid addListener(Class <? extends EventListener> listenerClass)\n<T extends EventListener> void createListener(Class<T> clazz)\n"],["body","\n"],["body","编程式添加servlet,filter,listener 时注解请求处理"],["body","\n"],["body","@ServletSecurity、@RunAs、@DeclareRoles、@MultipartConfig。\n这些注解 需要确保在手动 添加时,已经被处理到,\n// 使用DI 去自动处理\n"],["body","\n"],["h1","上下文属性"],["body","\n"],["body","setAttribute\ngetAttribute\ngetAttributeNames\nremoveAttribute"],["body","\n"],["h1","资源"],["body","\n"],["body","ServletContext 接口提供了直接访问 Web 应用中静态内容层次结构的文件的方法，包括 HTML，GIF 和 JPEG\n文件：\ngetResource\ngetResourceAsStream\ngetResource 和 getResourceAsStream 方法需要一个以“/”开头的 String 字符串作为参数，"],["body","\n\n"],["body","\n"],["body","给定的资源路径是相对于上下文的根，"],["body","\n"],["body","\n"],["body","\n"],["body","或者相对于 web 应用的 WEB-INF/lib 目录下的 JAR 文件中的 META-INF/resources目录。"],["body","\n"],["body","这两个方法首先根据请求的资源查找 web 应用上下文的根，然后查找所有 WEB-INF/lib 目录下的 JAR\n文件。查找 WEB-INF/lib 目录中 JAR 文件的顺序是不确定的。这种层次结构的文件可以存在于服务器的文\n件系统，Web 应用的归档文件，远程服务器，或在其他位置。"],["body","\n"],["body","\n"],["body","\n"],["body","可以使用 getResourcePaths(String path)方法访问 Web 应用中的资源的完整列表。"],["body","\n"],["body","\n\n"],["h1","多主机和 Servlet 上下文"],["body","\n"],["body","ServletContext 接口的 getVirtualServerName 方法允许访问 ServletContext 部署在的逻辑主机的配置名字。该\n方法必须对所有部署在逻辑主机上的所有 servlet context 返回同一个名字。且该方法返回的名字必须是明确\n的、每个逻辑主机稳定的、和适合用于关联服务器配置信息和逻辑主机"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","24.Servlet规范/servlet初始化.html"],["title","servlet初始化.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","tomcat编程式启动"],["body","\n"],["headingLink","引入-tomcat内置库"],["heading","引入 tomcat内置库"],["body","\n"],["body","<dependency>\n            <groupId>org.apache.tomcat.embed</groupId>\n            <artifactId>tomcat-embed-core</artifactId>\n            <version>8.5.35</version>\n</dependency>\n<dependency>\n        <groupId>org.apache.tomcat.embed</groupId>\n        <artifactId>tomcat-embed-jasper</artifactId>\n        <version>8.5.35</version>\n</dependency>\n"],["body","\n"],["headingLink","调用main方法"],["heading","调用Main方法"],["body","\n"],["body","public class MainApplication {\n    public static void main(String[] args) throws LifecycleException {\n        Tomcat tomcat = new Tomcat();\n        tomcat.setPort(8080);\n        tomcat.addWebapp(\"/\",\"D://tomcat/\");\n        tomcat.start();\n        tomcat.getServer().await();\n    }\n}\n"],["body","\n"],["headingLink","初始化其他"],["heading","初始化其他"],["body","\n"],["headingLink","spi接口"],["heading","SPI接口"],["body","\n"],["body","接口"],["body","\n"],["body","javax.servlet.ServletContainerInitializer"],["body","\n"],["body","tomcat容器启动时，使用  SPI 机制 调用 其所有实现类，并执行 onStartup 方法"],["body","\n"],["body","public void onStartup(@Nullable Set<Class<?>> webAppInitializerClasses, ServletContext servletContext)\n"],["body","\n"],["headingLink","注解"],["heading","注解"],["body","\n"],["body","@HandlesTypes(WebApplicationInitializer.class)\n"],["body","\n"],["body","会获取该接口的所有实现类 并再调用 onStartUp 时 传递给客户端"],["body","\n"],["h1","示例"],["body","\n"],["body","\n"],["body","org.springframework.web.SpringServletContainerInitializer"],["body","\n"],["body","\n"],["body","这是springMVC启动时的加载类"],["body","\n"],["body","\tpublic void onStartup(@Nullable Set<Class<?>> webAppInitializerClasses, ServletContext servletContext)\n\t\t\tthrows ServletException {\n\n\t\tList<WebApplicationInitializer> initializers = Collections.emptyList();\n\t\t//实例化所有WebApplicationInitializer\n\t\tif (webAppInitializerClasses != null) {\n\t\t\tinitializers = new ArrayList<>(webAppInitializerClasses.size());\n\t\t\tfor (Class<?> waiClass : webAppInitializerClasses) {\n\t\t\t\t// Be defensive: Some servlet containers provide us with invalid classes,\n\t\t\t\t// no matter what @HandlesTypes says...\n\t\t\t\tif (!waiClass.isInterface() && !Modifier.isAbstract(waiClass.getModifiers()) &&\n\t\t\t\t\t\tWebApplicationInitializer.class.isAssignableFrom(waiClass)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tinitializers.add((WebApplicationInitializer)\n\t\t\t\t\t\t\t\tReflectionUtils.accessibleConstructor(waiClass).newInstance());\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Throwable ex) {\n\t\t\t\t\t\tthrow new ServletException(\"Failed to instantiate WebApplicationInitializer class\", ex);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (initializers.isEmpty()) {\n\t\t\tservletContext.log(\"No Spring WebApplicationInitializer types detected on classpath\");\n\t\t\treturn;\n\t\t}\n\n\t\tservletContext.log(initializers.size() + \" Spring WebApplicationInitializers detected on classpath\");\n\t\tAnnotationAwareOrderComparator.sort(initializers);\n\t\tfor (WebApplicationInitializer initializer : initializers) {\n\t\t\tinitializer.onStartup(servletContext);\n\t\t}\n\t}\n"],["body","\n"],["body","然后配置SPI 的 service"],["body","\n"],["body","\n"],["body","文件内容为"],["body","\n"],["body","org.springframework.web.SpringServletContainerInitializer\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","24.Servlet规范/request.html"],["title","request.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Http协议参数"],["body","\n"],["body","POST参数可用时"],["body","\n"],["body","1。该请求是一个 HTTP或 HTTPS请求。\n2。HTTP方法是 POST。\n3。内容类型是 application/x-www-form-urlencoded\n4。该 servlet已经对 request 对象的任意 getParameter方法进行了初始调用"],["body","\n"],["body","容器从 URI查询字符串和 POST 数据中填充参数。"],["body","\n"],["body","参数以一系列的名-值对的形式保存。"],["body","\n"],["body","任何给定的参数的名称可存在多个参数值。\nServletRequest 接口的下列方法可访问这些参数："],["body","\n\n"],["body","getParameter"],["body","\n"],["body","getParameterNames"],["body","\n"],["body","getParameterValues"],["body","\n"],["body","getParameterMap"],["body","\n\n"],["h1","文件上传"],["body","\n"],["body","\n"],["body","当数据以 multipart/form-data的格式发送时，servlet 容器支持文件上传"],["body","\n"],["body","\n"],["body","坑点1"],["body","\n\n"],["body","\n"],["body","会有两种输入流 FileInputStream ByteArrayInputStream"],["body","\n"],["body","\n"],["body","\n"],["body","InputStream 每调用一次都会 包装一遍,导致ByteArrayInputStream维护的变量失效"],["body","\n"],["body","DiskFileItem.getInputStream"],["body","\n"],["body","{\n        if (!isInMemory()) {\n            return new FileInputStream(dfos.getFile());\n        }\n\n        if (cachedContent == null) {\n            cachedContent = dfos.getData();\n        }\n        return new ByteArrayInputStream(cachedContent);\n    }\n"],["body","\n"],["body","\n\n"],["body","注解 MultipartConfig"],["body","\n\n"],["body","使得servlet支持 文件上传"],["body","\n"],["body","location 指定临时文件位置"],["body","\n"],["body","maxFileSize 指定文件最大大小"],["body","\n"],["body","maxRequestSize 指定请求头最大大小"],["body","\n"],["body","fileSizeThreshold 指定文件 多少被写进磁盘"],["body","\n\n"],["h1","属性"],["body","\n"],["body","■ getAttribute\n■ getAttributeNames\n■ setAttribute"],["body","\n"],["body","只有一个属性值可与一个属性名称相关联。以前缀 java.和 javax.开头的属性名称是本规范的保留定义。\n同样地，以前缀 sun.和 com.sun.，oracle 和 com.oracle 开头的属性名是 Oracle Corporation 的保留定\n义。建议属性集中所有属性的命名与 Java 编程语言的规范 1 为包命名建议的反向域名约定一致"],["body","\n"],["h1","头"],["body","\n"],["body","■ getHeader\n■ getHeaders\n■ getHeaderNames"],["body","\n"],["h1","请求路径"],["body","\n"],["body","**Context Path ** 项目路径"],["body","\n"],["body","Servlet Path servletpath"],["body","\n"],["body","PathInfo"],["body","\n"],["body","requestURI = contextPath + servletPath + pathInfo"],["body","\n"],["body","/catalog/lawn/index.html \n\tContextPath: /catalog\n\tServletPath: /lawn\n\tPathInfo: /index.html\n/catalog/garden/implements/ \n\tContextPath: /catalog\n\tServletPath: /garden\n\tPathInfo: /implements/\n/catalog/help/feedback.jsp \n\tContextPath: /catalog\n\tServletPath: /help/feedback.jsp\n\tPathInfo: null\n"],["body","\n"],["body","路径转换方法\n在 API中有两个方便的方法，允许开发者获得与某个特定的路径等价的文件系统路径。这些方法是："],["body","\n\n"],["body","\n"],["body","ServletContext.getRealPath"],["body","\n"],["body","\n"],["body","\n"],["body","HttpServletRequest.getPathTranslated\ngetRealPath 方法需要一个字符串参数，并返回一个字符串形式的路径，这个路径对应一个在本地文件系统\n上的文件。getPathTranslated 方法推断出请求的 pathInfo 的实际路径（译者注：把 URL 中 servlet 名称之后，\n查询字符串之前的路径信息转化成实际的路径）。\n这些方法在 servlet 容器无法确定一个有效的文件路径 的情况下，如 Web 应用程序从归档中，在不能访问\n本地的远程文件系统上，或在一个数据库中执行时，这些方法必须返回null。JAR文件中META-INF/resources\n目录下的资源，只有当调用 getRealPath()方法时才认为容器已经从包含它的 JAR 文件中解压，在这种情况\n下，必须返回解压缩后位置"],["body","\n"],["body","\n\n"],["h1","非阻塞IO"],["body","\n"],["body","\n"],["body","非阻塞 IO 仅对在 Servlet 和 Filter（“异步处理”）中的异步请求处理和升级处理\n（“升级处理”）有效"],["body","\n"],["body","\n"],["body","ReadListener"],["body","\n"],["body","onDataAvailable"],["body","\n"],["body","onAllDataRead"],["body","\n"],["body","onError"],["body","\n"],["h1","Cookie"],["body","\n"],["body","HttpOnly cookie 暗示客户端它们不会暴\n露给客户端脚本代码"],["body","\n"],["h1","SSL属性"],["body","\n"],["body","协议属性"],["body","\n"],["body","属性"],["body","属性名称"],["body","Java 类型"],["body","\n"],["body","密码套件"],["body","javax.servlet.request.cipher_suite"],["body","String"],["body","\n"],["body","算法的位大小"],["body","javax.servlet.request.key_size"],["body","Integer"],["body","\n"],["body","SSL 会话 id"],["body","javax.servlet.request.ssl_session_id"],["body","String"],["body","\n\n\n"],["body","如果有一个与请求相关的 SSL 证书，它必须由 servlet 容器以 java.security.cert.X509Certificate 类型的对象数组暴露给 servlet 程序员并可通过一个 javax.servlet.request.X509Certificate 类型的 ServletRequest 属性访问。\n这个数组的顺序是按照信任的升序顺序。证书链中的第一个证书是由客户端设置的，第二个是用来验证第\n一个的，等等。"],["body","\n"],["h1","国际化"],["body","\n"],["body","getLocale\ngetLocales"],["body","\n"],["body","getLocale 方法将返回客户端要接受内容的首选语言环境。要了解更多关于 Accept-Language 头必须被解\n释为确定客户端首选语言的信息，请参阅 RFC 2616（HTTP/1.1）14.4 节。\ngetLocales 方法将返回一个 Locale 对象的枚举，从首选语言环境开始顺序递减，这些语言环境是可被客户\n接受的语言环境。\n如果客户端没有指定首选语言环境，getLocale方法返回的语言环境必须是 servlet容器默认的语言环境，而\ngetLocales方法必须返回只包含一个默认语言环境的 Local 元素的枚举。"],["body","\n"],["h1","请求数据编码"],["body","\n"],["body","目前，许多浏览器不随着 Content-Type 头一起发送字符编码限定符，而是根据读取 HTTP 请求确定字符编码。如果客户端请求没有指定请求默认的字符编码，容器用来创建请求读取器和解析 POST 数据的编码必须是“ISO-8859-1”。然而，为了向开发人员说明客户端没有指定请求默认的字符编码，在这种情况下，客户端发送字符编码失败，容器从 getCharacterEncoding方法返回 null。\n如果客户端没有设置字符编码，并使用不同的编码来编码请求数据，而不是使用上面描述的默认的字符编\n码 ， 那 么 可 能 会 发 生 破 坏 。 为 了 弥 补 这 种 情 况 ， ServletRequest 接 口 添 加 了 一 个 新 的 方 法\nsetCharacterEncoding(String enc)。"],["body","\n"],["body","开发人员可以通过调用此方法来覆盖由容器提供的字符编码。必须在解析任何 post 数据或从请求读取任何输入之前调用此方法。"],["body","\n"],["body","此方法一旦调用，将不会影响已经读取的数据的编码。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","24.Servlet规范/session.html"],["title","session.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","会话"],["body","\n"],["body","\n"],["body","超文本传输协议（HTTP）被设计为一种无状态协议。为构建有效的 Web 应用，必须与来自一个特定的客户端的请求彼此是相互关联。随时间的推移，演变了许多会话跟踪机制，这些机制直接使用对程序员而言是困难或麻烦的。"],["body","\n"],["body","\n"],["body","该规范定义了一个简单的 HttpSession 接口，允许 servlet 容器使用几种方法来跟踪用户会话，而不会使应用开发人员陷入到这些方法的细节中。"],["body","\n"],["h1","会话跟踪机制"],["body","\n"],["headingLink","cookies"],["heading","Cookies"],["body","\n\n"],["body","\n"],["body","通过 HTTP cookie 的会话跟踪是最常用的会话跟踪机制，且所有 servlet 容器都应该支持"],["body","\n"],["body","\n"],["body","\n"],["body","容器向客户端发送一个 cookie，客户端后续到服务器的请求都将返回该 cookie，明确地将请求与会话关联。会话跟踪 cookie 的标准名字必须是 JSESSIONID，所有 3.0 兼容的容器必须支持。容器也允许通过容器指定的配置自定义会话跟踪 cookie 的名字"],["body","\n"],["body","见 SessionCookieConfig"],["body","\n"],["body","\n"],["body","\n"],["body","所有 servlet 容器必须提供能够配置容器是否标记会话跟踪 cookie 为 HttpOnly"],["body","\n"],["body","\n"],["body","\n"],["body","如果 web 应用为其会话跟踪 cookie 配置了一个自定义的名字，则如果会话 id 编码到 URL 中那么相同的自定义名字也将用于 URI 参数的名字（假如 URL 重写已开启）。"],["body","\n"],["body","\n\n"],["headingLink","ssl-会话"],["heading","SSL 会话"],["body","\n"],["body","安全套接字层，在 HTTPS 使用的加密技术，有一种内置机制允许多个来自客户端的请求被明确识别为同一会话。Servlet 容器可以很容易地使用该数据来定义会话。"],["body","\n"],["h1","URL 重写"],["body","\n"],["body","URL 重写是会话跟踪的最低标准。当客户端不接受 cookie 时，服务器可使用 URL 重写作为会话跟踪的基\n础。URL 重写涉及添加数据、会话 ID、容器解析 URL 路径从而请求与会话相关联。\n会话 ID 必须被编码为 URL 字符串中的一个路径参数。参数的名字必须是 jsessionid。下面是一个 URL 包\n含编码的路径信息的例子："],["body","\n"],["body","http://www.myserver.com/catalog/index.html;jsessionid=1234\n"],["body","\n"],["body","URL 重写在日志、书签、referer header、缓存的 HTML、URL 工具条中暴露会话标识。在支持 cookie 或 SSL\n会话的情况下，不应该使用 URL 重写作为会话跟踪机制。"],["body","\n"],["body","URL 重写在日志、书签、referer header、缓存的 HTML、URL 工具条中暴露会话标识。在支持 cookie 或 SSL\n会话的情况下，不应该使用 URL 重写作为会话跟踪机制。"],["body","\n"],["headingLink","创建会话"],["heading","创建会话"],["body","\n"],["body","如果以下之一是 true，会话被认为是“新”的：\n■ 客户端还不知道会话\n■ 客户端选择不加入会话。"],["body","\n"],["body","直到客户端“加入”到 HTTP 会话之前它都被认为是新的"],["body","\n"],["body","与每个会话相关联是一个包含唯一标识符的字符串，也被称为会话 ID。会话 ID 的值能通过调用\njavax.servlet.http.HttpSession.getId() 获 取 ， 且 能 在 创 建 后 通 过 调 用\n*javax.servlet.http.HttpServletRequest.changeSessionId()*改变"],["body","\n"],["h1","会话范围"],["body","\n"],["body","HttpSession 对象必须被限定在应用（或 servlet 上下文）级别。底层的机制，如使用 cookie 建立会话，不同的上下文可以是相同，但所引用的对象，包括包括该对象中的属性，决不能在容器上下文之间共享。\n用一个例子来说明该要求： 如果 servlet 使用 RequestDispatcher 来调用另一个 Web 应用的 servlet，任何创建的会话和被调用 servlet 所见的必须不同于来自调用会话所见的。\n此外，一个上下文的会话在请求进入那个上下文时必须是可恢复的，不管是直接访问它们关联的上下文还\n是在请求目标分派时创建的会话。"],["body","\n"],["h1","绑定 Session 属性"],["body","\n"],["body","servlet 可以按名称绑定对象属性到 HttpSession 实现，任何绑定到会话的对象可用于任意其他的 Servlet，其\n属于同一个 ServletContext 且处理属于相同会话中的请求。\n一 些 对 象 可 能 需 要 在 它 们 被 放 进 会 话 或 从 会 话 中 移 除 时 得 到 通 知 。 这 些 信 息 可 以 从\nHttpSessionBindingListener 接口实现的对象中获取。这个接口定义了以下方法，用于标识一个对象被绑定到\n会话或从会话解除绑定时。\n■ valueBound\n■ valueUnbound\n在对象对 HttpSession 接口的 getAttribute 方法可用之前 valueBound 方法必须被调用。在对象对 HttpSession\n接口的 getAttribute 方法不可用之后 valueUnbound 方法必须被调用。"],["body","\n"],["h1","会话超时"],["body","\n"],["body","在 HTTP 协议中，当客户端不再处于活动状态时没有显示的终止信号。这意味着当客户端不再处于活跃状\n态时可以使用的唯一机制是超时时间。\nServlet 容器定义了默认的会话超时时间，且可以通过 HttpSession 接口的 getMaxInactiveInterval 方法获取。\n开发人员可以使用 HttpSession 接口的 setMaxInactiveInterval 方法改变超时时间。这些方法的超时时间以秒\n为单位。根据定义，如果超时时间设置为 0 或更小的值，会话将永不过期。会话不会生效，直到所有 servlet\n使用的会话已经退出其 service 方法。一旦会话已失效,新的请求必须不能看到该会话。"],["body","\n"],["h1","最后访问时间"],["body","\n"],["body","HttpSession 接口的 getLastAccessedTime 方法允许 servlet 确定在当前请求之前的会话的最后访问时间。当会\n话中的请求是 servlet 容器第一个处理的时该会话被认为是访问了"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","24.Servlet规范/response.html"],["title","response.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","缓冲"],["body","\n"],["body","ServletResponse 接口的如下方法允许 servlet 访问和设置缓冲信息："],["body","\n"],["body","getBufferSize 如果没有使用缓冲，该方法必须返回一个 int 值 0\nsetBufferSize \nisCommitted 是否有任何响应字节已经返回到客户端\nreset 当响应没有提交时，reset 方法清空缓冲区的数据,。头信息，状态码也要被清空\nresetBuffer 将清空缓冲区中的内容，但不清空请求头和状态码\n如果响应已经提交并且 reset 或 resetBuffer 方法已被调用，则必须抛出 IllegalStateException，响应及它关联的缓冲区将保持不变\nflushBuffer 当使用缓冲区时，容器必须立即刷出填满的缓冲区内容到客户端。如果这是最早发送到客户端的数据，且认为响应被提交了\n"],["body","\n"],["h1","非阻塞 IO"],["body","\n"],["body","非阻塞 IO 仅对在 Servlet 和 Filter（“异步处理”）中的异步请求处理和升级处理\n（“升级处理”）有效。否则，当调用 ServletInputStream.setReadListener 或\nServletOutputStream.setWriteListener 方法时将抛出 IllegalStateException。"],["body","\n"],["body","WriteListener"],["body","\n"],["body","ServletOutputStream"],["body","\n"],["body","boolean isReady(). 如果往 ServletOutputStream 写会成功，则该方法返回 true，其他情况会返回 false。\n如果该方法返回 true，可以在 ServletOutputStream 上执行写操作。如果没有后续的数据能写到\nServletOutputStream，那么直到底层的数据被刷出之前该方法将一直返回 false。且在此时容器将调用\nWriteListener 的 onWritePossible 方法。随后调用该方法将返回 true。\n■ void setWriteListener(WriteListener listener). 关联 WriteListener 和当且的 ServletOutputStream，当\nServletOutputStream 可以写入数据时容器会调用 WriteListener 的回调方法。注册了 WriteListener 将开\n始非阻塞 IO。此时再切换到传统的阻塞 IO 是非法的。\n"],["body","\n"],["h1","简便方法"],["body","\n"],["body","HttpServletResponse 提供了如下简便方法：\n■ sendRedirect\n■ sendError"],["body","\n"],["body","sendRedirect 方法将设置适当的 header 和内容体,将客户端重定向到另一个地址。使用相对 URL 路径调用该方法是合法的，但是底层的容器必须将传回到客户端的相对地址转换为全路径 URL。无论出于什么原因，如 果 给 定 的 URL 是 不 完 整 的 ， 且 不 能 转 换 为 一 个 有 效 的 URL ， 那 么 该 方 法 必 须 抛 出IllegalArgumentException。\nsendError 方法将设置适当的 header 和内容体用于返回给客户端返回错误消息。可以 sendError 方法提供一个可选的 String 参数用于指定错误的内容体。\n如果响应已经提交并终止，这两个方法将对提交的响应产生负作用。"],["body","\n"],["body","这两个方法调用后 servlet 将不会产生到客户端的后续的输出。这两个方法调用后如果有数据继续写到响应，这些数据被忽略。 如果数据已经写到响应的缓冲区，但没有返回到客户端（例如，响应没有提交），则响应缓冲区中的数据必须被清空并使用这两个方法设置的数据替换。"],["body","\n"],["body","如果响应已提交，这两个方法必须抛出 IllegalStateException。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","24.Servlet规范/fitler.html"],["title","fitler.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","什么是过滤器"],["body","\n"],["body","它可以改变 HTTP 请求的内容，响应，及 header 信息。过滤器通常不产生\n响应或像 servlet 那样对请求作出响应，而是修改或调整到资源的请求，修改或调整来自资源的响应。过滤器可以作用于动态或静态内容。"],["body","\n"],["h1","过滤器组件示例"],["body","\n"],["body","■ 验证过滤器\n■ 日志记录和审计过滤器\n■ 图像转换过滤器\n■ 数据压缩过滤器\n■ 加密过滤器\n■ 词法（Tokenizing）过滤器\n■ 触发资源访问事件过滤器\n■ 转换 XML 内容的 XSL/T 过滤器\n■ MIME-类型链过滤器\n■ 缓存过滤器"],["body","\n"],["h1","Filter概念"],["body","\n"],["body","Filter 在部署描述符中通过元素声明。\n一个过滤器或一组过滤器可以通过在部署描述符中定义来为调用配置"],["body","\n"],["body","过滤器的 doFilter 方法通常会被实现为如下或如下形式的子集"],["body","\n\n"],["body","该方法检查请求的头。"],["body","\n"],["body","该方法可以用自定义的ServletRequest或HttpServletRequest实现包装请求对象为了修改请求的头或数据"],["body","\n"],["body","该方法可以用自定义的ServletResponse 或 HttpServletResponse实现包装传入doFilter方法的响应对象用\n于修改响应的头或数据。"],["body","\n\n"],["body","重试机制"],["body","\n"],["body","过滤器可能抛出一个异常以表示处理过程中出错了。如果过滤器在 doFilter 处理过程中抛出\nUnavailableException，容器必须停止处理剩下的过滤器链。 如果异常没有标识为永久的( isPermanent 属性)，它或许选择稍候重试整个链。"],["body","\n"],["body","当链中的最后的过滤器被调用，下一个实体访问的是链最后的目标 servlet 或资源"],["body","\n"],["body","在容器能把服务中的过滤器实例移除之前，容器必须先调用过滤器的 destroy 方法以便过滤器释放资源并执行其他的清理工作。"],["body","\n"],["h1","包装请求和响应"],["body","\n"],["body","过滤器的核心概念是包装请求或响应，以便它可以覆盖行为执行过滤任务。在这个模型中，开发人员不仅\n可以覆盖请求和响应对象上已有的方法，也能提供新的API以适用于对过滤器链中剩下的过滤器或目标web\n资源做特殊的过滤任务。例如，开发人员可能希望用更高级别的输出对象如 output stream 或 writer 来扩展\n响应对象，如 API，允许 DOM 对象写回客户端。\n为了支持这种风格的过滤器，容器必须支持如下要求。当过滤器调用容器的过滤器链实现的 doFilter 方法\n时，容器必须确保请求和响应对象传到过滤器链中的下一个实体，或如果过滤器是链中最后一个，将传入\n目标 web 资源，且与调用过滤器传入 doFilter 方法的对象是一样的。\n当 调 用 者 包 装 请 求 或 响 应 对 象 时 ， 对 包 装 对 象 的 要 求 同 样 适 用 于 从 servlet 或 过 滤 器 到\nRequestDispatcher.forward 或 RequestDispatcher.include 的调用。在这种情况下，调用 servlet 看到的请求和\n响应对象与调用 servlet 或过滤器传入的包装对象必须是一样的。"],["body","\n"],["h1","过滤器环境"],["body","\n"],["body","可以使用部署描述符中的元素把一组初始化参数关联到过滤器。这些参数的名字和值在过滤\n器运行期间可以使用过滤器的FilterConfig对象的getInitParameter和getInitParameterNames方法得到。另外，\nFilterConfig 提供访问 Web 应用的 ServletContext 用于加载资源，记录日志，在 ServletContext 的属性列表存\n储状态。链中最后的过滤器和目标 servlet 或资源必须执行在同一个调用线程。"],["body","\n"],["h1","在 在 Web 应用中配置过滤器"],["body","\n"],["body","@WebFilter "],["body","\n"],["body","■ filter-name: 用于映射过滤器到 servlet 或 URL\n■ filter-class: 由容器用于表示过滤器类型\n■ init-params: 过滤器的初始化参数"],["body","\n"],["body","容器必须为部署描述符中定义的\n每个过滤器声明实例化一个 Java 类实例。因此，如果开发人员对同一个过滤器类声明了两次，则容器将实例化两个相同的过滤器类的实例。"],["body","\n"],["body","定义"],["body","\n"],["body","<filter>\n<filter-name>Image Filter</filter-name>\n<filter-class>com.acme.ImageFilter</filter-class>\n</filter>\n"],["body","\n"],["body","指定servlet过滤"],["body","\n"],["body","<filter-mapping>\n<filter-name>Multipe Mappings Filter</filter-name>\n<url-pattern>/foo/*</url-pattern>\n<servlet-name>Servlet1</servlet-name>\n<servlet-name>Servlet2</servlet-name>\n<url-pattern>/bar/*</url-pattern>\n</filter-mapping>\n"],["body","\n"],["body","servlet url"],["body","\n"],["body","<filter-mapping>\n<filter-name>Logging Filter</filter-name>\n<url-pattern>/*</url-pattern>\n</filter-mapping>\n"],["body","\n\n"],["body","首先， 按照在部署描述符中的出现顺序匹配过滤器映射。"],["body","\n"],["body","接下来，按照在部署描述符中的出现顺序匹配过滤器映射。"],["body","\n\n"],["h1","过滤器和 RequestDispatcher"],["body","\n"],["body","Java Servlet 规范自从 2.4 新版本以来，能够在请求分派器 forward()和 include()调用情况下配置可被调用的\n过滤器。\n通过在部署描述符中使用新的元素，开发人员可以为 filter-mapping 指定是否想要过滤器应用到\n请求，当："],["body","\n\n"],["body","请求直接来自客户端。\n可以由一个带有 REQUEST 值的元素，或者没有任何元素来表示。\n2.使用表示匹配 或 的 Web 组件的请求分派器的 forward()调用情况下处理请求。\n可以由一个带有 FORWARD 值的元素表示。\n3.使用表示匹配 或 的 Web 组件的请求分派器的 include()调用情况下处理请求。\n50\n可以由一个带有 INCLUDE 值的元素表示。"],["body","\n"],["body","使用第 106 页“错误处理”指定的错误页面机制处理匹配的错误资源的请求。\n可以由一个带有 ERROR 值的元素表示。"],["body","\n"],["body","使用第 10 页指定的“异步处理”中的异步上下文分派机制对 web 组件使用 dispatch 调用处理请求。\n可以由一个带有 ASYNC 值的元素表示。"],["body","\n"],["body","或之上 1，2，3，4 或 5 的任何组合。"],["body","\n\n"],["body","<filter-mapping>\n<filter-name>Logging Filter</filter-name>\n<url-pattern>/products/*</url-pattern>\n</filter-mapping>\n"],["body","\n"],["body","客户端以/products/...开始的请求将导致 Logging Filter 被调用，但不是在以路径/products/...开始的请求分派\n器调用情况下。LoggingFilter 将在初始请求分派和恢复请求时被调用。如下代码："],["body","\n"],["body","<filter-mapping>\n<filter-name>Logging Filter</filter-name>\n<servlet-name>ProductServlet</servlet-name>\n<dispatcher>INCLUDE</dispatcher>\n</filter-mapping>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","24.Servlet规范/readme.html"],["title","Servlet规范 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","什么是 Servlet?"],["body","\n"],["body","基于请求-响应 模型的框架"],["body","\n\n"],["body","提供基于请求/响应发送模型的网络服务，解码基于 MIME 的请求，并且格式化基于 MIME 的响应"],["body","\n"],["body","必须支持基于 HTTP 协议的请求/响应模型"],["body","\n\n"],["body","Servlet 执行以下主要任务："],["body","\n\n"],["body","读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。"],["body","\n"],["body","读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。"],["body","\n"],["body","处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。"],["body","\n"],["body","发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。"],["body","\n"],["body","发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。"],["body","\n\n"],["h1","Servlet接口"],["body","\n"],["body","基于Http协议的servlet接口"],["body","\n"],["h1","Servlet 生命周期"],["body","\n"],["headingLink","servlet"],["heading","servlet"],["body","\n"],["body","动作"],["body","\n"],["body","init\nservice(resquest,respoonse)\ndestroy\n"],["body","\n"],["body","contextPath + servletPath = url "],["body","\n"],["h1","请求"],["body","\n"],["headingLink","请求数据获取"],["heading","请求数据获取"],["body","\n\n"],["body","**getParameter()：**您可以调用 request.getParameter() 方法来获取表单参数的值。"],["body","\n"],["body","**getParameterValues()：**如果参数出现一次以上，则调用该方法，并返回多个值，例如复选框。"],["body","\n"],["body","**getParameterNames()：**如果您想要得到当前请求中的所有参数的完整列表，则调用该方法。"],["body","\n\n"],["headingLink","请求头"],["heading","请求头"],["body","\n"],["body","头信息"],["body","描述"],["body","\n"],["body","Accept"],["body","这个头信息指定浏览器或其他客户端可以处理的 MIME 类型。值 image/png 或 image/jpeg 是最常见的两种可能值。"],["body","\n"],["body","Accept-Charset"],["body","这个头信息指定浏览器可以用来显示信息的字符集。例如 ISO-8859-1。"],["body","\n"],["body","Accept-Encoding"],["body","这个头信息指定浏览器知道如何处理的编码类型。值 gzip 或 compress 是最常见的两种可能值。"],["body","\n"],["body","Accept-Language"],["body","这个头信息指定客户端的首选语言，在这种情况下，Servlet 会产生多种语言的结果。例如，en、en-us、ru 等。"],["body","\n"],["body","Authorization"],["body","这个头信息用于客户端在访问受密码保护的网页时识别自己的身份。"],["body","\n"],["body","Connection"],["body","这个头信息指示客户端是否可以处理持久 HTTP 连接。持久连接允许客户端或其他浏览器通过单个请求来检索多个文件。值 Keep-Alive 意味着使用了持续连接。"],["body","\n"],["body","Content-Length"],["body","这个头信息只适用于 POST 请求，并给出 POST 数据的大小（以字节为单位）。"],["body","\n"],["body","Cookie"],["body","这个头信息把之前发送到浏览器的 cookies 返回到服务器。"],["body","\n"],["body","Host"],["body","这个头信息指定原始的 URL 中的主机和端口。"],["body","\n"],["body","If-Modified-Since"],["body","这个头信息表示只有当页面在指定的日期后已更改时，客户端想要的页面。如果没有新的结果可以使用，服务器会发送一个 304 代码，表示 Not Modified 头信息。"],["body","\n"],["body","If-Unmodified-Since"],["body","这个头信息是 If-Modified-Since 的对立面，它指定只有当文档早于指定日期时，操作才会成功。"],["body","\n"],["body","Referer"],["body","这个头信息指示所指向的 Web 页的 URL。例如，如果您在网页 1，点击一个链接到网页 2，当浏览器请求网页 2 时，网页 1 的 URL 就会包含在 Referer 头信息中。"],["body","\n"],["body","User-Agent"],["body","这个头信息识别发出请求的浏览器或其他客户端，并可以向不同类型的浏览器返回不同的内容。"],["body","\n\n\n"],["headingLink","api读取"],["heading","API读取"],["body","\n"],["body","序号"],["body","方法 & 描述"],["body","\n"],["body","1"],["body","Cookie[] getCookies() 返回一个数组，包含客户端发送该请求的所有的 Cookie 对象。"],["body","\n"],["body","2"],["body","Enumeration getAttributeNames() 返回一个枚举，包含提供给该请求可用的属性名称。"],["body","\n"],["body","3"],["body","Enumeration getHeaderNames() 返回一个枚举，包含在该请求中包含的所有的头名。"],["body","\n"],["body","4"],["body","Enumeration getParameterNames() 返回一个 String 对象的枚举，包含在该请求中包含的参数的名称。"],["body","\n"],["body","5"],["body","HttpSession getSession() 返回与该请求关联的当前 session 会话，或者如果请求没有 session 会话，则创建一个。"],["body","\n"],["body","6"],["body","HttpSession getSession(boolean create) 返回与该请求关联的当前 HttpSession，或者如果没有当前会话，且创建是真的，则返回一个新的 session 会话。"],["body","\n"],["body","7"],["body","Locale getLocale() 基于 Accept-Language 头，返回客户端接受内容的首选的区域设置。"],["body","\n"],["body","8"],["body","Object getAttribute(String name) 以对象形式返回已命名属性的值，如果没有给定名称的属性存在，则返回 null。"],["body","\n"],["body","9"],["body","ServletInputStream getInputStream() 使用 ServletInputStream，以二进制数据形式检索请求的主体。"],["body","\n"],["body","10"],["body","String getAuthType() 返回用于保护 Servlet 的身份验证方案的名称，例如，\"BASIC\" 或 \"SSL\"，如果JSP没有受到保护则返回 null。"],["body","\n"],["body","11"],["body","String getCharacterEncoding() 返回请求主体中使用的字符编码的名称。"],["body","\n"],["body","12"],["body","String getContentType() 返回请求主体的 MIME 类型，如果不知道类型则返回 null。"],["body","\n"],["body","13"],["body","String getContextPath() 返回指示请求上下文的请求 URI 部分。"],["body","\n"],["body","14"],["body","String getHeader(String name) 以字符串形式返回指定的请求头的值。"],["body","\n"],["body","15"],["body","String getMethod() 返回请求的 HTTP 方法的名称，例如，GET、POST 或 PUT。"],["body","\n"],["body","16"],["body","String getParameter(String name) 以字符串形式返回请求参数的值，或者如果参数不存在则返回 null。"],["body","\n"],["body","17"],["body","String getPathInfo() 当请求发出时，返回与客户端发送的 URL 相关的任何额外的路径信息。"],["body","\n"],["body","18"],["body","String getProtocol() 返回请求协议的名称和版本。"],["body","\n"],["body","19"],["body","String getQueryString() 返回包含在路径后的请求 URL 中的查询字符串。"],["body","\n"],["body","20"],["body","String getRemoteAddr() 返回发送请求的客户端的互联网协议（IP）地址。"],["body","\n"],["body","21"],["body","String getRemoteHost() 返回发送请求的客户端的完全限定名称。"],["body","\n"],["body","22"],["body","String getRemoteUser() 如果用户已通过身份验证，则返回发出请求的登录用户，或者如果用户未通过身份验证，则返回 null。"],["body","\n"],["body","23"],["body","String getRequestURI() 从协议名称直到 HTTP 请求的第一行的查询字符串中，返回该请求的 URL 的一部分。"],["body","\n"],["body","24"],["body","String getRequestedSessionId() 返回由客户端指定的 session 会话 ID。"],["body","\n"],["body","25"],["body","String getServletPath() 返回调用 JSP 的请求的 URL 的一部分。"],["body","\n"],["body","26"],["body","String[] getParameterValues(String name) 返回一个字符串对象的数组，包含所有给定的请求参数的值，如果参数不存在则返回 null。"],["body","\n"],["body","27"],["body","boolean isSecure() 返回一个布尔值，指示请求是否使用安全通道，如 HTTPS。"],["body","\n"],["body","28"],["body","int getContentLength() 以字节为单位返回请求主体的长度，并提供输入流，或者如果长度未知则返回 -1。"],["body","\n"],["body","29"],["body","int getIntHeader(String name) 返回指定的请求头的值为一个 int 值。"],["body","\n"],["body","30"],["body","int getServerPort() 返回接收到这个请求的端口号。"],["body","\n"],["body","31"],["body","int getParameterMap() 将参数封装成 Map 类型。"],["body","\n\n\n"],["h1","响应"],["body","\n"],["headingLink","响应头"],["heading","响应头"],["body","\n"],["body","头信息"],["body","描述"],["body","\n"],["body","Allow"],["body","这个头信息指定服务器支持的请求方法（GET、POST 等）。"],["body","\n"],["body","Cache-Control"],["body","这个头信息指定响应文档在何种情况下可以安全地缓存。可能的值有：public、private 或 no-cache 等。Public 意味着文档是可缓存，Private 意味着文档是单个用户私用文档，且只能存储在私有（非共享）缓存中，no-cache 意味着文档不应被缓存。"],["body","\n"],["body","Connection"],["body","这个头信息指示浏览器是否使用持久 HTTP 连接。值 close 指示浏览器不使用持久 HTTP 连接，值 keep-alive 意味着使用持久连接。"],["body","\n"],["body","Content-Disposition"],["body","这个头信息可以让您请求浏览器要求用户以给定名称的文件把响应保存到磁盘。"],["body","\n"],["body","Content-Encoding"],["body","在传输过程中，这个头信息指定页面的编码方式。"],["body","\n"],["body","Content-Language"],["body","这个头信息表示文档编写所使用的语言。例如，en、en-us、ru 等。"],["body","\n"],["body","Content-Length"],["body","这个头信息指示响应中的字节数。只有当浏览器使用持久（keep-alive）HTTP 连接时才需要这些信息。"],["body","\n"],["body","Content-Type"],["body","这个头信息提供了响应文档的 MIME（Multipurpose Internet Mail Extension）类型。"],["body","\n"],["body","Expires"],["body","这个头信息指定内容过期的时间，在这之后内容不再被缓存。"],["body","\n"],["body","Last-Modified"],["body","这个头信息指示文档的最后修改时间。然后，客户端可以缓存文件，并在以后的请求中通过 If-Modified-Since 请求头信息提供一个日期。"],["body","\n"],["body","Location"],["body","这个头信息应被包含在所有的带有状态码的响应中。在 300s 内，这会通知浏览器文档的地址。浏览器会自动重新连接到这个位置，并获取新的文档。"],["body","\n"],["body","Refresh"],["body","这个头信息指定浏览器应该如何尽快请求更新的页面。您可以指定页面刷新的秒数。"],["body","\n"],["body","Retry-After"],["body","这个头信息可以与 503（Service Unavailable 服务不可用）响应配合使用，这会告诉客户端多久就可以重复它的请求。"],["body","\n"],["body","Set-Cookie"],["body","这个头信息指定一个与页面关联的 cookie。"],["body","\n\n\n"],["headingLink","api"],["heading","API"],["body","\n"],["body","序号"],["body","方法 & 描述"],["body","\n"],["body","1"],["body","String encodeRedirectURL(String url) 为 sendRedirect 方法中使用的指定的 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。"],["body","\n"],["body","2"],["body","String encodeURL(String url) 对包含 session 会话 ID 的指定 URL 进行编码，或者如果编码不是必需的，则返回 URL 未改变。"],["body","\n"],["body","3"],["body","boolean containsHeader(String name) 返回一个布尔值，指示是否已经设置已命名的响应报头。"],["body","\n"],["body","4"],["body","boolean isCommitted() 返回一个布尔值，指示响应是否已经提交。"],["body","\n"],["body","5"],["body","void addCookie(Cookie cookie) 把指定的 cookie 添加到响应。"],["body","\n"],["body","6"],["body","void addDateHeader(String name, long date) 添加一个带有给定的名称和日期值的响应报头。"],["body","\n"],["body","7"],["body","void addHeader(String name, String value) 添加一个带有给定的名称和值的响应报头。"],["body","\n"],["body","8"],["body","void addIntHeader(String name, int value) 添加一个带有给定的名称和整数值的响应报头。"],["body","\n"],["body","9"],["body","void flushBuffer() 强制任何在缓冲区中的内容被写入到客户端。"],["body","\n"],["body","10"],["body","void reset() 清除缓冲区中存在的任何数据，包括状态码和头。"],["body","\n"],["body","11"],["body","void resetBuffer() 清除响应中基础缓冲区的内容，不清除状态码和头。"],["body","\n"],["body","12"],["body","void sendError(int sc) 使用指定的状态码发送错误响应到客户端，并清除缓冲区。"],["body","\n"],["body","13"],["body","void sendError(int sc, String msg) 使用指定的状态发送错误响应到客户端。"],["body","\n"],["body","14"],["body","void sendRedirect(String location) 使用指定的重定向位置 URL 发送临时重定向响应到客户端。"],["body","\n"],["body","15"],["body","void setBufferSize(int size) 为响应主体设置首选的缓冲区大小。"],["body","\n"],["body","16"],["body","void setCharacterEncoding(String charset) 设置被发送到客户端的响应的字符编码（MIME 字符集）例如，UTF-8。"],["body","\n"],["body","17"],["body","void setContentLength(int len) 设置在 HTTP Servlet 响应中的内容主体的长度，该方法设置 HTTP Content-Length 头。"],["body","\n"],["body","18"],["body","void setContentType(String type) 如果响应还未被提交，设置被发送到客户端的响应的内容类型。"],["body","\n"],["body","19"],["body","void setDateHeader(String name, long date) 设置一个带有给定的名称和日期值的响应报头。"],["body","\n"],["body","20"],["body","void setHeader(String name, String value) 设置一个带有给定的名称和值的响应报头。"],["body","\n"],["body","21"],["body","void setIntHeader(String name, int value) 设置一个带有给定的名称和整数值的响应报头。"],["body","\n"],["body","22"],["body","void setLocale(Locale loc) 如果响应还未被提交，设置响应的区域。"],["body","\n"],["body","23"],["body","void setStatus(int sc) 为该响应设置状态码。"],["body","\n\n\n"],["headingLink","实例"],["heading","实例"],["body","\n"],["body","  // 设置刷新自动加载时间为 5 秒\n        response.setIntHeader(\"Refresh\", 5);\n        // 设置响应内容类型\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        //使用默认时区和语言环境获得一个日历\n        Calendar cale = Calendar.getInstance();\n        //将Calendar类型转换成Date类型\n        Date tasktime=cale.getTime();\n        //设置日期输出的格式\n        SimpleDateFormat df=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n        //格式化输出\n        String nowTime = df.format(tasktime);\n        PrintWriter out = response.getWriter();\n        String title = \"自动刷新 Header 设置\";\n        String docType =\n                \"<!DOCTYPE html>\\n\";\n        out.println(docType +\n                \"<html>\\n\" +\n                \"<head><title>\" + title + \"</title></head>\\n\"+\n                \"<body bgcolor=\\\"#f0f0f0\\\">\\n\" +\n                \"<h1 align=\\\"center\\\">\" + title + \"</h1>\\n\" +\n                \"<p>当前时间是：\" + nowTime + \"</p>\\n\");\n"],["body","\n"],["h1","Http状态码"],["body","\n"],["headingLink","实例-1"],["heading","实例"],["body","\n"],["body","HTTP/1.1 200 OK\nContent-Type: text/html\nHeader2: ...\n...\nHeaderN: ...\n  (Blank Line)\n<!doctype ...>\n<html>\n<head>...</head>\n<body>\n...\n</body>\n</html>\n"],["body","\n"],["headingLink","状态码"],["heading","状态码"],["body","\n"],["body","代码"],["body","消息"],["body","描述"],["body","\n"],["body","100"],["body","Continue"],["body","只有请求的一部分已经被服务器接收，但只要它没有被拒绝，客户端应继续该请求。"],["body","\n"],["body","101"],["body","Switching Protocols"],["body","服务器切换协议。"],["body","\n"],["body","200"],["body","OK"],["body","请求成功。"],["body","\n"],["body","201"],["body","Created"],["body","该请求是完整的，并创建一个新的资源。"],["body","\n"],["body","202"],["body","Accepted"],["body","该请求被接受处理，但是该处理是不完整的。"],["body","\n"],["body","203"],["body","Non-authoritative Information"],["body","\n"],["body","204"],["body","No Content"],["body","\n"],["body","205"],["body","Reset Content"],["body","\n"],["body","206"],["body","Partial Content"],["body","\n"],["body","300"],["body","Multiple Choices"],["body","链接列表。用户可以选择一个链接，进入到该位置。最多五个地址。"],["body","\n"],["body","301"],["body","Moved Permanently"],["body","所请求的页面已经转移到一个新的 URL。"],["body","\n"],["body","302"],["body","Found"],["body","所请求的页面已经临时转移到一个新的 URL。"],["body","\n"],["body","303"],["body","See Other"],["body","所请求的页面可以在另一个不同的 URL 下被找到。"],["body","\n"],["body","304"],["body","Not Modified"],["body","\n"],["body","305"],["body","Use Proxy"],["body","\n"],["body","306"],["body","Unused"],["body","在以前的版本中使用该代码。现在已不再使用它，但代码仍被保留。"],["body","\n"],["body","307"],["body","Temporary Redirect"],["body","所请求的页面已经临时转移到一个新的 URL。"],["body","\n"],["body","400"],["body","Bad Request"],["body","服务器不理解请求。"],["body","\n"],["body","401"],["body","Unauthorized"],["body","所请求的页面需要用户名和密码。"],["body","\n"],["body","402"],["body","Payment Required"],["body","您还不能使用该代码。"],["body","\n"],["body","403"],["body","Forbidden"],["body","禁止访问所请求的页面。"],["body","\n"],["body","404"],["body","Not Found"],["body","服务器无法找到所请求的页面。."],["body","\n"],["body","405"],["body","Method Not Allowed"],["body","在请求中指定的方法是不允许的。"],["body","\n"],["body","406"],["body","Not Acceptable"],["body","服务器只生成一个不被客户端接受的响应。"],["body","\n"],["body","407"],["body","Proxy Authentication Required"],["body","在请求送达之前，您必须使用代理服务器的验证。"],["body","\n"],["body","408"],["body","Request Timeout"],["body","请求需要的时间比服务器能够等待的时间长，超时。"],["body","\n"],["body","409"],["body","Conflict"],["body","请求因为冲突无法完成。"],["body","\n"],["body","410"],["body","Gone"],["body","所请求的页面不再可用。"],["body","\n"],["body","411"],["body","Length Required"],["body","\"Content-Length\" 未定义。服务器无法处理客户端发送的不带 Content-Length 的请求信息。"],["body","\n"],["body","412"],["body","Precondition Failed"],["body","请求中给出的先决条件被服务器评估为 false。"],["body","\n"],["body","413"],["body","Request Entity Too Large"],["body","服务器不接受该请求，因为请求实体过大。"],["body","\n"],["body","414"],["body","Request-url Too Long"],["body","服务器不接受该请求，因为 URL 太长。当您转换一个 \"post\" 请求为一个带有长的查询信息的 \"get\" 请求时发生。"],["body","\n"],["body","415"],["body","Unsupported Media Type"],["body","服务器不接受该请求，因为媒体类型不被支持。"],["body","\n"],["body","417"],["body","Expectation Failed"],["body","\n"],["body","500"],["body","Internal Server Error"],["body","未完成的请求。服务器遇到了一个意外的情况。"],["body","\n"],["body","501"],["body","Not Implemented"],["body","未完成的请求。服务器不支持所需的功能。"],["body","\n"],["body","502"],["body","Bad Gateway"],["body","未完成的请求。服务器从上游服务器收到无效响应。"],["body","\n"],["body","503"],["body","Service Unavailable"],["body","未完成的请求。服务器暂时超载或死机。"],["body","\n"],["body","504"],["body","Gateway Timeout"],["body","网关超时。"],["body","\n"],["body","505"],["body","HTTP Version Not Supported"],["body","服务器不支持\"HTTP协议\"版本。"],["body","\n\n\n"],["headingLink","设置-http-状态代码的方法"],["heading","设置 HTTP 状态代码的方法"],["body","\n"],["body","下面的方法可用于在 Servlet 程序中设置 HTTP 状态码。这些方法通过 HttpServletResponse 对象可用。"],["body","\n"],["body","序号"],["body","方法 & 描述"],["body","\n"],["body","1"],["body","public void setStatus ( int statusCode ) 该方法设置一个任意的状态码。setStatus 方法接受一个 int（状态码）作为参数。如果您的响应包含了一个特殊的状态码和文档，请确保在使用 PrintWriter 实际返回任何内容之前调用 setStatus。"],["body","\n"],["body","2"],["body","public void sendRedirect(String url) 该方法生成一个 302 响应，连同一个带有新文档 URL 的 Location 头。"],["body","\n"],["body","3"],["body","public void sendError(int code, String message) 该方法发送一个状态码（通常为 404），连同一个在 HTML 文档内部自动格式化并发送到客户端的短消息。"],["body","\n\n\n"],["h1","Servlet 过滤器"],["body","\n"],["body","\n"],["body","Servlet 过滤器可以动态地拦截请求和响应，以变换或使用包含在请求或响应中的信息。"],["body","\n"],["body","\n"],["body","根据规范建议的各种类型的过滤器："],["body","\n\n"],["body","身份验证过滤器（Authentication Filters）。"],["body","\n"],["body","数据压缩过滤器（Data compression Filters）。"],["body","\n"],["body","加密过滤器（Encryption Filters）。"],["body","\n"],["body","触发资源访问事件过滤器。"],["body","\n"],["body","图像转换过滤器（Image Conversion Filters）。"],["body","\n"],["body","日志记录和审核过滤器（Logging and Auditing Filters）。"],["body","\n"],["body","MIME-TYPE 链过滤器（MIME-TYPE Chain Filters）。"],["body","\n"],["body","标记化过滤器（Tokenizing Filters）。"],["body","\n"],["body","XSL/T 过滤器（XSL/T Filters），转换 XML 内容。"],["body","\n\n"],["body","Servlet 过滤器方法"],["body","\n"],["body","过滤器是一个实现了 javax.servlet.Filter 接口的 Java 类。javax.servlet.Filter 接口定义了三个方法："],["body","\n"],["body","序号"],["body","方法 & 描述"],["body","\n"],["body","1"],["body","public void doFilter (ServletRequest, ServletResponse, FilterChain) 该方法完成实际的过滤操作，当客户端请求方法与过滤器设置匹配的URL时，Servlet容器将先调用过滤器的doFilter方法。FilterChain用户访问后续过滤器。"],["body","\n"],["body","2"],["body","public void init(FilterConfig filterConfig) web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter对象只会创建一次，init方法也只会执行一次）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。"],["body","\n"],["body","3"],["body","public void destroy() Servlet容器在销毁过滤器实例前调用该方法，在该方法中释放Servlet过滤器占用的资源。"],["body","\n\n\n"],["body","FilterConfig "],["body","\n"],["body","FilterConfig 使用, Filter 的 init 方法中提供了一个 FilterConfig 对象。"],["body","\n"],["body","如 web.xml 文件配置如下："],["body","\n"],["body","<filter>\n    <filter-name>LogFilter</filter-name>\n    <filter-class>com.runoob.test.LogFilter</filter-class>\n    <init-param>\n        <param-name>Site</param-name>\n        <param-value>菜鸟教程</param-value>\n    </init-param>\n</filter>\n\n<filter>\n  <filter-name>LogFilter</filter-name>\n  <filter-class>com.runoob.test.LogFilter</filter-class>\n  <init-param>\n    <param-name>Site</param-name>\n    <param-value>菜鸟教程</param-value>\n  </init-param>\n</filter>\n<filter-mapping>\n  <filter-name>LogFilter</filter-name>\n  <url-pattern>/*</url-pattern>\n</filter-mapping>\n"],["body","\n"],["body","在 init 方法使用 FilterConfig 对象获取参数："],["body","\n"],["body","public void  init(FilterConfig config) throws ServletException {\n    // 获取初始化参数\n    String site = config.getInitParameter(\"Site\"); \n    // 输出初始化参数\n    System.out.println(\"网站名称: \" + site); \n}\n"],["body","\n"],["body","过滤器的应用顺序"],["body","\n"],["body","web.xml 中的 filter-mapping 元素的顺序决定了 Web 容器应用过滤器到 Servlet 的顺序"],["body","\n"],["body","<dispatcher>的意义"],["body","\n"],["body","<dispatcher>指定过滤器所拦截的资源被 Servlet 容器调用的方式，可以是REQUEST,INCLUDE,FORWARD和ERROR之一，默认REQUEST。用户可以设置多个<dispatcher>子元素用来指定 Filter 对资源的多种调用方式进行拦截。"],["body","\n\n"],["body","REQUEST：当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。"],["body","\n"],["body","INCLUDE：如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。"],["body","\n"],["body","FORWARD：如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。"],["body","\n"],["body","ERROR：如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。"],["body","\n\n"],["headingLink","servlet-异常处理"],["heading","Servlet 异常处理"],["body","\n"],["body","web.xml处理"],["body","\n"],["body","<!-- servlet 定义 -->\n<servlet>\n        <servlet-name>ErrorHandler</servlet-name>\n        <servlet-class>ErrorHandler</servlet-class>\n</servlet>\n<!-- servlet 映射 -->\n<servlet-mapping>\n        <servlet-name>ErrorHandler</servlet-name>\n        <url-pattern>/ErrorHandler</url-pattern>\n</servlet-mapping>\n\n<!-- error-code 相关的错误页面 -->\n<error-page>\n    <error-code>404</error-code>\n    <location>/ErrorHandler</location>\n</error-page>\n<error-page>\n    <error-code>403</error-code>\n    <location>/ErrorHandler</location>\n</error-page>\n\n<!-- exception-type 相关的错误页面 -->\n<error-page>\n    <exception-type>\n          javax.servlet.ServletException\n    </exception-type >\n    <location>/ErrorHandler</location>\n</error-page>\n\n<error-page>\n    <exception-type>java.io.IOException</exception-type >\n    <location>/ErrorHandler</location>\n</error-page>\n\n通用的错误处理程序，那么应该定义下面的 error-page\n<error-page>\n    <exception-type>java.lang.Throwable</exception-type >\n    <location>/ErrorHandler</location>\n</error-page>\n"],["body","\n"],["body","错误处理handler"],["body","\n"],["body","{\n    Throwable throwable = (Throwable)\n    request.getAttribute(\"javax.servlet.error.exception\");\n    Integer statusCode = (Integer)\n    request.getAttribute(\"javax.servlet.error.status_code\");\n    String servletName = (String)\n    request.getAttribute(\"javax.servlet.error.servlet_name\");\n    if (servletName == null){\n        servletName = \"Unknown\";\n    }\n    String requestUri = (String)\n    request.getAttribute(\"javax.servlet.error.request_uri\");\n    if (requestUri == null){\n        requestUri = \"Unknown\";\n    }\n    // 设置响应内容类型\n    response.setContentType(\"text/html;charset=UTF-8\");\n\n    PrintWriter out = response.getWriter();\n    String title = \"Error/Exception 信息\";\n   \n    String docType = \"<!DOCTYPE html>\\n\";\n    out.println(docType +\n        \"<html>\\n\" +\n         \"<head><title>\" + title + \"</title></head>\\n\" +\n         \"<body bgcolor=\\\"#f0f0f0\\\">\\n\");\n       out.println(\"<h1>菜鸟教程异常信息实例演示</h1>\");\n       if (throwable == null && statusCode == null){\n          out.println(\"<h2>错误信息丢失</h2>\");\n          out.println(\"请返回 <a href=\\\"\" + \n        response.encodeURL(\"http://localhost:8080/\") + \n            \"\\\">主页</a>。\");\n       }else if (statusCode != null) {\n          out.println(\"错误代码 : \" + statusCode);\n    }else{\n           out.println(\"<h2>错误信息</h2>\");\n          out.println(\"Servlet Name : \" + servletName + \n                          \"</br></br>\");\n          out.println(\"异常类型 : \" + \n                          throwable.getClass( ).getName( ) + \n                          \"</br></br>\");\n          out.println(\"请求 URI: \" + requestUri + \n                          \"<br><br>\");\n          out.println(\"异常信息: \" + \n                              throwable.getMessage( ));\n       }\n       out.println(\"</body>\");\n       out.println(\"</html>\");\n}\n"],["body","\n"],["body","请求属性 - 错误/异常"],["body","\n"],["body","以下是错误处理的 Servlet 可以访问的请求属性列表，用来分析错误/异常的性质。"],["body","\n"],["body","序号"],["body","属性 & 描述"],["body","\n"],["body","1"],["body","javax.servlet.error.status_code 该属性给出状态码，状态码可被存储，并在存储为 java.lang.Integer 数据类型后可被分析。"],["body","\n"],["body","2"],["body","javax.servlet.error.exception_type 该属性给出异常类型的信息，异常类型可被存储，并在存储为 java.lang.Class 数据类型后可被分析。"],["body","\n"],["body","3"],["body","javax.servlet.error.message 该属性给出确切错误消息的信息，信息可被存储，并在存储为 java.lang.String 数据类型后可被分析。"],["body","\n"],["body","4"],["body","javax.servlet.error.request_uri 该属性给出有关 URL 调用 Servlet 的信息，信息可被存储，并在存储为 java.lang.String 数据类型后可被分析。"],["body","\n"],["body","5"],["body","javax.servlet.error.exception 该属性给出异常产生的信息，信息可被存储，并在存储为 java.lang.Throwable 数据类型后可被分析。"],["body","\n"],["body","6"],["body","javax.servlet.error.servlet_name 该属性给出 Servlet 的名称，名称可被存储，并在存储为 java.lang.String 数据类型后可被分析。"],["body","\n\n\n"],["h1","Cookie处理"],["body","\n"],["body","\n"],["body","Cookie 是存储在客户端计算机上的文本文件，并保留了各种跟踪信息"],["body","\n"],["body","\n"],["headingLink","识别返回用户包括三个步骤"],["heading","识别返回用户包括三个步骤："],["body","\n\n"],["body","服务器脚本向浏览器发送一组 Cookie。例如：姓名、年龄或识别号码等。"],["body","\n"],["body","浏览器将这些信息存储在本地计算机上，以备将来使用。"],["body","\n"],["body","当下一次浏览器向 Web 服务器发送任何请求时，浏览器会把这些 Cookie 信息发送到服务器，服务器将使用这些信息来识别用户。"],["body","\n\n"],["headingLink","编码与解码"],["heading","编码与解码"],["body","\n"],["body","Servlet Cookie 处理需要对中文进行编码与解码"],["body","\n"],["headingLink","cookie-剖析"],["heading","Cookie 剖析"],["body","\n"],["body","\n"],["body","Cookie 通常设置在 HTTP 头信息中（虽然 JavaScript 也可以直接在浏览器上设置一个 Cookie）。设置 Cookie 的 Servlet 会发送如下的头信息"],["body","\n"],["body","\n"],["body","HTTP/1.1 200 OK\nDate: Fri, 04 Feb 2000 21:03:38 GMT\nServer: Apache/1.3.9 (UNIX) PHP/4.0b3\nSet-Cookie: name=xyz; expires=Friday, 04-Feb-07 22:03:38 GMT; \n                 path=/; domain=runoob.com\nConnection: close\nContent-Type: text/html\n"],["body","\n"],["body","正如您所看到的，Set-Cookie 头包含了一个名称值对、一个 GMT 日期、一个路径和一个域。名称和值会被 URL 编码。expires 字段是一个指令，告诉浏览器在给定的时间和日期之后\"忘记\"该 Cookie。"],["body","\n"],["body","Cooke的表示信息"],["body","\n\n"],["body","名称"],["body","\n"],["body","值"],["body","\n"],["body","过期时间 GMT格式"],["body","\n"],["body","适用路径"],["body","\n"],["body","域"],["body","\n\n"],["body","API"],["body","\n"],["headingLink","servlet-cookie-方法"],["heading","Servlet Cookie 方法"],["body","\n"],["body","以下是在 Servlet 中操作 Cookie 时可使用的有用的方法列表。"],["body","\n"],["body","序号"],["body","方法 & 描述"],["body","\n"],["body","1"],["body","public void setDomain(String pattern) 该方法设置 cookie 适用的域，例如 runoob.com。"],["body","\n"],["body","2"],["body","public String getDomain() 该方法获取 cookie 适用的域，例如 runoob.com。"],["body","\n"],["body","3"],["body","public void setMaxAge(int expiry) 该方法设置 cookie 过期的时间（以秒为单位）。如果不这样设置，cookie 只会在当前 session 会话中持续有效。"],["body","\n"],["body","4"],["body","public int getMaxAge() 该方法返回 cookie 的最大生存周期（以秒为单位），默认情况下，-1 表示 cookie 将持续下去，直到浏览器关闭。"],["body","\n"],["body","5"],["body","public String getName() 该方法返回 cookie 的名称。名称在创建后不能改变。"],["body","\n"],["body","6"],["body","public void setValue(String newValue) 该方法设置与 cookie 关联的值。"],["body","\n"],["body","7"],["body","public String getValue() 该方法获取与 cookie 关联的值。"],["body","\n"],["body","8"],["body","public void setPath(String uri) 该方法设置 cookie 适用的路径。如果您不指定路径，与当前页面相同目录下的（包括子目录下的）所有 URL 都会返回 cookie。"],["body","\n"],["body","9"],["body","public String getPath() 该方法获取 cookie 适用的路径。"],["body","\n"],["body","10"],["body","public void setSecure(boolean flag) 该方法设置布尔值，表示 cookie 是否应该只在加密的（即 SSL）连接上发送。"],["body","\n"],["body","11"],["body","public void setComment(String purpose) 设置cookie的注释。该注释在浏览器向用户呈现 cookie 时非常有用。"],["body","\n"],["body","12"],["body","public String getComment() 获取 cookie 的注释，如果 cookie 没有注释则返回 null。"],["body","\n\n\n"],["body","删除cookie"],["body","\n\n"],["body","读取一个现有的 cookie，并把它存储在 Cookie 对象中。"],["body","\n"],["body","使用 setMaxAge() 方法设置 cookie 的年龄为零，来删除现有的 cookie。"],["body","\n"],["body","把这个 cookie 添加到响应头。"],["body","\n"],["body","一个负值意味着cookie不连续存储，并且在浏览器推出的时候删除。"],["body","\n\n"],["h1","Session跟踪"],["body","\n"],["body","\n"],["body","HTTP 是一种\"无状态\"协议，这意味着每次客户端检索网页时，客户端打开一个单独的连接到 Web 服务器，服务器会自动不保留之前客户端请求的任何记录。"],["body","\n"],["body","\n"],["body","但是仍然有以下三种方式来维持 Web 客户端和 Web 服务器之间的 session 会话："],["body","\n"],["headingLink","维持会话的三种方式"],["heading","维持会话的三种方式"],["body","\n"],["headingLink","cookies"],["heading","Cookies"],["body","\n"],["body","一个 Web 服务器可以分配一个唯一的 session 会话 ID 作为每个 Web 客户端的 cookie，对于客户端的后续请求可以使用接收到的 cookie 来识别。"],["body","\n"],["headingLink","隐藏的表单字段"],["heading","隐藏的表单字段"],["body","\n"],["body","一个 Web 服务器可以发送一个隐藏的 HTML 表单字段，以及一个唯一的 session 会话 ID，如下所示："],["body","\n"],["body","<input type=\"hidden\" name=\"sessionid\" value=\"12345\">\n"],["body","\n"],["body","该条目意味着，当表单被提交时，指定的名称和值会被自动包含在 GET 或 POST 数据中。每次当 Web 浏览器发送回请求时，session_id 值可以用于保持不同的 Web 浏览器的跟踪。"],["body","\n"],["body","这可能是一种保持 session 会话跟踪的有效方式，但是点击常规的超文本链接（）不会导致表单提交，因此隐藏的表单字段也不支持常规的 session 会话跟踪。"],["body","\n"],["headingLink","url-重写"],["heading","URL 重写"],["body","\n"],["body","您可以在每个 URL 末尾追加一些额外的数据来标识 session 会话，服务器会把该 session 会话标识符与已存储的有关 session 会话的数据相关联。"],["body","\n"],["body","例如，http://w3cschool.cc/file.htm;sessionid=12345，session 会话标识符被附加为 sessionid=12345，标识符可被 Web 服务器访问以识别客户端。"],["body","\n"],["body","URL 重写是一种更好的维持 session 会话的方式，它在浏览器不支持 cookie 时能够很好地工作，但是它的缺点是会动态生成每个 URL 来为页面分配一个 session 会话 ID，即使是在很简单的静态 HTML 页面中也会如此。"],["body","\n"],["headingLink","httpsession-对象"],["heading","HttpSession 对象"],["body","\n"],["body","\n"],["body","该接口提供了一种跨多个页面请求或访问网站时识别用户以及存储有关用户信息的方式。"],["body","\n"],["body","\n"],["body","序号"],["body","方法 & 描述"],["body","\n"],["body","1"],["body","public Object getAttribute(String name) 该方法返回在该 session 会话中具有指定名称的对象，如果没有指定名称的对象，则返回 null。"],["body","\n"],["body","2"],["body","public Enumeration getAttributeNames() 该方法返回 String 对象的枚举，String 对象包含所有绑定到该 session 会话的对象的名称。"],["body","\n"],["body","3"],["body","public long getCreationTime() 该方法返回该 session 会话被创建的时间，自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。"],["body","\n"],["body","4"],["body","public String getId() 该方法返回一个包含分配给该 session 会话的唯一标识符的字符串。"],["body","\n"],["body","5"],["body","public long getLastAccessedTime() 该方法返回客户端最后一次发送与该 session 会话相关的请求的时间自格林尼治标准时间 1970 年 1 月 1 日午夜算起，以毫秒为单位。"],["body","\n"],["body","6"],["body","public int getMaxInactiveInterval() 该方法返回 Servlet 容器在客户端访问时保持 session 会话打开的最大时间间隔，以秒为单位。"],["body","\n"],["body","7"],["body","public void invalidate() 该方法指示该 session 会话无效，并解除绑定到它上面的任何对象。"],["body","\n"],["body","8"],["body","public boolean isNew() 如果客户端还不知道该 session 会话，或者如果客户选择不参入该 session 会话，则该方法返回 true。"],["body","\n"],["body","9"],["body","public void removeAttribute(String name) 该方法将从该 session 会话移除指定名称的对象。"],["body","\n"],["body","10"],["body","public void setAttribute(String name, Object value) 该方法使用指定的名称绑定一个对象到该 session 会话。"],["body","\n"],["body","11"],["body","public void setMaxInactiveInterval(int interval) 该方法在 Servlet 容器指示该 session 会话无效之前，指定客户端请求之间的时间，以秒为单位。"],["body","\n\n\n"],["body","提供了"],["body","\n\n"],["body","session唯一标识"],["body","\n"],["body","session创建信息"],["body","\n"],["body","session是否有效,什么时候过期"],["body","\n"],["body","session中的属性 维护"],["body","\n\n"],["headingLink","开启session追踪实例"],["heading","开启session追踪实例"],["body","\n"],["body","  // 如果不存在 session 会话，则创建一个 session 对象\n        HttpSession session = request.getSession(true);\n        // 获取 session 创建时间\n        Date createTime = new Date(session.getCreationTime());\n        // 获取该网页的最后一次访问时间\n        Date lastAccessTime = new Date(session.getLastAccessedTime());\n         \n        //设置日期输出的格式  \n        SimpleDateFormat df=new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    \n        String title = \"Servlet Session 实例 - 菜鸟教程\";\n        Integer visitCount = new Integer(0);\n        String visitCountKey = new String(\"visitCount\");\n        String userIDKey = new String(\"userID\");\n        String userID = new String(\"Runoob\");\n        if(session.getAttribute(visitCountKey) == null) {\n            session.setAttribute(visitCountKey, new Integer(0));\n        }\n\n    \n        // 检查网页上是否有新的访问者\n        if (session.isNew()){\n            title = \"Servlet Session 实例 - 菜鸟教程\";\n             session.setAttribute(userIDKey, userID);\n        } else {\n             visitCount = (Integer)session.getAttribute(visitCountKey);\n             visitCount = visitCount + 1;\n             userID = (String)session.getAttribute(userIDKey);\n        }\n        session.setAttribute(visitCountKey,  visitCount);\n    \n        // 设置响应内容类型\n        response.setContentType(\"text/html;charset=UTF-8\");\n        PrintWriter out = response.getWriter();\n    \n        String docType = \"<!DOCTYPE html>\\n\";\n        out.println(docType +\n                \"<html>\\n\" +\n                \"<head><title>\" + title + \"</title></head>\\n\" +\n                \"<body bgcolor=\\\"#f0f0f0\\\">\\n\" +\n                \"<h1 align=\\\"center\\\">\" + title + \"</h1>\\n\" +\n                 \"<h2 align=\\\"center\\\">Session 信息</h2>\\n\" +\n                \"<table border=\\\"1\\\" align=\\\"center\\\">\\n\" +\n                \"<tr bgcolor=\\\"#949494\\\">\\n\" +\n                \"  <th>Session 信息</th><th>值</th></tr>\\n\" +\n                \"<tr>\\n\" +\n                \"  <td>id</td>\\n\" +\n                \"  <td>\" + session.getId() + \"</td></tr>\\n\" +\n                \"<tr>\\n\" +\n                \"  <td>创建时间</td>\\n\" +\n                \"  <td>\" +  df.format(createTime) + \n                \"  </td></tr>\\n\" +\n                \"<tr>\\n\" +\n                \"  <td>最后访问时间</td>\\n\" +\n                \"  <td>\" + df.format(lastAccessTime) + \n                \"  </td></tr>\\n\" +\n                \"<tr>\\n\" +\n                \"  <td>用户 ID</td>\\n\" +\n                \"  <td>\" + userID + \n                \"  </td></tr>\\n\" +\n                \"<tr>\\n\" +\n                \"  <td>访问统计：</td>\\n\" +\n                \"  <td>\" + visitCount + \"</td></tr>\\n\" +\n                \"</table>\\n\" +\n                \"</body></html>\"); \n    }\n"],["body","\n"],["headingLink","删除-session-会话数据"],["heading","删除 Session 会话数据"],["body","\n"],["body","当您完成了一个用户的 session 会话数据，您有以下几种选择："],["body","\n\n"],["body","**移除一个特定的属性：**您可以调用 public void removeAttribute(String name) 方法来删除与特定的键相关联的值。"],["body","\n"],["body","**删除整个 session 会话：**您可以调用 public void invalidate() 方法来丢弃整个 session 会话。"],["body","\n"],["body","**设置 session 会话过期时间：**您可以调用 public void setMaxInactiveInterval(int interval) 方法来单独设置 session 会话超时。"],["body","\n"],["body","**注销用户：**如果使用的是支持 servlet 2.4 的服务器，您可以调用 logout 来注销 Web 服务器的客户端，并把属于所有用户的所有 session 会话设置为无效。"],["body","\n"],["body","**web.xml 配置：**如果您使用的是 Tomcat，除了上述方法，您还可以在 web.xml 文件中配置 session 会话超时，如下所示："],["body","\n\n"],["body","  <session-config>\n    <session-timeout>15</session-timeout>\n  </session-config>\n"],["body","\n"],["body","\n"],["body","上面实例中的超时时间是以分钟为单位，将覆盖 Tomcat 中默认的 30 分钟超时时间。"],["body","\n"],["body","\n"],["body","\n"],["body","在一个 Servlet 中的 getMaxInactiveInterval() 方法会返回 session 会话的超时时间，以秒为单位。所以，如果在 web.xml 中配置 session 会话超时时间为 15 分钟，那么 getMaxInactiveInterval() 会返回 900。"],["body","\n"],["body","\n"],["h1","文件上传"],["body","\n"],["headingLink","示例"],["heading","示例"],["body","\n"],["body","{\n\n        // 检测是否为多媒体上传\n        if (!ServletFileUpload.isMultipartContent(request)) {\n            // 如果不是则停止\n            PrintWriter writer = response.getWriter();\n            writer.println(\"Error: 表单必须包含 enctype=multipart/form-data\");\n            writer.flush();\n            return;\n        }\n \n        // 配置上传参数\n        DiskFileItemFactory factory = new DiskFileItemFactory();\n        // 设置内存临界值 - 超过后将产生临时文件并存储于临时目录中\n        factory.setSizeThreshold(MEMORY_THRESHOLD);\n        // 设置临时存储目录\n        factory.setRepository(new File(System.getProperty(\"java.io.tmpdir\")));\n \n        ServletFileUpload upload = new ServletFileUpload(factory);\n         \n        // 设置最大文件上传值\n        upload.setFileSizeMax(MAX_FILE_SIZE);\n         \n        // 设置最大请求值 (包含文件和表单数据)\n        upload.setSizeMax(MAX_REQUEST_SIZE);\n\n        // 中文处理\n        upload.setHeaderEncoding(\"UTF-8\"); \n\n        // 构造临时路径来存储上传的文件\n        // 这个路径相对当前应用的目录\n        String uploadPath = request.getServletContext().getRealPath(\"./\") + File.separator + UPLOAD_DIRECTORY;\n       \n         \n        // 如果目录不存在则创建\n        File uploadDir = new File(uploadPath);\n        if (!uploadDir.exists()) {\n            uploadDir.mkdir();\n        }\n \n        try {\n            // 解析请求的内容提取文件数据\n            @SuppressWarnings(\"unchecked\")\n            List<FileItem> formItems = upload.parseRequest(request);\n \n            if (formItems != null && formItems.size() > 0) {\n                // 迭代表单数据\n                for (FileItem item : formItems) {\n                    // 处理不在表单中的字段\n                    if (!item.isFormField()) {\n                        String fileName = new File(item.getName()).getName();\n                        String filePath = uploadPath + File.separator + fileName;\n                        File storeFile = new File(filePath);\n                        storeFile.delete();\n                        // 保存文件到硬盘\n                        item.write(storeFile);\n                        request.setAttribute(\"message\",\n                            \"文件上传成功!\");\n                        HttpSession session = request.getSession();\n                        Object fileList = session.getAttribute(\"fileList\");\n                        if(fileList == null){\n                            fileList = new ArrayList<>();\n                            session.setAttribute(\"fileList\",fileList);\n                        }\n                        ((List<File>)(fileList)).add(storeFile);\n                    }\n                }\n            }\n        } catch (Exception ex) {\n            request.setAttribute(\"message\",\n                    \"错误信息: \" + ex.getMessage());\n        }\n        // 跳转到 message.jsp\n        response.sendRedirect(\"/xjq/message.jsp\");\n    }\n"],["body","\n"],["headingLink","理解"],["heading","理解"],["body","\n"],["body","由 apache的 common-io comon-file-upload 实现的  http文件上传\n包括校验 文件类型, multipart-file 文件分割符\n由 deferedOutputStream代理实现, 一开始 读入 内存, 达到 阈值之后 写入文件\n然后用户 将由 内存的文件或者 物理磁盘的文件 写入 用户的文件中\n"],["body","\n"],["h1","Servlet 国际化"],["body","\n"],["headingLink","三大术语"],["heading","三大术语"],["body","\n\n"],["body","**国际化（i18n）：**这意味着一个网站提供了不同版本的翻译成访问者的语言或国籍的内容。"],["body","\n"],["body","**本地化（l10n）：**这意味着向网站添加资源，以使其适应特定的地理或文化区域，例如网站翻译成印地文（Hindi）。"],["body","\n"],["body","**区域设置（locale）：**这是一个特殊的文化或地理区域。它通常指语言符号后跟一个下划线和一个国家符号。例如 \"en_US\" 表示针对 US 的英语区域设置。"],["body","\n\n"],["headingLink","获取locale"],["heading","获取Locale"],["body","\n"],["body","java.util.Locale request.getLocale() \n"],["body","\n"],["headingLink","localeapi"],["heading","LocaleAPI"],["body","\n"],["body","下面列出了重要的区域设置方法，您可以使用它们来检测请求者的地理位置、语言和区域设置。下面所有的方法都显示了请求者浏览器中设置的国家名称和语言名称。"],["body","\n"],["body","序号"],["body","方法 & 描述"],["body","\n"],["body","1"],["body","String getCountry() 该方法以 2 个大写字母形式的 ISO 3166 格式返回该区域设置的国家/地区代码。"],["body","\n"],["body","2"],["body","String getDisplayCountry() 该方法返回适合向用户显示的区域设置的国家的名称。"],["body","\n"],["body","3"],["body","String getLanguage() 该方法以小写字母形式的 ISO 639 格式返回该区域设置的语言代码。"],["body","\n"],["body","4"],["body","String getDisplayLanguage() 该方法返回适合向用户显示的区域设置的语言的名称。"],["body","\n"],["body","5"],["body","String getISO3Country() 该方法返回该区域设置的国家的三个字母缩写。"],["body","\n"],["body","6"],["body","String getISO3Language() 该方法返回该区域设置的语言的三个字母的缩写。"],["body","\n\n\n"],["headingLink","实例-2"],["heading","实例"],["body","\n"],["body","import java.io.*;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.util.Locale;\n\npublic class GetLocale extends HttpServlet{\n    \n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n            throws ServletException, IOException\n  {\n      // 获取客户端的区域设置\n      Locale locale = request.getLocale();\n      String language = locale.getLanguage();\n      String country = locale.getCountry();\n\n      // 设置响应内容类型\n      response.setContentType(\"text/html;charset=UTF-8\");\n      PrintWriter out = response.getWriter();\n\n      String title = \"检测区域设置\";\n      String docType = \"<!DOCTYPE html> \\n\";\n      out.println(docType +\n        \"<html>\\n\" +\n        \"<head><title>\" + title + \"</title></head>\\n\" +\n        \"<body bgcolor=\\\"#f0f0f0\\\">\\n\" +\n        \"<h1 align=\\\"center\\\">\" + language + \"</h1>\\n\" +\n        \"<h2 align=\\\"center\\\">\" + country + \"</h2>\\n\" +\n        \"</body></html>\");\n  }\n} \n"],["body","\n"],["headingLink","根据区域设定语言"],["heading","根据区域设定语言"],["body","\n"],["body","import java.io.*;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.util.Locale;\n\npublic class DisplaySpanish extends HttpServlet{\n    \n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n            throws ServletException, IOException\n  {\n    // 设置响应内容类型\n    response.setContentType(\"text/html;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n    // 设置西班牙语言代码\n    response.setHeader(\"Content-Language\", \"es\");\n\n    String title = \"En Espa&ntilde;ol\";\n    String docType = \"<!DOCTYPE html> \\n\";\n     out.println(docType +\n     \"<html>\\n\" +\n     \"<head><title>\" + title + \"</title></head>\\n\" +\n     \"<body bgcolor=\\\"#f0f0f0\\\">\\n\" +\n     \"<h1>\" + \"En Espa&ntilde;ol:\" + \"</h1>\\n\" +\n     \"<h1>\" + \"&iexcl;Hola Mundo!\" + \"</h1>\\n\" +\n     \"</body></html>\");\n  }\n} \n"],["body","\n"],["headingLink","根据区域设置日期"],["heading","根据区域设置日期"],["body","\n"],["body","import java.io.*;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.util.Locale;\nimport java.text.DateFormat;\nimport java.util.Date;\n\npublic class DateLocale extends HttpServlet{\n    \n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n            throws ServletException, IOException\n  {\n    // 设置响应内容类型\n    response.setContentType(\"text/html;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n    // 获取客户端的区域设置\n    Locale locale = request.getLocale( );\n    String date = DateFormat.getDateTimeInstance(\n                                  DateFormat.FULL, \n                                  DateFormat.SHORT, \n                                  locale).format(new Date( ));\n\n    String title = \"特定于区域设置的日期\";\n    String docType = \"<!DOCTYPE html> \\n\";\n      out.println(docType +\n      \"<html>\\n\" +\n      \"<head><title>\" + title + \"</title></head>\\n\" +\n      \"<body bgcolor=\\\"#f0f0f0\\\">\\n\" +\n      \"<h1 align=\\\"center\\\">\" + date + \"</h1>\\n\" +\n      \"</body></html>\");\n  }\n} \n"],["body","\n"],["headingLink","根据区域设置货币"],["heading","根据区域设置货币"],["body","\n"],["body","import java.io.*;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.util.Locale;\nimport java.text.NumberFormat;\nimport java.util.Date;\n\npublic class CurrencyLocale extends HttpServlet{\n    \n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n            throws ServletException, IOException\n  {\n    // 设置响应内容类型\n    response.setContentType(\"text/html;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n    // 获取客户端的区域设置\n    Locale locale = request.getLocale( );\n    NumberFormat nft = NumberFormat.getCurrencyInstance(locale);\n    String formattedCurr = nft.format(1000000);\n\n    String title = \"特定于区域设置的货币\";\n    String docType = \"<!DOCTYPE html> \\n\";\n      out.println(docType +\n      \"<html>\\n\" +\n      \"<head><title>\" + title + \"</title></head>\\n\" +\n      \"<body bgcolor=\\\"#f0f0f0\\\">\\n\" +\n      \"<h1 align=\\\"center\\\">\" + formattedCurr + \"</h1>\\n\" +\n      \"</body></html>\");\n  }\n} \n"],["body","\n"],["headingLink","根据区域设置百分比"],["heading","根据区域设置百分比"],["body","\n"],["body","import java.io.*;\nimport javax.servlet.*;\nimport javax.servlet.http.*;\nimport java.util.Locale;\nimport java.text.NumberFormat;\nimport java.util.Date;\n\npublic class PercentageLocale extends HttpServlet{\n    \n  public void doGet(HttpServletRequest request,\n                    HttpServletResponse response)\n            throws ServletException, IOException\n  {\n    // 设置响应内容类型\n    response.setContentType(\"text/html;charset=UTF-8\");\n    PrintWriter out = response.getWriter();\n    // 获取客户端的区域设置\n    Locale locale = request.getLocale( );\n    NumberFormat nft = NumberFormat.getPercentInstance(locale);\n    String formattedPerc = nft.format(0.51);\n\n    String title = \"特定于区域设置的百分比\";\n    String docType = \"<!DOCTYPE html> \\n\";\n      out.println(docType +\n      \"<html>\\n\" +\n      \"<head><title>\" + title + \"</title></head>\\n\" +\n      \"<body bgcolor=\\\"#f0f0f0\\\">\\n\" +\n      \"<h1 align=\\\"center\\\">\" + formattedPerc + \"</h1>\\n\" +\n      \"</body></html>\");\n  }\n} \n"],["body","\n"],["h1","其他"],["body","\n"],["headingLink","jsp的理解"],["heading","JSP的理解"],["body","\n"],["body","一种特殊的servlet\n含HTML的内容是 response\n含Java代码的是 get,或post\n"],["body","\n"],["headingLink","重定向"],["heading","重定向"],["body","\n"],["body","      // 设置响应内容类型\n      response.setContentType(\"text/html;charset=UTF-8\");\n\n      // 要重定向的新位置\n      String site = new String(\"http://www.runoob.com\");\n\n      response.setStatus(response.SC_MOVED_TEMPORARILY);\n      response.setHeader(\"Location\", site);    \n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","09.html"],["title","Arthas - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","31.其他_JavaCommandLine/JAVA命令行工具.html"],["title","JAVA命令行工具.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","反编译-javap"],["body","\n"],["body"," -help  --help  -?        输出此用法消息\n  -version                 版本信息\n  -v  -verbose             输出附加信息\n  -l                       输出行号和本地变量表\n  -public                  仅显示公共类和成员\n  -protected               显示受保护的/公共类和成员\n  -package                 显示程序包/受保护的/公共类\n                           和成员 (默认)\n  -p  -private             显示所有类和成员\n  -c                       对代码进行反汇编\n  -s                       输出内部类型签名\n  -sysinfo                 显示正在处理的类的\n                           系统信息 (路径, 大小, 日期, MD5 散列)\n  -constants               显示最终常量\n  -classpath <path>        指定查找用户类文件的位置\n  -cp <path>               指定查找用户类文件的位置\n  -bootclasspath <path>    覆盖引导类文件的位置\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.html"],["title","未分类 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","25.ORM_MyBatis/mybatis.html"],["title","mybatis.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n"],["body","{% raw %}"],["body","\n"],["body","Mybatis通用mapper"],["body","\n"],["headingLink","sqlsession"],["heading","sqlsession"],["body","\n"],["headingLink","构建-sqlsessionfactory"],["heading","构建 SqlSessionFactory"],["body","\n"],["headingLink","重载的各个方法"],["heading","重载的各个方法"],["body","\n"],["body","SqlSessionFactory build(InputStream inputStream)\nSqlSessionFactory build(InputStream inputStream, String environment)\nSqlSessionFactory build(InputStream inputStream, Properties properties)\nSqlSessionFactory build(InputStream inputStream, String env, Properties props)\nSqlSessionFactory build(Configuration config)\n"],["body","\n"],["headingLink","从核心配置文件构建"],["heading","从核心配置文件构建"],["body","\n"],["body","String resource = \"org/mybatis/example/mybatis-config.xml\";\nInputStream inputStream = Resources.getResourceAsStream(resource);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream);\n"],["body","\n"],["headingLink","使用-java-代码构建"],["heading","使用 Java 代码构建"],["body","\n"],["body","DataSource dataSource = BlogDataSourceFactory.getBlogDataSource();\nTransactionFactory transactionFactory = new JdbcTransactionFactory();\nEnvironment environment = new Environment(\"development\", transactionFactory, dataSource);\nConfiguration configuration = new Configuration(environment);\nconfiguration.addMapper(BlogMapper.class);\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);\n"],["body","\n"],["headingLink","构建-sqlsession"],["heading","构建 sqlsession"],["body","\n"],["headingLink","重载方法"],["heading","重载方法"],["body","\n"],["body","SqlSession openSession()\nSqlSession openSession(boolean autoCommit)\nSqlSession openSession(Connection connection)\nSqlSession openSession(TransactionIsolationLevel level)\nSqlSession openSession(ExecutorType execType, TransactionIsolationLevel level)\nSqlSession openSession(ExecutorType execType)\nSqlSession openSession(ExecutorType execType, boolean autoCommit)\nSqlSession openSession(ExecutorType execType, Connection connection)\nConfiguration getConfiguration();\n"],["body","\n"],["body","进行数据库操作要考虑的问题"],["body","\n\n"],["body","数据库连接"],["body","\n"],["body","事务处理"],["body","\n"],["body","语句执行"],["body","\n\n"],["body","默认的 openSession() 方法没有参数，它会创建具备如下特性的 SqlSession："],["body","\n\n"],["body","事务作用域将会开启（也就是不自动提交）。"],["body","\n"],["body","将由当前环境配置的 DataSource 实例中获取 Connection 对象。"],["body","\n"],["body","事务隔离级别将会使用驱动或数据源的默认设置。"],["body","\n"],["body","预处理语句不会被复用，也不会批量处理更新。"],["body","\n\n"],["headingLink","executortype"],["heading","ExecutorType"],["body","\n\n"],["body","ExecutorType.SIMPLE：该类型的执行器没有特别的行为。它为每个语句的执行创建一个新的预处理语句。"],["body","\n"],["body","ExecutorType.REUSE：该类型的执行器会复用预处理语句。"],["body","\n"],["body","ExecutorType.BATCH：该类型的执行器会批量执行所有更新语句，如果 SELECT 在多个更新中间执行，将在必要时将多条更新语句分隔开来，以方便理解。"],["body","\n\n"],["headingLink","语句执行"],["heading","语句执行"],["body","\n"],["headingLink","语句执行方法"],["heading","语句执行方法"],["body","\n"],["body","<T> T selectOne(String statement, Object parameter)\n<E> List<E> selectList(String statement, Object parameter)\n<T> Cursor<T> selectCursor(String statement, Object parameter)\n<K,V> Map<K,V> selectMap(String statement, Object parameter, String mapKey)\nint insert(String statement, Object parameter)\nint update(String statement, Object parameter)\nint delete(String statement, Object parameter)\n"],["body","\n"],["body","游标（Cursor）与列表（List）返回的结果相同，不同的是，游标借助迭代器实现了数据的惰性加载。"],["body","\n"],["headingLink","限制返回行数"],["heading","限制返回行数"],["body","\n"],["body","<E> List<E> selectList (String statement, Object parameter, RowBounds rowBounds)\n<T> Cursor<T> selectCursor(String statement, Object parameter, RowBounds rowBounds)\n<K,V> Map<K,V> selectMap(String statement, Object parameter, String mapKey, RowBounds rowbounds)\nvoid select (String statement, Object parameter, ResultHandler<T> handler)\nvoid select (String statement, Object parameter, RowBounds rowBounds, ResultHandler<T> handler)\n"],["body","\n"],["body","RowBounds rowBounds = new RowBounds(offset, limit);\n"],["body","\n\n"],["body","\n"],["body","数据库驱动决定了略过记录时的查询效率。为了获得最佳的性能，建议将 ResultSet 类型设置为 SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE（换句话说：不要使用 FORWARD_ONLY）。"],["body","\n"],["body","\n"],["body","\n"],["body","如果 PreparedStatement 对象初始化时 resultSetType 参数设置为 TYPE_FORWARD_ONLY，在从 ResultSet（结果集）中读取记录的时，对于访问过的记录就自动释放了内存。而设置为 TYPE_SCROLL_INSENSITIVE 或 TYPE_SCROLL_SENSITIVE 时为了保证能游标能向上移动到任意位置，已经访问过的所有都保留在内存中不能释放。所以大量数据加载的时候，就 OOM 了。"],["body","\n"],["body","\n\n"],["headingLink","结果行自定义处理"],["heading","结果行自定义处理"],["body","\n"],["body","从版本 3.4.6 开始，ResultHandler 会在存储过程的 REFCURSOR 输出参数中传递使用的 CALLABLE 语句。"],["body","\n"],["body","package org.apache.ibatis.session;\npublic interface ResultHandler<T> {\n  void handleResult(ResultContext<? extends T> context);\n}\n"],["body","\n"],["body","ResultContext 参数允许你访问结果对象和当前已被创建的对象数目，另外还提供了一个返回值为 Boolean 的 stop 方法，你可以使用此 stop 方法来停止 MyBatis 加载更多的结果。"],["body","\n"],["body","使用 ResultHandler 的时候需要注意以下两个限制："],["body","\n\n"],["body","使用带 ResultHandler 参数的方法时，收到的数据不会被缓存。"],["body","\n"],["body","当使用高级的结果映射集（resultMap）时，MyBatis 很可能需要数行结果来构造一个对象。如果你使用了 ResultHandler，你可能会接收到关联（association）或者集合（collection）中尚未被完整填充的对象。"],["body","\n\n"],["headingLink","立即批量更新方法"],["heading","立即批量更新方法"],["body","\n"],["body","List<BatchResult> flushStatements()\n"],["body","\n"],["body","当你将 ExecutorType 设置为 ExecutorType.BATCH 时，可以使用这个方法清除（执行）缓存在 JDBC 驱动类中的批量更新语句。"],["body","\n"],["headingLink","事务控制方法"],["heading","事务控制方法"],["body","\n"],["body","有四个方法用来控制事务作用域。"],["body","\n"],["body","如果你已经设置了自动提交或你使用了外部事务管理器"],["body","\n"],["body","这些方法就没什么作用了。然而，如果你正在使用由 Connection 实例控制的 JDBC 事务管理器，那么这四个方法就会派上用场："],["body","\n"],["body","void commit()\nvoid commit(boolean force)\nvoid rollback()\nvoid rollback(boolean force)\n"],["body","\n"],["headingLink","configuration配置"],["heading","configuration（配置）"],["body","\n"],["headingLink","properties属性"],["heading","properties（属性）"],["body","\n"],["headingLink","可以外部配置可以字面写入"],["heading","可以外部配置,可以字面写入"],["body","\n"],["body","<properties resource=\"org/mybatis/example/config.properties\">\n  <property name=\"username\" value=\"dev_user\"/>\n  <property name=\"password\" value=\"F2Fa3!33TYyg\"/>\n</properties>\n"],["body","\n"],["headingLink","可以使用载入的配置"],["heading","可以使用载入的配置"],["body","\n"],["body","\n<dataSource type=\"POOLED\">\n  <property name=\"driver\" value=\"${driver}\"/>\n  <property name=\"url\" value=\"${url}\"/>\n  <property name=\"username\" value=\"${username}\"/>\n  <property name=\"password\" value=\"${password}\"/>\n</dataSource>\n"],["body","\n"],["headingLink","代码传入变量"],["heading","代码传入变量"],["body","\n"],["body","可以通过\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, props);传入变量\n"],["body","\n"],["headingLink","变量优先级"],["heading","变量优先级"],["body","\n"],["body","变量优先级\nproperties标签体内的属性 < properties指定的resource < 方法传入的properties\n"],["body","\n"],["headingLink","默认值"],["heading","默认值"],["body","\n"],["body","开启占位符功能\n<properties resource=\"org/mybatis/example/config.properties\">\n  <!-- ... -->\n  <property name=\"org.apache.ibatis.parsing.PropertyParser.enable-default-value\" value=\"true\"/> <!-- 启用默认值特性 -->\n</properties>\n\n<property name=\"username\" value=\"${username:ut_user}\"/>\n\n"],["body","\n"],["headingLink","设置"],["heading","设置"],["body","\n\n"],["body","\n"],["body","useActualParamName true|false"],["body","\n\n"],["body","\n"],["body","允许使用方法签名中的名称作为语句参数名称"],["body","\n"],["body","\n"],["body","\n"],["body","采用 Java 8 编译，并且加上 -parameters 选项"],["body","\n"],["body","\n"],["body","\n"],["body","(新增于 3.4.1)"],["body","\n"],["body","\n\n"],["body","\n\n"],["headingLink","typealiases类型别名"],["heading","typeAliases（类型别名）"],["body","\n"],["headingLink","类型别名"],["heading","类型别名"],["body","\n"],["body","<typeAliases>\n  <typeAlias alias=\"Author\" type=\"domain.blog.Author\"/>\n  <typeAlias alias=\"Blog\" type=\"domain.blog.Blog\"/>\n  <typeAlias alias=\"Comment\" type=\"domain.blog.Comment\"/>\n  <typeAlias alias=\"Post\" type=\"domain.blog.Post\"/>\n  <typeAlias alias=\"Section\" type=\"domain.blog.Section\"/>\n  <typeAlias alias=\"Tag\" type=\"domain.blog.Tag\"/>\n</typeAliases>\n"],["body","\n"],["headingLink","指定包名"],["heading","指定包名"],["body","\n"],["body","<typeAliases>\n  <package name=\"domain.blog\"/>\n</typeAliases>\n"],["body","\n"],["headingLink","注解"],["heading","注解"],["body","\n"],["body","@Alias(\"author\")\n"],["body","\n"],["headingLink","typehandlers类型处理器"],["heading","typeHandlers（类型处理器）"],["body","\n"],["headingLink","内置类型处理器"],["heading","内置类型处理器"],["body","\n"],["body","从 3.4.5 开始，MyBatis 默认支持 JSR-310"],["body","\n"],["body","类型处理器"],["body","Java 类型"],["body","JDBC 类型"],["body","\n"],["body","BooleanTypeHandler"],["body","java.lang.Boolean, boolean"],["body","数据库兼容的 BOOLEAN"],["body","\n"],["body","ByteTypeHandler"],["body","java.lang.Byte, byte"],["body","数据库兼容的 NUMERIC 或 BYTE"],["body","\n"],["body","ShortTypeHandler"],["body","java.lang.Short, short"],["body","数据库兼容的 NUMERIC 或 SMALLINT"],["body","\n"],["body","IntegerTypeHandler"],["body","java.lang.Integer, int"],["body","数据库兼容的 NUMERIC 或 INTEGER"],["body","\n"],["body","LongTypeHandler"],["body","java.lang.Long, long"],["body","数据库兼容的 NUMERIC 或 BIGINT"],["body","\n"],["body","FloatTypeHandler"],["body","java.lang.Float, float"],["body","数据库兼容的 NUMERIC 或 FLOAT"],["body","\n"],["body","DoubleTypeHandler"],["body","java.lang.Double, double"],["body","数据库兼容的 NUMERIC 或 DOUBLE"],["body","\n"],["body","BigDecimalTypeHandler"],["body","java.math.BigDecimal"],["body","数据库兼容的 NUMERIC 或 DECIMAL"],["body","\n"],["body","StringTypeHandler"],["body","java.lang.String"],["body","CHAR, VARCHAR"],["body","\n"],["body","ClobReaderTypeHandler"],["body","java.io.Reader"],["body","-"],["body","\n"],["body","ClobTypeHandler"],["body","java.lang.String"],["body","CLOB, LONGVARCHAR"],["body","\n"],["body","NStringTypeHandler"],["body","java.lang.String"],["body","NVARCHAR, NCHAR"],["body","\n"],["body","NClobTypeHandler"],["body","java.lang.String"],["body","NCLOB"],["body","\n"],["body","BlobInputStreamTypeHandler"],["body","java.io.InputStream"],["body","-"],["body","\n"],["body","ByteArrayTypeHandler"],["body","byte[]"],["body","数据库兼容的字节流类型"],["body","\n"],["body","BlobTypeHandler"],["body","byte[]"],["body","BLOB, LONGVARBINARY"],["body","\n"],["body","DateTypeHandler"],["body","java.util.Date"],["body","TIMESTAMP"],["body","\n"],["body","DateOnlyTypeHandler"],["body","java.util.Date"],["body","DATE"],["body","\n"],["body","TimeOnlyTypeHandler"],["body","java.util.Date"],["body","TIME"],["body","\n"],["body","SqlTimestampTypeHandler"],["body","java.sql.Timestamp"],["body","TIMESTAMP"],["body","\n"],["body","SqlDateTypeHandler"],["body","java.sql.Date"],["body","DATE"],["body","\n"],["body","SqlTimeTypeHandler"],["body","java.sql.Time"],["body","TIME"],["body","\n"],["body","ObjectTypeHandler"],["body","Any"],["body","OTHER 或未指定类型"],["body","\n"],["body","EnumTypeHandler"],["body","Enumeration Type"],["body","VARCHAR 或任何兼容的字符串类型，用来存储枚举的名称（而不是索引序数值）"],["body","\n"],["body","EnumOrdinalTypeHandler"],["body","Enumeration Type"],["body","任何兼容的 NUMERIC 或 DOUBLE 类型，用来存储枚举的序数值（而不是名称）。"],["body","\n"],["body","SqlxmlTypeHandler"],["body","java.lang.String"],["body","SQLXML"],["body","\n"],["body","InstantTypeHandler"],["body","java.time.Instant"],["body","TIMESTAMP"],["body","\n"],["body","LocalDateTimeTypeHandler"],["body","java.time.LocalDateTime"],["body","TIMESTAMP"],["body","\n"],["body","LocalDateTypeHandler"],["body","java.time.LocalDate"],["body","DATE"],["body","\n"],["body","LocalTimeTypeHandler"],["body","java.time.LocalTime"],["body","TIME"],["body","\n"],["body","OffsetDateTimeTypeHandler"],["body","java.time.OffsetDateTime"],["body","TIMESTAMP"],["body","\n"],["body","OffsetTimeTypeHandler"],["body","java.time.OffsetTime"],["body","TIME"],["body","\n"],["body","ZonedDateTimeTypeHandler"],["body","java.time.ZonedDateTime"],["body","TIMESTAMP"],["body","\n"],["body","YearTypeHandler"],["body","java.time.Year"],["body","INTEGER"],["body","\n"],["body","MonthTypeHandler"],["body","java.time.Month"],["body","INTEGER"],["body","\n"],["body","YearMonthTypeHandler"],["body","java.time.YearMonth"],["body","VARCHAR 或 LONGVARCHAR"],["body","\n"],["body","JapaneseDateTypeHandler"],["body","java.time.chrono.JapaneseDate"],["body","DATE"],["body","\n\n\n"],["headingLink","自定义类型转换器"],["heading","自定义类型转换器"],["body","\n\n"],["body","\n"],["body","实现 org.apache.ibatis.type.TypeHandler 接口"],["body","\n"],["body","\n"],["body","\n"],["body","或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler"],["body","\n"],["body","\n\n"],["body","@MappedJdbcTypes(JdbcType.VARCHAR)\npublic class ExampleTypeHandler extends BaseTypeHandler<String> {\n\n  @Override\n  public void setNonNullParameter(PreparedStatement ps, int i, String parameter, JdbcType jdbcType) throws SQLException {\n    ps.setString(i, parameter);\n  }\n\n  @Override\n  public String getNullableResult(ResultSet rs, String columnName) throws SQLException {\n    return rs.getString(columnName);\n  }\n\n  @Override\n  public String getNullableResult(ResultSet rs, int columnIndex) throws SQLException {\n    return rs.getString(columnIndex);\n  }\n\n  @Override\n  public String getNullableResult(CallableStatement cs, int columnIndex) throws SQLException {\n    return cs.getString(columnIndex);\n  }\n}\n"],["body","\n"],["headingLink","映射-javatype-与-jdbctype-的方式"],["heading","映射 javaType 与 JDBCtype 的方式"],["body","\n\n"],["body","泛型"],["body","\n"],["body","@MappedTypes,@MappedJdbcTypes"],["body","\n"],["body","<typeHandlers> 标签中给定 javaType=\"String\"属性"],["body","\n\n"],["headingLink","手动给定或自动查找类型处理器"],["heading","手动给定或自动查找类型处理器"],["body","\n"],["body","注意在使用自动发现功能的时候，只能通过注解方式来指定 JDBC 的类型。"],["body","\n"],["body","<!-- mybatis-config.xml -->\n<typeHandlers>\n  <typeHandler handler=\"org.mybatis.example.ExampleTypeHandler\"/>\n</typeHandlers>\n"],["body","\n"],["body","<!-- mybatis-config.xml -->\n<typeHandlers>\n  <package name=\"org.mybatis.example\"/>\n</typeHandlers>\n"],["body","\n"],["headingLink","泛型类型处理器"],["heading","泛型类型处理器"],["body","\n\n"],["body","需要增加一个接受该类的 class 作为参数的构造器,这样 MyBatis 会在构造一个类型处理器实例的时候传入一个具体的类"],["body","\n"],["body","EnumTypeHandler 和 EnumOrdinalTypeHandler 都是泛型类型处理器"],["body","\n\n"],["body","public class GenericTypeHandler<E extends MyObject> extends BaseTypeHandler<E> {\n\n  private Class<E> type;\n\n  public GenericTypeHandler(Class<E> type) {\n    if (type == null) throw new IllegalArgumentException(\"Type argument cannot be null\");\n    this.type = type;\n  }\n"],["body","\n"],["headingLink","枚举类型"],["heading","枚举类型"],["body","\n"],["body","<!-- mybatis-config.xml -->\n<typeHandlers>\n  <typeHandler handler=\"org.apache.ibatis.type.EnumOrdinalTypeHandler\" javaType=\"java.math.RoundingMode\"/>\n</typeHandlers>\n"],["body","\n"],["body","显示的为 resultMap 指定 typehandler"],["body","\n"],["body","<result column=\"roundingMode\" property=\"roundingMode\" typeHandler=\"org.apache.ibatis.type.EnumTypeHandler\"/>\n"],["body","\n"],["headingLink","objectfactory对象工厂"],["heading","objectFactory（对象工厂）"],["body","\n"],["headingLink","简述"],["heading","简述"],["body","\n\n"],["body","每次 MyBatis 创建结果对象的新实例时，它都会使用一个对象工厂实例来完成实例化工作"],["body","\n"],["body","默认的对象工厂需要做的仅仅是实例化目标类"],["body","\n"],["body","要么通过默认无参构造方法，要么通过存在的参数映射来调用带有参数的构造方法"],["body","\n"],["body","如果想覆盖对象工厂的默认行为，可以通过创建自己的对象工厂来实现"],["body","\n\n"],["headingLink","自定义对象工厂"],["heading","自定义对象工厂"],["body","\n"],["body","public class ExampleObjectFactory extends DefaultObjectFactory {\n  public Object create(Class type) {\n    return super.create(type);\n  }\n  public Object create(Class type, List<Class> constructorArgTypes, List<Object> constructorArgs) {\n    return super.create(type, constructorArgTypes, constructorArgs);\n  }\n  public void setProperties(Properties properties) {\n    super.setProperties(properties);\n  }\n  public <T> boolean isCollection(Class<T> type) {\n    return Collection.class.isAssignableFrom(type);\n  }}\n"],["body","\n"],["headingLink","配置"],["heading","配置"],["body","\n"],["body","<objectFactory type=\"org.mybatis.example.ExampleObjectFactory\">\n  <property name=\"someProperty\" value=\"100\"/>\n</objectFactory>\n"],["body","\n"],["headingLink","plugins插件"],["heading","plugins（插件）"],["body","\n"],["headingLink","简述-1"],["heading","简述"],["body","\n\n"],["body","MyBatis 允许你在映射语句执行过程中的某一点进行拦截调用"],["body","\n"],["body","可以拦截的列表\n\n"],["body","Executor (update, query, flushStatements, commit, rollback, getTransaction, close, isClosed)"],["body","\n"],["body","ParameterHandler (getParameterObject, setParameters)"],["body","\n"],["body","ResultSetHandler (handleResultSets, handleOutputParameters)"],["body","\n"],["body","StatementHandler (prepare, parameterize, batch, update, query)"],["body","\n\n"],["body","\n\n"],["headingLink","自定义插件"],["heading","自定义插件"],["body","\n"],["body","@Intercepts({@Signature(\n  type= Executor.class,\n  method = \"update\",\n  args = {MappedStatement.class,Object.class})})\npublic class ExamplePlugin implements Interceptor {\n  private Properties properties = new Properties();\n  public Object intercept(Invocation invocation) throws Throwable {\n    // implement pre processing if need\n    Object returnObject = invocation.proceed();\n    // implement post processing if need\n    return returnObject;\n  }\n  public void setProperties(Properties properties) {\n    this.properties = properties;\n  }\n}\n"],["body","\n"],["body","<!-- mybatis-config.xml -->\n<plugins>\n  <plugin interceptor=\"org.mybatis.example.ExamplePlugin\">\n    <property name=\"someProperty\" value=\"100\"/>\n  </plugin>\n</plugins>\n"],["body","\n"],["headingLink","覆盖配置类"],["heading","覆盖配置类"],["body","\n\n"],["body","除了用插件来修改 MyBatis 核心行为以外,还可以通过完全覆盖配置类来达到目的"],["body","\n"],["body","只需继承配置类后覆盖其中的某个方法，再把它传递到 SqlSessionFactoryBuilder.build(myConfig) 方法即可"],["body","\n"],["body","这可能会极大影响 MyBatis 的行为，务请慎之又慎"],["body","\n\n"],["headingLink","environments环境配置"],["heading","environments（环境配置）"],["body","\n"],["headingLink","简述-2"],["heading","简述"],["body","\n\n"],["body","MyBatis 可以配置成适应多种环境,多数据库"],["body","\n"],["body","每个数据库对应一个 SqlSessionFactory 实例,每个 SqlSessionFactory 实例只能选择一种环境。"],["body","\n\n"],["body","SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment);\nSqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, properties);\n"],["body","\n"],["headingLink","environment-定义了如何配置数据库环境"],["heading","environment 定义了如何配置数据库环境"],["body","\n"],["body","<environments default=\"development\">\n  <environment id=\"development\">\n    <transactionManager type=\"JDBC\">\n      <property name=\"...\" value=\"...\"/>\n    </transactionManager>\n    <dataSource type=\"POOLED\">\n      <property name=\"driver\" value=\"${driver}\"/>\n      <property name=\"url\" value=\"${url}\"/>\n      <property name=\"username\" value=\"${username}\"/>\n      <property name=\"password\" value=\"${password}\"/>\n    </dataSource>\n  </environment>\n</environments>\n"],["body","\n"],["headingLink","transactionmanager事务管理器"],["heading","transactionManager（事务管理器）"],["body","\n"],["headingLink","mybatis-中有两种类型的事务管理器也就是-typejdbcmanaged"],["heading","MyBatis 中有两种类型的事务管理器（也就是 type=\"[JDBC|MANAGED]\"）："],["body","\n\n"],["body","\n"],["body","jdbc"],["body","\n"],["body","JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。"],["body","\n"],["body","\n"],["body","\n"],["body","MANAGED"],["body","\n\n"],["body","不做任何操作,让容器来管理事务的整个生命周期"],["body","\n"],["body","默认情况下它会关闭连接,然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为"],["body","\n\n"],["body","<transactionManager type=\"MANAGED\">\n  <property name=\"closeConnection\" value=\"false\"/>\n</transactionManager>\n"],["body","\n"],["body","\n"],["body","\n"],["body","使用 Spring + MyBatis，则没有必要配置事务管理器,Spring 模块会使用自带的管理器来覆盖前面的配置。"],["body","\n"],["body","\n\n"],["headingLink","自定义事务工厂事务处理类"],["heading","自定义事务工厂,事务处理类"],["body","\n"],["body","public interface TransactionFactory {\n  default void setProperties(Properties props) { // 从 3.5.2 开始，该方法为默认方法\n    // 空实现\n  }\n  Transaction newTransaction(Connection conn);\n  Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);\n}\npublic interface Transaction {\n  Connection getConnection() throws SQLException;\n  void commit() throws SQLException;\n  void rollback() throws SQLException;\n  void close() throws SQLException;\n  Integer getTimeout() throws SQLException;\n}\n"],["body","\n"],["headingLink","datasource数据源"],["heading","dataSource（数据源）"],["body","\n\n"],["body","\n"],["body","dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源"],["body","\n"],["body","\n"],["body","\n"],["body","有三种内建的数据源类型（也就是 type=\"[UNPOOLED|POOLED|JNDI]\"）："],["body","\n\n"],["body","unpooled\n\n"],["body","driver – 这是 JDBC 驱动的 Java 类全限定名（并不是 JDBC 驱动中可能包含的数据源类）。"],["body","\n"],["body","url – 这是数据库的 JDBC URL 地址。"],["body","\n"],["body","username – 登录数据库的用户名。"],["body","\n"],["body","password – 登录数据库的密码。"],["body","\n"],["body","defaultTransactionIsolationLevel – 默认的连接事务隔离级别。"],["body","\n"],["body","defaultNetworkTimeout – 等待数据库操作完成的默认网络超时时间（单位：毫秒）。查看 java.sql.Connection#setNetworkTimeout() 的 API 文档以获取更多信息。"],["body","\n"],["body","driver.encoding=UTF8,这将通过 DriverManager.getConnection(url, driverProperties) 方法传递值为 UTF8 的 encoding 属性给数据库驱动。"],["body","\n\n"],["body","\n"],["body","pooled\n\n"],["body","poolMaximumActiveConnections – 在任意时间可存在的活动（正在使用）连接数量，默认值：10"],["body","\n"],["body","poolMaximumIdleConnections – 任意时间可能存在的空闲连接数。"],["body","\n"],["body","poolMaximumCheckoutTime – 在被强制返回之前，池中连接被检出（checked out）时间，默认值：20000 毫秒（即 20 秒）"],["body","\n"],["body","poolTimeToWait – 这是一个底层设置，如果获取连接花费了相当长的时间，连接池会打印状态日志并重新尝试获取一个连接（避免在误配置的情况下一直失败且不打印日志），默认值：20000 毫秒（即 20 秒）。"],["body","\n"],["body","poolMaximumLocalBadConnectionTolerance – 这是一个关于坏连接容忍度的底层设置， 作用于每一个尝试从缓存池获取连接的线程。 如果这个线程获取到的是一个坏的连接，那么这个数据源允许这个线程尝试重新获取一个新的连接，但是这个重新尝试的次数不应该超过 poolMaximumIdleConnections 与 poolMaximumLocalBadConnectionTolerance 之和。 默认值：3（新增于 3.4.5）"],["body","\n"],["body","poolPingQuery – 发送到数据库的侦测查询，用来检验连接是否正常工作并准备接受请求。默认是“NO PING QUERY SET”，这会导致多数数据库驱动出错时返回恰当的错误消息。"],["body","\n"],["body","poolPingEnabled – 是否启用侦测查询。若开启，需要设置 poolPingQuery 属性为一个可执行的 SQL 语句（最好是一个速度非常快的 SQL 语句），默认值：false。"],["body","\n"],["body","poolPingConnectionsNotUsedFor – 配置 poolPingQuery 的频率。可以被设置为和数据库连接超时时间一样，来避免不必要的侦测，默认值：0（即所有连接每一时刻都被侦测 — 当然仅当 poolPingEnabled 为 true 时适用）。"],["body","\n\n"],["body","\n"],["body","JNDI:这个数据源实现是为了能在如 EJB 或应用服务器这类容器中使用\n\n"],["body","initial_context – 这个属性用来在 InitialContext 中寻找上下文（即，initialContext.lookup(initial_context)）。这是个可选属性，如果忽略，那么将会直接从 InitialContext 中寻找 data_source 属性。"],["body","\n"],["body","data_source – 这是引用数据源实例位置的上下文路径。提供了 initial_context 配置时会在其返回的上下文中进行查找，没有提供时则直接在 InitialContext 中查找"],["body","\n\n"],["body","\n\n"],["body","\n"],["body","\n"],["body","自定义数据源"],["body","\n"],["body","public interface DataSourceFactory {\n  void setProperties(Properties props);\n  DataSource getDataSource();\n}\n<dataSource type=\"org.myproject.C3P0DataSourceFactory\">\n  <property name=\"driver\" value=\"org.postgresql.Driver\"/>\n  <property name=\"url\" value=\"jdbc:postgresql:mydb\"/>\n  <property name=\"username\" value=\"postgres\"/>\n  <property name=\"password\" value=\"root\"/>\n</dataSource>\n"],["body","\n"],["body","\n\n"],["body","databaseIdProvider（数据库厂商标识）"],["body","\n\n"],["body","\n"],["body","MyBatis 可以根据不同的数据库厂商执行不同的语句"],["body","\n"],["body","\n"],["body","\n"],["body","这种多厂商的支持是基于映射语句中的 databaseId 属性"],["body","\n"],["body","\n"],["body","\n"],["body","MyBatis 会加载带有匹配当前数据库 databaseId 属性和所有不带 databaseId 属性的语句。 如果同时找到带有 databaseId 和不带 databaseId 的相同语句，则后者会被舍弃"],["body","\n"],["body","<databaseIdProvider type=\"DB_VENDOR\" />\n\n对应的 DB_VENDOR 实现会将 databaseId 设置为 DatabaseMetaData#getDatabaseProductName() 返回的字符串\n"],["body","\n\n  \n  \n  \n\n"],["body","\n"],["body","\n"],["body","\n"],["body","\n"],["body","自定义数据库别名解析"],["body","\n"],["body","public interface DatabaseIdProvider {\n  default void setProperties(Properties p) { // 从 3.5.2 开始，该方法为默认方法\n    // 空实现\n  }\n  String getDatabaseId(DataSource dataSource) throws SQLException;\n}\n"],["body","\n"],["body","\n\n"],["headingLink","mappers-配置映射器"],["heading","mappers 配置（映射器）"],["body","\n"],["body","告诉 MyBatis 到哪里去找到这些语句"],["body","\n"],["body","<!-- 使用相对于类路径的资源引用 -->\n<mappers>\n  <mapper resource=\"org/mybatis/builder/AuthorMapper.xml\"/>\n  <mapper resource=\"org/mybatis/builder/BlogMapper.xml\"/>\n  <mapper resource=\"org/mybatis/builder/PostMapper.xml\"/>\n</mappers>\n"],["body","\n"],["body","<!-- 使用完全限定资源定位符（URL） -->\n<mappers>\n  <mapper url=\"file:///var/mappers/AuthorMapper.xml\"/>\n  <mapper url=\"file:///var/mappers/BlogMapper.xml\"/>\n  <mapper url=\"file:///var/mappers/PostMapper.xml\"/>\n</mappers>\n"],["body","\n"],["body","<!-- 使用映射器接口实现类的完全限定类名 -->\n<mappers>\n  <mapper class=\"org.mybatis.builder.AuthorMapper\"/>\n  <mapper class=\"org.mybatis.builder.BlogMapper\"/>\n  <mapper class=\"org.mybatis.builder.PostMapper\"/>\n</mappers>\n"],["body","\n"],["body","<!-- 将包内的映射器接口实现全部注册为映射器 -->\n<mappers>\n  <package name=\"org.mybatis.builder\"/>\n</mappers>\n"],["body","\n"],["headingLink","xml-映射文件"],["heading","XML 映射文件"],["body","\n"],["headingLink","xml-顶级元素"],["heading","XML 顶级元素"],["body","\n"],["body","cache – 该命名空间的缓存配置。"],["body","\n"],["body","cache-ref – 引用其它命名空间的缓存配置。"],["body","\n"],["body","resultMap – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。"],["body","\n"],["body","parameterMap – 老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参数映射。文档中不会介绍此元素。"],["body","\n"],["body","sql – 可被其它语句引用的可重用语句块。"],["body","\n"],["body","insert – 映射插入语句。"],["body","\n"],["body","update – 映射更新语句。"],["body","\n"],["body","delete – 映射删除语句。"],["body","\n"],["body","select – 映射查询语句。"],["body","\n"],["headingLink","select-元素属性"],["heading","select 元素属性"],["body","\n"],["body","id"],["body","在命名空间中唯一的标识符，可以被用来引用这条语句。"],["body","\n"],["body","parameterType"],["body","将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。"],["body","\n"],["body","parameterMap"],["body","用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。"],["body","\n"],["body","resultType"],["body","期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。"],["body","\n"],["body","resultMap"],["body","对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。"],["body","\n"],["body","flushCache"],["body","将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：false。"],["body","\n"],["body","useCache"],["body","将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。"],["body","\n"],["body","timeout"],["body","这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。"],["body","\n"],["body","fetchSize"],["body","这是一个给驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值。 默认值为未设置（unset）（依赖驱动）。"],["body","\n"],["body","statementType"],["body","可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。"],["body","\n"],["body","resultSetType"],["body","FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）。"],["body","\n"],["body","databaseId"],["body","如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。"],["body","\n"],["body","resultOrdered"],["body","这个设置仅针对嵌套结果 select 语句：如果为 true，将会假设包含了嵌套结果集或是分组，当返回一个主结果行时，就不会产生对前面结果集的引用。 这就使得在获取嵌套结果集的时候不至于内存不够用。默认值：false。"],["body","\n"],["body","resultSets"],["body","这个设置仅适用于多结果集的情况。它将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔。"],["body","\n\n\n"],["headingLink","insertupdatedelete"],["heading","insert,update,delete"],["body","\n"],["body","属性"],["body","描述"],["body","\n"],["body","id"],["body","在命名空间中唯一的标识符，可以被用来引用这条语句。"],["body","\n"],["body","parameterType"],["body","将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。"],["body","\n"],["body","parameterMap"],["body","用于引用外部 parameterMap 的属性，目前已被废弃。请使用行内参数映射和 parameterType 属性。"],["body","\n"],["body","flushCache"],["body","将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。"],["body","\n"],["body","timeout"],["body","这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。"],["body","\n"],["body","statementType"],["body","可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。"],["body","\n"],["body","useGeneratedKeys"],["body","（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。"],["body","\n"],["body","keyProperty"],["body","（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（unset）。如果生成列不止一个，可以用逗号分隔多个属性名称。"],["body","\n"],["body","keyColumn"],["body","（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。"],["body","\n"],["body","databaseId"],["body","如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。"],["body","\n\n\n"],["headingLink","使用-selectkey"],["heading","使用 selectKey"],["body","\n"],["body","<insert id=\"insertAuthor\">\n  <selectKey keyProperty=\"id\" resultType=\"int\" order=\"BEFORE\">\n    select CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.SYSDUMMY1\n  </selectKey>\n  insert into Author\n    (id, username, password, email,bio, favourite_section)\n  values\n    (#{id}, #{username}, #{password}, #{email}, #{bio}, #{favouriteSection,jdbcType=VARCHAR})\n</insert>\n\n<selectKey\n  keyProperty=\"id\"\n  resultType=\"int\"\n  order=\"BEFORE\"\n  statementType=\"PREPARED\">\n"],["body","\n"],["headingLink","使用-sql-片段"],["heading","使用 sql 片段"],["body","\n"],["body","定义\n<sql id=\"userColumns\"> ${alias}.id,${alias}.username,${alias}.password </sql>\n\n使用\n<select id=\"select\" resultType=\"map\">\n  select\n    field1, field2, field3\n  <include refid=\"someinclude\">\n    <property name=\"prefix\" value=\"Some\"/>\n    <property name=\"include_target\" value=\"sometable\"/>\n  </include>\n</select>\n\n"],["body","\n"],["headingLink","参数"],["heading","参数"],["body","\n"],["body","大多时候，你只须简单指定属性名，顶多要为可能为空的列指定 jdbcType，其他的事情交给 MyBatis 自己去推断就行了。"],["body","\n"],["body","简单类型的参数引用\n#{id}\n指定java与jdbc类型\n#{property,javaType=int,jdbcType=NUMERIC}\n指定类型处理器\n#{age,javaType=int,jdbcType=NUMERIC,typeHandler=MyTypeHandler}\n数值类型使用精度\n#{height,javaType=double,jdbcType=NUMERIC,numericScale=2}\n当参数模式时 out时 可能会修改\n#{department, mode=OUT, jdbcType=CURSOR, javaType=ResultSet, resultMap=departmentResultMap}\njdbcType为游标时\n#{department, mode=OUT, jdbcType=CURSOR, javaType=ResultSet, resultMap=departmentResultMap}\n\n"],["body","\n"],["headingLink","字符串替换"],["heading","字符串替换"],["body","\n\n"],["body","使用 #{} 参数语法时，MyBatis 会创建 PreparedStatement 参数占位符"],["body","\n\n"],["body","ORDER BY ${columnName}\n\n@Select(\"select * from user where ${column} = #{value}\")\nUser findByColumn(@Param(\"column\") String column, @Param(\"value\") String value);\n\n"],["body","\n"],["headingLink","结果映射resultmap"],["heading","结果映射（resultMap）"],["body","\n"],["headingLink","resultmap-的子元素"],["heading","resultMap 的子元素"],["body","\n\n"],["body","\n"],["body","constructor"],["body","\n"],["body","- 用于在实例化类时，注入结果到构造方法中"],["body","\n\n"],["body","idArg - ID 参数；标记出作为 ID 的结果可以帮助提高整体性能"],["body","\n"],["body","arg - 将被注入到构造方法的一个普通结果"],["body","\n\n"],["body","\n"],["body","\n"],["body","id – 一个 ID 结果；标记出作为 ID 的结果可以帮助提高整体性能"],["body","\n"],["body","\n"],["body","\n"],["body","result – 注入到字段或 JavaBean 属性的普通结果"],["body","\n"],["body","\n"],["body","\n"],["body","association– 一个复杂类型的关联；许多结果将包装成这种类型"],["body","\n\n"],["body","嵌套结果映射 – 关联可以是 resultMap 元素，或是对其它结果映射的引用"],["body","\n\n"],["body","\n"],["body","\n"],["body","collection– 一个复杂类型的集合"],["body","\n\n"],["body","嵌套结果映射 – 集合可以是 resultMap 元素，或是对其它结果映射的引用"],["body","\n\n"],["body","\n"],["body","\n"],["body","discriminator– 使用结果值来决定使用哪个 resultMap"],["body","\n\n"],["body","case– 基于某些值的结果映射"],["body","\n"],["body","嵌套结果映射 – case 也是一个结果映射，因此具有相同的结构和元素；或者引用其它的结果映射"],["body","\n\n"],["body","\n\n"],["headingLink","resultmap-属性"],["heading","resultMap 属性"],["body","\n"],["body","属性"],["body","描述"],["body","\n"],["body","id"],["body","当前命名空间中的一个唯一标识，用于标识一个结果映射。"],["body","\n"],["body","type"],["body","类的完全限定名, 或者一个类型别名（关于内置的类型别名，可以参考上面的表格）。"],["body","\n"],["body","autoMapping"],["body","如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。默认值：未设置（unset）"],["body","\n\n\n"],["headingLink","id--result-元素"],["heading","id & result 元素"],["body","\n\n"],["body","数据库字段名,字段类型"],["body","\n"],["body","Java 属性名,属性类型"],["body","\n"],["body","类型处理器"],["body","\n\n"],["headingLink","支持的-jdbc-类型"],["heading","支持的 JDBC 类型"],["body","\n"],["body","BIT"],["body","FLOAT"],["body","CHAR"],["body","TIMESTAMP"],["body","OTHER"],["body","UNDEFINED"],["body","\n"],["body","TINYINT"],["body","REAL"],["body","VARCHAR"],["body","BINARY"],["body","BLOB"],["body","NVARCHAR"],["body","\n"],["body","SMALLINT"],["body","DOUBLE"],["body","LONGVARCHAR"],["body","VARBINARY"],["body","CLOB"],["body","NCHAR"],["body","\n"],["body","INTEGER"],["body","NUMERIC"],["body","DATE"],["body","LONGVARBINARY"],["body","BOOLEAN"],["body","NCLOB"],["body","\n"],["body","BIGINT"],["body","DECIMAL"],["body","TIME"],["body","NULL"],["body","CURSOR"],["body","ARRAY"],["body","\n\n\n"],["headingLink","constructor"],["heading","constructor"],["body","\n"],["body","<constructor>\n   <idArg column=\"id\" javaType=\"int\"/>\n   <arg column=\"username\" javaType=\"String\"/>\n   <arg column=\"age\" javaType=\"_int\"/>\n</constructor>\n"],["body","\n"],["body","从版本 3.4.3 开始，可以在指定参数名称的前提下，以任意顺序编写 arg 元素。"],["body","\n"],["body","为了通过名称来引用构造方法参数，你可以添加 @Param 注解，或者使用 '-parameters' 编译选项并启用 useActualParamName 选项（默认开启）来编译项目"],["body","\n"],["body","constructor 的属性"],["body","\n"],["body","属性"],["body","描述"],["body","\n"],["body","column"],["body","数据库中的列名，或者是列的别名。一般情况下，这和传递给 resultSet.getString(columnName) 方法的参数一样。"],["body","\n"],["body","javaType"],["body","一个 Java 类的完全限定名，或一个类型别名（关于内置的类型别名，可以参考上面的表格）。 如果你映射到一个 JavaBean，MyBatis 通常可以推断类型。然而，如果你映射到的是 HashMap，那么你应该明确地指定 javaType 来保证行为与期望的相一致。"],["body","\n"],["body","jdbcType"],["body","JDBC 类型，所支持的 JDBC 类型参见这个表格之前的“支持的 JDBC 类型”。 只需要在可能执行插入、更新和删除的且允许空值的列上指定 JDBC 类型。这是 JDBC 的要求而非 MyBatis 的要求。如果你直接面向 JDBC 编程，你需要对可能存在空值的列指定这个类型。"],["body","\n"],["body","typeHandler"],["body","我们在前面讨论过默认的类型处理器。使用这个属性，你可以覆盖默认的类型处理器。 这个属性值是一个类型处理器实现类的完全限定名，或者是类型别名。"],["body","\n"],["body","select"],["body","用于加载复杂类型属性的映射语句的 ID，它会从 column 属性中指定的列检索数据，作为参数传递给此 select 语句。具体请参考关联元素。"],["body","\n"],["body","resultMap"],["body","结果映射的 ID，可以将嵌套的结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的 ResultSet。这样的 ResultSet 将会将包含重复或部分数据重复的结果集。为了将结果集正确地映射到嵌套的对象树中，MyBatis 允许你 “串联”结果映射，以便解决嵌套结果集的问题。想了解更多内容，请参考下面的关联元素。"],["body","\n"],["body","name"],["body","构造方法形参的名字。从 3.4.3 版本开始，通过指定具体的参数名，你可以以任意顺序写入 arg 元素。参看上面的解释。"],["body","\n\n\n"],["headingLink","关联"],["heading","关联"],["body","\n"],["body","MyBatis 有两种不同的方式加载关联："],["body","\n\n"],["body","嵌套 Select 查询：通过执行另外一个 SQL 映射语句来加载期望的复杂类型。"],["body","\n"],["body","嵌套结果映射：使用嵌套的结果映射来处理连接结果的重复子集。"],["body","\n\n"],["headingLink","关联的嵌套-select-查询的"],["heading","关联的嵌套 Select 查询的"],["body","\n"],["body","属性"],["body","描述"],["body","\n"],["body","column"],["body","数据库中的列名，或者是列的别名。一般情况下，这和传递给 resultSet.getString(columnName) 方法的参数一样。 注意：在使用复合主键的时候，你可以使用 column=\"{prop1=col1,prop2=col2}\" 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得 prop1 和 prop2 作为参数对象，被设置为对应嵌套 Select 语句的参数。"],["body","\n"],["body","select"],["body","用于加载复杂类型属性的映射语句的 ID，它会从 column 属性指定的列中检索数据，作为参数传递给目标 select 语句。 具体请参考下面的例子。注意：在使用复合主键的时候，你可以使用 column=\"{prop1=col1,prop2=col2}\" 这样的语法来指定多个传递给嵌套 Select 查询语句的列名。这会使得 prop1 和 prop2 作为参数对象，被设置为对应嵌套 Select 语句的参数。"],["body","\n"],["body","fetchType"],["body","可选的。有效值为 lazy 和 eager。 指定属性后，将在映射中忽略全局配置参数 lazyLoadingEnabled，使用属性的值。"],["body","\n\n\n"],["body","<resultMap id=\"blogResult\" type=\"Blog\">\n  <association property=\"author\" column=\"author_id\" javaType=\"Author\" select=\"selectAuthor\"/>\n</resultMap>\n\n<select id=\"selectBlog\" resultMap=\"blogResult\">\n  SELECT * FROM BLOG WHERE ID = #{id}\n</select>\n\n<select id=\"selectAuthor\" resultType=\"Author\">\n  SELECT * FROM AUTHOR WHERE ID = #{id}\n</select>\n"],["body","\n"],["headingLink","关联的嵌套结果映射"],["heading","关联的嵌套结果映射"],["body","\n"],["body","属性"],["body","描述"],["body","\n"],["body","resultMap"],["body","结果映射的 ID，可以将此关联的嵌套结果集映射到一个合适的对象树中。 它可以作为使用额外 select 语句的替代方案。它可以将多表连接操作的结果映射成一个单一的 ResultSet。这样的 ResultSet 有部分数据是重复的。 为了将结果集正确地映射到嵌套的对象树中, MyBatis 允许你“串联”结果映射，以便解决嵌套结果集的问题。使用嵌套结果映射的一个例子在表格以后。"],["body","\n"],["body","columnPrefix"],["body","当连接多个表时，你可能会不得不使用列别名来避免在 ResultSet 中产生重复的列名。指定 columnPrefix 列名前缀允许你将带有这些前缀的列映射到一个外部的结果映射中。 详细说明请参考后面的例子。"],["body","\n"],["body","notNullColumn"],["body","默认情况下，在至少一个被映射到属性的列不为空时，子对象才会被创建。 你可以在这个属性上指定非空的列来改变默认行为，指定后，Mybatis 将只在这些列非空时才创建一个子对象。可以使用逗号分隔来指定多个列。默认值：未设置（unset）。"],["body","\n"],["body","autoMapping"],["body","如果设置这个属性，MyBatis 将会为本结果映射开启或者关闭自动映射。 这个属性会覆盖全局的属性 autoMappingBehavior。注意，本属性对外部的结果映射无效，所以不能搭配 select 或 resultMap 元素使用。默认值：未设置（unset）。"],["body","\n\n\n"],["headingLink","关联的多结果集resultset"],["heading","关联的多结果集（ResultSet）"],["body","\n"],["body","SELECT * FROM BLOG WHERE ID = #{id}\n\nSELECT * FROM AUTHOR WHERE ID = #{id}\n\n<select id=\"selectBlog\" resultSets=\"blogs,authors\" resultMap=\"blogResult\" statementType=\"CALLABLE\">\n  {call getBlogsAndAuthors(#{id,jdbcType=INTEGER,mode=IN})}\n</select>\n\n<resultMap id=\"blogResult\" type=\"Blog\">\n  <id property=\"id\" column=\"id\" />\n  <result property=\"title\" column=\"title\"/>\n  <association property=\"author\" javaType=\"Author\" resultSet=\"authors\" column=\"author_id\" foreignColumn=\"id\">\n    <id property=\"id\" column=\"id\"/>\n    <result property=\"username\" column=\"username\"/>\n    <result property=\"password\" column=\"password\"/>\n    <result property=\"email\" column=\"email\"/>\n    <result property=\"bio\" column=\"bio\"/>\n  </association>\n</resultMap>\n"],["body","\n"],["body","存储过程执行下面的查询并返回两个结果集"],["body","\n"],["headingLink","集合嵌套-select-查询"],["heading","集合嵌套 select 查询"],["body","\n"],["body","<collection property=\"posts\" ofType=\"domain.blog.Post\">\n  <id property=\"id\" column=\"post_id\"/>\n  <result property=\"subject\" column=\"post_subject\"/>\n  <result property=\"body\" column=\"post_body\"/>\n</collection>\n\n<resultMap id=\"blogResult\" type=\"Blog\">\n  <collection property=\"posts\" javaType=\"ArrayList\" column=\"id\" ofType=\"Post\" select=\"selectPostsForBlog\"/>\n</resultMap>\n<select id=\"selectBlog\" resultMap=\"blogResult\">\n  SELECT * FROM BLOG WHERE ID = #{id}\n</select>\n<select id=\"selectPostsForBlog\" resultType=\"Post\">\n  SELECT * FROM POST WHERE BLOG_ID = #{id}\n</select>\n"],["body","\n"],["headingLink","集合的嵌套结果映射"],["heading","集合的嵌套结果映射"],["body","\n"],["body","<resultMap id=\"blogResult\" type=\"Blog\">\n  <id property=\"id\" column=\"blog_id\" />\n  <result property=\"title\" column=\"blog_title\"/>\n  <collection property=\"posts\" ofType=\"Post\">\n    <id property=\"id\" column=\"post_id\"/>\n    <result property=\"subject\" column=\"post_subject\"/>\n    <result property=\"body\" column=\"post_body\"/>\n  </collection>\n</resultMap>\n"],["body","\n"],["headingLink","集合的多结果集resultset"],["heading","集合的多结果集（ResultSet）"],["body","\n"],["body","<resultMap id=\"blogResult\" type=\"Blog\">\n  <id property=\"id\" column=\"id\" />\n  <result property=\"title\" column=\"title\"/>\n  <collection property=\"posts\" ofType=\"Post\" resultSet=\"posts\" column=\"id\" foreignColumn=\"blog_id\">\n    <id property=\"id\" column=\"id\"/>\n    <result property=\"subject\" column=\"subject\"/>\n    <result property=\"body\" column=\"body\"/>\n  </collection>\n</resultMap>\n"],["body","\n"],["headingLink","鉴别器"],["heading","鉴别器"],["body","\n"],["body","<discriminator javaType=\"int\" column=\"draft\">\n  <case value=\"1\" resultType=\"DraftPost\"/>\n</discriminator>\n"],["body","\n\n"],["body","\n"],["body","一个数据库查询可能会返回多个不同的结果集"],["body","\n"],["body","\n"],["body","\n"],["body","一个鉴别器的定义需要指定 column 和 javaType 属性。"],["body","\n"],["body","\n"],["body","\n"],["body","column 指定了 MyBatis 查询被比较值的地方。 而 javaType 用来确保使用正确的相等测试"],["body","\n"],["body","\n"],["body","\n"],["body","用什么字段 怎么测"],["body","\n"],["body","\n\n"],["body","<resultMap id=\"vehicleResult\" type=\"Vehicle\">\n  <id property=\"id\" column=\"id\" />\n  <result property=\"vin\" column=\"vin\"/>\n  <result property=\"year\" column=\"year\"/>\n  <result property=\"make\" column=\"make\"/>\n  <result property=\"model\" column=\"model\"/>\n  <result property=\"color\" column=\"color\"/>\n  <discriminator javaType=\"int\" column=\"vehicle_type\">\n    <case value=\"1\" resultMap=\"carResult\"/>\n    <case value=\"2\" resultMap=\"truckResult\"/>\n    <case value=\"3\" resultMap=\"vanResult\"/>\n    <case value=\"4\" resultMap=\"suvResult\"/>\n  </discriminator>\n</resultMap>\n"],["body","\n"],["headingLink","自动映射"],["heading","自动映射"],["body","\n\n"],["body","MyBatis 会获取结果中返回的列名并在 Java 类中查找相同名字的属性（忽略大小写）"],["body","\n"],["body","驼峰命名 与 下划线命名 转换 需要将 mapUnderscoreToCamelCase 设置为 true。"],["body","\n"],["body","对于每一个结果映射，在 ResultSet 出现的列，如果没有设置手动映射，将被自动映射。在自动映射处理完毕后，再处理手动映射"],["body","\n\n"],["body","有三种自动映射等级："],["body","\n\n"],["body","NONE - 禁用自动映射。仅对手动映射的属性进行映射。"],["body","\n"],["body","PARTIAL - 对除在内部定义了嵌套结果映射（也就是连接的属性）以外的属性进行映射"],["body","\n"],["body","FULL - 自动映射所有属性。"],["body","\n\n"],["headingLink","缓存"],["heading","缓存"],["body","\n\n"],["body","默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存"],["body","\n"],["body","要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行：<cache/>"],["body","\n\n"],["headingLink","缓存规则"],["heading","缓存规则"],["body","\n\n"],["body","\n"],["body","映射语句文件中的所有 select 语句的结果将会被缓存。"],["body","\n"],["body","\n"],["body","\n"],["body","映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。"],["body","\n"],["body","\n"],["body","\n"],["body","缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。"],["body","\n"],["body","\n"],["body","\n"],["body","缓存不会定时进行刷新（也就是说，没有刷新间隔）。"],["body","\n"],["body","\n"],["body","\n"],["body","缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。"],["body","\n"],["body","\n"],["body","\n"],["body","缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。"],["body","\n"],["body","<cache\n  eviction=\"FIFO\"\n  flushInterval=\"60000\"\n  size=\"512\"\n  readOnly=\"true\"/>\n"],["body","\n"],["body","\n\n"],["headingLink","清理策略"],["heading","清理策略"],["body","\n\n"],["body","LRU – 最近最少使用：移除最长时间不被使用的对象。"],["body","\n"],["body","FIFO – 先进先出：按对象进入缓存的顺序来移除它们。"],["body","\n"],["body","SOFT – 软引用：基于垃圾回收器状态和软引用规则移除对象。"],["body","\n"],["body","WEAK – 弱引用：更积极地基于垃圾收集器状态和弱引用规则移除对象。"],["body","\n\n"],["body","二级缓存是事务性的。这意味着，当 SqlSession 完成并提交时，或是完成并回滚，但没有执行 flushCache=true 的 insert/delete/update 语句时，缓存会获得更新。"],["body","\n"],["headingLink","使用自定义缓存"],["heading","使用自定义缓存"],["body","\n"],["body","<cache type=\"com.domain.something.MyCustomCache\"/>\n\npublic interface Cache {\n  String getId();\n  int getSize();\n  void putObject(Object key, Object value);\n  Object getObject(Object key);\n  boolean hasKey(Object key);\n  Object removeObject(Object key);\n  void clear();\n}\n\n<cache type=\"com.domain.something.MyCustomCache\">\n  <property name=\"cacheFile\" value=\"/tmp/my-custom-cache.tmp\"/>\n</cache>\n"],["body","\n"],["body","注意事项"],["body","\n\n"],["body","缓存的配置和缓存实例会被绑定到 SQL 映射文件的命名空间中"],["body","\n"],["body","同一命名空间中的所有语句和缓存将通过命名空间绑定在一起"],["body","\n"],["body","每条语句可以自定义与缓存交互的方式"],["body","\n"],["body","共享不同命名空间缓存"],["body","\n\n"],["body","<cache-ref namespace=\"com.someone.application.data.SomeMapper\"/>\n"],["body","\n"],["body","<select ... flushCache=\"false\" useCache=\"true\"/>\n"],["body","\n"],["headingLink","动态-sql"],["heading","动态 sql"],["body","\n"],["body","动态 sql"],["body","\n"],["headingLink","sql-语句-javaapi-构建"],["heading","sql 语句 javaAPI 构建"],["body","\n"],["headingLink","示例"],["heading","示例"],["body","\n"],["headingLink","示例-1"],["heading","示例 1"],["body","\n"],["body","private String selectPersonSql() {\n  return new SQL() {{\n    SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FULL_NAME\");\n    SELECT(\"P.LAST_NAME, P.CREATED_ON, P.UPDATED_ON\");\n    FROM(\"PERSON P\");\n    FROM(\"ACCOUNT A\");\n    INNER_JOIN(\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\");\n    INNER_JOIN(\"COMPANY C on D.COMPANY_ID = C.ID\");\n    WHERE(\"P.ID = A.ID\");\n    WHERE(\"P.FIRST_NAME like ?\");\n    OR();\n    WHERE(\"P.LAST_NAME like ?\");\n    GROUP_BY(\"P.ID\");\n    HAVING(\"P.LAST_NAME like ?\");\n    OR();\n    HAVING(\"P.FIRST_NAME like ?\");\n    ORDER_BY(\"P.ID\");\n    ORDER_BY(\"P.FULL_NAME\");\n  }}.toString();\n}\n"],["body","\n"],["headingLink","示例-2"],["heading","示例 2"],["body","\n"],["body","// 匿名内部类风格\npublic String deletePersonSql() {\n  return new SQL() {{\n    DELETE_FROM(\"PERSON\");\n    WHERE(\"ID = #{id}\");\n  }}.toString();\n}\n\n// Builder / Fluent 风格\npublic String insertPersonSql() {\n  String sql = new SQL()\n    .INSERT_INTO(\"PERSON\")\n    .VALUES(\"ID, FIRST_NAME\", \"#{id}, #{firstName}\")\n    .VALUES(\"LAST_NAME\", \"#{lastName}\")\n    .toString();\n  return sql;\n}\n\n// 动态条件（注意参数需要使用 final 修饰，以便匿名内部类对它们进行访问）\npublic String selectPersonLike(final String id, final String firstName, final String lastName) {\n  return new SQL() {{\n    SELECT(\"P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME\");\n    FROM(\"PERSON P\");\n    if (id != null) {\n      WHERE(\"P.ID like #{id}\");\n    }\n    if (firstName != null) {\n      WHERE(\"P.FIRST_NAME like #{firstName}\");\n    }\n    if (lastName != null) {\n      WHERE(\"P.LAST_NAME like #{lastName}\");\n    }\n    ORDER_BY(\"P.LAST_NAME\");\n  }}.toString();\n}\n\npublic String deletePersonSql() {\n  return new SQL() {{\n    DELETE_FROM(\"PERSON\");\n    WHERE(\"ID = #{id}\");\n  }}.toString();\n}\n\npublic String insertPersonSql() {\n  return new SQL() {{\n    INSERT_INTO(\"PERSON\");\n    VALUES(\"ID, FIRST_NAME\", \"#{id}, #{firstName}\");\n    VALUES(\"LAST_NAME\", \"#{lastName}\");\n  }}.toString();\n}\n\npublic String updatePersonSql() {\n  return new SQL() {{\n    UPDATE(\"PERSON\");\n    SET(\"FIRST_NAME = #{firstName}\");\n    WHERE(\"ID = #{id}\");\n  }}.toString();\n}\n"],["body","\n"],["headingLink","构建-sql-的-api"],["heading","构建 sql 的 API"],["body","\n"],["body","方法"],["body","描述"],["body","\n"],["body","SELECT(String)``SELECT(String...)"],["body","开始新的或追加到已有的 SELECT子句。可以被多次调用，参数会被追加到 SELECT 子句。 参数通常使用逗号分隔的列名和别名列表，但也可以是数据库驱动程序接受的任意参数。"],["body","\n"],["body","SELECT_DISTINCT(String)"],["body","SELECT_DISTINCT(String...)"],["body","开始新的或追加到已有的 SELECT子句，并添加 DISTINCT 关键字到生成的查询中。可以被多次调用，参数会被追加到 SELECT 子句。 参数通常使用逗号分隔的列名和别名列表，但也可以是数据库驱动程序接受的任意参数。"],["body","\n"],["body","FROM(String)``FROM(String...)"],["body","开始新的或追加到已有的 FROM子句。可以被多次调用，参数会被追加到 FROM子句。 参数通常是一个表名或别名，也可以是数据库驱动程序接受的任意参数。"],["body","\n"],["body","JOIN(String)"],["body","JOIN(String...)"],["body","INNER_JOIN(String)"],["body","INNER_JOIN(String...)"],["body","LEFT_OUTER_JOIN(String)"],["body","LEFT_OUTER_JOIN(String...)"],["body","RIGHT_OUTER_JOIN(String)"],["body","RIGHT_OUTER_JOIN(String...)"],["body","基于调用的方法，添加新的合适类型的 JOIN 子句。 参数可以包含一个由列和连接条件构成的标准连接。"],["body","\n"],["body","WHERE(String)"],["body","WHERE(String...)"],["body","插入新的 WHERE 子句条件，并使用 AND 拼接。可以被多次调用，对于每一次调用产生的新条件，会使用 AND 拼接起来。要使用 OR 分隔，请使用 OR()。"],["body","\n"],["body","OR()"],["body","使用 OR 来分隔当前的 WHERE 子句条件。 可以被多次调用，但在一行中多次调用会生成错误的 SQL。"],["body","\n"],["body","AND()"],["body","使用 AND 来分隔当前的 WHERE子句条件。 可以被多次调用，但在一行中多次调用会生成错误的 SQL。由于 WHERE 和 HAVING都会自动使用 AND 拼接, 因此这个方法并不常用，只是为了完整性才被定义出来。"],["body","\n"],["body","GROUP_BY(String)"],["body","GROUP_BY(String...)"],["body","追加新的 GROUP BY 子句，使用逗号拼接。可以被多次调用，每次调用都会使用逗号将新的条件拼接起来。"],["body","\n"],["body","HAVING(String)"],["body","HAVING(String...)"],["body","追加新的 HAVING 子句。使用 AND 拼接。可以被多次调用，每次调用都使用AND来拼接新的条件。要使用 OR 分隔，请使用 OR()。"],["body","\n"],["body","ORDER_BY(String)"],["body","ORDER_BY(String...)"],["body","追加新的 ORDER BY 子句，使用逗号拼接。可以多次被调用，每次调用会使用逗号拼接新的条件。"],["body","\n"],["body","LIMIT(String)``LIMIT(int)"],["body","追加新的 LIMIT 子句。 仅在 SELECT()、UPDATE()、DELETE() 时有效。 当在 SELECT() 中使用时，应该配合 OFFSET() 使用。（于 3.5.2 引入）"],["body","\n"],["body","OFFSET(String)``OFFSET(long)"],["body","追加新的 OFFSET 子句。 仅在 SELECT() 时有效。 当在 SELECT() 时使用时，应该配合 LIMIT() 使用。（于 3.5.2 引入）"],["body","\n"],["body","OFFSET_ROWS(String)"],["body","OFFSET_ROWS(long)"],["body","追加新的 OFFSET n ROWS 子句。 仅在 SELECT() 时有效。 该方法应该配合 FETCH_FIRST_ROWS_ONLY() 使用。（于 3.5.2 加入）"],["body","\n"],["body","FETCH_FIRST_ROWS_ONLY(String)"],["body","FETCH_FIRST_ROWS_ONLY(int)"],["body","追加新的 FETCH FIRST n ROWS ONLY 子句。 仅在 SELECT() 时有效。 该方法应该配合 OFFSET_ROWS() 使用。（于 3.5.2 加入）"],["body","\n"],["body","DELETE_FROM(String)"],["body","开始新的 delete 语句，并指定删除表的表名。通常它后面都会跟着一个 WHERE 子句！"],["body","\n"],["body","INSERT_INTO(String)"],["body","开始新的 insert 语句，并指定插入数据表的表名。后面应该会跟着一个或多个 VALUES() 调用，或 INTO_COLUMNS() 和 INTO_VALUES() 调用。"],["body","\n"],["body","SET(String)``SET(String...)"],["body","对 update 语句追加 \"set\" 属性的列表"],["body","\n"],["body","UPDATE(String)"],["body","开始新的 update 语句，并指定更新表的表名。后面都会跟着一个或多个 SET() 调用，通常也会有一个 WHERE() 调用。"],["body","\n"],["body","VALUES(String, String)"],["body","追加数据值到 insert 语句中。第一个参数是数据插入的列名，第二个参数则是数据值。"],["body","\n"],["body","INTO_COLUMNS(String...)"],["body","追加插入列子句到 insert 语句中。应与 INTO_VALUES() 一同使用。"],["body","\n"],["body","INTO_VALUES(String...)"],["body","追加插入值子句到 insert 语句中。应与 INTO_COLUMNS() 一同使用。"],["body","\n"],["body","ADD_ROW()"],["body","添加新的一行数据，以便执行批量插入。（于 3.5.2 引入）"],["body","\n\n\n"],["body","从版本 3.4.2 开始，你可以像下面这样使用可变长度参数："],["body","\n"],["body","public String selectPersonSql() {\n  return new SQL()\n    .SELECT(\"P.ID\", \"A.USERNAME\", \"A.PASSWORD\", \"P.FULL_NAME\", \"D.DEPARTMENT_NAME\", \"C.COMPANY_NAME\")\n    .FROM(\"PERSON P\", \"ACCOUNT A\")\n    .INNER_JOIN(\"DEPARTMENT D on D.ID = P.DEPARTMENT_ID\", \"COMPANY C on D.COMPANY_ID = C.ID\")\n    .WHERE(\"P.ID = A.ID\", \"P.FULL_NAME like #{name}\")\n    .ORDER_BY(\"P.ID\", \"P.FULL_NAME\")\n    .toString();\n}\npublic String updatePersonSql() {\n  return new SQL().UPDATE(\"PERSON\").SET(\"FULL_NAME = #{fullName}\", \"DATE_OF_BIRTH = #{dateOfBirth}\").WHERE(\"ID = #{id}\").toString();\n}\npublic String insertPersonSql() {\n  return new SQL()\n    .INSERT_INTO(\"PERSON\")\n    .INTO_COLUMNS(\"ID\", \"FULL_NAME\")\n    .INTO_VALUES(\"#{id}\", \"#{fullName}\")\n    .toString();\n}\n\n"],["body","\n"],["body",">3.5.2构建批量插入语句："],["body","\n"],["body","public String insertPersonsSql() {\n  // INSERT INTO PERSON (ID, FULL_NAME)\n  //     VALUES (#{mainPerson.id}, #{mainPerson.fullName}) , (#{subPerson.id}, #{subPerson.fullName})\n  return new SQL()\n    .INSERT_INTO(\"PERSON\")\n    .INTO_COLUMNS(\"ID\", \"FULL_NAME\")\n    .INTO_VALUES(\"#{mainPerson.id}\", \"#{mainPerson.fullName}\")\n    .ADD_ROW()\n    .INTO_VALUES(\"#{subPerson.id}\", \"#{subPerson.fullName}\")\n    .toString();\n}\n"],["body","\n"],["body",">3.5.2限制返回结果数的 SELECT 语句"],["body","\n"],["body","public String selectPersonsWithOffsetLimitSql() {\n  // SELECT id, name FROM PERSON\n  //     LIMIT #{limit} OFFSET #{offset}\n  return new SQL()\n    .SELECT(\"id\", \"name\")\n    .FROM(\"PERSON\")\n    .LIMIT(\"#{limit}\")\n    .OFFSET(\"#{offset}\")\n    .toString();\n}\n\npublic String selectPersonsWithFetchFirstSql() {\n  // SELECT id, name FROM PERSON\n  //     OFFSET #{offset} ROWS FETCH FIRST #{limit} ROWS ONLY\n  return new SQL()\n    .SELECT(\"id\", \"name\")\n    .FROM(\"PERSON\")\n    .OFFSET_ROWS(\"#{offset}\")\n    .FETCH_FIRST_ROWS_ONLY(\"#{limit}\")\n    .toString();\n}\n"],["body","\n"],["headingLink","基于注解的-sql-开发"],["heading","基于注解的 sql 开发"],["body","\n"],["headingLink","读取数据库自动生成的主键"],["heading","读取数据库自动生成的主键"],["body","\n"],["body","@Insert(\"insert into table3 (id, name) values(#{nameId}, #{name})\")\n@SelectKey(statement=\"call next value for TestSequence\", keyProperty=\"nameId\", before=true, resultType=int.class)\nint insertTable3(Name name);\n"],["body","\n"],["body","@Insert(\"insert into table2 (name) values(#{name})\")\n@SelectKey(statement=\"call identity()\", keyProperty=\"nameId\", before=false, resultType=int.class)\nint insertTable2(Name name);\n"],["body","\n"],["headingLink","自动刷新"],["heading","自动刷新"],["body","\n"],["body","@Flush\nList<BatchResult> flush();\n"],["body","\n"],["headingLink","命名结果集"],["heading","命名结果集"],["body","\n"],["body","@Results(id = \"userResult\", value = {\n  @Result(property = \"id\", column = \"uid\", id = true),\n  @Result(property = \"firstName\", column = \"first_name\"),\n  @Result(property = \"lastName\", column = \"last_name\")\n})\n@Select(\"select * from users where id = #{id}\")\nUser getUserById(Integer id);\n\n@Results(id = \"companyResults\")\n@ConstructorArgs({\n  @Arg(column = \"cid\", javaType = Integer.class, id = true),\n  @Arg(column = \"name\", javaType = String.class)\n})\n@Select(\"select * from company where id = #{id}\")\nCompany getCompanyById(Integer id);\n"],["body","\n"],["headingLink","使用-sqlprovider"],["heading","使用 sqlprovider"],["body","\n"],["body","@SelectProvider(type = UserSqlBuilder.class, method = \"buildGetUsersByName\")\nList<User> getUsersByName(String name);\n\nclass UserSqlBuilder {\n  public static String buildGetUsersByName(final String name) {\n    return new SQL(){{\n      SELECT(\"*\");\n      FROM(\"users\");\n      if (name != null) {\n        WHERE(\"name like #{value} || '%'\");\n      }\n      ORDER_BY(\"id\");\n    }}.toString();\n  }\n}\n"],["body","\n"],["body","@SelectProvider(type = UserSqlBuilder.class, method = \"buildGetUsersByName\")\nList<User> getUsersByName(String name);\n\nclass UserSqlBuilder {\n  public static String buildGetUsersByName(final String name) {\n    return new SQL(){{\n      SELECT(\"*\");\n      FROM(\"users\");\n      if (name != null) {\n        WHERE(\"name like #{value} || '%'\");\n      }\n      ORDER_BY(\"id\");\n    }}.toString();\n  }\n}\n"],["body","\n"],["body","@SelectProvider(type = UserSqlBuilder.class, method = \"buildGetUsersByName\")\nList<User> getUsersByName(\n    @Param(\"name\") String name, @Param(\"orderByColumn\") String orderByColumn);\n\nclass UserSqlBuilder {\n\n  // 如果不使用 @Param，就应该定义与 mapper 方法相同的参数\n  public static String buildGetUsersByName(\n      final String name, final String orderByColumn) {\n    return new SQL(){{\n      SELECT(\"*\");\n      FROM(\"users\");\n      WHERE(\"name like #{name} || '%'\");\n      ORDER_BY(orderByColumn);\n    }}.toString();\n  }\n\n  // 如果使用 @Param，就可以只定义需要使用的参数\n  public static String buildGetUsersByName(@Param(\"orderByColumn\") final String orderByColumn) {\n    return new SQL(){{\n      SELECT(\"*\");\n      FROM(\"users\");\n      WHERE(\"name like #{name} || '%'\");\n      ORDER_BY(orderByColumn);\n    }}.toString();\n  }\n}\n"],["body","\n"],["body","以下例子展示了 ProviderMethodResolver（3.5.1 后可用）的默认实现使用方法："],["body","\n"],["body","@SelectProvider(UserSqlProvider.class)\nList<User> getUsersByName(String name);\n\n// 在你的 provider 类中实现 ProviderMethodResolver 接口\nclass UserSqlProvider implements ProviderMethodResolver {\n  // 默认实现中，会将映射器方法的调用解析到实现的同名方法上\n  public static String getUsersByName(final String name) {\n    return new SQL(){{\n      SELECT(\"*\");\n      FROM(\"users\");\n      if (name != null) {\n        WHERE(\"name like #{value} || '%'\");\n      }\n      ORDER_BY(\"id\");\n    }}.toString();\n  }\n}\n"],["body","\n"],["body","@Select(value = \"SELECT SYS_GUID() FROM dual\", databaseId = \"oracle\") // Use this statement if DatabaseIdProvider provide \"oracle\"\n@Select(value = \"SELECT uuid_generate_v4()\", databaseId = \"postgres\") // Use this statement if DatabaseIdProvider provide \"postgres\"\n@Select(\"SELECT RANDOM_UUID()\") // Use this statement if the DatabaseIdProvider not configured or not matches databaseId\nString generateId();\n"],["body","\n"],["headingLink","日志"],["heading","日志"],["body","\n"],["headingLink","自动查找实现"],["heading","自动查找实现"],["body","\n"],["body","Mybatis 通过使用内置的日志工厂提供日志功能,内置日志工厂将会把日志工作委托给下面的实现之一"],["body","\n\n"],["body","SLF4J"],["body","\n"],["body","Apache Commons Logging"],["body","\n"],["body","Log4j 2"],["body","\n"],["body","Log4j"],["body","\n"],["body","JDK logging"],["body","\n\n"],["body","MyBatis 内置日志工厂会基于运行时检测信息选择日志委托实现。它会（按上面罗列的顺序）使用第一个查找到的实现。当没有找到这些实现时，将会禁用日志功能"],["body","\n"],["headingLink","手动配置"],["heading","手动配置"],["body","\n"],["body","<configuration>\n  <settings>\n    ...\n    <setting name=\"logImpl\" value=\"LOG4J\"/>\n    ...\n  </settings>\n</configuration>\n\n"],["body","\n"],["body","可选的值有：SLF4J、LOG4J、LOG4J2、JDK_LOGGING、COMMONS_LOGGING、STDOUT_LOGGING、NO_LOGGING，或者是实现了 org.apache.ibatis.logging.Log 接口，且构造方法以字符串为参数的类完全限定名。"],["body","\n"],["body","你也可以调用以下任一方法来选择日志实现："],["body","\n"],["body","org.apache.ibatis.logging.LogFactory.useSlf4jLogging();\norg.apache.ibatis.logging.LogFactory.useLog4JLogging();\norg.apache.ibatis.logging.LogFactory.useJdkLogging();\norg.apache.ibatis.logging.LogFactory.useCommonsLogging();\norg.apache.ibatis.logging.LogFactory.useStdOutLogging();\n"],["body","\n"],["headingLink","日志控制"],["heading","日志控制"],["body","\n"],["body","只打印特定语句的日志。以下配置将只打印语句 selectBlog 的日志"],["body","\n"],["body","log4j.logger.org.mybatis.example.BlogMapper.selectBlog=TRACE\nlog4j.logger.org.mybatis.example=TRACE\nlog4j.logger.org.mybatis.example=DEBUG -- 只查看sql语句 不查看返回结果集\n"],["body","\n"],["body","而要记录具体语句的日志，可以这样做："],["body","\n"],["body","log4j.logger.org.mybatis.example.BlogMapper.selectBlog=TRACE\n"],["body","\n\n"],["body","{% endraw %}"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","25.ORM_MyBatis/resultHandler.html"],["title","resultHandler.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","resultHandler使用说明"],["body","\n\n"],["body","\n"],["body","返回值为Null"],["body","\n"],["body","\n"],["body","\n"],["body","实现ResultHandler接口"],["body","\n"],["body","\n"],["body","\n"],["body","定义Mapper时传入ResultHandler"],["body","\n"],["body","  void selectByPrimaryKey(Integer id, ResultHandler<User> resultHandler);\n"],["body","\n"],["body","\n\n"],["h1","DefaultResultHandler"],["body","\n"],["body","public class DefaultResultHandler implements ResultHandler<Object> {\n\n  /**\n   * 集合\n   */\n  private final List<Object> list;\n\n  public DefaultResultHandler() {\n    list = new ArrayList<>();\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  public DefaultResultHandler(ObjectFactory objectFactory) {\n    list = objectFactory.create(List.class);\n  }\n\n  @Override\n  public void handleResult(ResultContext<?> context) {\n    list.add(context.getResultObject());\n  }\n\n  public List<Object> getResultList() {\n    return list;\n  }\n\n}\n\n"],["body","\n"],["h1","DefaultMapResultHandler"],["body","\n"],["body","/**\n *    Copyright 2009-2015 the original author or authors.\n *\n *    Licensed under the Apache License, Version 2.0 (the \"License\");\n *    you may not use this file except in compliance with the License.\n *    You may obtain a copy of the License at\n *\n *       http://www.apache.org/licenses/LICENSE-2.0\n *\n *    Unless required by applicable law or agreed to in writing, software\n *    distributed under the License is distributed on an \"AS IS\" BASIS,\n *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *    See the License for the specific language governing permissions and\n *    limitations under the License.\n */\npackage org.apache.ibatis.executor.result;\n\nimport java.util.Map;\n\nimport org.apache.ibatis.reflection.MetaObject;\nimport org.apache.ibatis.reflection.ReflectorFactory;\nimport org.apache.ibatis.reflection.factory.ObjectFactory;\nimport org.apache.ibatis.reflection.wrapper.ObjectWrapperFactory;\nimport org.apache.ibatis.session.ResultContext;\nimport org.apache.ibatis.session.ResultHandler;\n\n/**\n * 默认Map的ResultHandler\n * @author Clinton Begin\n */\npublic class DefaultMapResultHandler<K, V> implements ResultHandler<V> {\n\n  /**\n   * 映射结果\n   */\n  private final Map<K, V> mappedResults;\n  /**\n   * 映射Key\n   * <p>\n   *   指定一个字段作为返回Map中的key，这里一般也就是使用唯一键来做key.\n   * </p>\n   * <p>\n   *     参考博客：https://blog.csdn.net/u012734441/article/details/85861337\n   * </p>\n   */\n  private final String mapKey;\n  /**\n   * 对象工厂\n   */\n  private final ObjectFactory objectFactory;\n  /**\n   * 对象包装工厂\n   */\n  private final ObjectWrapperFactory objectWrapperFactory;\n  /**\n   * 反射工厂\n   */\n  private final ReflectorFactory reflectorFactory;\n\n  /**\n   *\n   * @param mapKey 指定一个字段作为返回Map中的key，这里一般也就是使用唯一键来做key.\n   *               参考博客：https://blog.csdn.net/u012734441/article/details/85861337\n   * @param objectFactory 对象工厂\n   * @param objectWrapperFactory 对象包装工厂\n   * @param reflectorFactory 反射工厂\n   */\n  @SuppressWarnings(\"unchecked\")\n  public DefaultMapResultHandler(String mapKey, ObjectFactory objectFactory, ObjectWrapperFactory objectWrapperFactory, ReflectorFactory reflectorFactory) {\n    this.objectFactory = objectFactory;\n    this.objectWrapperFactory = objectWrapperFactory;\n    this.reflectorFactory = reflectorFactory;\n    this.mappedResults = objectFactory.create(Map.class);\n    this.mapKey = mapKey;\n  }\n\n  @Override\n  public void handleResult(ResultContext<? extends V> context) {\n    //获取结果对象\n    final V value = context.getResultObject();\n    //value元对象\n    final MetaObject mo = MetaObject.forObject(value, objectFactory, objectWrapperFactory, reflectorFactory);\n    // TODO is that assignment always true?\n    //获取mapKey的key\n    final K key = (K) mo.getValue(mapKey);\n    mappedResults.put(key, value);\n  }\n\n  public Map<K, V> getMappedResults() {\n    return mappedResults;\n  }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","25.ORM_MyBatis/多结果集分页.html"],["title","多结果集分页.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","多结果集实现分页"],["heading","多结果集实现分页"],["body","\n\n"],["body","\n"],["body","编写相应结果集 Map"],["body","\n"],["body","<resultMap id=\"count\" type=\"_int\">\n        <result property=\"count\" column=\"count\" jdbcType=\"INTEGER\"></result>\n</resultMap>\n"],["body","\n"],["body","\n"],["body","\n"],["body","编写sql 指定SQL_CALC_FOUND_ROWS 关键字 "],["body","\n"],["body","select /* 指示获取实际查询条数*/ SQL_CALC_FOUND_ROWS,* from table_name; select found_rows() count\n"],["body","\n"],["body","\n"],["body","\n"],["body","Mapper接口接收返回值"],["body","\n"],["body","以List<Object> 返回 , 有几个结果集,List就有几个对象,对象的顺序按 sql的结果集编写孙旭"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","25.ORM_MyBatis/mybatis-插件开发.html"],["title","mybatis-插件开发.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","mybatis插件介绍"],["body","\n"],["headingLink","什么是插件"],["heading","什么是插件"],["body","\n"],["body","与其称为Mybatis插件，不如叫Mybatis拦截器，更加符合其功能定位，实际上它就是一个拦截器，应用代理模式，在方法级别上进行拦截。"],["body","\n"],["headingLink","支持拦截的方法"],["heading","支持拦截的方法"],["body","\n\n"],["body","执行器Executor（update、query、commit、rollback等方法）；"],["body","\n"],["body","参数处理器ParameterHandler（getParameterObject、setParameters方法）；"],["body","\n"],["body","结果集处理器ResultSetHandler（handleResultSets、handleOutputParameters等方法）；"],["body","\n"],["body","SQL语法构建器StatementHandler（prepare、parameterize、batch、update、query等方法）；"],["body","\n\n"],["headingLink","拦截阶段"],["heading","拦截阶段"],["body","\n"],["h1","mybatis插件场景"],["body","\n"],["body","\n"],["body","Mybatis插件可以在DAO层进行拦截，如打印执行的SQL语句日志，做一些权限控制，分页等功能"],["body","\n"],["body","\n"],["headingLink","分页功能"],["heading","分页功能"],["body","\n"],["body","​\tmybatis的分页默认是基于内存分页的（查出所有，再截取），数据量大的情况下效率较低，不过使用mybatis插件可以改变该行为，只需要拦截StatementHandler类的prepare方法，改变要执行的SQL语句为分页语句即可；"],["body","\n"],["headingLink","公共字段统一赋值"],["heading","公共字段统一赋值"],["body","\n"],["body","​\t一般业务系统都会有创建者，创建时间，修改者，修改时间四个字段，对于这四个字段的赋值，实际上可以在DAO层统一拦截处理，可以用mybatis插件拦截Executor类的update方法，对相关参数进行统一赋值即可；"],["body","\n"],["headingLink","性能监控"],["heading","性能监控"],["body","\n"],["body","​\t对于SQL语句执行的性能监控，可以通过拦截Executor类的update, query等方法，用日志记录每个方法执行的时间；"],["body","\n"],["h1","mybatis SQL抽象"],["body","\n"],["headingLink","mappedstatement"],["heading","MappedStatement"],["body","\n"],["body","<select id=\"selectAuthorLinkedHashMap\" resultType=\"java.util.LinkedHashMap\">\n        select id, username from author where id = #{value}\n</select>\n"],["body","\n"],["body","一个sql标签 对应 一个  MappedStatement对象"],["body","\n"],["headingLink","sqlsource"],["heading","SqlSource"],["body","\n"],["body","负责根据用户传递的parameterObject,动态地生成SQL语句,将信息封装到BoundSql对象中，并返回"],["body","\n"],["headingLink","boundsql"],["heading","BoundSql"],["body","\n"],["body","表示动态生成的SQL语句以及相应的参数信息"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","25.ORM_MyBatis/mybatis标签.html"],["title","mybatis标签.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","foreach"],["body","\n"],["body","     <foreach collection=\"map\" index=\"key\" item=\"value\" open=\"\" separator=\",\" close=\"\">\n        (#{key,jdbcType=VARCHAR},#{value,jdbcType=VARCHAR})\n      </foreach>\n"],["body","\n"],["h1","if"],["body","\n"],["body","<if test=\"title != null\">\n    AND title like #{title}\n  </if>\n"],["body","\n"],["h1","choose、when、otherwise"],["body","\n"],["body"," <choose>\n    <when test=\"title != null\">\n      AND title like #{title}\n    </when>\n    <when test=\"author != null and author.name != null\">\n      AND author_name like #{author.name}\n    </when>\n    <otherwise>\n      AND featured = 1\n    </otherwise>\n  </choose>\n"],["body","\n"],["h1","trim、where、set"],["body","\n"],["body","  <where>\n    <if test=\"state != null\">\n         state = #{state}\n    </if>\n    <if test=\"title != null\">\n        AND title like #{title}\n    </if>\n    <if test=\"author != null and author.name != null\">\n        AND author_name like #{author.name}\n    </if>\n  </where>\n"],["body","\n"],["body","<update id=\"updateAuthorIfNecessary\">\n  update Author\n    <set>\n      <if test=\"username != null\">username=#{username},</if>\n      <if test=\"password != null\">password=#{password},</if>\n      <if test=\"email != null\">email=#{email},</if>\n      <if test=\"bio != null\">bio=#{bio}</if>\n    </set>\n  where id=#{id}\n</update>\n"],["body","\n\n"],["body","where 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句"],["body","\n"],["body","而且，若子句的开头为 “AND” 或 “OR”，where 元素也会将它们去除"],["body","\n\n"],["body","通过自定义 trim 元素来定制 where  或 set 元素的功能"],["body","\n"],["body","<trim prefix=\"WHERE\" prefixOverrides=\"AND |OR \">\n  ...\n</trim>\n"],["body","\n"],["body","<trim prefix=\"SET\" suffixOverrides=\",\">\n  ...\n</trim>\n"],["body","\n"],["h1","foreach"],["body","\n"],["body","<select id=\"selectPostIn\" resultType=\"domain.blog.Post\">\n  SELECT *\n  FROM POST P\n  WHERE ID in\n  <foreach item=\"item\" index=\"index\" collection=\"list\"\n      open=\"(\" separator=\",\" close=\")\">\n        #{item}\n  </foreach>\n</select>\n"],["body","\n"],["h1","script"],["body","\n"],["body","在带注解的映射器接口类中使用动态 SQL，可以使用 script 元素。比如:"],["body","\n"],["body","    @Update({\"<script>\",\n      \"update Author\",\n      \"  <set>\",\n      \"    <if test='username != null'>username=#{username},</if>\",\n      \"    <if test='password != null'>password=#{password},</if>\",\n      \"    <if test='email != null'>email=#{email},</if>\",\n      \"    <if test='bio != null'>bio=#{bio}</if>\",\n      \"  </set>\",\n      \"where id=#{id}\",\n      \"</script>\"})\n    void updateAuthorValues(Author author);\n"],["body","\n"],["h1","bind"],["body","\n"],["body","bind 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。比如："],["body","\n"],["body","<select id=\"selectBlogsLike\" resultType=\"Blog\">\n  <bind name=\"pattern\" value=\"'%' + _parameter.getTitle() + '%'\" />\n  SELECT * FROM BLOG\n  WHERE title LIKE #{pattern}\n</select>\n"],["body","\n"],["h1","多数据库支持"],["body","\n"],["body","如果配置了 databaseIdProvider，你就可以在动态代码中使用名为 “_databaseId” 的变量来为不同的数据库构建特定的语句"],["body","\n"],["body","<insert id=\"insert\">\n  <selectKey keyProperty=\"id\" resultType=\"int\" order=\"BEFORE\">\n    <if test=\"_databaseId == 'oracle'\">\n      select seq_users.nextval from dual\n    </if>\n    <if test=\"_databaseId == 'db2'\">\n      select nextval for seq_users from sysibm.sysdummy1\"\n    </if>\n  </selectKey>\n  insert into users values (#{id}, #{name})\n</insert>\n"],["body","\n"],["h1","动态 SQL 中的插入脚本语言"],["body","\n\n"],["body","MyBatis 从 3.2 版本开始支持插入脚本语言"],["body","\n"],["body","这允许你插入一种语言驱动，并基于这种语言来编写动态 SQL 查询语句"],["body","\n\n"],["body","public interface LanguageDriver {\n  ParameterHandler createParameterHandler(MappedStatement mappedStatement, Object parameterObject, BoundSql boundSql);\n  SqlSource createSqlSource(Configuration configuration, XNode script, Class<?> parameterType);\n  SqlSource createSqlSource(Configuration configuration, String script, Class<?> parameterType);\n}\n"],["body","\n"],["body","实现自定义语言驱动后，你就可以在 mybatis-config.xml 文件中将它设置为默认语言："],["body","\n"],["body","<typeAliases>\n  <typeAlias type=\"org.sample.MyLanguageDriver\" alias=\"myLanguage\"/>\n</typeAliases>\n<settings>\n  <setting name=\"defaultScriptingLanguage\" value=\"myLanguage\"/>\n</settings>\n\n<select id=\"selectBlog\" lang=\"myLanguage\">\n  SELECT * FROM BLOG\n</select>\n\npublic interface Mapper {\n  @Lang(MyLanguageDriver.class)\n  @Select(\"SELECT * FROM BLOG\")\n  List<Blog> selectBlog();\n}\n"],["body","\n"],["body","可以使用 Apache Velocity 作为动态语言，更多细节请参考 MyBatis-Velocity 项目。"],["body","\n"],["body","你前面看到的所有 xml 标签都由默认 MyBatis 语言提供，而它由语言驱动 org.apache.ibatis.scripting.xmltags.XmlLanguageDriver（别名为 xml）所提供。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","01.java基础_代理/jdk动态代理.html"],["title","jdk动态代理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","什么是JAVA动态代理？"],["body","\n"],["body","JAVA动态代理与静态代理相对，静态代理是在编译期就已经确定代理类和真实类的关系，并且生成代理类的。而动态代理是在运行期利用JVM的反射机制生成代理类"],["body","\n"],["body","这里是直接生成类的字节码，然后通过类加载器载入JAVA虚拟机执行"],["body","\n"],["body","现在主流的JAVA动态代理技术的实现有两种："],["body","\n"],["body","一种是JDK自带的，就是我们所说的JDK动态代理，"],["body","\n"],["body","另一种是开源社区的一个开源项目CGLIB"],["body","\n"],["h1","什么是JDK动态代理？"],["body","\n"],["body","JDK动态代理的实现是在运行时，根据一组接口定义，使用Proxy、InvocationHandler等工具类去生成一个代理类和代理类实例。"],["body","\n\n"],["body","类名的生成规则是前缀\"$Proxy\"加上一个序列数"],["body","\n"],["body","这个类继承Proxy，实现一系列的接口Intf1,Intf2...IntfN"],["body","\n"],["body","既然要实现接口，那么就要实现接口的各个方法,JDK动态代理类是如何实现这些接口方法的具体逻辑,答案就在InvocationHandler上"],["body","\n"],["body","$Proxy0对外只提供一个构造函数，这个构造函数接受一个InvocationHandler实例h，这个构造函数的逻辑非常简单，就是调用父类的构造函数"],["body","\n"],["body","将参数h赋值给对象字段h。最终就是把所有的方法实现都分派到InvocationHandler实例h的invoke方法上。"],["body","\n"],["body","所以JDK动态代理的接口方法实现逻辑是完全由InvocationHandler实例的invoke方法决定的。"],["body","\n\n"],["h1","保存JDK动态代理字节码的两种方式"],["body","\n"],["headingLink","设置系统属性"],["heading","设置系统属性"],["body","\n"],["body","public Object getProxy() {\n\tSystem.getProperties().put(\"sun.misc.ProxyGenerator.saveGeneratedFiles\", \"true\"); //设置系统属性\n\treturn Proxy.newProxyInstance(target.getClass().getClassLoader(),\n\t\t\ttarget.getClass().getInterfaces(), this); \n}\n"],["body","\n"],["body","会 自动将 proxy 写入 ${workplace}/com/sun/proxy 路径下"],["body","\n"],["headingLink","保存proxygenerator生成的字节流数组"],["heading","保存ProxyGenerator生成的字节流数组"],["body","\n"],["body","byte[] bytes = ProxyGenerator.generateProxyClass(\"MyClass.class\", Dog.class.getInterfaces());\nPath path = Paths.get(Dog.class.getResource(\"\").toURI());\n\nFileChannel open = FileChannel.open(path.resolve(\"MyClass.class\"), StandardOpenOption.WRITE,StandardOpenOption.CREATE);\n        open.write(ByteBuffer.wrap(bytes));\n\n"],["body","\n"],["h1","字节码分析"],["body","\n\n"],["body","m0是 hashCode、m1是 equals、m2是 toString 方法"],["body","\n"],["body","其余 m* 是接口的方法"],["body","\n"],["body","所有接口方法都交由 InvocationHandler处理"],["body","\n\n"],["body","//\n// Source code recreated from a .class file by IntelliJ IDEA\n// (powered by FernFlower decompiler)\n//\n\npackage com.sun.proxy;\n\nimport com.weisanju.ioStudy.proxy.Animal;\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\nimport java.lang.reflect.UndeclaredThrowableException;\n\npublic final class $Proxy0 extends Proxy implements Animal {\n    private static Method m1;\n    private static Method m2;\n    private static Method m4;\n    private static Method m3;\n    private static Method m0;\n\n    public $Proxy0(InvocationHandler var1) throws  {\n        super(var1);\n    }\n\n    public final boolean equals(Object var1) throws  {\n        try {\n            return (Boolean)super.h.invoke(this, m1, new Object[]{var1});\n        } catch (RuntimeException | Error var3) {\n            throw var3;\n        } catch (Throwable var4) {\n            throw new UndeclaredThrowableException(var4);\n        }\n    }\n\n    public final String toString() throws  {\n        try {\n            return (String)super.h.invoke(this, m2, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    public final void eat(String var1) throws  {\n        try {\n            super.h.invoke(this, m4, new Object[]{var1});\n        } catch (RuntimeException | Error var3) {\n            throw var3;\n        } catch (Throwable var4) {\n            throw new UndeclaredThrowableException(var4);\n        }\n    }\n\n    public final void say() throws  {\n        try {\n            super.h.invoke(this, m3, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    public final int hashCode() throws  {\n        try {\n            return (Integer)super.h.invoke(this, m0, (Object[])null);\n        } catch (RuntimeException | Error var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n\n    static {\n        try {\n            m1 = Class.forName(\"java.lang.Object\").getMethod(\"equals\", Class.forName(\"java.lang.Object\"));\n            m2 = Class.forName(\"java.lang.Object\").getMethod(\"toString\");\n            m4 = Class.forName(\"com.weisanju.ioStudy.proxy.Animal\").getMethod(\"eat\", Class.forName(\"java.lang.String\"));\n            m3 = Class.forName(\"com.weisanju.ioStudy.proxy.Animal\").getMethod(\"say\");\n            m0 = Class.forName(\"java.lang.Object\").getMethod(\"hashCode\");\n        } catch (NoSuchMethodException var2) {\n            throw new NoSuchMethodError(var2.getMessage());\n        } catch (ClassNotFoundException var3) {\n            throw new NoClassDefFoundError(var3.getMessage());\n        }\n    }\n}\n"],["body","\n"],["h1","源码解析"],["body","\n"],["headingLink","newproxyinstance"],["heading","newProxyInstance"],["body","\n"],["body","\n"],["body","该代码段主要是 获取代理类，并根据代理类 使用 InvocationHandler  实例化"],["body","\n"],["body","\n\n"],["body","根据 接口获取 代理类 （如果有缓存则使用缓存，如果没有缓存则 生成）"],["body","\n"],["body","获取代理类的 构造函数：invocationHandler 的那个"],["body","\n"],["body","使用 InvocationHandler 根据构造函数实例化 对象"],["body","\n\n"],["body","    public static Object newProxyInstance(ClassLoader loader,\n                                          Class<?>[] interfaces,\n                                          InvocationHandler h)\n        throws IllegalArgumentException\n    {\n        //检验h不为空，h为空抛异常\n        Objects.requireNonNull(h);\n        //接口的类对象拷贝一份\n        final Class<?>[] intfs = interfaces.clone();\n        //进行一些安全性检查\n        final SecurityManager sm = System.getSecurityManager();\n        if (sm != null) {\n            checkProxyAccess(Reflection.getCallerClass(), loader, intfs);\n        }\n\n        /*\n         * Look up or generate the designated proxy class.\n         *  查询（在缓存中已经有）或生成指定的代理类的class对象。\n         * 根据接口生成生成指定代理类\n         */\n        Class<?> cl = getProxyClass0(loader, intfs);\n\n        /*\n         * Invoke its constructor with the designated invocation handler.\n         */\n        try {\n            //权限检查\n            if (sm != null) {\n                checkNewProxyPermission(Reflection.getCallerClass(), cl);\n            }\n            //得到代理类对象的构造函数，这个构造函数的参数由constructorParams指定\n            //参数constructorParames为常量值：private static final Class<?>[] constructorParams = { InvocationHandler.class };\n            //获取构造函数\n            final Constructor<?> cons = cl.getConstructor(constructorParams);\n            final InvocationHandler ih = h;\n            if (!Modifier.isPublic(cl.getModifiers())) {\n                AccessController.doPrivileged(new PrivilegedAction<Void>() {\n                    public Void run() {\n                        cons.setAccessible(true);\n                        return null;\n                    }\n                });\n            }\n            //实例化\n            //这里生成代理对象，传入的参数new Object[]{h}后面讲\n            return cons.newInstance(new Object[]{h});\n        } catch (IllegalAccessException|InstantiationException e) {\n            throw new InternalError(e.toString(), e);\n        } catch (InvocationTargetException e) {\n            Throwable t = e.getCause();\n            if (t instanceof RuntimeException) {\n                throw (RuntimeException) t;\n            } else {\n                throw new InternalError(t.toString(), t);\n            }\n        } catch (NoSuchMethodException e) {\n            throw new InternalError(e.toString(), e);\n        }\n    }\n"],["body","\n"],["headingLink","getproxyclass0"],["heading","getProxyClass0"],["body","\n"],["body","这里使用的 WeakCache 二级弱缓存"],["body","\n\n"],["body","key是 classLoader：使用的是 弱引用队列"],["body","\n"],["body","二级key是 代理的接口们 强引用"],["body","\n"],["body","value 弱引用"],["body","\n\n"],["body","value计算逻辑"],["body","\n\n"],["body","负责校验接口 是否存在 可加载、是否是接口、是否重复"],["body","\n"],["body","维护 proxy的类名"],["body","\n"],["body","使用接口 调用 生成字节码的类"],["body","\n\n"],["body","public Class<?> apply(ClassLoader loader, Class<?>[] interfaces) {\n\n    Map<Class<?>, Boolean> interfaceSet = new IdentityHashMap<>(interfaces.length);\n    for (Class<?> intf : interfaces) {\n        /*\n         * Verify that the class loader resolves the name of this\n         * interface to the same Class object.\n         */\n        Class<?> interfaceClass = null;\n        try {\n            interfaceClass = Class.forName(intf.getName(), false, loader);\n        } catch (ClassNotFoundException e) {\n        }\n        if (interfaceClass != intf) {\n            throw new IllegalArgumentException(\n                intf + \" is not visible from class loader\");\n        }\n        /*\n         * Verify that the Class object actually represents an\n         * interface.\n         */\n        if (!interfaceClass.isInterface()) {\n            throw new IllegalArgumentException(\n                interfaceClass.getName() + \" is not an interface\");\n        }\n        /*\n         * Verify that this interface is not a duplicate.\n         */\n        if (interfaceSet.put(interfaceClass, Boolean.TRUE) != null) {\n            throw new IllegalArgumentException(\n                \"repeated interface: \" + interfaceClass.getName());\n        }\n    }\n\n    String proxyPkg = null;     // package to define proxy class in\n    int accessFlags = Modifier.PUBLIC | Modifier.FINAL;\n\n    /*\n     * Record the package of a non-public proxy interface so that the\n     * proxy class will be defined in the same package.  Verify that\n     * all non-public proxy interfaces are in the same package.\n     */\n    for (Class<?> intf : interfaces) {\n        int flags = intf.getModifiers();\n        if (!Modifier.isPublic(flags)) {\n            accessFlags = Modifier.FINAL;\n            String name = intf.getName();\n            int n = name.lastIndexOf('.');\n            String pkg = ((n == -1) ? \"\" : name.substring(0, n + 1));\n            if (proxyPkg == null) {\n                proxyPkg = pkg;\n            } else if (!pkg.equals(proxyPkg)) {\n                throw new IllegalArgumentException(\n                    \"non-public interfaces from different packages\");\n            }\n        }\n    }\n\n    if (proxyPkg == null) {\n        // if no non-public proxy interfaces, use com.sun.proxy package\n        proxyPkg = ReflectUtil.PROXY_PACKAGE + \".\";\n    }\n\n    /*\n     * Choose a name for the proxy class to generate.\n     */\n    long num = nextUniqueNumber.getAndIncrement();\n    String proxyName = proxyPkg + proxyClassNamePrefix + num;\n\n    /*\n     * Generate the specified proxy class.\n     */\n    byte[] proxyClassFile = ProxyGenerator.generateProxyClass(\n        proxyName, interfaces, accessFlags);\n    try {\n        return defineClass0(loader, proxyName,\n                            proxyClassFile, 0, proxyClassFile.length);\n    } catch (ClassFormatError e) {\n        /*\n         * A ClassFormatError here means that (barring bugs in the\n         * proxy class generation code) there was some other\n         * invalid aspect of the arguments supplied to the proxy\n         * class creation (such as virtual machine limitations\n         * exceeded).\n         */\n        throw new IllegalArgumentException(e.toString());\n    }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","01.java基础_代理/cglib的几种Callback.html"],["title","cglib的几种Callback.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","callbacks简介"],["body","\n"],["body","这里的callback可以认为是cglib用于生成字节码的实现手段，cglib一共实现了6种callback，用于对代理类目标进行不同手段的代理"],["body","\n"],["body","分别为："],["body","\n\n"],["body","FixedValue"],["body","\n"],["body","InvocationHandler"],["body","\n"],["body","LazyLoader"],["body","\n"],["body","MethodInterceptor"],["body","\n"],["body","Dispatcher"],["body","\n"],["body","NoOp"],["body","\n"],["body","ProxyRefDispatcher"],["body","\n\n"],["h1","Dispatcher"],["body","\n"],["body","实现Dispatcher接口，要求实现loadObject方法，返回期望的代理类。"],["body","\n"],["body","值的一提的是，loadobject方法在每次调用被拦截方法的时候都会被调用一次"],["body","\n"],["body","手动返回指定的被代理类的，每次调用都会返回一个新的"],["body","\n"],["body","public final void methodForDispatcher() {\n    Dispatcher var10000 = this.CGLIB$CALLBACK_3;\n    if (var10000 == null) {\n        CGLIB$BIND_CALLBACKS(this);\n        var10000 = this.CGLIB$CALLBACK_3;\n    }\n\t//每次都调用一次loadObject，获取对象，并调用对象的相应方法\n    //这样的实现，相当于loadObject可以很灵活的返回相应的实现类或者子类\n    ((CallbackBean)var10000.loadObject()).methodForDispatcher();\n}\n"],["body","\n"],["h1","LazyLoader"],["body","\n\n"],["body","与Dispatcher 类似，但是只会返回一次代理类实例"],["body","\n"],["body","懒加载 "],["body","\n\n"],["body","public final void select_with_lazyLoader() {\n    ((MyDao)this.CGLIB$LOAD_PRIVATE_6()).select_with_lazyLoader();\n}\nprivate final synchronized Object CGLIB$LOAD_PRIVATE_6() {\n    Object var10000 = this.CGLIB$LAZY_LOADER_6;\n    if (var10000 == null) {\n        LazyLoader var10001 = this.CGLIB$CALLBACK_6;\n        if (var10001 == null) {\n            CGLIB$BIND_CALLBACKS(this);\n            var10001 = this.CGLIB$CALLBACK_6;\n        }\n\t\t//如果为空才调用代理类\n        var10000 = this.CGLIB$LAZY_LOADER_6 = var10001.loadObject();\n    }\n\n    return var10000;\n}\n"],["body","\n"],["h1","ProxyRefDispatcher"],["body","\n"],["body","与Dispatcher 类似，每次调用都会传入代理类的引用进来"],["body","\n"],["body","public final void select_with_proxyRef() {\n    ProxyRefDispatcher var10000 = this.CGLIB$CALLBACK_7;\n    if (var10000 == null) {\n        CGLIB$BIND_CALLBACKS(this);\n        var10000 = this.CGLIB$CALLBACK_7;\n    }\n\n    ((MyDao)var10000.loadObject(this)).select_with_proxyRef();\n}\n"],["body","\n"],["h1","FixedValue"],["body","\n\n"],["body","该callback同样要求实现一个loadobject方法"],["body","\n"],["body","每次调用方法时直接返回该值，并强制转换"],["body","\n\n"],["body","public final String select_with_fixedValue() {\n    FixedValue var10000 = this.CGLIB$CALLBACK_3;\n    if (var10000 == null) {\n        CGLIB$BIND_CALLBACKS(this);\n        var10000 = this.CGLIB$CALLBACK_3;\n    }\n\n    return (String)var10000.loadObject();\n}\n"],["body","\n"],["h1","Noop"],["body","\n\n"],["body","没有重写方法"],["body","\n"],["body","直接调用父类的方法"],["body","\n\n"],["h1","InvocationHandler"],["body","\n\n"],["body","直接调用 InvocationHandler"],["body","\n\n"],["body","    public final Object select_with_invocationHandler(String var1) {\n        try {\n            InvocationHandler var10000 = this.CGLIB$CALLBACK_5;\n            if (var10000 == null) {\n                CGLIB$BIND_CALLBACKS(this);\n                var10000 = this.CGLIB$CALLBACK_5;\n            }\n\n            return var10000.invoke(this, CGLIB$select_with_invocationHandler$5, new Object[]{var1});\n        } catch (Error | RuntimeException var2) {\n            throw var2;\n        } catch (Throwable var3) {\n            throw new UndeclaredThrowableException(var3);\n        }\n    }\n"],["body","\n"],["h1","MethodInterceptor"],["body","\n"],["body","使用 fastclass 机制 调用父类方法"],["body","\n\n"],["body","var1是 代理对象引用"],["body","\n"],["body","var2是 调用方法"],["body","\n"],["body","var3是 参数对象"],["body","\n"],["body","var4是 fastClass机制的类调用"],["body","\n\n"],["body","    public final void select() {\n        MethodInterceptor var10000 = this.CGLIB$CALLBACK_0;\n        if (var10000 == null) {\n            CGLIB$BIND_CALLBACKS(this);\n            var10000 = this.CGLIB$CALLBACK_0;\n        }\n\n        if (var10000 != null) {\n            var10000.intercept(this, CGLIB$select$1$Method, CGLIB$emptyArgs, CGLIB$select$1$Proxy);\n        } else {\n            super.select();\n        }\n    }\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","01.java基础_代理/CGLIB.html"],["title","CGLIB.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n"],["headingLink","cglib是什么"],["heading","Cglib是什么"],["body","\n"],["body","Cglib是一个强大的、高性能的代码生成包，它广泛被许多AOP框架使用，为他们提供方法的拦截。下图是我网上找到的一张Cglib与一些框架和语言的关系："],["body","\n\n"],["body","最底层的是字节码Bytecode，字节码是Java为了保证“一次编译、到处运行”而产生的一种虚拟指令格式，例如iload_0、iconst_1、if_icmpne、dup等"],["body","\n"],["body","位于字节码之上的是ASM，这是一种直接操作字节码的框架，应用ASM需要对Java字节码、Class结构比较熟悉"],["body","\n"],["body","位于ASM之上的是CGLIB、Groovy、BeanShell，后两种并不是Java体系中的内容而是脚本语言，它们通过ASM框架生成字节码变相执行Java代码，这说明在JVM中执行程序并不一定非要写Java代码----只要你能生成Java字节码，JVM并不关心字节码的来源，当然通过Java代码生成的JVM字节码是通过编译器直接生成的，算是最“正统”的JVM字节码"],["body","\n"],["body","位于CGLIB、Groovy、BeanShell之上的就是Hibernate、Spring AOP这些框架了，这一层大家都比较熟悉"],["body","\n"],["body","最上层的是Applications，即具体应用，一般都是一个Web项目或者本地跑一个程序"],["body","\n\n"],["h1","CGLIB类库结构"],["body","\n"],["headingLink","使用cglib代码对类做代理"],["heading","使用Cglib代码对类做代理"],["body","\n"],["body","下面演示一下Cglib代码示例----对类做代理。首先定义一个Dao类，里面有一个select()方法和一个update()方法："],["body","\n"],["body","源方法"],["body","\n"],["body","public class Dao {\n  \n    public void update() {\n        System.out.println(\"PeopleDao.update()\");\n    }\n  \n    public void select() {\n        System.out.println(\"PeopleDao.select()\");\n    }\n}\n"],["body","\n"],["body","拦截代理类"],["body","\n"],["body","public class DaoProxy implements MethodInterceptor {\n\n    @Override\n    public Object intercept(Object object, Method method, Object[] objects, MethodProxy proxy) throws Throwable {\n        System.out.println(\"Before Method Invoke\");\n        proxy.invokeSuper(object, objects);\n        System.out.println(\"After Method Invoke\");\n      \n        return object;\n    }\n  \n}\n"],["body","\n"],["body","intercept方法的参数的含义为："],["body","\n\n"],["body","Object表示要进行增强的对象"],["body","\n"],["body","Method表示拦截的方法"],["body","\n"],["body","Object[]数组表示参数列表，基本数据类型需要传入其包装类型"],["body","\n"],["body","MethodProxy 表示对方法的代理，invokeSuper方法表示对被代理对象方法的调用"],["body","\n\n"],["body","返回值"],["body","\n"],["body","any value compatible with the signature of the proxied method. Method returning void will ignore this value"],["body","\n"],["body","增强类"],["body","\n"],["body","public class CglibTest {\n\n    @Test\n    public void testCglib() {\n        DaoProxy daoProxy = new DaoProxy();\n      \n        Enhancer enhancer = new Enhancer();\n        //设置要代理的类\n        enhancer.setSuperclass(Dao.class);\n        //表示设置回调即MethodInterceptor的实现类\n        enhancer.setCallback(daoProxy);\n        //使用create()方法生成一个代理对象\n        Dao dao = (Dao)enhancer.create();\n        dao.update();\n        dao.select();\n    }\n  \n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","01.java基础_代理/README.html"],["title","代理 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","代理"],["body","\n"],["headingLink","优势"],["heading","优势"],["body","\n"],["body","使用代理有 2 个优势："],["body","\n\n"],["body","可以隐藏委托类的实现"],["body","\n"],["body","可以实现客户与委托类之间的解耦, 在不修改委托类代码的情况下能够做一些额外的处理"],["body","\n\n"],["headingLink","场景"],["heading","场景"],["body","\n\n"],["body","在 Java 中我们有很多场景需要使用代理类, 比如远程 RPC 调用的时候我们就是通过代理类去实现的, 还有 Spring 的 AOP 切面中我们也是为切面生成了一个代理类等等。 "],["body","\n"],["body","代理类主要分为静态代理、JDK 动态代理和 CGLIB 动态代理，它们各有优缺点，没有最好的, 存在就是有意义的，在不同的场景下它们会有不同的用武之地。"],["body","\n\n"],["h1","Java 静态代理"],["body","\n\n"],["body","首先, 定义接口和接口的实现类, 然后定义接口的代理对象, 将接口的实例注入到代理对象中, 然后通过代理对象去调用真正的实现类，实现过程非常简单也比较"],["body","\n"],["body","静态代理的代理关系在编译期间就已经确定了的。它适合于代理类较少且确定的情况。它可实现在怒修改委托类代码的情况下做一些额外的处理，比如包装礼盒，实现客户类与委托类的解耦。缺点是只适用委托方法少的情况下, 试想一下如果委托类有几百上千个方法, 岂不是很难受, 要在代理类中写一堆的代理方法。这个需求动态代理可以搞定"],["body","\n\n"],["body","// 委托接口\npublic interface IHelloService {\n\n    /**\n     * 定义接口方法\n     * @param userName\n     * @return\n     */\n    String sayHello(String userName);\n\n}\n// 委托类实现\npublic class HelloService implements IHelloService {\n\n    @Override\n    public String sayHello(String userName) {\n        System.out.println(\"helloService\" + userName);\n        return \"HelloService\" + userName;\n    }\n}\n\n// 代理类\npublic class StaticProxyHello implements IHelloService {\n\n    private IHelloService helloService = new HelloService();\n\n    @Override\n    public String sayHello(String userName) {\n        /** 代理对象可以在此处包装一下*/\n        System.out.println(\"代理对象包装礼盒...\");\n        return helloService.sayHello(userName);\n    }\n}\n// 测试静态代理类\npublic class MainStatic {\n    public static void main(String[] args) {\n        StaticProxyHello staticProxyHello = new StaticProxyHello();\n        staticProxyHello.sayHello(\"isole\");\n    }\n}\n"],["body","\n"],["h1","动态代理"],["body","\n"],["body","代理类在程序运行时创建的代理方式被成为 动态代理。在了解动态代理之前, 我们先简回顾一下 JVM 的类加载机制中的加载阶段要做的三件事情 ( 附 Java 中的类加载器 )"],["body","\n\n"],["body","通过一个类的全名或其它途径来获取这个类的二进制字节流"],["body","\n"],["body","将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构"],["body","\n"],["body","在内存中生成一个代表这个类的 Class 对象, 作为方法区中对这个类访问的入口"],["body","\n\n"],["body","而我们要说的动态代理，主要就发生在第一个阶段, 这个阶段类的二进制字节流的来源可以有很多, 比如 zip 包、网络、运行时计算生成、其它文件生成 (JSP)、数据库获取。其中运行时计算生成就是我们所说的动态代理技术，在 Proxy 类中, 就是运用了 ProxyGenerator.generateProxyClass 来为特定接口生成形式为 *$Proxy 的代理类的二进制字节流。所谓的动态代理就是想办法根据接口或者目标对象计算出代理类的字节码然后加载进 JVM 中。实际计算的情况会很复杂，我们借助一些诸如 JDK 动态代理实现、CGLIB 第三方库来完成的"],["body","\n"],["body","另一方面为了让生成的代理类与目标对象 (就是委托类) 保持一致, 我们有 2 种做法：通过接口的 JDK 动态代理 和通过继承类的 CGLIB 动态代理。"],["body","\n"],["headingLink","jdk动态代理"],["heading","JDK动态代理"],["body","\n"],["body","public interface InvocationHandler {\n    /**\n     * 调用处理\n     * @param proxy 代理类对象\n     * @param methon 标识具体调用的是代理类的哪个方法\n     * @param args 代理类方法的参数\n     */\n    public Object invoke(Object proxy, Method method, Object[] args)\n        throws Throwable;\n}\n"],["body","\n"],["body","// 委托类接口\npublic interface IHelloService {\n\n    /**\n     * 方法1\n     * @param userName\n     * @return\n     */\n    String sayHello(String userName);\n\n    /**\n     * 方法2\n     * @param userName\n     * @return\n     */\n    String sayByeBye(String userName);\n\n}\n// 委托类\npublic class HelloService implements IHelloService {\n\n    @Override\n    public String sayHello(String userName) {\n        System.out.println(userName + \" hello\");\n        return userName + \" hello\";\n    }\n\n    @Override\n    public String sayByeBye(String userName) {\n        System.out.println(userName + \" ByeBye\");\n        return userName + \" ByeBye\";\n    }\n}\n// 中间类\npublic class JavaProxyInvocationHandler implements InvocationHandler {\n\n    /**\n     * 中间类持有委托类对象的引用,这里会构成一种静态代理关系\n     */\n    private Object obj ;\n\n    /**\n     * 有参构造器,传入委托类的对象\n     * @param obj 委托类的对象\n     */\n    public JavaProxyInvocationHandler(Object obj){\n        this.obj = obj;\n\n    }\n\n    /**\n     * 动态生成代理类对象,Proxy.newProxyInstance\n     * @return 返回代理类的实例\n     */\n    public Object newProxyInstance() {\n        return Proxy.newProxyInstance(\n                //指定代理对象的类加载器\n                obj.getClass().getClassLoader(),\n                //代理对象需要实现的接口，可以同时指定多个接口\n                obj.getClass().getInterfaces(),\n                //方法调用的实际处理者，代理对象的方法调用都会转发到这里\n                this);\n    }\n\n\n    /**\n     *\n     * @param proxy 代理对象\n     * @param method 代理方法\n     * @param args 方法的参数\n     * @return\n     * @throws Throwable\n     */\n    @Override\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"invoke before\");\n        Object result = method.invoke(obj, args);\n        System.out.println(\"invoke after\");\n        return result;\n    }\n}\n// 测试动态代理类\npublic class MainJavaProxy {\n    public static void main(String[] args) {\n        JavaProxyInvocationHandler proxyInvocationHandler = new JavaProxyInvocationHandler(new HelloService());\n        IHelloService helloService = (IHelloService) proxyInvocationHandler.newProxyInstance();\n        helloService.sayByeBye(\"paopao\");\n        helloService.sayHello(\"yupao\");\n    }\n\n}\n"],["body","\n"],["headingLink","cglib动态代理"],["heading","CGLIB动态代理"],["body","\n"],["body","<dependency>\n    <groupId>cglib</groupId>\n    <artifactId>cglib</artifactId>\n    <version>3.3.0s</version>\n</dependency>\n"],["body","\n"],["body","CGLIB 创建动态代理类的模式是:"],["body","\n\n"],["body","查找目标类上的所有非 final 的 public 类型的方法 (final 的不能被重写)"],["body","\n"],["body","将这些方法的定义转成字节码"],["body","\n"],["body","将组成的字节码转换成相应的代理的 Class 对象然后通过反射获得代理类的实例对象"],["body","\n"],["body","实现 MethodInterceptor 接口, 用来处理对代理类上所有方法的请求"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","21.单元测试_JUNIT5/writtingTest.html"],["title","writtingTest - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","21.单元测试_JUNIT5/ConsoleLaunch.html"],["title","ConsoleLaunch.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","下载安装"],["heading","下载安装"],["body","\n"],["body","https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/1.8.2/junit-platform-console-standalone-1.8.2.jar\n"],["body","\n"],["headingLink","启动与运行"],["heading","启动与运行"],["body","\n"],["body","ConsoleLauncher是一个命令行Java应用程序，可让您从控制台启动JUnit平台。例如，它可用于运行JUnit Vintage和JUnit Jupiter测试，并将测试执行结果打印到控制台。"],["body","\n"],["body","包含所有依赖项的可执行junit-platform-console-standalone-1.8.2.jar将在junit-platform-console-standalone目录下的Maven中央存储库中发布。您可以运行独立的consoleauncher，如下所示。"],["body","\n"],["body","java -jar junit-platform-console-standalone-1.8.2.jar <Options>\n"],["body","\n"],["body","Here’s an example of its output:"],["body","\n"],["body","├─ JUnit Vintage\n│  └─ example.JUnit4Tests\n│     └─ standardJUnit4Test ✔\n└─ JUnit Jupiter\n   ├─ StandardTests\n   │  ├─ succeedingTest() ✔\n   │  └─ skippedTest() ↷ for demonstration purposes\n   └─ A special test case\n      ├─ Custom test name containing spaces ✔\n      ├─ ╯°□°)╯ ✔\n      └─ 😱 ✔\n\nTest run finished after 64 ms\n[         5 containers found      ]\n[         0 containers skipped    ]\n[         5 containers started    ]\n[         0 containers aborted    ]\n[         5 containers successful ]\n[         0 containers failed     ]\n[         6 tests found           ]\n[         1 tests skipped         ]\n[         5 tests started         ]\n[         0 tests aborted         ]\n[         5 tests successful      ]\n[         0 tests failed          ]\n"],["body","\n"],["headingLink","exitcode"],["heading","exitCode"],["body","\n"],["body","如果任何容器或测试失败，则consoleelauncher退出，状态代码为1。如果未发现任何测试，并且提供了 -- fail-If-no-tests命令行选项，则consoleauncher退出，状态代码为2。否则退出代码为0。"],["body","\n"],["headingLink","options"],["heading","Options"],["body","\n"],["body","Usage: ConsoleLauncher [-h] [--disable-ansi-colors] [--disable-banner]\n                       [--fail-if-no-tests] [--scan-modules] [--scan-classpath[=PATH[;|:\n                       PATH...]]]... [--details=MODE] [--details-theme=THEME]\n                       [--reports-dir=DIR] [-c=CLASS]... [--config=KEY=VALUE]... [-cp=PATH\n                       [;|:PATH...]]... [-d=DIR]... [-e=ID]... [-E=ID]...\n                       [--exclude-package=PKG]... [-f=FILE]... [--include-package=PKG]...\n                       [-m=NAME]... [-n=PATTERN]... [-N=PATTERN]... [-o=NAME]...\n                       [-p=PKG]... [-r=RESOURCE]... [-t=TAG]... [-T=TAG]... [-u=URI]...\nLaunches the JUnit Platform from the console.\n  -h, --help                 Display help information.\n      --disable-ansi-colors  Disable ANSI colors in output (not supported by all\n                               terminals).\n      --disable-banner       Disable print out of the welcome message.\n      --details=MODE         Select an output details mode for when tests are executed.\n                               Use one of: none, summary, flat, tree, verbose. If 'none'\n                               is selected, then only the summary and test failures are\n                               shown. Default: tree.\n      --details-theme=THEME  Select an output details tree theme for when tests are\n                               executed. Use one of: ascii, unicode. Default: unicode.\n      -cp, --classpath, --class-path=PATH[;|:PATH...]\n                             Provide additional classpath entries -- for example, for\n                               adding engines and their dependencies. This option can be\n                               repeated.\n      --fail-if-no-tests     Fail and return exit status code 2 if no tests are found.\n      --reports-dir=DIR      Enable report output into a specified local directory (will\n                               be created if it does not exist).\n      --scan-modules         EXPERIMENTAL: Scan all resolved modules for test discovery.\n  -o, --select-module=NAME   EXPERIMENTAL: Select single module for test discovery. This\n                               option can be repeated.\n      --scan-classpath, --scan-class-path[=PATH[;|:PATH...]]\n                             Scan all directories on the classpath or explicit classpath\n                               roots. Without arguments, only directories on the system\n                               classpath as well as additional classpath entries supplied\n                               via -cp (directories and JAR files) are scanned. Explicit\n                               classpath roots that are not on the classpath will be\n                               silently ignored. This option can be repeated.\n  -u, --select-uri=URI       Select a URI for test discovery. This option can be repeated.\n  -f, --select-file=FILE     Select a file for test discovery. This option can be\n                               repeated.\n  -d, --select-directory=DIR Select a directory for test discovery. This option can be\n                               repeated.\n  -p, --select-package=PKG   Select a package for test discovery. This option can be\n                               repeated.\n  -c, --select-class=CLASS   Select a class for test discovery. This option can be\n                               repeated.\n  -m, --select-method=NAME   Select a method for test discovery. This option can be\n                               repeated.\n  -r, --select-resource=RESOURCE\n                             Select a classpath resource for test discovery. This option\n                               can be repeated.\n  -n, --include-classname=PATTERN\n                             Provide a regular expression to include only classes whose\n                               fully qualified names match. To avoid loading classes\n                               unnecessarily, the default pattern only includes class\n                               names that begin with \"Test\" or end with \"Test\" or\n                               \"Tests\". When this option is repeated, all patterns will\n                               be combined using OR semantics. Default: [^(Test.*|.+[.$]\n                               Test.*|.*Tests?)$]\n  -N, --exclude-classname=PATTERN\n                             Provide a regular expression to exclude those classes whose\n                               fully qualified names match. When this option is repeated,\n                               all patterns will be combined using OR semantics.\n      --include-package=PKG  Provide a package to be included in the test run. This\n                               option can be repeated.\n      --exclude-package=PKG  Provide a package to be excluded from the test run. This\n                               option can be repeated.\n  -t, --include-tag=TAG      Provide a tag or tag expression to include only tests whose\n                               tags match. When this option is repeated, all patterns\n                               will be combined using OR semantics.\n  -T, --exclude-tag=TAG      Provide a tag or tag expression to exclude those tests whose\n                               tags match. When this option is repeated, all patterns\n                               will be combined using OR semantics.\n  -e, --include-engine=ID    Provide the ID of an engine to be included in the test run.\n                               This option can be repeated.\n  -E, --exclude-engine=ID    Provide the ID of an engine to be excluded from the test\n                               run. This option can be repeated.\n      --config=KEY=VALUE     Set a configuration parameter for test discovery and\n                               execution. This option can be repeated.\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","21.单元测试_JUNIT5/DependencyMetadata.html"],["title","DependencyMetadata.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Dependency Metadata"],["body","\n"],["body","Artifacts for final releases and milestones are deployed to Maven Central, and snapshot artifacts are deployed to Sonatype’s snapshots repository under /org/junit."],["body","\n"],["headingLink","junit-platform"],["heading","JUnit Platform"],["body","\n\n"],["body","Group ID: org.junit.platform"],["body","\n"],["body","Version: 1.8.2"],["body","\n"],["body","Artifact IDs:"],["body","\n\n"],["headingLink","junit-platform-commons"],["heading","junit-platform-commons"],["body","\n"],["body","为 JUnit Platform  提供通用api和工具。用  @API(status = INTERNAL)   注释的任何API仅用于JUnit框架本身。不支持外部方对内部api的任何使用!"],["body","\n"],["headingLink","junit-platform-console"],["heading","junit-platform-console"],["body","\n"],["body","Support for discovering and executing tests on the JUnit Platform from the console. See Console Launcher for details."],["body","\n"],["headingLink","junit-platform-console-standalone"],["heading","junit-platform-console-standalone"],["body","\n"],["body","An executable JAR with all dependencies included is provided in Maven Central under the junit-platform-console-standalone directory. See Console Launcher for details."],["body","\n"],["headingLink","junit-platform-engine"],["heading","junit-platform-engine"],["body","\n"],["body","Public API for test engines. See Registering a TestEngine for details."],["body","\n"],["headingLink","junit-platform-jfr"],["heading","junit-platform-jfr"],["body","\n"],["body","Provides a LauncherDiscoveryListener and TestExecutionListener for Java Flight Recorder events on the JUnit Platform. See Flight Recorder Support for details."],["body","\n"],["headingLink","junit-platform-launcher"],["heading","junit-platform-launcher"],["body","\n"],["body","Public API for configuring and launching test plans — typically used by IDEs and build tools. See JUnit Platform Launcher API for details."],["body","\n"],["headingLink","junit-platform-reporting"],["heading","junit-platform-reporting"],["body","\n"],["body","TestExecutionListener implementations that generate test reports — typically used by IDEs and build tools. See JUnit Platform Reporting for details."],["body","\n"],["headingLink","junit-platform-runner"],["heading","junit-platform-runner"],["body","\n"],["body","Runner for executing tests and test suites on the JUnit Platform in a JUnit 4 environment. See Using JUnit 4 to run the JUnit Platform for details."],["body","\n"],["headingLink","junit-platform-suite"],["heading","junit-platform-suite"],["body","\n"],["body","JUnit Platform Suite artifact that transitively pulls in dependencies on junit-platform-suite-api and junit-platform-suite-engine for simplified dependency management in build tools such as Gradle and Maven."],["body","\n"],["headingLink","junit-platform-suite-api"],["heading","junit-platform-suite-api"],["body","\n"],["body","Annotations for configuring test suites on the JUnit Platform. Supported by the JUnit Platform Suite Engine and the JUnitPlatform runner."],["body","\n"],["headingLink","junit-platform-suite-commons"],["heading","junit-platform-suite-commons"],["body","\n"],["body","Common support utilities for executing test suites on the JUnit Platform."],["body","\n"],["headingLink","junit-platform-suite-engine"],["heading","junit-platform-suite-engine"],["body","\n"],["body","Engine that executes test suites on the JUnit Platform; only required at runtime. See JUnit Platform Suite Engine for details."],["body","\n"],["headingLink","junit-platform-testkit"],["heading","junit-platform-testkit"],["body","\n"],["body","Provides support for executing a test plan for a given TestEngine and then accessing the results via a fluent API to verify the expected results."],["body","\n"],["body","为执行给定TestEngine的测试计划提供支持，然后通过fluent API访问结果以验证预期结果。"],["body","\n"],["headingLink","junit-jupiter"],["heading","JUnit Jupiter"],["body","\n\n"],["body","Group ID: org.junit.jupiter"],["body","\n"],["body","Version: 5.8.2"],["body","\n"],["body","Artifact IDs:"],["body","\n\n"],["headingLink","junit-jupiter-1"],["heading","junit-jupiter"],["body","\n"],["body","JUnit Jupiter aggregator artifact that transitively pulls in dependencies on junit-jupiter-api, junit-jupiter-params, and junit-jupiter-engine for simplified dependency management in build tools such as Gradle and Maven."],["body","\n"],["body","JUnit Jupiter aggregator artifact，可传递地拉入对junit-jupiter-api，junit-jupiter-params和junit-jupiter-engine的依赖关系，以简化构建工具 (例如Gradle和Maven) 中的依赖关系。"],["body","\n"],["headingLink","junit-jupiter-api"],["heading","junit-jupiter-api"],["body","\n"],["body","JUnit Jupiter API for writing tests and extensions."],["body","\n"],["headingLink","junit-jupiter-engine"],["heading","junit-jupiter-engine"],["body","\n"],["body","JUnit Jupiter test engine implementation; only required at runtime."],["body","\n"],["headingLink","junit-jupiter-params"],["heading","junit-jupiter-params"],["body","\n"],["body","Support for parameterized tests in JUnit Jupiter."],["body","\n"],["headingLink","junit-jupiter-migrationsupport"],["heading","junit-jupiter-migrationsupport"],["body","\n"],["body","Support for migrating from JUnit 4 to JUnit Jupiter; only required for support for JUnit 4’s @Ignore annotation and for running selected JUnit 4 rules."],["body","\n"],["headingLink","junit-vintage"],["heading","JUnit Vintage"],["body","\n\n"],["body","Group ID: org.junit.vintage"],["body","\n"],["body","Version: 5.8.2"],["body","\n"],["body","Artifact ID:"],["body","\n\n"],["headingLink","junit-vintage-engine"],["heading","junit-vintage-engine"],["body","\n"],["body","JUnit Vintage test engine implementation that allows one to run vintage JUnit tests on the JUnit Platform. Vintage tests include those written using JUnit 3 or JUnit 4 APIs or tests written using testing frameworks built on those APIs."],["body","\n"],["body","JUnit Vintage 测试引擎实现，允许在JUnit平台上运行老式JUnit测试。老式测试包括使用JUnit 3或JUnit 4 api编写的测试，或使用基于这些api构建的测试框架编写的测试。"],["body","\n"],["headingLink","bill-of-materials-bom"],["heading","Bill of Materials (BOM)"],["body","\n"],["body","The Bill of Materials POM provided under the following Maven coordinates can be used to ease dependency management when referencing multiple of the above artifacts using Maven or Gradle."],["body","\n\n"],["body","Group ID: org.junit"],["body","\n"],["body","Artifact ID: junit-bom"],["body","\n"],["body","Version: 5.8.2"],["body","\n\n"],["headingLink","dependencies"],["heading","Dependencies"],["body","\n"],["body","Most of the above artifacts have a dependency in their published Maven POMs on the following @API Guardian JAR."],["body","\n"],["body","以上大多数artifacts都在其发布的Maven POMs中依赖于以下 @ API Guardian JAR。"],["body","\n\n"],["body","Group ID: org.apiguardian"],["body","\n"],["body","Artifact ID: apiguardian-api"],["body","\n"],["body","Version: 1.1.2"],["body","\n\n"],["body","In addition, most of the above artifacts have a direct or transitive dependency on the following OpenTest4J JAR."],["body","\n\n"],["body","Group ID: org.opentest4j"],["body","\n"],["body","Artifact ID: opentest4j"],["body","\n"],["body","Version: 1.2.0"],["body","\n\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","21.单元测试_JUNIT5/writtingTest/Annotations.html"],["title","Annotations.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","annotations"],["heading","Annotations"],["body","\n"],["body","JUnit Jupiter supports the following annotations for configuring tests and extending the framework."],["body","\n"],["body","JUnit Jupiter支持以下用于配置测试和扩展框架的注释。除非另有说明，否则所有核心注释都位于junit-jupiter-api模块中的org.junit.jupiter.api包中。"],["body","\n"],["body","Annotation"],["body","Description"],["body","\n"],["body","@Test"],["body","表示方法是一种测试方法。与JUnit 4的 @ Test注释不同，此注解不声明任何属性，因为JUnit Jupiter中的测试扩展基于其自己的专用注解进行操作。这样的方法是继承的，除非它们被覆盖。"],["body","\n"],["body","@ParameterizedTest"],["body","Denotes that a method is a parameterized test. 这样方法是继承的，除非它们被覆盖。"],["body","\n"],["body","@RepeatedTest"],["body","Denotes that a method is a test template for a repeated test. Such methods are inherited unless they are overridden."],["body","\n"],["body","@TestFactory"],["body","Denotes that a method is a test factory for dynamic tests. Such methods are inherited unless they are overridden."],["body","\n"],["body","@TestTemplate"],["body","Denotes that a method is a template for test cases designed to be invoked multiple times depending on the number of invocation contexts returned by the registered providers. Such methods are inherited unless they are overridden."],["body","\n"],["body","@TestClassOrder"],["body","Used to configure the test class execution order for @Nested test classes in the annotated test class. Such annotations are inherited."],["body","\n"],["body","@TestMethodOrder"],["body","Used to configure the test method execution order for the annotated test class; similar to JUnit 4’s @FixMethodOrder. Such annotations are inherited."],["body","\n"],["body","@TestInstance"],["body","Used to configure the test instance lifecycle for the annotated test class. Such annotations are inherited."],["body","\n"],["body","@DisplayName"],["body","Declares a custom display name for the test class or test method. Such annotations are not inherited."],["body","\n"],["body","@DisplayNameGeneration"],["body","Declares a custom display name generator for the test class. Such annotations are inherited."],["body","\n"],["body","@BeforeEach"],["body","Denotes that the annotated method should be executed before each @Test, @RepeatedTest, @ParameterizedTest, or @TestFactory method in the current class; analogous to JUnit 4’s @Before. Such methods are inherited unless they are overridden."],["body","\n"],["body","@AfterEach"],["body","Denotes that the annotated method should be executed after each @Test, @RepeatedTest, @ParameterizedTest, or @TestFactory method in the current class; analogous to JUnit 4’s @After. Such methods are inherited unless they are overridden."],["body","\n"],["body","@BeforeAll"],["body","Denotes that the annotated method should be executed before all @Test, @RepeatedTest, @ParameterizedTest, and @TestFactory methods in the current class; analogous to JUnit 4’s @BeforeClass. Such methods are inherited (unless they are hidden or overridden) and must be static (unless the \"per-class\" test instance lifecycle is used)."],["body","\n"],["body","@AfterAll"],["body","Denotes that the annotated method should be executed after all @Test, @RepeatedTest, @ParameterizedTest, and @TestFactory methods in the current class; analogous to JUnit 4’s @AfterClass. Such methods are inherited (unless they are hidden or overridden) and must be static (unless the \"per-class\" test instance lifecycle is used)."],["body","\n"],["body","@Nested"],["body","Denotes that the annotated class is a non-static nested test class. @BeforeAll and @AfterAll methods cannot be used directly in a @Nested test class unless the \"per-class\" test instance lifecycle is used. Such annotations are not inherited."],["body","\n"],["body","@Tag"],["body","Used to declare tags for filtering tests, either at the class or method level; analogous to test groups in TestNG or Categories in JUnit 4. Such annotations are inherited at the class level but not at the method level."],["body","\n"],["body","@Disabled"],["body","Used to disable a test class or test method; analogous to JUnit 4’s @Ignore. Such annotations are not inherited."],["body","\n"],["body","@Timeout"],["body","Used to fail a test, test factory, test template, or lifecycle method if its execution exceeds a given duration. Such annotations are inherited."],["body","\n"],["body","@ExtendWith"],["body","Used to register extensions declaratively. Such annotations are inherited."],["body","\n"],["body","@RegisterExtension"],["body","Used to register extensions programmatically via fields. Such fields are inherited unless they are shadowed."],["body","\n"],["body","@TempDir"],["body","Used to supply a temporary directory via field injection or parameter injection in a lifecycle method or test method; located in the org.junit.jupiter.api.io package."],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","21.单元测试_JUNIT5/README.html"],["title","JUNIT5 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","overview"],["heading","Overview"],["body","\n"],["body","本文档的目标是为编写测试的程序员，扩展作者和引擎作者以及构建工具和IDE供应商提供全面的参考文档。"],["body","\n"],["headingLink","what-is-junit-5"],["heading","What is JUnit 5?"],["body","\n"],["body","与以前的Junit版本不同，JUnit 5由来自三个不同子项目的几个不同模块组成。"],["body","\n"],["body","JUnit 5 = JUnit Platform + JUnit Jupiter + JUnit Vintage"],["body","\n"],["body","JUnit Platform "],["body","\n\n"],["body","The JUnit Platform serves as a foundation for launching testing frameworks on the JVM."],["body","\n"],["body","It also defines the TestEngine API for developing a testing framework that runs on the platform. "],["body","\n"],["body","Furthermore, the platform provides a Console Launcher to launch the platform from the command line and the JUnit Platform Suite Engine for running a custom test suite using one or more test engines on the platform. "],["body","\n"],["body","First-class support for the JUnit Platform also exists in popular IDEs (see IntelliJ IDEA, Eclipse, NetBeans, and Visual Studio Code) and build tools (see Gradle, Maven, and Ant)."],["body","\n\n"],["body","JUnit Jupiter"],["body","\n"],["body","JUnit Jupiter is the combination of the new programming model and extension model for writing tests and extensions in JUnit 5. The Jupiter sub-project provides a TestEngine for running Jupiter based tests on the platform."],["body","\n"],["body","JUnit Vintage"],["body","\n"],["body","JUnit Vintage provides a TestEngine for running JUnit 3 and JUnit 4 based tests on the platform. It requires JUnit 4.12 or later to be present on the class path or module path."],["body","\n"],["headingLink","supported-java-versions"],["heading","Supported Java Versions"],["body","\n"],["body","JUnit 5 requires Java 8 (or higher) at runtime. However, you can still test code that has been compiled with previous versions of the JDK."],["body","\n"],["headingLink","getting-help"],["heading","Getting Help"],["body","\n"],["body","Ask JUnit 5 related questions on Stack Overflow or chat with the community on Gitter."],["body","\n"],["headingLink","getting-started"],["heading","Getting Started"],["body","\n"],["headingLink","downloading-junit-artifacts"],["heading","Downloading JUnit Artifacts"],["body","\n"],["body","To find out what artifacts are available for download and inclusion in your project, refer to Dependency Metadata. To set up dependency management for your build, refer to Build Support and the Example Projects."],["body","\n"],["headingLink","junit-5-features"],["heading","JUnit 5 Features"],["body","\n"],["body","To find out what features are available in JUnit 5 and how to use them, read the corresponding sections of this User Guide, organized by topic."],["body","\n"],["body","要了解JUnit 5中可用的功能以及如何使用它们，请阅读本用户指南的相应部分 (按主题组织)。"],["body","\n\n"],["body","Writing Tests in JUnit Jupiter"],["body","\n"],["body","Migrating from JUnit 4 to JUnit Jupiter"],["body","\n"],["body","Running Tests"],["body","\n"],["body","Extension Model for JUnit Jupiter"],["body","\n"],["body","Advanced Topics\n\n"],["body","JUnit Platform Launcher API"],["body","\n"],["body","JUnit Platform Test Kit"],["body","\n\n"],["body","\n\n"],["headingLink","example-projects"],["heading","Example Projects"],["body","\n"],["body","To see complete, working examples of projects that you can copy and experiment with, the junit5-samples repository is a good place to start. The junit5-samples repository hosts a collection of sample projects based on JUnit Jupiter, JUnit Vintage, and other testing frameworks. You’ll find appropriate build scripts (e.g., build.gradle, pom.xml, etc.) in the example projects. The links below highlight some of the combinations you can choose from."],["body","\n\n"],["body","For Gradle and Java, check out the junit5-jupiter-starter-gradle project."],["body","\n"],["body","For Gradle and Kotlin, check out the junit5-jupiter-starter-gradle-kotlin project."],["body","\n"],["body","For Gradle and Groovy, check out the junit5-jupiter-starter-gradle-groovy project."],["body","\n"],["body","For Maven, check out the junit5-jupiter-starter-maven project."],["body","\n"],["body","For Ant, check out the junit5-jupiter-starter-ant project."],["body","\n\n"],["headingLink","关于junit5"],["heading","关于JUnit5"],["body","\n"],["body","JUnit是常用的java单元测试框架，5是当前最新版本，其整体架构如下(图片来自网络)："],["body","\n"],["body","\n\n"],["body","从上图可见，整个Junit5可以划分成三层：顶层框架(Framework)、中间的引擎（Engine），底层的平台（Platform）；"],["body","\n"],["body","官方定义Junit5由三部分组成：Platform、Jupiter、Vintage，功能如下；"],["body","\n"],["body","Platform：位于架构的最底层，是JVM上执行单元测试的基础平台，还对接了各种IDE（例如IDEA、eclipse），并且还与引擎层对接，定义了引擎层对接的API；"],["body","\n"],["body","Jupiter：位于引擎层，支持5版本的编程模型、扩展模型；"],["body","\n"],["body","Vintage：位于引擎层，用于执行低版本的测试用例；"],["body","\n"],["body","可见整个Junit Platform是开放的，通过引擎API各种测试框架都可以接入；"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","20.html"],["title","设计模式 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.html"],["title","jvm基础 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/springboot-devtools.html"],["title","springboot-devtools.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","springboot devtools是做什么的?"],["body","\n\n"],["body","使Spring Boot应用支持热部署，提高开发者的开发效率，无需手动重启Spring Boot应用"],["body","\n"],["body","深层原理是使用了两个ClassLoader，一个Classloader加载那些不会改变的类（第三方Jar包），另一个ClassLoader加载会更改的类,称为restart ClassLoader"],["body","\n"],["body","但如果你期望第三方jar文件的变动也会触发devtools进行自动重启，则可以创建META-INF/spring-devtools.properties,在文件中通过restart.include.xxx指定需要自动重启的jar，通过restart.exclude.xxx指定不需要自动重启的jar，属性值采用正则表达式匹配"],["body","\n"],["body","有代码更改的时候，原来的restart ClassLoader 被丢弃，重新创建一个restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间。"],["body","\n"],["body","默认情况下，/META-INF/maven, /META-INF/resources, /resources, /static, /public, 和 /templates下面的资源的变化不会触发自动重启"],["body","\n"],["body","如果想监听非Classpath路径下的文件的变更进行自动重启，则可以通过spring.devtools.restart.additional-paths属性进行指定。"],["body","\n"],["body","如果你想禁用devtools的自动重启功能，则可以指定spring.devtools.restart.enabled=false，也可以在Spring Boot启动的main程序中，在调用SpringApplication.run(..)之前指定系统属性spring.devtools.restart.enabled为false"],["body","\n"],["body","spring.devtools.restart.trigger-file,指定触发自动重启的文件可以实现一次重启\n\n"],["body","spring.devtools.restart.trigger-file=application.properties"],["body","\n\n"],["body","\n"],["body","上面的针对devtools的配置都是基于单个项目的配置，如果希望上述配置能够针对所有的项目都生效，则可以在HOME目录下新建一个.spring-boot-devtools.properties文件（注意文件名是以点开头的），在其中定义那些配置属性。"],["body","\n\n"],["h1","maven配置"],["body","\n"],["body","<dependencies>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-devtools</artifactId>\n\t\t<optional>true</optional>\n\t</dependency>\n\t<dependency>\n\t\t<groupId>org.springframework.boot</groupId>\n\t\t<artifactId>spring-boot-starter-test</artifactId>\n\t\t<scope>test</scope>\n\t</dependency>\n</dependencies>\n<build>\n\t<plugins>\n\t\t<plugin>\n\t\t\t<groupId>org.springframework.boot</groupId>\n\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\n\t\t\t<configuration>\n\t\t\t\t<fork>true</fork>\n\t\t\t</configuration>\n\t\t</plugin>\n\t</plugins>\n</build>\n"],["body","\n"],["h1","devtools的配置"],["body","\n"],["body","#热部署生效\nspring.devtools.restart.enabled: true\n#设置重启的目录\n#spring.devtools.restart.additional-paths: src/main/java\n#classpath目录下的WEB-INF文件夹内容修改不重启\nspring.devtools.restart.exclude: WEB-INF/**\n"],["body","\n"],["h1","IDEA配置"],["body","\n\n"],["body","当我们修改了Java类后，IDEA默认是不自动编译的"],["body","\n"],["body","而spring-boot-devtools又是监测classpath下的文件发生变化才会重启应用"],["body","\n"],["body","所以需要设置IDEA的自动编译：\n\n"],["body","File-Settings-Compiler-Build Project automatically"],["body","\n"],["body","ctrl + shift + alt + /,选择Registry,勾上 Compiler autoMake allow when app running"],["body","\n\n"],["body","\n\n"],["h1","热部署的文件类型"],["body","\n\n"],["body","devtools可以实现页面热部署\n\n"],["body","这个可以直接在application.properties文件中配置spring.thymeleaf.cache=false来实现"],["body","\n\n"],["body","\n"],["body","实现类文件热部署（类文件修改后不会立即生效）"],["body","\n"],["body","实现对属性文件的热部署。"],["body","\n\n"],["h1","配置项"],["body","\n"],["body","前缀spring.devtools.restart"],["body","\n"],["body","属性名"],["body","默认值"],["body","说明"],["body","\n"],["body","log-condition-evaluation-delta"],["body","false"],["body","是否报告"],["body","\n"],["body","exclude"],["body","exclude=static/,public/,指定要排除的文件"],["body","\n"],["body","additional-exclude"],["body","额外排除的文件"],["body","\n"],["body","enabled"],["body","false"],["body","是否启用"],["body","\n"],["body","additional-paths"],["body","类路径之外的路径"],["body","\n"],["body","trigger-file"],["body","使用触发文件"],["body","\n\n\n"],["body","官网说明"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/快速入门.html"],["title","快速入门.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","什么是 springBoot?"],["body","\n"],["body","curl https://start.spring.io/starter.zip -d bootVersion=2.3.0.M1 -d dependencies=web,devtools -o demo.zip"],["body","\n"],["h1","优点"],["body","\n"],["body","自动配置,无需配置XML"],["body","\n"],["body","微服务"],["body","\n"],["h1","springboot原理"],["body","\n"],["body","Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来"],["body","\n"],["body","\n"],["h1","springBoot相关依赖"],["body","\n"],["body","<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.3.0.RELEASE</version>\n</parent>\n<dependencies>\n    <dependency>\t\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring‐boot‐starter‐web</artifactId>\n    </dependency>\n</dependencies>\n"],["body","\n"],["h1","打jar包插件"],["body","\n"],["body","<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n"],["body","\n"],["h1","主程序类，主入口类"],["body","\n"],["body","SpringApplication.run(HelloWorldMainApplication.class,args);"],["body","\n"],["h1","spring运行器"],["body","\n"],["body","应用程序运行器"],["body","\n\n"],["body","启动后执行代码的接口"],["body","\n"],["body","ApplicationRunner "],["body","\n\n"],["body","命令行运行器"],["body","\n\n"],["body","完全启动后回传 命令行参数"],["body","\n"],["body","CommandLineRunner"],["body","\n\n"],["h1","属性的使用"],["body","\n"],["headingLink","自定义属性与加载"],["heading","自定义属性与加载"],["body","\n"],["body","定义"],["body","\n"],["body","com.didispace.blog.name=程序猿DD"],["body","\n"],["body","使用"],["body","\n"],["body","@Value(\"${com.didispace.blog.name}\")    private String name;"],["body","\n"],["headingLink","参数间的引用"],["heading","参数间的引用"],["body","\n"],["body","com.didispace.blog.name=程序猿DD \ncom.didispace.blog.title=Spring Boot教程 com.didispace.blog.desc=${com.didispace.blog.name}正在努力写《${com.didispace.blog.title}》\n"],["body","\n"],["headingLink","使用随机数"],["heading","使用随机数"],["body","\n"],["body","RandomValuePropertySource  提供支持"],["body","\n"],["body","# 随机字符串\ncom.didispace.blog.value=${random.value}\n# 随机int\ncom.didispace.blog.number=${random.int}\n# 随机long\ncom.didispace.blog.bignumber=${random.long}\n# 10以内的随机数\ncom.didispace.blog.test1=${random.int(10)}\n# 10-20的随机数\ncom.didispace.blog.test2=${random.int[10,20]}\n"],["body","\n"],["headingLink","通过命令行设置属性值"],["heading","通过命令行设置属性值"],["body","\n"],["body","设置值"],["body","\n"],["body","连续的两个减号`--`就是对`application.properties`中的属性值进行赋值的标识。所以，`java -jar xxx.jar --server.port=8888`命令，等价于我们在`application.properties`中添加属性`server.port=8888`\n"],["body","\n"],["body","屏蔽值"],["body","\n"],["body","SpringApplication.setAddCommandLineProperties(false)"],["body","\n"],["headingLink","外部参数设置"],["heading","外部参数设置"],["body","\n"],["body","java -D"],["body","\n"],["headingLink","多环境配置"],["heading","多环境配置"],["body","\n\n"],["body","在Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式，其中{profile}对应你的环境标识"],["body","\n"],["body","application-dev.properties：开发环境"],["body","\n"],["body","application-test.properties：测试环境"],["body","\n"],["body","application-prod.properties：生产环境"],["body","\n"],["body","至于哪个具体的配置文件会被加载，需要在application.properties文件中通过spring.profiles.active属性来设置，其值对应{profile}值。"],["body","\n"],["body","application.properties中配置通用内容"],["body","\n\n"],["headingLink","spring获取配置属性的方法按优先级-降序"],["heading","spring获取配置属性的方法，按优先级 降序"],["body","\n"],["body","1.命令行参数"],["body","\n"],["body","2.java:comp/env 里的 JNDI 属性"],["body","\n"],["body","3.JVM 系统属性"],["body","\n"],["body","4.操作系统环境变量"],["body","\n"],["body","5.RandomValuePropertySource 属性类生成的 random.* 属性"],["body","\n"],["body","6.应用以外的 application.properties（或 yml）文件"],["body","\n"],["body","7.打包在应用内的 application.properties（或 yml）文件"],["body","\n"],["body","8.在应用 @Configuration 配置类中，用 @PropertySource 注解声明的属性文件"],["body","\n"],["body","9.SpringApplication.setDefaultProperties 声明的默认属性"],["body","\n"],["headingLink","yml与-properties"],["heading","YML与 properties"],["body","\n\n"],["body","yml格式键值对冒号后面，必须空一格。"],["body","\n"],["body","iso-8859 的编码方式读取 application.properties 配置文件，"],["body","\n\n"],["h1","spring构建restful web服务"],["body","\n"],["headingLink","restcontroller"],["heading","@RestController"],["body","\n"],["body","注释用于定义RESTful Web服务。它提供JSON，XML和自定义响应"],["body","\n"],["headingLink","requestmapping"],["heading","@RequestMapping"],["body","\n"],["body","定义rest端点的URI，默认是GET"],["body","\n"],["headingLink","requestbody"],["heading","@RequestBody"],["body","\n"],["body","定义请求正文内容类型"],["body","\n"],["headingLink","pathvariable"],["heading","@PathVariable"],["body","\n"],["body","路径变量"],["body","\n"],["body","@RequestMapping(\"/hello/{aaa}/{bbb}\")\n    public String hello(@PathVariable(\"aaa\")String aa1,@PathVariable(\"bbb\") String bb1 ){\n        return aa1+\":\"+bb1;\n    }\n"],["body","\n"],["headingLink","getputpostdelete"],["heading","GET,PUT,POST,DELETE"],["body","\n"],["body","@RequestMapping(value = \"/products\", method = RequestMethod.POST) "],["body","\n"],["h1","SpringBoot异常处理"],["body","\n"],["headingLink","controlleradvice"],["heading","@ControllerAdvice"],["body","\n"],["body","是一个注解，用于标识这是一个 全局处理"],["body","\n"],["headingLink","exceptionhandlervalue--productnotfoundexceptionclass"],["heading","@ExceptionHandler(value = ProductNotfoundException.class)"],["body","\n"],["body","针对特定异常的特定类"],["body","\n"],["h1","springboot拦截器"],["body","\n"],["headingLink","可以在以下三种情况拦截"],["heading","可以在以下三种情况拦截"],["body","\n\n"],["body","\n"],["body","在将请求发送到控制器之前"],["body","\n"],["body","\n"],["body","\n"],["body","在将响应发送给客户端之前"],["body","\n"],["body","\n"],["body","\n"],["body","完成响应之后"],["body","\n"],["body","\n\n"],["headingLink","实现步骤"],["heading","实现步骤"],["body","\n\n"],["body","实现HandlerInterceptor,与component组件"],["body","\n"],["body","使用 webMVCConfigurerAdapter 向InterceptorRegistry 注册"],["body","\n\n"],["h1","Servlet过滤器"],["body","\n"],["body","public class SimpleFilter implements Filter"],["body","\n"],["body","用于拦截应用程序的HTTP请求和响应的对象"],["body","\n"],["h1","springBoot端口\t\t"],["body","\n"],["body","Spring Boot允许在不同的端口号上多次运行相同的应用程序。 在本章中，将详细了解和学习这一点。 请注意，默认端口号为:8080。"],["body","\n"],["body","自定义端口"],["body","\n"],["body","server.port = 9090"],["body","\n"],["body","server: \n   port: 9090\n"],["body","\n"],["body","随机端口：server.port = 0"],["body","\n"],["h1","springRest模板\t\t \t\t\t\t \t\t\t\t \t\t\t\t \t\t\t"],["body","\n\n"],["body","Rest模板 可以调用  RESTfulWeb服务"],["body","\n"],["body","调用方法"],["body","\n\n"],["body"," ResponseEntity<T> exchange(\n \tString url,\n \tHttpMethod method,\n    @Nullable HttpEntity<?> requestEntity,\n    Class<T> responseType,\n    Object... uriVariables\n)\n"],["body","\n"],["h1","Spring Boot文件处理"],["body","\n"],["headingLink","文件上传"],["heading","文件上传"],["body","\n"],["body","MultipartFile file\nconsumes = MediaType.MULTIPART_FORM_DATA_VALUE \n//媒体类型\n"],["body","\n"],["headingLink","文件下载"],["heading","文件下载"],["body","\n\n"],["body","\n"],["body","接收下载请求"],["body","\n"],["body","\n"],["body","\n"],["body","找到下载文件,转换成流"],["body","\n"],["body","\n"],["body","\n"],["body","设置报文头"],["body","\n\n"],["body","Content-Disposition"],["body","\n"],["body","\"Pragma\", \"no-cache\"  为了兼容HTTP1.1"],["body","\n"],["body","\"Expires\", \"0\" "],["body","\n\n"],["body","\n"],["body","\n"],["body","组键响应头"],["body","\n\n"],["body","构建OK报文"],["body","\n"],["body","构建报文头"],["body","\n"],["body","文件大小"],["body","\n"],["body","响应类型"],["body","\n"],["body","响应体"],["body","\n\n"],["body","\n\n"],["h1","Spring Boot Thymeleaf"],["body","\n\n"],["body","\n"],["body","Thymeleaf是一个基于Java的模板解析库，用于创建Web应用程序"],["body","\n"],["body","\n"],["body","\n"],["body","支持 HTML,XML模板"],["body","\n"],["body","\n\n"],["body","依赖配置"],["body","\n"],["body","<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-thymeleaf</artifactId>\n</dependency>\n"],["body","\n"],["h1","Spring Boot CORS支持"],["body","\n"],["body","在控制器中启用CORS"],["body","\n"],["body","@RequestMapping(value = \"/products\") @CrossOrigin(origins = \"http://localhost:8080\") \npublic ResponseEntity<Object> getProduct() \n{   return null; } \n\n"],["body","\n"],["body","全局CORS配置"],["body","\n"],["body","@Bean\npublic WebMvcConfigurer corsConfigurer() {\n   return new WebMvcConfigurerAdapter() {\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n         registry.addMapping(\"/products\").allowedOrigins(\"http://localhost:9000\");\n      }    \n   };\n}\n"],["body","\n"],["h1","springBoot国际化"],["body","\n"],["body","依赖tymeleaf"],["body","\n"],["body","启用国际化步骤"],["body","\n\n"],["body","需要确定应用程序的默认Locale"],["body","\n\n"],["body","@Bean\npublic LocaleResolver localeResolver() {\n   SessionLocaleResolver sessionLocaleResolver = new SessionLocaleResolver();\nsessionLocaleResolver.setDefaultLocale\n(Locale.US);\n   return sessionLocaleResolver;\n}\n"],["body","\n\n"],["body","\n"],["body","语言环境变更拦截器:设置拦截参数"],["body","\n"],["body","@Bean\npublic LocaleChangeInterceptor localeChangeInterceptor() {\n   LocaleChangeInterceptor localeChangeInterceptor = new LocaleChangeInterceptor();\n   localeChangeInterceptor.setParamName(\"language\");\n   return localeChangeInterceptor;\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","注册拦截器"],["body","\n"],["body","@Override\npublic void addInterceptors(InterceptorRegistry registry) {\n   registry.addInterceptor(localeChangeInterceptor());\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","默认从 src/main/resources 获取消息源"],["body","\n\n"],["body","\n"],["body","消息文件"],["body","\n"],["body","message.properties"],["body","\n"],["body","messages_XX.properties XX表示区码"],["body","\n"],["body","\n"],["body","\n"],["body","idea创建 Resource Bundle"],["body","\n"],["body","\n"],["body","\n"],["body","idea默认properties文件为GBK编码"],["body","\n"],["body","\n\n"],["body","\n\n"],["h1","Spring Boot调度"],["body","\n\n"],["body","Java Cron表达式用于配置CronTrigger的实例"],["body","\n\n"],["headingLink","使用"],["heading","使用"],["body","\n\n"],["body","\n"],["body","@EnableScheduling 注解用于为应用程序启用调度程序"],["body","\n"],["body","\n"],["body","\n"],["body","@Scheduled(cron = \"0 * 9 * * ?\")\npublic void cronJobSch() throws Exception {\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","固定速率"],["body","\n\n"],["body","@Scheduled(fixedRate = 1000) "],["body","\n\n"],["body","\n"],["body","\n"],["body","固定延迟"],["body","\n\n"],["body","@Scheduled(fixedDelay = 1000, initialDelay = 1000)"],["body","\n\n"],["body","\n\n"],["h1","Spring Boot启用HTTPS"],["body","\n"],["body","可按照以下步骤，在Spring Boot应用程序中配置HTTPS和端口443 -"],["body","\n\n"],["body","\n"],["body","获取SSL证书 - 创建自签名证书或从证书颁发机构获取证书"],["body","\n"],["body"," keytool.exe -genkey -alias tomcat -storetype PKCS12 -keyalg RSA -keysize 2048 -keystore keystore.p12 -validity 3650\n"],["body","\n"],["body","\n"],["body","\n"],["body","启用HTTPS和443端口"],["body","\n"],["body","server:\n   port: 443\n   ssl:\n      key-store: keystore.p12\n      key-store-password: springboot\n      keyStoreType: PKCS12\n      keyAlias: tomcat\n\n"],["body","\n"],["body","\n\n"],["h1","springBoot发送电子邮件"],["body","\n"],["body","依赖"],["body","\n"],["body","<dependency>\n   <groupId>org.springframework.boot</groupId>\n   <artifactId>spring-boot-starter-mail</artifactId>\n</dependency>\n"],["body","\n"],["h1","@SpringBootApplication 注解解析"],["body","\n\n"],["body","\n"],["body","Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类"],["body","\n"],["body","\n"],["body","\n"],["body","SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；这是一个组合注解。"],["body","\n\n"],["body","@SpringBootConfiguration 等同于 spring的 @Configuration 也就是Spring里面的配置类"],["body","\n"],["body","@EnableAutoConfiguration，开启自动配置\n\n"],["body","@AutoConfigurationPackage 自动配置包\n\n"],["body","@Import(AutoConfigurationPackages.Registrar.class)：Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class指定。 也就是: 将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器"],["body","\n\n"],["body","\n\n"],["body","\n"],["body","@Import(AutoConfigurationImportSelector.class)"],["body","\n\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/springboot-日志.html"],["title","springboot-日志.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Logging"],["body","\n"],["body","CommonsLoggingAPI"],["body","\n"],["body","SpringBoot 使用 Commons Logging API 记录所有内部日志 ，但是允许多种底层内部实现"],["body","\n"],["body","默认提供控制台输出"],["body","\n"],["body","提供  Java Util Logging、Log4J2 和 Logback 默认配置，在每种情况下，记录器都预先配置为使用控制台输出，也可以使用可选的文件输出。"],["body","\n"],["body","默认情况下，如果您使用“Starters”，则使用 Logback 进行日志记录，还包括适当的 Logback 路由，以确保使用 Java Util Logging、Commons Logging、Log4J 或 SLF4J 的依赖库都能正常工作。"],["body","\n"],["h1","Log Format"],["body","\n"],["body","Spring Boot 的默认日志输出类似于以下示例："],["body","\n"],["body","019-03-05 10:57:51.112  INFO 45469 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/7.0.52\n2019-03-05 10:57:51.253  INFO 45469 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext\n2019-03-05 10:57:51.253  INFO 45469 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1358 ms\n2019-03-05 10:57:51.698  INFO 45469 --- [ost-startStop-1] o.s.b.c.e.ServletRegistrationBean        : Mapping servlet: 'dispatcherServlet' to [/]\n2019-03-05 10:57:51.702  INFO 45469 --- [ost-startStop-1] o.s.b.c.embedded.FilterRegistrationBean  : Mapping filter: 'hiddenHttpMethodFilter' to: [/*]\n"],["body","\n"],["body","格式为"],["body","\n\n"],["body","Date and Time: Millisecond precision and easily sortable."],["body","\n"],["body","Log Level: ERROR, WARN, INFO, DEBUG, or TRACE."],["body","\n"],["body","Process ID."],["body","\n"],["body","A --- separator ：分割日志头和日志内容"],["body","\n"],["body","Thread name: 括在方括号中（控制台输出可能会被截断）。"],["body","\n"],["body","Logger name: 通常是源类名称（通常缩写）。"],["body","\n"],["body","The log message."],["body","\n\n"],["h1","Console Output"],["body","\n"],["body","默认日志配置在写入消息时将消息回显到控制台。"],["body","\n"],["body","默认情况下，会记录 ERROR 级别、WARN 级别和 INFO 级别的消息。"],["body","\n"],["body","您还可以通过使用 --debug 标志启动应用程序来启用 “debug” 模式。"],["body","\n"],["body","$ java -jar myapp.jar --debug\n"],["body","\n"],["body","You can also specify debug=true in your application.properties."],["body","\n"],["body","或者，您可以通过使用 --trace 标志（或 application.properties 中的 trace=true）启动应用程序来启用“跟踪”模式。"],["body","\n"],["headingLink","color-coded-output"],["heading","Color-coded Output"],["body","\n"],["body","如果您的终端支持 ANSI，则使用颜色输出来提高可读性。"],["body","\n"],["body","您可以将 spring.output.ansi.enabled 设置为支持的值以覆盖自动检测。"],["body","\n"],["body","颜色编码是使用 %clr 转换字配置的。"],["body","\n"],["body","在最简单的形式中，转换器根据日志级别为输出着色，如以下示例所示："],["body","\n"],["body","%clr(%5p)\n"],["body","\n"],["body","Level"],["body","Color"],["body","\n"],["body","FATAL"],["body","Red"],["body","\n"],["body","ERROR"],["body","Red"],["body","\n"],["body","WARN"],["body","Yellow"],["body","\n"],["body","INFO"],["body","Green"],["body","\n"],["body","DEBUG"],["body","Green"],["body","\n"],["body","TRACE"],["body","Green"],["body","\n\n\n"],["body","或者，您可以通过将其作为转换选项提供来指定应使用的颜色或样式。"],["body","\n"],["body","例如，要使文本变黄，请使用以下设置："],["body","\n"],["body","%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){yellow}\n"],["body","\n"],["body","支持以下颜色和样式："],["body","\n\n"],["body","blue"],["body","\n"],["body","cyan"],["body","\n"],["body","faint"],["body","\n"],["body","green"],["body","\n"],["body","magenta"],["body","\n"],["body","red"],["body","\n"],["body","yellow"],["body","\n\n"],["h1","File Output"],["body","\n"],["body","默认情况下，Spring Boot 只记录到控制台，不写入日志文件。"],["body","\n"],["body","如果您想在控制台输出之外写入日志文件，您需要设置 logging.file.name 或 logging.file.path 属性（例如，在您的 application.properties 中）。"],["body","\n"],["body","下表显示了 logging.* 属性如何一起使用："],["body","\n"],["body","logging.file.name"],["body","logging.file.path"],["body","Example"],["body","Description"],["body","\n"],["body","(none)"],["body","(none)"],["body","仅控制台记录。"],["body","\n"],["body","Specific file"],["body","(none)"],["body","my.log"],["body","写入指定的日志文件。名称可以是确切位置或相对于当前目录。"],["body","\n"],["body","(none)"],["body","Specific directory"],["body","/var/log"],["body","将 spring.log 写入指定目录。名称可以是确切位置或相对于当前目录。"],["body","\n\n\n"],["body","日志文件在达到 10 MB 时会轮换，并且与控制台输出一样，默认情况下会记录 ERROR 级别、WARN 级别和 INFO 级别的消息。"],["body","\n"],["body","日志属性独立于实际的日志基础设施。"],["body","\n"],["body","因此，特定的配置键（例如 Logback 的 logback.configurationFile）不受 spring Boot 管理。"],["body","\n"],["h1","File Rotation"],["body","\n"],["body","如果您使用的是 Logback，则可以使用 application.properties 或 application.yaml 文件微调日志轮换设置。"],["body","\n"],["body","对于所有其他日志系统，您需要自己直接配置轮换设置（例如，如果您使用 Log4J2，那么您可以添加一个 log4j.xml 文件）。"],["body","\n"],["body","支持以下轮换策略属性："],["body","\n"],["body","Name"],["body","Description"],["body","\n"],["body","logging.logback.rollingpolicy.file-name-pattern"],["body","用于创建日志存档的文件名模式。"],["body","\n"],["body","logging.logback.rollingpolicy.clean-history-on-start"],["body","如果在应用程序启动时应该进行日志归档清理。"],["body","\n"],["body","logging.logback.rollingpolicy.max-file-size"],["body","归档前日志文件的最大大小。"],["body","\n"],["body","logging.logback.rollingpolicy.total-size-cap"],["body","在删除之前可以使用的最大大小日志存档数量。"],["body","\n"],["body","logging.logback.rollingpolicy.max-history"],["body","保留日志存档的天数（默认为 7）"],["body","\n\n\n"],["h1","Log Levels"],["body","\n"],["body","所有支持的日志系统都可以通过使用 logging.level.= 在 Spring Environment（例如，在 application.properties）中设置记录器级别，其中级别是 TRACE, DEBUG, INFO, WARN, ERROR, FATAL, or OFF 之一"],["body","\n"],["body","可以使用 logging.level.root 配置根记录器"],["body","\n"],["body","logging:\n  level:\n    root: \"warn\"\n    org.springframework.web: \"debug\"\n    org.hibernate: \"error\"\n\n"],["body","\n"],["body","也可以使用环境变量设置日志记录级别。"],["body","\n"],["body","例如， LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB=DEBUG 会将 org.springframework.web 设置为 DEBUG。"],["body","\n"],["body","上述方法仅适用于包级日志记录。"],["body","\n"],["body","由于宽松绑定总是将环境变量转换为小写，因此不可能以这种方式为单个类配置日志记录"],["body","\n"],["body","如果需要为类配置日志记录，可以使用 SPRING_APPLICATION_JSON 变量。"],["body","\n"],["h1","Log Groups"],["body","\n"],["body","能够将相关的记录器组合在一起以便可以同时配置它们通常很有用。"],["body","\n"],["body","例如，您通常可能会更改所有与 Tomcat 相关的记录器的日志记录级别，但您无法轻松记住顶级包。"],["body","\n"],["body","为了解决这个问题，Spring Boot 允许您在 Spring 环境中定义日志记录组。"],["body","\n"],["body","例如，下面是如何通过将“tomcat”组添加到 application.properties 来定义它："],["body","\n"],["body","logging:\n  group:\n    tomcat: \"org.apache.catalina,org.apache.coyote,org.apache.tomcat\"\n"],["body","\n"],["body","定义后，您可以使用一行更改组中所有记录器的级别："],["body","\n"],["body","logging:\n  level:\n    tomcat: \"trace\"\n"],["body","\n"],["body","Spring Boot 包括以下可以开箱即用的预定义日志记录组："],["body","\n"],["body","Name"],["body","Loggers"],["body","\n"],["body","web"],["body","org.springframework.core.codec, org.springframework.http, org.springframework.web, org.springframework.boot.actuate.endpoint.web, org.springframework.boot.web.servlet.ServletContextInitializerBeans"],["body","\n"],["body","sql"],["body","org.springframework.jdbc.core, org.hibernate.SQL, org.jooq.tools.LoggerListener"],["body","\n\n\n"],["h1","Using a Log Shutdown Hook"],["body","\n"],["body","为了在您的应用程序终止时释放日志资源，提供了一个关闭挂钩,当 JVM 退出时将触发日志系统清理。"],["body","\n"],["body","logging:\n  register-shutdown-hook: false\n\n"],["body","\n"],["h1","Custom Log Configuration"],["body","\n"],["body","可以通过在类路径中包含适当的库来激活各种日志系统"],["body","\n"],["body","并且可以通过在类路径的根目录或以下 Spring 环境变量属性指定的位置提供合适的配置文件来进一步定制：logging.config。"],["body","\n"],["body","您可以通过使用 org.springframework.boot.logging.LoggingSystem 系统属性来强制 Spring Boot 使用特定的日志记录系统。"],["body","\n"],["body","该值应该是 LoggingSystem 实现的完全限定类名。"],["body","\n"],["body","您还可以使用 none 值完全禁用 Spring Boot 的日志记录配置。"],["body","\n"],["body","注意"],["body","\n\n"],["body","\n"],["body","由于日志记录是在创建 ApplicationContext 之前初始化的，因此无法从 Spring @Configuration 文件中的 @PropertySources 控制日志记录。"],["body","\n"],["body","\n"],["body","\n"],["body","更改日志系统或完全禁用它的唯一方法是通过系统属性。"],["body","\n"],["body","\n\n"],["body","根据您的日志系统，加载以下文件："],["body","\n"],["body","Logging System"],["body","Customization"],["body","\n"],["body","Logback"],["body","logback-spring.xml, logback-spring.groovy, logback.xml, or logback.groovy"],["body","\n"],["body","Log4j2"],["body","log4j2-spring.xml or log4j2.xml"],["body","\n"],["body","JDK (Java Util Logging)"],["body","logging.properties"],["body","\n\n\n"],["body","如果可能，我们建议您将 -spring 变体用于日志记录配置（例如，logback-spring.xml 而不是 logback.xml）。"],["body","\n"],["body","如果使用标准配置位置，Spring 无法完全控制日志初始化。"],["body","\n"],["body","警告"],["body","\n"],["body","Java Util Logging 存在已知的类加载问题，这些问题会导致从“可执行 jar”运行时出现问题。"],["body","\n"],["body","我们建议您在从“可执行 jar”运行时尽可能避免使用它。"],["body","\n"],["body","为了帮助定制，一些其他属性从 Spring Environment 转移到 System properties，如下表所述："],["body","\n"],["body","Spring Environment"],["body","System Property"],["body","Comments"],["body","\n"],["body","logging.exception-conversion-word"],["body","LOG_EXCEPTION_CONVERSION_WORD"],["body","记录异常时使用的转换词。"],["body","\n"],["body","logging.file.name"],["body","LOG_FILE"],["body","如果定义，则在默认日志配置中使用。"],["body","\n"],["body","logging.file.path"],["body","LOG_PATH"],["body","如果定义，则在默认日志配置中使用。"],["body","\n"],["body","logging.pattern.console"],["body","CONSOLE_LOG_PATTERN"],["body","The log pattern to use on the console (stdout)."],["body","\n"],["body","logging.pattern.dateformat"],["body","LOG_DATEFORMAT_PATTERN"],["body","Appender pattern for log date format."],["body","\n"],["body","logging.charset.console"],["body","CONSOLE_LOG_CHARSET"],["body","The charset to use for console logging."],["body","\n"],["body","logging.pattern.file"],["body","FILE_LOG_PATTERN"],["body","The log pattern to use in a file (if LOG_FILE is enabled)."],["body","\n"],["body","logging.charset.file"],["body","FILE_LOG_CHARSET"],["body","The charset to use for file logging (if LOG_FILE is enabled)."],["body","\n"],["body","logging.pattern.level"],["body","LOG_LEVEL_PATTERN"],["body","The format to use when rendering the log level (default %5p)."],["body","\n"],["body","PID"],["body","PID"],["body","The current process ID (discovered if possible and when not already defined as an OS environment variable)."],["body","\n\n\n"],["body","如果您使用的是 Logback，以下属性也会被转移："],["body","\n"],["body","Spring Environment"],["body","System Property"],["body","Comments"],["body","\n"],["body","logging.logback.rollingpolicy.file-name-pattern"],["body","LOGBACK_ROLLINGPOLICY_FILE_NAME_PATTERN"],["body","Pattern for rolled-over log file names (default ${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz)."],["body","\n"],["body","logging.logback.rollingpolicy.clean-history-on-start"],["body","LOGBACK_ROLLINGPOLICY_CLEAN_HISTORY_ON_START"],["body","Whether to clean the archive log files on startup."],["body","\n"],["body","logging.logback.rollingpolicy.max-file-size"],["body","LOGBACK_ROLLINGPOLICY_MAX_FILE_SIZE"],["body","Maximum log file size."],["body","\n"],["body","logging.logback.rollingpolicy.total-size-cap"],["body","LOGBACK_ROLLINGPOLICY_TOTAL_SIZE_CAP"],["body","Total size of log backups to be kept."],["body","\n"],["body","logging.logback.rollingpolicy.max-history"],["body","LOGBACK_ROLLINGPOLICY_MAX_HISTORY"],["body","Maximum number of archive log files to keep."],["body","\n\n\n"],["body","所有支持的日志系统在解析其配置文件时都可以查询系统属性。示例参见 spring-boot.jar 中的默认配置："],["body","\n\n"],["body","Logback"],["body","\n"],["body","Log4j 2"],["body","\n\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\">\n\t<Properties>\n\t\t<Property name=\"LOG_EXCEPTION_CONVERSION_WORD\">%xwEx</Property>\n\t\t<Property name=\"LOG_LEVEL_PATTERN\">%5p</Property>\n\t\t<Property name=\"LOG_DATEFORMAT_PATTERN\">yyyy-MM-dd HH:mm:ss.SSS</Property>\n\t\t<Property name=\"CONSOLE_LOG_PATTERN\">%clr{%d{${sys:LOG_DATEFORMAT_PATTERN}}}{faint} %clr{${sys:LOG_LEVEL_PATTERN}} %clr{%pid}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</Property>\n\t\t<Property name=\"FILE_LOG_PATTERN\">%d{${LOG_DATEFORMAT_PATTERN}} ${LOG_LEVEL_PATTERN} %pid --- [%t] %-40.40c{1.} : %m%n${sys:LOG_EXCEPTION_CONVERSION_WORD}</Property>\n\t</Properties>\n\t<Appenders>\n\t\t<Console name=\"Console\" target=\"SYSTEM_OUT\" follow=\"true\">\n\t\t\t<PatternLayout pattern=\"${sys:CONSOLE_LOG_PATTERN}\" charset=\"${sys:CONSOLE_LOG_CHARSET}\"/>\n\t\t</Console>\n\t</Appenders>\n\t<Loggers>\n\t\t<Logger name=\"org.apache.catalina.startup.DigesterFactory\" level=\"error\" />\n\t\t<Logger name=\"org.apache.catalina.util.LifecycleBase\" level=\"error\" />\n\t\t<Logger name=\"org.apache.coyote.http11.Http11NioProtocol\" level=\"warn\" />\n\t\t<Logger name=\"org.apache.sshd.common.util.SecurityUtils\" level=\"warn\"/>\n\t\t<Logger name=\"org.apache.tomcat.util.net.NioSelectorPool\" level=\"warn\" />\n\t\t<Logger name=\"org.eclipse.jetty.util.component.AbstractLifeCycle\" level=\"error\" />\n\t\t<Logger name=\"org.hibernate.validator.internal.util.Version\" level=\"warn\" />\n\t\t<Logger name=\"org.springframework.boot.actuate.endpoint.jmx\" level=\"warn\"/>\n\t\t<Root level=\"info\">\n\t\t\t<AppenderRef ref=\"Console\" />\n\t\t</Root>\n\t</Loggers>\n</Configuration>\n"],["body","\n\n"],["body","Java Util logging"],["body","\n\n"],["body","提示"],["body","\n"],["body","如果你想在日志属性中使用占位符，你应该使用 Spring Boot 的语法而不是底层框架的语法。"],["body","\n"],["body","值得注意的是，如果您使用 Logback，您应该使用 : 作为属性名称与其默认值之间的分隔符，而不是使用 :-。"],["body","\n"],["body","您可以通过仅覆盖 LOG_LEVEL_PATTERN（或带有 Logback 的 logging.pattern.level ）将 MDC 和其他临时内容添加到日志行。"],["body","\n"],["body","例如，如果您使用 logging.pattern.level=user:%X{user} %5p，则默认日志格式包含“user”的 MDC 条目（如果存在），如以下示例所示。"],["body","\n"],["h1","源码分析"],["body","\n"],["headingLink","如何初始化日志系统"],["heading","如何初始化日志系统"],["body","\n"],["body","通过SpringAppliccationListener 事件监听器：监听spring的启动事件：以初始化日志系统"],["body","\n"],["body","@Override\npublic void onApplicationEvent(ApplicationEvent event) {\n    //spring刚启动时，执行 日志系统的载入与前初始化\n   if (event instanceof ApplicationStartingEvent) {\n      onApplicationStartingEvent((ApplicationStartingEvent) event);\n   }\n    //spring环境变量准备好时：日志系统的初始化\n   else if (event instanceof ApplicationEnvironmentPreparedEvent) {\n      onApplicationEnvironmentPreparedEvent((ApplicationEnvironmentPreparedEvent) event);\n   }\n    //spring启动好 之后：往容器中注入 日志相关bean springBootLoggingSystem、springBootLogFile\n   else if (event instanceof ApplicationPreparedEvent) {\n      onApplicationPreparedEvent((ApplicationPreparedEvent) event);\n   }\n    //spring容器关闭之后，调用日志系统的关闭\n   else if (event instanceof ContextClosedEvent\n         && ((ContextClosedEvent) event).getApplicationContext().getParent() == null) {\n      onContextClosedEvent();\n   }\n    //spring容器启动 失败后，调用清理\n   else if (event instanceof ApplicationFailedEvent) {\n      onApplicationFailedEvent();\n   }\n}\n"],["body","\n"],["headingLink","日志系统的载入与前初始化"],["heading","日志系统的载入与前初始化"],["body","\n"],["body","载入日志 系统"],["body","\n"],["body","public static LoggingSystem get(ClassLoader classLoader) {\n    //如果指定了 `org.springframework.boot.logging.LoggingSystem`系统环境变量,则使用指定的\n   String loggingSystem = System.getProperty(SYSTEM_PROPERTY);\n   if (StringUtils.hasLength(loggingSystem)) {\n      if (NONE.equals(loggingSystem)) {\n         return new NoOpLoggingSystem();\n      }\n      return get(classLoader, loggingSystem);\n   }\n   //否则 按默认顺序检测特定类\n   return SYSTEMS.entrySet().stream().filter((entry) -> ClassUtils.isPresent(entry.getKey(), classLoader))\n         .map((entry) -> get(classLoader, entry.getValue())).findFirst()\n         .orElseThrow(() -> new IllegalStateException(\"No suitable logging system located\"));\n}\n\tstatic {\n\t\tMap<String, String> systems = new LinkedHashMap<>();\n\t\tsystems.put(\"ch.qos.logback.core.Appender\", \"org.springframework.boot.logging.logback.LogbackLoggingSystem\");\n\t\tsystems.put(\"org.apache.logging.log4j.core.impl.Log4jContextFactory\",\n\t\t\t\t\"org.springframework.boot.logging.log4j2.Log4J2LoggingSystem\");\n\t\tsystems.put(\"java.util.logging.LogManager\", \"org.springframework.boot.logging.java.JavaLoggingSystem\");\n\t\tSYSTEMS = Collections.unmodifiableMap(systems);\n\t}\n"],["body","\n"],["body","前初始化"],["body","\n"],["body","//sl4j前初始化：桥接 JUL与 sl4j\nprivate void configureJdkLoggingBridgeHandler() {\n   try {\n      if (isBridgeJulIntoSlf4j()) {\n         removeJdkLoggingBridgeHandler();\n         SLF4JBridgeHandler.install();\n      }\n   }\n   catch (Throwable ex) {\n      // Ignore. No java.util.logging bridge is installed.\n   }\n}\n\n//log4j前初始化：禁用一切日志打印\npublic void beforeInitialize() {\n    LoggerContext loggerContext = getLoggerContext();\n    if (isAlreadyInitialized(loggerContext)) {\n        return;\n    }\n    super.beforeInitialize();\n    loggerContext.getConfiguration().addFilter(FILTER);\n}\n"],["body","\n"],["headingLink","日志系统的初始化"],["heading","日志系统的初始化"],["body","\n\n"],["body","转换 日志配置到 系统环境变量中"],["body","\n"],["body","将 日志位置的配置 加载到环境变量 中"],["body","\n"],["body","日志组的获取与处理"],["body","\n"],["body","设置初始化日志级别"],["body","\n"],["body","注册jvm关闭回调"],["body","\n\n"],["body","protected void initialize(ConfigurableEnvironment environment, ClassLoader classLoader) {\n    //转换 日志配置到 系统环境变量中：并对配置进行环境变量替换\n   new LoggingSystemProperties(environment).apply();\n   //获取指定 的logFile\n   this.logFile = LogFile.get(environment);\n    //将 日志位置的配置 加载到环境变量 中\n   if (this.logFile != null) {\n      this.logFile.applyToSystemProperties();\n   }\n    //日志组的处理\n   this.loggerGroups = new LoggerGroups(DEFAULT_GROUP_LOGGERS);\n    //早期日志级别的 设置：兼容 命令行选项 --debug --trace\n   initializeEarlyLoggingLevel(environment);\n    //初始化日志系统\n   initializeSystem(environment, this.loggingSystem, this.logFile);\n    /设置初始化日志级别\n   initializeFinalLoggingLevels(environment, this.loggingSystem);\n    //注册jvm关闭回调\n   registerShutdownHookIfNecessary(environment, this.loggingSystem);\n}\n"],["body","\n"],["headingLink","初始化特定日志系统的抽象实现"],["heading","初始化特定日志系统的抽象实现"],["body","\n"],["body","\n"],["body","org.springframework.boot.logging.AbstractLoggingSystem#initialize"],["body","\n"],["body","\n"],["headingLink","按配置or约定查找配置"],["heading","按配置Or约定查找配置"],["body","\n"],["body","public void initialize(LoggingInitializationContext initializationContext, String configLocation, LogFile logFile) {\n    //如果有配置日志路径\n   if (StringUtils.hasLength(configLocation)) {\n       //使用特定配置文件初始化\n      initializeWithSpecificConfig(initializationContext, configLocation, logFile);\n      return;\n   }\n    //按照约定查找配置文件\n   initializeWithConventions(initializationContext, logFile);\n}\n"],["body","\n"],["body","按照约定查找配置文件"],["body","\n"],["body","\n"],["body","以log4j为例"],["body","\n"],["body","\n"],["body","添加 log4j2.properties log4j2-test.properties 等等"],["body","\n"],["body","//org.springframework.boot.logging.log4j2.Log4J2LoggingSystem#getCurrentlySupportedConfigLocations\nprivate String[] getCurrentlySupportedConfigLocations() {\n   List<String> supportedConfigLocations = new ArrayList<>();\n   addTestFiles(supportedConfigLocations);\n   supportedConfigLocations.add(\"log4j2.properties\");\n   if (isClassAvailable(\"com.fasterxml.jackson.dataformat.yaml.YAMLParser\")) {\n      Collections.addAll(supportedConfigLocations, \"log4j2.yaml\", \"log4j2.yml\");\n   }\n   if (isClassAvailable(\"com.fasterxml.jackson.databind.ObjectMapper\")) {\n      Collections.addAll(supportedConfigLocations, \"log4j2.json\", \"log4j2.jsn\");\n   }\n   supportedConfigLocations.add(\"log4j2.xml\");\n   return StringUtils.toStringArray(supportedConfigLocations);\n}\n"],["body","\n"],["body","如果有多个返回配置中的第一个资源存在的"],["body","\n"],["body","//org.springframework.boot.logging.AbstractLoggingSystem#findConfig\nprivate String findConfig(String[] locations) {\n   for (String location : locations) {\n      ClassPathResource resource = new ClassPathResource(location, this.classLoader);\n      if (resource.exists()) {\n         return \"classpath:\" + location;\n      }\n   }\n   return null;\n}\n"],["body","\n"],["headingLink","按照惯例初始化流程"],["heading","按照惯例初始化流程"],["body","\n"],["body","主要实现了 以下几点"],["body","\n\n"],["body","如果使用标准的日志文件名，则说名日志内部已初始化 则重新初始化一遍 以防 属性改变"],["body","\n"],["body","如果使用的spring的日志文件名，则使用spring的方式初始化日志配置"],["body","\n"],["body","如果都不存在则 载入默认配置"],["body","\n\n"],["body","其中 加黑的方法都需要之类实现"],["body","\n"],["body","//org.springframework.boot.logging.AbstractLoggingSystem#initializeWithConventions\nprivate void initializeWithConventions(LoggingInitializationContext initializationContext, LogFile logFile) {\n    //获取标准配置文件\n   String config = getSelfInitializationConfig();\n    //配置文件存在，且没有指定专门日志文件：则重新初始化以防属性变化\n   if (config != null && logFile == null) {\n      // self initialization has occurred, reinitialize in case of property changes\n      reinitialize(initializationContext);\n      return;\n   }\n    //如果标准的不存在，则获取-spring后缀的\n   if (config == null) {\n      config = getSpringInitializationConfig();\n   }\n    //载入配置文件\n   if (config != null) {\n      loadConfiguration(initializationContext, config, logFile);\n      return;\n   }\n    //如果配置文件不存在则 载入默认配置文件\n   loadDefaults(initializationContext, logFile);\n}\n"],["body","\n"],["headingLink","指定日志配置文件初始化"],["heading","指定日志配置文件初始化"],["body","\n\n"],["body","对配置文件名进行 占位符替换"],["body","\n"],["body","载入对应配置"],["body","\n\n"],["body","private void initializeWithSpecificConfig(LoggingInitializationContext initializationContext, String configLocation,\n      LogFile logFile) {\n   configLocation = SystemPropertyUtils.resolvePlaceholders(configLocation);\n   loadConfiguration(initializationContext, configLocation, logFile);\n}\n"],["body","\n"],["headingLink","log4j2的具体实现"],["heading","log4j2的具体实现"],["body","\n"],["headingLink","获取标准配置文件"],["heading","获取标准配置文件"],["body","\n"],["body","先后顺序决定了加载优先级"],["body","\n"],["body","log4j2.properties log4j2.yaml log4j2.yml log4j2.json log4j2.jsn log4j2.xml\n"],["body","\n"],["headingLink","重新初始化"],["heading","重新初始化"],["body","\n"],["body","无"],["body","\n"],["headingLink","初始化日志配置"],["heading","初始化日志配置"],["body","\n"],["body","protected void loadConfiguration(String location, LogFile logFile) {\n   Assert.notNull(location, \"Location must not be null\");\n   try {\n      LoggerContext ctx = getLoggerContext();\n      URL url = ResourceUtils.getURL(location);\n      ConfigurationSource source = getConfigurationSource(url);\n      ctx.start(ConfigurationFactory.getInstance().getConfiguration(ctx, source));\n   }\n   catch (Exception ex) {\n      throw new IllegalStateException(\"Could not initialize Log4J2 logging from \" + location, ex);\n   }\n}\n"],["body","\n"],["headingLink","载入默认配置"],["heading","载入默认配置"],["body","\n"],["body","@Override\nprotected void loadDefaults(LoggingInitializationContext initializationContext, LogFile logFile) {\n   if (logFile != null) {\n      loadConfiguration(getPackagedConfigFile(\"log4j2-file.xml\"), logFile);\n   }\n   else {\n      loadConfiguration(getPackagedConfigFile(\"log4j2.xml\"), logFile);\n   }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/springboot-过滤器.html"],["title","springboot-过滤器.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","webfilter"],["heading","@WebFilter"],["body","\n"],["body","标记一个过滤器"],["body","\n"],["body","@WebFilter(urlPatterns = \"/*\")\npublic class MyFilter implements Filter {\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        System.out.println(\"-----doFilter-----\");\n        chain.doFilter(request, response);\n    }\n}\n"],["body","\n"],["body","需要标注:@ServletComponentScan 注解,因为这是 servlet的注解"],["body","\n"],["headingLink","bean"],["heading","@Bean"],["body","\n"],["body","@Component\npublic class MyFilter implements Filter {\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        System.out.println(\"-----doFilter-----\");\n        chain.doFilter(request, response);\n    }\n}\n\n指定优先级\n@Component\n@Order(-1)\npublic class MyFilter implements Filter {\n\n    @Override\n    public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException {\n        System.out.println(\"-----doFilter-----\");\n        chain.doFilter(request, response);\n    }\n}\n"],["body","\n"],["headingLink","filterregistrationbean"],["heading","FilterRegistrationBean"],["body","\n"],["body","@Configuration\npublic class FilterConfiguration {\n    @Bean\n    FilterRegistrationBean<MyFilter> myFilterFilterRegistrationBean() {\n        FilterRegistrationBean<MyFilter> bean = new FilterRegistrationBean<>();\n        bean.setFilter(new MyFilter());\n        bean.setOrder(-1);\n        bean.setUrlPatterns(Arrays.asList(\"/*\"));\n        return bean;\n    }\n    @Bean\n    FilterRegistrationBean<MyFilter2> myFilterFilterRegistrationBean2() {\n        FilterRegistrationBean<MyFilter2> bean = new FilterRegistrationBean<>();\n        bean.setFilter(new MyFilter2());\n        bean.setOrder(-2);\n        bean.setUrlPatterns(Arrays.asList(\"/hello\"));\n        return bean;\n    }\n}\n"],["body","\n"],["body","spring有很多注册bean,用来向spring容器注册特殊业务功能的bean"],["body","\n\n"],["body","ServletListenerRegistrationBean 用来注册监听器。"],["body","\n"],["body","ServletRegistrationBean 用来注册 Servlet。"],["body","\n"],["body","DispatcherServletRegistrationBean 用来注册 DispatcherServlet。"],["body","\n"],["body","FilterRegistrationBean 用来注册过滤器。"],["body","\n"],["body","DelegatingFilterProxyRegistrationBean 则用来注册 DelegatingFilterProxy，DelegatingFilterProxy 在 Spring Security、Spring Session、Shiro 等整合时非常有用。"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/springboot配置文件加载/propertySource原理.html"],["title","propertySource原理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/springboot配置文件加载/默认加载原则.html"],["title","默认加载原则.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","SpringBoot默认读取配置文件的优先级"],["body","\n\n"],["body","工作目录同级下的config文件夹是优先级最高的"],["body","\n"],["body","工作目录同级 是次优先级"],["body","\n"],["body","classpath:config/ 是第三优先级"],["body","\n"],["body","classpath: 同级是第四优先级"],["body","\n\n"],["h1","自定义配置文件"],["body","\n"],["headingLink","命令行自定义"],["heading","命令行自定义"],["body","\n"],["body","# 指定 classPath\njava -jar myproject.jar --spring.config.location=classpath:/default.properties,classpath:/override.properties\n\n# 指定绝对路径\njava -jar -Dspring.config.location=D:\\config\\config.properties springbootrestdemo-0.0.1-SNAPSHOT.jar \n"],["body","\n"],["headingLink","代码中指定"],["heading","代码中指定"],["body","\n"],["body","@SpringBootApplication\n@PropertySource(value={\"file:config.properties\",\"classpath:config.properties\"})\npublic class SpringbootrestdemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringbootrestdemoApplication.class, args);\n    }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/springboot-配置文件与jar分离.html"],["title","springboot-配置文件与jar分离.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n"],["body","\n"],["body","配置maven resource插件"],["body","\n"],["body","<plugin>\n    <artifactId>maven-resources-plugin</artifactId>\n    <executions>\n        <execution>\n            <id>copy-resources</id>\n            <phase>package</phase>\n            <goals>\n                <goal>copy-resources</goal>\n            </goals>\n            <configuration>\n                <resources>\n                    <resource>\n                     \t<directory>src/main/resources</directory> \n                    </resource>\n                </resources>\n                <outputDirectory>${project.build.directory}/config</outputDirectory>\n            </configuration>\n        </execution>\n    </executions>\n</plugin>\n"],["body","\n"],["body","\n"],["body","\n"],["body","将项目"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/springboot-多模块.html"],["title","springboot-多模块.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","步骤"],["body","\n"],["headingLink","生成项目"],["heading","生成项目"],["body","\n"],["body","建立父POM.不存放代码,只存放子模块"],["body","\n\n"],["body","\n"],["body","官网生成,"],["body","\n"],["body","https://start.spring.io/"],["body","\n"],["body","\n"],["body","\n"],["body","在 idea可以选择POM方式打包"],["body","\n"],["body","\n\n"],["headingLink","修改pom文件"],["heading","修改pom文件"],["body","\n\n"],["body","\n"],["body","源代码目录删除"],["body","\n"],["body","\n"],["body","\n"],["body","<packaging>pom</packaging>\n"],["body","\n"],["body","\n"],["body","\n"],["body","注释掉springboot的打包方式(只有springboot 主项目才需要springboot打包成可执行文件,依赖库不需要)"],["body","\n"],["body","\n"],["body","\n"],["body","添加子模块 "],["body","\n"],["body","<modules>\n        <module>unifiedoutput</module>\n        <module>common</module>\n</modules>\n"],["body","\n"],["body","\n"],["body","\n"],["body","子模块的POM文件"],["body","\n\n"],["body","\n"],["body","添加父模块依赖"],["body","\n"],["body","<parent>\n    <groupId>com.weisanju</groupId>\n    <artifactId>springboot-study</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n<!--        <relativePath>../pom.xml</relativePath>-->\n</parent>\n"],["body","\n"],["body","\n"],["body","\n"],["body","添加其他子模块依赖"],["body","\n"],["body","        <dependency>\n            <groupId>com.weisanju</groupId>\n            <artifactId>common</artifactId>\n            <version>0.0.1-SNAPSHOT</version>\n        </dependency>\n"],["body","\n"],["body","\n\n"],["body","\n\n"],["headingLink","完整的配置文件"],["heading","完整的配置文件"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.3.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.weisanju</groupId>\n    <artifactId>springboot-study</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>springboot-study</name>\n    <description>Demo project for Spring Boot</description>\n    <packaging>pom</packaging>\n    <modules>\n        <module>unifiedoutput</module>\n        <module>common</module>\n    </modules>\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n<!--\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n        </plugins>\n    </build>-->\n\n</project>\n\n"],["body","\n\n"],["body","父项目的公共依赖,请确保加上optional,避免依赖重复"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/官方文档/SpringApplication.html"],["title","SpringApplication.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","SpringApplication"],["body","\n"],["body","SpringApplication  类提供了 启动 spring 应用程序 便利的 方式，从 main方法启动"],["body","\n"],["body","通常调用 SpringApplication.run  方法"],["body","\n"],["body","@SpringBootApplication\npublic class MyApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(MyApplication.class, args);\n    }\n}\n"],["body","\n"],["body","日志打印"],["body","\n"],["body","默认情况下 打印 INFO 级别日志， 包括相关的启动细节，例如 启动应用的用户，更改日志级别，详见：Log Levels"],["body","\n"],["body","启动信息日志可以通过  spring.main.log-startup-info  关闭，这也会关闭application’s active profiles的打印"],["body","\n"],["body","在启动时 加入 额外日志，可以在 SpringApplication    覆盖 logStartupInfo(boolean) 方法"],["body","\n"],["h1","Startup Failure"],["body","\n"],["body","如果启动失败，注册 FailureAnalyzers 可以 专用的错误消息，和修复问题的 精确 动作"],["body","\n"],["body","例如 8080端口占用会显示以下信息"],["body","\n"],["body","***************************\nAPPLICATION FAILED TO START\n***************************\nDescription:\nEmbedded servlet container failed to start. Port 8080 was already in use.\nAction:\nIdentify and stop the process that's listening on port 8080 or configure this application to listen on another port.\n"],["body","\n"],["body","Spring Boot 提供很多 FailureAnalyzer 实现，自定义：add your own"],["body","\n"],["body","如果没有analyzers 能 处理异常，可以展示详细信息，需要启用 debug 属性 enable the debug property or enable DEBUG logging "],["body","\n"],["body","org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener"],["body","\n"],["body","$ java -jar myproject-0.0.1-SNAPSHOT.jar --debug\n"],["body","\n"],["h1","Lazy Initialization"],["body","\n"],["body","SpringApplication 允许懒加载，懒加载可以减少启动时间，也会延迟错误的发现，确保JVM有足够内存容纳bean，最好在启动懒加载前调整队大小"],["body","\n"],["body","在 SpringApplicationBuilder  中使用 lazyInitialization 可以编程式启用，或者调用SpringApplication 的 setLazyInitialization "],["body","\n"],["body","可以使用 spring.main.lazy-initialization  启用"],["body","\n"],["body","如果您想禁用 某些bean 的懒加载，对其他启用懒加载，可以使用 @Lazy(false) 显示设置"],["body","\n"],["h1","Customizing the Banner"],["body","\n\n"],["body","\n"],["body","启动时会读取   classpath 下的banner.txt，通过 spring.banner.location 指定"],["body","\n"],["body","\n"],["body","\n"],["body","spring.banner.charset 指定字符集"],["body","\n"],["body","\n"],["body","\n"],["body","通过设置 spring.banner.image.location  可以添加图片 banner.gif, banner.jpg, or banner.png"],["body","\n"],["body","\n\n"],["body","banner.txt 中可以使用 以下占位符"],["body","\n"],["body","Variable"],["body","Description"],["body","\n"],["body","${application.version}"],["body","MANIFEST.MF中定义的版本号，例如, Implementation-Version: 1.0 is printed as 1.0"],["body","\n"],["body","${application.formatted-version}"],["body","MANIFEST.MF中定义的版本号： (surrounded with brackets and prefixed with v). For example (v1.0)."],["body","\n"],["body","${spring-boot.version}"],["body","spring-boot版本号"],["body","\n"],["body","${spring-boot.formatted-version}"],["body","格式化的版本号 (surrounded with brackets and prefixed with v). For example (v2.5.5)."],["body","\n"],["body","${Ansi.NAME} (or ${AnsiColor.NAME}, ${AnsiBackground.NAME}, ${AnsiStyle.NAME})"],["body","Where NAME is the name of an ANSI escape code. See AnsiPropertySource for details."],["body","\n"],["body","${application.title}"],["body","MANIFEST.MF中定义的 标题：For example Implementation-Title: MyApp is printed as MyApp."],["body","\n\n\n"],["body","SpringApplication.setBanner(…)  方法 可以编程式设置 banner，实现自己的 org.springframework.boot.Banner "],["body","\n"],["body","spring.main.banner-mode  属性决定  banner 是否要 打印到 控制台"],["body","\n"],["body","banner 被注册为 单例，名称叫：springBootBanner"],["body","\n"],["body","${application.version}  和 ${application.formatted-version} 只在 使用Spring Boot 可用。"],["body","\n"],["body","如果使用 解压的jar，使用 java -cp <classpath> <mainclass>. 启动的则不能使用变量"],["body","\n"],["body","建议使用 java org.springframework.boot.loader.JarLauncher.  启动 解压的jar 这会初始化  application.*  banner变量 "],["body","\n"],["h1","Customizing SpringApplication"],["body","\n"],["body","可以自定义 SpringApplication "],["body","\n"],["body","@SpringBootApplication\npublic class MyApplication {\n    public static void main(String[] args) {\n        SpringApplication application = new SpringApplication(MyApplication.class);\n        application.setBannerMode(Banner.Mode.OFF);\n        application.run(args);\n    }\n}\n"],["body","\n"],["body","构造参数 需要传递 bean的 配置源，大多数情况下是 @Configuration 配置类，也可以直接引用 @Component 类"],["body","\n"],["body","外部化配置,详见：Externalized Configuration "],["body","\n"],["h1","Fluent Builder API"],["body","\n"],["body","使用 SpringApplicationBuilder 链式构建 带层级的 SpringApplication"],["body","\n"],["body","  new SpringApplicationBuilder()\n        .sources(Parent.class)\n        .child(Application.class)\n        .bannerMode(Banner.Mode.OFF)\n        .run(args);\n"],["body","\n"],["body","See the SpringApplicationBuilder Javadoc for full details"],["body","\n"],["h1","Application Availability"],["body","\n"],["body","应用程序可以提供不同架构不同平台的信息，Spring Boot 提供开箱即用的 支持，包括常用的  liveness 跟 readiness  的可用状态"],["body","\n"],["body","使用 Spring Boot’s actuator 支持这些状态的展示，此外，通过注入 ApplicationAvailability  接口到 bean中，获取 可用状态"],["body","\n"],["headingLink","liveness-state"],["heading","Liveness State"],["body","\n"],["body","应用程序 的 Liveness  状态  告诉 其内部 状态 是否 允许它 正确工作，或者如果当前失败，自行恢复"],["body","\n"],["body","A broken “Liveness” state  意味着 应用程序处于无法恢复的状态，基础架构平台 应该 重启应用程序"],["body","\n"],["body","一般，Liveness 状态 不应该 基于 外部检查，例如：Health checks"],["body","\n"],["body","如果确实存在，失败的外部系统（database，webAPI，an external cache）会触发平台大规模重新启动和 级联故障"],["body","\n"],["body","Spring Boot 应用的 内部状态 主要由 ApplicationContext表示"],["body","\n\n"],["body","如果 应用上下文 已经成功启动了，Spring Boot 则认为 该程序是 有效状态"],["body","\n"],["body","当 上下文刷新了，应用则认为是 活的"],["body","\n\n"],["body","详见 Spring Boot application lifecycle and related Application Events."],["body","\n"],["headingLink","readiness-state"],["heading","Readiness State"],["body","\n"],["body","应用的 Readiness 状态 表明：应用程序是否已经准备好 处理流量，失败的 Readiness 表明：不应将流量路由到应用程序"],["body","\n"],["body","这通常 发生在启动时刻，CommandLineRunner  和 ApplicationRunner  组件正被处理，或者 应用程序认为 它太忙 无法处理更多流量"],["body","\n"],["body","一旦 应用程序和命令行运行者 被调用，应用程序就被认为准备就绪，详见： Spring Boot application lifecycle and related Application Events."],["body","\n"],["body","在 启动就要被执行的 任务，应该通过  CommandLineRunner   和 ApplicationRunner 组件执行，而不是使用  spring组件中的 生命周期的回调 （例如：@PostConstruct）执行"],["body","\n"],["headingLink","managing-the-application-availability-state"],["heading","Managing the Application Availability State"],["body","\n"],["body","应用程序组件 可以 在任意时间获取 当前 可用性，通过注入 ApplicationAvailability  接口，在其上调用"],["body","\n"],["body","更普遍的，应用程序 将会 监听 状态 变更，或者 更新应用程序的  状态"],["body","\n"],["body","例如：可以将 应用的 Readiness 状态  导出到文件中， Kubernetes 即可 通过 exec Probe 查看"],["body","\n"],["body","@Component\npublic class MyReadinessStateExporter {\n\n    @EventListener\n    public void onStateChange(AvailabilityChangeEvent<ReadinessState> event) {\n        switch (event.getState()) {\n        case ACCEPTING_TRAFFIC:\n            // create file /tmp/healthy\n            break;\n        case REFUSING_TRAFFIC:\n            // remove file /tmp/healthy\n            break;\n        }\n    }\n}\n"],["body","\n"],["body","当应用程序中断且无法恢复时，我们还可以更新应用程序状态："],["body","\n"],["body","@Component\npublic class MyLocalCacheVerifier {\n\n    private final ApplicationEventPublisher eventPublisher;\n\n    public MyLocalCacheVerifier(ApplicationEventPublisher eventPublisher) {\n        this.eventPublisher = eventPublisher;\n    }\n\n    public void checkLocalCache() {\n        try {\n            // ...\n        }\n        catch (CacheCompletelyBrokenException ex) {\n            AvailabilityChangeEvent.publish(this.eventPublisher, ex, LivenessState.BROKEN);\n        }\n    }\n\n}\n"],["body","\n"],["body","Spring Boot provides Kubernetes HTTP probes for \"Liveness\" and \"Readiness\" with Actuator Health Endpoints. You can get more guidance about deploying Spring Boot applications on Kubernetes in the dedicated section."],["body","\n"],["h1","Application Events and Listeners"],["body","\n"],["body","事件跟监听机制，除了常见的 SpringFramework 事件，例如：ContextRefreshedEvent ，SpringApplication  也会产生额外的事件"],["body","\n"],["body","一些事件 实在 ApplicationContext 创建之前 触发的，不能通过@Bean 注册监听器，可以通过  SpringApplication.addListeners(…)  或者 SpringApplicationBuilder.listeners(…)  方法  注册监听器"],["body","\n"],["body","如果想要其自动注册，则可以将 META-INF/spring.factories  加入到 classpath下，写法如下"],["body","\n"],["body","org.springframework.context.ApplicationListener=com.example.project.MyListener"],["body","\n"],["body","应用事件按以下顺序发送"],["body","\n\n"],["body","An ApplicationStartingEvent is sent at the start of a run but before any processing, except for the registration of listeners and initializers."],["body","\n"],["body","An ApplicationEnvironmentPreparedEvent is sent when the Environment to be used in the context is known but before the context is created."],["body","\n"],["body","An ApplicationContextInitializedEvent is sent when the ApplicationContext is prepared and ApplicationContextInitializers have been called but before any bean definitions are loaded."],["body","\n"],["body","An ApplicationPreparedEvent is sent just before the refresh is started but after bean definitions have been loaded."],["body","\n"],["body","An ApplicationStartedEvent is sent after the context has been refreshed but before any application and command-line runners have been called."],["body","\n"],["body","An AvailabilityChangeEvent is sent right after with LivenessState.CORRECT to indicate that the application is considered as live."],["body","\n"],["body","An ApplicationReadyEvent is sent after any application and command-line runners have been called."],["body","\n"],["body","An AvailabilityChangeEvent is sent right after with ReadinessState.ACCEPTING_TRAFFIC to indicate that the application is ready to service requests."],["body","\n"],["body","An ApplicationFailedEvent is sent if there is an exception on startup."],["body","\n\n"],["body","The above list only includes SpringApplicationEvents that are tied to a SpringApplication. In addition to these, the following events are also published after ApplicationPreparedEvent and before ApplicationStartedEvent:"],["body","\n\n"],["body","A WebServerInitializedEvent is sent after the WebServer is ready. ServletWebServerInitializedEvent and ReactiveWebServerInitializedEvent are the servlet and reactive variants respectively."],["body","\n"],["body","A ContextRefreshedEvent is sent when an ApplicationContext is refreshed."],["body","\n\n"],["body","You often need not use application events, but it can be handy to know that they exist. Internally, Spring Boot uses events to handle a variety of tasks."],["body","\n"],["body","Event listeners should not run potentially lengthy tasks as they execute in the same thread by default. Consider using application and command-line runners instead."],["body","\n"],["body","Application events are sent by using Spring Framework’s event publishing mechanism. Part of this mechanism ensures that an event published to the listeners in a child context is also published to the listeners in any ancestor contexts. As a result of this, if your application uses a hierarchy of SpringApplication instances, a listener may receive multiple instances of the same type of application event."],["body","\n"],["body","To allow your listener to distinguish between an event for its context and an event for a descendant context, it should request that its application context is injected and then compare the injected context with the context of the event. The context can be injected by implementing ApplicationContextAware or, if the listener is a bean, by using @Autowired."],["body","\n"],["h1","Web Environment"],["body","\n"],["body","SpringApplication  会自行 尝试创建   正确类型的  ApplicationContext ，用于确定WebApplicationType  的算法如下"],["body","\n\n"],["body","SpringMVC 在，则使用 AnnotationConfigServletWebServerApplicationContext "],["body","\n"],["body","Spring MVC 不在，Spring WebFlux 在，则使用 AnnotationConfigReactiveWebServerApplicationContext "],["body","\n"],["body","否则使用 AnnotationConfigApplicationContext"],["body","\n\n"],["body","通过 setWebApplicationType(WebApplicationType)设置web应用类型"],["body","\n"],["body","可以完全控制 web的类型，通过：ApplicationContext#setApplicationContextClass(…)"],["body","\n"],["body","当使用 junit 单元测试时，可以 调用  setWebApplicationType(WebApplicationType.NONE) "],["body","\n"],["h1","Accessing Application Arguments"],["body","\n"],["body","\n"],["body","访问应用参数"],["body","\n"],["body","\n"],["body","你想要访问 传给SpringApplication.run(…) 的参数，可以注入  org.springframework.boot.ApplicationArguments  bean，ApplicationArguments 接口提供 原始的  String[]，或者访问 解析的option and non-option  参数"],["body","\n"],["body","@Component\npublic class MyBean {\n    public MyBean(ApplicationArguments args) {\n        boolean debug = args.containsOption(\"debug\");\n        List<String> files = args.getNonOptionArgs();\n        if (debug) {\n            System.out.println(files);\n        }\n        // if run with \"--debug logfile.txt\" prints [\"logfile.txt\"]\n    }\n\n}\n"],["body","\n"],["body","SpringBoot同样 使用Spring Environment  注册 CommandLinePropertySource  ，这允许你 使用 @Value 注入应用程序参数"],["body","\n"],["h1","Using the ApplicationRunner or CommandLineRunner"],["body","\n"],["body","ApplicationRunner or CommandLineRunner  的代码 在 SpringApplication.run(…)  启动完之后，就执行"],["body","\n"],["body","，此接口非常适合在应用程序启动后（但在开始接受流量之前）运行的任务。"],["body","\n"],["body","CommandLineRunner  提供string数组，ApplicationRunner 是 ApplicationArguments 对象"],["body","\n"],["body","@Component\npublic class MyCommandLineRunner implements CommandLineRunner {\n    @Override\n    public void run(String... args) {\n        // Do something...\n    }\n}\n"],["body","\n"],["body","多个 bean对象实现了该接口 ，可以实现 org.springframework.core.Ordered接口，或者 org.springframework.core.annotation.Order 注解 实现排序"],["body","\n"],["h1","Application Exit"],["body","\n"],["body","每个 SpringApplication 应用 都与JVM 注册一个 关闭挂钩，确保 ApplicationContext  能优雅关闭，所有 Spring生命周期回调都可以使用（例如：DisposableBean 接口，或者 @PreDestroy 注解） ，另外可以使用 ExitCodeGenerator 接口 "],["body","\n"],["body","@SpringBootApplication\npublic class MyApplication {\n    @Bean\n    public ExitCodeGenerator exitCodeGenerator() {\n        return () -> 42;\n    }\n    public static void main(String[] args) {\n        System.exit(SpringApplication.exit(SpringApplication.run(MyApplication.class, args)));\n    }\n}\n"],["body","\n"],["h1","Admin Features"],["body","\n"],["body","可以通过 spring.application.admin.enabled属性开启 应用程序管理员功能"],["body","\n"],["body","This exposes the SpringApplicationAdminMXBean on the platform MBeanServer. 可以使用这个远程管理服务"],["body","\n"],["body","如果您想知道应用程序正在运行哪个 HTTP 端口，使用 local.server.port 获取端口名"],["body","\n"],["h1","Application Startup tracking"],["body","\n"],["body","During the application startup, the SpringApplication and the ApplicationContext perform many tasks related to the application lifecycle, the beans lifecycle or even processing application events. "],["body","\n"],["body","在应用程序启动期间，SpringApplication 和  ApplicationContext 执行与 应用生命周期、bean生命周期 或者 处理应用事件 相关的许多任务，"],["body","\n"],["body","使用 ApplicationStartup, Spring Framework 允许你 使用 StartupStep 对象 记录应用启动序列，收集这些数据可以用于分析目的，或者只是为了更好的了解应用程序启动过程"],["body","\n"],["body","ApplicationStartup 有多个实现，例如，可以使用BufferingApplicationStartup, "],["body","\n"],["body","@SpringBootApplication\npublic class MyApplication {\n\n    public static void main(String[] args) {\n        SpringApplication application = new SpringApplication(MyApplication.class);\n        application.setApplicationStartup(new BufferingApplicationStartup(2048));\n        application.run(args);\n    }\n\n}\n"],["body","\n"],["body","第一个可用的实现类是：FlightRecorderApplicationStartup  ，他将 spring特有的启动实现加入到 java Flight Recorder session中，用于分析应用程序并将其SpringContext 生命周期与 JVM 事件相关联（allocations, GCs, class loading）。一旦配置，可以通过 启用 Flight Recorder 记录数据"],["body","\n"],["body","$ java -XX:StartFlightRecording:filename=recording.jfr,duration=10s -jar demo.jar\n"],["body","\n"],["body","Spring Boot 实现了 BufferingApplicationStartup 变体，目的是用于输出到外部 指标系统，"],["body","\n"],["body","Spring Boot can also be configured to expose a startup endpoint that provides this information as a JSON document."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/springboot-元数据.html"],["title","springboot-元数据.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","什么是元数据文件"],["body","\n\n"],["body","springboot jar包含 元数据文件,这些文件提供了所有支持的配置属性"],["body","\n"],["body","这些文件是为了让开发者在编辑application.properties,application.yml文件时有代码完成功能"],["body","\n"],["body","大部分的元数据文件是 在编译期通过 带有 ConfigurationProperties 自动生成的"],["body","\n"],["body","所有元数据在 META-INF/spring-configuration-metadata.json文件中"],["body","\n\n"],["h1","元数据格式"],["body","\n\n"],["body","\n"],["body","json格式, 元数据项在 group类,或者properties类,值提示在 hints类"],["body","\n"],["body","\n"],["body","\n"],["body","group是 前缀,properties是具体的项"],["body","\n"],["body","\n"],["body","\n"],["body","不要求每个 properties有一个组"],["body","\n"],["body","{\"groups\": [\n    {\n        \"name\": \"server\",\n        \"type\": \"org.springframework.boot.autoconfigure.web.ServerProperties\",\n        \"sourceType\": \"org.springframework.boot.autoconfigure.web.ServerProperties\"\n    },\n    {\n        \"name\": \"spring.jpa.hibernate\",\n        \"type\": \"org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate\",\n        \"sourceType\": \"org.springframework.boot.autoconfigure.orm.jpa.JpaProperties\",\n        \"sourceMethod\": \"getHibernate()\"\n    }\n    ...\n],\"properties\": [\n    {\n        \"name\": \"server.port\",\n        \"type\": \"java.lang.Integer\",\n        \"sourceType\": \"org.springframework.boot.autoconfigure.web.ServerProperties\"\n    },\n    {\n        \"name\": \"server.address\",\n        \"type\": \"java.net.InetAddress\",\n        \"sourceType\": \"org.springframework.boot.autoconfigure.web.ServerProperties\"\n    },\n    {\n          \"name\": \"spring.jpa.hibernate.ddl-auto\",\n          \"type\": \"java.lang.String\",\n          \"description\": \"DDL mode. This is actually a shortcut for the \\\"hibernate.hbm2ddl.auto\\\" property.\",\n          \"sourceType\": \"org.springframework.boot.autoconfigure.orm.jpa.JpaProperties$Hibernate\"\n    }\n    ...\n],\"hints\": [\n    {\n        \"name\": \"spring.jpa.hibernate.ddl-auto\",\n        \"values\": [\n            {\n                \"value\": \"none\",\n                \"description\": \"Disable DDL handling.\"\n            },\n            {\n                \"value\": \"validate\",\n                \"description\": \"Validate the schema, make no changes to the database.\"\n            },\n            {\n                \"value\": \"update\",\n                \"description\": \"Update the schema if necessary.\"\n            },\n            {\n                \"value\": \"create\",\n                \"description\": \"Create the schema and destroy previous data.\"\n            },\n            {\n                \"value\": \"create-drop\",\n                \"description\": \"Create and then destroy the schema at the end of the session.\"\n            }\n        ]\n    }\n]}\n"],["body","\n"],["body","\n\n"],["headingLink","group属性"],["heading","group属性"],["body","\n"],["body","Name"],["body","Type"],["body","Purpose"],["body","\n"],["body","name"],["body","String"],["body","组名,必填"],["body","\n"],["body","type"],["body","String"],["body","组的数据类型的类名 ,如果组是基于类上的@ConfigurationProperties注解,该属性的值就是类的全名,如果基于@Bean,就是返回值的类,否则忽略"],["body","\n"],["body","description"],["body","String"],["body","最后一行必须以点结尾"],["body","\n"],["body","sourceType"],["body","String"],["body","如果是 @Bean方法的上注解带@ConfigurationProperties,则为  @Configuration的全类名"],["body","\n"],["body","sourceMethod"],["body","String"],["body","@ConfigurationProperties``@Bean 上的方法注解,返回方法的签名,(带参数列表)"],["body","\n\n\n"],["headingLink","property-attributes"],["heading","Property Attributes"],["body","\n"],["body","Name"],["body","Type"],["body","Purpose"],["body","\n"],["body","name"],["body","String"],["body","属性名,小写, 英文句号 分割,必填"],["body","\n"],["body","type"],["body","String"],["body","属性的数据类型的全签名,(java.lang.String,java.util.Map<java.lang.String,acme.MyEnum>),基本类型使用对应的包装类型,"],["body","\n"],["body","description"],["body","String"],["body","以 . 结尾"],["body","\n"],["body","sourceType"],["body","String"],["body","带有@ConfigurationProperties的类的全类名"],["body","\n"],["body","defaultValue"],["body","Object"],["body","默认值,可以为数组"],["body","\n"],["body","deprecation"],["body","Deprecation"],["body","是否过期"],["body","\n\n\n"],["headingLink","hint-attributes"],["heading","Hint Attributes"],["body","\n"],["body","Name"],["body","Type"],["body","Purpose"],["body","\n"],["body","name"],["body","String"],["body","点号分隔的属性名,如果属性为 map则会提示map的keys,或者值提示values"],["body","\n"],["body","values"],["body","ValueHint[]"],["body","数组值"],["body","\n"],["body","providers"],["body","ValueProvider[]"],["body","定义 providers的 名字和参数"],["body","\n\n\n"],["headingLink","值提示的values"],["heading","值提示的values"],["body","\n"],["body","Name"],["body","Type"],["body","Purpose"],["body","\n"],["body","value"],["body","Object"],["body","值"],["body","\n"],["body","description"],["body","String"],["body","以点结尾"],["body","\n\n\n"],["headingLink","providers"],["heading","providers"],["body","\n"],["body","Name"],["body","Type"],["body","Purpose"],["body","\n"],["body","name"],["body","String"],["body","提供该值的提供者,用于指示属性的值由项目中的哪些属性提供"],["body","\n"],["body","parameters"],["body","JSON object"],["body","额外的参数"],["body","\n\n\n"],["headingLink","属性过期指定"],["heading","属性过期指定"],["body","\n"],["body","@ConfigurationProperties(\"app.acme\")\npublic class AcmeProperties {\n\n    private String name;\n\n    public String getName() { ... }\n\n    public void setName(String name) { ... }\n\n    @DeprecatedConfigurationProperty(replacement = \"app.acme.name\")\n    @Deprecated\n    public String getTarget() {\n        return getName();\n    }\n\n    @Deprecated\n    public void setTarget(String target) {\n        setName(target);\n    }\n}\n"],["body","\n"],["h1","手动值提示"],["body","\n"],["headingLink","示例"],["heading","示例"],["body","\n"],["body","@ConfigurationProperties(\"sample\")\npublic class SampleProperties {\n\n    private Map<String,Integer> contexts;\n    // getters and setters\n}\n"],["body","\n"],["body","{\"hints\": [\n    {\n        \"name\": \"sample.contexts.keys\",\n        \"values\": [\n            {\n                \"value\": \"sample1\"\n            },\n            {\n                \"value\": \"sample2\"\n            }\n        ]\n    }\n]}\n"],["body","\n"],["headingLink","value-providers"],["heading","Value Providers"],["body","\n"],["body","valueProviders是一个强大的方式给 属性附加额外语义"],["body","\n"],["body","Name"],["body","Description"],["body","\n"],["body","any"],["body","可以添加任何属性,"],["body","\n"],["body","class-reference"],["body","自动完成 引用可用的类,可以被 变量 限制"],["body","\n"],["body","handle-as"],["body","Handles the property as if it were defined by the type defined by the mandatory target parameter."],["body","\n"],["body","logger-name"],["body","Auto-completes valid logger names and logger groups. Typically, package and class names available in the current project can be auto-completed as well as defined groups."],["body","\n"],["body","spring-bean-reference"],["body","Auto-completes the available bean names in the current project. Usually constrained by a base class that is specified by the target parameter."],["body","\n"],["body","spring-profile-name"],["body","Auto-completes the available Spring profile names in the project."],["body","\n\n\n"],["headingLink","any"],["heading","any"],["body","\n"],["body","如果您具有值列表并且任何其他值仍应视为有效，"],["body","\n"],["body","{\"hints\": [\n    {\n        \"name\": \"system.state\",\n        \"values\": [\n            {\n                \"value\": \"on\"\n            },\n            {\n                \"value\": \"off\"\n            }\n        ],\n        \"providers\": [\n            {\n                \"name\": \"any\"\n            }\n        ]\n    }\n]}\n"],["body","\n"],["headingLink","class-reference"],["heading","Class Reference"],["body","\n"],["body","Parameter"],["body","Type"],["body","Default value"],["body","Description"],["body","\n"],["body","target"],["body","String (Class)"],["body","none"],["body","指定类名,则只会提示项目里存在的类或者其子类"],["body","\n"],["body","concrete"],["body","boolean"],["body","true"],["body","是否需要精确到 全类名"],["body","\n\n\n"],["body","{\"hints\": [\n    {\n        \"name\": \"server.servlet.jsp.class-name\",\n        \"providers\": [\n            {\n                \"name\": \"class-reference\",\n                \"parameters\": {\n                    \"target\": \"javax.servlet.http.HttpServlet\"\n                }\n            }\n        ]\n    }\n]}\n"],["body","\n"],["headingLink","handle-as"],["heading","Handle As"],["body","\n"],["body","Parameter"],["body","Type"],["body","Default value"],["body","Description"],["body","\n"],["body","target"],["body","String (Class)"],["body","none"],["body","依赖其他高级属性"],["body","\n\n\n\n"],["body","Any java.lang.Enum: Lists the possible values for the property. (We recommend defining the property with the Enum type, as no further hint should be required for the IDE to auto-complete the values)"],["body","\n"],["body","java.nio.charset.Charset: Supports auto-completion of charset/encoding values (such as UTF-8)"],["body","\n"],["body","java.util.Locale: auto-completion of locales (such as en_US)"],["body","\n"],["body","org.springframework.util.MimeType: Supports auto-completion of content type values (such as text/plain)"],["body","\n"],["body","org.springframework.core.io.Resource: Supports auto-completion of Spring’s Resource abstraction to refer to a file on the filesystem or on the classpath (such as classpath:/sample.properties)"],["body","\n\n"],["body","{\"hints\": [\n    {\n        \"name\": \"spring.liquibase.change-log\",\n        \"providers\": [\n            {\n                \"name\": \"handle-as\",\n                \"parameters\": {\n                    \"target\": \"org.springframework.core.io.Resource\"\n                }\n            }\n        ]\n    }\n]}\n"],["body","\n"],["headingLink","logger-name"],["heading","Logger Name"],["body","\n"],["body","Parameter"],["body","Type"],["body","Default value"],["body","Description"],["body","\n"],["body","group"],["body","boolean"],["body","true"],["body","Specify whether known groups should be considered."],["body","\n\n\n"],["body","内置的logger日志级别定义"],["body","\n"],["body","{\"hints\": [\n    {\n        \"name\": \"logging.level.keys\",\n        \"values\": [\n            {\n                \"value\": \"root\",\n                \"description\": \"Root logger used to assign the default logging level.\"\n            },\n            {\n                \"value\": \"sql\",\n                \"description\": \"SQL logging group including Hibernate SQL logger.\"\n            },\n            {\n                \"value\": \"web\",\n                \"description\": \"Web logging group including codecs.\"\n            }\n        ],\n        \"providers\": [\n            {\n                \"name\": \"logger-name\"\n            }\n        ]\n    },\n    {\n        \"name\": \"logging.level.values\",\n        \"values\": [\n            {\n                \"value\": \"trace\"\n            },\n            {\n                \"value\": \"debug\"\n            },\n            {\n                \"value\": \"info\"\n            },\n            {\n                \"value\": \"warn\"\n            },\n            {\n                \"value\": \"error\"\n            },\n            {\n                \"value\": \"fatal\"\n            },\n            {\n                \"value\": \"off\"\n            }\n\n        ],\n        \"providers\": [\n            {\n                \"name\": \"any\"\n            }\n        ]\n    }\n]}\n"],["body","\n"],["headingLink","spring-bean-reference"],["heading","Spring Bean Reference"],["body","\n"],["body","Parameter"],["body","Type"],["body","Default value"],["body","Description"],["body","\n"],["body","target"],["body","String (Class)"],["body","none"],["body","配置成springBean的类的全限定名"],["body","\n\n\n"],["body","{\"hints\": [\n    {\n        \"name\": \"spring.jmx.server\",\n        \"providers\": [\n            {\n                \"name\": \"spring-bean-reference\",\n                \"parameters\": {\n                    \"target\": \"javax.management.MBeanServer\"\n                }\n            }\n        ]\n    }\n]}\n"],["body","\n"],["headingLink","spring-profile-name"],["heading","Spring Profile Name"],["body","\n"],["body","与spring.profiles.active 相对应"],["body","\n"],["body","{\"hints\": [\n    {\n        \"name\": \"spring.profiles.active\",\n        \"providers\": [\n            {\n                \"name\": \"spring-profile-name\"\n            }\n        ]\n    }\n]}\n"],["body","\n"],["h1","产生自己的元数据"],["body","\n\n"],["body","\n"],["body","META-INF/additional-spring-configuration-metadata.json文件位置"],["body","\n"],["body","\n"],["body","\n"],["body","通过 spring-boot-configuration-processor jar的 @ConfigurationProperties配置产生自己的元数据"],["body","\n"],["body","<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-configuration-processor</artifactId>\n    <optional>true</optional>\n</dependency>\n"],["body","\n"],["body","\n"],["body","\n"],["body","If you are using an additional-spring-configuration-metadata.json file, the compileJava task should be configured to depend on the processResources task, as shown in the following example:"],["body","\n"],["body","compileJava.inputs.files(processResources)\n"],["body","\n"],["body","\n"],["body","\n"],["body","处理器会处理 类和方法上的 @ConfigurationProperties注解"],["body","\n"],["body","\n\n"],["body","@ConfigurationProperties(prefix = \"acme.messaging\")\npublic class MessagingProperties {\n\n    private List<String> addresses = new ArrayList<>(Arrays.asList(\"a\", \"b\"));\n\n    private ContainerType containerType = ContainerType.SIMPLE;\n\n    // ... getter and setters\n\n    public enum ContainerType {\n\n        SIMPLE,\n        DIRECT\n\n    }\n\n}\n{\"properties\": [\n    {\n        \"name\": \"acme.messaging.addresses\",\n        \"defaultValue\": [\"a\", \"b\"]\n    },\n    {\n        \"name\": \"acme.messaging.container-type\",\n        \"defaultValue\": \"simple\"\n    }\n]}\n"],["body","\n"],["headingLink","嵌套属性"],["heading","嵌套属性"],["body","\n"],["body","@ConfigurationProperties(prefix=\"server\")\npublic class ServerProperties {\n\n    private String name;\n\n    private Host host;\n\n    // ... getter and setters\n\n    public static class Host {\n\n        private String ip;\n\n        private int port;\n\n        // ... getter and setters\n\n    }\n\n}\n对应内部类\n可以对该字段使用 @NestedConfigurationProperty 来使用外部类\n"],["body","\n"],["body","官网地址"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/springboot-HiKariCP连接池动态数据源配置.html"],["title","springboot-HiKariCP连接池动态数据源配置.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","mybatis多数据源配置"],["body","\n"],["headingLink","继承数据源路由类"],["heading","继承数据源路由类"],["body","\n"],["body","AbstractRoutingDataSource"],["body","\n"],["body","    @Override\n    protected Object determineCurrentLookupKey() {\n        return DataSourceContextHolder.getDatasourceType();\n    }\n数据源的路由策略是:同一线程内的 数据源一致\n\npackage com.weisanju.hikaricp.datasource;\n\npublic class DataSourceContextHolder {\n    public static final ThreadLocal<String> contextHolder=new ThreadLocal<>();\n\n    public static void setDataSource(String type){\n        contextHolder.set(type);\n    }\n\n    public static String getDatasourceType(){\n        return contextHolder.get();\n    }\n\n    public static void clearDataSourceType(){\n        contextHolder.remove();\n    }\n}\n\n"],["body","\n"],["headingLink","使用自定义注解aop切换数据源"],["heading","使用自定义注解+AOP切换数据源"],["body","\n"],["body","@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD,ElementType.TYPE})\npublic @interface DataSourceSwitch {\n    String value()default \"test\";\n}\n"],["body","\n"],["body","@Aspect\n@Component\npublic class DataSourceAspect {\n    @Before(\"@annotation(ds)\")\n    public void beforeDataSource(DataSourceSwitch ds) {\n        DataSourceContextHolder.setDataSource(ds.value());\n    }\n    @After(\"@annotation(ds)\")\n    public void afterDataSource(DataSourceSwitch ds){\n        DataSourceContextHolder.clearDataSourceType();\n    }\n}\n"],["body","\n"],["headingLink","使用配置类配置mybatis"],["heading","使用配置类配置mybatis"],["body","\n\n"],["body","\n"],["body","配置 原始 数据源"],["body","\n"],["body","\n"],["body","\n"],["body","配置 动态数据源(代理类)"],["body","\n"],["body","\n"],["body","\n"],["body","配置sqlsessionFactory"],["body","\n"],["body","需要指定的东西"],["body","\n\n"],["body","动态数据源"],["body","\n"],["body","xml文件(原本在配置文件种指定的)"],["body","\n\n"],["body","\n"],["body","\n"],["body","配置事务管理器"],["body","\n"],["body","@Configuration\n@MapperScan(basePackages=\"com.weisanju.hikaricp.mapper\")\npublic class MybatisConfig {\n\n    @Bean(\"ase\")\n    @ConfigurationProperties(prefix = \"spring.datasource.ase\")\n    public DataSource ase(){\n        return DataSourceBuilder.create().build();\n    }\n    @Bean(\"test\")\n    @ConfigurationProperties(prefix = \"spring.datasource.test\")\n    public DataSource test(){\n        return DataSourceBuilder.create().build();\n    }\n\n    @Bean\n    public DynamicDataSource dataSource(@Qualifier(\"ase\") DataSource ase,\n                                        @Qualifier(\"test\") DataSource test) {\n        DynamicDataSource.datasouceMap.put(DataSourceType.ASE.getDbname(), ase);\n        DynamicDataSource.datasouceMap.put(DataSourceType.TEST.getDbname(), test);\n        DynamicDataSource.instance.setTargetDataSources(DynamicDataSource.datasouceMap);\n        DynamicDataSource.instance.setDefaultTargetDataSource(test);\n        return DynamicDataSource.instance;\n    }\n    @Bean\n    public SqlSessionFactory sqlSessionFactory(DynamicDataSource dynamicDataSource) throws Exception {\n        SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();\n        factoryBean.setDataSource(dynamicDataSource);\n//        factoryBean.setTypeAliasesPackage();\n        // 设置mapper.xml的位置路径\n        Resource[] resources = new PathMatchingResourcePatternResolver().getResources(\"classpath:xml/*.xml\");\n        factoryBean.setMapperLocations(resources);\n        return factoryBean.getObject();\n    }\n\n    @Bean\n    public PlatformTransactionManager transactionManager(DynamicDataSource dynamicDataSource){\n        return new DataSourceTransactionManager(dynamicDataSource);\n    }\n}\n"],["body","\n"],["body","\n\n"],["headingLink","从数据库实例化数据源"],["heading","从数据库实例化数据源"],["body","\n"],["body","public class DynamicDataSource extends AbstractRoutingDataSource {\n    public static final DynamicDataSource instance=new DynamicDataSource();\n    public static final Map<Object,Object> datasouceMap = new HashMap<>();\n    @Override\n    public void setTargetDataSources(Map<Object, Object> targetDataSources) {\n        super.setTargetDataSources(targetDataSources);\n        super.afterPropertiesSet();\n    }\n\n    @Override\n    protected Object determineCurrentLookupKey() {\n        return DataSourceContextHolder.getDatasourceType();\n    }\n\n}\n    要调用 afterPropertiesSet才会对 数据源的datasource Map生效\n"],["body","\n"],["body","从数据库查数据源"],["body","\n"],["body","{\n        DataSourceExample dataSourceExample = new DataSourceExample();\n        String db = \"ase\";\n        if(DynamicDataSource.datasouceMap.get(db) ==null){\n            dataSourceExample.createCriteria().andDsnameEqualTo(db);\n            List<DataSource> dataSources = dataSourceMapper.selectByExample(dataSourceExample);\n            DataSource dataSource = dataSources.get(0);\n            HikariDataSource hikariDataSource = new HikariDataSource();\n\n            hikariDataSource.setJdbcUrl(dataSource.getUrl());\n            hikariDataSource.setUsername(dataSource.getUsername());\n            hikariDataSource.setPassword(dataSource.getPassword());\n            hikariDataSource.setDriverClassName(dataSource.getDrivername());\n\n            DynamicDataSource.datasouceMap.put(db,hikariDataSource);\n            DynamicDataSource.instance.setTargetDataSources(DynamicDataSource.datasouceMap);\n        }\n        DataSourceContextHolder.setDataSource(db);\n        //更新\n        ZunshiRecord zunshiRecord = new ZunshiRecord();\n        zunshiRecord.setId(1L);\n        zunshiRecord.setCompanyCode(\"666\");\n        mapper.updateByPrimaryKeySelective(zunshiRecord);\n    }\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/springBoot资源处理.html"],["title","springBoot资源处理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","静态资源处理"],["body","\n"],["headingLink","静态资源映射规则"],["heading","静态资源映射规则"],["body","\n"],["body","SpringBoot中，SpringMVC的web配置都在 WebMvcAutoConfiguration 这个配置类里面；"],["body","\n"],["body","WebMvcAutoConfiguration.EnableWebMvcConfiguration#addResourceHandlers 方法可以添加"],["body","\n"],["body","protected void addResourceHandlers(ResourceHandlerRegistry registry) {\n    super.addResourceHandlers(registry);\n    if (!this.resourceProperties.isAddMappings()) {\n        logger.debug(\"Default resource handling disabled\");\n        return;\n    }\n    ServletContext servletContext = getServletContext();\n    addResourceHandler(registry, \"/webjars/**\", \"classpath:/META-INF/resources/webjars/\");\n    addResourceHandler(registry, this.mvcProperties.getStaticPathPattern(), (registration) -> {\n        registration.addResourceLocations(this.resourceProperties.getStaticLocations());\n        if (servletContext != null) {\n            registration.addResourceLocations(new ServletContextResource(servletContext, SERVLET_LOCATION));\n        }\n    });\n}\n"],["body","\n"],["headingLink","webjar"],["heading","webJar"],["body","\n"],["body","比如所有的 /webjars/** ， 都需要去 classpath:/META-INF/resources/webjars/ 找对应的资源；"],["body","\n"],["body","Webjars本质就是以jar包的方式引入我们的静态资源 ， 我们以前要导入一个静态资源文件，直接导入即可。"],["body","\n"],["body","使用SpringBoot需要使用Webjars，网站：https://www.webjars.org"],["body","\n"],["headingLink","静态目录"],["heading","静态目录"],["body","\n"],["body","private static final String[] CLASSPATH_RESOURCE_LOCATIONS = { \n    \"classpath:/META-INF/resources/\",\n  \"classpath:/resources/\", \n    \"classpath:/static/\", \n    \"classpath:/public/\" \n};\n"],["body","\n"],["h1","自定义静态资源路径"],["body","\n"],["body","spring.resources.static-locations=classpath:/coding/,classpath:/kuang/\n一旦自己定义了静态文件夹的路径，原来的自动配置就都会失效了！"],["body","\n"],["body","`"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/springboot配置文件加载.html"],["title","springboot配置文件加载 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/springboot-自动配置原理.html"],["title","springboot-自动配置原理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/自定义springBootStarter.html"],["title","自定义springBootStarter.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","依赖配置"],["body","\n"],["body","<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-autoconfigure</artifactId>\n    <version>2.2.1.RELEASE</version>\n</dependency>\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <version>1.18.16</version>\n</dependency>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-configuration-processor</artifactId>\n    <version>2.4.0</version>\n</dependency>\n"],["body","\n"],["h1","定义Service业务类"],["body","\n"],["body","package com.weisanju;\n\npublic class MsgService {\n    String url;\n    String accessKeySecret;\n    String accessKeyId;\n    public MsgService(String url,String accessKeyId, String accessKeySecret) {\n        this.url = url;\n        this.accessKeySecret = accessKeySecret;\n        this.accessKeyId = accessKeyId;\n    }\n    public void sendMsgService(String msg){\n        HttpClientUtils.sendMsg(url,accessKeyId,accessKeySecret,msg);\n    }\n\n    public MsgService() {\n    }\n}\n"],["body","\n"],["h1","定义配置类"],["body","\n"],["body","package com.weisanju;\n\nimport lombok.Data;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\n\n@ConfigurationProperties(prefix = \"msg\")\n@Data\npublic class MsgProperties {\n    private String url;\n    private String accessKeyId;\n    private String accessKeySecret;\n\n    public String getUrl() {\n        return url;\n    }\n\n    public void setUrl(String url) {\n        this.url = url;\n    }\n\n    public String getAccessKeyId() {\n        return accessKeyId;\n    }\n\n    public void setAccessKeyId(String accessKeyId) {\n        this.accessKeyId = accessKeyId;\n    }\n\n    public String getAccessKeySecret() {\n        return accessKeySecret;\n    }\n\n    public void setAccessKeySecret(String accessKeySecret) {\n        this.accessKeySecret = accessKeySecret;\n    }\n}\n"],["body","\n"],["h1","定义自动配置类"],["body","\n"],["body","package com.weisanju;\n\nimport com.weisanju.MsgService;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnClass;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\nimport org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\nimport org.springframework.boot.context.properties.EnableConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\nimport javax.annotation.Resource;\n\n@Configuration\n@ConditionalOnClass(MsgService.class)\n@EnableConfigurationProperties(MsgProperties.class)\npublic class MsgAutoConfiguration {\n    //注入属性配置类\n    @Resource\n    private MsgProperties msgProperties;\n\n    @Bean\n    @ConditionalOnMissingBean(MsgService.class)\n    @ConditionalOnProperty(prefix = \"msg\",value = \"enabled\",havingValue = \"true\")\n    public MsgService msgService() {\n        return new MsgService(msgProperties.getUrl(),msgProperties.getAccessKeyId() ,msgProperties.getAccessKeySecret());\n    }\n}\n"],["body","\n"],["h1","定义 类SPI查找"],["body","\n"],["body","src/main/resources/META-INF/spring.factories"],["body","\n"],["body","路径中 定义 自动配置类 org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.weisanju.MsgAutoConfiguration"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/官方文档.html"],["title","官方文档 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","12.spring_SpringBoot/README.html"],["title","SpringBoot - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","30.其他_JMH/java基准测试.html"],["title","java基准测试.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概述"],["body","\n"],["body","JMH只适合细粒度的方法测试，并不适用于系统之间的链路测试！"],["body","\n"],["h1","使用"],["body","\n"],["headingLink","引包"],["heading","引包"],["body","\n"],["body","        <dependency>\n            <groupId>org.openjdk.jmh</groupId>\n            <artifactId>jmh-core</artifactId>\n            <version>1.20</version>\n        </dependency>\n        <dependency>\n            <groupId>org.openjdk.jmh</groupId>\n            <artifactId>jmh-generator-annprocess</artifactId>\n            <version>1.20</version>\n            <scope>provided</scope>\n        </dependency>\n"],["body","\n"],["headingLink","helloworldtest"],["heading","HelloWorldTest"],["body","\n"],["body","package com.weisanju.logger;\n\nimport org.openjdk.jmh.annotations.*;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.concurrent.TimeUnit;\n\n@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS) //每次都进行 五次预热执行，每隔1秒进行一次预热操作\n@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS) //预热结束后，进行五次实际 执行，每隔一秒执行\npublic class JMHSample_01_HelloWorld {\n    static class Demo {\n        int id;\n        String name;\n\n        public Demo(int id, String name) {\n            this.id = id;\n            this.name = name;\n        }\n    }\n\n    static List<Demo> demoList;\n\n    static {\n        demoList = new ArrayList();\n        for (int i = 0; i < 10000; i++) {\n            demoList.add(new Demo(i, \"test\"));\n        }\n    }\n\n    @Benchmark //定义基准测试方法单元\n    @BenchmarkMode(Mode.AverageTime) //取方法平均值\n    @OutputTimeUnit(TimeUnit.MICROSECONDS) //输出单元 us\n    public void testHashMapWithoutSize() {\n        Map map = new HashMap();\n        for (Demo demo : demoList) {\n            map.put(demo.id, demo.name);\n        }\n    }\n\n    @Benchmark //定义基准测试方法单元\n    @BenchmarkMode(Mode.AverageTime)\n    @OutputTimeUnit(TimeUnit.MICROSECONDS)\n    public void testHashMap() {\n        Map map = new HashMap((int) (demoList.size() / 0.75f) + 1);\n        for (Demo demo : demoList) {\n            map.put(demo.id, demo.name);\n        }\n    }\n\n    public static void main(String[] args) throws RunnerException {\n        Options opt = new OptionsBuilder()\n                .include(JMHSample_01_HelloWorld.class.getSimpleName())\n                .forks(1)\n                .build();\n        new Runner(opt).run();\n    }\n}\n"],["body","\n"],["body","上面的代码翻译一下：分别定义两个基准测试的方法testHashMapWithoutSize和 testHashMap，这两个基准测试方法执行流程是：每个方法执行前都进行5次预热执行，每隔1秒进行一次预热操作，预热执行结束之后进行5次实际测量执行，每隔1秒进行一次实际执行，我们此次基准测试测量的是平均响应时长，单位是us。"],["body","\n"],["body","预热？为什么要预热？因为 JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM 会尝试将其编译成为机器码从而提高执行速度。为了让 benchmark 的结果更加接近真实情况就需要进行预热。"],["body","\n"],["body","从上面的执行结果我们看出，针对一个Map的初始化参数的给定其实有很大影响，当我们给定了初始化参数执行执行的速度是没给定参数的2/3，这个优化速度还是比较明显的，所以以后大家在初始化Map的时候能给定参数最好都给定了，代码是处处优化的，积少成多。"],["body","\n"],["headingLink","示例2"],["heading","示例2"],["body","\n"],["body","package benchmark;\n\nimport org.openjdk.jmh.annotations.*;\nimport org.openjdk.jmh.infra.Blackhole;\nimport org.openjdk.jmh.runner.Runner;\nimport org.openjdk.jmh.runner.RunnerException;\nimport org.openjdk.jmh.runner.options.Options;\nimport org.openjdk.jmh.runner.options.OptionsBuilder;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.TimeUnit;\n\n@State(Scope.Benchmark)\n@BenchmarkMode(Mode.AverageTime)\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\n@Fork(value = 1, jvmArgsPrepend = \"-XX:+PrintStringTableStatistics\")\n@Warmup(iterations = 5)\n@Measurement(iterations = 5)\npublic class StringInternBenchMark {\n\n    @Param({\"1\", \"100\", \"10000\", \"1000000\"})\n    private int size;\n\n    private StringInterner str;\n    private ConcurrentHashMapInterner chm;\n    private HashMapInterner hm;\n\n    @Setup\n    public void setup() {\n        str = new StringInterner();\n        chm = new ConcurrentHashMapInterner();\n        hm = new HashMapInterner();\n    }\n\n    public static class StringInterner {\n        public String intern(String s) {\n            return s.intern();\n        }\n    }\n\n    @Benchmark\n    public void useIntern(Blackhole bh) {\n        for (int c = 0; c < size; c++) {\n            bh.consume(str.intern(\"doit\" + c));\n        }\n    }\n\n    public static class ConcurrentHashMapInterner {\n        private final Map<String, String> map;\n\n        public ConcurrentHashMapInterner() {\n            map = new ConcurrentHashMap<>();\n        }\n\n        public String intern(String s) {\n            String exist = map.putIfAbsent(s, s);\n            return (exist == null) ? s : exist;\n        }\n    }\n\n    @Benchmark\n    public void useCurrentHashMap(Blackhole bh) {\n        for (int c = 0; c < size; c++) {\n            bh.consume(chm.intern(\"doit\" + c));\n        }\n    }\n\n    public static class HashMapInterner {\n        private final Map<String, String> map;\n\n        public HashMapInterner() {\n            map = new HashMap<>();\n        }\n\n        public String intern(String s) {\n            String exist = map.putIfAbsent(s, s);\n            return (exist == null) ? s : exist;\n        }\n    }\n\n    @Benchmark\n    public void useHashMap(Blackhole bh) {\n        for (int c = 0; c < size; c++) {\n            bh.consume(hm.intern(\"doit\" + c));\n        }\n    }\n\n    public static void main(String[] args) throws RunnerException {\n        Options opt = new OptionsBuilder()\n                .include(StringInternBenchMark.class.getSimpleName())\n                .build();\n        new Runner(opt).run();\n    }\n}\n"],["body","\n"],["h1","@Benchmark"],["body","\n\n"],["body","@Benchmark标签是用来标记测试方法的，只有被这个注解标记的话，该方法才会参与基准测试，但是有一个基本的原则就是被"],["body","\n"],["body","@Benchmark标记的方法必须是public的。"],["body","\n\n"],["h1","@Warmup"],["body","\n"],["body","@Warmup用来配置预热的内容，可用于类或者方法上，越靠近执行方法的地方越准确。一般配置warmup的参数有这些："],["body","\n\n"],["body","iterations：预热的次数。"],["body","\n"],["body","time：每次预热的时间。"],["body","\n"],["body","timeUnit：时间单位，默认是s。"],["body","\n"],["body","batchSize：批处理大小，每次操作调用几次方法。（后面用到）"],["body","\n\n"],["h1","@Measurement"],["body","\n"],["body","用来控制实际执行的内容，配置的选项本warmup一样。"],["body","\n"],["h1","@BenchmarkMode"],["body","\n"],["body","主要是表示测量的纬度，有以下这些纬度可供选择："],["body","\n\n"],["body","Mode.Throughput 吞吐量纬度"],["body","\n"],["body","Mode.AverageTime 平均时间"],["body","\n"],["body","Mode.SampleTime 抽样检测"],["body","\n"],["body","Mode.SingleShotTime 检测一次调用"],["body","\n\n"],["body","Mode.All 运用所有的检测模式 在方法级别指定@BenchmarkMode的时候可以一定指定多个纬度，例如： @BenchmarkMode({Mode.Throughput, Mode.AverageTime, Mode.SampleTime, Mode.SingleShotTime})，代表同时在多个纬度对目标方法进行测量。"],["body","\n"],["body","名称"],["body","描述"],["body","\n"],["body","Mode.Throughput"],["body","计算吞吐量"],["body","\n"],["body","Mode.AverageTime"],["body","计算平均运行时间"],["body","\n"],["body","Mode.SampleTime"],["body","在测试中，随机进行采样执行的时间"],["body","\n"],["body","Mode.SingleShotTime"],["body","测量单次操作的时间"],["body","\n"],["body","Mode.All"],["body","所有模式依次运行"],["body","\n\n\n"],["body","每个维度 默认运行 十轮"],["body","\n"],["h1","@OutputTimeUnit"],["body","\n"],["body","@OutputTimeUnit代表测量的单位，比如秒级别，毫秒级别，微妙级别等等。一般都使用微妙和毫秒级别的稍微多一点。该注解可以用在方法级别和类级别，当用在类级别的时候会被更加精确的方法级别的注解覆盖，原则就是离目标更近的注解更容易生效。"],["body","\n"],["h1","@State"],["body","\n"],["body","在很多时候我们需要维护一些状态内容，比如在多线程的时候我们会维护一个共享的状态，这个状态值可能会在每隔线程中都一样，也有可能是每个线程都有自己的状态，JMH为我们提供了状态的支持。该注解只能用来标注在类上，因为类作为一个属性的载体。 @State的状态值主要有以下几种："],["body","\n\n"],["body","\n"],["body","Scope.Benchmark 该状态的意思是会在所有的Benchmark的工作线程中共享变量内容。"],["body","\n"],["body","\n"],["body","\n"],["body","Scope.Group 同一个Group的线程可以享有同样的变量"],["body","\n"],["body","\n"],["body","\n"],["body","Scope.Thread 每隔线程都享有一份变量的副本，线程之间对于变量的修改不会相互影响。 下面看两个常见的@State的写法："],["body","\n"],["body","\n\n"],["headingLink","要求"],["heading","要求"],["body","\n"],["body","这个类必须遵循以下四条规则："],["body","\n\n"],["body","有无参构造函数(默认构造函数)"],["body","\n"],["body","必须公共类"],["body","\n"],["body","如果是内部类，需要是静态内部类"],["body","\n"],["body","必须使用 @State 注解"],["body","\n\n"],["headingLink","配置方式"],["heading","配置方式"],["body","\n"],["body","第一种是 Benchmark 不在 State 的类里。这时需要在测试方法的入参列表里显式注入该 State。"],["body","\n"],["body","public class JMHSample_03_States {\n\n    @State(Scope.Benchmark)\n    public static class BenchmarkState {\n        volatile double x = Math.PI;\n    }\n\n    @State(Scope.Thread)\n    public static class ThreadState {\n        volatile double x = Math.PI;\n    }\n\n    @Benchmark\n    public void measureUnshared(ThreadState state) {\n        state.x++;\n    }\n\n    @Benchmark\n    public void measureShared(BenchmarkState state) {\n        state.x++;\n    }\n}\n"],["body","\n"],["body","第二种是 Benchmark 在 State 的类里。这时不需要在测试方法的入参列表里显式注入该 State。"],["body","\n"],["body","@State(Scope.Thread)\npublic class JMHSample_04_DefaultState {\n\n    double x = Math.PI;\n\n    @Benchmark\n    public void measure() {\n        x++;\n    }\n\n}\n"],["body","\n"],["headingLink","scope"],["heading","Scope"],["body","\n"],["body","scope"],["body","描述"],["body","\n"],["body","Benchmark"],["body","Benchmark 中所有线程都使用同一个 State"],["body","\n"],["body","Group"],["body","Benchmark 中同一 Benchmark 组（使用@Group标识，后面再讲）使用一个 State"],["body","\n"],["body","Thread"],["body","Benchmark 中每个线程使用同一个 State"],["body","\n\n\n"],["h1","@Setup 和 @TearDown"],["body","\n"],["body","这两个注解只能定义在注解了 State 里，其中，@Setup类似于 junit 的@Before，而@TearDown类似于 junit 的@After。"],["body","\n"],["body","@State(Scope.Thread)\npublic class JMHSample_05_StateFixtures {\n\n    double x;\n\n    @Setup(Level.Iteration)\n    public void prepare() {\n        System.err.println(\"init............\");\n        x = Math.PI;\n    }\n\n    @TearDown(Level.Iteration)\n    public void check() {\n        System.err.println(\"destroy............\");\n        assert x > Math.PI : \"Nothing changed?\";\n    }\n\n\n    @Benchmark\n    public void measureRight() {\n        x++;\n    }\n\n}\n"],["body","\n"],["body","这两个注解注释的方法的调用时机，主要受 Level 的控制，JMH 提供了三种 Level，如下："],["body","\n\n"],["body","\n"],["body","Trial"],["body","\n"],["body","Benchmark 开始前或结束后执行，如下。Level 为 Benchmark 的 Setup 和 TearDown 方法的开销不会计入到最终结果。"],["body","\n"],["body","//Benchmark\npublic void Benchmark01(){\n    // call Setup method\n    // 每个循环为一个iteration\n    for(iterations){\n        // 每个循环为一个invocation，这里会统计每次invocation的开销\n        while(!timeout){\n            // 调用我们的测试方法\n        }\n    }\n    // call TearDown method\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","Iteration"],["body","\n"],["body","Benchmark 里每个 Iteration 开始前或结束后执行，如下。Level 为 Iteration 的 Setup 和 TearDown 方法的开销不会计入到最终结果。"],["body","\n"],["body","//Benchmark\npublic void Benchmark01(){\n    // 每个循环为一个iteration\n    for(iterations){\n        // call Setup method\n        // 每个循环为一个invocation，这里会统计每次invocation的开销\n        while(!timeout){\n            // 调用我们的测试方法\n        }\n        // call TearDown method\n    }\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","Invocation"],["body","\n"],["body","Iteration 里每次方法调用开始前或结束后执行，如下。Level 为 Invocation 的 Setup 和 TearDown 方法的开销将计入到最终结果。"],["body","\n"],["body","\n\n"],["h1","JMH Maven"],["body","\n"],["headingLink","引入插件"],["heading","引入插件"],["body","\n"],["body","<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-shade-plugin</artifactId>\n                <version>2.2</version>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>shade</goal>\n                        </goals>\n                        <configuration>\n                            <finalName>${uberjar.name}</finalName>\n                            <transformers>\n                                <transformer implementation=\"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer\">\n                                    <mainClass>org.openjdk.jmh.Main</mainClass>\n                                </transformer>\n                            </transformers>\n                            <filters>\n                                <filter>\n                                    <artifact>*:*</artifact>\n                                    <excludes>\n                                        <exclude>META-INF/*.SF</exclude>\n                                        <exclude>META-INF/*.DSA</exclude>\n                                        <exclude>META-INF/*.RSA</exclude>\n                                    </excludes>\n                                </filter>\n                            </filters>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n"],["body","\n\n"],["body","\n"],["body","用 JMH 生成骨架"],["body","\n"],["body","\n"],["body","\n"],["body","  mvn archetype:generate ^\n  -DinteractiveMode=false ^\n  -DarchetypeGroupId=org.openjdk.jmh ^\n  -DarchetypeArtifactId=jmh-java-benchmark-archetype ^\n  -DarchetypeVersion=1.25 ^\n  -DgroupId=cn.zzs.jmh ^\n  -DartifactId=jmh-test01 ^\n  -Dversion=1.0.0\n"],["body","\n"],["body","\n\n"],["h1","JMH Sample"],["body","\n"],["body","JMH样例代码"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","02.html"],["title","对象拷贝 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","27.鉴权_Shiro/shiro频繁访问redis.html"],["title","shiro频繁访问redis.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n"],["body","为了分布式session共享，通常的做法是将session存储在redis中，实现多个节点获取同一个session。此实现可以实现session共享，但session的特点是内存存储，就是为了高速频繁访问，每个请求都必须验证session是否存在是否过期，也从session中获取数据，这样导致一个页面刷新过程中的数十个请求会同时访问redis,在几毫秒内同时操作session的获取，修改，更新，保存，删除等操作，从而造成redis的并发量飙升，刷新一个页面操作redis几十到几百次。"],["body","\n"],["body","为了解决由于session共享造成的redis高并发问题，很明显需要在redis之前做一次短暂的session缓存，如果该缓存存在就不用从redis中获取，从而减少同时访问redis的次数。如果做session缓存，主要有两种种方案，其实原理都相同："],["body","\n"],["body","重写sessionManager的retrieveSession方法"],["body","\n"],["body","首先从request中获取session,如果request中不存在再走原来的从redis中获取。这样可以让一个请求的多次访问redis问题得到解决，因为request的生命周期为浏览器发送一个请求到接收服务器的一次响应完成"],["body","\n"],["body","因此，在一次请求中，request中的session是一直存在的，并且不用担心session超时过期等的问题。这样就可以达到有多少次请求就几乎有多少次访问redis,大大减少单次请求，频繁访问redis的问题。大大减少redis的并发数量"],["body","\n"],["body","\nimport java.io.Serializable;\n\nimport javax.servlet.ServletRequest;\n\nimport org.apache.shiro.session.Session;\nimport org.apache.shiro.session.UnknownSessionException;\nimport org.apache.shiro.session.mgt.SessionKey;\nimport org.apache.shiro.web.session.mgt.DefaultWebSessionManager;\nimport org.apache.shiro.web.session.mgt.WebSessionKey;\n\npublic class ShiroSessionManager extends DefaultWebSessionManager {\n     /**\n     * 获取session\n     * 优化单次请求需要多次访问redis的问题\n     * @param sessionKey\n     * @return\n     * @throws UnknownSessionException\n     */\n    @Override\n    protected Session retrieveSession(SessionKey sessionKey) throws UnknownSessionException {\n        Serializable sessionId = getSessionId(sessionKey);\n\n        ServletRequest request = null;\n        if (sessionKey instanceof WebSessionKey) {\n            request = ((WebSessionKey) sessionKey).getServletRequest();\n        }\n\n        if (request != null && null != sessionId) {\n            Object sessionObj = request.getAttribute(sessionId.toString());\n            if (sessionObj != null) {\n                return (Session) sessionObj;\n            }\n        }\n\n        Session session = super.retrieveSession(sessionKey);\n        if (request != null && null != sessionId) {\n            request.setAttribute(sessionId.toString(), session);\n        }\n        return session;\n    }\n}\n"],["body","\n"],["body","session缓存于本地内存中"],["body","\n"],["body","自定义cacheRedisSessionDao,该sessionDao中一方面注入cacheManager用于session缓存，另一方面注入redisManager用于session存储"],["body","\n"],["body","当readSession先用cacheManager从cache中读取，如果不存在再用redisManager从redis中读取"],["body","\n"],["body","注意：该方法最大的特点是session缓存的存活时间必须小于redis中session的存活时间，"],["body","\n"],["body","就是当redus的session死亡，cahe中的session一定死亡,为了保证这一特点，cache中的session的存活时间应该设置为s级，设置为1s比较合适，并且存活时间固定不能刷新，不能随着访问而延长存活。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","11.spring_SpringWebMvc/spring-mvc.html"],["title","spring-mvc.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","SpringWebMVC"],["body","\n"],["body","Spring Web 模型-视图-控制（MVC）框架是围绕 DispatcherServlet 设计的"],["body","\n\n"],["body","DispatchServlet 收到 Http请求后，根据 HandlerMapping 来选择并且调用适当的控制器"],["body","\n"],["body","控制器接受请求，调用适当的service，service设置适当的模型数据，返回视图名到DispatchServlet"],["body","\n"],["body","DispatcherServlet 会从 ViewResolver 获取帮助，为请求检取定义视图"],["body","\n"],["body","一旦确定视图，DispatcherServlet 将把模型数据传递给视图"],["body","\n\n"],["body","HandlerMapping、Controller 和 ViewResolver 是 WebApplicationContext 的一部分"],["body","\n"],["headingLink","handlermapping映射配置"],["heading","HandlerMapping映射配置"],["body","\n"],["body","DispatchServlet配置在web.xml 中"],["body","\n"],["body","<servlet>\n      <servlet-name>HelloWeb</servlet-name>\n      <servlet-class>\n         org.springframework.web.servlet.DispatcherServlet\n      </servlet-class>\n      <load-on-startup>1</load-on-startup>\n</servlet>\n"],["body","\n"],["body","该框架将尝试加载位于该应用程序的 WebContent/WEB-INF 目录中文件名为 [servlet-name]-servlet.xml 的应用程序内容"],["body","\n"],["body","想要改变默认位置,不使用默认名,配置在web.xml中"],["body","\n"],["body","<context-param>\n   <param-name>contextConfigLocation</param-name>\n   <param-value>/WEB-INF/HelloWeb-servlet.xml</param-value>\n</context-param>\n<listener>\n   <listener-class>\n      org.springframework.web.context.ContextLoaderListener\n   </listener-class>\n</listener>\n"],["body","\n"],["body","HelloWeb-servlet.xml 文件的请求配置"],["body","\n"],["body","   <context:component-scan base-package=\"com.tutorialspoint\" />\n\n   <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n      <property name=\"prefix\" value=\"/WEB-INF/jsp/\" />\n      <property name=\"suffix\" value=\".jsp\" />\n   </bean>\n"],["body","\n"],["body","HelloWeb-servlet.xml 文件的一些要点："],["body","\n\n"],["body","用于创建 bean 定义，重新定义在全局范围内具有相同名称的任何已定义的 bean"],["body","\n"],["body","context:component-scan: 激活 Spring MVC 注释扫描功能，该功能允许使用注释，如 @Controller 和 @RequestMapping"],["body","\n"],["body","InternalResourceViewResolver :将使用定义的规则来解决视图名称"],["body","\n"],["body","按照上述定义的规则，一个名称为 hello 的逻辑视图将发送给位于 /WEB-INF/jsp/hello.jsp 中实现的视图"],["body","\n\n"],["headingLink","定义控制器"],["heading","定义控制器"],["body","\n"],["body","@Controller 注释表明一个特定类是一个控制器的作用。"],["body","\n"],["body","@RequestMapping 注释用于映射 URL 到整个类或一个特定的处理方法。"],["body","\n"],["headingLink","创建-jsp-视图"],["heading","创建 JSP 视图"],["body","\n"],["body","Spring MVC 支持许多类型的视图"],["body","\n"],["body","包括 JSP、HTML、PDF、Excel 工作表、XML、Velocity 模板、XSLT、JSON、Atom 和 RSS 提要、JasperReports "],["body","\n"],["body","@ModelAttribute：解析表单变量"],["body","\n"],["body","重定向：return \"redirect:finalPage\";"],["body","\n"],["headingLink","web-静态页面"],["heading","Web 静态页面"],["body","\n"],["body","标签被用来映射静态页面"],["body","\n"],["body","<mvc:resources mapping=\"/pages/**\" location=\"/WEB-INF/pages/\" />"],["body","\n"],["headingLink","异常处理"],["heading","异常处理"],["body","\n"],["body","<bean class=\"org.springframework.web.servlet.handler.\n      SimpleMappingExceptionResolver\">\n   <property name=\"exceptionMappings\">\n      <props>\n         <prop key=\"com.tutorialspoint.SpringException\">\n            ExceptionPage\n         </prop>\n      </props>\n   </property>\n   <property name=\"defaultErrorView\" value=\"error\"/>\n</bean>\n\n"],["body","\n"],["body","${exception}  可以访问异常对象"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","11.spring_SpringWebMvc/内置四种filters.html"],["title","内置四种filters.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","The spring-web module 提供了以下 有用的 过滤器"],["body","\n\n"],["body","Form Data"],["body","\n"],["body","Forwarded Headers"],["body","\n"],["body","Shallow ETag"],["body","\n"],["body","CORS"],["body","\n\n"],["h1","Form Data"],["body","\n"],["body","Servlet API要求 ServletRequest.getParameter *（）方法来仅支持HTTP POST的表单字段访问。"],["body","\n"],["body","spring-web 模块 提供了 FormContentFilter  过滤器 去 拦截  content type 为 application/x-www-form-urlencoded 的 HTTP PUT, PATCH, and DELETE 请求"],["body","\n"],["body","将 ServletRequest 包装使得 ServletRequest.getParameter()* 可用于获取表单数据"],["body","\n"],["h1","Forwarded Headers"],["body","\n"],["body","一个请求可能会 经过多层代理，很难获取用户的真正IP"],["body","\n"],["body","RFC 7239 定义了 the Forwarded HTTP header ，代理服务器可以提供 原始 请求的信息"],["body","\n"],["body","还有非标准的 头，包括X-Forwarded-Host, X-Forwarded-Port, X-Forwarded-Proto, X-Forwarded-Ssl, and X-Forwarded-Prefix"],["body","\n"],["body","ForwardedHeaderFilter  是一个 Servlet Filter ，基于  Forwarded headers 改变 host, port, and scheme "],["body","\n"],["body","它必须位于 所有 过滤器的前面"],["body","\n"],["body","对于转发的标头，出于安全方面的考虑，因为应用程序无法知道标头是由代理添加的，还是由恶意客户端添加的"],["body","\n"],["body","这就是为什么代理 应该 在 信任边界处的  删除来自外部的不受信任的“转发”标头的原因。"],["body","\n"],["body","ForwardedHeaderFilter with removeOnly=true  会移除不受信任的 转发 头，"],["body","\n"],["body","为了支持 asynchronous requests ，此过滤器应映射为DispatcherType.ASYNC和DispatcherType.ERROR。"],["body","\n"],["body","如果使用 spring 框架的 AbstractAnnotationConfigDispatcherServletInitializer  ，所有 filters 自动注册 所有 dispatch types"],["body","\n"],["body","However if registering the filter via web.xml or in Spring Boot via a FilterRegistrationBean be sure to include DispatcherType.ASYNC and DispatcherType.ERROR in addition to DispatcherType.REQUEST."],["body","\n"],["h1","Shallow ETag"],["body","\n\n"],["body","\n"],["body","The ShallowEtagHeaderFilter filter creates a “shallow” ETag by caching the content written to the response and computing an MD5 hash from it. "],["body","\n"],["body","\n"],["body","\n"],["body","下一次请求，同样的计算 ，计算返回的值的 MD5 跟之前缓存的是否一样，则返回304"],["body","\n"],["body","\n"],["body","\n"],["body","这个策略节省 了网络带宽，但没有节省 CPU "],["body","\n"],["body","\n"],["body","\n"],["body","另外一种  策略基于  控制器 级别，可以避免计算 See HTTP Caching."],["body","\n"],["body","\n\n"],["body","这个 过滤器 有一个 writeWeakETag 参数  that configures the filter to write weak ETags similar to the following: W/\"02a2d595e6ed9a0b24f027f2b63b134d6\" (as defined in RFC 7232 Section 2.3)."],["body","\n"],["body","In order to support asynchronous requests this filter must be mapped with DispatcherType.ASYNC so that the filter can delay and successfully generate an ETag to the end of the last async dispatch. If using Spring Framework’s AbstractAnnotationConfigDispatcherServletInitializer (see Servlet Config) all filters are automatically registered for all dispatch types. However if registering the filter via web.xml or in Spring Boot via a FilterRegistrationBean be sure to include DispatcherType.ASYNC."],["body","\n"],["h1","CORS"],["body","\n"],["body","Spring MVC provides fine-grained support for CORS configuration through annotations on controllers. However, when used with Spring Security, we advise relying on the built-in CorsFilter that must be ordered ahead of Spring Security’s chain of filters."],["body","\n"],["body","See the sections on CORS and the CORS Filter for more details."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","11.spring_SpringWebMvc/mvcannotation-driven注解的作用.html"],["title","mvcannotation-driven注解的作用.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","<mvc:annotation-driven>"],["body","\n\n"],["body","\n"],["body","会自动注册 RequestMappingHandlerMapping 与 RequestMappingHandlerAdapter 两个Bean,这是Spring MVC为@Controller分发请求所必需的"],["body","\n"],["body","\n"],["body","\n"],["body","并且提供了数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持,@Valid支持"],["body","\n"],["body","\n"],["body","\n"],["body","读写XML的支持（JAXB）"],["body","\n"],["body","JAXB能够使用Jackson对JAXB注解的支持实现(jackson-module-jaxb-annotations)，既方便生成XML，也方便生成JSON，这样一来可以更好的标志可以转换为JSON对象的JAVA类。JAXB允许JAVA人员将JAVA类映射为XML表示方式，常用的注解包括：@XmlRootElement,@XmlElement等等。\n\n    JAXB（Java Architecture for XML Binding) 是一个业界的标准，是一项可以根据XML Schema产生Java类的技术。该过程中，JAXB也提供了将XML实例文档反向生成Java对象树的方法，并能将Java对象树的内容重新写到XML实例文档。从另一方面来讲，JAXB提供了快速而简便的方法将XML模式绑定到Java表示，从而使得Java开发者在Java应用程序中能方便地结合XML数据和处理函数。\n"],["body","\n"],["body","\n"],["body","\n"],["body","读写JSON的支持（默认Jackson）等功能。"],["body","\n"],["body","\n\n"],["body","使用该注解后的springmvc-config.xml:"],["body","\n"],["body","<!--  spring 可以自动去扫描 base-package下面的包或子包下面的Java文件，如果扫描到有Spring的相关注解的类，则把这些类注册为Spring的bean -->\n<!--设置配置方案 -->\n<context:component-scan base-package=\"org.fkit.controller\"/>\n<mvc:annotation-driven/>\n\n<!--使用默认的Servlet来响应静态文件-->\n\n<mvc:default-servlet-handler/>\n\n<!-- 视图解析器 -->\n<bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n<!-- 前缀 -->\n<property name=\"prefix\">\n<value>/WEB-INF/content/</value>\n</property>\n<!-- 后缀 -->\n<property name=\"suffix\">\n<value>.jsp</value>\n</property>\n</bean>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","11.spring_SpringWebMvc/springMVC返回后.html"],["title","springMVC返回后.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","springMVC返回后 所作的事情"],["body","\n"],["body","\tpublic void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer,\n\t\t\tObject... providedArgs) throws Exception {\n\n\t\tObject returnValue = invokeForRequest(webRequest, mavContainer, providedArgs);\n\t\tsetResponseStatus(webRequest);\n\n\t\tif (returnValue == null) {\n\t\t\tif (isRequestNotModified(webRequest) || getResponseStatus() != null || mavContainer.isRequestHandled()) {\n\t\t\t\tdisableContentCachingIfNecessary(webRequest);\n\t\t\t\tmavContainer.setRequestHandled(true);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\telse if (StringUtils.hasText(getResponseStatusReason())) {\n\t\t\tmavContainer.setRequestHandled(true);\n\t\t\treturn;\n\t\t}\n\n\t\tmavContainer.setRequestHandled(false);\n\t\tAssert.state(this.returnValueHandlers != null, \"No return value handlers\");\n\t\ttry {\n\t\t\tthis.returnValueHandlers.handleReturnValue(\n\t\t\t\t\treturnValue, getReturnValueType(returnValue), mavContainer, webRequest);\n\t\t}\n\t\tcatch (Exception ex) {\n\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\tlogger.trace(formatErrorForReturnValue(returnValue), ex);\n\t\t\t}\n\t\t\tthrow ex;\n\t\t}\n\t}\n"],["body","\n"],["body","springMVC内容协商"],["body","\n"],["body","protected <T> void writeWithMessageConverters(@Nullable T value, MethodParameter returnType,\n\t\t\tServletServerHttpRequest inputMessage, ServletServerHttpResponse outputMessage)\n\t\t\tthrows IOException, HttpMediaTypeNotAcceptableException, HttpMessageNotWritableException {\n\n\t\tObject body;\n\t\tClass<?> valueType;\n\t\tType targetType;\n\n\t\tif (value instanceof CharSequence) {\n\t\t\tbody = value.toString();\n\t\t\tvalueType = String.class;\n\t\t\ttargetType = String.class;\n\t\t}\n\t\telse {\n\t\t\tbody = value;\n\t\t\tvalueType = getReturnValueType(body, returnType);\n\t\t\ttargetType = GenericTypeResolver.resolveType(getGenericType(returnType), returnType.getContainingClass());\n\t\t}\n\n\t\tif (isResourceType(value, returnType)) {\n\t\t\toutputMessage.getHeaders().set(HttpHeaders.ACCEPT_RANGES, \"bytes\");\n\t\t\tif (value != null && inputMessage.getHeaders().getFirst(HttpHeaders.RANGE) != null &&\n\t\t\t\t\toutputMessage.getServletResponse().getStatus() == 200) {\n\t\t\t\tResource resource = (Resource) value;\n\t\t\t\ttry {\n\t\t\t\t\tList<HttpRange> httpRanges = inputMessage.getHeaders().getRange();\n\t\t\t\t\toutputMessage.getServletResponse().setStatus(HttpStatus.PARTIAL_CONTENT.value());\n\t\t\t\t\tbody = HttpRange.toResourceRegions(httpRanges, resource);\n\t\t\t\t\tvalueType = body.getClass();\n\t\t\t\t\ttargetType = RESOURCE_REGION_LIST_TYPE;\n\t\t\t\t}\n\t\t\t\tcatch (IllegalArgumentException ex) {\n\t\t\t\t\toutputMessage.getHeaders().set(HttpHeaders.CONTENT_RANGE, \"bytes */\" + resource.contentLength());\n\t\t\t\t\toutputMessage.getServletResponse().setStatus(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE.value());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tMediaType selectedMediaType = null;\n\t\tMediaType contentType = outputMessage.getHeaders().getContentType();\n\t\tboolean isContentTypePreset = contentType != null && contentType.isConcrete();\n\t\tif (isContentTypePreset) {\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Found 'Content-Type:\" + contentType + \"' in response\");\n\t\t\t}\n\t\t\tselectedMediaType = contentType;\n\t\t}\n\t\telse {\n\t\t\tHttpServletRequest request = inputMessage.getServletRequest();\n\t\t\tList<MediaType> acceptableTypes;\n\t\t\ttry {\n\t\t\t\tacceptableTypes = getAcceptableMediaTypes(request);\n\t\t\t}\n\t\t\tcatch (HttpMediaTypeNotAcceptableException ex) {\n\t\t\t\tint series = outputMessage.getServletResponse().getStatus() / 100;\n\t\t\t\tif (body == null || series == 4 || series == 5) {\n\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\tlogger.debug(\"Ignoring error response content (if any). \" + ex);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t\tList<MediaType> producibleTypes = getProducibleMediaTypes(request, valueType, targetType);\n\n\t\t\tif (body != null && producibleTypes.isEmpty()) {\n\t\t\t\tthrow new HttpMessageNotWritableException(\n\t\t\t\t\t\t\"No converter found for return value of type: \" + valueType);\n\t\t\t}\n\t\t\tList<MediaType> mediaTypesToUse = new ArrayList<>();\n\t\t\tfor (MediaType requestedType : acceptableTypes) {\n\t\t\t\tfor (MediaType producibleType : producibleTypes) {\n\t\t\t\t\tif (requestedType.isCompatibleWith(producibleType)) {\n\t\t\t\t\t\tmediaTypesToUse.add(getMostSpecificMediaType(requestedType, producibleType));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mediaTypesToUse.isEmpty()) {\n\t\t\t\tif (body != null) {\n\t\t\t\t\tthrow new HttpMediaTypeNotAcceptableException(producibleTypes);\n\t\t\t\t}\n\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\tlogger.debug(\"No match for \" + acceptableTypes + \", supported: \" + producibleTypes);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tMediaType.sortBySpecificityAndQuality(mediaTypesToUse);\n\n\t\t\tfor (MediaType mediaType : mediaTypesToUse) {\n\t\t\t\tif (mediaType.isConcrete()) {\n\t\t\t\t\tselectedMediaType = mediaType;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if (mediaType.isPresentIn(ALL_APPLICATION_MEDIA_TYPES)) {\n\t\t\t\t\tselectedMediaType = MediaType.APPLICATION_OCTET_STREAM;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Using '\" + selectedMediaType + \"', given \" +\n\t\t\t\t\t\tacceptableTypes + \" and supported \" + producibleTypes);\n\t\t\t}\n\t\t}\n\n\t\tif (selectedMediaType != null) {\n\t\t\tselectedMediaType = selectedMediaType.removeQualityValue();\n\t\t\tfor (HttpMessageConverter<?> converter : this.messageConverters) {\n\t\t\t\tGenericHttpMessageConverter genericConverter = (converter instanceof GenericHttpMessageConverter ?\n\t\t\t\t\t\t(GenericHttpMessageConverter<?>) converter : null);\n\t\t\t\tif (genericConverter != null ?\n\t\t\t\t\t\t((GenericHttpMessageConverter) converter).canWrite(targetType, valueType, selectedMediaType) :\n\t\t\t\t\t\tconverter.canWrite(valueType, selectedMediaType)) {\n\t\t\t\t\tbody = getAdvice().beforeBodyWrite(body, returnType, selectedMediaType,\n\t\t\t\t\t\t\t(Class<? extends HttpMessageConverter<?>>) converter.getClass(),\n\t\t\t\t\t\t\tinputMessage, outputMessage);\n\t\t\t\t\tif (body != null) {\n\t\t\t\t\t\tObject theBody = body;\n\t\t\t\t\t\tLogFormatUtils.traceDebug(logger, traceOn ->\n\t\t\t\t\t\t\t\t\"Writing [\" + LogFormatUtils.formatValue(theBody, !traceOn) + \"]\");\n\t\t\t\t\t\taddContentDispositionHeader(inputMessage, outputMessage);\n\t\t\t\t\t\tif (genericConverter != null) {\n\t\t\t\t\t\t\tgenericConverter.write(body, targetType, selectedMediaType, outputMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t((HttpMessageConverter) converter).write(body, selectedMediaType, outputMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\t\t\t\tlogger.debug(\"Nothing to write: null body\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (body != null) {\n\t\t\tSet<MediaType> producibleMediaTypes =\n\t\t\t\t\t(Set<MediaType>) inputMessage.getServletRequest()\n\t\t\t\t\t\t\t.getAttribute(HandlerMapping.PRODUCIBLE_MEDIA_TYPES_ATTRIBUTE);\n\n\t\t\tif (isContentTypePreset || !CollectionUtils.isEmpty(producibleMediaTypes)) {\n\t\t\t\tthrow new HttpMessageNotWritableException(\n\t\t\t\t\t\t\"No converter for [\" + valueType + \"] with preset Content-Type '\" + contentType + \"'\");\n\t\t\t}\n\t\t\tthrow new HttpMediaTypeNotAcceptableException(getSupportedMediaTypes(body.getClass()));\n\t\t}\n\t}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","11.spring_SpringWebMvc/springMVC自定义参数解析注解.html"],["title","springMVC自定义参数解析注解.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","自定义参数解析器"],["body","\n"],["headingLink","自定义注解"],["heading","自定义注解"],["body","\n"],["body","@Target(ElementType.PARAMETER)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface JsonParam {\n    String value();\n}\n"],["body","\n"],["headingLink","controller"],["heading","Controller"],["body","\n"],["body","@Controller\npublic class UserController {\n    @RequestMapping(\"/users/add\")\n    @ResponseBody\n    public Map<String, Object> addUser(Integer userid, @JsonParam(\"dept\") Dept userDept) {\n        Map<String, Object> data = new HashMap<>(2);\n        data.put(\"userId\", userid);\n        data.put(\"userDept\", userDept);\n        return data;\n    }\n}\n"],["body","\n"],["headingLink","自定义参数解析器-1"],["heading","自定义参数解析器"],["body","\n"],["body","public class JsonParamProvider implements HandlerMethodArgumentResolver {\n    /**\n     * 判断是否是需要我们解析的参数类型\n     */\n    @Override\n    public boolean supportsParameter(MethodParameter methodParameter) {\n        return methodParameter.hasParameterAnnotation(JsonParam.class);\n    }\n\n    /**\n     * 真正解析的方法\n     */\n    @Override\n    public Object resolveArgument(MethodParameter methodParameter, ModelAndViewContainer modelAndViewContainer, NativeWebRequest nativeWebRequest, WebDataBinderFactory webDataBinderFactory) throws Exception {\n        HttpServletRequest request = nativeWebRequest.getNativeRequest(HttpServletRequest.class);\n        Map<String, String[]> parameterMap = request.getParameterMap();\n\n        JsonParam jsonParam = methodParameter.getParameterAnnotation(JsonParam.class);\n        String paramName = jsonParam.value();\n        //注解没有给定参数名字，默认取参数类型的小写\n        if (StringUtils.isEmpty(paramName)) {\n            String parmTypeName = methodParameter.getParameterType().getSimpleName();\n            paramName = parmTypeName.substring(0, 1).toLowerCase() + parmTypeName.substring(1);\n        }\n\n        //从request中能拿到参数值\n        if (parameterMap.containsKey(paramName)) {\n            String paramVal = parameterMap.get(paramName)[0];\n            //解析json\n            ObjectMapper objectMapper = new ObjectMapper();\n            Dept dept = objectMapper.readValue(paramVal.getBytes(\"UTF-8\"), Dept.class);\n            return dept;\n        } else {\n            return new Dept();\n        }\n    }\n}\n"],["body","\n"],["h1","配置自定义参数解析器"],["body","\n"],["headingLink","xml方式"],["heading","XML方式"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\t<context:component-scan base-package=\"com.demo\" />\n\t\n\t<mvc:annotation-driven>\n\t\t<mvc:argument-resolvers>\n\t\t\t<bean class=\"com.demo.JsonParamProvider\"/>\n\t\t</mvc:argument-resolvers>\n\t</mvc:annotation-driven>\n</beans>  \n"],["body","\n"],["headingLink","注解方式配置"],["heading","注解方式配置"],["body","\n"],["headingLink","xml"],["heading","xml"],["body","\n"],["body","spring-mvc.xml内容\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n\t<context:component-scan base-package=\"com.demo\" />\n\t\n\t<!--不能添加该标签，否则注解类不生效-->\n\t<!--<mvc:annotation-driven/>-->\n</beans>\n"],["body","\n"],["headingLink","java配置"],["heading","Java配置"],["body","\n"],["body","@Configuration\n@EnableWebMvc\npublic class MyConfiguration extends WebMvcConfigurerAdapter {\n    @Override\n    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {\n        argumentResolvers.add(new JsonParamProvider());\n        }\n}\n"],["body","\n"],["headingLink","springboot配置"],["heading","springBoot配置"],["body","\n"],["body","@Configuration\npublic class MyConfiguration extends WebMvcConfigurationSupport {\n    @Override\n    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {\n        argumentResolvers.add(new JsonParamProvider());\n    }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","11.spring_SpringWebMvc/springMvcController配置.html"],["title","springMvcController配置.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","spring配置文件写法"],["body","\n"],["body","<context:component-scan base-package=\"com.lzzcms\" >\n<context:exclude-filter type=\"annotation\" expression=\"org.springframework.stereotype.Controller\"></context:exclude-filter>\n</context:component-scan>\n"],["body","\n"],["h1","springMVC配置文件写法"],["body","\n"],["body","<context:component-scan base-package=\"com.lzzcms\" use-default-filters=\"false\">\n<context:include-filter type=\"annotation\"  expression=\"org.springframework.stereotype.Controller\"></context:include-filter>\n</context:component-scan>\n"],["body","\n"],["body","默认情况下 context:component-scan  会扫描 一下注解"],["body","\n"],["body","@Component, @Repository, @Service,\n@Controller, @RestController, @ControllerAdvice, and @Configuration\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","11.spring_SpringWebMvc/functional-endpoints.html"],["title","functional-endpoints.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","简介"],["body","\n\n"],["body","\n"],["body","Spring Web MVC包含WebMvc.fn，这是一个轻量级的函数编程模型，其中的函数用于路由和处理请求，而接口则是为不变性而设计的。\n它是基于注解的编程模型的替代方案，但可以在同一DispatcherServlet上运行。"],["body","\n"],["body","\n"],["body","\n"],["body","在WebMvc.fn中，HTTP请求由HandlerFunction处理：该函数接受ServerRequest并返回ServerResponse。\n请求和响应对象都具有不可变的约定，这些约定为JDK 8提供了对HTTP请求和响应的友好访问。 \nHandlerFunction 等效于基于注解的编程模型中@RequestMapping方法的主体。"],["body","\n"],["body","\n"],["body","\n"],["body","即将到来的请求通过RouterFunction路由到处理程序函数：此函数接受ServerRequest并返回可选的HandlerFunction（即Optional ）。\n当路由器功能匹配时，返回处理程序功能。\n否则为空的Optional。 \nRouterFunction等效于@RequestMapping批注，但主要区别在于路由器功能不仅提供数据，还提供行为。"],["body","\n"],["body","\n\n"],["body","RouterFunctions.route（）提供了一个路由器构建器，可简化路由器的创建过程，如以下示例所示："],["body","\n"],["body","import static org.springframework.http.MediaType.APPLICATION_JSON;\nimport static org.springframework.web.servlet.function.RequestPredicates.*;\nimport static org.springframework.web.servlet.function.RouterFunctions.route;\n\nPersonRepository repository = ...\nPersonHandler handler = new PersonHandler(repository);\n\nRouterFunction<ServerResponse> route = route()\n    .GET(\"/person/{id}\", accept(APPLICATION_JSON), handler::getPerson)\n    .GET(\"/person\", accept(APPLICATION_JSON), handler::listPeople)\n    .POST(\"/person\", handler::createPerson)\n    .build();\n\n\npublic class PersonHandler {\n\n    // ...\n\n    public ServerResponse listPeople(ServerRequest request) {\n        // ...\n    }\n\n    public ServerResponse createPerson(ServerRequest request) {\n        // ...\n    }\n\n    public ServerResponse getPerson(ServerRequest request) {\n        // ...\n    }\n}\n"],["body","\n"],["h1","HandlerFunction"],["body","\n"],["body","ServerRequest和ServerResponse是不可变的接口，它们提供JDK 8友好的HTTP请求和响应访问，包括请求头，正文，方法和状态代码。"],["body","\n"],["headingLink","serverrequest"],["heading","ServerRequest"],["body","\n"],["body","ServerRequest提供对HTTP方法，URI，标头和查询参数的访问，而通过body方法提供对 请求体的访问。"],["body","\n"],["body","下面的示例将请求正文提取为String："],["body","\n"],["body","String string = request.body(String.class);\n"],["body","\n"],["body","以下示例将主体提取到List ，其中Person对象从序列化形式（例如JSON或XML）解码："],["body","\n"],["body","List<Person> people = request.body(new ParameterizedTypeReference<List<Person>>() {});\n"],["body","\n"],["body","访问请求参数"],["body","\n"],["body","MultiValueMap<String, String> params = request.params();\n"],["body","\n"],["headingLink","serverresponse"],["heading","ServerResponse"],["body","\n"],["body","ServerResponse提供对HTTP响应的访问，并且由于它是不可变的，因此您可以使用构建方法来创建它。\n您可以使用构建器来设置响应状态，添加响应标题或提供正文。\n以下示例使用JSON内容创建200（确定）响应："],["body","\n"],["body","Person person = ...\nServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(person);\n"],["body","\n"],["body","下面的示例演示如何构建一个具有Location标头且没有正文的201（已创建）响应："],["body","\n"],["body","URI location = ...\nServerResponse.created(location).build();\n"],["body","\n"],["body","您还可以将异步结果用作主体，形式为CompletableFuture，Publisher或ReactiveAdapterRegistry支持的任何其他类型。\n例如："],["body","\n"],["body","Mono<Person> person = webClient.get().retrieve().bodyToMono(Person.class);\nServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(person);\n"],["body","\n"],["body","如果不仅正文，而且状态或标头都基于异步类型，则可以在ServerResponse上使用静态异步方法，该方法接受CompletableFuture ，Publisher 或ReactiveAdapterRegistry支持的任何其他异步类型"],["body","\n"],["body","Mono<ServerResponse> asyncResponse = webClient.get().retrieve().bodyToMono(Person.class)\n  .map(p -> ServerResponse.ok().header(\"Name\", p.name()).body(p));\nServerResponse.async(asyncResponse);\n"],["body","\n"],["body","可以通过ServerResponse上的静态sse方法提供服务器发送的事件。Server-Sent Events \n该方法提供的构建器允许您将字符串或其他对象作为JSON发送。例如："],["body","\n"],["body","public RouterFunction<ServerResponse> sse() {\n    return route(GET(\"/sse\"), request -> ServerResponse.sse(sseBuilder -> {\n                // Save the sseBuilder object somewhere..\n            }));\n}\n\n// In some other thread, sending a String\nsseBuilder.send(\"Hello world\");\n\n// Or an object, which will be transformed into JSON\nPerson person = ...\nsseBuilder.send(person);\n\n// Customize the event by using the other methods\nsseBuilder.id(\"42\")\n        .event(\"sse event\")\n        .data(person);\n\n// and done at some point\nsseBuilder.complete();\n"],["body","\n"],["headingLink","handler-classes"],["heading","Handler Classes"],["body","\n"],["body","我们可以将处理程序函数编写为lambda，如以下示例所示："],["body","\n"],["body","HandlerFunction<ServerResponse> helloWorld =\n  request -> ServerResponse.ok().body(\"Hello World\");\n"],["body","\n"],["body","这很方便，但是在应用程序中我们需要多个功能，并且多个内联lambda可能会变得凌乱。因此，将相关的处理程序功能分组到一个处理程序类中很有用，该类的作用与基于 注解的应用程序中的@Controller相似。\n例如，以下类公开了反应型Person存储库："],["body","\n"],["body","import static org.springframework.http.MediaType.APPLICATION_JSON;\nimport static org.springframework.web.reactive.function.server.ServerResponse.ok;\n\npublic class PersonHandler {\n\n    private final PersonRepository repository;\n\n    public PersonHandler(PersonRepository repository) {\n        this.repository = repository;\n    }\n\n    public ServerResponse listPeople(ServerRequest request) { \n        List<Person> people = repository.allPeople();\n        return ok().contentType(APPLICATION_JSON).body(people);\n    }\n\n    public ServerResponse createPerson(ServerRequest request) throws Exception { \n        Person person = request.body(Person.class);\n        repository.savePerson(person);\n        return ok().build();\n    }\n\n    public ServerResponse getPerson(ServerRequest request) { \n        int personId = Integer.parseInt(request.pathVariable(\"id\"));\n        Person person = repository.getPerson(personId);\n        if (person != null) {\n            return ok().contentType(APPLICATION_JSON).body(person);\n        }\n        else {\n            return ServerResponse.notFound().build();\n        }\n    }\n\n}\n"],["body","\n"],["headingLink","validation"],["heading","Validation"],["body","\n"],["body","功能端点可以使用Spring的验证工具将验证应用于请求正文。例如，给定Person的自定义Spring Validator实现："],["body","\n"],["body","public class PersonHandler {\n\n    private final Validator validator = new PersonValidator(); \n\n    // ...\n\n    public ServerResponse createPerson(ServerRequest request) {\n        Person person = request.body(Person.class);\n        validate(person); \n        repository.savePerson(person);\n        return ok().build();\n    }\n\n    private void validate(Person person) {\n        Errors errors = new BeanPropertyBindingResult(person, \"person\");\n        validator.validate(person, errors);\n        if (errors.hasErrors()) {\n            throw new ServerWebInputException(errors.toString()); \n        }\n    }\n}\n"],["body","\n"],["h1","RouterFunction"],["body","\n\n"],["body","\n"],["body","路由器功能用于将请求路由到相应的HandlerFunction。"],["body","\n"],["body","\n"],["body","\n"],["body","通常，您不是自己编写路由器功能，而是使用RouterFunctions实用工具类上的方法创建一个。 \nRouterFunctions.route（）（无参数）为您提供了一个流畅的生成器来创建路由器功能，而RouterFunctions.route（RequestPredicate，HandlerFunction）提供了直接创建路由器的方法。"],["body","\n"],["body","\n"],["body","\n"],["body","除了基于HTTP方法的映射外，路由构建器还提供了一种在映射到请求时引入其他谓词的方法。\n对于每个HTTP方法，都有一个以RequestPredicate作为参数的重载变体，尽管可以表达其他约束。"],["body","\n"],["body","\n"],["body","\n"],["body","您可以编写自己的RequestPredicate，但是RequestPredicates实用程序类根据请求路径，HTTP方法，内容类型等提供常用的实现。\n以下示例使用请求谓词基于Accept头创建约束："],["body","\n"],["body","\n\n"],["body","RouterFunction<ServerResponse> route = RouterFunctions.route()\n    .GET(\"/hello-world\", accept(MediaType.TEXT_PLAIN),\n        request -> ServerResponse.ok().body(\"Hello World\")).build();\n"],["body","\n"],["headingLink","谓词"],["heading","谓词"],["body","\n"],["body","您可以使用以下命令将多个请求谓词组合在一起"],["body","\n\n"],["body","RequestPredicate.and(RequestPredicate) — both must match."],["body","\n"],["body","RequestPredicate.or(RequestPredicate) — either can match."],["body","\n\n"],["body","RequestPredicates中的许多谓词都是组成的。\n例如，RequestPredicates.GET（String）由RequestPredicates.method（HttpMethod）和RequestPredicates.path（String）组成。\n上面显示的示例还使用了两个请求谓词，因为构建器在内部使用RequestPredicates.GET并将其与接受谓词组合在一起"],["body","\n\n"],["body","路由器功能按顺序评估：如果第一个路由不匹配，则评估第二个路由，依此类推。\n因此，在通用路由之前声明更具体的路由是有意义的。\n请注意，此行为不同于基于注释的编程模型，在该模型中，将自动选择“最特定”的控制器方法。"],["body","\n"],["body","使用路由器功能生成器时，所有定义的路由都组成一个RouterFunction，从build（）返回。\n还有其他方法可以将多个路由器功能组合在一起：\n\n"],["body","add(RouterFunction) on the RouterFunctions.route() builder"],["body","\n"],["body","RouterFunction.and(RouterFunction)"],["body","\n"],["body","RouterFunction.andRoute(RequestPredicate, HandlerFunction) — shortcut for RouterFunction.and() with nested RouterFunctions.route()."],["body","\n\n"],["body","\n\n"],["body","import static org.springframework.http.MediaType.APPLICATION_JSON;\nimport static org.springframework.web.servlet.function.RequestPredicates.*;\n\nPersonRepository repository = ...\nPersonHandler handler = new PersonHandler(repository);\n\nRouterFunction<ServerResponse> otherRoute = ...\n\nRouterFunction<ServerResponse> route = route()\n    .GET(\"/person/{id}\", accept(APPLICATION_JSON), handler::getPerson) \n    .GET(\"/person\", accept(APPLICATION_JSON), handler::listPeople) \n    .POST(\"/person\", handler::createPerson) \n    .add(otherRoute) \n    .build();\n"],["body","\n"],["headingLink","nested-routes"],["heading","Nested Routes"],["body","\n\n"],["body","一组路由器功能通常具有共享谓词，例如共享路径。"],["body","\n"],["body","在上面的示例中，共享谓词将是与/ person匹配的路径谓词，由三个路由使用。"],["body","\n"],["body","使用注释时，您可以通过使用映射到/ person的类型级别@RequestMapping注释来删除此重复项。"],["body","\n"],["body","在WebMvc.fn中，可以通过路由器功能构建器上的path方法共享路径谓词。例如，可以通过使用嵌套路由以以下方式改进上面示例的最后几行："],["body","\n\n"],["body","RouterFunction<ServerResponse> route = route()\n    .path(\"/person\", builder -> builder \n        .GET(\"/{id}\", accept(APPLICATION_JSON), handler::getPerson)\n        .GET(accept(APPLICATION_JSON), handler::listPeople)\n        .POST(\"/person\", handler::createPerson))\n    .build();\n"],["body","\n"],["body","RouterFunction<ServerResponse> route = route()\n    .path(\"/person\", b1 -> b1\n        .nest(accept(APPLICATION_JSON), b2 -> b2\n            .GET(\"/{id}\", handler::getPerson)\n            .GET(handler::listPeople))\n        .POST(\"/person\", handler::createPerson))\n    .build();\n"],["body","\n"],["h1","Running a Server"],["body","\n"],["body","通常，您可以通过MVC Config在基于DispatcherHandler的设置中运行路由器功能，该配置使用Spring配置来声明处理请求所需的组件。 \nMVC Java配置声明以下基础结构组件以支持 functional endpoints"],["body","\n\n"],["body","RouterFunctionMapping:在spring配置中 检测到一个或多个 RouterFunction<?> beans ,通过 RouterFunction.andOther,组合 并将请求路由到组成的“RouterFunction”。"],["body","\n"],["body","HandlerFunctionAdapter:  lets DispatcherHandler invoke a HandlerFunction that was mapped to a request."],["body","\n\n"],["body","前面的组件使 functional endpoints 适合于DispatcherServlet请求处理生命周期，并且（可能）与带注释的控制器并排运行。\n这也是Spring Boot Web启动程序如何启用 functional endpoints 的方式。"],["body","\n"],["body","以下示例显示了WebFlux Java配置："],["body","\n"],["body","@Configuration\n@EnableMvc\npublic class WebConfig implements WebMvcConfigurer {\n\n    @Bean\n    public RouterFunction<?> routerFunctionA() {\n        // ...\n    }\n\n    @Bean\n    public RouterFunction<?> routerFunctionB() {\n        // ...\n    }\n\n    // ...\n\n    @Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        // configure message conversion...\n    }\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        // configure CORS...\n    }\n\n    @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        // configure view resolution for HTML rendering...\n    }\n}\n"],["body","\n"],["h1","Filtering Handler Functions"],["body","\n\n"],["body","\n"],["body","您可以使用路由功能构建器上的before，after或filter方法来过滤处理程序函数。"],["body","\n"],["body","\n"],["body","\n"],["body","使用注解，可以通过使用@ ControllerAdvice，ServletFilter或同时使用两者来实现类似的功能。"],["body","\n"],["body","\n"],["body","\n"],["body","该过滤器将应用于构建器构建的所有路由。 这意味着在嵌套路由中定义的过滤器不适用于“顶级”路由。例如，考虑以下示例："],["body","\n"],["body","\n\n"],["body","RouterFunction<ServerResponse> route = route()\n    .path(\"/person\", b1 -> b1\n        .nest(accept(APPLICATION_JSON), b2 -> b2\n            .GET(\"/{id}\", handler::getPerson)\n            .GET(handler::listPeople)\n            .before(request -> ServerRequest.from(request) \n                .header(\"X-RequestHeader\", \"Value\")\n                .build()))\n        .POST(\"/person\", handler::createPerson))\n    .after((request, response) -> logResponse(response)) \n    .build();\n"],["body","\n"],["body","The before filter that adds a custom request header is only applied to the two GET routes."],["body","\n"],["body","The after filter that logs the response is applied to all routes, including the nested ones."],["body","\n"],["body","SecurityManager securityManager = ...\n\nRouterFunction<ServerResponse> route = route()\n    .path(\"/person\", b1 -> b1\n        .nest(accept(APPLICATION_JSON), b2 -> b2\n            .GET(\"/{id}\", handler::getPerson)\n            .GET(handler::listPeople))\n        .POST(\"/person\", handler::createPerson))\n    .filter((request, next) -> {\n        if (securityManager.allowAccessTo(request.path())) {\n            return next.handle(request);\n        }\n        else {\n            return ServerResponse.status(UNAUTHORIZED).build();\n        }\n    })\n    .build();\n"],["body","\n"],["body","除了在路由器功能构建器上使用filter方法之外，还可以通过RouterFunction.filter（HandlerFilterFunction）将过滤器应用于现有路由器功能。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","11.spring_SpringWebMvc/springMVC路径映射.html"],["title","springMVC路径映射.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","springMVC 有着多种不同风格的 路径映射方式"],["body","\n"],["headingLink","ant风格的映射"],["heading","Ant风格的映射"],["body","\n"],["body","@RequestMapping(\"/a?/aaa\") //?代表一个字符\n@RequestMapping(\"/a*/aaa\") //*代表多个字符\n@RequestMapping(\"/**/aaa\") //**代表多个路径\n"],["body","\n"],["headingLink","占位符映射风格"],["heading","占位符映射风格"],["body","\n"],["body","@RequestMapping(\"/show/{name}\")\npublic ModelAndView test(@PathVariable(\"name\")String name){\n\n}\n"],["body","\n"],["h1","请求限制"],["body","\n"],["headingLink","限制请求的方法"],["heading","限制请求的方法"],["body","\n"],["body","略"],["body","\n"],["headingLink","限定请求参数的映射"],["heading","限定请求参数的映射"],["body","\n"],["body","@RequestMapping(value=””,params=””)\n\n①params=”id”\n\n//请求参数中必须有id，如果没有id会报错。\n\n//与之相反的是：如果params=”!id”表示请求参数中不能包含id，如果有id会报错。\n\n②params=”id=1”\n\n//请求参数中id必须为1，如果不为1会报错。\n\n//与之相反的是：如果params=”id!=1”表示请求参数中id必须不为1，如果等于1会报错。\n\n③params={“name”, ”age”}\n\n//请求参数中必须有name，age参数，当然有多余的其它参数也行，但这两个必须要有。\n"],["body","\n"],["h1","混合注解"],["body","\n"],["body","@GetMapping\n@PostMapping\n@PostMapping、@PutMapping、@DeleteMapping\n"],["body","\n"],["h1","获取Cookie"],["body","\n"],["body","@CookieValue\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","11.spring_SpringWebMvc/URI-Links.html"],["title","URI-Links.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","简介"],["body","\n"],["body","本部分介绍了Spring框架中可用于URI的各种选项。"],["body","\n"],["h1","UriComponents"],["body","\n"],["body","UriComponentsBuilder有助于从具有变量的URI模板中构建URI，如以下示例所示："],["body","\n"],["body","UriComponents uriComponents = UriComponentsBuilder\n        .fromUriString(\"https://example.com/hotels/{hotel}\")  \n        .queryParam(\"q\", \"{q}\")  \n        .encode() \n        .build(); \n\nURI uri = uriComponents.expand(\"Westin\", \"123\").toUri();  \n"],["body","\n"],["body","可以将前面的示例合并为一个链，并通过buildAndExpand进行缩短，如以下示例所示："],["body","\n"],["body","URI uri = UriComponentsBuilder\n        .fromUriString(\"https://example.com/hotels/{hotel}\")\n        .queryParam(\"q\", \"{q}\")\n        .encode()\n        .buildAndExpand(\"Westin\", \"123\")\n        .toUri();\n"],["body","\n"],["body","您可以通过直接转到URI（这意味着编码）来进一步缩短它，如以下示例所示："],["body","\n"],["body","URI uri = UriComponentsBuilder\n        .fromUriString(\"https://example.com/hotels/{hotel}\")\n        .queryParam(\"q\", \"{q}\")\n        .build(\"Westin\", \"123\");\n"],["body","\n"],["body","您可以使用完整的URI模板进一步缩短它，如以下示例所示："],["body","\n"],["body","URI uri = UriComponentsBuilder\n        .fromUriString(\"https://example.com/hotels/{hotel}?q={q}\")\n        .build(\"Westin\", \"123\");\n"],["body","\n"],["h1","UriBuilder"],["body","\n\n"],["body","UriComponentsBuilder实现UriBuilder。"],["body","\n"],["body","您可以依次使用UriBuilderFactory创建UriBuilder。 "],["body","\n"],["body","UriBuilderFactory和UriBuilder一起提供了一种可插入的机制，"],["body","\n"],["body","可以基于共享配置（例如基本URL，编码首选项和其他详细信息）从URI模板构建URI。"],["body","\n"],["body","您可以使用UriBuilderFactory配置RestTemplate和WebClient以自定义URI的准备。 "],["body","\n"],["body","DefaultUriBuilderFactory是UriBuilderFactory的默认实现，该实现在内部使用UriComponentsBuilder并公开共享的配置选项。\n以下示例显示如何配置RestTemplate："],["body","\n\n"],["body","// import org.springframework.web.util.DefaultUriBuilderFactory.EncodingMode;\n\nString baseUrl = \"https://example.org\";\nDefaultUriBuilderFactory factory = new DefaultUriBuilderFactory(baseUrl);\nfactory.setEncodingMode(EncodingMode.TEMPLATE_AND_VALUES);\n\nRestTemplate restTemplate = new RestTemplate();\nrestTemplate.setUriTemplateHandler(factory);\n"],["body","\n"],["body","The following example configures a WebClient:"],["body","\n"],["body","// import org.springframework.web.util.DefaultUriBuilderFactory.EncodingMode;\n\nString baseUrl = \"https://example.org\";\nDefaultUriBuilderFactory factory = new DefaultUriBuilderFactory(baseUrl);\nfactory.setEncodingMode(EncodingMode.TEMPLATE_AND_VALUES);\n\nWebClient client = WebClient.builder().uriBuilderFactory(factory).build();\n"],["body","\n"],["body","此外，您也可以直接使用DefaultUriBuilderFactory。\n它类似于使用UriComponentsBuilder，但不是静态工厂方法，它是一个包含配置和首选项的实际实例，如以下示例所示："],["body","\n"],["body","String baseUrl = \"https://example.com\";\nDefaultUriBuilderFactory uriBuilderFactory = new DefaultUriBuilderFactory(baseUrl);\n\nURI uri = uriBuilderFactory.uriString(\"/hotels/{hotel}\")\n        .queryParam(\"q\", \"{q}\")\n        .build(\"Westin\", \"123\");\n"],["body","\n"],["h1","URI Encoding"],["body","\n"],["body","UriComponentsBuilder exposes encoding options at two levels:"],["body","\n\n"],["body","UriComponentsBuilder#encode(): Pre-encodes the URI template first and then strictly encodes URI variables when expanded."],["body","\n"],["body","UriComponents#encode(): Encodes URI components after URI variables are expanded."],["body","\n\n"],["body","这两个选项都使用转义的八位字节替换非ASCII和非法字符。\n但是，第一个选项还会替换出现在URI变量中的具有保留含义的字符。"],["body","\n"],["body","思考 “;\" 这在路径上是合法的，但具有保留的含义。\n第一个选项代替“;”  URI变量中带有“％3B”，但URI模板中没有。 相比之下，第二个选项永远不会替换“;”，因为它是路径中的合法字符。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","11.spring_SpringWebMvc/基于注解的控制器.html"],["title","基于注解的控制器.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","简介"],["body","\n"],["body","SpringMVC提供了 基于注解的编程模型  @Controller and @RestController，用来 请求映射，请求解析，异常处理等等"],["body","\n"],["h1","申明"],["body","\n"],["body","You can define controller beans by using a standard Spring bean definition in the. "],["body","\n"],["body","可以使用 标准 spring bean定义  方式  在 Servlet’s WebApplicationContext中   定义 Controller bean "],["body","\n"],["body","@Controller 能自动检测，"],["body","\n"],["body","To enable auto-detection of such @Controller beans, "],["body","\n"],["body","为了能自动 检测 Controller bean ，通过java配置自动扫描"],["body","\n"],["body","Java"],["body","\n"],["body","@Configuration\n@ComponentScan(\"org.example.web\")\npublic class WebConfig {\n\n    // ...\n}\n"],["body","\n"],["body","等价的 XML配置"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:p=\"http://www.springframework.org/schema/p\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:component-scan base-package=\"org.example.web\"/>\n\n    <!-- ... -->\n\n</beans>\n"],["body","\n"],["headingLink","aop-proxies"],["heading","AOP Proxies"],["body","\n"],["body","在某些时候，你可能需要 对 Controller 使用 Aop 代理"],["body","\n"],["body","例如 @Transactional ，在这种情况，最好使用基于 类的 代理"],["body","\n"],["body","For example, with <tx:annotation-driven/> you can change to <tx:annotation-driven proxy-target-class=\"true\"/>, and with @EnableTransactionManagement you can change to @EnableTransactionManagement(proxyTargetClass = true)."],["body","\n"],["h1","Request Mapping"],["body","\n"],["body","There are also HTTP method specific shortcut variants of @RequestMapping:"],["body","\n\n"],["body","@GetMapping"],["body","\n"],["body","@PostMapping"],["body","\n"],["body","@PutMapping"],["body","\n"],["body","@DeleteMapping"],["body","\n"],["body","@PatchMapping"],["body","\n\n"],["body","The shortcuts are Custom Annotations that are provided because, arguably, most controller methods should be mapped to a specific HTTP method versus using @RequestMapping, which, by default, matches to all HTTP methods. At the same, a @RequestMapping is still needed at the class level to express shared mappings."],["body","\n"],["headingLink","uri-patterns"],["heading","URI patterns"],["body","\n"],["body","@RequestMapping 使用以下两种方式是进行映射"],["body","\n\n"],["body","PathPattern — 直接路径匹配"],["body","\n"],["body","AntPathMatcher — 基于Ant风格"],["body","\n\n"],["body","Some example patterns:"],["body","\n\n"],["body","\"/resources/ima?e.png\" - match one character in a path segment"],["body","\n"],["body","\"/resources/*.png\" - match zero or more characters in a path segment"],["body","\n"],["body","\"/resources/**\" - match multiple path segments"],["body","\n"],["body","\"/projects/{project}/versions\" - match a path segment and capture it as a variable URL捕获"],["body","\n"],["body","\"/projects/{project:[a-z]+}/versions\" - match and capture a variable with a regex"],["body","\n\n"],["body","Captured URI variables can be accessed with @PathVariable. "],["body","\n"],["body","@GetMapping(\"/owners/{ownerId}/pets/{petId}\")\npublic Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {\n    // ...\n}\n"],["body","\n"],["body","@Controller\n@RequestMapping(\"/owners/{ownerId}\")\npublic class OwnerController {\n\n    @GetMapping(\"/pets/{petId}\")\n    public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {\n        // ...\n    }\n}\n"],["body","\n"],["body","基于正则的匹配与捕获"],["body","\n"],["body","@GetMapping(\"/{name:[a-z-]+}-{version:\\\\d\\\\.\\\\d\\\\.\\\\d}{ext:\\\\.[a-z]+}\")\npublic void handle(@PathVariable String name, @PathVariable String version, @PathVariable String ext) {\n    // ...\n}\n"],["body","\n"],["headingLink","pattern-comparison"],["heading","Pattern Comparison"],["body","\n"],["body","多个pattern匹配时，会选择最佳匹配"],["body","\n"],["body","This is done with one of the following depending on whether parsed `PathPattern’s are enabled for use or not:"],["body","\n\n"],["body","PathPattern.SPECIFICITY_COMPARATOR"],["body","\n"],["body","AntPathMatcher.getPatternComparator(String path)"],["body","\n\n"],["body","计分规则"],["body","\n\n"],["body","\n"],["body","URI 变量 计分为1，单 wildcard 计分为1，双wildcard 计分为2"],["body","\n"],["body","\n"],["body","\n"],["body","分数相等，越长的优先，长度分数一致，更多的 URI变量 优先于 通配符"],["body","\n"],["body","\n"],["body","\n"],["body","默认映射模式（/ **）被排除在评分之外，并且始终排在最后。"],["body","\n"],["body","\n"],["body","\n"],["body","另外，前缀模式（例如/ public / ** 比 /public/ 更具体 ）被认为比其他没有双通配符的模式更具体。"],["body","\n"],["body","\n\n"],["headingLink","suffix-match后缀匹配"],["heading","Suffix Match后缀匹配"],["body","\n"],["body","从 Spring5.3，默认Spring MVC 不再支持 后缀 匹配模式， 例如 /person  -> /person.*"],["body","\n"],["body","浏览器过去发送难以一致解释的Accept标头时，以这种方式使用文件扩展名是必要的。"],["body","\n"],["body","随着时间的流逝，文件扩展名的使用已被证明有各种问题"],["body","\n"],["body","To completely disable the use of path extensions in versions prior to 5.3, set the following:"],["body","\n\n"],["body","useSuffixPatternMatching(false), see PathMatchConfigurer"],["body","\n"],["body","favorPathExtension(false), see ContentNegotiationConfigurer"],["body","\n\n"],["body","If you must use file extensions, consider restricting them to a list of explicitly registered extensions through the mediaTypes property of ContentNegotiationConfigurer."],["body","\n"],["headingLink","suffix-match-and-rfd"],["heading","Suffix Match and RFD"],["body","\n"],["body","A reflected file download (RFD) attack is similar to XSS in that it relies on request input (for example, a query parameter and a URI variable) being reflected in the response. However, instead of inserting JavaScript into HTML, an RFD attack relies on the browser switching to perform a download and treating the response as an executable script when double-clicked later."],["body","\n"],["body","In Spring MVC, @ResponseBody and ResponseEntity methods are at risk, because they can render different content types, which clients can request through URL path extensions. Disabling suffix pattern matching and using path extensions for content negotiation lower the risk but are not sufficient to prevent RFD attacks."],["body","\n"],["body","To prevent RFD attacks, prior to rendering the response body, Spring MVC adds a Content-Disposition:inline;filename=f.txt header to suggest a fixed and safe download file. This is done only if the URL path contains a file extension that is neither allowed as safe nor explicitly registered for content negotiation. However, it can potentially have side effects when URLs are typed directly into a browser."],["body","\n"],["body","Many common path extensions are allowed as safe by default. Applications with custom HttpMessageConverter implementations can explicitly register file extensions for content negotiation to avoid having a Content-Disposition header added for those extensions. See Content Types."],["body","\n"],["body","See CVE-2015-5211 for additional recommendations related to RFD."],["body","\n"],["headingLink","consumable-media-types"],["heading","Consumable Media Types"],["body","\n"],["body","@PostMapping(path = \"/pets\", consumes = \"application/json\") \npublic void addPet(@RequestBody Pet pet) {\n    // ...\n}\n"],["body","\n"],["body","可以取反"],["body","\n"],["body","@PostMapping(path = \"/pets\", consumes = \"!application/json\") \npublic void addPet(@RequestBody Pet pet) {\n    // ...\n}\n"],["body","\n"],["headingLink","producible-media-types"],["heading","Producible Media Types"],["body","\n"],["body","@GetMapping(path = \"/pets/{petId}\", produces = \"application/json\") \n@ResponseBody\npublic Pet getPet(@PathVariable String petId) {\n    // ...\n}\n"],["body","\n"],["headingLink","parameters-headers"],["heading","Parameters, headers"],["body","\n"],["body","You can narrow request mappings based on request parameter conditions. You can test for the presence of a request parameter (myParam), for the absence of one (!myParam), or for a specific value (myParam=myValue). The following example shows how to test for a specific value:"],["body","\n"],["body","@GetMapping(path = \"/pets/{petId}\", params = \"myParam=myValue\") \npublic void findPet(@PathVariable String petId) {\n    // ...\n}\n"],["body","\n"],["headingLink","handler-methods"],["heading","Handler Methods"],["body","\n"],["body","方法可以设置的参数"],["body","\n"],["body","Controller method argument"],["body","Description"],["body","\n"],["body","WebRequest, NativeWebRequest"],["body","Generic access to request parameters and request and session attributes, without direct use of the Servlet API."],["body","\n"],["body","javax.servlet.ServletRequest, javax.servlet.ServletResponse"],["body","Choose any specific request or response type — for example, ServletRequest, HttpServletRequest, or Spring’s MultipartRequest, MultipartHttpServletRequest."],["body","\n"],["body","javax.servlet.http.HttpSession"],["body","Enforces the presence of a session. As a consequence, such an argument is never null. Note that session access is not thread-safe. Consider setting the RequestMappingHandlerAdapter instance’s synchronizeOnSession flag to true if multiple requests are allowed to concurrently access a session."],["body","\n"],["body","javax.servlet.http.PushBuilder"],["body","Servlet 4.0 push builder API for programmatic HTTP/2 resource pushes. Note that, per the Servlet specification, the injected PushBuilder instance can be null if the client does not support that HTTP/2 feature."],["body","\n"],["body","java.security.Principal"],["body","Currently authenticated user — possibly a specific Principal implementation class if known."],["body","\n"],["body","HttpMethod"],["body","The HTTP method of the request."],["body","\n"],["body","java.util.Locale"],["body","The current request locale, determined by the most specific LocaleResolver available (in effect, the configured LocaleResolver or LocaleContextResolver)."],["body","\n"],["body","java.util.TimeZone + java.time.ZoneId"],["body","The time zone associated with the current request, as determined by a LocaleContextResolver."],["body","\n"],["body","java.io.InputStream, java.io.Reader"],["body","For access to the raw request body as exposed by the Servlet API."],["body","\n"],["body","java.io.OutputStream, java.io.Writer"],["body","For access to the raw response body as exposed by the Servlet API."],["body","\n"],["body","@PathVariable"],["body","For access to URI template variables. See URI patterns."],["body","\n"],["body","@MatrixVariable"],["body","For access to name-value pairs in URI path segments. See Matrix Variables."],["body","\n"],["body","@RequestParam"],["body","For access to the Servlet request parameters, including multipart files. Parameter values are converted to the declared method argument type. See @RequestParam as well as Multipart.Note that use of @RequestParam is optional for simple parameter values. See “Any other argument”, at the end of this table."],["body","\n"],["body","@RequestHeader"],["body","For access to request headers. Header values are converted to the declared method argument type. See @RequestHeader."],["body","\n"],["body","@CookieValue"],["body","For access to cookies. Cookies values are converted to the declared method argument type. See @CookieValue."],["body","\n"],["body","@RequestBody"],["body","For access to the HTTP request body. Body content is converted to the declared method argument type by using HttpMessageConverter implementations. See @RequestBody."],["body","\n"],["body","HttpEntity<B>"],["body","For access to request headers and body. The body is converted with an HttpMessageConverter. See HttpEntity."],["body","\n"],["body","@RequestPart"],["body","For access to a part in a multipart/form-data request, converting the part’s body with an HttpMessageConverter. See Multipart."],["body","\n"],["body","java.util.Map, org.springframework.ui.Model, org.springframework.ui.ModelMap"],["body","For access to the model that is used in HTML controllers and exposed to templates as part of view rendering."],["body","\n"],["body","RedirectAttributes"],["body","Specify attributes to use in case of a redirect (that is, to be appended to the query string) and flash attributes to be stored temporarily until the request after redirect. See Redirect Attributes and Flash Attributes."],["body","\n"],["body","@ModelAttribute"],["body","For access to an existing attribute in the model (instantiated if not present) with data binding and validation applied. See @ModelAttribute as well as Model and DataBinder.Note that use of @ModelAttribute is optional (for example, to set its attributes). See “Any other argument” at the end of this table."],["body","\n"],["body","Errors, BindingResult"],["body","For access to errors from validation and data binding for a command object (that is, a @ModelAttribute argument) or errors from the validation of a @RequestBody or @RequestPart arguments. You must declare an Errors, or BindingResult argument immediately after the validated method argument."],["body","\n"],["body","SessionStatus + class-level @SessionAttributes"],["body","For marking form processing complete, which triggers cleanup of session attributes declared through a class-level @SessionAttributes annotation. See @SessionAttributes for more details."],["body","\n"],["body","UriComponentsBuilder"],["body","For preparing a URL relative to the current request’s host, port, scheme, context path, and the literal part of the servlet mapping. See URI Links."],["body","\n"],["body","@SessionAttribute"],["body","For access to any session attribute, in contrast to model attributes stored in the session as a result of a class-level @SessionAttributes declaration. See @SessionAttribute for more details."],["body","\n"],["body","@RequestAttribute"],["body","For access to request attributes. See @RequestAttribute for more details."],["body","\n"],["body","Any other argument"],["body","If a method argument is not matched to any of the earlier values in this table and it is a simple type (as determined by BeanUtils#isSimpleProperty, it is a resolved as a @RequestParam. Otherwise, it is resolved as a @ModelAttribute."],["body","\n\n\n"],["headingLink","返回值"],["heading","返回值"],["body","\n"],["body","Controller method return value"],["body","Description"],["body","\n"],["body","@ResponseBody"],["body","The return value is converted through HttpMessageConverter implementations and written to the response. See @ResponseBody."],["body","\n"],["body","HttpEntity<B>, ResponseEntity<B>"],["body","The return value that specifies the full response (including HTTP headers and body) is to be converted through HttpMessageConverter implementations and written to the response. See ResponseEntity."],["body","\n"],["body","HttpHeaders"],["body","For returning a response with headers and no body."],["body","\n"],["body","String"],["body","A view name to be resolved with ViewResolver implementations and used together with the implicit model — determined through command objects and @ModelAttribute methods. The handler method can also programmatically enrich the model by declaring a Model argument (see Explicit Registrations)."],["body","\n"],["body","View"],["body","A View instance to use for rendering together with the implicit model — determined through command objects and @ModelAttribute methods. The handler method can also programmatically enrich the model by declaring a Model argument (see Explicit Registrations)."],["body","\n"],["body","java.util.Map, org.springframework.ui.Model"],["body","Attributes to be added to the implicit model, with the view name implicitly determined through a RequestToViewNameTranslator."],["body","\n"],["body","@ModelAttribute"],["body","An attribute to be added to the model, with the view name implicitly determined through a RequestToViewNameTranslator.Note that @ModelAttribute is optional. See \"Any other return value\" at the end of this table."],["body","\n"],["body","ModelAndView object"],["body","The view and model attributes to use and, optionally, a response status."],["body","\n"],["body","void"],["body","A method with a void return type (or null return value) is considered to have fully handled the response if it also has a ServletResponse, an OutputStream argument, or an @ResponseStatus annotation. The same is also true if the controller has made a positive ETag or lastModified timestamp check (see Controllers for details).If none of the above is true, a void return type can also indicate “no response body” for REST controllers or a default view name selection for HTML controllers."],["body","\n"],["body","DeferredResult<V>"],["body","Produce any of the preceding return values asynchronously from any thread — for example, as a result of some event or callback. See Asynchronous Requests and DeferredResult."],["body","\n"],["body","Callable<V>"],["body","Produce any of the above return values asynchronously in a Spring MVC-managed thread. See Asynchronous Requests and Callable."],["body","\n"],["body","ListenableFuture<V>, java.util.concurrent.CompletionStage<V>, java.util.concurrent.CompletableFuture<V>"],["body","Alternative to DeferredResult, as a convenience (for example, when an underlying service returns one of those)."],["body","\n"],["body","ResponseBodyEmitter, SseEmitter"],["body","Emit a stream of objects asynchronously to be written to the response with HttpMessageConverter implementations. Also supported as the body of a ResponseEntity. See Asynchronous Requests and HTTP Streaming."],["body","\n"],["body","StreamingResponseBody"],["body","Write to the response OutputStream asynchronously. Also supported as the body of a ResponseEntity. See Asynchronous Requests and HTTP Streaming."],["body","\n"],["body","Reactive types — Reactor, RxJava, or others through ReactiveAdapterRegistry"],["body","Alternative to DeferredResult with multi-value streams (for example, Flux, Observable) collected to a List.For streaming scenarios (for example, text/event-stream, application/json+stream), SseEmitter and ResponseBodyEmitter are used instead, where ServletOutputStream blocking I/O is performed on a Spring MVC-managed thread and back pressure is applied against the completion of each write.See Asynchronous Requests and Reactive Types."],["body","\n"],["body","Any other return value"],["body","Any return value that does not match any of the earlier values in this table and that is a String or void is treated as a view name (default view name selection through RequestToViewNameTranslator applies), provided it is not a simple type, as determined by BeanUtils#isSimpleProperty. Values that are simple types remain unresolved."],["body","\n\n\n"],["headingLink","type-conversion"],["heading","Type Conversion"],["body","\n\n"],["body","\n"],["body","Some annotated controller method arguments that represent String-based request input (such as @RequestParam, @RequestHeader, @PathVariable, @MatrixVariable, and @CookieValue) can require type conversion if the argument is declared as something other than String."],["body","\n"],["body","\n"],["body","\n"],["body","For such cases, type conversion is automatically applied based on the configured converters. By default, simple types (int, long, Date, and others) are supported. You can customize type conversion through a WebDataBinder (see DataBinder) or by registering Formatters with the FormattingConversionService. See Spring Field Formatting."],["body","\n"],["body","\n"],["body","\n"],["body","类型转换中的一个实际问题是处理空的String源值。This can be the case for Long, UUID, and other target types.如果要允许注入“ null”，请在参数注释上使用“ required”标志，或将参数声明为“ @Nullable”。"],["body","\n"],["body","\n\n"],["body","Null值处理"],["body","\n\n"],["body","\n"],["body","从5.3开始，即使在类型转换之后，也将强制使用非null参数，如果您的处理程序方法也打算接受null值，请在相应的@RequestParam等注释中将您的参数声明为@Nullable或将其标记为required = false。这是最佳实践，也是针对5.3升级中遇到的回归问题的推荐解决方案。"],["body","\n"],["body","\n"],["body","\n"],["body","the resulting MissingPathVariableException in the case of a required @PathVariable. "],["body","\n"],["body","\n"],["body","\n"],["body","转换后的空值将被视为空的原始值，因此将抛出相应的“ Missing…Exception”变体。"],["body","\n"],["body","\n\n"],["headingLink","matrix-variables"],["heading","Matrix Variables"],["body","\n"],["body","RFC 3986 讨论了路径段中的 名称/值对. 在Spring MVC中，我们根据Tim Berners-Lee的“旧帖子”将其称为“矩阵变量”，但它们也可以是被称为URI路径参数。"],["body","\n"],["body","矩阵变量可以出现在任何路径段中，每个变量用分号分隔，多个值用逗号分隔，也可以通过重复的变量名称指定多个值"],["body","\n"],["body","/cars;color=red,green;year=2012  color=red;color=green;color=blue"],["body","\n"],["body","如果期望URL包含矩阵变量，则控制器方法的请求映射  必须使用URI变量来屏蔽该变量内容，并确保可以成功地匹配请求，而与矩阵变量的顺序和状态无关。\n以下示例使用矩阵变量："],["body","\n"],["body","// GET /pets/42;q=11;r=22\n\n@GetMapping(\"/pets/{petId}\")\npublic void findPet(@PathVariable String petId, @MatrixVariable int q) {\n\n    // petId == 42\n    // q == 11\n}\n"],["body","\n"],["body","鉴于所有路径段都可能包含矩阵变量，因此有时您可能需要消除矩阵变量应位于哪个路径变量的歧义。下面的示例演示了如何做到这一点："],["body","\n"],["body","// GET /owners/42;q=11/pets/21;q=22, 手动指定路径变量\n\n@GetMapping(\"/owners/{ownerId}/pets/{petId}\")\npublic void findPet(\n        @MatrixVariable(name=\"q\", pathVar=\"ownerId\") int q1,\n        @MatrixVariable(name=\"q\", pathVar=\"petId\") int q2) {\n\n    // q1 == 11\n    // q2 == 22\n}\n"],["body","\n"],["body","矩阵变量可以 被定义为可选，并且可以指定默认值"],["body","\n"],["body","// GET /pets/42\n\n@GetMapping(\"/pets/{petId}\")\npublic void findPet(@MatrixVariable(required=false, defaultValue=\"1\") int q) {\n\n    // q == 1\n}\n"],["body","\n"],["body","获取所有矩阵变量"],["body","\n"],["body","// GET /owners/42;q=11;r=12/pets/21;q=22;s=23\n\n@GetMapping(\"/owners/{ownerId}/pets/{petId}\")\npublic void findPet(\n        @MatrixVariable MultiValueMap<String, String> matrixVars,\n        @MatrixVariable(pathVar=\"petId\") MultiValueMap<String, String> petMatrixVars) {\n\n    // matrixVars: [\"q\" : [11,22], \"r\" : 12, \"s\" : 23]\n    // petMatrixVars: [\"q\" : 22, \"s\" : 23]\n}\n"],["body","\n"],["body","Note that you need to enable the use of matrix variables. "],["body","\n"],["body","请注意，您需要启用矩阵变量的使用。在MVCJava配置中，设置 UrlPathHelper ，参数为 removeSemicolonContent=false"],["body","\n"],["body","XML配置  <mvc:annotation-driven enable-matrix-variables=\"true\"/>."],["body","\n"],["headingLink","requestparam"],["heading","@RequestParam"],["body","\n"],["body","绑定请求参数"],["body","\n"],["body","您可以使用@RequestParam注解将Servlet请求参数（即查询参数或表单数据）绑定到控制器中的方法参数"],["body","\n"],["body","@Controller\n@RequestMapping(\"/pets\")\npublic class EditPetForm {\n\n    // ...\n\n    @GetMapping\n    public String setupForm(@RequestParam(\"petId\") int petId, Model model) { \n        Pet pet = this.clinic.loadPet(petId);\n        model.addAttribute(\"pet\", pet);\n        return \"petForm\";\n    }\n\n    // ...\n\n}\n"],["body","\n"],["body","申明该注解的参数 不能为空，可以设置 required flag为 false 或者 申明为java.util.Optional "],["body","\n"],["body","将参数类型声明为数组或列表，可以为同一参数名称解析多个参数值。"],["body","\n"],["body","当将@RequestParam注解 声明为 Map 或 MultiValueMap 时，在注解中未指定参数名称时，则将为每个给定参数名称 填充请求参数值"],["body","\n"],["body","注意，使用@RequestParam是可选的（例如，设置其属性）。\n默认情况下，任何简单值类型的参数（由BeanUtils＃isSimpleProperty） 决定，并且未由其他任何参数解析器解析，则将其视为用@RequestParam注释。"],["body","\n"],["headingLink","requestheader"],["heading","@RequestHeader"],["body","\n"],["body","You can use the @RequestHeader annotation to bind a request header to a method argument in a controller."],["body","\n"],["body","Consider the following request, with headers:"],["body","\n"],["body","Host                    localhost:8080\nAccept                  text/html,application/xhtml+xml,application/xml;q=0.9\nAccept-Language         fr,en-gb;q=0.7,en;q=0.3\nAccept-Encoding         gzip,deflate\nAccept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7\nKeep-Alive              300\n"],["body","\n"],["body","The following example gets the value of the Accept-Encoding and Keep-Alive headers:"],["body","\n"],["body","@GetMapping(\"/demo\")\npublic void handle(\n        @RequestHeader(\"Accept-Encoding\") String encoding, \n        @RequestHeader(\"Keep-Alive\") long keepAlive) { \n    //...\n}\n"],["body","\n"],["body","当在Map ，MultiValueMap 或HttpHeaders参数上使用@RequestHeader 注解时，将使用所有标头值填充映射。"],["body","\n"],["body","将逗号分隔的字符串转换为数组或字符串集合或类型转换系统已知的其他类型。是内置支持的，例如 @RequestHeader(\"Accept\") 可以是 String[],List[]"],["body","\n"],["headingLink","cookievalue"],["heading","@CookieValue"],["body","\n"],["body","@GetMapping(\"/demo\")\npublic void handle(@CookieValue(\"JSESSIONID\") String cookie) { \n    //...\n}\n"],["body","\n"],["headingLink","modelattribute"],["heading","@ModelAttribute"],["body","\n"],["body","您可以在方法参数上使用@ModelAttribute注解，以从模型访问属性，或将其实例化（如果不存在）。 \nmodel属性还覆盖了   名称与字段名称匹配的HTTP Servlet请求参数中的值。 这称为数据绑定，"],["body","\n"],["body","它使您不必处理解析和转换单个查询参数和表单字段的工作。\n以下示例显示了如何执行此操作："],["body","\n"],["body","@PostMapping(\"/owners/{ownerId}/pets/{petId}/edit\")\npublic String processSubmit(@ModelAttribute Pet pet) { } \n"],["body","\n"],["body","The Pet instance above is resolved as follows:"],["body","\n\n"],["body","From the model if already added by using Model. 首先尝试从模型中取"],["body","\n"],["body","From the HTTP session by using @SessionAttributes. 从Session中取"],["body","\n"],["body","From a URI path variable passed through a Converter (see the next example). 从Http 参数中取"],["body","\n"],["body","From the invocation of a default constructor.  调用默认构造函数实例化 "],["body","\n"],["body","从调用具有与Servlet请求参数匹配的参数的“主要构造函数”开始。\n参数名称是通过JavaBeans @ConstructorProperties或字节码中  运行时保留的参数名称确定的。"],["body","\n\n"],["body","另一种替代方法是将“ Converter ”与URI路径变量约定结合使用。\n在以下示例中，模型属性名称“ account”与URI路径变量“ account”匹配，并且通过将“ String”帐号传递给已注册的“ Converter ”来加载“ Account”。 "],["body","\n"],["body","@PutMapping(\"/accounts/{account}\")\npublic String save(@ModelAttribute(\"account\") Account account) {\n    // ...\n}\n"],["body","\n"],["body","The WebDataBinder class  匹配 请求参数名与 目标对象的字段名。匹配的名称对象在应用 类型转换之后 会被填充，有必要时  see Validation.see DataBinder."],["body","\n"],["body","数据绑定可能导致错误。默认情况下，引发BindException。但是，要检查控制器方法中的此类错误，可以在@ModelAttribute旁边立即添加BindingResult参数，如以下示例所示："],["body","\n"],["body","@PostMapping(\"/owners/{ownerId}/pets/{petId}/edit\")\npublic String processSubmit(@ModelAttribute(\"pet\") Pet pet, BindingResult result) { \n    if (result.hasErrors()) {\n        return \"petForm\";\n    }\n    // ...\n}\n"],["body","\n"],["body","在某些情况下，您可能希望访问没有数据绑定的模型属性。对于这种情况，可以将模型注入控制器并直接访问它，或者设置@ModelAttribute（binding = false），如以下示例所示："],["body","\n"],["body","@ModelAttribute\npublic AccountForm setUpForm() {\n    return new AccountForm();\n}\n\n@ModelAttribute\npublic Account findAccount(@PathVariable String accountId) {\n    return accountRepository.findOne(accountId);\n}\n\n@PostMapping(\"update\")\npublic String update(@Valid AccountForm form, BindingResult result,\n        @ModelAttribute(binding=false) Account account) { \n    // ...\n}\n"],["body","\n"],["body","您可以在数据绑定之后通过添加javax.validation.Valid注解 或Spring的@Validated注解 自动应用校验 (Bean Validation and Spring validation)."],["body","\n"],["body","@PostMapping(\"/owners/{ownerId}/pets/{petId}/edit\")\npublic String processSubmit(@Valid @ModelAttribute(\"pet\") Pet pet, BindingResult result) { \n    if (result.hasErrors()) {\n        return \"petForm\";\n    }\n    // ...\n}\n"],["body","\n"],["body","注意，使用@ModelAttribute是可选的（例如，设置其属性）,"],["body","\n"],["body","默认情况下，任何不是简单值类型的参数（由BeanUtils＃isSimpleProperty）并且未由其他任何参数解析器解析，就如同使用@ModelAttribute注释一样。"],["body","\n"],["headingLink","sessionattributes"],["heading","@SessionAttributes"],["body","\n"],["body","@SessionAttributes用于在请求之间的HTTP Servlet会话中存储模型属性。"],["body","\n"],["body","它是类型级别的注释，用于声明特定控制器使用的会话属性。"],["body","\n"],["body","这通常列出  应该透明地存储在会话中以供后续访问请求的模型属性的名称或模型属性的类型。"],["body","\n"],["body","@Controller\n@SessionAttributes(\"pet\") \npublic class EditPetForm {\n    // ...\n}\n"],["body","\n"],["body","在第一个请求中，将名称为“ pet”的模型属性添加到模型时，该属性会自动提升为HTTP Servlet会话并保存在该会话中。\n它会一直保留在那里，直到另一个控制器方法使用一个SessionStatus方法参数来清除存储空间为止，如以下示例所示："],["body","\n"],["body","@Controller\n@SessionAttributes(\"pet\")  //存储 pet在session中\npublic class EditPetForm {\n\n    // ...\n\n    @PostMapping(\"/pets/{id}\")\n    public String handle(Pet pet, BindingResult errors, SessionStatus status) {\n        if (errors.hasErrors) {\n            // ...\n        }\n            status.setComplete(); // 清除  session中的 pet value\n            // ...\n        }\n    }\n}\n"],["body","\n"],["headingLink","sessionattribute"],["heading","@SessionAttribute"],["body","\n"],["body","如果您需要访问    全局管理（例如，在控制器外部（例如，通过过滤器））管理  且可能存在或不存在的预先存在的会话属性，则可以在方法参数上使用@SessionAttribute批注，如以下示例所示："],["body","\n"],["body","@RequestMapping(\"/\")\npublic String handle(@SessionAttribute User user) { \n    // ...\n}\n"],["body","\n"],["body","Using a @SessionAttribute annotation."],["body","\n"],["body","For use cases that require adding or removing session attributes, consider injecting org.springframework.web.context.request.WebRequest or javax.servlet.http.HttpSession into the controller method."],["body","\n"],["body","对于需要添加或删除会话属性的用例，请考虑将org.springframework.web.context.request.WebRequest或javax.servlet.http.HttpSession注入到控制器方法中。"],["body","\n"],["body","为了将模型属性作为控制器工作流的一部分临时存储在会话中，请考虑使用 @SessionAttributes as described in @SessionAttributes."],["body","\n"],["headingLink","requestattribute"],["heading","@RequestAttribute"],["body","\n"],["body","Similar to @SessionAttribute, you can use the @RequestAttribute annotations to access pre-existing request attributes created earlier (for example, by a Servlet Filter or HandlerInterceptor):"],["body","\n"],["body","与@ SessionAttribute类似，您可以使用@RequestAttribute 注解 来访问先前创建的请求属性（例如，由ServletFilter或HandlerInterceptor创建）："],["body","\n"],["body","@GetMapping(\"/\")\npublic String handle(@RequestAttribute Client client) { \n    // ...\n}\n"],["body","\n"],["headingLink","redirect-attributes"],["heading","Redirect Attributes."],["body","\n"],["body","默认情况下，所有模型属性均被视为在重定向URL中作为URI模板变量公开。在其余属性中，那些属于原始类型或原始类型的集合或数组的属性会自动附加为查询参数。"],["body","\n"],["body","如果专门为重定向准备了模型实例，将原始类型属性作为查询参数附加可能是理想的结果。\n但是，在带注解的控制器中，模型可以包含为渲染目的添加的其他属性（例如，下拉字段值）。\n为了避免此类属性出现在URL中，@RequestMapping方法可以声明类型为RedirectAttributes的参数，并使用它来指定确切的属性以供RedirectView使用。\n如果该方法确实重定向，则使用RedirectAttributes的内容。\n否则，将使用模型的内容。"],["body","\n"],["body","“RequestMappingHandlerAdapter”提供了一个名为“ ignoreDefaultModelOnRedirect”的标志，您可以使用该标志指示如果控制器方法重定向，则绝不要使用默认“ Model”的内容。相反，控制器方法应声明一个类型为RedirectAttributes的属性，或者如果没有声明，则不应将任何属性传递给RedirectView。 \nMVC命名空间和MVC Java配置都将此标志设置为“ false”，以保持向后兼容性。\n但是，对于新应用程序，我们建议将其设置为“ true”。"],["body","\n"],["body","请注意，展开重定向URL时，当前请求中的URI模板变量会自动变为可用，并且您无需通过“模型”或“ RedirectAttributes”显式添加它们。"],["body","\n"],["body","@PostMapping(\"/files/{path}\")\npublic String upload(...) {\n    // ...\n    return \"redirect:files/{path}\";\n}\n"],["body","\n"],["body","将数据传递到重定向目标的另一种方法是使用闪存属性。与其他重定向属性不同，Flash属性保存在HTTP会话中（因此不会出现在URL中）。 See Flash Attributes for more information."],["body","\n"],["headingLink","flash-attributes"],["heading","Flash Attributes"],["body","\n"],["body","Flash属性为一个请求 提供了 向另一种请求传递属性的 存储方式。重定向时最常需要此操作，例如Post-Redirect-Get模式。 Flash属性在重定向之前（通常在会话中）被临时保存，以便在重定向之后可供请求使用，并立即被删除。"],["body","\n"],["body","Spring MVC有两个主要抽象来支持Flash属性。 FlashMap用于保存Flash属性，而FlashMapManager用于存储，检索和管理FlashMap实例。"],["body","\n"],["body","Flash属性支持始终处于“打开”状态，无需显式启用。"],["body","\n"],["body","在每个请求上，都有一个“输入”“ FlashMap”，其属性是从前一个请求（如果有）传递过来的；“输出”“ FlashMap”，其属性是为后续请求保存的。"],["body","\n"],["body","可以通过RequestContextUtils中的静态方法从Spring MVC中的任何位置访问这两个FlashMap实例。"],["body","\n"],["body","带注释的控制器通常不需要直接与FlashMap一起使用。\n相反，@ RequestMapping方法可以接受RedirectAttributes类型的参数，并使用它为重定向方案添加Flash属性。\n通过“ RedirectAttributes”添加的Flash属性会自动传播到“输出” FlashMap。\n同样，重定向后，来自“输入”“ FlashMap”的属性会自动添加到提供目标URL的控制器的“模型”中"],["body","\n"],["body","Matching requests to flash attributes"],["body","\n"],["body","Flash属性的概念存在于许多其他Web框架中，并已证明有时会遇到并发问题。\n这是因为根据定义，闪存属性将存储到下一个请求。\n但是，“下一个”请求可能不是预期的接收者，而是另一个异步请求（例如，轮询或资源请求），在这种情况下，过早删除闪存属性。"],["body","\n"],["body","为了减少此类问题的可能性，“ RedirectView”会自动使用目标重定向URL的路径和查询参数对“ FlashMap”实例进行“标记”。\n反过来，默认的FlashMapManager在查找“输入” FlashMap时会将信息与传入请求匹配。"],["body","\n"],["body","这不能完全消除并发问题的可能性，但是可以通过重定向URL中已经可用的信息大大减少并发问题。\n因此，我们建议您主要将Flash属性用于重定向方案。"],["body","\n"],["headingLink","multipart"],["heading","Multipart"],["body","\n"],["body","@Controller\npublic class FileUploadController {\n\n    @PostMapping(\"/form\")\n    public String handleFormUpload(@RequestParam(\"name\") String name,\n            @RequestParam(\"file\") MultipartFile file) {\n\n        if (!file.isEmpty()) {\n            byte[] bytes = file.getBytes();\n            // store the bytes somewhere\n            return \"redirect:uploadSuccess\";\n        }\n        return \"redirect:uploadFailure\";\n    }\n}\n"],["body","\n"],["body","将参数类型声明为List 允许解析相同参数名称的多个文件。\n如果将@RequestParam批注声明为Map 或MultiValueMap ，但未在批注中指定参数名称，则将使用每个给定参数名称的多部分文件填充该映射。"],["body","\n"],["body","\n"],["body","使用Servlet 3.0多部分解析时，您还可以将Javax.servlet.http.Part声明为方法参数或集合值类型，而不是Spring的MultipartFile。"],["body","\n"],["body","\n"],["body","您还可以将多部件内容用作数据绑定到  command object. 的一部分，例如表单字段，"],["body","\n"],["body","class MyForm {\n\n    private String name;\n\n    private MultipartFile file;\n\n    // ...\n}\n\n@Controller\npublic class FileUploadController {\n\n    @PostMapping(\"/form\")\n    public String handleFormUpload(MyForm form, BindingResult errors) {\n        if (!form.getFile().isEmpty()) {\n            byte[] bytes = form.getFile().getBytes();\n            // store the bytes somewhere\n            return \"redirect:uploadSuccess\";\n        }\n        return \"redirect:uploadFailure\";\n    }\n}\n"],["body","\n"],["body","在RESTful服务方案中，也可以从非浏览器客户端提交多部分请求。 以下示例显示了带有JSON的文件："],["body","\n"],["body","POST /someUrl\nContent-Type: multipart/mixed\n\n--edt7Tfrdusa7r3lNQc79vXuhIIMlatb7PQg7Vp\nContent-Disposition: form-data; name=\"meta-data\"\nContent-Type: application/json; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\n{\n    \"name\": \"value\"\n}\n--edt7Tfrdusa7r3lNQc79vXuhIIMlatb7PQg7Vp\nContent-Disposition: form-data; name=\"file-data\"; filename=\"file.properties\"\nContent-Type: text/xml\nContent-Transfer-Encoding: 8bit\n... File Data ...\n"],["body","\n"],["body","您可以使用@RequestParam作为字符串访问“元数据”部分，但您可能希望将其从JSON反序列化（类似于“ @RequestBody”）。\n在使用  HttpMessageConverter 将其转换后，使用@RequestPart注解来访问多部件"],["body","\n"],["body","@PostMapping(\"/\")\npublic String handle(@RequestPart(\"meta-data\") MetaData metadata,\n        @RequestPart(\"file-data\") MultipartFile file) {\n    // ...\n}\n"],["body","\n"],["body","您可以将@RequestPart与javax.validation.Valid结合使用，也可以使用Spring的@Validated注释，这两种注释都会导致应用标准Bean验证。\n默认情况下，验证错误会导致“ MethodArgumentNotValidException”，并将其转换为400（BAD_REQUEST）响应。\n或者，您可以通过Errors或BindingResult参数在控制器内本地处理验证错误，如以下示例所示："],["body","\n"],["body","@PostMapping(\"/\")\npublic String handle(@Valid @RequestPart(\"meta-data\") MetaData metadata,\n        BindingResult result) {\n    // ...\n}\n"],["body","\n"],["headingLink","requestbody"],["heading","@RequestBody"],["body","\n"],["body","您可以使用@RequestBody 注解 使请求正文通过HttpMessageConverter读取并反序列化为Object。 以下示例使用@RequestBody参数："],["body","\n"],["body","@PostMapping(\"/accounts\")\npublic void handle(@RequestBody Account account) {\n    // ...\n}\n\n"],["body","\n"],["body","You can use the Message Converters option of the MVC Config to configure or customize message conversion."],["body","\n"],["body","您可以结合使用@RequestBody和Javax.validation.Valid或Spring的@Validated注释，这两种注释都会导致应用标准Bean验证。\n默认情况下，验证错误会导致“ MethodArgumentNotValidException”，并将其转换为400（BAD_REQUEST）响应。\n或者，您可以通过Errors或BindingResult参数在控制器内本地处理验证错误，如以下示例所示："],["body","\n"],["body","@PostMapping(\"/accounts\")\npublic void handle(@Valid @RequestBody Account account, BindingResult result) {\n    // ...\n}\n"],["body","\n"],["headingLink","httpentity"],["heading","HttpEntity"],["body","\n"],["body","HttpEntity或多或少与使用@RequestBody相同，但它基于公开请求标头和正文的容器对象。以下清单显示了一个示例："],["body","\n"],["body","@PostMapping(\"/accounts\")\npublic void handle(HttpEntity<Account> entity) {\n    // ...\n}\n"],["body","\n"],["headingLink","responsebody"],["heading","@ResponseBody"],["body","\n"],["body","您可以在方法上使用@ResponseBody批注，以通过HttpMessageConverter将返回序列化为响应主体。\n以下清单显示了一个示例："],["body","\n"],["body","@GetMapping(\"/accounts/{id}\")\n@ResponseBody\npublic Account handle() {\n    // ...\n}\n"],["body","\n"],["body","@ResponseBody is also supported at the class level, in which case it is inherited by all controller methods. This is the effect of @RestController, which is nothing more than a meta-annotation marked with @Controller and @ResponseBody."],["body","\n"],["body","在类级别还支持@ResponseBody，在这种情况下，它由所有控制器方法继承。这就是@RestController的效果，它只不过是带有@Controller和@ResponseBody标记的元注释。"],["body","\n"],["body","@ResponseBody与 响应式类型一起使用 See Asynchronous Requests and Reactive Types for more details."],["body","\n"],["body","You can use the Message Converters option of the MVC Config to configure or customize message conversion."],["body","\n"],["body","You can combine @ResponseBody methods with JSON serialization views. See Jackson JSON for details."],["body","\n"],["headingLink","responseentity"],["heading","ResponseEntity"],["body","\n"],["body","ResponseEntity is like @ResponseBody but with status and headers. For example:"],["body","\n"],["body","@GetMapping(\"/something\")\npublic ResponseEntity<String> handle() {\n    String body = ... ;\n    String etag = ... ;\n    return ResponseEntity.ok().eTag(etag).build(body);\n}\n"],["body","\n"],["body","Spring MVC supports using a single value reactive type to produce the ResponseEntity asynchronously, and/or single and multi-value reactive types for the body."],["body","\n"],["headingLink","jackson-json"],["heading","Jackson JSON"],["body","\n"],["body","Spring offers support for the Jackson JSON library."],["body","\n"],["body","Spring MVC为Jackson的序列化视图提供了内置支持，该视图仅可呈现Object中所有字段的一部分。\n要将其与@ResponseBody或ResponseEntity控制器方法一起使用，可以使用Jackson的@JsonView批注来激活序列化视图类，如以下示例所示："],["body","\n"],["body","@RestController\npublic class UserController {\n\n    @GetMapping(\"/user\")\n    @JsonView(User.WithoutPasswordView.class)\n    public User getUser() {\n        return new User(\"eric\", \"7!jd#h23\");\n    }\n}\n\npublic class User {\n\n    public interface WithoutPasswordView {};\n    public interface WithPasswordView extends WithoutPasswordView {};\n\n    private String username;\n    private String password;\n\n    public User() {\n    }\n\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n\n    @JsonView(WithoutPasswordView.class)\n    public String getUsername() {\n        return this.username;\n    }\n\n    @JsonView(WithPasswordView.class)\n    public String getPassword() {\n        return this.password;\n    }\n}\n"],["body","\n"],["body","@JsonView允许一组视图类，但是每个控制器方法只能指定一个。\n如果需要激活多个视图，则可以使用组合接口"],["body","\n"],["body","如果要以编程方式执行上述操作，而不是声明@JsonView批注，请使用MappingJacksonValue包装返回值，并使用其提供序列化视图："],["body","\n"],["body","@RestController\npublic class UserController {\n\n    @GetMapping(\"/user\")\n    public MappingJacksonValue getUser() {\n        User user = new User(\"eric\", \"7!jd#h23\");\n        MappingJacksonValue value = new MappingJacksonValue(user);\n        value.setSerializationView(User.WithoutPasswordView.class);\n        return value;\n    }\n}\n"],["body","\n"],["body","对于依赖视图解析 的控制器，可以将序列化视图类添加到模型中，如以下示例所示"],["body","\n"],["body","@Controller\npublic class UserController extends AbstractController {\n\n    @GetMapping(\"/user\")\n    public String getUser(Model model) {\n        model.addAttribute(\"user\", new User(\"eric\", \"7!jd#h23\"));\n        model.addAttribute(JsonView.class.getName(), User.WithoutPasswordView.class);\n        return \"userView\";\n    }\n}\n"],["body","\n"],["h1","Model"],["body","\n"],["body","您可以使用@ ModelAttribute注解："],["body","\n\n"],["body","注解在@RequestMapping方法中的方法参数中 ，  从模型创建或访问“对象”，然后通过“ WebDataBinder”将其绑定到请求。"],["body","\n"],["body","作为@Controller或@ControllerAdvice类中的方法级 注解，可在任何@RequestMapping方法调用之前帮助初始化模型。 "],["body","\n"],["body","在@RequestMapping方法上   标记其返回值的是模型属性"],["body","\n\n"],["body","This section discusses @ModelAttribute methods的第二项 控制器可以具有任意数量的@ModelAttribute方法，所有这些方法均在同一控制器中的@RequestMapping方法之前被调用,也可以通过@ControllerAdvice在控制器之间共享@ModelAttribute方法。See the section on Controller Advice for more details."],["body","\n"],["body","@ModelAttribute\npublic void populateModel(@RequestParam String number, Model model) {\n    model.addAttribute(accountRepository.findAccount(number));\n    // add more ...\n}\n"],["body","\n"],["body","The following example adds only one attribute:"],["body","\n"],["body","@ModelAttribute\npublic Account addAccount(@RequestParam String number) {\n    return accountRepository.findAccount(number);\n}\n"],["body","\n"],["body","如果未明确指定名称，则根据“对象”类型选择默认名称，如约定的javadoc中所述。 您始终可以使用重载的addAttribute方法或通过@ModelAttribute上的name属性（用于返回值）来分配显式名称。"],["body","\n"],["body","您也可以将@ModelAttribute用作@RequestMapping方法上的方法级注释，在这种情况下，@ RequestMapping方法的返回值将解释为模型属性。\n通常不需要这样做，因为它是HTML控制器的默认行为，除非返回值是一个String，否则它将被解释为视图名称。 \n@ModelAttribute还可以自定义模型属性名称，如以下示例所示："],["body","\n"],["body","@GetMapping(\"/accounts/{id}\")\n@ModelAttribute(\"myAccount\")\npublic Account handle() {\n    // ...\n    return account;\n}\n"],["body","\n"],["h1","DataBinder"],["body","\n"],["body","@Controller或@ControllerAdvice类   可以具有用于初始化WebDataBinder实例的@InitBinder方法，而这些方法又可以："],["body","\n\n"],["body","将请求参数（即表单或查询数据）绑定到模型对象。"],["body","\n"],["body","将基于字符串的请求值（例如请求参数，路径变量，标头，Cookie等）转换为控制器方法参数的目标类型。"],["body","\n"],["body","呈现HTML表单时，将模型对象的值格式化为String值。"],["body","\n\n"],["body","@InitBinder方法可以注册特定于控制器的java.beans.PropertyEditor或Spring Converter和Formatter组件。\n此外，您可以使用MVC配置在全局共享的FormattingConversionService中注册Converter和Formatter类型。"],["body","\n"],["body","@InitBinder方法支持与@RequestMapping方法相同的许多参数，除了@ModelAttribute（命令对象）参数。\n通常，它们使用WebDataBinder参数（用于注册）和 返回 void\n以下清单显示了一个示例："],["body","\n"],["body","另外，当通过共享的FormattingConversionService使用基于Formatter的设置时，可以重新使用相同的方法并注册特定于控制器的Formatter实现，如以下示例所示："],["body","\n"],["body","@Controller\npublic class FormController {\n\n    @InitBinder \n    protected void initBinder(WebDataBinder binder) {\n        binder.addCustomFormatter(new DateFormatter(\"yyyy-MM-dd\"));\n    }\n\n    // ...\n}\n"],["body","\n"],["h1","Exceptions"],["body","\n"],["body","@Controller和@ControllerAdvice类可以具有@ExceptionHandler方法来处理控制器方法的异常，如以下示例所示："],["body","\n"],["body","@Controller\npublic class SimpleController {\n\n    // ...\n\n    @ExceptionHandler\n    public ResponseEntity<String> handle(IOException ex) {\n        // ...\n    }\n}\n"],["body","\n\n"],["body","该异常可能与正在传播的顶级异常（例如，直接IOException被抛出）匹配，"],["body","\n"],["body","也可能与包装器异常内的嵌套原因（例如，包装在IllegalStateException中的IOException）相匹配。"],["body","\n"],["body","从5.3开始，这可以在任意  原因异常 级别上匹配，而以前只考虑了直接原因。"],["body","\n\n"],["body","对于匹配的异常类型，如前面的示例所示，最好将目标异常声明为方法参数。当多个异常方法匹配时，根源异常匹配通常比 原因异常 匹配更可取。\n更具体地说，ExceptionDepthComparator用于根据从引发的异常类型开始的深度对异常进行排序。"],["body","\n"],["body","另外，注释声明可以缩小异常类型以使其匹配，如以下示例所示："],["body","\n"],["body","@ExceptionHandler({FileSystemException.class, RemoteException.class})\npublic ResponseEntity<String> handle(IOException ex) {\n    // ...\n}\n"],["body","\n"],["body","您甚至可以使用带有非常通用的参数签名的特定异常类型的列表，如以下示例所示："],["body","\n"],["body","@ExceptionHandler({FileSystemException.class, RemoteException.class})\npublic ResponseEntity<String> handle(Exception ex) {\n    // ...\n}\n"],["body","\n"],["body","root and cause exception matching"],["body","\n"],["body","在前面显示的IOException变体中，通常使用实际的FileSystemException或RemoteException实例作为参数来调用该方法，因为这两个实例均从IOException扩展。但是，如果任何此类匹配异常都在本身是IOException的包装器异常中传播，则传入的异常实例就是该包装器异常。"],["body","\n"],["body","仅当将它们作为顶级异常抛出时，传入的异常才是实际的FileSystemException或RemoteException实例。"],["body","\n"],["body","我们通常建议您在参数签名中尽可能具体，以减少根类型和原因异常类型之间不匹配的可能性。\n考虑将多重匹配方法分解为单独的@ExceptionHandler方法，每个方法均通过其签名匹配单个特定的异常类型。"],["body","\n"],["body","最后但并非最不重要的一点是，@ExceptionHandler方法实现可以选择通过以原始形式重新抛出异常来退出处理给定异常实例。\n在仅对根级别匹配或无法静态确定的特定上下文中的匹配感兴趣的情况下，这很有用。\n重新抛出的异常会在其余的解决方案链中传播，就像给定的@ExceptionHandler方法最初不会匹配一样。"],["body","\n"],["body","Spring MVC中对@ExceptionHandler方法的支持建立在DispatcherServlet级别HandlerExceptionResolver机制上。"],["body","\n"],["headingLink","method-arguments"],["heading","Method Arguments"],["body","\n"],["body","@ExceptionHandler 方法支持 以下参数"],["body","\n"],["body","Method argument"],["body","Description"],["body","\n"],["body","Exception type"],["body","For access to the raised exception."],["body","\n"],["body","HandlerMethod"],["body","For access to the controller method that raised the exception."],["body","\n"],["body","WebRequest, NativeWebRequest"],["body","Generic access to request parameters and request and session attributes without direct use of the Servlet API."],["body","\n"],["body","javax.servlet.ServletRequest, javax.servlet.ServletResponse"],["body","Choose any specific request or response type (for example, ServletRequest or HttpServletRequest or Spring’s MultipartRequest or MultipartHttpServletRequest)."],["body","\n"],["body","javax.servlet.http.HttpSession"],["body","Enforces the presence of a session. As a consequence, such an argument is never null. Note that session access is not thread-safe. Consider setting the RequestMappingHandlerAdapter instance’s synchronizeOnSession flag to true if multiple requests are allowed to access a session concurrently."],["body","\n"],["body","java.security.Principal"],["body","Currently authenticated user — possibly a specific Principal implementation class if known."],["body","\n"],["body","HttpMethod"],["body","The HTTP method of the request."],["body","\n"],["body","java.util.Locale"],["body","The current request locale, determined by the most specific LocaleResolver available — in effect, the configured LocaleResolver or LocaleContextResolver."],["body","\n"],["body","java.util.TimeZone, java.time.ZoneId"],["body","The time zone associated with the current request, as determined by a LocaleContextResolver."],["body","\n"],["body","java.io.OutputStream, java.io.Writer"],["body","For access to the raw response body, as exposed by the Servlet API."],["body","\n"],["body","java.util.Map, org.springframework.ui.Model, org.springframework.ui.ModelMap"],["body","For access to the model for an error response. Always empty."],["body","\n"],["body","RedirectAttributes"],["body","Specify attributes to use in case of a redirect — (that is to be appended to the query string) and flash attributes to be stored temporarily until the request after the redirect. See Redirect Attributes and Flash Attributes."],["body","\n"],["body","@SessionAttribute"],["body","For access to any session attribute, in contrast to model attributes stored in the session as a result of a class-level @SessionAttributes declaration. See @SessionAttribute for more details."],["body","\n"],["body","@RequestAttribute"],["body","For access to request attributes. See @RequestAttribute for more details."],["body","\n\n\n"],["body","返回值"],["body","\n"],["body","Return value"],["body","Description"],["body","\n"],["body","@ResponseBody"],["body","The return value is converted through HttpMessageConverter instances and written to the response. See @ResponseBody."],["body","\n"],["body","HttpEntity<B>, ResponseEntity<B>"],["body","The return value specifies that the full response (including the HTTP headers and the body) be converted through HttpMessageConverter instances and written to the response. See ResponseEntity."],["body","\n"],["body","String"],["body","A view name to be resolved with ViewResolver implementations and used together with the implicit model — determined through command objects and @ModelAttribute methods. The handler method can also programmatically enrich the model by declaring a Model argument (described earlier)."],["body","\n"],["body","View"],["body","A View instance to use for rendering together with the implicit model — determined through command objects and @ModelAttribute methods. The handler method may also programmatically enrich the model by declaring a Model argument (descried earlier)."],["body","\n"],["body","java.util.Map, org.springframework.ui.Model"],["body","Attributes to be added to the implicit model with the view name implicitly determined through a RequestToViewNameTranslator."],["body","\n"],["body","@ModelAttribute"],["body","An attribute to be added to the model with the view name implicitly determined through a RequestToViewNameTranslator.Note that @ModelAttribute is optional. See “Any other return value” at the end of this table."],["body","\n"],["body","ModelAndView object"],["body","The view and model attributes to use and, optionally, a response status."],["body","\n"],["body","void"],["body","A method with a void return type (or null return value) is considered to have fully handled the response if it also has a ServletResponse an OutputStream argument, or a @ResponseStatus annotation. The same is also true if the controller has made a positive ETag or lastModified timestamp check (see Controllers for details).If none of the above is true, a void return type can also indicate “no response body” for REST controllers or default view name selection for HTML controllers."],["body","\n"],["body","Any other return value"],["body","If a return value is not matched to any of the above and is not a simple type (as determined by BeanUtils#isSimpleProperty), by default, it is treated as a model attribute to be added to the model. If it is a simple type, it remains unresolved."],["body","\n\n\n"],["headingLink","rest-api-exceptions"],["heading","REST API exceptions"],["body","\n"],["body","REST服务的常见要求是在响应正文中包含错误详细信息。 \nSpring框架不会自动执行此操作，因为响应主体中错误详细信息的表示是特定于应用程序的。\n但是，@ RestController可以将@ExceptionHandler方法与ResponseEntity返回值一起使用，以设置响应的状态和主体。\n也可以在@ControllerAdvice类中声明此类方法，以将其全局应用。"],["body","\n"],["body","在响应主体中实现具有错误详细信息的全局异常处理的应用程序应考虑扩展ResponseEntityExceptionHandler，它提供了Spring MVC引发的异常的处理并提供了自定义响应主体的钩子。\n要使用此功能，请创建ResponseEntityExceptionHandler的子类，并使用@ControllerAdvice对其进行注释，重写必需的方法，并将其声明为Spring bean。"],["body","\n"],["h1","Controller Advice"],["body","\n"],["body","通常，@ ExceptionHandler，@ InitBinder和@ModelAttribute方法在声明它们的@Controller类（或类层次结构）中应用。\n如果要使此类方法更全局地应用（跨控制器），则可以在带有@ControllerAdvice或@RestControllerAdvice注释的类中声明它们。"],["body","\n\n"],["body","启动时，@RequestMapping和@ExceptionHandler方法的基础结构类将检测使用  @ControllerAdvice注释的Spring bean，然后在运行时应用其方法。\n全局@ExceptionHandler方法（来自@ControllerAdvice）在本地方法（来自@Controller）之后应用。"],["body","\n"],["body","相比之下，全局@ModelAttribute和@InitBinder方法在本地方法之前应用。"],["body","\n\n"],["body","默认情况下，@ ControllerAdvice方法适用于每个请求（即所有控制器），但是您可以通过使用批注上的属性将其范围缩小到控制器的子集，如以下示例所示："],["body","\n"],["body","// Target all Controllers annotated with @RestController 所有RestController\n@ControllerAdvice(annotations = RestController.class)\npublic class ExampleAdvice1 {}\n\n// Target all Controllers within specific packages 特定 controller类\n@ControllerAdvice(\"org.example.controllers\")\npublic class ExampleAdvice2 {}\n\n// Target all Controllers assignable to specific classes  抽象基类\n@ControllerAdvice(assignableTypes = {ControllerInterface.class, AbstractController.class})\npublic class ExampleAdvice3 {}\n"],["body","\n"],["body","前面示例中的选择器在运行时进行评估，如果广泛使用，可能会对性能产生负面影响。\n有关更多详细信息，请参见@ControllerAdvice javadoc。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","11.spring_SpringWebMvc/README.html"],["title","SpringWebMvc - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","DispatcherServlet"],["body","\n\n"],["body","\n"],["body","Spring MVC, 与其他Web框架一样,基于  central Servlet的控制器模式， the DispatcherServlet, 提供了一个共享的 请求处理算法，实际工作交给 其他配置配置的组件执行，这个模型是可弹性的，可划分工作流的"],["body","\n"],["body","\n"],["body","\n"],["body","The DispatcherServlet, as any Servlet, 需要被申明，要么通过 Java配置指定，要么通过 web.xml 申明，然后, the DispatcherServlet "],["body","\n"],["body","使用spring注解，发现实际处理请求的 组件, 例如 视图解析器, 异常处理以及其他"],["body","\n"],["body","\n"],["body","\n"],["body","下面的Java配置注册，并实例化一个 DispatcherServlet ，被ServletContainer 自动 发现(see Servlet Config):"],["body","\n"],["body","\n\n"],["body","public class MyWebApplicationInitializer implements WebApplicationInitializer {\n    @Override\n    public void onStartup(ServletContext servletContext) {\n        // Load Spring web application configuration,实例化容器\n        AnnotationConfigWebApplicationContext context = new AnnotationConfigWebApplicationContext();\n        context.register(AppConfig.class);\n\n        // Create and register the DispatcherServlet\n        DispatcherServlet servlet = new DispatcherServlet(context); //注册servlet\n        ServletRegistration.Dynamic registration = servletContext.addServlet(\"app\", servlet);\n        registration.setLoadOnStartup(1);\n        registration.addMapping(\"/app/*\");\n    }\n}\n"],["body","\n"],["body","在 Servlet3.0 环境中，编程式配置 ServletContext 所要实现的接口 （与 web.xml 配置 相反）"],["body","\n"],["body","这个 SPI 的实现类都会被 SpringServletContainerInitializer 自动检测到"],["body","\n"],["h1","ContextHierarchy"],["body","\n"],["headingLink","介绍"],["heading","介绍"],["body","\n\n"],["body","DispatcherServlet 需要 WebApplicationContext 作为配置来源"],["body","\n"],["body","一般 一个 WebApplicationContext  对应一个 Servlet "],["body","\n"],["body","多个Servlet 对应 多个 WebApplicationContext  ，且共享 一个 RootWebApplicationContext ，共享一些基础设施的 Bean对象，例如 数据访问，通用业务服务"],["body","\n\n"],["body","\n"],["headingLink","配置contexthierarchy"],["heading","配置ContextHierarchy"],["body","\n"],["body","public class MyWebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return new Class<?>[] { RootConfig.class };\n    }\n\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class<?>[] { App1Config.class };\n    }\n\n    @Override\n    protected String[] getServletMappings() {\n        return new String[] { \"/app1/*\" };\n    }\n}\n"],["body","\n"],["body","相对应的XML配置"],["body","\n"],["body","<web-app>\n\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>/WEB-INF/root-context.xml</param-value>\n    </context-param>\n\n    <servlet>\n        <servlet-name>app1</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>/WEB-INF/app1-context.xml</param-value>\n        </init-param>\n        <load-on-startup>1</load-on-startup>\n    </servlet>\n\n    <servlet-mapping>\n        <servlet-name>app1</servlet-name>\n        <url-pattern>/app1/*</url-pattern>\n    </servlet-mapping>\n\n</web-app>\n\n"],["body","\n"],["h1","Special Bean Types"],["body","\n\n"],["body","DispatcherServlet 委托各个不同的bean处理 不同的请求，渲染合适的响应"],["body","\n"],["body","special beans 意思是 spring管理的 对象"],["body","\n"],["body","以下表格列出的 被 DispatcherServlet 检测到的   special beans "],["body","\n\n"],["body","Bean type"],["body","Explanation"],["body","\n"],["body","HandlerMapping"],["body","通过一系列 拦截器 将请求映射给 handler "],["body","不通的 handleMapping 映射逻辑各有不同"],["body","有两个主要的 实现 "],["body","RequestMappingHandlerMapping (支持@RequestMapping注解) "],["body","SimpleUrlHandlerMapping (维护 显示的 URLPattern To Handler的 注册)"],["body","\n"],["body","HandlerAdapter"],["body","Help the DispatcherServlet to invoke a handler mapped to a request,"],["body","\n"],["body","HandlerExceptionResolver"],["body","异常处理策略, 通常把 异常 映射到 handler，HTML error views, or other targets. See Exceptions."],["body","\n"],["body","ViewResolver"],["body","Resolve logical String-based view names returned from a handler to an actual View with which to render to the response. See View Resolution and View Technologies."],["body","\n"],["body","LocaleResolver, LocaleContextResolver"],["body","解决客户端国际化问题"],["body","\n"],["body","ThemeResolver"],["body","Resolve themes your web application can use — for example, to offer personalized layouts. See Themes."],["body","\n"],["body","MultipartResolver"],["body","Abstraction for parsing a multi-part request (for example, browser form file upload) with the help of some multipart parsing library. See Multipart Resolver."],["body","\n"],["body","FlashMapManager"],["body","Store and retrieve the “input” and the “output” FlashMap that can be used to pass attributes from one request to another, usually across a redirect. See Flash Attributes."],["body","\n\n\n"],["body","核心功能包括 handler映射，handler方法执行，handler异常处理，handler返回视图解析，"],["body","\n"],["body","其他功能包括 客户端国际化，主题，文件上传，跨请求数据共享"],["body","\n"],["h1","Web MVC Config"],["body","\n"],["body","\n"],["body","配置 sepcial beans"],["body","\n"],["body","\n"],["body","可以在容器中申明 以上提到的 special beans ,DispatcherServlet  会检查容器中的 special bean 如果不存在则使用声明在 DispatcherServlet.properties 的默认实现，"],["body","\n"],["h1","Servlet Config"],["body","\n"],["body","Servlet3.0+ 环境中，你可以选择以 编程方式申明 Servlet容器，或者 结合 web.xml，以下配置 注册了一个 DispatcherServlet"],["body","\n"],["body","import org.springframework.web.WebApplicationInitializer;\n\npublic class MyWebApplicationInitializer implements WebApplicationInitializer {\n\n    @Override\n    public void onStartup(ServletContext container) {\n        XmlWebApplicationContext appContext = new XmlWebApplicationContext();\n        appContext.setConfigLocation(\"/WEB-INF/spring/dispatcher-config.xml\");\n        \n        ServletRegistration.Dynamic registration = container.addServlet(\"dispatcher\", new DispatcherServlet(appContext));\n        registration.setLoadOnStartup(1);\n        registration.addMapping(\"/\");\n    }\n}\n"],["body","\n"],["body","WebApplicationInitializer 由springMVC提供的接口，确保你的实现能够被自动 使用，用来初始化 任何 Servlet3 容器，"],["body","\n"],["body","抽象基类  AbstractDispatcherServletInitializer 使之更简单的 注册一个 DispatcherServlet  ，只要指定 servletMapping,和 DispatcherServlet  的 配置文件的位置，当然更推荐用以下方式 配置"],["body","\n"],["body","基于Java的Servlet配置"],["body","\n"],["body","public class MyWebAppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return null;\n    }\n\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return new Class<?>[] { MyWebConfig.class };\n    }\n\n    @Override\n    protected String[] getServletMappings() {\n        return new String[] { \"/\" };\n    }\n}\n"],["body","\n"],["body","使用XML配置的方式"],["body","\n"],["body","public class MyWebAppInitializer extends AbstractDispatcherServletInitializer {\n\n    @Override\n    protected WebApplicationContext createRootApplicationContext() {\n        return null;\n    }\n\n    @Override\n    protected WebApplicationContext createServletApplicationContext() {\n        XmlWebApplicationContext cxt = new XmlWebApplicationContext();\n        cxt.setConfigLocation(\"/WEB-INF/spring/dispatcher-config.xml\");\n        return cxt;\n    }\n\n    @Override\n    protected String[] getServletMappings() {\n        return new String[] { \"/\" };\n    }\n}\n"],["body","\n"],["body","给Servlet注册 Filter"],["body","\n"],["body","public class MyWebAppInitializer extends AbstractDispatcherServletInitializer {\n\n    // ...\n\n    @Override\n    protected Filter[] getServletFilters() {\n        return new Filter[] {\n            new HiddenHttpMethodFilter(), new CharacterEncodingFilter() };\n    }\n}\n"],["body","\n"],["body","每一个Filter 会使用 具体类名进行命名，自动映射到 DispatcherServlet"],["body","\n"],["body","The isAsyncSupported protected method of AbstractDispatcherServletInitializer提供了一个 地方 在 DispatcherServlet 和所有映射到它身上的 filters 异步支持"],["body","\n"],["body","默认为 true"],["body","\n"],["body","如果你需要 更加定制化，则 createDispatcherServlet  方法"],["body","\n"],["h1","Processing"],["body","\n"],["body","The DispatcherServlet 请求处理过程"],["body","\n\n"],["body","查询 WebApplicationContext  ，并绑定在 请求中，作为一个属性，供Controller 和其他元素使用，默认 绑定的Key是   DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE "],["body","\n"],["body","给请求绑定 locale resolver  ，以便 让 元素 在处理过程中， 解析 locale"],["body","\n"],["body","theme resolver 绑定主题解析器 给请求，  能构让 视图呈现不通的布局样式"],["body","\n"],["body","如果你指定了 multipart file resolver, 就会检查请求是否 是multipart. 如果是multipart ，将会以MultipartHttpServletRequest 包装. See Multipart Resolver for further information about multipart handling."],["body","\n"],["body","查找 指定的 Handler. 如果找到 ，跟执行链相关的 handler（预处理器，后处理器，控制器等）会被执行以渲染 视图响应，对于基础注解的控制器，响应能够被在 HandlerAdapter 中渲染，而不需要返回一个视图"],["body","\n"],["body","如果 model 返回，则渲染视图，如果没有model返回，则不渲染视图，因为请求可能已经被 处理了"],["body","\n\n"],["body","HandlerExceptionResolver  是为了处理异常，"],["body","\n"],["body","DispatcherServlet 同样支持 指定返回的  last-modification-date 通过Servlet API提供"],["body","\n"],["body","确定特定请求的 上次修改日期 很简单，DispatcherServlet查找合适的 handler时，会判断它是否 实现了LastModified 接口，如果实现了则返回给 客户端"],["body","\n"],["body","你能够自定义 独立的DispatcherServlet  实例，通过 向 web.xml servlet申明中，添加  Servlet initialization parameters"],["body","\n"],["body","以下是支持的参数："],["body","\n"],["body","Parameter"],["body","Explanation"],["body","\n"],["body","contextClass"],["body","spring容器的类，必须要实现 ConfigurableWebApplicationContext，由该 Servlet实例化"],["body","默认使用 XmlWebApplicationContext"],["body","\n"],["body","`contextConfigLocation"],["body","XML配置路径"],["body","逗号分隔支持的多个Context. 重复定义的bean，最近优先"],["body","\n"],["body","namespace"],["body","Namespace of the WebApplicationContext. Defaults to [servlet-name]-servlet."],["body","\n"],["body","throwExceptionIfNoHandlerFound"],["body","如果没有handler找到，要不要抛  NoHandlerFoundException "],["body","这个异常可以被 HandlerExceptionResolver捕获"],["body","(例如, by using an @ExceptionHandler controller method) "],["body","默认false, "],["body"," 如果false,DispatcherServlet sets the response status to 404 (NOT_FOUND) without raising an exception."],["body","Note that, if default servlet handling is also configured, unresolved requests are always forwarded to the default servlet and a 404 is never raised."],["body","\n\n\n"],["h1","Interception"],["body","\n"],["body","所有 HandlerMapping 的实现都支持 拦截器，例如 身份检查。"],["body","\n"],["body","拦截器实现 HandlerInterceptor   org.springframework.web.servlet 包下。"],["body","\n\n"],["body","preHandle(..): Before the actual handler is run\n\n"],["body","返回true才能继续执行"],["body","\n"],["body","返回true，DispatcherServlet 认为 拦截器本身已处理了请求，然后渲染合适的视图"],["body","\n\n"],["body","\n"],["body","postHandle(..): After the handler is run"],["body","\n"],["body","afterCompletion(..): After the complete request has finished"],["body","\n\n"],["body","See Interceptors in the section on MVC configuration for examples of how to configure interceptors. "],["body","\n"],["body","你可以在 各自HandlerMapping  实现里 使用 setters 直接注册 "],["body","\n"],["body","注意 postHandle 和  @ResponseBody and ResponseEntity 方法一起使用用处不大，因为响应已经在 posthandler 执行前 被 写入，提交"],["body","\n"],["body","，无法对 响应做改变。例如添加额外的头，对于这种场景，建议使用  Controller Advice ，要么实现 ResponseBodyAdvice  要么申明为 ControllerAdvice 要么 直接配置在 RequestMappingHandlerAdapter"],["body","\n"],["h1","Exceptions"],["body","\n"],["headingLink","异常实现类"],["heading","异常实现类"],["body","\n"],["body","如果在执行请求处理过程中发生异常，DispatcherServlet 将它 交给 HandlerExceptionResolver  bean做处理，"],["body","\n"],["body","以下表列出了 HandlerExceptionResolver implementations:"],["body","\n"],["body","HandlerExceptionResolver"],["body","Description"],["body","\n"],["body","SimpleMappingExceptionResolver"],["body","异常类与 错误视图的映射处理器"],["body","\n"],["body","DefaultHandlerExceptionResolver"],["body","Resolves exceptions raised by Spring MVC and maps them to HTTP status codes. See also alternative ResponseEntityExceptionHandler and REST API exceptions."],["body","\n"],["body","ResponseStatusExceptionResolver"],["body","Resolves exceptions with the @ResponseStatus annotation and maps them to HTTP status codes based on the value in the annotation."],["body","\n"],["body","ExceptionHandlerExceptionResolver"],["body","Resolves exceptions by invoking an @ExceptionHandler method in a @Controller or a @ControllerAdvice class. See @ExceptionHandler methods."],["body","\n\n\n"],["headingLink","chain-of-resolvers"],["heading","Chain of Resolvers"],["body","\n"],["body","You can form an exception resolver chain by declaring multiple HandlerExceptionResolver beans in your Spring configuration"],["body","\n"],["body","您可以通过在Spring配置中声明多个HandlerExceptionResolver bean来形成异常解析器链。必要时可以设置顺序，顺序越高，链中的位置越后"],["body","\n"],["body","HandlerExceptionResolver接口的返回值"],["body","\n\n"],["body","a ModelAndView that points to an error view."],["body","\n"],["body","An empty ModelAndView if the exception was handled within the resolver."],["body","\n"],["body","null if the exception remains unresolved, for subsequent resolvers to try, and, if the exception remains at the end, it is allowed to bubble up to the Servlet container."],["body","\n\n"],["body","The MVC Config automatically declares built-in resolvers for default Spring MVC exceptions, for @ResponseStatus annotated exceptions, and for support of @ExceptionHandler methods. You can customize that list or replace it."],["body","\n"],["headingLink","container-error-page"],["heading","Container Error Page"],["body","\n"],["body","If an exception remains unresolved by any HandlerExceptionResolver and is,"],["body","\n"],["body","如果任何 异常处理 都没有解决异常，则让它继续传播，Servlet containers能够渲染 默认的HTML错误视图，自定义容器默认错误页，可以在 web.xml 指定错误页"],["body","\n"],["body","<error-page>\n    <location>/error</location>\n</error-page>\n"],["body","\n"],["body","Given the preceding example, when an exception bubbles up or the response has an error status, "],["body","\n"],["body","the Servlet container makes an ERROR dispatch within the container to the configured URL (for example, /error). This is then processed by the DispatcherServlet, possibly mapping it to a @Controller, which could be implemented to return an error view name with a model or to render a JSON response, as the following example shows:"],["body","\n"],["body","基于前面的示例，当异常冒出或响应具有错误状态时，Servlet容器在容器内向配置的URL（例如，/ error）进行ERROR调度。\n然后由DispatcherServlet处理，可能将其映射到@Controller，可以实现返回错误视图名称或呈现JSON响应，如以下示例所示："],["body","\n"],["body","@RestController\npublic class ErrorController {\n\n    @RequestMapping(path = \"/error\")\n    public Map<String, Object> handle(HttpServletRequest request) {\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(\"status\", request.getAttribute(\"javax.servlet.error.status_code\"));\n        map.put(\"reason\", request.getAttribute(\"javax.servlet.error.message\"));\n        return map;\n    }\n}\n"],["body","\n"],["body","\n"],["body","The Servlet API does not provide a way to create error page mappings in Java. You can, however, use both a WebApplicationInitializer and a minimal web.xml."],["body","\n"],["body","\n"],["h1","View Resolution"],["body","\n"],["headingLink","viewresolver"],["heading","ViewResolver"],["body","\n"],["body","ViewResolver 提供 view 名称与 实际 view的映射关系"],["body","\n"],["body","在移交给特定的视图渲染技术之前。  View 主要是用来准备数据 "],["body","\n"],["body","以下是 ViewResolver的继承结构"],["body","\n"],["body","ViewResolver"],["body","Description"],["body","\n"],["body","AbstractCachingViewResolver"],["body","视图缓存"],["body","\n"],["body","UrlBasedViewResolver"],["body","将URL直接映射到 视图."],["body","\n"],["body","InternalResourceViewResolver"],["body","Convenient subclass of UrlBasedViewResolver that supports InternalResourceView (in effect, Servlets and JSPs) and subclasses such as JstlView and TilesView. You can specify the view class for all views generated by this resolver by using setViewClass(..)."],["body","\n"],["body","FreeMarkerViewResolver"],["body","Convenient subclass of UrlBasedViewResolver that supports FreeMarkerView and custom subclasses of them."],["body","\n"],["body","ContentNegotiatingViewResolver"],["body","Implementation of the ViewResolver interface that resolves a view based on the request file name or Accept header. See Content Negotiation."],["body","\n"],["body","BeanNameViewResolver"],["body","Implementation of the ViewResolver interface that interprets a view name as a bean name in the current application context. This is a very flexible variant which allows for mixing and matching different view types based on distinct view names. Each such View can be defined as a bean e.g. in XML or in configuration classes."],["body","\n\n\n"],["h1","Locale"],["body","\n"],["body","spring大部分 架构支持国际化，springMVC也支持"],["body","\n"],["body","DispatcherServlet 根据 客户端的 locale 自动解析消息，通过 LocaleResolver  实现"],["body","\n"],["body","当请求过来时，DispatcherServlet 查找 locale resolver  ，一旦找到一个，则尝试设置 locale"],["body","\n"],["body","使用  RequestContext.getLocale() 可也始终获得  locale resolve 解析的 locale"],["body","\n"],["body","另外，为了自动 locale解析，可以给 handlerMapping 添加 locale解析器，这适用于 根据 请求参数 改变locale"],["body","\n"],["body","以下类是常见的 locale解析实现， 定义在 org.springframework.web.servlet.i18n 包下，"],["body","\n\n"],["body","Time Zone"],["body","\n\n"],["body","In addition to obtaining the client’s locale, it is often useful to know its time zone. The LocaleContextResolver interface offers an extension to LocaleResolver that lets resolvers provide a richer LocaleContext, which may include time zone information."],["body","\n"],["body","When available, the user’s TimeZone can be obtained by using the RequestContext.getTimeZone() method. Time zone information is automatically used by any Date/Time Converter and Formatter objects that are registered with Spring’s ConversionService."],["body","\n\n"],["body","Header Resolver"],["body","\n\n"],["body","解析客户端传过来的  accept-language 请求头，不支持时区信息"],["body","\n\n"],["body","\n"],["body","Cookie Resolver"],["body","\n\n"],["body","检查 Cookie 钟可能会存在的   Locale or TimeZone"],["body","\n\n"],["body","<bean id=\"localeResolver\" class=\"org.springframework.web.servlet.i18n.CookieLocaleResolver\">\n\n    <property name=\"cookieName\" value=\"clientlanguage\"/>\n\n    <!-- in seconds. If set to -1, the cookie is not persisted (deleted when browser shuts down) -->\n    <property name=\"cookieMaxAge\" value=\"100000\"/>\n\n</bean>\n"],["body","\n"],["body","| Property       | Default                   | Description                                                  |\n| :------------- | :------------------------ | :----------------------------------------------------------- |\n| cookieName   | classname + LOCALE        | The name of the cookie                                       |\n| cookieMaxAge | Servlet container default | The maximum time a cookie persists on the client. If -1 is specified, the cookie will not be persisted. It is available only until the client shuts down the browser. |\n| cookiePath   | /                         | Limits the visibility of the cookie to a certain part of your site. When cookiePath is specified, the cookie is visible only to that path and the paths below it. |"],["body","\n"],["body","\n"],["body","\n"],["body","Session Resolver"],["body","\n"],["body","\n\n"],["body","从session 中取 Locale and TimeZone ，将本地请求的语言环境，设置在 Session"],["body","\n\n"],["body","Locale Interceptor"],["body","\n\n"],["body","可以给 任何HandlerMapping  定义 应用 该 拦截器，"],["body","\n"],["body","它检查请求中的参数，并改变locale ，以下是实例"],["body","\n"],["body","<bean id=\"localeChangeInterceptor\"\n        class=\"org.springframework.web.servlet.i18n.LocaleChangeInterceptor\">\n    <property name=\"paramName\" value=\"siteLanguage\"/>\n</bean>\n\n<bean id=\"localeResolver\"\n        class=\"org.springframework.web.servlet.i18n.CookieLocaleResolver\"/>\n\n<bean id=\"urlMapping\"\n        class=\"org.springframework.web.servlet.handler.SimpleUrlHandlerMapping\">\n    <property name=\"interceptors\">\n        <list>\n            <ref bean=\"localeChangeInterceptor\"/>\n        </list>\n    </property>\n    <property name=\"mappings\">\n        <value>/**/*.view=someController</value>\n    </property>\n</bean>\n"],["body","\n"],["h1","Themes"],["body","\n"],["body","您可以应用Spring Web MVC框架主题来设置应用程序的整体外观"],["body","\n"],["body","主题是 静态资源的集合，包括样式表，图片等等"],["body","\n"],["headingLink","defining-a-theme"],["heading","Defining a theme"],["body","\n"],["body","首先实现 org.springframework.ui.context.ThemeSource 接口"],["body","\n"],["body","WebApplicationContext  实现了 ThemeSource接口，但它的实现委托给了特定的实现，默认是  org.springframework.ui.context.support.ResourceBundleThemeSource 这个实现，从 classpath 根路径加载资源"],["body","\n"],["body","自定义实现，需要主动往容器中 注入 一个 themeSource"],["body","\n"],["body","当您使用ResourceBundleThemeSource时，将在一个简单的属性文件中定义一个主题。\n属性文件列出了组成主题的资源，如以下示例所示："],["body","\n"],["body","styleSheet=/themes/cool/style.css\nbackground=/themes/cool/img/coolBg.jpg\n"],["body","\n"],["body","属性的键是从 视图 引用主题元素的名称。"],["body","\n"],["body","对于  JSP 使用 spring:theme  标签"],["body","\n"],["body","<%@ taglib prefix=\"spring\" uri=\"http://www.springframework.org/tags\"%>\n<html>\n    <head>\n        <link rel=\"stylesheet\" href=\"<spring:theme code='styleSheet'/>\" type=\"text/css\"/>\n    </head>\n    <body style=\"background=<spring:theme code='background'/>\">\n        ...\n    </body>\n</html>\n"],["body","\n"],["body","默认的，ResourceBundleThemeSource 使用空 前缀，从 classpath 加载properties files"],["body","\n"],["headingLink","resolving-themes"],["heading","Resolving Themes"],["body","\n"],["body","定义完之后，要使用，DispatcherServlet查找 名为 themeResolver 的bean，以下是已有的实现"],["body","\n"],["body","Class"],["body","Description"],["body","\n"],["body","FixedThemeResolver"],["body","Selects a fixed theme, set by using the defaultThemeName property."],["body","\n"],["body","SessionThemeResolver"],["body","The theme is maintained in the user’s HTTP session. It needs to be set only once for each session but is not persisted between sessions."],["body","\n"],["body","CookieThemeResolver"],["body","The selected theme is stored in a cookie on the client."],["body","\n\n\n"],["body","Spring also provides a ThemeChangeInterceptor that lets theme changes on every request with a simple request parameter."],["body","\n"],["h1","Multipart Resolver"],["body","\n"],["body","MultipartResolver  属于  org.springframework.web.multipart  包，是 解析 多部件请求包括文件上传 的 策略类"],["body","\n"],["body","有一个实现类是 基于 Commons FileUpload   有一个是 基于  Servlet 3.0 multipart request parsing"],["body","\n"],["body","要启用 多部件解析，需要声明 MultipartResolver  ，且bean名 为 multipartResolver"],["body","\n"],["body","When a POST with content-type of multipart/form-data is received，HttpServletRequest 会被包装成MultipartHttpServletRequest "],["body","\n"],["headingLink","apache-commons-fileupload"],["heading","Apache Commons FileUpload"],["body","\n"],["body","使用  Apache Commons FileUpload，需要配置bean名为   multipartResolver  的  CommonsMultipartResolver "],["body","\n"],["body","需要引入 commons-fileupload依赖"],["body","\n"],["headingLink","servlet-30"],["heading","Servlet 3.0"],["body","\n"],["body","Servlet 3.0 multipart parsing needs to be enabled through Servlet container configuration. To do so:"],["body","\n\n"],["body","In Java, set a MultipartConfigElement on the Servlet registration.注册MultipartConfigElement "],["body","\n\n"],["body","public class AppInitializer extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n    // ...\n\n    @Override\n    protected void customizeRegistration(ServletRegistration.Dynamic registration) {\n\n        // Optionally also set maxFileSize, maxRequestSize, fileSizeThreshold\n        registration.setMultipartConfig(new MultipartConfigElement(\"/tmp\"));\n    }\n\n}\n"],["body","\n\n"],["body","In web.xml, add a \"<multipart-config>\" section to the servlet declaration."],["body","\n\n"],["body","一旦 Servlet3.0配置好之后, you can add a bean of type StandardServletMultipartResolver with a name of multipartResolver."],["body","\n"],["h1","Logging"],["body","\n"],["body","Spring MVC中的DEBUG级别的日志记录旨在紧凑，最少且人性化"],["body","\n"],["body","Sensitive Data"],["body","\n"],["body","DEBUG and TRACE logging may log sensitive information. "],["body","\n"],["body","需要启用 DispatcherServlet 的 enableLoggingRequestDetails 属性"],["body","\n"],["body","public class MyInitializer\n        extends AbstractAnnotationConfigDispatcherServletInitializer {\n\n    @Override\n    protected Class<?>[] getRootConfigClasses() {\n        return ... ;\n    }\n\n    @Override\n    protected Class<?>[] getServletConfigClasses() {\n        return ... ;\n    }\n\n    @Override\n    protected String[] getServletMappings() {\n        return ... ;\n    }\n\n    @Override\n    protected void customizeRegistration(ServletRegistration.Dynamic registration) {\n        registration.setInitParameter(\"enableLoggingRequestDetails\", \"true\");\n    }\n\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","34.源编程_AnnotationProcessor/TreeMarker.html"],["title","TreeMarker.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","https://zhuanlan.zhihu.com/p/121031315"],["body","\n"],["body","https://www.cnblogs.com/exmyth/p/11396790.html"],["body","\n"],["body","https://z.itpub.net/article/detail/74BC0F097BB8E874529FCD2E24343A33"],["body","\n"],["body","https://github.com/google/auto"],["body","\n"],["body","https://jishuin.proginn.com/p/763bfbd6c3a3"],["body","\n"],["body","https://blog.csdn.net/A_zhenzhen/article/details/86065063"],["body","\n"],["body","https://www.jianshu.com/p/4d5917f719f1"],["body","\n"],["headingLink","注解合并"],["heading","注解合并"],["body","\n"],["body","org.springframework.core.annotation.TypeMappedAnnotations.IsPresent#doWithAnnotations\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","34.源编程_AnnotationProcessor/README.html"],["title","AnnotationProcessor - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","annotation-processor-自定义注解处理器不再写烦人的模板代码"],["heading","Annotation Processor： 自定义注解处理器，不再写烦人的模板代码"],["body","\n"],["headingLink","什么是注解"],["heading","什么是注解"],["body","\n"],["body","注解是一种可以添加到Java源代码的语法 我们可以注释类，接口，方法，变量，参数等。 可以从源文件中读取Java注解"],["body","\n"],["body","Java注解也可以嵌入和读取编译器生成的类文件。 Java VM可以在运行时保留注解，并通过反射进行读取。"],["body","\n"],["body","@Retention(RetentionPolicy.SOURCE)\n@Target(ElementType.FIELD)\npublic @interface BindView {\n    int value();\n}\n"],["body","\n"],["body","创建一个注解需要两部分信息： Retention 和 Target 。"],["body","\n\n"],["body","\n"],["body","RetentionPolicy 指定了注解应该保留到程序生命周期的什么时候。举个例子：注解可以保留到程序的编译时期或者运行时期。"],["body","\n\n"],["body","SOURCE —— 编译时期，不会储存"],["body","\n"],["body","CLASS —— 储存在 class 文件中，但是不会保留到运行时期"],["body","\n"],["body","RUNTIME —— 储存在 class 文件中，运行时期可以访问（通过反射）"],["body","\n\n"],["body","\n"],["body","\n"],["body","ElementTypes 指定了注解应该作用于程序的哪一个部分。有3个取值："],["body","\n"],["body","\n\n"],["body","拿 BindView 注解来说，RetentionPolicy.SOURCE 表示注解只需要在编译时期保存，之后就不需要了。"],["body","\n"],["body","ElementType.FIELD 表示该注解只能修饰字段。"],["body","\n"],["headingLink","注解处理器"],["heading","注解处理器"],["body","\n"],["headingLink","编译时期"],["heading","编译时期"],["body","\n"],["body","Annotation Processor 实际上是 javac 编译器的一部分，所以注解处理时发生在编译时期，这有许多好处，其中之一就是“在编译其实发生错误比运行时期发生错误要好的多”。"],["body","\n"],["headingLink","无反射"],["heading","无反射"],["body","\n"],["body","Java 的反射 API 会在运行时抛出许多错误，这实在是有点蛋疼。"],["body","\n"],["body","它会直接给我们一个程序的语义结构，我们使用这个语义结构就可以分析注解所处的上下文场景，然后做处理。"],["body","\n"],["headingLink","生成样板代码"],["heading","生成样板代码"],["body","\n"],["body","Annotation Processor 最大的用处就是用来生成样板代码了，比如著名的 ButterKnife 等开源库。"],["body","\n"],["headingLink","注解处理器是如何工作的"],["heading","注解处理器是如何工作的"],["body","\n\n"],["body","\n"],["body","注解处理会执行很多轮。编译器首先会读取java源文件，然后查看文件中是否有使用注解，如果有使用，则调用其对应的注释处理器"],["body","\n"],["body","\n"],["body","\n"],["body","这个注解处理器（可能会）生成新的带有注解的java源文件"],["body","\n"],["body","\n"],["body","\n"],["body","这些新注解将再次调用其相应的注释处理器，然后再次生成更多的java源文件。就这样一直循环，直到没有新的文件生成。"],["body","\n"],["body","\n\n"],["headingLink","注册注解处理器"],["heading","注册注解处理器"],["body","\n\n"],["body","\n"],["body","java 编译器需要知道所有的注解处理器，所以如果我们想要自定义一个处理器，我们必须要让 java 编译器知道我们创建了一个"],["body","\n"],["body","\n"],["body","\n"],["body","有两种方法来注册一个处理器："],["body","\n"],["body","\n\n"],["body","本地SPI注册"],["body","\n"],["body","<your-annotation-processor-module>/src/main/resources/META-INF/services\n"],["body","\n"],["body","然后在services文件夹里面，创建一个名字叫做javax.annotation.processing.Processor的文件。在这个文件中声明你的处理器的权限定名："],["body","\n"],["body","<your-package>.YourProcessor"],["body","\n"],["body","使用谷歌的 AutoService 库。"],["body","\n"],["body","package foo.bar;\nimport javax.annotation.processing.Processor;\n@AutoService(Processor.class)\nfinal class MyProcessor implements Processor {\n  // …\n}\n"],["body","\n"],["headingLink","创建一个注解处理器"],["heading","创建一个注解处理器"],["body","\n"],["body","public class Processor extends AbstractProcessor {\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnvironment) {\n        super.init(processingEnvironment);\n        // initialize helper/utility classes...\n    }\n    @Override\n    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnvironment) {\n        // do processing...\n        return true;\n    }\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {\n        //\n    }\n    @Override\n    public SourceVersion getSupportedSourceVersion() {\n        //\n    }\n}\n\n"],["body","\n"],["headingLink","init"],["heading","INIT"],["body","\n"],["body","init() 提供帮助和工具类，如：Filer（生成文件），Messager（用于记录错误，警告等），Elements（用于操作程序元素的工具方法），类型（用于操作类型的工具方法）等。 "],["body","\n"],["body","我们可以使用processingEnvironment 这个变量来获取这些类。"],["body","\n"],["headingLink","process"],["heading","process"],["body","\n"],["body","process() 这个方法就是所有处理器处理注解的地方。这里你可以获取到被注解修饰的元素的所有信息。然后你就可以生成新的文件了。"],["body","\n"],["headingLink","getsupportedannotationtypes"],["heading","getSupportedAnnotationTypes"],["body","\n"],["body","这里返回自定义的注解就好了。它的返回值是 process() 方法的第一个参数。"],["body","\n"],["headingLink","getsupportedsourceversion"],["heading","getSupportedSourceVersion"],["body","\n"],["body","返回最新的 java 版本就好了。"],["body","\n"],["headingLink","新建两个module"],["heading","新建两个module"],["body","\n\n"],["body","\n"],["body","一个用于创建注解，一个用于创建注解处理器。"],["body","\n"],["body","\n"],["body","\n"],["body","为啥需要新建两个module呢？"],["body","\n"],["body","\n\n"],["body","因为 processor 需要 annatation 的引用，所以 annotation 需要提出来作为一个 module。"],["body","\n"],["body","那么可不可以将所有代码都放到 app 里面呢？是可以的，但是由于我们不需要 processor 的代码，只需要它在编译的时候处理我们的代码然后生成新的文件就好了，更不就不需要将 processor 的代码打包到 apk 里面，所以新建 module 是最好的选择。"],["body","\n"],["headingLink","创建注解"],["heading","创建注解"],["body","\n"],["body","@Retention(RetentionPolicy.SOURCE)\n@Target(ElementType.TYPE)\npublic @interface NewIntent {\n}\n"],["body","\n"],["body","ElementType.TYPE 表示这个注解可以修饰 类，接口，枚举 等等。"],["body","\n"],["headingLink","创建注解处理器"],["heading","创建注解处理器"],["body","\n"],["body","自定义的注解处理器需要继承至一个指定的父类（AbstractProcessor）："],["body","\n"],["body","public class NewIntentProcessor extends AbstractProcessor {\n\n    @Override\n    public synchronized void init(ProcessingEnvironment processingEnv) {}\n\n    @Override\n    public boolean process(Set<? extends TypeElement> set, RoundEnvironment roundEnv) {}\n\n    @Override\n    public Set<String> getSupportedAnnotationTypes() {}\n\n    @Override\n    public SourceVersion getSupportedSourceVersion() {}\n}\n\n"],["body","\n"],["headingLink","开始处理注解"],["heading","开始处理注解"],["body","\n"],["headingLink","首先找到所有的被指定注解修饰元素"],["heading","首先找到所有的被指定注解修饰元素"],["body","\n"],["body","for (Element element : roundEnvironment.getElementsAnnotatedWith(NewIntent.class)) {\n\n    if (element.getKind() != ElementKind.CLASS) {\n        messager.printMessage(Diagnostic.Kind.ERROR, \"Can be applied to class.\");\n        return true;\n    }\n\n    TypeElement typeElement = (TypeElement) element;\n    activitiesWithPackage.put(\n        typeElement.getSimpleName().toString(),\n        elements.getPackageOf(typeElement).getQualifiedName().toString());\n}\n"],["body","\n\n"],["body","我们利用 roundEnvironment.getElementsAnnotatedWith() 这个方法就可以找出所以被指定注解修饰的元素，这个方法返回了一个集合，集合类型是 Element，Element 是所有元素的一个父接口。"],["body","\n"],["body","然后我们判断一下，注解是否被正确使用了，因为我们在创建注解的时候就指定了该注解只能修饰类，接口，枚举"],["body","\n"],["body","如果注解被错误使用了，我们可以使用 message 打印错误信息，反之，被正确使用了，那么我们就可以将它强制转换为 TypeElement。关于这个 TypeElement ，它是 Element 的一个子接口。它通常可以用于类和方法参数。还有一些其他类型的元素："],["body","\n\n"],["body","package com.example;\t// PackageElement\n\npublic class Foo {\t\t// TypeElement\n\n\tprivate int a;\t\t// VariableElement\n\tprivate Foo other; \t// VariableElement\n\n\tpublic Foo () {} \t// ExecuteableElement\n\n\tpublic void setA ( \t// ExecuteableElement\n\t                 int newA\t// TypeElement\n\t                 ) {}\n}\n\n"],["body","\n"],["body","TypeSpec.Builder navigatorClass = TypeSpec\n                    .classBuilder(\"Navigator\")\n    .addModifiers(Modifier.PUBLIC, Modifier.FINAL);\n\nfor (Map.Entry<String, String> element : activitiesWithPackage.entrySet()) {\n    String activityName = element.getKey();\n    String packageName = element.getValue();\n    ClassName activityClass = ClassName.get(packageName, activityName);\n    MethodSpec intentMethod = MethodSpec\n        .methodBuilder(METHOD_PREFIX + activityName)\n        .addModifiers(Modifier.PUBLIC, Modifier.STATIC)\n        .returns(classIntent)\n        .addParameter(classContext, \"context\")\n        .addStatement(\"return new $T($L, $L)\", classIntent, \"context\", activityClass + \".class\")\n        .build();\n    navigatorClass.addMethod(intentMethod);\n}\n\n"],["body","\n"],["body","这个是 JavaPoet 的使用方法，就不多说了，可以查看 文档 。"],["body","\n"],["headingLink","最后将代码写入文件"],["heading","最后，将代码写入文件"],["body","\n"],["body","JavaFile.builder(\"com.annotationsample\", navigatorClass.build())\n  .build()\n  .writeTo(filer);\n\n"],["body","\n"],["body","public final class Navigator {\n  public static Intent startMainActivity(Context context) {\n    return new Intent(context, com.annotationsample.MainActivity.class);\n  }\n}\n"],["body","\n"],["body","@NewIntent\npublic class MainActivity extends AppCompatActivity {}\n\n----------------------------------------------------------------------------------------\n\npublic class SplashActivity extends AppCompatActivity {\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_splash);\n        Navigator.startMainActivity(this); //generated class, method\n    }\n}\n\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","15.spring_SpringCloud/服务注册与发现/nacos/nacos-with-spring.html"],["title","nacos-with-spring.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","与Spring集成"],["body","\n"],["headingLink","配置中心"],["heading","配置中心"],["body","\n"],["headingLink","依赖"],["heading","依赖"],["body","\n"],["body","        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-context</artifactId>\n            <version>5.3.5</version>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba.nacos</groupId>\n            <artifactId>nacos-spring-context</artifactId>\n            <version>1.0.0</version>\n        </dependency>\n"],["body","\n"],["headingLink","spring配置"],["heading","Spring配置"],["body","\n"],["body","package com.weisanju.nacos;\n\nimport com.alibaba.nacos.api.annotation.NacosProperties;\nimport com.alibaba.nacos.api.config.annotation.NacosValue;\nimport com.alibaba.nacos.spring.context.annotation.config.EnableNacosConfig;\nimport com.alibaba.nacos.spring.context.annotation.config.NacosPropertySource;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.context.annotation.Configuration;\n@Configuration\n@EnableNacosConfig(globalProperties = @NacosProperties(serverAddr = \"127.0.0.1:8848\"))\n@NacosPropertySource(dataId = \"test.yml\", autoRefreshed = true)\n@ComponentScan(\"com.weisanju.nacos\")\npublic class NacosConfig {\n}\n\n\n@NacosValue(value = \"${xjq}\", autoRefreshed = true)\nprivate String xjq;\n"],["body","\n"],["headingLink","使用"],["heading","使用"],["body","\n"],["body","package com.weisanju.nacos;\n\nimport com.alibaba.nacos.client.config.NacosConfigService;\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\n\npublic class MainTest {\n    public static void main(String[] args) throws InterruptedException {\n        AnnotationConfigApplicationContext annotationConfigApplicationContext = new AnnotationConfigApplicationContext(NacosConfig.class);\n\n        //NacosConfigService bean1 = annotationConfigApplicationContext.getBean(NacosConfigService.class);\n        ComponentTest bean = annotationConfigApplicationContext.getBean(ComponentTest.class);\n\n        while (true){\n            System.out.println(bean.getXjq());\n            Thread.sleep(1000);\n        }\n    }\n}\n"],["body","\n"],["headingLink","启动服务发现"],["heading","启动服务发现"],["body","\n"],["body","@EnableNacosDiscovery(globalProperties = @NacosProperties(serverAddr = \"127.0.0.1:8848\"))\n//服务注入\n@NacosInjected\nNamingService namingService;\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","15.spring_SpringCloud/服务注册与发现/nacos/nacos-with-spring-clound.html"],["title","nacos-with-spring-clound.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","快速开始"],["body","\n"],["body","本文主要面向 Spring Cloud 的使用者，通过两个示例来介绍如何使用 Nacos 来实现分布式环境下的配置管理和服务注册发现。"],["body","\n"],["body","关于 Nacos Spring Cloud 的详细文档请参看：Nacos Config 和 Nacos Discovery。"],["body","\n\n"],["body","\n"],["body","通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-config 实现配置的动态变更。"],["body","\n"],["body","\n"],["body","\n"],["body","通过 Nacos Server 和 spring-cloud-starter-alibaba-nacos-discovery 实现服务的注册与发现。"],["body","\n"],["body","\n\n"],["h1","启动配置管理"],["body","\n"],["headingLink","1配置依赖"],["heading","1.配置依赖"],["body","\n"],["body","<dependency>\n    <groupId>com.alibaba.cloud</groupId>\n    <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n    <version>${latest.version}</version>\n</dependency>\n"],["body","\n"],["body","<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>${spring-boot.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-dependencies</artifactId>\n            <version>${spring-cloud.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n"],["body","\n"],["headingLink","2配置注册中心"],["heading","2.配置注册中心"],["body","\n"],["body","在 bootstrap.properties 中配置 Nacos server 的地址和应用名"],["body","\n"],["body","spring.cloud.nacos.config.server-addr=127.0.0.1:8848\nspring.application.name=example\n"],["body","\n"],["body","说明：之所以需要配置 spring.application.name ，是因为它是构成 Nacos 配置管理 dataId字段的一部分。"],["body","\n"],["body","在 Nacos Spring Cloud 中，dataId 的完整格式如下："],["body","\n"],["body","${prefix}-${spring.profiles.active}.${file-extension}\n"],["body","\n\n"],["body","prefix 默认为 spring.application.name 的值，也可以通过配置项 spring.cloud.nacos.config.prefix来配置。"],["body","\n"],["body","spring.profiles.active 即为当前环境对应的 profile，详情可以参考 Spring Boot文档。 注意：当 spring.profiles.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}"],["body","\n"],["body","file-exetension 为配置内容的数据格式，可以通过配置项 spring.cloud.nacos.config.file-extension 来配置。目前只支持 properties 和 yaml 类型。"],["body","\n\n"],["headingLink","3注入"],["heading","3.注入"],["body","\n"],["body","@RestController\n@RequestMapping(\"/hello\")\npublic class HelloController {\n    @Value(\"${niubi}\")\n    private String useLocalCache;\n\n    @RequestMapping(\"/index\")\n    public String index(){\n        return useLocalCache;\n    }\n}\n"],["body","\n"],["body","通过 Spring Cloud 原生注解 @RefreshScope 实现配置自动更新："],["body","\n"],["h1","启动服务发现"],["body","\n"],["headingLink","xml配置"],["heading","XML配置"],["body","\n"],["headingLink","父项目"],["heading","父项目"],["body","\n"],["body","    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n                <version>0.2.2.RELEASE</version>\n            </dependency>\n            <dependency>\n                <groupId>com.alibaba.nacos</groupId>\n                <artifactId>nacos-client</artifactId>\n                <version>1.1.0</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\t\n"],["body","\n"],["headingLink","服务提供者"],["heading","服务提供者"],["body","\n"],["body","    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>com.alibaba.nacos</groupId>\n                    <artifactId>nacos-client</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba.nacos</groupId>\n            <artifactId>nacos-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.hibernate</groupId>\n            <artifactId>hibernate-validator</artifactId>\n            <version>5.1.0.Final</version>\n        </dependency>\n    </dependencies>\n"],["body","\n"],["headingLink","服务消费者"],["heading","服务消费者"],["body","\n"],["body","    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>com.alibaba.nacos</groupId>\n                    <artifactId>nacos-client</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba.nacos</groupId>\n            <artifactId>nacos-client</artifactId>\n        </dependency>\n    </dependencies>\n"],["body","\n"],["headingLink","配置文件"],["heading","配置文件"],["body","\n"],["headingLink","服务提供者-1"],["heading","服务提供者"],["body","\n"],["body","server.port=8080\nspring.application.name=service-provider\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\n"],["body","\n"],["headingLink","服务消费者-1"],["heading","服务消费者"],["body","\n"],["body","server.port=8081\nspring.application.name=service-consumer\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\n"],["body","\n"],["headingLink","代码"],["heading","代码"],["body","\n"],["headingLink","服务提供者-2"],["heading","服务提供者"],["body","\n"],["body","package com.weisanju.nacosProvider;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class Application {\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n    @RestController\n    static class EchoController {\n        @RequestMapping(value = \"/echo/{string}\", method = RequestMethod.GET)\n        public String echo(@PathVariable String string) {\n            return \"Hello Nacos Discovery 8080\" + string;\n        }\n    }\n}\n\n"],["body","\n"],["headingLink","服务消费者-2"],["heading","服务消费者"],["body","\n"],["body","package com.weisanju.nacConsumer;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.client.loadbalancer.LoadBalanced;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RestController;\nimport org.springframework.web.client.RestTemplate;\n\n@SpringBootApplication\n@EnableDiscoveryClient\npublic class NacosConsumerApplication {\n\n    @LoadBalanced\n    @Bean\n    public RestTemplate restTemplate() {\n        return new RestTemplate();\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(NacosConsumerApplication.class, args);\n    }\n\n    @RestController\n    public static class TestController {\n\n        private final RestTemplate restTemplate;\n\n        @Autowired\n        public TestController(RestTemplate restTemplate) {\n            this.restTemplate = restTemplate;\n        }\n\n        @RequestMapping(value = \"/echo/{str}\", method = RequestMethod.GET)\n        public String echo(@PathVariable String str) {\n            return restTemplate.getForObject(\"http://service-provider/echo/\" + str, String.class);\n        }\n    }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","15.spring_SpringCloud/服务注册与发现/nacos/README.html"],["title","nacos - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","什么是 Nacos"],["body","\n"],["headingLink","简介"],["heading","简介"],["body","\n"],["body","Nacos 致力于帮助您发现、配置和管理微服务。"],["body","\n"],["body","Nacos 提供了一组简单易用的特性集，帮助您快速实现"],["body","\n\n"],["body","动态服务发现、"],["body","\n"],["body","服务配置、"],["body","\n"],["body","服务元数据"],["body","\n"],["body","流量管理"],["body","\n\n"],["body","Nacos 支持几乎所有主流类型的“服务”的发现、配置和管理"],["body","\n\n"],["body","\n"],["body","Kubernetes Service"],["body","\n"],["body","\n"],["body","\n"],["body","gRPC & Dubbo RPC Service"],["body","\n"],["body","\n"],["body","\n"],["body","Spring Cloud RESTful Service"],["body","\n"],["body","\n\n"],["headingLink","特性"],["heading","特性"],["body","\n"],["headingLink","服务发现和服务健康监测"],["heading","服务发现和服务健康监测"],["body","\n"],["body","Nacos 支持基于 DNS 和基于 RPC 的服务发现。服务提供者使用 原生SDK、OpenAPI、或一个独立的Agent TODO注册 Service 后，服务消费者可以使用DNS TODO 或HTTP&API查找和发现服务。"],["body","\n"],["body","Nacos 提供对服务的实时的健康检查，阻止向不健康的主机或服务实例发送请求"],["body","\n"],["body","Nacos 支持传输层 (PING 或 TCP)和应用层 (如 HTTP、MySQL、用户自定义）的健康检查。"],["body","\n"],["body","Nacos 提供了 agent 上报模式和服务端主动检测2种健康检查模式。Nacos 还提供了统一的健康检查仪表盘，帮助您根据健康状态管理服务的可用性及流量。"],["body","\n"],["headingLink","动态配置服务"],["heading","动态配置服务"],["body","\n"],["body","动态配置服务可以让您以中心化、外部化和动态化的方式管理所有环境的应用配置和服务配置。"],["body","\n"],["body","动态配置消除了配置变更时重新部署应用和服务的需要，让配置管理变得更加高效和敏捷。"],["body","\n"],["body","配置中心化管理让实现无状态服务变得更简单，让服务按需弹性扩展变得更容易。"],["body","\n"],["body","Nacos 提供了一个简洁易用的UI (控制台样例 Demo) 帮助您管理所有的服务和应用的配置。Nacos 还提供包括配置版本跟踪、金丝雀发布、一键回滚配置以及客户端配置更新状态跟踪在内的一系列开箱即用的配置管理特性，帮助您更安全地在生产环境中管理配置变更和降低配置变更带来的风险。"],["body","\n"],["headingLink","动态-dns-服务"],["heading","动态 DNS 服务"],["body","\n"],["body","动态 DNS 服务支持权重路由，让您更容易地实现中间层负载均衡、更灵活的路由策略、流量控制以及数据中心内网的简单DNS解析服务。动态DNS服务还能让您更容易地实现以 DNS 协议为基础的服务发现，以帮助您消除耦合到厂商私有服务发现 API 上的风险"],["body","\n"],["body","Nacos 提供了一些简单的 DNS APIs TODO 帮助您管理服务的关联域名和可用的 IP:PORT 列表."],["body","\n"],["headingLink","服务及其元数据管理"],["heading","服务及其元数据管理"],["body","\n"],["body","Nacos 能让您从微服务平台建设的视角管理数据中心的所有服务及元数据，包括管理服务的描述、生命周期、服务的静态依赖分析、服务的健康状态、服务的流量管理、路由及安全策略、服务的 SLA 以及最首要的 metrics 统计数据。"],["body","\n"],["h1","Nacos大图"],["body","\n"],["body","\n\n"],["body","特性大图：要从功能特性，非功能特性，全面介绍我们要解的问题域的特性诉求"],["body","\n"],["body","架构大图：通过清晰架构，让您快速进入 Nacos 世界"],["body","\n"],["body","业务大图：利用当前特性可以支持的业务场景，及其最佳实践"],["body","\n"],["body","生态大图：系统梳理 Nacos 和主流技术生态的关系"],["body","\n"],["body","优势大图：展示 Nacos 核心竞争力"],["body","\n"],["body","战略大图：要从战略到战术层面讲 Nacos 的宏观优势"],["body","\n\n"],["h1","快速开始"],["body","\n"],["headingLink","0版本选择"],["heading","0.版本选择"],["body","\n"],["body","您可以在Nacos的release notes及博客中找到每个版本支持的功能的介绍，当前推荐的稳定版本为1.4.1。"],["body","\n"],["headingLink","1预备环境准备"],["heading","1.预备环境准备"],["body","\n\n"],["body","64 bit OS，支持 Linux/Unix/Mac/Windows，推荐选用 Linux/Unix/Mac。"],["body","\n"],["body","64 bit JDK 1.8+；下载 & 配置。"],["body","\n"],["body","Maven 3.2.x+；下载 & 配置。"],["body","\n\n"],["headingLink","2下载源码或者安装包"],["heading","2.下载源码或者安装包"],["body","\n"],["headingLink","从-github-上下载源码方式"],["heading","从 Github 上下载源码方式"],["body","\n"],["body","git clone https://github.com/alibaba/nacos.git\ncd nacos/\nmvn -Prelease-nacos -Dmaven.test.skip=true clean install -U  \nls -al distribution/target/\n\n// change the $version to your actual path\ncd distribution/target/nacos-server-$version/nacos/bin\n"],["body","\n"],["headingLink","下载编译后压缩包方式"],["heading","下载编译后压缩包方式"],["body","\n"],["body","您可以从 最新稳定版本 下载 nacos-server-$version.zip 包。"],["body","\n"],["body","unzip nacos-server-$version.zip 或者 tar -xvf nacos-server-$version.tar.gz\ncd nacos/bin\n"],["body","\n"],["headingLink","3启动服务器"],["heading","3.启动服务器"],["body","\n"],["headingLink","linuxunixmac"],["heading","Linux/Unix/Mac"],["body","\n"],["body","启动命令(standalone代表着单机模式运行，非集群模式):"],["body","\n"],["body","sh startup.sh -m standalone\n"],["body","\n"],["body","如果您使用的是ubuntu系统，或者运行脚本报错提示[[符号找不到，可尝试如下运行："],["body","\n"],["body","bash startup.sh -m standalone\n"],["body","\n"],["headingLink","windows"],["heading","Windows"],["body","\n"],["body","启动命令(standalone代表着单机模式运行，非集群模式):"],["body","\n"],["body","cmd startup.cmd -m standalone\n"],["body","\n"],["h1","服务注册&发现和配置管理"],["body","\n"],["headingLink","服务注册"],["heading","服务注册"],["body","\n"],["body","curl -X POST 'http://127.0.0.1:8848/nacos/v1/ns/instance?serviceName=nacos.naming.serviceName&ip=20.18.7.10&port=8080'\n"],["body","\n"],["headingLink","服务发现"],["heading","服务发现"],["body","\n"],["body","curl -X GET 'http://127.0.0.1:8848/nacos/v1/ns/instance/list?serviceName=nacos.naming.serviceName'\n"],["body","\n"],["headingLink","发布配置"],["heading","发布配置"],["body","\n"],["body","curl -X POST \"http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&group=test&content=HelloWorld\"\n"],["body","\n"],["headingLink","获取配置"],["heading","获取配置"],["body","\n"],["body","curl -X GET \"http://192.168.1.172:8848/nacos/v1/cs/configs?dataId=nacos.cfg.dataId&group=test\"\n"],["body","\n"],["headingLink","关闭服务器"],["heading","关闭服务器"],["body","\n"],["body","Linux/Unix/Mac\nsh shutdown.sh\n\nWindows\ncmd shutdown.cmd\n\n或者双击shutdown.cmd运行文件。\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","15.spring_SpringCloud/Ribbon与Feign/README.html"],["title","Ribbon与Feign - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","简介"],["body","\n"],["body","Spring cloud有两种服务调用方式，一种是ribbon+restTemplate，另一种是feign，"],["body","\n"],["body","ribbon是一个负载均衡客户端，可以很好的控制htt和tcp的一些行为"],["body","\n"],["body","ribbon 已经默认实现了这些配置bean："],["body","\n\n"],["body","IClientConfig ribbonClientConfig: DefaultClientConfigImpl"],["body","\n"],["body","IRule ribbonRule: ZoneAvoidanceRule"],["body","\n"],["body","IPing ribbonPing: NoOpPing"],["body","\n"],["body","ServerList ribbonServerList: ConfigurationBasedServerList"],["body","\n"],["body","ServerListFilter ribbonServerListFilter: ZonePreferenceServerListFilter"],["body","\n"],["body","ILoadBalancer ribbonLoadBalancer: ZoneAwareLoadBalancer"],["body","\n\n"],["h1","使用方式"],["body","\n"],["headingLink","依赖申明"],["heading","依赖申明"],["body","\n"],["body","       <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n"],["body","\n"],["body","定义实现接口"],["body","\n"],["body","package com.weisanju.nacConsumer;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@Service\n@FeignClient(\"service-provider\")\npublic interface RemoteService {\n    @GetMapping(\"/time\")\n    String timeService();\n}\n"],["body","\n"],["body","启用扫描代理"],["body","\n"],["body","@EnableFeignClients(basePackages = \"com.weisanju.nacConsumer\")\n"],["body","\n"],["body","使用"],["body","\n"],["body","    public static class TestController {\n\n        private final RestTemplate restTemplate;\n        @Autowired\n        private RemoteService remoteService;\n\n        @Autowired\n        public TestController(RestTemplate restTemplate) {\n            this.restTemplate = restTemplate;\n        }\n\n        @RequestMapping(value = \"/echo/{str}\", method = RequestMethod.GET)\n        public String echo(@PathVariable String str) {\n            return restTemplate.getForObject(\"http://service-provider/echo/\" + str, String.class);\n        }\n        @RequestMapping(value = \"/myTime\", method = RequestMethod.GET)\n        public String echo() {\n            return remoteService.timeService();\n        }\n    }\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","15.spring_SpringCloud/服务注册与发现.html"],["title","服务注册与发现 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","15.spring_SpringCloud/网关.html"],["title","网关 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","15.spring_SpringCloud/README.html"],["title","SpringCloud - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","微服务的优点"],["body","\n"],["headingLink","概述"],["heading","概述"],["body","\n"],["body","“微服务”一词来源于 Martin Fowler 的《Microservices》一文。微服务是一种架构风格，即将单体应用划分为小型的服务单元，微服务之间使用 HTTP 的 API 进行资源访问与操作。"],["body","\n"],["body","在笔者看来，微服务架构的演变更像是一个公司的发展过程，从最开始的小公司，到后来的大集团。大集团可拆分出多个子公司，每个子公司的都有自己独立的业务、员工，各自发展，互不影响，合起来则是威力无穷。"],["body","\n"],["body","臃肿的系统、重复的代码、超长的启动时间带给开发人员的只有无限的埋怨，丝毫没有那种很舒服的、很流畅的写代码的感觉。他们把大部分时间都花在解决问题和项目启动上面了。"],["body","\n"],["headingLink","微服务架构的优势"],["heading","微服务架构的优势"],["body","\n"],["headingLink","服务的独立部署"],["heading","服务的独立部署"],["body","\n"],["body","每个服务都是一个独立的项目，可以独立部署，不依赖于其他服务，耦合性低。"],["body","\n"],["headingLink","服务的快速启动"],["heading","服务的快速启动"],["body","\n"],["body","拆分之后服务启动的速度必然要比拆分之前快很多，因为依赖的库少了，代码量也少了。"],["body","\n"],["headingLink","更加适合敏捷开发"],["heading","更加适合敏捷开发"],["body","\n"],["body","敏捷开发以用户的需求进化为核心，采用迭代、循序渐进的方法进行。服务拆分可以快速发布新版本，修改哪个服务只需要发布对应的服务即可，不用整体重新发布。"],["body","\n"],["headingLink","职责专一"],["heading","职责专一"],["body","\n"],["body","由专门的团队负责专门的服务,业务发展迅速时，研发人员也会越来越多，每个团队可以负责对应的业务线，服务的拆分有利于团队之间的分工。"],["body","\n"],["headingLink","服务可以动态按需扩容"],["heading","服务可以动态按需扩容"],["body","\n"],["body","当某个服务的访问量较大时，我们只需要将这个服务扩容即可。"],["body","\n"],["headingLink","代码的复用"],["heading","代码的复用"],["body","\n"],["body","每个服务都提供 REST API，所有的基础服务都必须抽出来，很多的底层实现都可以以接口方式提供。"],["body","\n"],["headingLink","微服务架构的劣势"],["heading","微服务架构的劣势"],["body","\n"],["body","微服务其实是一把双刃剑，既然有利必然也会有弊。下面我们来谈谈微服务有哪些弊端，以及能采取什么办法避免。"],["body","\n"],["headingLink","分布式部署调用的复杂性高"],["heading","分布式部署，调用的复杂性高"],["body","\n"],["body","单体应用的时候，所有模块之前的调用都是在本地进行的，在微服务中，每个模块都是独立部署的，通过 HTTP 来进行通信，这当中会产生很多问题，比如网络问题、容错问题、调用关系等。"],["body","\n"],["headingLink","独立的数据库分布式事务的挑战"],["heading","独立的数据库，分布式事务的挑战"],["body","\n"],["body","每个微服务都有自己的数据库，这就是所谓的去中心化的数据管理。这种模式的优点在于不同的服务，可以选择适合自身业务的数据，比如订单服务可以用 MySQL、评论服务可以用 Mongodb、商品搜索服务可以用 Elasticsearch。"],["body","\n"],["body","缺点就是事务的问题了，目前最理想的解决方案就是柔性事务中的最终一致性，后面的章节会给大家做具体介绍。"],["body","\n"],["headingLink","测试的难度提升"],["heading","测试的难度提升"],["body","\n"],["body","服务和服务之间通过接口来交互，当接口有改变的时候，对所有的调用方都是有影响的，这时自动化测试就显得非常重要了，如果要靠人工一个个接口去测试，那工作量就太大了。这里要强调一点，就是 API 文档的管理尤为重要。"],["body","\n"],["headingLink","运维难度的提升"],["heading","运维难度的提升"],["body","\n"],["body","我们可能只需要关注一个 Tomcat 的集群、一个 MySQL 的集群就可以了，但这在微服务架构下是行不通的。当业务增加时，服务也将越来越多，服务的部署、监控将变得非常复杂，这个时候对于运维的要求就高了。"],["body","\n"],["h1","SpringCloud是什么"],["body","\n"],["body","Spring Cloud是一系列框架的有序集合。它利用 Spring Boot 的开发便利性，巧妙地简化了分布式系统基础设施的开发，如服务注册、服务发现、配置中心、消息总线、负载均衡、断路器、数据监控等，这些都可以用 Spring Boot 的开发风格做到一键启动和部署。"],["body","\n"],["body","通俗地讲，Spring Cloud 就是用于构建微服务开发和治理的框架集合（并不是具体的一个框架），主要贡献来自 Netflix OSS。"],["body","\n"],["body","Spring Cloud 模块的相关介绍如下："],["body","\n\n"],["body","Eureka：服务注册中心，用于服务管理。"],["body","\n"],["body","Ribbon：基于客户端的负载均衡组件。"],["body","\n"],["body","Hystrix：容错框架，能够防止服务的雪崩效应。"],["body","\n"],["body","Feign：Web 服务客户端，能够简化 HTTP 接口的调用。"],["body","\n"],["body","Zuul：API 网关，提供路由转发、请求过滤等功能。"],["body","\n"],["body","Config：分布式配置管理。"],["body","\n"],["body","Sleuth：服务跟踪。"],["body","\n"],["body","Stream：构建消息驱动的微服务应用程序的框架。"],["body","\n"],["body","Bus：消息代理的集群消息总线。"],["body","\n\n"],["h1","SpringCloud版本介绍"],["body","\n"],["headingLink","与springboot版本兼容"],["heading","与springBoot版本兼容"],["body","\n"],["body","Release Train"],["body","Boot Version"],["body","\n"],["body","2020.0.x aka Ilford"],["body","2.4.x"],["body","\n"],["body","Hoxton"],["body","2.2.x, 2.3.x (Starting with SR5)"],["body","\n"],["body","Greenwich"],["body","2.1.x"],["body","\n"],["body","Finchley"],["body","2.0.x"],["body","\n"],["body","Edgware"],["body","1.5.x"],["body","\n"],["body","Dalston"],["body","1.5.x"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","15.spring_SpringCloud/网关/springCloudGateway/springCloud中的构造者模式.html"],["title","springCloud中的构造者模式.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","graph\na[RouteLocatorBuilder]\nb[RouteLocatorBuilder.Builder]\nc[Route.AsyncBuilder]\nd[RouteSpec]\ne[PredicateSpec]\na -- 专门Build Route--> b\nb -- 中间对象--> d\nd -- 构建Spec --> e\ne -- 异步PredicateBuilder -->  c\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","15.spring_SpringCloud/网关/springCloudGateway/README.html"],["title","springCloudGateway - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概述"],["body","\n"],["headingLink","简介"],["heading","简介"],["body","\n\n"],["body","SpringCloudGateWay 提供了 构建API网关的 一系列库，基于 SpringWebFlux"],["body","\n"],["body","SpringCloud Gateway 旨在提供简单 有效的 API路由，并重点关注  安全，监控/指标和弹性。"],["body","\n\n"],["h1","特性"],["body","\n\n"],["body","基于Spring5，基于响应式，基于springBoot2.0"],["body","\n"],["body","可以对任意请求属性 匹配 路由"],["body","\n"],["body","Circuit Breaker即断路器 集成"],["body","\n"],["body","服务发现客户端集成"],["body","\n"],["body","请求控制"],["body","\n"],["body","限流"],["body","\n"],["body","URL重写"],["body","\n\n"],["h1","How It Works"],["body","\n"],["body","\n\n"],["body","\n"],["body","客户端向Spring Cloud Gateway发出请求"],["body","\n"],["body","\n"],["body","\n"],["body","如果网关Handler Mapping  确定请求与路由匹配，则将其发送到网关WebHandler。"],["body","\n"],["body","\n"],["body","\n"],["body","该handler 通过特定于请求的过滤器链来运行请求。"],["body","\n"],["body","\n"],["body","\n"],["body","filters 由虚线分隔的原因是，filters 可以在发送代理请求之前和之后都运行逻辑。\n所有“前置”过滤器逻辑均被执行。然后发出代理请求。发出代理请求后，将运行“后”过滤器逻辑。"],["body","\n"],["body","\n\n"],["h1","源码分析"],["body","\n"],["body","\n"],["body","是基于 WebFlux 的 DispatcherHandler 下的一个 HandlerMapping,DispatherHandler本身不负责处理具体的业务逻辑，只负责寻找HandlerMapping"],["body","\n"],["body","\n\n"],["body","SpringGateWay 实现了 RoutePredicateHandlerMapping "],["body","\n\n"],["headingLink","类分析"],["heading","类分析"],["body","\n"],["headingLink","routepredicatehandlermapping类图"],["heading","RoutePredicateHandlerMapping类图"],["body","\n"],["body","classDiagram\nclass RoutePredicateHandlerMapping{\n\tFilteringWebHandler//负责处理具体业务逻辑,由 SimpleHandlerAdatper调用\n\tRouteLocator //负责具体路由的查找\n}\n"],["body","\n"],["headingLink","route相关类图"],["heading","Route相关类图"],["body","\n"],["body","classDiagram\nclass Route{\n\tid:路由信息\n\turi:\n\torder:排序\n\tAsyncPredicate:匹配\n\tgatewayFilters:过滤器\n\tmetadata:元数据\n}\n\nclass AsyncBuilder{\n\t\t\n}\n\nclass RouteDefinition{\n\tid:id\n\tpredicates:异步断言\n}\n\nclass GatewayFilter{\n\tfilter(ServerWebExchange exchange, GatewayFilterChain chain) Mono~Void~\n}\n<<interface>> GatewayFilter\n"],["body","\n"],["headingLink","routelocator"],["heading","RouteLocator"],["body","\n"],["body","classDiagram\nclass RouteLocator  {\n\tgetRoutes() Flux~Route~\n}\n<<interface>> RouteLocator\n\nRouteLocator..|>RouteDefinitionRouteLocator:根据Route定义 生成Route\nRouteLocator..|>CompositeRouteLocator:委托其他Locator处理\nRouteLocator..|>CachingRouteLocator:基于缓存与委托的路由查找\n"],["body","\n"],["headingLink","routedefinitionlocator"],["heading","RouteDefinitionLocator"],["body","\n"],["body","classDiagram\nclass RouteDefinitionLocator{\n\tgetRouteDefinitions() Flux~RouteDefinition~\n}\n<<interface>>RouteDefinitionLocator\n\nRouteDefinitionLocator<|--CachingRouteDefinitionLocator:基于缓存与委托的Bean定义查找\nRouteDefinitionLocator<|--CompositeRouteDefinitionLocator:自动生成路由ID与委托的Route定义查找\nRouteDefinitionLocator<|--PropertiesRouteDefinitionLocator:GatewayProperties.routes查找\nRouteDefinitionLocator<|--DiscoveryClientRouteDefinitionLocator:从服务发现客户端查找\nRouteDefinitionLocator<|--InMemoryRouteDefinitionRepository:内存的Route定义可增删\n"],["body","\n"],["headingLink","gatewayfilter"],["heading","GatewayFilter"],["body","\n"],["body","\n"],["body","由工厂模式构建"],["body","\n"],["body","\n"],["body","classDiagram\nclass GatewayFilterFactory{\n\tapply(C config) GatewayFilter\n}\n<<interface>>GatewayFilterFactory\n\nGatewayFilterFactory<|--AbstractGatewayFilterFactory:新增NameConfig\nGatewayFilterFactory<|--PrefixPathGatewayFilterFactory:添加新前缀\nGatewayFilterFactory<|--RetryGatewayFilterFactory:重试\nGatewayFilterFactory<|--RedirectToGatewayFilterFactory:重定向\nGatewayFilterFactory<|--RequestRateLimiterGatewayFilterFactory:限流\n"],["body","\n"],["headingLink","globalfilter"],["heading","GlobalFilter"],["body","\n"],["body","\n"],["body","全局过滤器"],["body","\n"],["body","\n"],["body","classDiagram\nclass GlobalFilter {\n\t filter(ServerWebExchange exchange, GatewayFilterChain chain) \tMono~Void~\n}\n<<interface>> GlobalFilter\nGlobalFilter<|--LoadBalancerClientFilter:负载均衡，进行服务发现并重组URL\nGlobalFilter<|--GatewayMetricsFilter:指标，性能统计\nGlobalFilter<|--WebClientHttpRoutingFilter:使用web Client请求\nGlobalFilter<|--ForwardRoutingFilter:转发\n"],["body","\n"],["body","AsyncBuilder：构建 响应式的 Route"],["body","\n"],["body","RouteDefinition：构建者的数据来源"],["body","\n"],["body","RouteDefinitionLocator： route定义查找"],["body","\n"],["body","Route ：路由的定义"],["body","\n"],["body","RouteLocator:查找Route"],["body","\n"],["body","重定向代码"],["body","\n"],["body","public Mono<Void> filter(ServerWebExchange exchange,\n                         GatewayFilterChain chain) {\n    if (!exchange.getResponse().isCommitted()) {\n        setResponseStatus(exchange, httpStatus);\n\n        final ServerHttpResponse response = exchange.getResponse();\n        response.getHeaders().set(HttpHeaders.LOCATION, uri.toString());\n        return response.setComplete();\n    }\n    return Mono.empty();\n}\n"],["body","\n"],["headingLink","filteringwebhandler"],["heading","FilteringWebHandler"],["body","\n"],["body","源码"],["body","\n"],["body","\t@Override\n\tpublic Mono<Void> handle(ServerWebExchange exchange) {\n\t\tRoute route = exchange.getRequiredAttribute(GATEWAY_ROUTE_ATTR);\n\t\tList<GatewayFilter> gatewayFilters = route.getFilters();\n\n\t\tList<GatewayFilter> combined = new ArrayList<>(this.globalFilters);\n\t\tcombined.addAll(gatewayFilters);\n\t\t// TODO: needed or cached?\n\t\tAnnotationAwareOrderComparator.sort(combined);\n\n\t\tif (logger.isDebugEnabled()) {\n\t\t\tlogger.debug(\"Sorted gatewayFilterFactories: \" + combined);\n\t\t}\n\n\t\treturn new DefaultGatewayFilterChain(combined).filter(exchange);\n\t}\n"],["body","\n"],["headingLink","流程图"],["heading","流程图"],["body","\n"],["body","graph\nc[DispatcherHandler]\nd[RoutePredicateHandlerMapping]\ne[FilteringWebHandler]\nf[GatewayFilter]\na[DefaultGatewayFilterChain]\n\nc-- 查找HandlerMapping -->d\nd-- 根据Locator,Predict查找Route,并保存该路由 --> e\ne-- 取出Route,取出Route上的Filter,并执行 --> f\nf-- 使用过滤器执行链,执行 --> a\n"],["body","\n"],["h1","使用案例"],["body","\n"],["body","\n"],["body","以 spring-cloud-nacos为例"],["body","\n"],["body","\n"],["headingLink","依赖"],["heading","依赖"],["body","\n"],["body","//nacos配置中心\n<!-- SpringCloud Ailibaba Nacos Config -->\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-config</artifactId>\n            <version>0.9.0.RELEASE</version>\n        </dependency>\n\n//如果不引用这个的话，无法自动加载服务注册\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-webflux</artifactId>\n        </dependency>\n\n//ncaos服务注册与发现\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>com.alibaba.nacos</groupId>\n                    <artifactId>nacos-client</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>com.alibaba.nacos</groupId>\n            <artifactId>nacos-client</artifactId>\n        </dependency>\n"],["body","\n"],["headingLink","配置"],["heading","配置"],["body","\n"],["body","server.port=8084\nspring.application.name=gateways\nspring.cloud.nacos.discovery.server-addr=127.0.0.1:8848\nspring.cloud.nacos.config.server-addr=127.0.0.1:8848\n\n//使用nacos作为注册中心\nspring.cloud.nacos.config.file-extension=yml\nspring.cloud.nacos.config.shared-dataids=${spring.application.name}.${spring.cloud.nacos.config.file-extension}\nspring.cloud.nacos.config.refreshable-dataids=${spring.application.name}.${spring.cloud.nacos.config.file-extension}\n"],["body","\n"],["headingLink","使用"],["heading","使用"],["body","\n"],["headingLink","代码配置"],["heading","代码配置"],["body","\n"],["body","package com.weisanju.gateway;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.SpringBootConfiguration;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.cloud.client.discovery.EnableDiscoveryClient;\nimport org.springframework.cloud.gateway.route.RouteLocator;\nimport org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Import;\nimport org.springframework.http.MediaType;\nimport org.springframework.web.reactive.function.BodyInserters;\nimport org.springframework.web.reactive.function.server.RequestPredicates;\nimport org.springframework.web.reactive.function.server.RouterFunction;\nimport org.springframework.web.reactive.function.server.RouterFunctions;\nimport org.springframework.web.reactive.function.server.ServerResponse;\nimport reactor.core.publisher.Mono;\n\nimport java.util.Map;\n\n@SpringBootApplication\n//@Import(AdditionalRoutesImportSelector.class)\npublic class GatewayApplication {\n    public static final String HELLO_FROM_FAKE_ACTUATOR_METRICS_GATEWAY_REQUESTS = \"hello from fake /actuator/metrics/gateway.requests\";\n    public static void main(String[] args) {\n        SpringApplication.run(GatewayApplication.class, args);\n    }\n    @Value(\"${test.uri:http://httpbin.org:80}\")\n    String uri;\n\n\n    @Value(\"${xjq}\")\n    String xjq;\n\n    @Bean\n    public RouterFunction<ServerResponse> testWhenMetricPathIsNotMeet() {\n        RouterFunction<ServerResponse> route = RouterFunctions\n                .route(RequestPredicates.path(\"/actuator/metrics/gateway.requests\"), request -> ServerResponse.ok()\n                        .body(BodyInserters.fromObject(HELLO_FROM_FAKE_ACTUATOR_METRICS_GATEWAY_REQUESTS)));\n        return route;\n    }\n\n    @Bean\n    public RouterFunction<ServerResponse> testFunRouterFunction() {\n        RouterFunction<ServerResponse> route = RouterFunctions.route(RequestPredicates.path(\"/testfun\"),\n                request -> ServerResponse.ok().body(BodyInserters.fromObject(\"hello\")));\n        return route;\n    }\n\n    @Bean\n    public RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n        //@formatter:off\n        // String uri = \"http://httpbin.org:80\";\n        // String uri = \"http://localhost:9080\";\n        return builder.routes()\n                .route(r -> r.host(\"**.abc.org\").and().path(\"/anything/png\")\n                        .filters(f ->\n                                f.prefixPath(\"/httpbin\")\n                                        .addResponseHeader(\"X-TestHeader\", \"foobar\"))\n                        .uri(uri)\n                )\n                .route(\"read_body_pred\", r -> r.host(\"*.readbody.org\")\n                        .and().readBody(String.class,\n                                s -> s.trim().equalsIgnoreCase(\"hi\"))\n                        .filters(f -> f.prefixPath(\"/httpbin\")\n                                .addResponseHeader(\"X-TestHeader\", \"read_body_pred\")\n                        ).uri(uri)\n                )\n                .route(\"rewrite_request_obj\", r -> r.host(\"*.rewriterequestobj.org\")\n                        .filters(f -> f.prefixPath(\"/httpbin\")\n                                .addResponseHeader(\"X-TestHeader\", \"rewrite_request\")\n                                .modifyRequestBody(String.class, Hello.class, (exchange, s) -> {\n                                    return Mono.just(new Hello(s.toUpperCase()));\n                                })\n                        ).uri(uri)\n                )\n                .route(\"rewrite_request_upper\", r -> r.host(\"*.rewriterequestupper.org\")\n                        .filters(f -> f.prefixPath(\"/httpbin\")\n                                .addResponseHeader(\"X-TestHeader\", \"rewrite_request_upper\")\n                                .modifyRequestBody(String.class, String.class,\n                                        (exchange, s) -> {\n                                            return Mono.just(s.toUpperCase() + s.toUpperCase());\n                                        })\n                        ).uri(uri)\n                )\n                .route(\"rewrite_response_upper\", r -> r.host(\"*.rewriteresponseupper.org\")\n                        .filters(f -> f.prefixPath(\"/httpbin\")\n                                .addResponseHeader(\"X-TestHeader\", \"rewrite_response_upper\")\n                                .modifyResponseBody(String.class, String.class,\n                                        (exchange, s) -> {\n                                            return Mono.just(s.toUpperCase());\n                                        })\n                        ).uri(uri)\n                )\n                .route(\"rewrite_empty_response\", r -> r.host(\"*.rewriteemptyresponse.org\")\n                        .filters(f -> f.prefixPath(\"/httpbin\")\n                                .addResponseHeader(\"X-TestHeader\", \"rewrite_empty_response\")\n                                .modifyResponseBody(String.class, String.class,\n                                        (exchange, s) -> {\n                                            if (s == null) {\n                                                return Mono.just(\"emptybody\");\n                                            }\n                                            return Mono.just(s.toUpperCase());\n                                        })\n\n                        ).uri(uri)\n                )\n                .route(\"rewrite_response_fail_supplier\", r -> r.host(\"*.rewriteresponsewithfailsupplier.org\")\n                        .filters(f -> f.prefixPath(\"/httpbin\")\n                                .addResponseHeader(\"X-TestHeader\", \"rewrite_response_fail_supplier\")\n                                .modifyResponseBody(String.class, String.class,\n                                        (exchange, s) -> {\n                                            if (s == null) {\n                                                return Mono.error(new IllegalArgumentException(\"this should not happen\"));\n                                            }\n                                            return Mono.just(s.toUpperCase());\n                                        })\n                        ).uri(uri)\n                )\n                .route(\"rewrite_response_obj\", r -> r.host(\"*.rewriteresponseobj.org\")\n                        .filters(f -> f.prefixPath(\"/httpbin\")\n                                .addResponseHeader(\"X-TestHeader\", \"rewrite_response_obj\")\n                                .modifyResponseBody(Map.class, String.class, MediaType.TEXT_PLAIN_VALUE,\n                                        (exchange, map) -> {\n                                            Object data = map.get(\"data\");\n                                            return Mono.just(data.toString());\n                                        })\n                                .setResponseHeader(\"Content-Type\", MediaType.TEXT_PLAIN_VALUE)\n                        ).uri(uri)\n                )\n                .route(r -> r.path(\"/image/webp\")\n                        .filters(f ->\n                                f.prefixPath(\"/httpbin\")\n                                        .addResponseHeader(\"X-AnotherHeader\", \"baz\"))\n                        .uri(uri)\n                ).route(\"xjqService\",r->r.path(\"/xjq/**\").uri(\"lb://service-xjq\"))\n/*                .route(r -> r.order(-1)\n                        .host(\"**.throttle.org\").and().path(\"/get\")\n                        .filters(f -> f.prefixPath(\"/httpbin\")\n                                .filter(new ThrottleGatewayFilter()\n                                        .setCapacity(1)\n                                        .setRefillTokens(1)\n                                        .setRefillPeriod(10)\n                                        .setRefillUnit(TimeUnit.SECONDS)))\n                        .uri(uri)\n                )*/\n                .build();\n        //@formatter:on\n    }\n    static class Hello {\n\n        String message;\n\n        Hello() {\n        }\n\n        Hello(String message) {\n            this.message = message;\n        }\n\n        public String getMessage() {\n            return message;\n        }\n\n        public void setMessage(String message) {\n            this.message = message;\n        }\n\n    }\n\n}\n"],["body","\n"],["headingLink","配置文件配置"],["heading","配置文件配置"],["body","\n"],["body","spring:\n  cloud:\n    gateway:\n      discovery:\n        locator:\n          enabled: true\n      routes:\n        # 认证中心\n        - id: xjqService\n          uri: lb://service-xjq\n          predicates:\n            - Path=/xjq/**\n        - id: xdhService\n          uri: lb://service-xdh\n          predicates:\n            - Path=/xdh/**\n"],["body","\n"],["headingLink","配置中心配置"],["heading","配置中心配置"],["body","\n"],["body",".route(\"xjqService\",r->r.path(\"/xjq/**\").uri(\"lb://service-xjq\"))\n"],["body","\n"],["headingLink","过滤器"],["heading","过滤器"],["body","\n"],["headingLink","全局过滤器"],["heading","全局过滤器"],["body","\n"],["headingLink","专用过滤器"],["heading","专用过滤器"],["body","\n"],["body","      routes:\n        # 认证中心\n        - id: xjqService\n          uri: lb://service-xjq\n          predicates:\n            - Path=/xjq/**\n          filters:\n            # 验证码处理\n            - name: BlackListUrlFilter\n              args:\n                blacklist: \n                  - /xjq/123\n                  - /xjq/456\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","03.html"],["title","函数式编程 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","32.html"],["title","分布式与微服务 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","13.spring_SpringSecurity/SpringSecurity鉴权流程.html"],["title","SpringSecurity鉴权流程.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","SpringSecurity鉴权流程"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","13.spring_SpringSecurity/spring核心逻辑.html"],["title","spring核心逻辑.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","SpringSecurity核心注解"],["body","\n"],["headingLink","enablewebsecurity"],["heading","@EnableWebSecurity"],["body","\n"],["body","@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\n@Import({ WebSecurityConfiguration.class, SpringWebMvcImportSelector.class, OAuth2ImportSelector.class,\n      HttpSecurityConfiguration.class })\n@EnableGlobalAuthentication\n@Configuration\npublic @interface EnableWebSecurity {\n\n   /**\n    * Controls debugging support for Spring Security. Default is false.\n    * @return if true, enables debug support with Spring Security\n    */\n   boolean debug() default false;\n\n}\n"],["body","\n"],["body","从注解源码可以看到，该注解有如下作用："],["body","\n\n"],["body","控制Spring Security是否使用调试模式(通过注解属性debug指定)，默认为false，表示缺省不使用调试模式。"],["body","\n"],["body","导入 WebSecurityConfiguration，用于配置Web安全过滤器FilterChainProxy，并创建过滤器链springSecurityFilterChain来保护你的Spring应用。\n\n"],["body","如果是Servlet 环境，导入WebMvcSecurityConfiguration。"],["body","\n"],["body","如果是OAuth2环境（spring-security-oauth2-client），导入OAuth2ClientConfiguration。"],["body","\n"],["body","使用注解@EnableGlobalAuthentication启用全局认证机制，即全局的AuthenticationManager，AuthenticationManager会在运行时对请求着进行身份验证。"],["body","\n\n"],["body","\n\n"],["headingLink","enableglobalauthentication"],["heading","@EnableGlobalAuthentication"],["body","\n\n"],["body","通过启用认证管理器（AuthenticationManager）来启用全局认证机制，核心逻辑就在AuthenticationConfiguration类里"],["body","\n\n"],["body","@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n@Documented\n@Import(AuthenticationConfiguration.class)\n@Configuration\npublic @interface EnableGlobalAuthentication {\n\n}\n"],["body","\n"],["headingLink","enableglobalmethodsecurity"],["heading","@EnableGlobalMethodSecurity"],["body","\n"],["body","Spring Security默认是禁用注解的，要想开启注解，需要在继承WebSecurityConfigurerAdapter的类上加@EnableGlobalMethodSecurity注解，来判断用户对某个控制层的方法是否具有访问权限。"],["body","\n"],["body","还可以在@EnableGlobalMethodSecurity中添加几个属性。"],["body","\n\n"],["body","@EnableGlobalMethodSecurity(securedEnabled=true)开启@Secured 注解过滤权限。"],["body","\n"],["body","@EnableGlobalMethodSecurity(jsr250Enabled=true)开启@RolesAllowed 注解过滤权限 。"],["body","\n"],["body","@EnableGlobalMethodSecurity(prePostEnabled=true)使用表达式时间方法级别的安全性 4个注解可用。\n\n"],["body","@PreAuthorize 在方法调用之前,基于表达式的计算结果来限制对方法的访问"],["body","\n"],["body","@PostAuthorize 允许方法调用,但是如果表达式计算结果为false,将抛出一个安全性异常"],["body","\n"],["body","@PostFilter 允许方法调用,但必须按照表达式来过滤方法的结果"],["body","\n"],["body","@PreFilter 允许方法调用,但必须在进入方法之前过滤输入值"],["body","\n\n"],["body","\n\n"],["h1","SpringSecurity核心组件"],["body","\n"],["body","在SpringSecurity中，有着许多的组件包括AuthenticationManager、AccessDesicionManager和UsernamePasswordAuthenticationFilter等。"],["body","\n"],["body","对于SpringSecurity来说，最大的两个问题就是：认证（Authentication）和授权（Authorization）。SpringSecurity框架旨在将认证从授权中剥离出来，并也有适用于二者的策略和可扩展的设计。"],["body","\n"],["headingLink","认证"],["heading","认证"],["body","\n"],["body","public interface AuthenticationManager {\n  Authentication authenticate(Authentication authentication)\n    throws AuthenticationException;\n}\n"],["body","\n"],["body","AuthenticationManger最普遍的实现类是 ProviderManager，而 ProviderManager 会将认证委托给 AuthenticationProvider。"],["body","\n"],["body","AuthenticationProvider接口和AuthenticationManager相似，但是它有一个额外的方法允许查询它支持的Authentication方式："],["body","\n"],["body","public interface AuthenticationProvider {\n\tAuthentication authenticate(Authentication authentication)\n\t\t\tthrows AuthenticationException;\n\n\tboolean supports(Class<?> authentication);\n}\n"],["body","\n"],["headingLink","授权"],["heading","授权"],["body","\n"],["body","旦认证成功，我们就可以进行授权了，它核心的策略就是AccessDecisionManager。同样的，它将授权逻辑全部委托给AccessDecisionVoter来实现。"],["body","\n"],["body","一个AccessDecisionVoter考虑一个Authentication（代表一个Principal）和一个被ConfigAttributes装饰的安全对象，这里的ConfigAttributes就是一个包含了URL以及这个URL该有权限的对象的集合。"],["body","\n"],["body","boolean supports(ConfigAttribute attribute);\n\nboolean supports(Class<?> clazz);\n\nint vote(Authentication authentication, S object,\n        Collection<ConfigAttribute> attributes);\n"],["body","\n"],["h1","SpringSecurity中的Filter"],["body","\n"],["body","除了认证和授权外，SpringSecurity的另外一个核心就是Servlet的Filter来实现的。先简单回顾下Servlet中Filter的调用原理。 下图展示了处理单个"],["body","\n"],["headingLink","servlet调用原理"],["heading","Servlet调用原理"],["body","\n"],["body","\n"],["headingLink","filterchainproxy以及其内部的filter"],["heading","FilterChainProxy以及其内部的Filter"],["body","\n"],["body","SpringSecurity在过滤器链中扮演的就是一个Filter，其类型是FilterChainProxy。但它又不是一个普通的Filter，因为FilterChainProxy中包含了额外的过滤器，每个过滤器都发挥特殊的作用。下面用一张图展示下FliterChainProxy中包含的过滤器链。"],["body","\n"],["body","\n"],["body","SpringSecurity的FilterChainProxy是以bean的形式注入到Spring容器中的，并且它是默认配置，所以在每次请求中都会存在，所以在SpringSecurity保护的应用中，每次请求都会经过FilterChainProxy。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","13.spring_SpringSecurity/README.html"],["title","SpringSecurity - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概述"],["body","\n"],["body","Spring Security为基于 Java EE 的企业软件应用程序提供全面的安全服务。特别是使用 Spring Framework 构建的项目，可以更好的使用 Spring Security 来加快构建的速度。"],["body","\n"],["body","应用程序安全性的两个主要领域是"],["body","\n\n"],["body","身份认证（authentication）：“认证”是建立主体 （principal）的过程。主体 通常是指可以在您的应用程序中执行操作的用户、设备或其他系统；"],["body","\n"],["body","授权（authorization）：或称为“访问控制（access-control），“授权”是指决定是否允许主体在应用程序中执行操作。为了到达需要授权决定的点，认证过程已经建立了主体的身份"],["body","\n\n"],["body","在认证级别，Spring Security 支持各种各样的认证模型，这些认证模型中的大多数由第三方提供，或者由诸如 IETF (因特网工程任务组) 的相关标准机构开发"],["body","\n"],["body","此外，Spring Security 提供了自己的一组认证功能。具体来说，Spring Security 目前支持所有这些技术的身份验证集成："],["body","\n"],["body","测试提交"],["body","\n"],["h1","认证方式"],["body","\n\n"],["body","HTTP BASIC 认证头（基于IETF RFC的标准）"],["body","\n"],["body","HTTP Digest 认证头（基于IETF RFC的标准）"],["body","\n"],["body","HTTP X.509 客户端证书交换（基于IETF RFC的标准）"],["body","\n"],["body","LDAP（一种非常常见的跨平台身份验证需求，特别是在大型环境中）"],["body","\n"],["body","基于表单的身份验证（用于简单的用户界面需求）"],["body","\n"],["body","OpenID 身份验证"],["body","\n"],["body","基于预先建立的请求头的验证（例如Computer Associates Siteminder）"],["body","\n"],["body","Jasig Central Authentication Service，也称为CAS，这是一个流行的开源单点登录系统"],["body","\n"],["body","远程方法调用（RMI）和HttpInvoker（Spring远程协议）的透明认证上下文传播"],["body","\n"],["body","自动“remember-me”身份验证（所以您可以勾选一个框，以避免在预定时间段内重新验证）"],["body","\n"],["body","匿名身份验证（允许每个未经身份验证的调用，来自动承担特定的安全身份）"],["body","\n"],["body","Run-as 身份验证（如果一个调用应使用不同的安全身份继续运行，这是有用的）"],["body","\n"],["body","Java认证和授权服务（Java Authentication and Authorization Service，JAAS）"],["body","\n"],["body","Java EE 容器认证（因此，如果需要，仍然可以使用容器管理身份验证）"],["body","\n"],["body","Kerberos"],["body","\n"],["body","Java Open Source Single Sign-On（JOSSO）*"],["body","\n"],["body","OpenNMS Network Management Platform *"],["body","\n"],["body","AppFuse *"],["body","\n"],["body","AndroMDA *"],["body","\n"],["body","Mule ESB *"],["body","\n"],["body","Direct Web Request （DWR）*"],["body","\n"],["body","Grails *"],["body","\n"],["body","Tapestry *"],["body","\n"],["body","JTrac *"],["body","\n"],["body","Jasypt *"],["body","\n"],["body","Roller *"],["body","\n"],["body","Elastic Path *"],["body","\n"],["body","Atlassian人群*"],["body","\n"],["body","自己创建的认证系统"],["body","\n\n"],["body","（其中加*是指由第三方提供，Spring Security 来集成）"],["body","\n"],["h1","授权方式"],["body","\n"],["body","Spring Security提供了一组深入的授权功能。有三个主要领域："],["body","\n\n"],["body","对 Web 请求进行授权"],["body","\n"],["body","授权某个方法是否可以被调用"],["body","\n"],["body","授权访问单个领域对象实例"],["body","\n\n"],["h1","Spring Security 的安装"],["body","\n"],["headingLink","最小化依赖"],["heading","最小化依赖"],["body","\n"],["body","maven"],["body","\n"],["body","<dependencies>\n    ......\n    <dependency>\n        <groupId>org.springframework.security</groupId>\n        <artifactId>spring-security-web</artifactId>\n        <version>4.2.2.RELEASE</version>\n    </dependency>\n    <dependency>\n        <groupId>org.springframework.security</groupId>\n        <artifactId>spring-security-config</artifactId>\n        <version>4.2.2.RELEASE</version>\n    </dependency>\n    ......\n</dependencies>\n"],["body","\n"],["body","Gradle"],["body","\n"],["body","dependencies {\n     ......\n    compile 'org.springframework.security:spring-security-web:4.2.2.RELEASE'\n    compile 'org.springframework.security:spring-security-config:4.2.2.RELEASE'\n    ......\n}\n"],["body","\n"],["h1","模块"],["body","\n"],["body","自 Spring 3 开始，Spring Security 将代码划分到不同的 jar 中，这使得不同的功能模块和第三方依赖显得更加清晰。"],["body","\n"],["headingLink","core---spring-security-corejar"],["heading","Core - spring-security-core.jar"],["body","\n\n"],["body","\n"],["body","包含核心的 authentication 和 authorization 的类和接口、远程支持和基础配置API。"],["body","\n"],["body","\n"],["body","\n"],["body","任何使用 Spring Security 的应用都需要引入这个 jar。支持本地应用、远程客户端、方法级别的安全和 JDBC 用户配置。主要包含的顶级包为为："],["body","\n"],["body","\n\n\n"],["body","org.springframework.security.core：核心"],["body","\n"],["body","org.springframework.security.access：访问，即 authorization 的作用"],["body","\n"],["body","org.springframework.security.authentication：认证"],["body","\n"],["body","org.springframework.security.provisioning：配置"],["body","\n\n"],["headingLink","remoting---spring-security-remotingjar"],["heading","Remoting - spring-security-remoting.jar"],["body","\n"],["body","提供与 Spring Remoting 整合的支持，你并不需要这个除非你需要使用 Spring Remoting 写一个远程客户端。主包为： org.springframework.security.remoting"],["body","\n"],["headingLink","web---spring-security-webjar"],["heading","Web - spring-security-web.jar"],["body","\n"],["body","包含 filter 和相关 Web安全的基础代码。如果我们需要使用 Spring Security 进行 Web 安全认证和基于URL的访问控制。主包为： org.springframework.security.web"],["body","\n"],["headingLink","config---spring-security-configjar"],["heading","Config - spring-security-config.jar"],["body","\n"],["body","包含安全命名空间解析代码和 Java 配置代码。 如果您使用 Spring Security XML 命名空间进行配置或 Spring Security 的 Java 配置支持，则需要它。 主包为： org.springframework.security.config。我们不应该在代码中直接使用这个jar中的类。"],["body","\n"],["headingLink","ldap---spring-security-ldapjar"],["heading","LDAP - spring-security-ldap.jar"],["body","\n"],["body","LDAP 认证和配置代码。如果你需要进行 LDAP 认证或者管理 LDAP 用户实体。顶级包为： org.springframework.security.ldap"],["body","\n"],["headingLink","acl---spring-security-acljar"],["heading","ACL - spring-security-acl.jar"],["body","\n"],["body","特定领域对象的ACL(访问控制列表)实现。使用其可以对特定对象的实例进行一些安全配置。顶级包为： org.springframework.security.acls"],["body","\n"],["headingLink","cas---spring-security-casjar"],["heading","CAS - spring-security-cas.jar"],["body","\n"],["body","Spring Security CAS 客户端集成。如果你需要使用一个单点登录服务器进行 Spring Security Web 安全认证，需要引入。顶级包为： org.springframework.security.cas"],["body","\n"],["headingLink","openid---spring-security-openidjar"],["heading","OpenID - spring-security-openid.jar"],["body","\n"],["body","OpenId Web 认证支持。基于一个外部 OpenId 服务器对用户进行验证。顶级包为： org.springframework.security.openid，需要使用 OpenID4Java."],["body","\n"],["body","一般情况下，spring-security-core和spring-security-config都会引入，在 Web 开发中，我们通常还会引入spring-security-web。"],["body","\n"],["headingLink","test---spring-security-testjar"],["heading","Test - spring-security-test.jar"],["body","\n"],["body","用于测试 Spring Security。在开发环境中，我们通常需要添加该包。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","35.源编程_Javapoet/4.Constructors.html"],["title","Constructors.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","constructors"],["heading","Constructors"],["body","\n\n"],["body","MethodSpec是一个轻微的用词不当; 它也可以用于构造函数:"],["body","\n\n"],["body","MethodSpec flux = MethodSpec.constructorBuilder()\n    .addModifiers(Modifier.PUBLIC)\n    .addParameter(String.class, \"greeting\")\n    .addStatement(\"this.$N = $N\", \"greeting\", \"greeting\")\n    .build();\n\nTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n    .addModifiers(Modifier.PUBLIC)\n    .addField(String.class, \"greeting\", Modifier.PRIVATE, Modifier.FINAL)\n    .addMethod(flux)\n    .build();\n"],["body","\n"],["body","public class HelloWorld {\n  private final String greeting;\n\n  public HelloWorld(String greeting) {\n    this.greeting = greeting;\n  }\n}\n"],["body","\n"],["body","在大多数情况下，构造器的工作方式就像方法一样。在发出代码时，JavaPoet会在输出文件中的方法之前放置构造函数。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","35.源编程_Javapoet/8.Annotations.html"],["title","Annotations.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Annotations"],["body","\n"],["body","Simple annotations are easy:"],["body","\n"],["body","MethodSpec toString = MethodSpec.methodBuilder(\"toString\")\n    .addAnnotation(Override.class)\n    .returns(String.class)\n    .addModifiers(Modifier.PUBLIC)\n    .addStatement(\"return $S\", \"Hoverboard\")\n    .build();\n"],["body","\n"],["body","  @Override\n  public String toString() {\n    return \"Hoverboard\";\n  }\n"],["body","\n"],["body","​\tUse AnnotationSpec.builder() to set properties on annotations:"],["body","\n"],["body","MethodSpec logRecord = MethodSpec.methodBuilder(\"recordEvent\")\n    .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n    .addAnnotation(AnnotationSpec.builder(Headers.class)\n        .addMember(\"accept\", \"$S\", \"application/json; charset=utf-8\")\n        .addMember(\"userAgent\", \"$S\", \"Square Cash\")\n        .build())\n    .addParameter(LogRecord.class, \"logRecord\")\n    .returns(LogReceipt.class)\n    .build();\n"],["body","\n"],["body","Which generates this annotation with accept and userAgent properties:"],["body","\n"],["body","@Headers(\n    accept = \"application/json; charset=utf-8\",\n    userAgent = \"Square Cash\"\n)\nLogReceipt recordEvent(LogRecord logRecord);\n"],["body","\n"],["body","要玩花的时候，注释值本身就可以是注释。使用 $ L进行嵌入式注释:"],["body","\n"],["body","MethodSpec logRecord = MethodSpec.methodBuilder(\"recordEvent\")\n    .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n    .addAnnotation(AnnotationSpec.builder(HeaderList.class)\n        .addMember(\"value\", \"$L\", AnnotationSpec.builder(Header.class)\n            .addMember(\"name\", \"$S\", \"Accept\")\n            .addMember(\"value\", \"$S\", \"application/json; charset=utf-8\")\n            .build())\n        .addMember(\"value\", \"$L\", AnnotationSpec.builder(Header.class)\n            .addMember(\"name\", \"$S\", \"User-Agent\")\n            .addMember(\"value\", \"$S\", \"Square Cash\")\n            .build())\n        .build())\n    .addParameter(LogRecord.class, \"logRecord\")\n    .returns(LogReceipt.class)\n    .build();\n"],["body","\n"],["body","@HeaderList({\n    @Header(name = \"Accept\", value = \"application/json; charset=utf-8\"),\n    @Header(name = \"User-Agent\", value = \"Square Cash\")\n})\nLogReceipt recordEvent(LogRecord logRecord);\n"],["body","\n"],["body","请注意，您可以使用相同的属性名称多次调用addMember() 来填充该属性的值列表。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","35.源编程_Javapoet/5.ParametersAndFields.html"],["title","ParametersAndFields.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","parameters"],["heading","Parameters"],["body","\n"],["body","Declare parameters on methods and constructors with either ParameterSpec.builder() or MethodSpec's convenient addParameter() API:"],["body","\n"],["body","ParameterSpec android = ParameterSpec.builder(String.class, \"android\")\n    .addModifiers(Modifier.FINAL)\n    .build();\n\nMethodSpec welcomeOverlords = MethodSpec.methodBuilder(\"welcomeOverlords\")\n    .addParameter(android)\n    .addParameter(String.class, \"robot\", Modifier.FINAL)\n    .build();\n"],["body","\n"],["body","void welcomeOverlords(final String android, final String robot) {\n}\n"],["body","\n"],["headingLink","fields"],["heading","Fields"],["body","\n"],["body","Like parameters, fields can be created either with builders or by using convenient helper methods:"],["body","\n"],["body","与参数一样，可以使用构建器或使用方便的帮助器方法创建字段:"],["body","\n"],["body","FieldSpec android = FieldSpec.builder(String.class, \"android\")\n    .addModifiers(Modifier.PRIVATE, Modifier.FINAL)\n    .build();\n\nTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n    .addModifiers(Modifier.PUBLIC)\n    .addField(android)\n    .addField(String.class, \"robot\", Modifier.PRIVATE, Modifier.FINAL)\n    .build();\n"],["body","\n"],["body","public class HelloWorld {\n  private final String android;\n\n  private final String robot;\n}\n"],["body","\n\n"],["body","当字段具有Javadoc、注释或字段初始化程序时，扩展的构建器形式是必需的。"],["body","\n"],["body","Field initializers use the same String.format()-like syntax as the code blocks above:"],["body","\n\n"],["body","FieldSpec android = FieldSpec.builder(String.class, \"android\")\n    .addModifiers(Modifier.PRIVATE, Modifier.FINAL)\n    .initializer(\"$S + $L\", \"Lollipop v.\", 5.0d)\n    .build();\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","35.源编程_Javapoet/3.Methods.html"],["title","Methods.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","methods"],["heading","Methods"],["body","\n\n"],["body","以上所有方法都有一个代码体"],["body","\n"],["body","Use Modifiers.ABSTRACT to get a method without any body. This is only legal if the enclosing class is either abstract or an interface."],["body","\n\n"],["body","MethodSpec flux = MethodSpec.methodBuilder(\"flux\")\n    .addModifiers(Modifier.ABSTRACT, Modifier.PROTECTED)\n    .build();\n\nTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n    .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n    .addMethod(flux)\n    .build();\n"],["body","\n"],["body","Which generates this:"],["body","\n"],["body","public abstract class HelloWorld {\n  protected abstract void flux();\n}\n"],["body","\n\n"],["body","其他修饰符在允许的情况下生效"],["body","\n"],["body","注意 使用  javax.lang.model.element.Modifier,  在Android上不可用的类"],["body","\n"],["body","此限制仅适用于代码生成代码; 输出代码到处运行: JVMs，Android和GWT。"],["body","\n"],["body","Methods also have parameters, exceptions, varargs, Javadoc, annotations, type variables, and a return type. All of these are configured with MethodSpec.Builder."],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","35.源编程_Javapoet/1.Code&ControlFlow.html"],["title","Code&ControlFlow.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","code--control-flow"],["heading","Code & Control Flow"],["body","\n\n"],["body","Most of JavaPoet's API uses plain old immutable Java objects."],["body","\n"],["body","There's also builders, method chaining and varargs to make the API friendly"],["body","\n"],["body","JavaPoet offers models for classes & interfaces (TypeSpec), fields (FieldSpec), methods & constructors (MethodSpec), parameters (ParameterSpec) and annotations (AnnotationSpec)."],["body","\n"],["body","但是方法和构造函数的主体没有被建模。没有表达式类，没有语句类或语法树节点。相反，JavaPoet将字符串用于代码块:"],["body","\n\n"],["body","MethodSpec main = MethodSpec.methodBuilder(\"main\")\n    .addCode(\"\"\n        + \"int total = 0;\\n\"\n        + \"for (int i = 0; i < 10; i++) {\\n\"\n        + \"  total += i;\\n\"\n        + \"}\\n\")\n    .build();\n"],["body","\n"],["body","void main() {\n  int total = 0;\n  for (int i = 0; i < 10; i++) {\n    total += i;\n  }\n}\n"],["body","\n\n"],["body","\n"],["body","手动分号，换行和缩进很繁琐，因此JavaPoet提供了api来简化它。"],["body","\n"],["body","\n"],["body","\n"],["body","There's addStatement() which takes care of semicolons and newline, and beginControlFlow() + endControlFlow() 。它们一起用于大括号、换行符和缩进:"],["body","\n"],["body","\n\n"],["body","MethodSpec main = MethodSpec.methodBuilder(\"main\")\n    .addStatement(\"int total = 0\")\n    .beginControlFlow(\"for (int i = 0; i < 10; i++)\")\n    .addStatement(\"total += i\")\n    .endControlFlow()\n    .build();\n"],["body","\n"],["body","这个例子很蹩脚，因为生成的代码是恒定的!假设不仅仅是将0添加到10，我们希望使操作和范围可配置。下面是一个生成方法的方法:"],["body","\n"],["body","private MethodSpec computeRange(String name, int from, int to, String op) {\n  return MethodSpec.methodBuilder(name)\n      .returns(int.class)\n      .addStatement(\"int result = 1\")\n      .beginControlFlow(\"for (int i = \" + from + \"; i < \" + to + \"; i++)\")\n      .addStatement(\"result = result \" + op + \" i\")\n      .endControlFlow()\n      .addStatement(\"return result\")\n      .build();\n}\n"],["body","\n"],["body","这是当我们调用computeRange (“multiply10to20”，10,20，“*”) 时得到的结果:"],["body","\n"],["body","int multiply10to20() {\n  int result = 1;\n  for (int i = 10; i < 20; i++) {\n    result = result * i;\n  }\n  return result;\n}\n"],["body","\n"],["body","方法生成方法!而且由于JavaPoet生成源而不是字节码，因此您可以通读它以确保它是正确的。"],["body","\n"],["body","可以有无限的控制流可能性. You can handle those options using nextControlFlow():"],["body","\n"],["body","MethodSpec main = MethodSpec.methodBuilder(\"main\")\n    .addStatement(\"long now = $T.currentTimeMillis()\", System.class)\n    .beginControlFlow(\"if ($T.currentTimeMillis() < now)\", System.class)\n    .addStatement(\"$T.out.println($S)\", System.class, \"Time travelling, woo hoo!\")\n    .nextControlFlow(\"else if ($T.currentTimeMillis() == now)\", System.class)\n    .addStatement(\"$T.out.println($S)\", System.class, \"Time stood still!\")\n    .nextControlFlow(\"else\")\n    .addStatement(\"$T.out.println($S)\", System.class, \"Ok, time still moving forward\")\n    .endControlFlow()\n    .build();\n"],["body","\n"],["body","void main() {\n  long now = System.currentTimeMillis();\n  if (System.currentTimeMillis() < now)  {\n    System.out.println(\"Time travelling, woo hoo!\");\n  } else if (System.currentTimeMillis() == now) {\n    System.out.println(\"Time stood still!\");\n  } else {\n    System.out.println(\"Ok, time still moving forward\");\n  }\n}\n"],["body","\n"],["body","Catching exceptions using try/catch is also a use case for nextControlFlow():"],["body","\n"],["body","MethodSpec main = MethodSpec.methodBuilder(\"main\")\n    .beginControlFlow(\"try\")\n    .addStatement(\"throw new Exception($S)\", \"Failed\")\n    .nextControlFlow(\"catch ($T e)\", Exception.class)\n    .addStatement(\"throw new $T(e)\", RuntimeException.class)\n    .endControlFlow()\n    .build();\n"],["body","\n"],["body","void main() {\n  try {\n    throw new Exception(\"Failed\");\n  } catch (Exception e) {\n    throw new RuntimeException(e);\n  }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","35.源编程_Javapoet/2.Placehold.html"],["title","Placehold.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","l-for-literals"],["heading","$L for Literals"],["body","\n\n"],["body","对beginControlFlow() 和addStatement的调用中的字符串连接会分散注意力。"],["body","\n"],["body","Too many operators."],["body","\n"],["body","为了解决这个问题，JavaPoet提供了一种受String.format() 启发但不兼容的语法。它接受 $L在输出中发出文字值。这就像格式化程序的 %s一样工作:"],["body","\n\n"],["body","private MethodSpec computeRange(String name, int from, int to, String op) {\n  return MethodSpec.methodBuilder(name)\n      .returns(int.class)\n      .addStatement(\"int result = 0\")\n      .beginControlFlow(\"for (int i = $L; i < $L; i++)\", from, to)\n      .addStatement(\"result = result $L i\", op)\n      .endControlFlow()\n      .addStatement(\"return result\")\n      .build();\n}\n"],["body","\n"],["body","文字直接发送到输出代码，无需转义。文字的参数可能是字符串，原语和下面描述的一些JavaPoet类型。"],["body","\n"],["headingLink","s-for-strings"],["heading","$S for Strings"],["body","\n\n"],["body","当发出包含字符串文字的代码时"],["body","\n"],["body","使用  $S 表示字符串"],["body","\n"],["body","带有包装引号和转义。下面是一个程序，它发出3个方法，每个方法都返回自己的名称:"],["body","\n\n"],["body","public static void main(String[] args) throws Exception {\n  TypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n      .addModifiers(Modifier.PUBLIC, Modifier.FINAL)\n      .addMethod(whatsMyName(\"slimShady\"))\n      .addMethod(whatsMyName(\"eminem\"))\n      .addMethod(whatsMyName(\"marshallMathers\"))\n      .build();\n\n  JavaFile javaFile = JavaFile.builder(\"com.example.helloworld\", helloWorld)\n      .build();\n\n  javaFile.writeTo(System.out);\n}\n\nprivate static MethodSpec whatsMyName(String name) {\n  return MethodSpec.methodBuilder(name)\n      .returns(String.class)\n      .addStatement(\"return $S\", name)\n      .build();\n}\n"],["body","\n"],["body","public final class HelloWorld {\n  String slimShady() {\n    return \"slimShady\";\n  }\n\n  String eminem() {\n    return \"eminem\";\n  }\n\n  String marshallMathers() {\n    return \"marshallMathers\";\n  }\n}\n"],["body","\n"],["headingLink","t-for-types"],["heading","$T for Types"],["body","\n\n"],["body","我们Java程序员喜欢我们的类型:它们使我们的代码更容易理解。JavaPoet 也是这么做的"],["body","\n"],["body","它对类型有丰富的内置支持，包括自动生成导入语句。只需使用 $T引用类型:"],["body","\n\n"],["body","MethodSpec today = MethodSpec.methodBuilder(\"today\")\n    .returns(Date.class)\n    .addStatement(\"return new $T()\", Date.class)\n    .build();\n\nTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n    .addModifiers(Modifier.PUBLIC, Modifier.FINAL)\n    .addMethod(today)\n    .build();\n\nJavaFile javaFile = JavaFile.builder(\"com.example.helloworld\", helloWorld)\n    .build();\n\njavaFile.writeTo(System.out);\n"],["body","\n"],["body","引用不存在的类"],["body","\n"],["body","我们通过Date.class来引用一个类，当我们生成代码时 恰好可用 这里有一个类似的例子，但这个引用了一个不存在  的类:"],["body","\n"],["body","ClassName hoverboard = ClassName.get(\"com.mattel\", \"Hoverboard\");\n\nMethodSpec today = MethodSpec.methodBuilder(\"tomorrow\")\n    .returns(hoverboard)\n    .addStatement(\"return new $T()\", hoverboard)\n    .build();\n"],["body","\n"],["body","package com.example.helloworld;\n\nimport com.mattel.Hoverboard;\n\npublic final class HelloWorld {\n  Hoverboard tomorrow() {\n    return new Hoverboard();\n  }\n}\n"],["body","\n\n"],["body","\n"],["body","ClassName类型非常重要，当您使用JavaPoet时，您将经常需要它。"],["body","\n"],["body","\n"],["body","\n"],["body","It can identify any declared class. Declared types are just the beginning of Java's rich type system: we also have arrays, parameterized types, wildcard types, and type variables. JavaPoet has classes for building each of these:"],["body","\n"],["body","\n\n"],["body","ClassName hoverboard = ClassName.get(\"com.mattel\", \"Hoverboard\");\nClassName list = ClassName.get(\"java.util\", \"List\");\nClassName arrayList = ClassName.get(\"java.util\", \"ArrayList\");\nTypeName listOfHoverboards = ParameterizedTypeName.get(list, hoverboard);\n\nMethodSpec beyond = MethodSpec.methodBuilder(\"beyond\")\n    .returns(listOfHoverboards)\n    .addStatement(\"$T result = new $T<>()\", listOfHoverboards, arrayList)\n    .addStatement(\"result.add(new $T())\", hoverboard)\n    .addStatement(\"result.add(new $T())\", hoverboard)\n    .addStatement(\"result.add(new $T())\", hoverboard)\n    .addStatement(\"return result\")\n    .build();\n"],["body","\n"],["body","package com.example.helloworld;\n\nimport com.mattel.Hoverboard;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic final class HelloWorld {\n  List<Hoverboard> beyond() {\n    List<Hoverboard> result = new ArrayList<>();\n    result.add(new Hoverboard());\n    result.add(new Hoverboard());\n    result.add(new Hoverboard());\n    return result;\n  }\n}\n"],["body","\n"],["headingLink","import-static"],["heading","Import static"],["body","\n"],["body","JavaPoet supports import static. It does it via explicitly collecting type member names. "],["body","\n"],["body","Let's enhance the previous example with some static sugar:"],["body","\n"],["body","...\nClassName namedBoards = ClassName.get(\"com.mattel\", \"Hoverboard\", \"Boards\");\n\nMethodSpec beyond = MethodSpec.methodBuilder(\"beyond\")\n    .returns(listOfHoverboards)\n    .addStatement(\"$T result = new $T<>()\", listOfHoverboards, arrayList)\n    .addStatement(\"result.add($T.createNimbus(2000))\", hoverboard)\n    .addStatement(\"result.add($T.createNimbus(\\\"2001\\\"))\", hoverboard)\n    .addStatement(\"result.add($T.createNimbus($T.THUNDERBOLT))\", hoverboard, namedBoards)\n    .addStatement(\"$T.sort(result)\", Collections.class)\n    .addStatement(\"return result.isEmpty() ? $T.emptyList() : result\", Collections.class)\n    .build();\n\nTypeSpec hello = TypeSpec.classBuilder(\"HelloWorld\")\n    .addMethod(beyond)\n    .build();\n\nJavaFile.builder(\"com.example.helloworld\", hello)\n    .addStaticImport(hoverboard, \"createNimbus\")\n    .addStaticImport(namedBoards, \"*\")\n    .addStaticImport(Collections.class, \"*\")\n    .build();\n"],["body","\n"],["headingLink","n-for-names"],["heading","$N for Names"],["body","\n\n"],["body","\n"],["body","生成的代码通常是自引用的。"],["body","\n"],["body","\n"],["body","\n"],["body","使用 $N通过其名称引用另一个生成的声明。下面是一个调用另一个的方法:"],["body","\n"],["body","\n\n"],["body","public String byteToHex(int b) {\n  char[] result = new char[2];\n  result[0] = hexDigit((b >>> 4) & 0xf);\n  result[1] = hexDigit(b & 0xf);\n  return new String(result);\n}\n\npublic char hexDigit(int i) {\n  return (char) (i < 10 ? i + '0' : i - 10 + 'a');\n}\n"],["body","\n"],["body","When generating the code above, we pass the hexDigit() method as an argument to the byteToHex() method using $N:"],["body","\n"],["body","MethodSpec hexDigit = MethodSpec.methodBuilder(\"hexDigit\")\n    .addParameter(int.class, \"i\")\n    .returns(char.class)\n    .addStatement(\"return (char) (i < 10 ? i + '0' : i - 10 + 'a')\")\n    .build();\n\nMethodSpec byteToHex = MethodSpec.methodBuilder(\"byteToHex\")\n    .addParameter(int.class, \"b\")\n    .returns(String.class)\n    .addStatement(\"char[] result = new char[2]\")\n    .addStatement(\"result[0] = $N((b >>> 4) & 0xf)\", hexDigit)\n    .addStatement(\"result[1] = $N(b & 0xf)\", hexDigit)\n    .addStatement(\"return new String(result)\")\n    .build();\n"],["body","\n"],["headingLink","code-block-format-strings"],["heading","Code block format strings"],["body","\n"],["body","代码块可以通过几种方式指定其占位符的值。代码块上的每个操作只能使用一种样式。"],["body","\n"],["headingLink","relative-arguments"],["heading","Relative Arguments"],["body","\n"],["body","\n"],["body","相对位置"],["body","\n"],["body","\n"],["body","将格式字符串中每个占位符的参数值传递给CodeBlock.add()。"],["body","\n"],["body","在每个示例中，我们都会生成代码说  \"I ate 3 tacos\""],["body","\n"],["body","CodeBlock.builder().add(\"I ate $L $L\", 3, \"tacos\")\n"],["body","\n"],["headingLink","positional-arguments"],["heading","Positional Arguments"],["body","\n"],["body","\n"],["body","基于1的索引"],["body","\n"],["body","\n"],["body","CodeBlock.builder().add(\"I ate $2L $1L\", \"tacos\", 3)\n"],["body","\n"],["headingLink","named-arguments"],["heading","Named Arguments"],["body","\n\n"],["body","\n"],["body","Use the syntax $argumentName:X where X is the format character and call CodeBlock.addNamed() with a map containing all argument keys in the format string. "],["body","\n"],["body","\n"],["body","\n"],["body","Argument names use characters in a-z, A-Z, 0-9, and _, "],["body","\n"],["body","\n"],["body","\n"],["body","and must start with a lowercase character."],["body","\n"],["body","\n\n"],["body","Map<String, Object> map = new LinkedHashMap<>();\nmap.put(\"food\", \"tacos\");\nmap.put(\"count\", 3);\nCodeBlock.builder().addNamed(\"I ate $count:L $food:L\", map)\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","35.源编程_Javapoet/7.AnonymousInnerClasses.html"],["title","AnonymousInnerClasses.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","anonymous-inner-classes"],["heading","Anonymous Inner Classes"],["body","\n\n"],["body","\n"],["body","In the enum code, we used TypeSpec.anonymousInnerClass(). "],["body","\n"],["body","\n"],["body","\n"],["body","Anonymous inner classes can also be used in code blocks. "],["body","\n"],["body","\n"],["body","\n"],["body","They are values that can be referenced with $L:"],["body","\n"],["body","\n\n"],["body","TypeSpec comparator = TypeSpec.anonymousClassBuilder(\"\")\n    .addSuperinterface(ParameterizedTypeName.get(Comparator.class, String.class))\n    .addMethod(MethodSpec.methodBuilder(\"compare\")\n        .addAnnotation(Override.class)\n        .addModifiers(Modifier.PUBLIC)\n        .addParameter(String.class, \"a\")\n        .addParameter(String.class, \"b\")\n        .returns(int.class)\n        .addStatement(\"return $N.length() - $N.length()\", \"a\", \"b\")\n        .build())\n    .build();\n\nTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n    .addMethod(MethodSpec.methodBuilder(\"sortByLength\")\n        .addParameter(ParameterizedTypeName.get(List.class, String.class), \"strings\")\n        .addStatement(\"$T.sort($N, $L)\", Collections.class, \"strings\", comparator)\n        .build())\n    .build();\n"],["body","\n"],["body","void sortByLength(List<String> strings) {\n  Collections.sort(strings, new Comparator<String>() {\n    @Override\n    public int compare(String a, String b) {\n      return a.length() - b.length();\n    }\n  });\n}\n"],["body","\n\n"],["body","定义匿名内部类的一个特别棘手的部分是超类构造函数的参数。"],["body","\n"],["body","在上面的代码中，我们传递了没有参数的空字符串: TypeSpec.anonymousClassBuilder (“”)。"],["body","\n"],["body","要传递不同的参数，请使用JavaPoet带有逗号的代码块语法来分隔参数。"],["body","\n\n"],["headingLink",""],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","35.源编程_Javapoet/6.InterfacesAndEnums.html"],["title","InterfacesAndEnums.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","interface"],["heading","Interface"],["body","\n"],["body","TypeSpec helloWorld = TypeSpec.interfaceBuilder(\"HelloWorld\")\n    .addModifiers(Modifier.PUBLIC)\n    .addField(FieldSpec.builder(String.class, \"ONLY_THING_THAT_IS_CONSTANT\")\n        .addModifiers(Modifier.PUBLIC, Modifier.STATIC, Modifier.FINAL)\n        .initializer(\"$S\", \"change\")\n        .build())\n    .addMethod(MethodSpec.methodBuilder(\"beep\")\n        .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n        .build())\n    .build();\n"],["body","\n"],["body","但是这些修饰符在生成代码时会被省略。"],["body","\n"],["body","这些是默认值，所以我们不需要为了javac的利益而将它们包括在内!"],["body","\n"],["body","public interface HelloWorld {\n  String ONLY_THING_THAT_IS_CONSTANT = \"change\";\n\n  void beep();\n}\n"],["body","\n"],["headingLink","enums"],["heading","Enums"],["body","\n"],["body","TypeSpec helloWorld = TypeSpec.enumBuilder(\"Roshambo\")\n    .addModifiers(Modifier.PUBLIC)\n    .addEnumConstant(\"ROCK\")\n    .addEnumConstant(\"SCISSORS\")\n    .addEnumConstant(\"PAPER\")\n    .build();\n"],["body","\n"],["body","public enum Roshambo {\n  ROCK,\n\n  SCISSORS,\n\n  PAPER\n}\n"],["body","\n"],["body","支持复杂的枚举，其中枚举值覆盖方法或调用超类构造函数。下面是一个综合的例子:"],["body","\n"],["body","TypeSpec helloWorld = TypeSpec.enumBuilder(\"Roshambo\")\n    .addModifiers(Modifier.PUBLIC)\n    .addEnumConstant(\"ROCK\", TypeSpec.anonymousClassBuilder(\"$S\", \"fist\")\n        .addMethod(MethodSpec.methodBuilder(\"toString\")\n            .addAnnotation(Override.class)\n            .addModifiers(Modifier.PUBLIC)\n            .addStatement(\"return $S\", \"avalanche!\")\n            .returns(String.class)\n            .build())\n        .build())\n    .addEnumConstant(\"SCISSORS\", TypeSpec.anonymousClassBuilder(\"$S\", \"peace\")\n        .build())\n    .addEnumConstant(\"PAPER\", TypeSpec.anonymousClassBuilder(\"$S\", \"flat\")\n        .build())\n    .addField(String.class, \"handsign\", Modifier.PRIVATE, Modifier.FINAL)\n    .addMethod(MethodSpec.constructorBuilder()\n        .addParameter(String.class, \"handsign\")\n        .addStatement(\"this.$N = $N\", \"handsign\", \"handsign\")\n        .build())\n    .build();\n"],["body","\n"],["body","public enum Roshambo {\n  ROCK(\"fist\") {\n    @Override\n    public String toString() {\n      return \"avalanche!\";\n    }\n  },\n\n  SCISSORS(\"peace\"),\n\n  PAPER(\"flat\");\n\n  private final String handsign;\n\n  Roshambo(String handsign) {\n    this.handsign = handsign;\n  }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","35.源编程_Javapoet/9.JavaDoc.html"],["title","JavaDoc.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","javadoc"],["heading","JAVADOC"],["body","\n"],["body","MethodSpec dismiss = MethodSpec.methodBuilder(\"dismiss\")\n    .addJavadoc(\"Hides {@code message} from the caller's history. Other\\n\"\n        + \"participants in the conversation will continue to see the\\n\"\n        + \"message in their own history unless they also delete it.\\n\")\n    .addJavadoc(\"\\n\")\n    .addJavadoc(\"<p>Use {@link #delete($T)} to delete the entire\\n\"\n        + \"conversation for all participants.\\n\", Conversation.class)\n    .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)\n    .addParameter(Message.class, \"message\")\n    .build();\n"],["body","\n"],["body","  /**\n   * Hides {@code message} from the caller's history. Other\n   * participants in the conversation will continue to see the\n   * message in their own history unless they also delete it.\n   *\n   * <p>Use {@link #delete(Conversation)} to delete the entire\n   * conversation for all participants.\n   */\n  void dismiss(Message message);\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","35.源编程_Javapoet/README.html"],["title","Javapoet - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","javapoet"],["heading","JavaPoet"],["body","\n\n"],["body","\n"],["body","JavaPoet is a Java API for generating .java source files."],["body","\n"],["body","\n"],["body","\n"],["body","Source file generation can be useful when doing things such as annotation processing or interacting with metadata files (e.g., database schemas, protocol formats)."],["body","\n"],["body","\n"],["body","\n"],["body","By generating code, you eliminate the need to write boilerplate while also keeping a single source of truth for the metadata."],["body","\n"],["body","\n\n"],["headingLink","example"],["heading","Example"],["body","\n"],["body","package com.example.helloworld;\n\npublic final class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello, JavaPoet!\");\n  }\n}\n\n\nMethodSpec main = MethodSpec.methodBuilder(\"main\")\n    .addModifiers(Modifier.PUBLIC, Modifier.STATIC)\n    .returns(void.class)\n    .addParameter(String[].class, \"args\")\n    .addStatement(\"$T.out.println($S)\", System.class, \"Hello, JavaPoet!\")\n    .build();\n\nTypeSpec helloWorld = TypeSpec.classBuilder(\"HelloWorld\")\n    .addModifiers(Modifier.PUBLIC, Modifier.FINAL)\n    .addMethod(main)\n    .build();\n\nJavaFile javaFile = JavaFile.builder(\"com.example.helloworld\", helloWorld)\n    .build();\n\njavaFile.writeTo(System.out);\n"],["body","\n"],["body","To declare the main method, we've created a MethodSpec \"main\" configured with modifiers, return type, parameters and code statements. "],["body","\n"],["body","We add the main method to a HelloWorld class, and then add that to a HelloWorld.java file."],["body","\n"],["body","In this case we write the file to System.out, but we could also get it as a string (JavaFile.toString()) or write it to the file system (JavaFile.writeTo())."],["body","\n"],["body","The Javadoc catalogs the complete JavaPoet API, which we explore below."],["body","\n"],["headingLink","download"],["heading","Download"],["body","\n"],["body","Download the latest .jar or depend via Maven:"],["body","\n"],["body","<dependency>\n  <groupId>com.squareup</groupId>\n  <artifactId>javapoet</artifactId>\n  <version>1.13.0</version>\n</dependency>\n"],["body","\n"],["body","or Gradle:"],["body","\n"],["body","compile 'com.squareup:javapoet:1.13.0'\n"],["body","\n"],["body","Snapshots of the development version are available in Sonatype's snapshots repository."],["body","\n"],["headingLink","javawriter"],["heading","JavaWriter"],["body","\n"],["body","JavaPoet is the successor to JavaWriter. New projects should prefer JavaPoet because it has a stronger code model: it understands types and can manage imports automatically. JavaPoet is also better suited to composition: rather than streaming the contents of a .java file top-to-bottom in a single pass, a file can be assembled as a tree of declarations."],["body","\n"],["body","JavaWriter continues to be available in GitHub and Maven Central."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","27.html"],["title","Shiro - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","08.html"],["title","jvm问题诊断与性能分析 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/maven打包方式.html"],["title","maven打包方式.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Jar"],["body","\n"],["body","打jar包方式这里有两种："],["body","\n"],["body","1、将第三方依赖包打成class类放置到jar包。"],["body","\n"],["body","2、将第三方依赖包打成jar包另外放置。"],["body","\n"],["headingLink","打成class类放置到jar包"],["heading","打成class类放置到jar包"],["body","\n"],["body","<plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-assembly-plugin</artifactId>\n                <version>2.4</version>\n                <configuration>\n                    <appendAssemblyId>false</appendAssemblyId>\n                    <finalName>searchIndex</finalName>\n                    <descriptorRefs>\n<!-- 将依赖的jar包中的class文件打进生成的jar包-->\n                        <descriptorRef>jar-with-dependencies</descriptorRef>\n                    </descriptorRefs>\n                    <archive>\n                        <manifest>\n                            <addClasspath>true</addClasspath>\n<!-- 有Main函数的类：为了生成的jar包使用命令执行时的入口函数，可灵活增加活删除-->\n                            <mainClass>com.yourcompany.yourproject.MainClass</mainClass>\n                        </manifest>\n                    </archive>\n                </configuration>\n    //绑定到生命周期的 package阶段\n                <executions>\n                    <execution>\n                        <id>make-assembly</id>\n                        <phase>package</phase>\n                        <goals>\n<!-- <goal>single</goal>-->\n                            <goal>single</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n"],["body","\n"],["headingLink","lib依赖-配置-与包分离包另外放置"],["heading","lib依赖 配置 与包分离包另外放置"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>org.example</groupId>\n    <artifactId>dispatch</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <dependencies>\n        <dependency>\n            <groupId>org.mybatis.generator</groupId>\n            <artifactId>mybatis-generator-core</artifactId>\n            <version>1.3.2</version>\n        </dependency>\n    </dependencies>\n    <build>\n        <plugins>\n            <!--打包jar-->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-jar-plugin</artifactId>\n                <configuration>\n                    <!--不打包资源文件-->\n                    <excludes>\n                        <exclude>*.**</exclude>\n                        <exclude>*/*.xml</exclude>\n                    </excludes>\n                    <archive>\n                        <manifest>\n                            <addClasspath>true</addClasspath>\n                            <!--MANIFEST.MF 中 Class-Path 加入前缀-->\n                            <classpathPrefix>lib/</classpathPrefix>\n                            <!--jar包不包含唯一版本标识-->\n                            <useUniqueVersions>false</useUniqueVersions>\n                            <!--指定入口类-->\n                            <mainClass>Demo</mainClass>\n                        </manifest>\n                        <manifestEntries>\n                            <!--MANIFEST.MF 中 Class-Path 加入资源文件目录-->\n                            <Class-Path>./resources/</Class-Path>\n                        </manifestEntries>\n                    </archive>\n                    <outputDirectory>${project.build.directory}</outputDirectory>\n                </configuration>\n            </plugin>\n\n            <!--拷贝依赖 copy-dependencies-->\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-dependency-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>copy-dependencies</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>copy-dependencies</goal>\n                        </goals>\n                        <configuration>\n                            <outputDirectory>\n                                ${project.build.directory}/lib/\n                            </outputDirectory>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n            <!--拷贝资源文件 copy-resources-->\n            <plugin>\n                <artifactId>maven-resources-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>copy-resources</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>copy-resources</goal>\n                        </goals>\n                        <configuration>\n                            <resources>\n                                <resource>\n                                    <!--<directory>src/main/resources</directory>-->\n                                    <directory>config</directory>\n                                </resource>\n                            </resources>\n                            <outputDirectory>${project.build.directory}/config</outputDirectory>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n\n\n\n            <!--spring boot repackage，依赖 maven-jar-plugin 打包的jar包 重新打包成 spring boot 的jar包-->\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <configuration>\n                    <!--重写包含依赖，包含不存在的依赖，jar里没有pom里的依赖-->\n                    <includes>\n                        <include>\n                            <groupId>null</groupId>\n                            <artifactId>null</artifactId>\n                        </include>\n                    </includes>\n                    <layout>ZIP</layout>\n                    <!--使用外部配置文件，jar包里没有资源文件-->\n                    <addResources>true</addResources>\n                    <outputDirectory>${project.build.directory}</outputDirectory>\n                </configuration>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                        <configuration>\n                            <!--配置jar包特殊标识 配置后，保留原文件，生成新文件 *-run.jar -->\n                            <!--配置jar包特殊标识 不配置，原文件命名为 *.jar.original，生成新文件 *.jar -->\n                            <!--<classifier>run</classifier>-->\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/maven.html"],["title","maven.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","maven功能"],["body","\n"],["body","构建项目"],["body","\n"],["body","文档生成"],["body","\n"],["body","报告"],["body","\n"],["body","依赖"],["body","\n"],["body","SCMS"],["body","\n"],["body","发布"],["body","\n"],["body","分发"],["body","\n"],["body","邮件列表"],["body","\n"],["h1","约定配置"],["body","\n"],["body","目录"],["body","目的"],["body","\n"],["body","${basedir}"],["body","存放pom.xml和所有的子目录"],["body","\n"],["body","${basedir}/src/main/java"],["body","项目的java源代码"],["body","\n"],["body","${basedir}/src/main/resources"],["body","项目的资源，比如说property文件，springmvc.xml"],["body","\n"],["body","${basedir}/src/test/java"],["body","项目的测试类，比如说Junit代码"],["body","\n"],["body","${basedir}/src/test/resources"],["body","测试用的资源"],["body","\n"],["body","${basedir}/src/main/webapp/WEB-INF"],["body","web应用文件目录，web项目的信息，比如存放web.xml、本地图片、jsp视图页面"],["body","\n"],["body","${basedir}/target"],["body","打包输出目录"],["body","\n"],["body","${basedir}/target/classes"],["body","编译输出目录"],["body","\n"],["body","${basedir}/target/test-classes"],["body","测试编译输出目录"],["body","\n"],["body","Test.java"],["body","Maven只会自动运行符合该命名规则的测试类"],["body","\n"],["body","~/.m2/repository"],["body","Maven默认的本地仓库目录位置"],["body","\n\n\n"],["h1","POM文件"],["body","\n"],["headingLink","可以指定的配置类型"],["heading","可以指定的配置类型"],["body","\n"],["body","项目自身信息"],["body","\n\n"],["body","modelVersion"],["body","\n"],["body","groupId,artifactId,version"],["body","\n\n"],["body","项目依赖"],["body","\n"],["body","插件"],["body","\n"],["body","执行目标"],["body","\n"],["body","项目构建profile"],["body","\n"],["body","项目版本"],["body","\n"],["body","项目开发者列表"],["body","\n"],["body","邮件列表信息"],["body","\n"],["headingLink","父pom"],["heading","父POM"],["body","\n"],["body","父（Super）POM是 Maven 默认的 POM,所有的 POM 都继承自一个父 POM"],["body","\n"],["body","包含了一些可以被继承的默认设置"],["body","\n"],["headingLink","effectivepom"],["heading","EffectivePOM"],["body","\n"],["body","mvn help:effective-pom\n"],["body","\n"],["body","经过继承、插值,变量替换之后的有效配置"],["body","\n"],["h1","POM标签大全"],["body","\n"],["headingLink","父pom-1"],["heading","父POM"],["body","\n"],["body","<parent>\n    <!--被继承的父项目的构件标识符 -->\n    <artifactId />\n    <!--被继承的父项目的全球唯一标识符 -->\n    <groupId />\n    <!--被继承的父项目的版本 -->\n    <version />\n    <!-- 父项目的pom.xml文件的相对路径。相对路径允许你选择一个不同的路径。默认值是../pom.xml。Maven首先在构建当前项目的地方寻找父项 \n        目的pom，其次在文件系统的这个位置（relativePath位置），然后在本地仓库，最后在远程仓库寻找父项目的pom。 -->\n    <relativePath />\n</parent>\n"],["body","\n"],["headingLink","项目标识"],["heading","项目标识"],["body","\n"],["body","<!--声明项目描述符遵循哪一个POM模型版本。模型本身的版本很少改变，虽然如此，但它仍然是必不可少的，这是为了当Maven引入了新的特性或者其他模型变更的时候，确保稳定性。 -->\n<modelVersion>4.0.0</modelVersion>\n<!--项目的全球唯一标识符，通常使用全限定的包名区分该项目和其他项目。并且构建时生成的路径也是由此生成， 如com.mycompany.app生成的相对路径为：/com/mycompany/app -->\n<groupId>asia.banseon</groupId>\n<!-- 构件的标识符，它和group ID一起唯一标识一个构件。换句话说，你不能有两个不同的项目拥有同样的artifact ID和groupID；在某个 \n    特定的group ID下，artifact ID也必须是唯一的。构件是项目产生的或使用的一个东西，Maven为项目产生的构件包括：JARs，源 码，二进制发布和WARs等。 -->\n<artifactId>banseon-maven2</artifactId>\n<!--项目当前版本，格式为:主版本.次版本.增量版本-限定版本号 -->\n<version>1.0-SNAPSHOT</version>\n"],["body","\n"],["headingLink","项目构建信息"],["heading","项目构建信息"],["body","\n"],["body","<!--项目产生的构件类型，例如jar、war、ear、pom。插件可以创建他们自己的构件类型，所以前面列的不是全部构件类型 -->\n<packaging>jar</packaging>\n"],["body","\n"],["headingLink","项目文档描述"],["heading","项目文档描述"],["body","\n"],["body","<!--项目的名称, Maven产生的文档用 -->\n<name>banseon-maven</name>\n<!--项目主页的URL, Maven产生的文档用 -->\n<url>http://www.baidu.com/banseon</url>\n<!-- 项目的详细描述, Maven 产生的文档用。 当这个元素能够用HTML格式描述时（例如，CDATA中的文本会被解析器忽略，就可以包含HTML标 \n    签）， 不鼓励使用纯文本描述。如果你需要修改产生的web站点的索引页面，你应该修改你自己的索引页文件，而不是调整这里的文档。 -->\n<description>A maven project to study maven.</description>\n"],["body","\n"],["headingLink","配置项目的问题管理系统"],["heading","配置项目的问题管理系统"],["body","\n"],["body","<!--项目的问题管理系统(Bugzilla, Jira, Scarab,或任何你喜欢的问题管理系统)的名称和URL，本例为 jira -->\n    <issueManagement>\n        <!--问题管理系统（例如jira）的名字， -->\n        <system>jira</system>\n        <!--该项目使用的问题管理系统的URL -->\n        <url>http://jira.baidu.com/banseon</url>\n    </issueManagement>\n"],["body","\n"],["headingLink","项目持续集成信息"],["heading","项目持续集成信息"],["body","\n"],["body","<!--项目持续集成信息 -->\n    <ciManagement>\n        <!--持续集成系统的名字，例如continuum -->\n        <system />\n        <!--该项目使用的持续集成系统的URL（如果持续集成系统有web接口的话）。 -->\n        <url />\n        <!--构建完成时，需要通知的开发者/用户的配置项。包括被通知者信息和通知条件（错误，失败，成功，警告） -->\n        <notifiers>\n            <!--配置一种方式，当构建中断时，以该方式通知用户/开发者 -->\n            <notifier>\n                <!--传送通知的途径 -->\n                <type />\n                <!--发生错误时是否通知 -->\n                <sendOnError />\n                <!--构建失败时是否通知 -->\n                <sendOnFailure />\n                <!--构建成功时是否通知 -->\n                <sendOnSuccess />\n                <!--发生警告时是否通知 -->\n                <sendOnWarning />\n                <!--不赞成使用。通知发送到哪里 -->\n                <address />\n                <!--扩展配置项 -->\n                <configuration />\n            </notifier>\n        </notifiers>\n    </ciManagement>\n"],["body","\n"],["headingLink","项目创建年份"],["heading","项目创建年份"],["body","\n"],["body","<!--项目创建年份，4位数字。当产生版权信息时需要使用这个值。 -->\n<inceptionYear />\n"],["body","\n"],["headingLink","项目相关邮件列表信息"],["heading","项目相关邮件列表信息"],["body","\n"],["body","<mailingLists>\n        <!--该元素描述了项目相关的所有邮件列表。自动产生的网站引用这些信息。 -->\n        <mailingList>\n            <!--邮件的名称 -->\n            <name>Demo</name>\n            <!--发送邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 -->\n            <post>banseon@126.com</post>\n            <!--订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 -->\n            <subscribe>banseon@126.com</subscribe>\n            <!--取消订阅邮件的地址或链接，如果是邮件地址，创建文档时，mailto: 链接会被自动创建 -->\n            <unsubscribe>banseon@126.com</unsubscribe>\n            <!--你可以浏览邮件信息的URL -->\n            <archive>http:/hi.baidu.com/banseon/demo/dev/</archive>\n        </mailingList>\n    </mailingLists>\n"],["body","\n"],["headingLink","项目开发者列表"],["heading","项目开发者列表"],["body","\n"],["body","<!--项目开发者列表 -->\n    <developers>\n        <!--某个项目开发者的信息 -->\n        <developer>\n            <!--SCM里项目开发者的唯一标识符 -->\n            <id>HELLO WORLD</id>\n            <!--项目开发者的全名 -->\n            <name>banseon</name>\n            <!--项目开发者的email -->\n            <email>banseon@126.com</email>\n            <!--项目开发者的主页的URL -->\n            <url />\n            <!--项目开发者在项目中扮演的角色，角色元素描述了各种角色 -->\n            <roles>\n                <role>Project Manager</role>\n                <role>Architect</role>\n            </roles>\n            <!--项目开发者所属组织 -->\n            <organization>demo</organization>\n            <!--项目开发者所属组织的URL -->\n            <organizationUrl>http://hi.baidu.com/banseon</organizationUrl>\n            <!--项目开发者属性，如即时消息如何处理等 -->\n            <properties>\n                <dept>No</dept>\n            </properties>\n            <!--项目开发者所在时区， -11到12范围内的整数。 -->\n            <timezone>-5</timezone>\n        </developer>\n    </developers>\n"],["body","\n"],["headingLink","项目的其他贡献者列表"],["heading","项目的其他贡献者列表"],["body","\n"],["body","<contributors>\n    <!--项目的其他贡献者。参见developers/developer元素 -->\n    <contributor>\n        <name />\n        <email />\n        <url />\n        <organization />\n        <organizationUrl />\n        <roles />\n        <timezone />\n        <properties />\n    </contributor>\n</contributors>\n"],["body","\n"],["body"," <licenses>\n        <!--描述了项目的license，用于生成项目的web站点的license页面，其他一些报表和validation也会用到该元素。 -->\n        <license>\n            <!--license用于法律上的名称 -->\n            <name>Apache 2</name>\n            <!--官方的license正文页面的URL -->\n            <url>http://www.baidu.com/banseon/LICENSE-2.0.txt</url>\n            <!--项目分发的主要方式： repo，可以从Maven库下载 manual， 用户必须手动下载和安装依赖 -->\n            <distribution>repo</distribution>\n            <!--关于license的补充信息 -->\n            <comments>A business-friendly OSS license</comments>\n        </license>\n    </licenses>\n"],["body","\n"],["headingLink","scm配置你的代码库"],["heading","SCM配置你的代码库"],["body","\n"],["body","<scm>\n        <!--SCM的URL,该URL描述了版本库和如何连接到版本库。欲知详情，请看SCMs提供的URL格式和列表。该连接只读。 -->\n        <connection>\n            scm:svn:http://svn.baidu.com/banseon/maven/banseon/banseon-maven2-trunk(dao-trunk)\n        </connection>\n        <!--给开发者使用的，类似connection元素。即该连接不仅仅只读 -->\n        <developerConnection>\n            scm:svn:http://svn.baidu.com/banseon/maven/banseon/dao-trunk\n        </developerConnection>\n        <!--当前代码的标签，在开发阶段默认为HEAD -->\n        <tag />\n        <!--指向项目的可浏览SCM库（例如ViewVC或者Fisheye）的URL。 -->\n        <url>http://svn.baidu.com/banseon</url>\n    </scm>\n"],["body","\n"],["headingLink","项目所属组织"],["heading","项目所属组织"],["body","\n"],["body","<!--描述项目所属组织的各种属性。Maven产生的文档用 -->\n<organization>\n    <!--组织的全名 -->\n    <name>demo</name>\n    <!--组织主页的URL -->\n    <url>http://www.baidu.com/banseon</url>\n</organization>\n"],["body","\n"],["headingLink","构建项目所需要的信息"],["heading","构建项目所需要的信息"],["body","\n"],["body","<build>\n        <!--该元素设置了项目源码目录，当构建项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->\n        <sourceDirectory />\n        <!--该元素设置了项目脚本源码目录，该目录和源码目录不同：绝大多数情况下，该目录下的内容 会被拷贝到输出目录(因为脚本是被解释的，而不是被编译的)。 -->\n        <scriptSourceDirectory />\n        <!--该元素设置了项目单元测试使用的源码目录，当测试项目的时候，构建系统会编译目录里的源码。该路径是相对于pom.xml的相对路径。 -->\n        <testSourceDirectory />\n        <!--被编译过的应用程序class文件存放的目录。 -->\n        <outputDirectory />\n        <!--被编译过的测试class文件存放的目录。 -->\n        <testOutputDirectory />\n        <!--使用来自该项目的一系列构建扩展 -->\n        <extensions>\n            <!--描述使用到的构建扩展。 -->\n            <extension>\n                <!--构建扩展的groupId -->\n                <groupId />\n                <!--构建扩展的artifactId -->\n                <artifactId />\n                <!--构建扩展的版本 -->\n                <version />\n            </extension>\n        </extensions>\n        <!--当项目没有规定目标（Maven2 叫做阶段）时的默认值 -->\n        <defaultGoal />\n        <!--这个元素描述了项目相关的所有资源路径列表，例如和项目相关的属性文件，这些资源被包含在最终的打包文件里。 -->\n        <resources>\n            <!--这个元素描述了项目相关或测试相关的所有资源路径 -->\n            <resource>\n                <!-- 描述了资源的目标路径。该路径相对target/classes目录（例如${project.build.outputDirectory}）。举个例 \n                    子，如果你想资源在特定的包里(org.apache.maven.messages)，你就必须该元素设置为org/apache/maven /messages。然而，如果你只是想把资源放到源码目录结构里，就不需要该配置。 -->\n                <targetPath />\n                <!--是否使用参数值代替参数名。参数值取自properties元素或者文件里配置的属性，文件在filters元素里列出。 -->\n                <filtering />\n                <!--描述存放资源的目录，该路径相对POM路径 -->\n                <directory />\n                <!--包含的模式列表，例如**/*.xml. -->\n                <includes />\n                <!--排除的模式列表，例如**/*.xml -->\n                <excludes />\n            </resource>\n        </resources>\n        <!--这个元素描述了单元测试相关的所有资源路径，例如和单元测试相关的属性文件。 -->\n        <testResources>\n            <!--这个元素描述了测试相关的所有资源路径，参见build/resources/resource元素的说明 -->\n            <testResource>\n                <targetPath />\n                <filtering />\n                <directory />\n                <includes />\n                <excludes />\n            </testResource>\n        </testResources>\n        <!--构建产生的所有文件存放的目录 -->\n        <directory />\n        <!--产生的构件的文件名，默认值是${artifactId}-${version}。 -->\n        <finalName />\n        <!--当filtering开关打开时，使用到的过滤器属性文件列表 -->\n        <filters />\n        <!--子项目可以引用的默认插件信息。该插件配置项直到被引用时才会被解析或绑定到生命周期。给定插件的任何本地配置都会覆盖这里的配置 -->\n        <pluginManagement>\n            <!--使用的插件列表 。 -->\n            <plugins>\n                <!--plugin元素包含描述插件所需要的信息。 -->\n                <plugin>\n                    <!--插件在仓库里的group ID -->\n                    <groupId />\n                    <!--插件在仓库里的artifact ID -->\n                    <artifactId />\n                    <!--被使用的插件的版本（或版本范围） -->\n                    <version />\n                    <!--是否从该插件下载Maven扩展（例如打包和类型处理器），由于性能原因，只有在真需要下载时，该元素才被设置成enabled。 -->\n                    <extensions />\n                    <!--在构建生命周期中执行一组目标的配置。每个目标可能有不同的配置。 -->\n                    <executions>\n                        <!--execution元素包含了插件执行需要的信息 -->\n                        <execution>\n                            <!--执行目标的标识符，用于标识构建过程中的目标，或者匹配继承过程中需要合并的执行目标 -->\n                            <id />\n                            <!--绑定了目标的构建生命周期阶段，如果省略，目标会被绑定到源数据里配置的默认阶段 -->\n                            <phase />\n                            <!--配置的执行目标 -->\n                            <goals />\n                            <!--配置是否被传播到子POM -->\n                            <inherited />\n                            <!--作为DOM对象的配置 -->\n                            <configuration />\n                        </execution>\n                    </executions>\n                    <!--项目引入插件所需要的额外依赖 -->\n                    <dependencies>\n                        <!--参见dependencies/dependency元素 -->\n                        <dependency>\n                            ......\n                        </dependency>\n                    </dependencies>\n                    <!--任何配置是否被传播到子项目 -->\n                    <inherited />\n                    <!--作为DOM对象的配置 -->\n                    <configuration />\n                </plugin>\n            </plugins>\n        </pluginManagement>\n        <!--使用的插件列表 -->\n        <plugins>\n            <!--参见build/pluginManagement/plugins/plugin元素 -->\n            <plugin>\n                <groupId />\n                <artifactId />\n                <version />\n                <extensions />\n                <executions>\n                    <execution>\n                        <id />\n                        <phase />\n                        <goals />\n                        <inherited />\n                        <configuration />\n                    </execution>\n                </executions>\n                <dependencies>\n                    <!--参见dependencies/dependency元素 -->\n                    <dependency>\n                        ......\n                    </dependency>\n                </dependencies>\n                <goals />\n                <inherited />\n                <configuration />\n            </plugin>\n        </plugins>\n    </build>\n"],["body","\n"],["headingLink","项目构建profile"],["heading","项目构建profile"],["body","\n"],["body","<profiles>\n        <!--根据环境参数或命令行参数激活某个构建处理 -->\n        <profile>\n            <!--构建配置的唯一标识符。即用于命令行激活，也用于在继承时合并具有相同标识符的profile。 -->\n            <id />\n            <!--自动触发profile的条件逻辑。Activation是profile的开启钥匙。profile的力量来自于它 能够在某些特定的环境中自动使用某些特定的值；这些环境通过activation元素指定。activation元素并不是激活profile的唯一方式。 -->\n            <activation>\n                <!--profile默认是否激活的标志 -->\n                <activeByDefault />\n                <!--当匹配的jdk被检测到，profile被激活。例如，1.4激活JDK1.4，1.4.0_2，而!1.4激活所有版本不是以1.4开头的JDK。 -->\n                <jdk />\n                <!--当匹配的操作系统属性被检测到，profile被激活。os元素可以定义一些操作系统相关的属性。 -->\n                <os>\n                    <!--激活profile的操作系统的名字 -->\n                    <name>Windows XP</name>\n                    <!--激活profile的操作系统所属家族(如 'windows') -->\n                    <family>Windows</family>\n                    <!--激活profile的操作系统体系结构 -->\n                    <arch>x86</arch>\n                    <!--激活profile的操作系统版本 -->\n                    <version>5.1.2600</version>\n                </os>\n                <!--如果Maven检测到某一个属性（其值可以在POM中通过${名称}引用），其拥有对应的名称和值，Profile就会被激活。如果值 字段是空的，那么存在属性名称字段就会激活profile，否则按区分大小写方式匹配属性值字段 -->\n                <property>\n                    <!--激活profile的属性的名称 -->\n                    <name>mavenVersion</name>\n                    <!--激活profile的属性的值 -->\n                    <value>2.0.3</value>\n                </property>\n                <!--提供一个文件名，通过检测该文件的存在或不存在来激活profile。missing检查文件是否存在，如果不存在则激活 profile。另一方面，exists则会检查文件是否存在，如果存在则激活profile。 -->\n                <file>\n                    <!--如果指定的文件存在，则激活profile。 -->\n                    <exists>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/\n                    </exists>\n                    <!--如果指定的文件不存在，则激活profile。 -->\n                    <missing>/usr/local/hudson/hudson-home/jobs/maven-guide-zh-to-production/workspace/\n                    </missing>\n                </file>\n            </activation>\n            <!--构建项目所需要的信息。参见build元素 -->\n            <build>\n                <defaultGoal />\n                <resources>\n                    <resource>\n                        <targetPath />\n                        <filtering />\n                        <directory />\n                        <includes />\n                        <excludes />\n                    </resource>\n                </resources>\n                <testResources>\n                    <testResource>\n                        <targetPath />\n                        <filtering />\n                        <directory />\n                        <includes />\n                        <excludes />\n                    </testResource>\n                </testResources>\n                <directory />\n                <finalName />\n                <filters />\n                <pluginManagement>\n                    <plugins>\n                        <!--参见build/pluginManagement/plugins/plugin元素 -->\n                        <plugin>\n                            <groupId />\n                            <artifactId />\n                            <version />\n                            <extensions />\n                            <executions>\n                                <execution>\n                                    <id />\n                                    <phase />\n                                    <goals />\n                                    <inherited />\n                                    <configuration />\n                                </execution>\n                            </executions>\n                            <dependencies>\n                                <!--参见dependencies/dependency元素 -->\n                                <dependency>\n                                    ......\n                                </dependency>\n                            </dependencies>\n                            <goals />\n                            <inherited />\n                            <configuration />\n                        </plugin>\n                    </plugins>\n                </pluginManagement>\n                <plugins>\n                    <!--参见build/pluginManagement/plugins/plugin元素 -->\n                    <plugin>\n                        <groupId />\n                        <artifactId />\n                        <version />\n                        <extensions />\n                        <executions>\n                            <execution>\n                                <id />\n                                <phase />\n                                <goals />\n                                <inherited />\n                                <configuration />\n                            </execution>\n                        </executions>\n                        <dependencies>\n                            <!--参见dependencies/dependency元素 -->\n                            <dependency>\n                                ......\n                            </dependency>\n                        </dependencies>\n                        <goals />\n                        <inherited />\n                        <configuration />\n                    </plugin>\n                </plugins>\n            </build>\n            <!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 -->\n            <modules />\n            <!--发现依赖和扩展的远程仓库列表。 -->\n            <repositories>\n                <!--参见repositories/repository元素 -->\n                <repository>\n                    <releases>\n                        <enabled />\n                        <updatePolicy />\n                        <checksumPolicy />\n                    </releases>\n                    <snapshots>\n                        <enabled />\n                        <updatePolicy />\n                        <checksumPolicy />\n                    </snapshots>\n                    <id />\n                    <name />\n                    <url />\n                    <layout />\n                </repository>\n            </repositories>\n            <!--发现插件的远程仓库列表，这些插件用于构建和报表 -->\n            <pluginRepositories>\n                <!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 -->\n                <pluginRepository>\n                    <releases>\n                        <enabled />\n                        <updatePolicy />\n                        <checksumPolicy />\n                    </releases>\n                    <snapshots>\n                        <enabled />\n                        <updatePolicy />\n                        <checksumPolicy />\n                    </snapshots>\n                    <id />\n                    <name />\n                    <url />\n                    <layout />\n                </pluginRepository>\n            </pluginRepositories>\n            <!--该元素描述了项目相关的所有依赖。 这些依赖组成了项目构建过程中的一个个环节。它们自动从项目定义的仓库中下载。要获取更多信息，请看项目依赖机制。 -->\n            <dependencies>\n                <!--参见dependencies/dependency元素 -->\n                <dependency>\n                    ......\n                </dependency>\n            </dependencies>\n            <!--不赞成使用. 现在Maven忽略该元素. -->\n            <reports />\n            <!--该元素包括使用报表插件产生报表的规范。当用户执行\"mvn site\"，这些报表就会运行。 在页面导航栏能看到所有报表的链接。参见reporting元素 -->\n            <reporting>\n                ......\n            </reporting>\n            <!--参见dependencyManagement元素 -->\n            <dependencyManagement>\n                <dependencies>\n                    <!--参见dependencies/dependency元素 -->\n                    <dependency>\n                        ......\n                    </dependency>\n                </dependencies>\n            </dependencyManagement>\n            <!--参见distributionManagement元素 -->\n            <distributionManagement>\n                ......\n            </distributionManagement>\n            <!--参见properties元素 -->\n            <properties />\n        </profile>\n    </profiles>\n"],["body","\n"],["headingLink","模块依赖配置"],["heading","模块依赖配置"],["body","\n"],["body"," <!--模块（有时称作子项目） 被构建成项目的一部分。列出的每个模块元素是指向该模块的目录的相对路径 -->\n    <modules />\n"],["body","\n"],["headingLink","项目依赖的远程仓库"],["heading","项目依赖的远程仓库"],["body","\n"],["body"," <repositories>\n        <!--包含需要连接到远程仓库的信息 -->\n        <repository>\n            <!--如何处理远程仓库里发布版本的下载 -->\n            <releases>\n                <!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 -->\n                <enabled />\n                <!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 -->\n                <updatePolicy />\n                <!--当Maven验证构件校验文件失败时该怎么做：ignore（忽略），fail（失败），或者warn（警告）。 -->\n                <checksumPolicy />\n            </releases>\n            <!-- 如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的 \n                策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 -->\n            <snapshots>\n                <enabled />\n                <updatePolicy />\n                <checksumPolicy />\n            </snapshots>\n            <!--远程仓库唯一标识符。可以用来匹配在settings.xml文件里配置的远程仓库 -->\n            <id>banseon-repository-proxy</id>\n            <!--远程仓库名称 -->\n            <name>banseon-repository-proxy</name>\n            <!--远程仓库URL，按protocol://hostname/path形式 -->\n            <url>http://192.168.1.169:9999/repository/</url>\n            <!-- 用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然 \n                而，Maven 1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 -->\n            <layout>default</layout>\n        </repository>\n    </repositories>\n"],["body","\n"],["headingLink","插件的远程仓库"],["heading","插件的远程仓库"],["body","\n"],["body","<pluginRepositories>\n        <!--包含需要连接到远程插件仓库的信息.参见repositories/repository元素 -->\n        <pluginRepository>\n            ......\n        </pluginRepository>\n    </pluginRepositories>\n"],["body","\n"],["headingLink","项目相关的所有依赖"],["heading","项目相关的所有依赖"],["body","\n"],["body","<dependencies>\n        <dependency>\n            <!--依赖的group ID -->\n            <groupId>org.apache.maven</groupId>\n            <!--依赖的artifact ID -->\n            <artifactId>maven-artifact</artifactId>\n            <!--依赖的版本号。 在Maven 2里, 也可以配置成版本号的范围。 -->\n            <version>3.8.1</version>\n            <!-- 依赖类型，默认类型是jar。它通常表示依赖的文件的扩展名，但也有例外。一个类型可以被映射成另外一个扩展名或分类器。类型经常和使用的打包方式对应， \n                尽管这也有例外。一些类型的例子：jar，war，ejb-client和test-jar。如果设置extensions为 true，就可以在 plugin里定义新的类型。所以前面的类型的例子不完整。 -->\n            <type>jar</type>\n            <!-- 依赖的分类器。分类器可以区分属于同一个POM，但不同构建方式的构件。分类器名被附加到文件名的版本号后面。例如，如果你想要构建两个单独的构件成 \n                JAR，一个使用Java 1.4编译器，另一个使用Java 6编译器，你就可以使用分类器来生成两个单独的JAR构件。 -->\n            <classifier></classifier>\n            <!--依赖范围。在项目发布过程中，帮助决定哪些构件被包括进来。欲知详情请参考依赖机制。 - compile ：默认范围，用于编译 - provided：类似于编译，但支持你期待jdk或者容器提供，类似于classpath \n                - runtime: 在执行时需要使用 - test: 用于test任务时使用 - system: 需要外在提供相应的元素。通过systemPath来取得 \n                - systemPath: 仅用于范围为system。提供相应的路径 - optional: 当项目自身被依赖时，标注依赖是否传递。用于连续依赖时使用 -->\n            <scope>test</scope>\n            <!--仅供system范围使用。注意，不鼓励使用这个元素，并且在新的版本中该元素可能被覆盖掉。该元素为依赖规定了文件系统上的路径。需要绝对路径而不是相对路径。推荐使用属性匹配绝对路径，例如${java.home}。 -->\n            <systemPath></systemPath>\n            <!--当计算传递依赖时， 从依赖构件列表里，列出被排除的依赖构件集。即告诉maven你只依赖指定的项目，不依赖项目的依赖。此元素主要用于解决版本冲突问题 -->\n            <exclusions>\n                <exclusion>\n                    <artifactId>spring-core</artifactId>\n                    <groupId>org.springframework</groupId>\n                </exclusion>\n            </exclusions>\n            <!--可选依赖，如果你在项目B中把C依赖声明为可选，你就需要在依赖于B的项目（例如项目A）中显式的引用对C的依赖。可选依赖阻断依赖的传递性。 -->\n            <optional>true</optional>\n        </dependency>\n    </dependencies>\n"],["body","\n"],["headingLink","使用报表插件产生报表的规范"],["heading","使用报表插件产生报表的规范"],["body","\n"],["body","<reporting>\n        <!--true，则，网站不包括默认的报表。这包括\"项目信息\"菜单中的报表。 -->\n        <excludeDefaults />\n        <!--所有产生的报表存放到哪里。默认值是${project.build.directory}/site。 -->\n        <outputDirectory />\n        <!--使用的报表插件和他们的配置。 -->\n        <plugins>\n            <!--plugin元素包含描述报表插件需要的信息 -->\n            <plugin>\n                <!--报表插件在仓库里的group ID -->\n                <groupId />\n                <!--报表插件在仓库里的artifact ID -->\n                <artifactId />\n                <!--被使用的报表插件的版本（或版本范围） -->\n                <version />\n                <!--任何配置是否被传播到子项目 -->\n                <inherited />\n                <!--报表插件的配置 -->\n                <configuration />\n                <!--一组报表的多重规范，每个规范可能有不同的配置。一个规范（报表集）对应一个执行目标 。例如，有1，2，3，4，5，6，7，8，9个报表。1，2，5构成A报表集，对应一个执行目标。2，5，8构成B报表集，对应另一个执行目标 -->\n                <reportSets>\n                    <!--表示报表的一个集合，以及产生该集合的配置 -->\n                    <reportSet>\n                        <!--报表集合的唯一标识符，POM继承时用到 -->\n                        <id />\n                        <!--产生报表集合时，被使用的报表的配置 -->\n                        <configuration />\n                        <!--配置是否被继承到子POMs -->\n                        <inherited />\n                        <!--这个集合里使用到哪些报表 -->\n                        <reports />\n                    </reportSet>\n                </reportSets>\n            </plugin>\n        </plugins>\n    </reporting>\n"],["body","\n"],["headingLink","继承自该项目的所有子项目的默认依赖信息"],["heading","继承自该项目的所有子项目的默认依赖信息"],["body","\n"],["body","这部分的依赖信息不会被立即解析,而是当子项目声明一个依赖（必须描述group ID和 artifact ID信息)\n如果group ID和artifact ID以外的一些信息没有描述，则通过group ID和artifact ID 匹配到这里的依赖，并使用这里的依赖信息\n<dependencyManagement>\n        <dependencies>\n            <!--参见dependencies/dependency元素 -->\n            <dependency>\n                ......\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n"],["body","\n"],["headingLink","项目分发信息"],["heading","项目分发信息"],["body","\n"],["body","<!--项目分发信息，在执行mvn deploy后表示要发布的位置。有了这些信息就可以把网站部署到远程服务器或者把构件部署到远程仓库。 -->\n    <distributionManagement>\n        <!--部署项目产生的构件到远程仓库需要的信息 -->\n        <repository>\n            <!--是分配给快照一个唯一的版本号（由时间戳和构建流水号）？还是每次都使用相同的版本号？参见repositories/repository元素 -->\n            <uniqueVersion />\n            <id>banseon-maven2</id>\n            <name>banseon maven2</name>\n            <url>file://${basedir}/target/deploy</url>\n            <layout />\n        </repository>\n        <!--构件的快照部署到哪里？如果没有配置该元素，默认部署到repository元素配置的仓库，参见distributionManagement/repository元素 -->\n        <snapshotRepository>\n            <uniqueVersion />\n            <id>banseon-maven2</id>\n            <name>Banseon-maven2 Snapshot Repository</name>\n            <url>scp://svn.baidu.com/banseon:/usr/local/maven-snapshot</url>\n            <layout />\n        </snapshotRepository>\n        <!--部署项目的网站需要的信息 -->\n        <site>\n            <!--部署位置的唯一标识符，用来匹配站点和settings.xml文件里的配置 -->\n            <id>banseon-site</id>\n            <!--部署位置的名称 -->\n            <name>business api website</name>\n            <!--部署位置的URL，按protocol://hostname/path形式 -->\n            <url>\n                scp://svn.baidu.com/banseon:/var/www/localhost/banseon-web\n            </url>\n        </site>\n        <!--项目下载页面的URL。如果没有该元素，用户应该参考主页。使用该元素的原因是：帮助定位那些不在仓库里的构件（由于license限制）。 -->\n        <downloadUrl />\n        <!--如果构件有了新的group ID和artifact ID（构件移到了新的位置），这里列出构件的重定位信息。 -->\n        <relocation>\n            <!--构件新的group ID -->\n            <groupId />\n            <!--构件新的artifact ID -->\n            <artifactId />\n            <!--构件新的版本号 -->\n            <version />\n            <!--显示给用户的，关于移动的额外信息，例如原因。 -->\n            <message />\n        </relocation>\n        <!-- 给出该构件在远程仓库的状态。不得在本地项目中设置该元素，因为这是工具自动更新的。有效的值有：none（默认），converted（仓库管理员从 \n            Maven 1 POM转换过来），partner（直接从伙伴Maven 2仓库同步过来），deployed（从Maven 2实例部 署），verified（被核实时正确的和最终的）。 -->\n        <status />\n    </distributionManagement>\n"],["body","\n"],["body","<!--以值替代名称，Properties可以在整个POM中使用，也可以作为触发条件（见settings.xml配置文件里activation元素的说明）。格式是<name>value</name>。 -->\n<properties />\n"],["body","\n"],["h1","Maven 构建生命周期"],["body","\n"],["headingLink","典型的项目周期"],["heading","典型的项目周期"],["body","\n"],["body","一个典型的 Maven 构建（build）生命周期是由以下几个阶段的序列组成的"],["body","\n"],["body","阶段"],["body","处理"],["body","描述"],["body","\n"],["body","验证 validate"],["body","验证项目"],["body","验证项目是否正确且所有必须信息是可用的"],["body","\n"],["body","编译 compile"],["body","执行编译"],["body","源代码编译在此阶段完成"],["body","\n"],["body","测试 Test"],["body","测试"],["body","使用适当的单元测试框架（例如JUnit）运行测试。"],["body","\n"],["body","包装 package"],["body","打包"],["body","创建JAR/WAR包如在 pom.xml 中定义提及的包"],["body","\n"],["body","检查 verify"],["body","检查"],["body","对集成测试的结果进行检查，以保证质量达标"],["body","\n"],["body","安装 install"],["body","安装"],["body","安装打包的项目到本地仓库，以供其他项目使用"],["body","\n"],["body","部署 deploy"],["body","部署"],["body","拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程"],["body","\n\n\n"],["headingLink","三个标准的生命周期"],["heading","三个标准的生命周期"],["body","\n\n"],["body","clean：项目清理的处理"],["body","\n"],["body","default(或 build)：项目部署的处理"],["body","\n"],["body","site：项目站点文档创建的处理"],["body","\n\n"],["headingLink","构建阶段由插件目标构成"],["heading","构建阶段由插件目标构成"],["body","\n\n"],["body","\n"],["body","一个插件目标代表一个特定的任务（比构建阶段更为精细）"],["body","\n"],["body","\n"],["body","\n"],["body","这些目标可能被绑定到多个阶段或者无绑定"],["body","\n"],["body","\n"],["body","\n"],["body","不绑定到任何构建阶段的目标可以在构建生命周期之外通过直接调用执行"],["body","\n"],["body","\n"],["body","\n"],["body","这些目标的执行顺序取决于调用目标和构建阶段的顺序"],["body","\n"],["body","\n\n"],["body","clean 和 pakage 是构建阶段，dependency:copy-dependencies 是目标\n\nmvn clean dependency:copy-dependencies package\n"],["body","\n"],["headingLink","clean-生命周期"],["heading","Clean 生命周期"],["body","\n\n"],["body","pre-clean：执行一些需要在clean之前完成的工作"],["body","\n"],["body","clean：移除所有上一次构建生成的文件"],["body","\n"],["body","post-clean：执行一些需要在clean之后立刻完成的工作"],["body","\n\n"],["body","在一个生命周期中，运行某个阶段的时候，它之前的所有阶段都会被运行，也就是说，如果执行 mvn clean 将运行以下两个生命周期阶段："],["body","\n"],["body","当我们执行 mvn post-clean 命令时，Maven 调用 clean 生命周期\npre-clean, clean\n\n如果我们运行 mvn post-clean ，则运行以下三个生命周期阶段：\npre-clean, clean, post-clean\n"],["body","\n\n"],["body","example"],["body","\n\n"],["body","<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>com.companyname.projectgroup</groupId>\n<artifactId>project</artifactId>\n<version>1.0</version>\n<build>\n<plugins>\n   <plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-antrun-plugin</artifactId>\n   <version>1.1</version>\n   <executions>\n      <execution>\n         <id>id.pre-clean</id>\n         <phase>pre-clean</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>pre-clean phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n      <execution>\n         <id>id.clean</id>\n         <phase>clean</phase>\n         <goals>\n          <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>clean phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n      <execution>\n         <id>id.post-clean</id>\n         <phase>post-clean</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>post-clean phase</echo>\n            </tasks>\n         </configuration>\n      </execution>\n   </executions>\n   </plugin>\n</plugins>\n</build>\n</project>\n"],["body","\n"],["headingLink","default-build-生命周期"],["heading","Default (Build) 生命周期"],["body","\n"],["body","生命周期阶段"],["body","描述"],["body","\n"],["body","validate（校验）"],["body","校验项目是否正确并且所有必要的信息可以完成项目的构建过程。"],["body","\n"],["body","initialize（初始化）"],["body","初始化构建状态，比如设置属性值。"],["body","\n"],["body","generate-sources（生成源代码）"],["body","生成包含在编译阶段中的任何源代码。"],["body","\n"],["body","process-sources（处理源代码）"],["body","处理源代码，比如说，过滤任意值。"],["body","\n"],["body","generate-resources（生成资源文件）"],["body","生成将会包含在项目包中的资源文件。"],["body","\n"],["body","process-resources （处理资源文件）"],["body","复制和处理资源到目标目录，为打包阶段最好准备。"],["body","\n"],["body","compile（编译）"],["body","编译项目的源代码。"],["body","\n"],["body","process-classes（处理类文件）"],["body","处理编译生成的文件，比如说对Java class文件做字节码改善优化。"],["body","\n"],["body","generate-test-sources（生成测试源代码）"],["body","生成包含在编译阶段中的任何测试源代码。"],["body","\n"],["body","process-test-sources（处理测试源代码）"],["body","处理测试源代码，比如说，过滤任意值。"],["body","\n"],["body","generate-test-resources（生成测试资源文件）"],["body","为测试创建资源文件。"],["body","\n"],["body","process-test-resources（处理测试资源文件）"],["body","复制和处理测试资源到目标目录。"],["body","\n"],["body","test-compile（编译测试源码）"],["body","编译测试源代码到测试目标目录."],["body","\n"],["body","process-test-classes（处理测试类文件）"],["body","处理测试源码编译生成的文件。"],["body","\n"],["body","test（测试）"],["body","使用合适的单元测试框架运行测试（Juint是其中之一）。"],["body","\n"],["body","prepare-package（准备打包）"],["body","在实际打包之前，执行任何的必要的操作为打包做准备。"],["body","\n"],["body","package（打包）"],["body","将编译后的代码打包成可分发格式的文件，比如JAR、WAR或者EAR文件。"],["body","\n"],["body","pre-integration-test（集成测试前）"],["body","在执行集成测试前进行必要的动作。比如说，搭建需要的环境。"],["body","\n"],["body","integration-test（集成测试）"],["body","处理和部署项目到可以运行集成测试环境中。"],["body","\n"],["body","post-integration-test（集成测试后）"],["body","在执行集成测试完成后进行必要的动作。比如说，清理集成测试环境。"],["body","\n"],["body","verify （验证）"],["body","运行任意的检查来验证项目包有效且达到质量标准。"],["body","\n"],["body","install（安装）"],["body","安装项目包到本地仓库，这样项目包可以用作其他本地项目的依赖。"],["body","\n"],["body","deploy（部署）"],["body","将最终的项目包复制到远程仓库中与其他开发者和项目共享。"],["body","\n\n\n"],["body","mvn clean deploy可以用来干净的构建项目\n"],["body","\n"],["headingLink","site-生命周期"],["heading","Site 生命周期"],["body","\n\n"],["body","pre-site：执行一些需要在生成站点文档之前完成的工作"],["body","\n"],["body","site：生成项目的站点文档"],["body","\n"],["body","post-site： 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备"],["body","\n"],["body","site-deploy：将生成的站点文档部署到特定的服务器上"],["body","\n\n"],["h1","maven设置多环境"],["body","\n"],["body","多环境设置"],["body","\n"],["h1","Maven 仓库"],["body","\n"],["headingLink","三种类型maven-仓库"],["heading","三种类型Maven 仓库"],["body","\n\n"],["body","本地（local）"],["body","\n"],["body","中央（central）"],["body","\n"],["body","远程（remote）"],["body","\n\n"],["headingLink","本地仓库"],["heading","本地仓库"],["body","\n\n"],["body","\n"],["body","每个用户在自己的用户目录下都有一个路径名为 .m2/respository/ 的仓库目录。"],["body","\n"],["body","\n"],["body","\n"],["body","要修改默认位置，在 %M2_HOME%\\conf 目录中的 Maven 的 settings.xml 文件中定义另一个路径。"],["body","\n"],["body","\n"],["body","\n"],["body","<localRepository>C:/MyLocalRepository</localRepository>"],["body","\n"],["body","\n\n"],["headingLink","中央仓库"],["heading","中央仓库"],["body","\n\n"],["body","这个仓库由 Maven 社区管理。"],["body","\n"],["body","不需要配置。"],["body","\n"],["body","需要通过网络才能访问。"],["body","\n\n"],["headingLink","远程仓库"],["heading","远程仓库"],["body","\n"],["body","   <repositories>\n      <repository>\n         <id>companyname.lib1</id>\n         <url>http://download.companyname.org/maven2/lib1</url>\n      </repository>\n      <repository>\n         <id>companyname.lib2</id>\n         <url>http://download.companyname.org/maven2/lib2</url>\n      </repository>\n   </repositories>\n"],["body","\n"],["headingLink","maven-依赖搜索顺序"],["heading","Maven 依赖搜索顺序"],["body","\n\n"],["body","步骤 1 － 在本地仓库中搜索，如果找不到，执行步骤 2，如果找到了则执行其他操作。"],["body","\n"],["body","步骤 2 － 在中央仓库中搜索，如果找不到，并且有一个或多个远程仓库已经设置，则执行步骤 4，如果找到了则下载到本地仓库中以备将来引用。"],["body","\n"],["body","步骤 3 － 如果远程仓库没有被设置，Maven 将简单的停滞处理并抛出错误（无法找到依赖的文件）。"],["body","\n"],["body","步骤 4 － 在一个或多个远程仓库中搜索依赖的文件，如果找到则下载到本地仓库以备将来引用，否则 Maven 将停止处理并抛出错误（无法找到依赖的文件）。"],["body","\n\n"],["body","<repositories>  \n        <repository>  \n            <id>alimaven</id>  \n            <name>aliyun maven</name>  \n            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>  \n            <releases>  \n                <enabled>true</enabled>  \n            </releases>  \n            <snapshots>  \n                <enabled>false</enabled>  \n            </snapshots>  \n        </repository>  \n</repositories>\n"],["body","\n"],["h1","Maven 插件"],["body","\n"],["body","Maven 生命周期的每一个阶段的具体实现都是由 Maven 插件实现的。"],["body","\n"],["body","Maven 实际上是一个依赖插件执行的框架，每个任务实际上是由插件完成。Maven 插件通常被用来："],["body","\n\n"],["body","创建 jar 文件"],["body","\n"],["body","创建 war 文件"],["body","\n"],["body","编译代码文件"],["body","\n"],["body","代码单元测试"],["body","\n"],["body","创建工程文档"],["body","\n"],["body","创建工程报告"],["body","\n\n"],["headingLink","插件执行命令"],["heading","插件执行命令"],["body","\n"],["body","mvn [plugin-name]:[goal-name]\n\nmvn compiler:compile\n"],["body","\n"],["headingLink","插件类型"],["heading","插件类型"],["body","\n"],["body","类型"],["body","描述"],["body","\n"],["body","Build plugins"],["body","在构建时执行，并在 pom.xml 的 元素中配置。"],["body","\n"],["body","Reporting plugins"],["body","在网站生成过程中执行，并在 pom.xml 的 元素中配置。"],["body","\n\n\n"],["headingLink","常用插件列表"],["heading","常用插件列表"],["body","\n"],["body","插件"],["body","描述"],["body","\n"],["body","clean"],["body","构建之后清理目标文件。删除目标目录。"],["body","\n"],["body","compiler"],["body","编译 Java 源文件。"],["body","\n"],["body","surefile"],["body","运行 JUnit 单元测试。创建测试报告。"],["body","\n"],["body","jar"],["body","从当前工程中构建 JAR 文件。"],["body","\n"],["body","war"],["body","从当前工程中构建 WAR 文件。"],["body","\n"],["body","javadoc"],["body","为工程生成 Javadoc。"],["body","\n"],["body","antrun"],["body","从构建过程的任意一个阶段中运行一个 ant 任务的集合。"],["body","\n\n\n"],["headingLink","插件使用example"],["heading","插件使用example"],["body","\n"],["body","<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n    http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n<modelVersion>4.0.0</modelVersion>\n<groupId>com.companyname.projectgroup</groupId>\n<artifactId>project</artifactId>\n<version>1.0</version>\n<build>\n<plugins>\n   <plugin>\n   <groupId>org.apache.maven.plugins</groupId>\n   <artifactId>maven-antrun-plugin</artifactId>\n   <version>1.1</version>\n   <executions>\n      <execution>\n         <id>id.clean</id>\n         <phase>clean</phase>\n         <goals>\n            <goal>run</goal>\n         </goals>\n         <configuration>\n            <tasks>\n               <echo>clean phase</echo>\n            </tasks>\n         </configuration>\n      </execution>     \n   </executions>\n   </plugin>\n</plugins>\n</build>\n</project>\n\n"],["body","\n"],["h1","Maven 项目模板"],["body","\n"],["body","Maven 使用 archetype(原型) 来创建自定义的项目结构，形成 Maven 项目模板"],["body","\n"],["body","mvn archetype:generate\n按下 Enter 选择默认选项 (6:maven-archetype-quickstart:1.1)\n\nmvn archetype:generate -DgroupId=com.companyname.bank -DartifactId=consumerBanking -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n"],["body","\n"],["h1","Maven文档生成"],["body","\n"],["body"," <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-site-plugin</artifactId>\n          <version>3.3</version>\n        </plugin>\n        <plugin>\n          <groupId>org.apache.maven.plugins</groupId>\n          <artifactId>maven-project-info-reports-plugin</artifactId>\n          <version>2.7</version>\n</plugin>\n"],["body","\n"],["body","mvn site 命令时出现 java.lang.NoClassDefFoundError: org/apache/maven/doxia/siterenderer/DocumentContent 的问题， 这是由于 maven-site-plugin 版本过低，升级到 3.3+ 即可。"],["body","\n"],["body","Maven 使用一个名为 Doxia的文档处理引擎来创建文档，它能将多种格式的源码读取成一种通用的文档模型。要为你的项目撰写文档，你可以将内容写成下面几种常用的，可被 Doxia 转化的格式。"],["body","\n"],["body","格式名"],["body","描述"],["body","参考"],["body","\n"],["body","Apt"],["body","纯文本文档格式"],["body","http://maven.apache.org/doxia/references/apt-format.html"],["body","\n"],["body","Xdoc"],["body","Maven 1.x 的一种文档格式"],["body","http://jakarta.apache.org/site/jakarta-site2.html"],["body","\n"],["body","FML"],["body","FAQ 文档适用"],["body","http://maven.apache.org/doxia/references/fml-format.html"],["body","\n"],["body","XHTML"],["body","可扩展的 HTML 文档"],["body","http://en.wikipedia.org/wiki/XHTML"],["body","\n\n\n"],["h1","Maven 快照(SNAPSHOT)"],["body","\n"],["body","快照是一种特殊的版本，指定了某个当前的开发进度的副本"],["body","\n"],["body","不同于常规的版本，Maven 每次构建都会在远程仓库中检查新的快照"],["body","\n"],["body","每次发布更新代码的快照到仓库中，比如说 data-service:1.0-SNAPSHOT 来替代旧的快照 jar 包"],["body","\n"],["h1","自动化构建?"],["body","\n"],["h1","maven自动化部署"],["body","\n"],["headingLink","部署的过程包含需如下步骤"],["heading","部署的过程包含需如下步骤："],["body","\n\n"],["body","将所的项目代码提交到 SVN 或者代码库中并打上标签。"],["body","\n"],["body","从 SVN 上下载完整的源代码。"],["body","\n"],["body","构建应用。"],["body","\n"],["body","存储构建输出的 WAR 或者 EAR 文件到一个常用的网络位置下。"],["body","\n"],["body","从网络上获取文件并且部署文件到生产站点上。"],["body","\n"],["body","更新文档并且更新应用的版本号。"],["body","\n\n"],["headingLink","解决方案"],["heading","解决方案"],["body","\n\n"],["body","使用 Maven 构建和发布项目"],["body","\n"],["body","使用 SubVersion， 源码仓库来管理源代码"],["body","\n"],["body","使用远程仓库管理软件（Jfrog或者Nexus） 来管理项目二进制文件。"],["body","\n\n"],["headingLink","配置案例"],["heading","配置案例"],["body","\n"],["body","<project xmlns=\"http://maven.apache.org/POM/4.0.0\" \n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 \n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n   <modelVersion>4.0.0</modelVersion>\n   <groupId>bus-core-api</groupId>\n   <artifactId>bus-core-api</artifactId>\n   <version>1.0-SNAPSHOT</version>\n   <packaging>jar</packaging> \n   <scm>\n      <url>http://www.svn.com</url>\n      <connection>scm:svn:http://localhost:8080/svn/jrepo/trunk/\n      Framework</connection>\n      <developerConnection>scm:svn:${username}/${password}@localhost:8080:\n      common_core_api:1101:code</developerConnection>\n   </scm>\n   <distributionManagement>\n      <repository>\n         <id>Core-API-Java-Release</id>\n         <name>Release repository</name>\n         <url>http://localhost:8081/nexus/content/repositories/\n         Core-Api-Release</url>\n      </repository>\n   </distributionManagement>\n   <build>\n      <plugins>\n         <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-release-plugin</artifactId>\n            <version>2.0-beta-9</version>\n            <configuration>\n               <useReleaseProfile>false</useReleaseProfile>\n               <goals>deploy</goals>\n               <scmCommentPrefix>[bus-core-api-release-checkin]-<\n               /scmCommentPrefix>\n            </configuration>\n         </plugin>\n      </plugins>\n   </build>\n</project>\n"],["body","\n"],["body","元素节点"],["body","描述"],["body","\n"],["body","SCM"],["body","配置 SVN 的路径，Maven 将从该路径下将代码取下来。"],["body","\n"],["body","repository"],["body","构建的 WAR 或 EAR 或JAR 文件的位置，或者其他源码构建成功后生成的构件的存储位置。"],["body","\n"],["body","Plugin"],["body","配置 maven-release-plugin 插件来实现自动部署过程。"],["body","\n\n\n"],["headingLink","maven-release-插件"],["heading","Maven Release 插件"],["body","\n"],["body","mvn release:clean\nmvn release:rollback\n"],["body","\n"],["body","mvn release:prepare 执行多种操作："],["body","\n\n"],["body","检查本地是否存在还未提交的修改"],["body","\n"],["body","确保没有快照的依赖"],["body","\n"],["body","改变应用程序的版本信息用以发布"],["body","\n"],["body","更新 POM 文件到 SVN"],["body","\n"],["body","运行测试用例"],["body","\n"],["body","提交修改后的 POM 文件"],["body","\n"],["body","为代码在 SVN 上做标记"],["body","\n"],["body","增加版本号和附加快照以备将来发布"],["body","\n"],["body","提交修改后的 POM 文件到 SVN"],["body","\n\n"],["body","mvn release:perform\n将代码切换到之前做标记的地方，运行 Maven 部署目标来部署 WAR 文件或者构建相应的结构到仓库里。\n\n"],["body","\n"],["h1","maven使用案例"],["body","\n"],["headingLink","maven配置-mybatis--逆向工程"],["heading","maven配置 mybatis  逆向工程"],["body","\n"],["body","<finalName>ase</finalName>\n<plugin>\n                <groupId>org.mybatis.generator</groupId>\n                <artifactId>mybatis-generator-maven-plugin</artifactId>\n                <version>1.3.2</version>\n                   <configuration>\n                    <configurationFile>src/main/resources/generatorConfig.xml</configurationFile>\n                    <verbose>true</verbose>\n                    <overwrite>true</overwrite>\n                </configuration>\n\n                <dependencies>\n                    <dependency>\n                        <groupId>org.mybatis.generator</groupId>\n                        <artifactId>mybatis-generator-core</artifactId>\n                        <version>1.3.2</version>\n                    </dependency>\n                    <dependency>\n                        <groupId>mysql</groupId>\n                        <artifactId>mysql-connector-java</artifactId>\n                        <version>${mysql-connector-java.version}</version><!--$NO-MVN-MAN-VER$-->\n                    </dependency>\n                </dependencies>\n</plugin>\n"],["body","\n"],["body","不要压制所有注释"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE generatorConfiguration\n        PUBLIC \"-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN\"\n        \"http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd\">\n\n\n<generatorConfiguration>\n    <context id=\"default\" targetRuntime=\"MyBatis3\">\n\n        <plugin type=\"org.mybatis.generator.plugins.ToStringPlugin\"/>\n        <plugin type=\"org.mybatis.generator.plugins.SerializablePlugin\" />\n        <!-- optional，旨在创建class时，对注释进行控制 -->\n        <commentGenerator>\n            <property name=\"suppressDate\" value=\"true\"/>\n            <!-- <property name=\"suppressAllComments\" value=\"true\"/>-->\n            <property name=\"javaFileEncoding\" value=\"UTF-8\"/>\n            <property name=\"addRemarkComments\" value=\"true\"/>\n        </commentGenerator>\n\n        <!--jdbc的数据库连接，直接写死也可以 -->\n        <jdbcConnection\n                userId=\"root\"\n                connectionURL=\"jdbc:mysql://localhost:3306/myapp?characterEncoding=utf-8&amp;serverTimezone=UTC&amp;useSSL=false\"\n                driverClass=\"com.mysql.cj.jdbc.Driver\"\n                password=\"root\"\n        >\n        </jdbcConnection>\n\n        <!-- 非必需，类型处理器，在数据库类型和java类型之间的转换控制-->\n        <javaTypeResolver>\n            <property name=\"forceBigDecimals\" value=\"false\"/>\n            <property name=\"useJSR310Types\" value=\"true\"/>\n        </javaTypeResolver>\n\n\n        <!-- Model模型生成器,用来生成含有主键key的类，记录类 以及查询Example类\n            targetPackage     指定生成的model生成所在的包名\n            targetProject     指定在该项目下所在的路径\n        -->\n        <javaModelGenerator targetPackage=\"com.weisanju.web.orm.entity\" targetProject=\"src/main/java\">\n            <!-- 是否允许子包，即targetPackage.schemaName.tableName -->\n            <property name=\"enableSubPackages\" value=\"false\"/>\n            <!-- 是否对model添加 构造函数 -->\n            <property name=\"constructorBased\" value=\"false\"/>\n            <!-- 建立的Model对象是否 不可改变  即生成的Model对象不会有 setter方法，只有构造方法 -->\n            <property name=\"immutable\" value=\"false\"/>\n            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->\n            <property name=\"trimStrings\" value=\"false\"/>\n        </javaModelGenerator>\n\n        <!--mapper映射文件生成所在的目录 为每一个数据库的表生成对应的SqlMap文件 -->\n        <sqlMapGenerator targetPackage=\"xml\" targetProject=\"src/main/resources\">\n            <property name=\"enableSubPackages\" value=\"false\"/>\n        </sqlMapGenerator>\n\n        <!-- 客户端代码，生成易于使用的针对Model对象和XML配置文件 的代码\n                type=\"ANNOTATEDMAPPER\",生成Java Model 和基于注解的Mapper对象\n                type=\"MIXEDMAPPER\",生成基于注解的Java Model 和相应的Mapper对象\n                type=\"XMLMAPPER\",生成SQLMap XML文件和独立的Mapper接口\n        -->\n\n        <!-- targetPackage：mapper接口dao生成的位置 -->\n        <javaClientGenerator type=\"XMLMAPPER\" targetPackage=\"com.weisanju.web.orm.mapper\" targetProject=\"src/main/java\">\n            <!-- enableSubPackages:是否让schema作为包的后缀 -->\n            <property name=\"enableSubPackages\" value=\"false\" />\n        </javaClientGenerator>\n\n\n        <table  tableName=\"h3c_schedule_data\"\n                domainObjectName=\"H3cScheduleData\"\n                enableCountByExample=\"true\"\n                enableUpdateByExample=\"true\"\n                enableDeleteByExample=\"true\"\n                enableSelectByExample=\"true\"\n                selectByExampleQueryId=\"true\">\n            <!-- 上面的属性都可以使用子标签形式表示 -->\n            <!-- 是否使用真实字段名，设置为false将自动驼峰转换 -->\n            <property name=\"useActualColumnNames\" value=\"false\" />\n            <generatedKey column=\"id\" sqlStatement=\"MySql\" identity=\"true\"/>\n            <!-- 还可以对表中的字段进行类型转换 -->\n            <!-- 这里转换的原因是会自动将个位的int值自动转化为Boolean，所以指定为Integer -->\n            <!--   <columnOverride column=\"sex\" javaType=\"Integer\"/>-->\n        </table>\n        <!--\n                <table tableName=\"tb_item\" domainObjectName=\"Item\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"></table>\n                <table tableName=\"tb_order\" domainObjectName=\"Order\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"></table>\n                <table tableName=\"tb_orderdetail\" domainObjectName=\"OrderDetail\" enableCountByExample=\"false\" enableUpdateByExample=\"false\" enableDeleteByExample=\"false\" enableSelectByExample=\"false\" selectByExampleQueryId=\"false\"></table>\n\n        -->\n\n        <!-- geelynote mybatis插件的搭建 -->\n    </context>\n</generatorConfiguration>\n"],["body","\n"],["headingLink","maven多模块配置"],["heading","maven多模块配置"],["body","\n"],["body","父模块指定子模块\n\t<modules>\n\t\t<module>xxl-job-core</module>\n\t\t<module>xxl-job-admin</module>\n\t\t<module>xxl-job-executor-samples</module>\n    </modules>\n子模块指定父模块\n\t<parent>\n\t\t<groupId>com.xuxueli</groupId>\n\t\t<artifactId>xxl-job</artifactId>\n\t\t<version>2.2.1-SNAPSHOT</version>\n\t</parent>\n"],["body","\n"],["headingLink","maven中的dependencymanagement"],["heading","Maven中的dependencyManagement"],["body","\n"],["body","//只是对版本进行管理，不会实际引入jar  \n<dependencyManagement>  \n      <dependencies>  \n            <dependency>  \n                <groupId>org.springframework</groupId>  \n                <artifactId>spring-core</artifactId>  \n                <version>3.2.7</version>  \n            </dependency>  \n    </dependencies>  \n</dependencyManagement>  \n  \n//会实际下载jar包  \n<dependencies>  \n       <dependency>  \n                <groupId>org.springframework</groupId>  \n                <artifactId>spring-core</artifactId>  \n       </dependency>  \n</dependencies>  \n"],["body","\n"],["headingLink","maven编译-java源码等级"],["heading","maven编译 java源码等级"],["body","\n"],["body","<build>\n    <plugins>\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-compiler-plugin</artifactId>\n            <version>3.3</version>\n            <configuration>\n                <source>1.8</source>\n                <target>1.8</target>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n"],["body","\n"],["headingLink","maven运行本地模板"],["heading","maven运行本地模板"],["body","\n"],["body","运行 MVN 命令的时候加上 -DarchetypeCatalog=local 这个参数。在 IDEA 中："],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/MavenArcheType.html"],["title","MavenArcheType.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","introduction-to-archetypes"],["heading","Introduction to Archetypes"],["body","\n"],["headingLink","what-is-archetype"],["heading","What is Archetype?"],["body","\n"],["body","简而言之，原型是一个Maven项目模板工具包"],["body","\n"],["body","原型被定义为原始模式或模型，从中可以制造所有其他相同类型的东西。"],["body","\n"],["body","这个名字很合适，因为我们试图提供一种机制，这种机制提供一种生成Maven项目的一致方法。"],["body","\n"],["body","原型将帮助作者为用户创建 Maven 项目模板，并为用户提供生成这些项目模板的参数化版本的方法。"],["body","\n"],["body","使用原型提供了一种很好的方法，可以以与项目或组织采用的最佳实践一致的方式快速支持开发人员。"],["body","\n"],["body","在 Maven 项目中，我们使用archetypes ，通过提供一个演示 Maven 许多功能的示例项目，同时向新用户介绍 Maven 采用的最佳实践，尝试让用户尽快启动和运行。"],["body","\n"],["body","在几秒钟内，新用户可以有一个正在工作的Maven项目，用作调查Maven中更多功能的跳板。"],["body","\n"],["body","We have also tried to make the Archetype mechanism additive, and by that we mean allowing portions of a project to be captured in an archetype so that pieces or aspects of a project can be added to existing projects."],["body","\n"],["body","一个很好的例子是 Maven site archetype。"],["body","\n"],["body","您已使用快速入门原型生成工作项目，然后可以使用该现有项目中的站点原型快速为该项目创建站点"],["body","\n"],["body","你可以用原型做任何类似的事情。"],["body","\n"],["body","您可能希望在组织内标准化 J2EE 开发，因此您可能希望为 EJB、WAR 或 Web 服务提供原型"],["body","\n"],["body",".在组织的存储库中创建并部署这些原型后，组织内的所有开发人员都可以使用它们。"],["body","\n"],["headingLink","using-an-archetype"],["heading","Using an Archetype"],["body","\n"],["body","To create a new project based on an Archetype, you need to call mvn archetype:generate goal, like the following:"],["body","\n"],["body","mvn archetype:generate\n"],["body","\n"],["body","Please refer to Archetype Plugin page."],["body","\n"],["headingLink","provided-archetypes"],["heading","Provided Archetypes"],["body","\n"],["body","Maven provides several Archetype artifacts:"],["body","\n"],["body","Archetype ArtifactIds"],["body","Description"],["body","\n"],["body","maven-archetype-archetype"],["body","An archetype to generate a sample archetype project."],["body","\n"],["body","maven-archetype-j2ee-simple"],["body","An archetype to generate a simplifed sample J2EE application."],["body","\n"],["body","maven-archetype-mojo"],["body","An archetype to generate a sample a sample Maven plugin."],["body","\n"],["body","maven-archetype-plugin"],["body","An archetype to generate a sample Maven plugin."],["body","\n"],["body","maven-archetype-plugin-site"],["body","An archetype to generate a sample Maven plugin site."],["body","\n"],["body","maven-archetype-portlet"],["body","An archetype to generate a sample JSR-268 Portlet."],["body","\n"],["body","maven-archetype-quickstart"],["body","An archetype to generate a sample Maven project."],["body","\n"],["body","maven-archetype-simple"],["body","An archetype to generate a simple Maven project."],["body","\n"],["body","maven-archetype-site"],["body","An archetype to generate a sample Maven site which demonstrates some of the supported document types like APT, XDoc, and FML and demonstrates how to i18n your site."],["body","\n"],["body","maven-archetype-site-simple"],["body","An archetype to generate a sample Maven site."],["body","\n"],["body","maven-archetype-webapp"],["body","An archetype to generate a sample Maven Webapp project."],["body","\n\n\n"],["body","For more information on these archetypes, please refer to the Maven Archetype Bundles page."],["body","\n"],["headingLink","what-makes-up-an-archetype"],["heading","What makes up an Archetype?"],["body","\n"],["body","Archetypes are packaged up in a JAR and they consist of the archetype metadata which describes the contents of archetype, and a set of Velocity templates which make up the prototype project. If you would like to know how to make your own archetypes, please refer to our Guide to creating archetypes."],["body","\n"],["body","原型被打包在JAR中，"],["body","\n\n"],["body","它们由描述原型内容的原型元数据和构成原型项目的一组Velocity模板组成。"],["body","\n\n"],["body","如果您想知道如何制作自己的原型，请参阅我们的 Guide to creating archetypes."],["body","\n"],["headingLink","guide-to-creating-archetypes"],["heading","Guide to Creating Archetypes"],["body","\n"],["body","创建原型是一个非常直接的过程。原型是一个非常简单的工件，其中包含要创建的项目原型。原型由以下部分组成："],["body","\n\n"],["body","an archetype descriptor (archetype-metadata.xml in directory: src/main/resources/META-INF/maven/). 它列出了将包含在原型中的所有文件，并对它们进行分类，以便原型生成机制可以正确处理它们。"],["body","\n"],["body","the prototype files that are copied by the archetype plugin (directory: src/main/resources/archetype-resources/)"],["body","\n"],["body","the prototype pom (pom.xml in: src/main/resources/archetype-resources)"],["body","\n"],["body","a pom for the archetype (pom.xml in the archetype's root directory)."],["body","\n\n"],["body","To create an archetype follow these steps:"],["body","\n"],["headingLink","create-a-new-project-and-pomxml-for-the-archetype-artifact"],["heading","Create a new project and pom.xml for the archetype artifact"],["body","\n"],["body","<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n \n  <groupId>my.groupId</groupId>\n  <artifactId>my-archetype-id</artifactId>\n  <version>1.0-SNAPSHOT</version>\n  <packaging>maven-archetype</packaging>\n \n  <build>\n    <extensions>\n      <extension>\n        <groupId>org.apache.maven.archetype</groupId>\n        <artifactId>archetype-packaging</artifactId>\n        <version>3.1.1</version>\n      </extension>\n    </extensions>\n  </build>\n</project>\n"],["body","\n"],["body","All you need to specify is a groupId, artifactId and version."],["body","\n"],["body","These three parameters will be needed later for invoking the archetype via archetype:generate from the commandline."],["body","\n"],["headingLink","create-the-archetype-descriptor"],["heading","Create the archetype descriptor"],["body","\n"],["body","The archetype descriptor is a file called archetype-metadata.xml which must be located in the src/main/resources/META-INF/maven/ directory. An example of an archetype descriptor can be found in the quickstart archetype:"],["body","\n"],["body","<archetype-descriptor\n        xmlns=\"http://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xsi:schemaLocation=\"http://maven.apache.org/plugins/maven-archetype-plugin/archetype-descriptor/1.1.0 https://maven.apache.org/xsd/archetype-descriptor-1.1.0.xsd\"\n        name=\"quickstart\">\n    <fileSets>\n        <fileSet filtered=\"true\" packaged=\"true\">\n            <directory>src/main/java</directory>\n        </fileSet>\n        <fileSet>\n            <directory>src/test/java</directory>\n        </fileSet>\n    </fileSets>\n</archetype-descriptor>\n"],["body","\n\n"],["body","\n"],["body","The attribute name tag should be the same as the artifactId in the archetype pom.xml."],["body","\n"],["body","\n"],["body","\n"],["body","The boolean attribute partial show if this archetype is representing a full Maven project or only parts."],["body","\n"],["body","\n\n"],["body","The requiredProperties, fileSets and modules tags represent the differents parts of the project:"],["body","\n\n"],["body","<requiredProperties> : List of required properties to generate a project from this archetype"],["body","\n"],["body","<fileSets> : File sets definition"],["body","\n"],["body","<modules> : Modules definition"],["body","\n\n"],["body","At this point one can only specify individual files to be created but not empty directories."],["body","\n"],["body","Thus the quickstart archetype shown above defines the following directory structure:"],["body","\n"],["body","archetype\n|-- pom.xml\n`-- src\n    `-- main\n        `-- resources\n            |-- META-INF\n            |   `-- maven\n            |       `--archetype-metadata.xml\n            `-- archetype-resources\n                |-- pom.xml\n                `-- src\n                    |-- main\n                    |   `-- java\n                    |       `-- App.java\n                    `-- test\n                        `-- java\n                            `-- AppTest.java\n"],["body","\n"],["headingLink","create-the-prototype-files-and-the-prototype-pomxml"],["heading","Create the prototype files and the prototype pom.xml"],["body","\n"],["body","The next component of the archetype to be created is the prototype pom.xml. Any pom.xml will do, just don't forget to the set artifactId and groupId as variables ( ${artifactId} / ${groupId} ). "],["body","\n"],["body","Both variables will be initialized from the commandline when calling archetype:generate."],["body","\n"],["body","<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n \n    <groupId>${groupId}</groupId>\n    <artifactId>${artifactId}</artifactId>\n    <version>${version}</version>\n    <packaging>jar</packaging>\n \n    <name>${artifactId}</name>\n    <url>http://www.myorganization.org</url>\n \n    <dependencies>\n        <dependency>\n                <groupId>junit</groupId>\n                <artifactId>junit</artifactId>\n                 <version>4.12</version>\n                <scope>test</scope>\n        </dependency>\n    </dependencies>\n</project>\n"],["body","\n"],["headingLink","install-the-archetype-and-run-the-archetype-plugin"],["heading","Install the archetype and run the archetype plugin"],["body","\n"],["body","mvn install\n"],["body","\n"],["body","现在，您已经创建了一个原型，可以使用以下命令在本地系统上尝试它。"],["body","\n"],["body","在此命令中，您需要指定有关要使用的原型的完整信息（其 groupId、其 artifactId、其version）以及有关要创建的新项目的信息（artifactId 和 groupId）。不要忘记包含原型的版本（if you don't include the version，you archetype creation may fail with a message that version:RELEASE was not found）"],["body","\n"],["body","mvn archetype:generate                                  \\\n  -DarchetypeGroupId=<archetype-groupId>                \\\n  -DarchetypeArtifactId=<archetype-artifactId>          \\\n  -DarchetypeVersion=<archetype-version>                \\\n  -DgroupId=<my.groupid>                                \\\n  -DartifactId=<my-artifactId>\n"],["body","\n"],["headingLink","alternative-way-to-start-creating-your-archetype"],["heading","Alternative way to start creating your Archetype"],["body","\n"],["body","mvn archetype:generate\n  -DgroupId=[your project's group id]\n  -DartifactId=[your project's artifact id]\n  -DarchetypeGroupId=org.apache.maven.archetypes\n  -DarchetypeArtifactId=maven-archetype-archetype\n"],["body","\n"],["body","mvn archetype:generate  -DgroupId=\"com.alibaba.cola.demo.service\" -DartifactId=demo-service -Dversion=\"1.0.0-SNAPSHOT\" -Dpackage\"=com.alibaba.demo\" -DarchetypeArtifactId=\"cola-framework-archetype-servic\"e -DarchetypeGroupId=\"com.alibaba.cola\" -DarchetypeVersion=\"4.0.1\"\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/maven聚合项目版本管理实践.html"],["title","maven聚合项目版本管理实践.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Maven CI Friendly Versions"],["body","\n"],["headingLink","介绍"],["heading","介绍"],["body","\n"],["body","从Maven 3.5.0-beta-1版本开始，可以使用${revision}, ${sha1} 和 ${changelist}作为占位符来替换pom文件了。"],["body","\n"],["headingLink","单模块项目配置"],["heading","单模块项目配置"],["body","\n"],["body","<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}</version>\n  ...\n</project>\n"],["body","\n"],["body","使用命令指定版本号"],["body","\n"],["body","mvn -Drevision=1.0.0-SNAPSHOT clean package\n"],["body","\n"],["body","使用properties"],["body","\n"],["body","<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}</version>\n  ...\n  <properties>\n    <revision>1.0.0-SNAPSHOT</revision>\n  </properties>\n</project>\n"],["body","\n"],["body","在配置文件中指定"],["body","\n"],["body",".mvn/maven.config\n"],["body","\n"],["body","可以组合properties"],["body","\n"],["body","<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}${sha1}${changelist}</version>\n  ...\n  <properties>\n    <revision>1.3.1</revision>\n    <changelist>-SNAPSHOT</changelist>\n    <sha1/>\n  </properties>\n</project>\n"],["body","\n"],["headingLink","多模块"],["heading","多模块"],["body","\n"],["body","父项目配置"],["body","\n"],["body","<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}</version>\n  ...\n  <properties>\n    <revision>1.0.0-SNAPSHOT</revision>\n  </properties>\n  <modules>\n    <module>child1</module>\n    ..\n  </modules>\n</project>\n"],["body","\n"],["body","子项目配置"],["body","\n"],["body","<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache.maven.ci</groupId>\n    <artifactId>ci-parent</artifactId>\n    <version>${revision}</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-child</artifactId>\n   ...\n</project>\n"],["body","\n"],["body","多项目中的依赖管理"],["body","\n"],["body","多模块工程结构下，会有很多模块依赖的情况，应该使用${project.version}来定义依赖（同父工程下的依赖）的版本或者使用 dependencyManagement 管理子模块依赖"],["body","\n"],["body","父项目"],["body","\n"],["body","<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}</version>\n  ...\n  <properties>\n    <revision>1.0.0-SNAPSHOT</revision>\n  </properties>\n  <modules>\n    <module>child1</module>\n    ..\n  </modules>\n</project>\n"],["body","\n"],["body","子项目依赖另一个子项目"],["body","\n"],["body","<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache.maven.ci</groupId>\n    <artifactId>ci-parent</artifactId>\n    <version>${revision}</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-child</artifactId>\n   ...\n  <dependencies>\n\t\t<dependency>\n      <groupId>org.apache.maven.ci</groupId>\n      <artifactId>child2</artifactId>\n      <version>${project.version}</version>\n    </dependency>\n  </dependencies>\n</project>\n"],["body","\n"],["body","部署到本地仓库、远程仓库"],["body","\n"],["body","<project>\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.apache</groupId>\n    <artifactId>apache</artifactId>\n    <version>18</version>\n  </parent>\n  <groupId>org.apache.maven.ci</groupId>\n  <artifactId>ci-parent</artifactId>\n  <name>First CI Friendly</name>\n  <version>${revision}</version>\n  ...\n  <properties>\n    <revision>1.0.0-SNAPSHOT</revision>\n  </properties>\n \n <build>\n  <plugins>\n    <plugin>\n      <groupId>org.codehaus.mojo</groupId>\n      <artifactId>flatten-maven-plugin</artifactId>\n      <version>1.2.5</version>\n      <configuration>\n        <updatePomFile>true</updatePomFile>\n        <flattenMode>resolveCiFriendliesOnly</flattenMode>\n      </configuration>\n      <executions>\n        <execution>\n          <id>flatten</id>\n          <phase>process-resources</phase>\n          <goals>\n            <goal>flatten</goal>\n          </goals>\n        </execution>\n        <execution>\n          <id>flatten.clean</id>\n          <phase>clean</phase>\n          <goals>\n            <goal>clean</goal>\n          </goals>\n        </execution>\n      </executions>\n    </plugin>\n  </plugins>\n  </build>\n  <modules>\n    <module>child1</module>\n    ..\n  </modules>\n</project>\n"],["body","\n"],["h1","deploy 发布到私服"],["body","\n"],["headingLink","配置发布仓库"],["heading","配置发布仓库"],["body","\n"],["body","    <!-- 部署module的jar到私有仓库 -->\n    <distributionManagement>\n        <repository>\n            <id>public</id>\n            <name>releases</name>\n            <url>http://ip:port/repository/maven-releases/</url>\n        </repository>\n        <snapshotRepository>\n            <id>snapshot</id>\n            <name>snapshot</name>\n            <url>http://ip:port/repository/maven-snapshots/</url>\n        </snapshotRepository>\n    </distributionManagement>\n"],["body","\n"],["headingLink","配置仓库认证信息"],["heading","配置仓库认证信息"],["body","\n"],["body","**注意：**次id必须与上述配置的仓库id保持 一致"],["body","\n"],["body","<server>\n    <id>public</id>\n    <username>111</username>\n    <password>111</password>\n</server>\n\n<server>\n    <id>snapshot</id>\n    <username>111</username>\n    <password>111</password>\n</server>\n"],["body","\n"],["headingLink","统一版本号"],["heading","统一版本号"],["body","\n\n"],["body","\n"],["body","使用 revision 变量统一 各个子模块的版本"],["body","\n"],["body","\n"],["body","\n"],["body","使用 dependence Manager 在父工程统一管理依赖"],["body","\n"],["body","\n\n"],["body","定义版本号"],["body","\n"],["body","<properties>\n        <revision>1.0.1-SNAPSHOT</revision>\n<properties>\n"],["body","\n"],["body","定义父POM的版本号"],["body","\n"],["body","<groupId>com.aiseeding.ase</groupId>\n<artifactId>ase-parent</artifactId>\n<packaging>pom</packaging>\n<version>${revision}</version>\n"],["body","\n"],["body","定义子POM的版本"],["body","\n"],["body"," <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>com.aiseeding.ase</groupId>\n                <artifactId>ase-workflow</artifactId>\n                <version>${revision}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>com.aiseeding.ase</groupId>\n                <artifactId>ase-message</artifactId>\n                <version>${revision}</version>\n            </dependency>\n\n            <dependency>\n                <groupId>com.aiseeding.ase</groupId>\n                <artifactId>ase-user-docking</artifactId>\n                <version>${revision}</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n"],["body","\n"],["headingLink","发布到本地仓库与私服"],["heading","发布到本地仓库与私服"],["body","\n"],["body","配置flatMap更新打包方式"],["body","\n"],["body","            <plugin>\n                <!-- https://mvnrepository.com/artifact/org.codehaus.mojo/flatten-maven-plugin -->\n                <groupId>org.codehaus.mojo</groupId>\n                <artifactId>flatten-maven-plugin</artifactId>\n                <version>1.2.5</version>\n\n                <configuration>\n                    <!--是否更新pom文件，此处还有更高级的用法-->\n                    <updatePomFile>true</updatePomFile>\n                    <flattenMode>resolveCiFriendliesOnly</flattenMode>\n                </configuration>\n                <executions>\n                    <execution>\n                        <id>flatten</id>\n                        <phase>process-resources</phase>\n                        <goals>\n                            <goal>flatten</goal>\n                        </goals>\n                    </execution>\n                    <execution>\n                        <id>flatten.clean</id>\n                        <phase>clean</phase>\n                        <goals>\n                            <goal>clean</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n"],["body","\n"],["body","跳过不需要发布的包"],["body","\n"],["body","    <properties>\n        <maven.deploy.skip>true</maven.deploy.skip>\n    </properties>\n"],["body","\n"],["body","指定发布的包"],["body","\n"],["body","deploy 右键 -> modify run configuration -> 修改命令"],["body","\n"],["body","deploy -pl ase-message -am -f pom.xml\n"],["body","\n"],["h1","SNAPSHOT 与 RELEASE"],["body","\n\n"],["body","\n"],["body","在Nexus仓库中，一个仓库一般分为public(Release)仓和SNAPSHOT仓，前者存放正式版本，后者存放快照版本。"],["body","\n"],["body","\n"],["body","\n"],["body","如果在项目配置文件中（无论是build.gradle还是pom.xml）指定的版本号带有’-SNAPSHOT’后缀，比如版本号为’Junit-4.10-SNAPSHOT’，那么打出的包就是一个快照版本。"],["body","\n"],["body","\n"],["body","\n"],["body","快照版本和正式版本的主要区别在于，本地获取这些依赖的机制有所不同。"],["body","\n"],["body","example"],["body","\n"],["body","\n\n"],["body","假设你依赖一个库的正式版本，构建的时候构建工具会先在本次仓库中查找是否已经有了这个依赖库，如果没有的话才会去远程仓库中去拉取。\n\n所以假设你发布了Junit-4.10.jar到了远程仓库，有一个项目依赖了这个库，它第一次构建的时候会把该库从远程仓库中下载到本地仓库缓存，以后再次构建都不会去访问远程仓库了。\n\n所以如果你修改了代码，向远程仓库中发布了新的软件包，但仍然叫Junit-4.10.jar，那么依赖这个库的项目就无法得到最新更新。\n\n你只有在重新发布的时候升级版本，比如叫做Junit-4.11.jar，然后通知依赖该库的项目组也修改依赖版本为Junit-4.11,这样才能使用到你最新添加的功能。\n"],["body","\n\n"],["body","弊处"],["body","\n\n"],["body","这种方式在团队内部开发的时候会变的特别蛋痛。假设有两个小组负责维护两个组件，example-service和example-ui,其中example-ui项目依赖于example-service。而这两个项目每天都会构建多次，如果每次构建你都要升级example-service的版本，那么你会疯掉。这个时候SNAPSHOT版本就派上用场了。每天日常构建时你可以构建example-service的快照版本，比如example-service-1.0-SNAPSHOT.jar，而example-ui依赖该快照版本。每次example-ui构建时，会优先去远程仓库中查看是否有最新的example-service-1.0-SNAPSHOT.jar，如果有则下载下来使用。即使本地仓库中已经有了example-service-1.0-SNAPSHOT.jar，它也会尝试去远程仓库中查看同名的jar是否是最新的。有的人可能会问，这样不就不能充分利用本地仓库的缓存机制了吗？别着急，Maven比我们想象中的要聪明。在配置Maven的Repository的时候中有个配置项，可以配置对于SNAPSHOT版本向远程仓库中查找的频率。频率共有四种，分别是always、daily、interval、never。当本地仓库中存在需要的依赖项目时，always是每次都去远程仓库查看是否有更新，daily是只在第一次的时候查看是否有更新，当天的其它时候则不会查看；interval允许设置一个分钟为单位的间隔时间，在这个间隔时间内只会去远程仓库中查找一次，never是不会去远程仓库中查找（这种就和正式版本的行为一样了）。"],["body","\n"],["body","<repository>\n    <id>myRepository</id>\n    <url>...</url>\n    <snapshots>\n        <enabled>true</enabled>\n        <updatePolicy>XXX</updatePolicy>\n    </snapshots>\n</repository>\n"],["body","\n"],["h1","参考链接"],["body","\n"],["body","maven-ci-friendly"],["body","\n"],["body","https://www.mojohaus.org/flatten-maven-plugin/"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/maven-Maven-Resources-Plugin.html"],["title","maven-Maven-Resources-Plugin.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","简介"],["body","\n\n"],["body","\n"],["body","Maven Resources Plugin是帮助处理项目资源文件 copy到 输出目录的插件"],["body","\n"],["body","\n"],["body","\n"],["body","有两种不同的资源: JavaCode相关联的资源,TestCode相关联的资源 "],["body","\n"],["body","\n"],["body","\n"],["body","从 2.3开始,使用 the Maven Filtering shared component for filtering resources."],["body","\n"],["body","\n\n"],["h1","总览"],["body","\n"],["body","有三种处理资源的方式"],["body","\n\n"],["body","resources:resources\n\n"],["body","JavaMainCode资源 copy到主输出路径"],["body","\n"],["body","会自动执行,因为绑定到了默认 process-resources (资源处理)生命周期阶段"],["body","\n"],["body","通常使用 project.build.resources 指定资源"],["body","\n"],["body","project.build.outputDirectory 作为输出路径"],["body","\n\n"],["body","\n"],["body","resources:testResources \n\n"],["body","拷贝test资源 到test输出路径"],["body","\n"],["body","默认会加载因为 绑定到了 process-test-resources 生命周期处理 阶段"],["body","\n"],["body","使用 project.build.testResources  指定资源"],["body","\n"],["body","project.build.testOutputDirectory 指定输出目录"],["body","\n\n"],["body","\n"],["body","resources:copy-resources \n\n"],["body","copy任意目标 到任意目录"],["body","\n"],["body","需要指定资源 和目标目录"],["body","\n\n"],["body","\n\n"],["h1","使用实例"],["body","\n"],["headingLink","specifying-a-character-encoding-scheme"],["heading","Specifying a character encoding scheme"],["body","\n"],["body","统一指定为读写资源文件 指定字符编码格式"],["body","\n"],["body","<properties>\n   <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n   ...\n </properties>\n"],["body","\n"],["body","特定任务指定"],["body","\n"],["body","<project>\n  ...\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-resources-plugin</artifactId>\n        <version>3.1.0</version>\n        <configuration>\n          ...\n          <encoding>UTF-8</encoding>\n          ...\n        </configuration>\n      </plugin>\n    </plugins>\n    ...\n  </build>\n  ...\n</project>\n"],["body","\n"],["headingLink","specifying-resource-directories"],["heading","Specifying resource directories"],["body","\n"],["body","指定资源路径"],["body","\n"],["body","<project>\n ...\n <build>\n   ...\n   <resources>\n     <resource>\n       <directory>[your folder here]</directory>\n     </resource>\n   </resources>\n   ...\n </build>\n ...\n</project>\n\n\n---\n\n   <resources>\n     <resource>\n       <directory>src/my-resources</directory>\n     </resource>\n   </resources>\n\n\n ...指定目录\n   <resources>\n     <resource>\n       <directory>resource1</directory>\n     </resource>\n     <resource>\n       <directory>resource2</directory>\n     </resource>\n     <resource>\n       <directory>resource3</directory>\n     </resource>\n   </resources>\n   ...\n"],["body","\n"],["headingLink","filtering"],["heading","Filtering"],["body","\n\n"],["body","\n"],["body","针对maven有的变量 对 资源文件的占位符替换"],["body","\n"],["body","\n"],["body","\n"],["body","或者使用环境变量"],["body","\n"],["body","\n\n"],["body","Hello ${name}\nmvn resources:resources\nmvn resources:resources -Dname=\"world\"\n"],["body","\n\n"],["body","\n"],["body","指定 可替换的资源文件"],["body","\n"],["body","<project>\n  ...\n  <name>My Resources Plugin Practice Project</name>\n  ...\n  <build>\n    ...\n    <filters>\n      <filter>[a filter property]</filter>\n    </filters>\n    ...\n  </build>\n  ...\n</project>\n\n   ...\n    <filters>\n      <filter>my-filter-values.properties</filter>\n    </filters>\n    ...\n\n <build>\n    ...\n    <resources>\n      <resource>\n        <directory>src/main/resources-filtered</directory>\n        <filtering>true</filtering>\n      </resource>\n      ...\n    </resources>\n    ...\n  </build>\n"],["body","\n"],["body","\n\n"],["body","配置解析转义符"],["body","\n"],["body"," <configuration>\n          ...\n          <escapeString>\\</escapeString>\n          ...\n        </configuration>\n"],["body","\n"],["headingLink","包含和排除"],["heading","包含和排除"],["body","\n"],["body","包含"],["body","\n"],["body","<build>\n    ...\n    <resources>\n      <resource>\n        <directory>[your directory]</directory>\n        <includes>\n          <include>[resource file #1]</include>\n          <include>[resource file #2]</include>\n          <include>[resource file #3]</include>\n          ...\n          <include>[resource file #n]</include>\n        </includes>\n      </resource>\n      ...\n    </resources>\n    ...\n  </build>\n"],["body","\n"],["body","排除"],["body","\n"],["body","<build>\n    ...\n    <resources>\n      <resource>\n        <directory>[your directory]</directory>\n        <excludes>\n          <exclude>[non-resource file #1]</exclude>\n          <exclude>[non-resource file #2]</exclude>\n          <exclude>[non-resource file #3]</exclude>\n          ...\n          <exclude>[non-resource file #n]</exclude>\n        </excludes>\n      </resource>\n      ...\n    </resources>\n    ...\n  </build>\n"],["body","\n"],["body","排除该目录下的所有文件"],["body","\n"],["body","<project>\n  ...\n  <name>My Resources Plugin Practice Project</name>\n  ...\n  <build>\n    ...\n    <resources>\n      <resource>\n        <directory>src/my-resources</directory>\n        <excludes>\n          <exclude>**/*.bmp</exclude>\n          <exclude>**/*.jpg</exclude>\n          <exclude>**/*.jpeg</exclude>\n          <exclude>**/*.gif</exclude>\n        </excludes>\n      </resource>\n      ...\n    </resources>\n    ...\n  </build>\n  ...\n</project>\n"],["body","\n"],["headingLink","copy-resources"],["heading","Copy Resources"],["body","\n"],["body","<project>\n  ...\n  <build>\n    <plugins>\n      <plugin>\n        <artifactId>maven-resources-plugin</artifactId>\n        <version>3.1.0</version>\n        <executions>\n          <execution>\n            <id>copy-resources</id>\n            <!-- here the phase you need -->\n            <phase>validate</phase>\n            <goals>\n              <goal>copy-resources</goal>\n            </goals>\n            <configuration>\n              <outputDirectory>${basedir}/target/extra-resources</outputDirectory>\n              <resources>          \n                <resource>\n                  <directory>src/non-packaged-resources</directory>\n                  <filtering>true</filtering>\n                </resource>\n              </resources>              \n            </configuration>            \n          </execution>\n        </executions>\n      </plugin>\n    </plugins>\n    ...\n  </build>\n  ...\n</project>\n"],["body","\n"],["headingLink","binary-filtering"],["heading","Binary filtering"],["body","\n"],["body","<project>\n  ...\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-resources-plugin</artifactId>\n        <version>3.1.0</version>\n        <configuration>\n          ...\n          <nonFilteredFileExtensions>\n            <nonFilteredFileExtension>pdf</nonFilteredFileExtension>\n            <nonFilteredFileExtension>swf</nonFilteredFileExtension>\n          </nonFilteredFileExtensions>\n          ...\n        </configuration>\n      </plugin>\n    </plugins>\n    ...\n  </build>\n  ...\n</project>\n"],["body","\n"],["headingLink","自定义解析过滤器"],["heading","自定义解析过滤器"],["body","\n"],["body","实现该类\npublic class ItFilter\n    implements MavenResourcesFiltering\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/maven-profile.html"],["title","maven-profile.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","profile多环境配置"],["body","\n"],["headingLink","通过属性激活配置"],["heading","通过属性激活配置"],["body","\n"],["body","<profiles>\n    <profile>\n        <!--本地开发环境-->\n        <id>dev</id>\n        <properties>\n            <package.environment>dev</package.environment>\n        </properties>\n        <activation>\n            <activeByDefault>true</activeByDefault>\n        </activation>\n    </profile>\n    <profile>\n        <!--tb环境-->\n        <id>tb</id>\n        <properties>\n            <package.environment>tb</package.environment>\n        </properties>\n    </profile>\n</profiles>\n"],["body","\n"],["headingLink","多数据文件"],["heading","多数据文件"],["body","\n"],["body","    <profile>\n          <id>test</id>\n          <build>\n              <plugins>\n                 <plugin>\n                    <groupId>org.apache.maven.plugins</groupId>\n                    <artifactId>maven-antrun-plugin</artifactId>\n                    <version>1.8</version>\n                    <executions>\n                       <execution>\n                          <phase>test</phase>\n                          <goals>\n                             <goal>run</goal>\n                          </goals>\n                          <configuration>\n                          <tasks>\n                             <echo>Using env.test.properties</echo>\n                             <copy file=\"src/main/resources/env.test.properties\" tofile=\"${project.build.outputDirectory}/env.properties\" overwrite=\"true\"/>\n                          </tasks>\n                          </configuration>\n                       </execution>\n                    </executions>\n                 </plugin>\n              </plugins>\n          </build>\n      </profile>\n"],["body","\n"],["headingLink","通过mvn命令行激活"],["heading","通过mvn命令行激活"],["body","\n"],["body","mvn test -Ptest\n"],["body","\n"],["headingLink","通过maven设置激活配置文件"],["heading","通过Maven设置激活配置文件"],["body","\n"],["body","配置 setting.xml 文件，增加 <activeProfiles>属性："],["body","\n"],["body","<settings xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n   ...\n   <activeProfiles>\n      <activeProfile>test</activeProfile>\n   </activeProfiles>\n</settings>\n"],["body","\n"],["headingLink","通过环境变量激活配置文件"],["heading","通过环境变量激活配置文件"],["body","\n"],["body","mvn test -Denv=test\n"],["body","\n"],["headingLink","通过操作系统激活配置文件"],["heading","通过操作系统激活配置文件"],["body","\n"],["body","<profile>\n   <id>test</id>\n   <activation>\n      <os>\n         <name>Windows XP</name>\n         <family>Windows</family>\n         <arch>x86</arch>\n         <version>5.1.2600</version>\n      </os>\n   </activation>\n</profile>\n"],["body","\n"],["headingLink","通过文件的存在或者缺失激活配置文件"],["heading","通过文件的存在或者缺失激活配置文件"],["body","\n"],["body","<profile>\n   <id>test</id>\n   <activation>\n      <file>\n         <missing>target/generated-sources/axistools/wsdl2java/\n         com/companyname/group</missing>\n      </file>\n   </activation>\n</profile>\n"],["body","\n"],["h1","配置示例"],["body","\n"],["headingLink","动态切换配置"],["heading","动态切换配置"],["body","\n"],["body","<build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <goals>\n                            <goal>repackage</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                <configuration>\n                    <executable>true</executable>\n                </configuration>\n            </plugin>\n        </plugins>\n\n        <resources>\n            <resource>\n                <directory>src/main/resources/</directory>\n                <!--打包时先排除掉三个文件夹-->\n                <excludes>\n                    <exclude>dev/*</exclude>\n                    <exclude>prod/*</exclude>\n                    <exclude>test/*</exclude>\n                </excludes>\n                <includes>\n                    <!--如果有其他定义通用文件，需要包含进来-->\n                    <!--<include>messages/*</include>-->\n                </includes>\n            </resource>\n            <resource>\n                <!--这里是关键！ 根据不同的环境，把对应文件夹里的配置文件打包-->\n                <directory>src/main/resources/${profiles.active}</directory>\n            </resource>\n        </resources>\n    </build>\n\n    <profiles>\n        <profile>\n            <!--不同环境Profile的唯一id-->\n            <id>dev</id>\n            <properties>\n                <!--profiles.active是自定义的字段，自定义字段可以有多个-->\n                <profiles.active>dev</profiles.active>\n            </properties>\n        </profile>\n        <profile>\n            <id>prod</id>\n            <properties>\n                <profiles.active>prod</profiles.active>\n            </properties>\n            <!--activation用来指定激活方式，可以根据jdk环境，环境变量，文件的存在或缺失-->\n            <activation>\n                <!--这个字段表示默认激活-->\n                <activeByDefault>true</activeByDefault>\n            </activation>\n        </profile>\n        <profile>\n            <id>test</id>\n            <properties>\n                <profiles.active>test</profiles.active>\n            </properties>\n        </profile>\n    </profiles>\n\n"],["body","\n"],["headingLink","动态切换配置并将配置与包分离"],["heading","动态切换配置,并将配置与包分离"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>2.3.1.RELEASE</version>\n        <relativePath/> <!-- lookup parent from repository -->\n    </parent>\n    <groupId>com.weisanju</groupId>\n    <artifactId>javaconfig</artifactId>\n    <version>0.0.1-SNAPSHOT</version>\n    <name>javaconfig</name>\n    <description>javaconfig学习</description>\n\n    <properties>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-devtools</artifactId>\n            <scope>runtime</scope>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-configuration-processor</artifactId>\n            <optional>true</optional>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.junit.vintage</groupId>\n                    <artifactId>junit-vintage-engine</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n    </dependencies>\n\n    <profiles>\n        <profile>\n            <id>dev</id>\n            <properties>\n                <environment>dev</environment>\n            </properties>\n            <activation>\n                <activeByDefault>true</activeByDefault>\n            </activation>\n        </profile>\n        <profile>\n            <id>prod</id>\n            <properties>\n                <environment>prod</environment>\n            </properties>\n        </profile>\n    </profiles>\n    <build>\n\n        <resources>\n            <resource>\n                <directory>src/main/resources</directory>\n                <excludes>\n                    <exclude>**/*</exclude>\n                </excludes>\n            </resource>\n        </resources>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n            </plugin>\n\n\n            <plugin>\n                <artifactId>maven-resources-plugin</artifactId>\n                <executions>\n                    <execution>\n                        <id>copy-resources</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>copy-resources</goal>\n                        </goals>\n                        <configuration>\n                            <resources>\n                                <resource>\n                                    <directory>src/main/resources/${environment}</directory>\n                                    <!--<directory>../config</directory>-->\n                                    <filtering>true</filtering>\n                                </resource>\n                            </resources>\n                            <outputDirectory>${project.build.directory}/config</outputDirectory>\n                        </configuration>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n\n    </build>\n\n</project>\n\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/maven-assembly-plugin.html"],["title","maven-assembly-plugin.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Maven Assembly Plugin"],["body","\n"],["headingLink","简介"],["heading","简介"],["body","\n"],["body","首页"],["body","\n"],["body","Maven的Assembly Plugin使开发人员能够将项目输出组合到一个可分发的存档中，该存档还包含依赖项，模块，站点文档和其他文件。"],["body","\n"],["body","可以 使用 预制的 装配描述符 轻松构建 装配体"],["body","\n"],["body","这些描述符处理许多常见的操作，这些描述符处理许多常见的操作，例如将项目的工件和生成的文档打包到[单个zip归档文件，另外，您的项目可以提供自己的descriptor，并可以对依赖项，模块，文件集和单个文件打包在程序集中。"],["body","\n"],["body","目前，它可以创建以下格式的发行版：-"],["body","\n\n"],["body","zip"],["body","\n"],["body","tar"],["body","\n"],["body","tar.gz (or tgz)"],["body","\n"],["body","tar.bz2 (or tbz2)"],["body","\n"],["body","tar.snappy"],["body","\n"],["body","tar.xz (or txz)"],["body","\n"],["body","jar"],["body","\n"],["body","dir"],["body","\n"],["body","war"],["body","\n"],["body","以及已为ArchiveManager配置的任何其他格式"],["body","\n\n"],["body","如果您的项目想要将工件打包在uber-jar中，则Assembly插件仅提供基本支持。\n要进行更多控制，请使用[Maven Shade插件]（http://maven.apache.org/plugins/maven-shade-plugin/）。"],["body","\n"],["body","要在Maven中使用Assembly Plugin，您只需要："],["body","\n\n"],["body","选择或编写要使用的 组装描述符文件"],["body","\n"],["body","在项目的pom.xml中配置程序集插件，然后-"],["body","\n"],["body","mvn assembly:single"],["body","\n\n"],["body","要编写自己的自定义程序集，您需要参考程序集描述符格式参考。"],["body","\n"],["headingLink","what-is-an-assembly"],["heading","What is an Assembly?"],["body","\n"],["body","An \"assembly\"  是一组文件，目录和依赖项，它们被组合成存档格式并进行分发，例如，假设一个Maven项目定义了一个同时包含控制台应用程序和Swing应用程序的JAR工件。这样的项目可以定义两个“程序集”，将应用程序与一组不同的支持脚本和依赖项集捆绑在一起。\n一个程序集将是控制台应用程序的程序集，另一个程序集将是一个捆绑有稍微不同的依赖项的Swing应用程序。"],["body","\n"],["body","The Assembly Plugin 插件提供了一种描述符格式,该格式允许您定义项目中文件和目录的任意程序集。"],["body","\n"],["body","如果您的Maven项目包含目录“ src / main / bin”，则可以指示程序集插件将该目录的内容复制到程序集的“ bin”目录中，并更改目录中文件的权限。 \n“ bin”目录进入UNIX模式755。用于配置此行为的参数通过程序集描述符提供给程序集插件"],["body","\n"],["headingLink","goals"],["heading","Goals"],["body","\n"],["body","The main goal in the assembly plugin is the single goal. It is used to create all assemblies."],["body","\n"],["body","For more information about the goals that are available in the Assembly Plugin, see the plugin documentation page."],["body","\n"],["body","assembly plugin 主要目标是single目标。它用于创建所有程序集。\n有关Assembly Plugin中可用目标的更多信息，请参见插件文档页面。"],["body","\n"],["headingLink","usage"],["heading","Usage"],["body","\n"],["headingLink","configuration"],["heading","Configuration"],["body","\n"],["body","使用预定义的装配体描述符之一，请配置要与<descriptorRefs>\n如果要使用自定义程序集描述符，则可以使用  <descriptors> <descriptor> 参数来配置描述符的路径。"],["body","\n"],["body","请注意，对程序集插件的一次调用 实际上可以从多个描述符生成程序集，从而使您能够最大程度地自定义项目所生成的二进制文件套件。\n创建程序集后，使用 project 名称 + assemblyId 名称"],["body","\n"],["body","jar example"],["body","\n"],["body","<project>\n  [...]\n  <build>\n    [...]\n    <plugins>\n      <plugin>\n        <!-- NOTE: We don't need a groupId specification because the group is\n             org.apache.maven.plugins ...which is assumed by default.\n         -->\n        <artifactId>maven-assembly-plugin</artifactId>\n        <version>3.3.0</version>\n        <configuration>\n          <descriptorRefs>\n            <descriptorRef>jar-with-dependencies</descriptorRef>\n          </descriptorRefs>\n        </configuration>\n        [...]\n</project>\n"],["body","\n"],["body","Assembly Plugin允许您一次指定多个描述符引用，以在一次调用中生成多种类型的程序集。\n另外，我们在src / assembly目录中创建了一个名为src.xml的自定义程序集描述符"],["body","\n"],["body","使用文件"],["body","\n"],["body","<project>\n  [...]\n  <build>\n    [...]\n    <plugins>\n      <plugin>\n        <artifactId>maven-assembly-plugin</artifactId>\n        <version>3.3.0</version>\n        <configuration>\n          <descriptors>\n            <descriptor>src/assembly/src.xml</descriptor>\n          </descriptors>\n        </configuration>\n        [...]\n</project>\n"],["body","\n"],["body","绑定到 构建阶段"],["body","\n"],["body","<project>\n  [...]\n  <build>\n    [...]\n    <plugins>\n      <plugin>\n        <artifactId>maven-assembly-plugin</artifactId>\n        <version>3.3.0</version>\n        <configuration>\n          <descriptorRefs>\n            <descriptorRef>jar-with-dependencies</descriptorRef>\n          </descriptorRefs>\n        </configuration>\n        <executions>\n          <execution>\n            <id>make-assembly</id> <!-- this is used for inheritance merges -->\n            <phase>package</phase> <!-- bind to the packaging phase -->\n            <goals>\n              <goal>single</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin>\n      [...]\n</project>\n"],["body","\n"],["headingLink","advanced-configuration"],["heading","Advanced Configuration"],["body","\n"],["body","\n"],["body","仅jar和war汇编格式支持配置 archiver 元素。"],["body","\n"],["body","\n"],["body","创建可执行jar"],["body","\n"],["body","Assembly插件支持配置 archiver 元素，该元素由maven-archiver处理"],["body","\n"],["body","<project>\n  [...]\n  <build>\n    [...]\n    <plugins>\n      <plugin>\n        <artifactId>maven-assembly-plugin</artifactId>\n        <version>3.3.0</version>\n        <configuration>\n          [...]\n          <archive>\n            <manifest>\n              <mainClass>org.sample.App</mainClass>\n            </manifest>\n          </archive>\n        </configuration>\n        [...]\n      </plugin>\n      [...]\n</project>\n"],["body","\n"],["headingLink","示例配置"],["heading","示例配置"],["body","\n"],["body","            <plugin>\n                //配置插件 artifactId\n                <artifactId>maven-assembly-plugin</artifactId>\n                //配置执行阶段\n                <executions>\n                    <execution>\n                        <id>makeAssembly</id>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>assembly</goal>\n                        </goals>\n                    </execution>\n                </executions>\n                //插件配置\n                <configuration>\n                    <archive>\n                        <manifest>\n                            <mainClass>MainDemo01</mainClass>\n                        </manifest>\n                    </archive>\n                    //配置描述符文件\n                    <descriptors>\n                        <descriptor>src/main/resources/assembly.xml</descriptor>\n                        <descriptor>src/main/resources/assembly-copy.xml</descriptor>\n                    </descriptors>\n                    //配置变量替换源文件\n                    <filters>\n                        <filter>src/main/resources/subsititute.properties</filter>\n                    </filters>\n                </configuration>\n            </plugin>\n"],["body","\n"],["body","archive 标签 详见 "],["body","\n"],["headingLink","asembly-xml文件"],["heading","asembly xml文件"],["body","\n"],["body","<assembly xmlns=\"http://maven.apache.org/ASSEMBLY/2.1.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/ASSEMBLY/2.1.0 http://maven.apache.org/xsd/assembly-2.1.0.xsd\">\n  <id/>\n  <formats/>\n  <includeBaseDirectory/>\n  <baseDirectory/>\n  <includeSiteDirectory/>\n  <containerDescriptorHandlers>\n    <containerDescriptorHandler>\n      <handlerName/>\n      <configuration/>\n    </containerDescriptorHandler>\n  </containerDescriptorHandlers>\n  <moduleSets>\n    <moduleSet>\n      <useAllReactorProjects/>\n      <includeSubModules/>\n      <includes/>\n      <excludes/>\n      <sources>\n        <useDefaultExcludes/>\n        <outputDirectory/>\n        <includes/>\n        <excludes/>\n        <fileMode/>\n        <directoryMode/>\n        <fileSets>\n          <fileSet>\n            <useDefaultExcludes/>\n            <outputDirectory/>\n            <includes/>\n            <excludes/>\n            <fileMode/>\n            <directoryMode/>\n            <directory/>\n            <lineEnding/>\n            <filtered/>\n            <nonFilteredFileExtensions/>\n          </fileSet>\n        </fileSets>\n        <includeModuleDirectory/>\n        <excludeSubModuleDirectories/>\n        <outputDirectoryMapping/>\n      </sources>\n      <binaries>\n        <outputDirectory/>\n        <includes/>\n        <excludes/>\n        <fileMode/>\n        <directoryMode/>\n        <attachmentClassifier/>\n        <includeDependencies/>\n        <dependencySets>\n          <dependencySet>\n            <outputDirectory/>\n            <includes/>\n            <excludes/>\n            <fileMode/>\n            <directoryMode/>\n            <useStrictFiltering/>\n            <outputFileNameMapping/>\n            <unpack/>\n            <unpackOptions>\n              <includes/>\n              <excludes/>\n              <filtered/>\n              <nonFilteredFileExtensions/>\n              <lineEnding/>\n              <useDefaultExcludes/>\n              <encoding/>\n            </unpackOptions>\n            <scope/>\n            <useProjectArtifact/>\n            <useProjectAttachments/>\n            <useTransitiveDependencies/>\n            <useTransitiveFiltering/>\n          </dependencySet>\n        </dependencySets>\n        <unpack/>\n        <unpackOptions>\n          <includes/>\n          <excludes/>\n          <filtered/>\n          <nonFilteredFileExtensions/>\n          <lineEnding/>\n          <useDefaultExcludes/>\n          <encoding/>\n        </unpackOptions>\n        <outputFileNameMapping/>\n      </binaries>\n    </moduleSet>\n  </moduleSets>\n  <fileSets>\n    <fileSet>\n      <useDefaultExcludes/>\n      <outputDirectory/>\n      <includes/>\n      <excludes/>\n      <fileMode/>\n      <directoryMode/>\n      <directory/>\n      <lineEnding/>\n      <filtered/>\n      <nonFilteredFileExtensions/>\n    </fileSet>\n  </fileSets>\n  <files>\n    <file>\n      <source/>\n      <sources/>\n      <outputDirectory/>\n      <destName/>\n      <fileMode/>\n      <lineEnding/>\n      <filtered/>\n    </file>\n  </files>\n  <dependencySets>\n    <dependencySet>\n      <outputDirectory/>\n      <includes/>\n      <excludes/>\n      <fileMode/>\n      <directoryMode/>\n      <useStrictFiltering/>\n      <outputFileNameMapping/>\n      <unpack/>\n      <unpackOptions>\n        <includes/>\n        <excludes/>\n        <filtered/>\n        <nonFilteredFileExtensions/>\n        <lineEnding/>\n        <useDefaultExcludes/>\n        <encoding/>\n      </unpackOptions>\n      <scope/>\n      <useProjectArtifact/>\n      <useProjectAttachments/>\n      <useTransitiveDependencies/>\n      <useTransitiveFiltering/>\n    </dependencySet>\n  </dependencySets>\n  <repositories>\n    <repository>\n      <outputDirectory/>\n      <includes/>\n      <excludes/>\n      <fileMode/>\n      <directoryMode/>\n      <includeMetadata/>\n      <groupVersionAlignments>\n        <groupVersionAlignment>\n          <id/>\n          <version/>\n          <excludes/>\n        </groupVersionAlignment>\n      </groupVersionAlignments>\n      <scope/>\n    </repository>\n  </repositories>\n  <componentDescriptors/>\n</assembly>\n"],["body","\n"],["headingLink","通用元素"],["heading","通用元素"],["body","\n"],["body","Element"],["body","Type"],["body","Description"],["body","\n"],["body","id"],["body","String"],["body","用作 产生工件时的文件名后缀"],["body","\n"],["body","formats/format*"],["body","List<String>"],["body","支持输出的格式"],["body","\n"],["body","includeBaseDirectory"],["body","boolean"],["body","是否包含基目录，true的话默认为  构件的名称作为目录 即 ${project.build.finalName}"],["body","\n"],["body","baseDirectory"],["body","String"],["body","true的话默认为${project.build.finalName}"],["body","\n"],["body","includeSiteDirectory"],["body","boolean"],["body","是否构建 siteDirectory "],["body","Default: false"],["body","\n"],["body","containerDescriptorHandlers/containerDescriptorHandler*"],["body","`List"],["body","一组组件，可从常规存档流中过滤掉各种容器描述符，以便可以对其进行汇总然后添加。"],["body","\n"],["body","moduleSets/moduleSet*"],["body","List<ModuleSet>"],["body","模块"],["body","\n"],["body","fileSets/fileSet*"],["body","List<FileSet>"],["body","文件集"],["body","\n"],["body","files/file*"],["body","List<FileItem>"],["body","包含文件"],["body","\n"],["body","dependencySets/dependencySet*"],["body","List<DependencySet>"],["body","依赖"],["body","\n"],["body","repositories/repository*"],["body","List<Repository>"],["body","装载依赖使用的仓库"],["body","\n"],["body","componentDescriptors/componentDescriptor*"],["body","List<String>"],["body","descriptor xml 可以基于 descriptorRef,也可以指定相对路径"],["body","\n\n\n"],["body","详见"],["body","\n"],["headingLink","example"],["heading","Example"],["body","\n"],["headingLink","添加编译后的输出文件"],["heading","添加编译后的输出文件"],["body","\n"],["body","    <fileSets>\n        <fileSet>\n            <directory>src/main/resources</directory>\n            <includes>\n                <include>**/*.properties</include>\n            </includes>\n            <outputDirectory>/</outputDirectory>\n            <filtered>true</filtered>\n        </fileSet>\n        <fileSet>\n            <directory>${project.build.outputDirectory}</directory>\n            <includes>\n                <include>**/*.class</include>\n            </includes>\n            <outputDirectory>/</outputDirectory>\n        </fileSet>\n    </fileSets>\n"],["body","\n"],["headingLink","添加资源文件"],["heading","添加资源文件"],["body","\n"],["body","<assembly>\n\n    <id>file-copy</id><!-- 配置文件的标识，同时生成的jar包名字会把这个文本包含进去 -->\n    <formats>\n        <format>jar</format><!-- 打包类型，此处为jar -->\n    </formats>\n\n\n    <includeBaseDirectory>false</includeBaseDirectory>\n    <files>\n        <file>\n            <source>src/main/resources/README.txt</source>\n            <outputDirectory></outputDirectory>\n            <filtered>true</filtered>\n        </file>\n    </files>\n</assembly>\n"],["body","\n"],["headingLink","添加项目依赖"],["heading","添加项目依赖"],["body","\n"],["body","<assembly>\n\n    <id>with-dependence-unpack</id><!-- 配置文件的标识，同时生成的jar包名字会把这个文本包含进去 -->\n    <formats>\n        <format>jar</format><!-- 打包类型，此处为jar -->\n    </formats>\n    <includeBaseDirectory>false</includeBaseDirectory>\n    <dependencySets>\n        <dependencySet>\n            <unpack>false</unpack><!-- 是否解压 -->\n            <scope>runtime</scope>\n            <outputDirectory>lib/</outputDirectory>\n        </dependencySet>\n    </dependencySets>\n    <fileSets>\n        <fileSet>\n            <directory>${project.build.outputDirectory}</directory>\n            <outputDirectory>/</outputDirectory>\n        </fileSet>\n    </fileSets>\n</assembly>\n"],["body","\n"],["headingLink","添加manifest"],["heading","添加ManiFest"],["body","\n"],["body","<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-assembly-plugin</artifactId>\n    <version>3.3.0</version>\n    <executions>\n        <execution>\n            <id>makeAssembly</id>\n            <phase>package</phase>\n            <goals>\n                <goal>single</goal>\n            </goals>\n        </execution>\n    </executions>\n    <configuration>\n        <archive>\n            <manifest>\n                <addClasspath>true</addClasspath>\n                <classpathPrefix>lib</classpathPrefix>\n                <mainClass>MainDemo01</mainClass>\n                <addDefaultImplementationEntries>true</addDefaultImplementationEntries>\n            </manifest>\n        </archive>\n        <descriptors>\n            <descriptor>src/main/resources/assembly-copy.xml</descriptor>\n        </descriptors>\n        <filters>\n            <filter>src/main/resources/subsititute.properties</filter>\n        </filters>\n    </configuration>\n</plugin>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/maven中的生命周期、插件、目标.html"],["title","maven中的生命周期、插件、目标.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","生命周期（lifecycle）"],["body","\n"],["body","Maven的生命周期就是对所有的 构建过程 进行抽象和统一。包含了项目的清理、初始化、编译、测试、打包、集成测试、验证、部署和站点生成等几乎所有的构建步骤。"],["body","\n"],["body","Maven 内置的三套生命周期："],["body","\n\n"],["body","clean 清理项目"],["body","\n"],["body","default 构建、发布项目"],["body","\n"],["body","site 生成项目站点"],["body","\n\n"],["h1","阶段（phase）"],["body","\n\n"],["body","\n"],["body","阶段是生命周期的组成部分。"],["body","\n"],["body","\n"],["body","\n"],["body","特点：各个阶段之间 在生命周期内具有顺序性"],["body","\n"],["body","\n"],["body","\n"],["body","执行生命周期的某个阶段会将该阶段之前的所有 其他阶段执行"],["body","\n"],["body","\n\n"],["body","clean周期共有3个阶段"],["body","\n\n"],["body","pre-clean"],["body","\n"],["body","clean"],["body","\n"],["body","post-clean"],["body","\n\n"],["h1","插件:目标（plugin:goal）"],["body","\n\n"],["body","\n"],["body","插件与 目标 构成 阶段"],["body","\n"],["body","\n"],["body","\n"],["body","插件与目标可以单独执行"],["body","\n"],["body","\n"],["body","\n"],["body","插件可以 绑定到 某个阶段上"],["body","\n"],["body","\n\n"],["headingLink","clean阶段"],["heading","clean阶段"],["body","\n"],["body","顺序"],["body","阶段"],["body","插件:目标"],["body","\n"],["body","1"],["body","pre-clean"],["body","\n"],["body","2"],["body","clean"],["body","clean:clean"],["body","\n"],["body","3"],["body","post-clean"],["body","\n\n\n"],["headingLink","default阶段"],["heading","default阶段"],["body","\n"],["body","顺序"],["body","阶段"],["body","插件:目标"],["body","\n"],["body","1"],["body","validate（校验）"],["body","\n"],["body","2"],["body","initialize（初始化）"],["body","\n"],["body","3"],["body","generate-sources"],["body","\n"],["body","4"],["body","process-sources"],["body","\n"],["body","5"],["body","generate-resources"],["body","\n"],["body","6"],["body","process-resources"],["body","resources:resources"],["body","\n"],["body","7"],["body","compile"],["body","compiler:compile"],["body","\n"],["body","8"],["body","process-classes"],["body","\n"],["body","9"],["body","generate-test-sources"],["body","\n"],["body","10"],["body","process-test-sources"],["body","\n"],["body","11"],["body","generate-test-resources"],["body","\n"],["body","12"],["body","process-test-resources"],["body","resources:testResources"],["body","\n"],["body","13"],["body","test-compile"],["body","compiler:testCompile"],["body","\n"],["body","14"],["body","process-test-classes"],["body","\n"],["body","15"],["body","test surefire:test"],["body","\n"],["body","16"],["body","prepare-package"],["body","\n"],["body","17"],["body","package"],["body","\n"],["body","18"],["body","pre-integration-test"],["body","\n"],["body","19"],["body","integration-test"],["body","\n"],["body","20"],["body","post-integration-test"],["body","\n"],["body","21"],["body","verify"],["body","\n"],["body","22"],["body","install"],["body","install:install"],["body","\n"],["body","23"],["body","deploy deploy:deploy"],["body","deploy:deploy"],["body","\n\n\n"],["body","生命周期site(4个阶段)"],["body","\n"],["body","顺序"],["body","阶段"],["body","插件:目标"],["body","\n"],["body","1"],["body","pre-site"],["body","\n"],["body","2"],["body","site"],["body","site:site"],["body","\n"],["body","3"],["body","post-site"],["body","\n"],["body","4"],["body","site-deploy"],["body","site:deploy"],["body","\n\n\n"],["h1","示例"],["body","\n\n"],["body","该插件有两个目标，一个是 flattern,一个是 clean"],["body","\n"],["body","第一个目标 绑定到  process-resources 阶段上"],["body","\n"],["body","第二个目标绑定到 clean 阶段上"],["body","\n\n"],["body","<plugin>\n    <!-- https://mvnrepository.com/artifact/org.codehaus.mojo/flatten-maven-plugin -->\n    <groupId>org.codehaus.mojo</groupId>\n    <artifactId>flatten-maven-plugin</artifactId>\n    <version>1.2.5</version>\n\n    <configuration>\n        <!--是否更新pom文件，此处还有更高级的用法-->\n        <updatePomFile>true</updatePomFile>\n        <flattenMode>resolveCiFriendliesOnly</flattenMode>\n    </configuration>\n    <executions>\n        <execution>\n            <id>flatten</id>\n            <phase>process-resources</phase>\n            <goals>\n                <goal>flatten</goal>\n            </goals>\n        </execution>\n        <execution>\n            <id>flatten.clean</id>\n            <phase>clean</phase>\n            <goals>\n                <goal>clean</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n"],["body","\n"],["headingLink","内置绑定"],["heading","内置绑定"],["body","\n"],["body","\n"],["headingLink","自定义绑定"],["heading","自定义绑定"],["body","\n"],["body","Maven内置绑定的插件可供用户实现基础的项目构建任务，而如果用户需要完成其他的构建任务时，"],["body","\n"],["body","可通过自定义绑定的方式将某个插件目标绑定到生命周期的某个阶段上"],["body","\n"],["body","举例"],["body","\n"],["body","这里我们以创建项目的源码jar包举例说明，由于内置绑定的插件目标没有可以完成该任务的，"],["body","\n\n"],["body","\n"],["body","所以我们需要先确定可以完成该任务的Maven插件及插件目标，然后将其绑定到生命周期的某一阶段上"],["body","\n"],["body","\n"],["body","\n"],["body","插件 maven-source-plugin 的 jar-no-fork 目标能够将项目的主代码打包为jar包"],["body","\n"],["body","\n"],["body","\n"],["body","在项目POM文件build元素的子元素plugins中可包含若干个plugin元素，其可用于向项目中引入Maven的插件。"],["body","\n"],["body","\n"],["body","\n"],["body","Maven插件和Maven依赖一样也是基于Maven进行管理的，故其同样需要配置groupId、artifactId、version元素信息"],["body","\n"],["body","\n"],["body","\n"],["body","executions元素下可包含若干个execution子元素，用于配置执行任务"],["body","\n"],["body","\n"],["body","\n"],["body","这里我们配置一个id为attach-sources的任务，将该插件的目标 jar-no-fork 与default生命周期的package阶段进行绑定"],["body","\n"],["body","\n\n"],["body","<build>\n    ...\n    <plugins>\n        ...\n        <plugin>\n            <groupId>org.apache.maven.plugins</groupId>\n            <artifactId>maven-source-plugin</artifactId>\n            <version>2.1.1</version>\n            <executions>\n                <execution>\n                    <id>attach-sources</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>jar-no-fork</goal>\n                    </goals>\n                </execution>\n            </executions>\n        </plugin>\n        ...\n    </plugins>\n    ...\n</build>\n\n"],["body","\n"],["body","至此，创建项目的源码jar包的任务即可通过执行下述命令实现"],["body","\n"],["body","mvn package\n"],["body","\n"],["headingLink","命令行调用插件"],["heading","命令行调用插件"],["body","\n"],["body","mvn [options] [<goal(s)>] [<phase(s)>]\n    # 通过Maven坐标调用插件\nmvn [groupId]:[artifactId]:[version]:[goalName]\nmvn org.apache.maven.plugins:maven-dependency-plugin:2.1:list\n\n"],["body","\n"],["body","上述语法的弊端在于命令过长不够简洁。"],["body","\n"],["body","为便于使用，Maven对插件引入了插件前缀的概念，用来代替groupId、artifactId信息。"],["body","\n"],["body","所以一个Maven插件不仅可通过Maven坐标(groupId、artifactId)还可以通过插件前缀进行描述。使用插件前缀可大大简化命令，语法如下所示。"],["body","\n"],["body","例如 maven-dependency-plugin插件的插件前缀是dependency，则查看依赖列表，可使用下述命令实现"],["body","\n"],["body","    # 通过插件前缀调用插件\n    mvn [pluginPrefix]:[goalName]\n    mvn dependency:list\n"],["body","\n"],["headingLink","获取插件信息"],["heading","获取插件信息"],["body","\n\n"],["body","\n"],["body","日常开发中，我们经常需要了解一个插件的帮助信息，这个时候就可以通过maven-help-plugin插件的describe目标来实现。"],["body","\n"],["body","\n"],["body","\n"],["body","常见用法如下。其中，plugin参数用于指定欲查询的插件(Maven坐标、插件前缀均可)，goal参数用于指定该插件的目标，detail参数可输出更详细的信息"],["body","\n"],["body","\n\n"],["body","  # 查看指定插件的信息\n    mvn help:describe -Dplugin=[groupId]:[artifactId]:[version] [-Ddetail] \n    mvn help:describe -Dplugin=[pluginPrefix] [-Ddetail]\n    # 查看指定插件的某个目标的信息\n    mvn help:describe -Dplugin=[pluginPrefix] -Dgoal=[goalName] [-Ddetail]\n    \n    mvn help:describe -Dplugin=source -Dgoal=java-no-fork -Ddetail\n"],["body","\n"],["headingLink","插件配置"],["heading","插件配置"],["body","\n"],["headingLink","命令行插件配置"],["heading","命令行插件配置"],["body","\n\n"],["body","一般情况下插件的目标中存在若干个参数用于改变插件的行为"],["body","\n"],["body","用户在命令行中可通过参数 Parameters的用户属性 User Property进行配置"],["body","\n"],["body","这里以default生命周期的test阶段默认绑定的 maven-surefire-plugin 插件的test为例进行说明"],["body","\n\n"],["body","执行下述命令查看插件目标 surefire:test 的详细信息"],["body","\n"],["body","mvn help:describe -Dplugin=surefire -Dgoal=test -Ddetail\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/Executions.html"],["title","Executions.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","guide-to-configuring-default-mojo-executions"],["heading","Guide to Configuring Default Mojo Executions"],["body","\n"],["body","\n"],["body","配置默认Mojo执行指南"],["body","\n"],["body","\n\n"],["body","\n"],["body","在大多数需要配置插件的情况下，有两个选项可以很好地工作:"],["body","\n\n"],["body","插件级配置"],["body","\n"],["body","执行级配置"],["body","\n\n"],["body","\n"],["body","\n"],["body","插件级配置是配置插件的最常用方法，这些插件将从命令行使用，定义为默认生命周期的一部分，或者在所有调用中使用通用配置"],["body","\n"],["body","\n"],["body","\n"],["body","实际上，对于从命令行直接调用，plugin-level configuration has been the only option historically."],["body","\n"],["body","\n\n"],["body","另一方面，在更高级的构建过程 需要从使用不同配置的单个插件执行mojos (有时是相同的mojos，有时是不同的mojos) 的情况下，执行级配置是最常用的。"],["body","\n"],["body","这些情况通常涉及作为标准构建过程的一部分引入的插件，但这些插件不存在于该特定包装的默认生命周期映射中"],["body","\n"],["body","These cases normally involve plugins that are introduced as part of the standard build process, but which aren't present in the default lifecycle mapping for that particular packaging. In these cases, common settings shared between executions are still normally specified in the plugin-level configuration."],["body","\n"],["body","However, these two options leave out a few important configuration use cases:"],["body","\n\n"],["body","Mojos run from the command line and during the build, when the CLI-driven invocation requires its own configuration."],["body","\n"],["body","Mojo executions that are bound to the lifecycle as part of the default mapping for a particular packaging, especially in cases where the same mojos need to be added to a second execution with different configuration."],["body","\n"],["body","Groups of mojos from the same plugin that are bound to the lifecycle as part of the default mapping for a particular packaging, but require separate configurations."],["body","\n\n"],["headingLink","default-executionids-for-implied-executions"],["heading","Default executionIds for Implied Executions"],["body","\n"],["body","When you consider the fact that the aforementioned configuration use cases are for mojos that are not explicitly mentioned in the POM, it's reasonable to refer to them as implied executions. But if they're implied, how can Maven allow users to provide configuration for them? The solution we've implemented is rather simple and low-tech, but should be more than adequate to handle even advanced use cases. Starting in Maven 2.2.0, each mojo invoked directly from the command line will have an execution Id of default-cli assigned to it, which will allow the configuration of that execution from the POM by using this default execution Id. Likewise, each mojo bound to the build lifecycle via the default lifecycle mapping for the specified POM packaging will have an execution Id of default-<goalName> assigned to it, to allow configuration of each default mojo execution independently."],["body","\n"],["headingLink","example-command-line-variant-invocation-of-the-assembly-plugin"],["heading","Example: Command-line variant invocation of the assembly plugin"],["body","\n"],["body","Consider the case where the user wants to execute the assembly:assembly mojo directly on the command line, but already has a configuration for the assembly:single mojo that runs during the main build lifecycle. Since these configurations require different options, the user cannot use the plugin-level configuration section to specify common elements."],["body","\n"],["body","In this case, the assembly-plugin configuration might look like this:"],["body","\n"],["body","<plugin>  <artifactId>maven-assembly-plugin</artifactId>  <configuration>    <tarLongFileMode>gnu</tarLongFileMode>      </configuration>  <executions>    <execution>      <id>build-distros</id>      <phase>package</phase>      <goals>        <goal>single</goal>      </goals>      <configuration>        <descriptors>          <descriptor>src/main/assembly/bin.xml</descriptor>          <descriptor>src/main/assembly/src.xml</descriptor>        </descriptors>      </configuration>    </execution>    <execution>      <id>default-cli</id>      <configuration>        <descriptorRefs>          <descriptorRef>jar-with-dependencies</descriptorRef>          <descriptorRef>project</descriptorRef>        </descriptorRefs>      </configuration>    </execution>  </executions></plugin>\n"],["body","\n"],["body","In the above example, you can see several interesting things. First, the main build process will invoke the assembly:single mojo during the package phase of the build, and produce both binary and source distribution artifacts using custom assembly descriptors included with the project. Second, all invocations of the assembly plugin should use a tarLongFileMode strategy of gnu. Finally, when the assembly plugin is invoked from the command line, it will build the standard jar-with-dependencies and project artifacts for the project, and ignore the custom assembly descriptors in src/main/assembly."],["body","\n"],["body","Now, notice the difference in the way the two execution blocks reference assembly descriptors. One uses custom descriptors via the descriptors section, and the other uses standard descriptors via the descriptorRefs section. These two sections cannot override one another, so it's impossible to setup one section - say, descriptorRefs - in the plugin-level configuration block (to provide CLI access to it, as historical versions of Maven would require), then have the build-distros invocation override it with the custom descriptors specified in the descriptors section."],["body","\n"],["headingLink","example-configuring-compile-to-run-twice"],["heading","Example: Configuring compile to run twice"],["body","\n"],["body","In this scenario, the user wants to run the compiler:compile mojo twice for his jar packaging project. The main reason for this is to provide an entry point into the application that will warn the user if he's using a Java version older than 1.5, then exit gracefully. Without such an entry point, the user would be confronted with a stacktrace in the event he tried to run this application with a 1.4 or older JRE."],["body","\n"],["body","Therefore, the user needs to compile the bulk of his application to target the 1.5 Java specification, then compile the rest (the entry point) to target an older specification...say, 1.3. The first execution will specify the source and target values at 1.5, and add an excludes section to avoid compiling the entry point for the application. The second pass will then re-specify source and target to 1.3, and basically invert the original excludes section to be an includes section, so as to compile only the entry point class."],["body","\n"],["body","The resulting configuration might look something like this:"],["body","\n"],["body","<plugin>  <artifactId>maven-compiler-plugin</artifactId>  <configuration>    <source>1.5</source>    <target>1.5</target>  </configuration>  <executions>    <execution>      <id>default-compile</id>      <configuration>        <excludes>          <exclude>**/cli/*</exclude>        </excludes>      </configuration>    </execution>    <execution>      <id>build-java14-cli</id>      <phase>compile</phase>      <goals>        <goal>compile</goal>      </goals>      <configuration>        <source>1.3</source>        <target>1.3</target>        <includes>          <include>**/cli/*</include>        </includes>      </configuration>    </execution>  </executions></plugin>\n"],["body","\n"],["body","There are three important things to notice in the above compiler-plugin configuration:"],["body","\n\n"],["body","The default source and target compatibility levels are for Java 1.5. This means that the compiler will generate binaries for Java 1.5 from both the main codebase and the test codebase, unless otherwise overridden."],["body","\n"],["body","The default pass of the compile goal will exclude the **/cli/* path pattern, but will compile everything else in src/main/java to run under Java 1.5."],["body","\n"],["body","The second pass of the compile mojo - in the execution called build-java14-cli - resets the source and target versions to 1.3, and inverts the exclude rule from the first pass. This means the second time around, the compiler will produce 1.4-targeted binaries for the classes matching the **/cli/* path pattern."],["body","\n\n"],["headingLink","example-configuring-compile-and-testcompile-mojos-separately"],["heading","Example: Configuring compile and testCompile mojos separately"],["body","\n"],["body","Finally, building on our use of the compiler plugin to tease out these different use cases, consider the case where a user wants to target version 1.4 of the Java specification as his runtime platform. However, he still wants the convenience and other advantages to be found in a unit-testing framework like TestNG. This forces the user to configure the compile mojo with one set of source and target values - specifically, 1.4 - and the testCompile mojo with another (1.5)."],["body","\n"],["body","The resulting compiler-plugin configuration might look something like the following:"],["body","\n"],["body","<plugin>  <artifactId>maven-compiler-plugin</artifactId>  <executions>    <execution>      <id>default-compile</id>      <configuration>        <source>1.3</source>        <target>1.3</target>      </configuration>    </execution>    <execution>      <id>default-testCompile</id>      <configuration>        <source>1.5</source>        <target>1.5</target>      </configuration>    </execution>  </executions></plugin>\n"],["body","\n"],["body","This example is fairly simple and straightforward. First, the default-compile execution sets the source and target values to 1.3 to allow older Java versions to run the project. Then, the default-testCompile execution resets the source and target values to 1.5, which enables the project to use tools like TestNG that use annotations."],["body","\n"],["body","Incidentally, it's perhaps useful to point out that the example above is a little bit contrived; the compiler plugin targets Java 1.3 by default, so the only configuration that's really required is the default-testCompile execution. The default-compile execution respecifies plugin defaults. The only time this might be useful is when a parent POM defines a plugin-level configuration for source and target that needs to be changed for the purposes of these different compiler executions. This example is meant to be illustrative of the potential for separate configuration of default lifecycle mojos."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/maven-编译源码.html"],["title","maven-编译源码.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Apache Maven Source Plugin"],["body","\n"],["body","source plugin 创建当前项目源文件的 jar 存档"],["body","\n"],["h1","Goals Overview"],["body","\n"],["body","The Source Plugin has five goals:"],["body","\n"],["body","source:aggregate: 在聚合项目的所有模块 中 聚合所有源代码\nsource:jar: 用于将项目的主要来源捆绑到一个jar中\nsource:test-jar :将项目的测试源捆绑到 jar 存档中\nsource:jar-no-fork ：类似于 jar 但不分叉构建生命周期.\nsource:test-jar-no-fork ：类似于 test-jar，但不分叉构建生命周期。."],["body","\n"],["h1","模板配置"],["body","\n"],["body","<project>\n  ...\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-source-plugin</artifactId>\n        <version>3.2.0</version>\n        <configuration>\n          <outputDirectory>/absolute/path/to/the/output/directory</outputDirectory>\n          <finalName>filename-of-generated-jar-file</finalName>\n          <attach>false</attach>\n        </configuration>\n      </plugin>\n    </plugins>\n  </build>\n  ...\n</project>\n"],["body","\n"],["body","<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-source-plugin</artifactId>\n    <version>3.2.0</version>\n    <executions>\n        <execution>\n            <id>attach-sources</id>\n            <phase>package</phase>\n            <goals>\n                <goal>jar-no-fork</goal>\n            </goals>\n        </execution>\n    </executions>\n</plugin>\n"],["body","\n"],["body","生成的 jar 文件，如果是主源，会以 finalName 的值加上“-sources”来命名。否则，如果它是测试源，它将是 finalName 加上“-test-sources”。它将在指定的 outputDirectory 中生成。 attach 参数指定 java 源是否将附加到项目的工件列表中。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/AutoConfig插件.html"],["title","AutoConfig插件.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","需求分析"],["heading","需求分析"],["body","\n"],["body","在一个应用中，我们总是会遇到一些参数，例如："],["body","\n\n"],["body","数据库服务器IP地址、端口、用户名；"],["body","\n"],["body","用来保存上传资料的目录。"],["body","\n"],["body","一些参数，诸如是否打开cache、加密所用的密钥名称等等。"],["body","\n\n"],["body","这些参数有一个共性，那就是：它们和应用的逻辑无关，只和当前环境、当前系统用户相关。以下场景很常见："],["body","\n\n"],["body","在开发、测试、发布阶段，使用不同的数据库服务器；"],["body","\n"],["body","在开发阶段，使用Windows的A开发者将用户上传的文件存放在d:\\my_upload目录中，而使用Linux的B开发者将同样的文件存放在/home/myname/my_upload目录中。"],["body","\n"],["body","在开发阶段设置cache=off，在生产环境中设置cache=on。"],["body","\n\n"],["body","很明显，这些参数不适合被“硬编码”在配置文件或代码中。因为每一个从源码库中取得它们的人，都有可能需要修改它们，使之与自己的环境相匹配。"],["body","\n"],["headingLink","解决方案"],["heading","解决方案"],["body","\n"],["headingLink","运行时替换的placeholders"],["heading","运行时替换的placeholders"],["body","\n"],["body","很多框架支持在运行时刻替换配置文件中的placeholder占位符。例如， Webx/Spring就有这个功能。"],["body","\n"],["body","<services:property-placeholder />\n\n<services:webx-configuration>\n    <services:productionMode>${productionMode:true}</services:productionMode>\n</services:webx-configuration>\n"],["body","\n"],["body","在上面这个例子中，你可以在启动应用时，加上JVM参数：“-DproductionMode=false|true”来告诉系统用哪一种模式来工作。如果不指定，则取默认值“true”。"],["body","\n"],["body","运行时替换placeholder是一种非常实用的技术，它有如下优缺点："],["body","\n"],["body","优点"],["body","缺点"],["body","\n"],["body","配置文件是静态的、不变的。即使采用不同的参数值，你也不需要更改配置文件本身。你可以随时改变参数的值，只需要启动时指定不同的JVM参数、或指定不同的properties文件即可。这种配置对于应用程序各组件是透明的 —— 应用程序不需要做特别的编程，即可使用placeholders。"],["body","并非所有框架都支持这种技术。"],["body","支持该技术的框架各有不同的用法。例如：Spring和Log4j都支持placeholder替换，然则它们的做法是完全不同的。Spring通过PropertyPlaceholderConfigurer类来配置，而Log4j则需要在DomConfigurator中把参数传进去。"],["body","\n\n\n"],["headingLink","中心配置服务器config-server"],["heading","中心配置服务器（Config Server）"],["body","\n"],["body","这也是一种运行时技术。它可以在运行时刻，将应用所需的参数推送到应用中。"],["body","\n"],["body","中心配置服务器的优缺点"],["body","\n"],["body","优点"],["body","缺点"],["body","\n"],["body","它可以集中管理所有应用的配置，避免可能的错误；它可以在运行时改变参数的值，并推送到所有应用中。参数的更改可立即生效。"],["body","需要一套独立的服务器系统。性能、可用性（availability）都是必须考虑的问题。对应用不是透明的，有一定的侵入性。应用程序必须主动来配合该技术。因此，该技术不可能适用于所有情况，特别对于第三方提供的代码，很难使用该技术。为了连接到中心配置服务器，你仍然需要配置适当的IP、端口等参数。你需要用其它技术来处理这些参数（例如placeholders）。"],["body","\n\n\n"],["headingLink","maven-filtering机制"],["heading","Maven Filtering机制"],["body","\n"],["body","Maven提供了一种过滤机制，可以在资源文件被复制到目标目录的同时，替换其中的placeholders。"],["body","\n"],["body","web-project\n │  pom.xml\n │\n └─src\n     └─main\n         ├─java\n         ├─resources\n         └─webapp\n             └─WEB-INF\n                     web.xml\n"],["body","\n"],["body","在pom.xml中这样写："],["body","\n"],["body","<build>\n    <filters>\n        <filter>${user.home}/antx.properties</filter> \n    </filters>\n    <resources>\n        <resource>\n            <directory>src/main/resources</directory> \n            <includes>\n                <include>**.xml</include>\n            </includes>\n            <filtering>true</filtering>\n        </resource>\n        <resource>\n            <directory>src/main/resources</directory>\n            <excludes>\n                <exclude>**.xml</exclude>\n            </excludes>\n        </resource>\n    </resources>\n    <plugins>\n        <plugin>\n            <artifactId>maven-war-plugin</artifactId>\n            <configuration>\n                <webResources>\n                    <resource>\n                        <directory>src/main/webapp</directory> \n                        <includes>\n                            <include>WEB-INF/**.xml</include>\n                        </includes>\n                        <filtering>true</filtering>\n                    </resource>\n                    <resource>\n                        <directory>src/main/webapp</directory>\n                        <excludes>\n                            <include>WEB-INF/**.xml</include>\n                        </excludes>\n                    </resource>\n                </webResources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n"],["body","\n"],["body","这段pom定义告诉maven："],["body","\n\n"],["body","用指定的properties文件（${user.home}/antx.properties）中的值，替换文件中的placeholders"],["body","\n"],["body","过滤src/main/resources/目录中的所有xml文件，替换其中的placeholders。"],["body","\n"],["body","过滤src/webapp/WEB-INF/目录中的所有xml文件，替换其中的placeholders。"],["body","\n\n"],["body","如果上述xml文件中，包含“${xxx.yyy.zzz}”这样的placeholders，将被替换成properties文件中的相应值。"],["body","\n"],["body","和运行时替换placeholders方案相比，Maven Filtering是一个build时进行的过程。它的优缺点是："],["body","\n"],["body","Maven Filtering机制的优缺点"],["body","\n"],["body","优点"],["body","缺点"],["body","\n"],["body","Maven filtering机制和应用所采用的技术、框架完全无关，对应用完全透明，通用性好。"],["body","Maven filtering机制在build时刻永久性改变被过滤的配置文件的内容，build结束以后无法更改。这将导致一个问题：如果要改变配置文件的参数，必须获取源码并重新build。缺少验证机制。当某个placeholder拼写错误；当properties中的值写错；当某配置文件中新增了一个placeholder，而你的properties文件中没有对应的值时，maven不会提醒你。而这些错误往往被拖延到应用程序运行时才会被报告出来。"],["body","\n\n\n"],["headingLink","autoconfig机制"],["heading","AutoConfig机制"],["body","\n"],["body","AutoConfig是一种类似于Maven Filtering的build时刻的工具。"],["body","\n"],["body","这意味着该机制与应用所采用的技术、框架完全无关，对应用完全透明，具有良好的通用性。"],["body","\n"],["body","同时，AutoConfig与运行时的配置技术并不冲突。"],["body","\n"],["body","它可以和运行时替换的placeholders以及中心配置服务器完美并存，互为补充。"],["body","\n"],["body","AutoConfig书写placeholder的方法和Maven Filtering机制完全相同。"],["body","\n"],["body","换言之，Maven Filtering的配置文件模板（前例中的/WEB-INF/**.xml）可以不加修改地用在AutoConfig中。"],["body","\n"],["body","然而，autoconfig成功克服了Maven Filtering的主要问题。"],["body","\n"],["body","Maven Filtering和AutoConfig的比较"],["body","\n"],["body","问题"],["body","Maven Filtering"],["body","AutoConfig"],["body","\n"],["body","如何修改配置文件的参数？"],["body","Maven Filtering必须获得源码并重新build；"],["body","而AutoConfig不需要提取源码，也不需要重新build，即可改变目标文件中所有配置文件中placeholders的值。"],["body","\n"],["body","如何确保placeholder替换的正确性？"],["body","Maven Filtering不能验证placeholder值的缺失和错误；"],["body","但AutoConfig可以对placeholder及其值进行检查。"],["body","\n\n\n"],["headingLink","autoconfig的设计"],["heading","AutoConfig的设计"],["body","\n"],["body","为了把事情说清楚，我们必须要定义两种角色：开发者（Developer）和部署者（Deployer）。"],["body","\n"],["headingLink","角色和职责"],["heading","角色和职责"],["body","\n"],["body","角色名称"],["body","职责"],["body","\n"],["body","开发者"],["body","定义应用所需要的properties，及其限定条件；提供包含placeholders的配置文件模板。"],["body","\n"],["body","部署者"],["body","根据所定义的properties，提供符合限定条件的属性值。调用AutoConfig来生成目标配置文件。"],["body","\n\n\n"],["body","例如，一个宠物店（petstore）的WEB应用中需要指定一个用来上传文件的目录。于是，"],["body","\n"],["headingLink","petstore应用中的角色和职责"],["heading","Petstore应用中的角色和职责"],["body","\n"],["body","开发者"],["body","部署者"],["body","\n"],["body","开发者定义了一个property：petstore.upload_dir，限定条件为：“合法的文件系统的目录名”。"],["body","部署者取得petstore的二进制发布包，通过AutoConfig了解到，应用需要一个名为petstore.upload_dir目录名。部署者便指定一个目录给petstore，该目录名的具体值可能因不同的系统而异。AutoConfig会检验该值是否符合限定条件（是否为合法目录名），如果检验通过，就生成配置文件，并将其中的${petstore.upload_dir}替换成该目录名。"],["body","\n\n\n"],["body","需要注意的是，一个“物理人”所对应的“角色”不是一成不变的。例如：某“开发者”需要试运行应用，此时，他就变成“部署者”。"],["body","\n"],["headingLink","分享二进制目标文件"],["heading","分享二进制目标文件"],["body","\n"],["body","假设现在有两个team要互相合作，team A的开发者创建了project A，而team B的开发者创建了project B。假定project B依赖于project A。如果我们利用maven这样的build工具，那么最显而易见的合作方案是这样的："],["body","\n\n"],["body","Team A发布一个project A的版本到maven repository中。"],["body","\n"],["body","Team B从maven repository中取得project A的二进制目标文件。"],["body","\n\n"],["body","这种方案有很多好处，"],["body","\n\n"],["body","每个team都可以独立控制自己发布版本的节奏；"],["body","\n"],["body","Team之间的关系较松散，唯一的关系纽带就是maven repository。"],["body","\n"],["body","Team之间不需要共享源码。"],["body","\n\n"],["body","然而，假如project A中有一些配置文件中的placeholders需要被替换，如果使用Maven Filtering机制，就会出现问题。因为Maven Filtering只能在project A被build时替换其中的placeholders，一旦project A被发布到repository中，team B的人将无法修改任何project A中的配置参数。除非team B的人取得project A的源码，并重新build。这将带来很大的负担。"],["body","\n"],["body","然而，假如project A中有一些配置文件中的placeholders需要被替换，如果使用Maven Filtering机制，就会出现问题。因为Maven Filtering只能在project A被build时替换其中的placeholders，一旦project A被发布到repository中，team B的人将无法修改任何project A中的配置参数。除非team B的人取得project A的源码，并重新build。这将带来很大的负担。"],["body","\n"],["body","AutoConfig解决了这个问题。因为当team B的人从maven repository中取得project A的二进制包时，仍然有机会修改其配置文件里的placeholders。Team B的人甚至不需要了解project A里配置文件的任何细节，AutoConfig会自动发现所有的properties定义，并提示编辑。"],["body","\n"],["headingLink","部署二进制目标文件"],["heading","部署二进制目标文件"],["body","\n"],["body","部署应用的人（即部署者、deployer）也从中受益。因为deployer不再需要亲手去build源代码，而是从maven repository中取得二进制目标文件即可。"],["body","\n"],["body","从这个意义上讲，AutoConfig不应当被看成是一个build时的简单配置工具"],["body","\n"],["body","，而是一个“软件安装工具”。如同我们安装一个Windows软件 —— 我们当然不需要从源码开始build它们，而是执行其安装程序，设定一些参数诸如安装目录、文档目录、可选项等。安装程序就会自动把软件设置好，确保软件可正确运行于当前的Windows环境中。"],["body","\n"],["headingLink","autoconfig特性列表"],["heading","AutoConfig特性列表"],["body","\n"],["body","名称"],["body","描述"],["body","\n"],["body","两种用法"],["body","既可独立使用（支持Windows和Unix-like平台）。也可以作为maven插件来使用。"],["body","\n"],["body","对目标文件而不是源文件进行配置"],["body","可对同一个目标文件反复配置。配置时不依赖于项目源文件。支持嵌套包文件，例如：ear包含war，war又包含jar。高性能，特别对于嵌套的包文件。"],["body","\n"],["body","验证和编辑properties"],["body","自动发现保存于war包、jar包、ear包中的properties定义。验证properties的正确性。交互式编辑properties。当配置文件中出现未定义的placeholders时，提示报错。"],["body","\n\n\n"],["headingLink","autoconfig的使用--开发者指南"],["heading","AutoConfig的使用 —— 开发者指南"],["body","\n"],["headingLink","建立autoconfig目录结构"],["heading","建立AutoConfig目录结构"],["body","\n"],["body","和Maven Filtering不同的是，AutoConfig是针对目标文件的配置工具"],["body","\n"],["body","因此AutoConfig关心的目录结构是目标文件的目录结构"],["body","\n"],["body","不同的build工具，创建同一目标目录结构所需要的源文件的目录结构会各有不同。"],["body","\n"],["body","本文仅以maven标准目录结构为例，来说明源文件的目录结构编排。"],["body","\n"],["headingLink","war包的目录结构"],["heading","WAR包的目录结构"],["body","\n"],["body","这里所说的war包，可以是一个以zip方式打包的文件，也可以是一个展开的目录。下面以maven标准目录为例，说明项目源文件和目标文件的目录结构的对比："],["body","\n"],["body","war-project（源目录结构）               -> war-project.war（目标目录结构）\n │  pom.xml\n │\n └─src\n     └─main\n         ├─java\n         ├─resources                    -> /WEB-INF/classes\n         │      file1.xml                      file1.xml\n         │      file2.xml                      file2.xml\n         │\n         └─webapp                       -> /\n             ├─META-INF                 -> /META-INF\n             │  └─autoconf              -> /META-INF/autoconf \n             │        auto-config.xml          auto-config.xml \n             │\n             └─WEB-INF                  -> /WEB-INF\n                   web.xml                     web.xml\n                   file3.xml                   file3.xml\n"],["body","\n\n"],["body","/META-INF/autoconf目录用来存放AutoConfig的描述文件，以及可选的模板文件。"],["body","\n"],["body","auto-config.xml是用来指导AutoConfig行为的关键描述文件。"],["body","\n\n"],["body","创建war包的AutoConfig机制，关键在于创建war目标文件中的/META-INF/autoconf/auto-config.xml描述文件。该描述文件对应的maven项目源文件为：/src/main/webapp/META-INF/autoconf/auto-config.xml。"],["body","\n"],["headingLink","jar包的目录结构"],["heading","JAR包的目录结构"],["body","\n"],["body","这里所说的jar包，可以是一个以zip方式打包的文件，也可以是一个展开的目录。下面以maven标准目录为例，说明项目源文件和目标文件的目录结构的对比："],["body","\n"],["body","JAR包的源文件和目标文件目录结构"],["body","\n"],["body","jar-project（源目录结构）               -> jar-project.jar（目标目录结构）\n │  pom.xml\n │\n └─src\n     └─main\n         ├─java\n         └─resources                    -> /\n             │  file1.xml                      file1.xml\n             │  file2.xml                      file2.xml\n             │\n             └─META-INF                 -> /META-INF\n                 └─autoconf             -> /META-INF/autoconf \n                       auto-config.xml         auto-config.xml \n"],["body","\n\n"],["body","/META-INF/autoconf目录用来存放AutoConfig的描述文件，以及可选的模板文件。"],["body","\n"],["body","创建jar包的AutoConfig机制，关键在于创建jar目标文件中的/META-INF/autoconf/auto-config.xml描述文件。该描述文件对应的maven项目源文件为：/src/main/resources/META-INF/autoconf/auto-config.xml。"],["body","\n\n"],["headingLink","普通目录"],["heading","普通目录"],["body","\n"],["body","AutoConfig也支持对普通文件目录进行配置。"],["body","\n"],["body","directory\n │  file1.xml\n │  file2.xml\n │\n └─conf \n       auto-config.xml \n"],["body","\n\n"],["body","默认情况下，AutoConfig在/conf目录中寻找AutoConfig的描述文件，以及可选的模板文件。"],["body","\n\n"],["headingLink","建立auto-configxml描述文件"],["heading","建立auto-config.xml描述文件"],["body","\n"],["body","AutoConfig系统的核心就是auto-config.xml描述文件。该描述文件中包含两部分内容："],["body","\n\n"],["body","定义properties：properties的名称、描述、默认值、约束条件等信息；"],["body","\n"],["body","指定包含placeholders的模板文件。"],["body","\n\n"],["body","下面是auto-config.xml文件的样子：（以petstore应用为例）"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<config>\n    <group>\n\n        <property name=\"petstore.work\"\n                    description=\"应用程序的工作目录\" /> \n\n        <property name=\"petstore.loggingRoot\" \n                    defaultValue=\"${petstore.work}/logs\"\n                    description=\"日志文件目录\" /> \n\n        <property name=\"petstore.upload\"\n                    defaultValue=\"${petstore.work}/upload\"\n                    description=\"上传文件的目录\" /> \n\n        <property name=\"petstore.loggingLevel\"\n                    defaultValue=\"warn\"\n                    description=\"日志文件级别\"> \n\n            <validator name=\"choice\"\n                         choice=\"trace, debug, info, warn, error\" /> \n        </property>\n\n    </group>\n    <script>\n        <generate template=\"WEB-INF/web.xml\" /> \n        <generate template=\"WEB-INF/common/resources.xml\" />\n    </script>\n</config>\n"],["body","\n"],["headingLink","定义properties"],["heading","定义properties"],["body","\n"],["body","<property\n    name=\"...\"\n    [defaultValue=\"...\"]\n    [description=\"...\"]\n    [required=\"true|false\"]\n>\n    <validator name=\"...\" />\n    <validator name=\"...\" />\n    ...\n</property>\n"],["body","\n"],["body","定义property时可用的参数"],["body","\n"],["body","参数名"],["body","说明"],["body","\n"],["body","name"],["body","Property名称。"],["body","\n"],["body","defaultValue（可选）"],["body","默认值。默认值中可包含对其它property的引用，如${petstore.work}/logs。"],["body","\n"],["body","description（可选）"],["body","对字段的描述，这个描述会显示给deployer，这对他理解该property非常重要。"],["body","\n"],["body","required（可选）"],["body","是否“必填”，默认为true。如果deployer未提供必填项的值，就会报错。"],["body","\n\n\n"],["body","定义property的验证规则"],["body","\n"],["body","可用的property验证规则"],["body","\n"],["body","验证规则"],["body","说明"],["body","\n"],["body","<validator name=\"boolean\" />"],["body","Property值必须为true或false。"],["body","\n"],["body","<validator name=\"choice\"           choice=\"trace, debug, info, warn, error\" />"],["body","Property值必须为choice所定义的值之一。"],["body","\n"],["body","<validator** name=\"email\" />"],["body","Property值必须为合法的email格式。"],["body","\n"],["body","<validator name=\"fileExist\"           [file=\"WEB-INF/web.xml\"] />"],["body","Property值必须为某个存在的文件或目录。如果指定了file，那就意味着property值所指的目录下，必须存在file所指的文件或子目录。"],["body","\n"],["body","<validator name=\"hostExist\" />"],["body","Property值必须为合法的IP地址，或者可以解析得到的域名。"],["body","\n"],["body","<validator name=\"keyword\" />"],["body","Property值必须为字母、数字、下划线的组合。"],["body","\n"],["body","<validator name=\"number\" />"],["body","Property值必须为数字的组合。"],["body","\n"],["body","`<validator name=\"regexp\"           regexp=\"...\"           [mode=\"exact"],["body","prefix"],["body","\n"],["body","<validator name=\"url\"           [checkHostExist=\"false\"]           [protocols=\"http, https\"]           [endsWithSlash=\"true\"] />"],["body","Property值必须是合法URL。假如指定了checkHostExist=true，那么还会检查域名或IP的正确性；假如指定了protocols，那么URL的协议必须为其中之一；假如指定了endsWithSlash=true，那么URL必须以/结尾。"],["body","\n\n\n"],["headingLink","生成配置文件的指令"],["heading","生成配置文件的指令"],["body","\n"],["body","描述文件中，每个<generate>标签指定了一个包含placeholders的配置文件模板，具体格式为："],["body","\n"],["body","<generate\n    template=\"...\"\n    [destfile=\"...\"]\n    [charset=\"...\"]\n    [outputCharset=\"...\"]\n>\n"],["body","\n"],["body","生成配置文件的指令参数"],["body","\n"],["body","参数名"],["body","说明"],["body","\n"],["body","template"],["body","需要配置的模板名。模板名为相对路径，相对于当前jar/war/ear包的根目录。"],["body","\n"],["body","destfile（可选）"],["body","目标文件。如不指定，表示目标文件和模板文件相同。"],["body","\n"],["body","charset（可选）"],["body","模板的字符集编码。XML文件不需要指定charset，因为AutoConfig可以自动取得XML文件的字符集编码；对其它文件必须指定charset。"],["body","\n"],["body","outputCharset（可选）"],["body","目标文件的输出字符集编码。如不指定，表示和模板charset相同。"],["body","\n\n\n"],["headingLink","建立模板文件"],["heading","建立模板文件"],["body","\n"],["headingLink","模板文件的位置"],["heading","模板文件的位置"],["body","\n"],["body","定义完auto-config.xml描述文件以后，就可以创建模板了。模板放在哪里呢？举例说明。"],["body","\n"],["body","假设在一个典型的WEB应用中，你的auto-config.xml中包含指定了如下模板："],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<config>\n    <group>\n        ...\n    </group>\n    <script>\n        <generate template=\"WEB-INF/classes/file1.xml\" />\n        <generate template=\"WEB-INF/classes/file2.xml\" />\n        <generate template=\"WEB-INF/file3.xml\" />\n    </script>\n</config>\n"],["body","\n"],["body","那么，你可以把file1.xml、file2.xml、file3.xml放在下面的位置："],["body","\n"],["body","war-project（源目录结构）               -> war-project.war（目标目录结构）\n │  pom.xml\n │\n └─src\n     └─main\n         ├─java\n         ├─resources                    -> /WEB-INF/classes\n         │     file1.xml                       file1.xml - 建议放在这里\n         │     file2.xml                       file2.xml - 建议放在这里\n         │\n         └─webapp\n             ├─META-INF\n             │  └─autoconf\n             │      │  auto-config.xml\n             │      │\n             │      └─WEB-INF           -> /WEB-INF\n             │          │ file3.xml            file3.xml - 也可以放在这里\n             │          │\n             │          └─classes       -> /WEB-INF/classes\n             │                file1.xml        file1.xml - 也可以放在这里\n             │                file2.xml        file2.xml - 也可以放在这里\n             │\n             └─WEB-INF                  -> /WEB-INF\n                   file3.xml                   file3.xml - 建议放在这里\n"],["body","\n"],["body","AutoConfig的寻找模板的逻辑是："],["body","\n\n"],["body","如果在auto-config.xml所在的目录下发现模板文件，就使用它；"],["body","\n"],["body","否则在包的根目录中查找模板文件；如果两处均未找到，则报错。"],["body","\n\n"],["headingLink","模板的写法"],["heading","模板的写法"],["body","\n"],["body","书写模板是很简单的事，你只要："],["body","\n\n"],["body","把需要配置的点替换成placeholder：“${property.name}”。当然，你得确保property.name被定义在auto-config.xml中。"],["body","\n"],["body","假如模板中包含不希望被替换的运行时的placeholder“${...}”，需要更改成“${D}{...}” 。"],["body","\n\n"],["body","...\n<context-param>\n    <param-name>loggingRoot</param-name>\n    <param-value>${petstore.loggingRoot}</param-value>\n</context-param>\n<context-param>\n    <param-name>loggingLevel</param-name>\n    <param-value>${petstore.loggingLevel}</param-value>\n</context-param>\n...\n${D}{runtime.placeholder}\n"],["body","\n"],["body","此外，AutoConfig模板其实是由Velocity模板引擎来渲染的。因此，所有的placeholder必须能够通过velocity的语法。"],["body","\n"],["body","使用不符合velocity语法的placeholders"],["body","\n"],["body","例如，下面的placeholder被velocity看作非法："],["body","\n"],["body","${my.property.2}\n"],["body","\n"],["body","解决的办法是，改写成如下样式："],["body","\n"],["body","${my_property_2}\n"],["body","\n"],["headingLink","autoconfig的使用--部署者指南"],["heading","AutoConfig的使用 —— 部署者指南"],["body","\n"],["body","部署者有两种方法可以使用AutoConfig："],["body","\n\n"],["body","在命令行上直接运行。"],["body","\n"],["body","在maven中调用AutoConfig plugin。"],["body","\n\n"],["headingLink","在命令行中使用autoconfig"],["heading","在命令行中使用AutoConfig"],["body","\n"],["headingLink","取得可执行文件"],["heading","取得可执行文件"],["body","\n"],["body","AutoConfig提供了Windows以及Unix-like（Linux、Mac OS等）等平台上均可使用的native可执行程序。可执行程序文件被发布在Maven repository中。"],["body","\n"],["body","如果你已经配置好了maven，那么可以让maven来帮你下载目标文件。"],["body","\n"],["body","例 13.12. 让maven帮忙下载AutoConfig可执行文件"],["body","\n"],["body","请创建一个临时文件：pom.xml。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    <parent>\n        <groupId>com.alibaba.citrus.tool</groupId>\n        <artifactId>antx-parent</artifactId>\n        <version>1.2</version> \n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n    <artifactId>temp</artifactId>\n</project>\n"],["body","\n"],["body","文件中的parent pom的版本号（1.2）决定了你要取得的AutoConfig的版本号。"],["body","\n"],["body","然后在命令行上执行如下命令："],["body","\n"],["body","mvn dependency:copy\n"],["body","\n"],["body","这样就取得了两个文件："],["body","\n\n"],["body","autoconfig-1.2.tgz"],["body","\n"],["body","autoexpand-1.2.tgz - AutoExpand是另一个小工具。它是用来展开war、jar、ear包的。关于AutoExpand的详情，请见第 14 章 AutoExpand工具使用指南。"],["body","\n\n"],["body","你也可以直接去maven repository中手工下载以上两个包："],["body","\n\n"],["body","http://repo1.maven.org/maven2/com/alibaba/citrus/tool/antx-autoconfig/1.2/antx-autoconfig-1.2.tgz"],["body","\n"],["body","http://repo1.maven.org/maven2/com/alibaba/citrus/tool/antx-autoexpand/1.2/antx-autoexpand-1.2.tgz"],["body","\n\n"],["body","取得压缩包以后，可以用下面的命令来展开并安装工具。"],["body","\n"],["body","展开并安装工具"],["body","\n"],["body","Unix-like系统"],["body","Windows系统"],["body","\n"],["body","tar zxvf autoconfig-1.2.tgz tar zxvf autoexpand-1.2.tgz cp autoconfig /usr/local/bin cp autoexpand /usr/local/bin"],["body","tar zxvf autoconfig-1.2.tgz tar zxvf autoexpand-1.2.tgz copy autoconfig.exe c:\\windows\\system32 copy autoexpand.exe c:\\windows\\system32"],["body","\n\n\n"],["headingLink","执行autoconfig命令"],["heading","执行AutoConfig命令"],["body","\n"],["body","取得可执行文件以后，就可以试用一下：在命令行上输入autoconfig。不带参数的autoconfig命令会显示出如下帮助信息。"],["body","\n"],["body","例 13.13. AutoConfig的帮助信息"],["body","\n"],["body","$ autoconfig\nDetected system charset encoding: UTF-8\nIf your can't read the following text, specify correct one like this: \n  autoconfig -c mycharset\n\n使用方法：autoconfig [可选参数] [目录名|包文件名]\n                \n可选参数：\n -c,--charset                输入/输出编码字符集\n -d,--include-descriptors\n                             包含哪些配置描述文件，例如：conf/auto-config.xml，可使用*、**、?通配符，如有多项，用逗号分隔\n -D,--exclude-descriptors    排除哪些配置描述文件，可使用*、**、?通配符，如有多项，用逗号分隔\n -g,--gui                    图形用户界面（交互模式）\n -h,--help                   显示帮助信息\n -i,--interactive            交互模式：auto|on|off，默认为auto，无参数表示on\n -I,--non-interactive        非交互模式，相当于--interactive=off\n -n,--shared-props-name      共享的属性文件的名称\n -o,--output                 输出文件名或目录名\n -P,--exclude-packages       排除哪些打包文件，可使用*、**、?通配符，如有多项，用逗号分隔\n -p,--include-packages\n                             包含哪些打包文件，例如：target/*.war，可使用*、**、?通配符，如有多项，用逗号分隔\n -s,--shared-props           共享的属性文件URL列表，以逗号分隔\n -T,--type                   文件类型，例如：war, jar, ear等\n -t,--text                   文本用户界面（交互模式）\n -u,--userprop               用户属性文件\n -v,--verbose                显示更多信息\n\n总耗费时间：546毫秒\n"],["body","\n"],["body","最简单的AutoConfig命令"],["body","\n"],["body","autoconfig petstore.war\n"],["body","\n"],["body","无论petstore.war是一个zip包还是目录，AutoConfig都会正确地生成其中的配置文件。"],["body","\n"],["headingLink","在maven中使用autoconfig"],["heading","在maven中使用AutoConfig"],["body","\n"],["body","AutoConfig也可以通过maven plugin来执行。"],["body","\n"],["body","这种方式使用方式，方便了开发者试运行并测试应用程序。开发者可以在build项目的同时，把AutoConfig也配置好。然而对于非开发的应用测试人员、发布应用的系统管理员来说，最好的方法是使用独立可执行的AutoConfig来配置应用的二进制目标文件。"],["body","\n"],["body","为了使用maven插件，你需要修改项目的pom.xml来设定它。请注意，一般来说，不要在parent pom.xml中设定AutoConfig，因为这个设置会作用在每个子项目上，导致不必要的AutoConfig执行。只在生成最终目标文件的子项目pom.xml中设定AutoConfig就可以了。例如，对于一个web项目，你可以在生成war包的子项目上设置AutoConfig plugin。"],["body","\n"],["body","在pom.xml中设定AutoConfig plugin"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n    ...\n    <properties>\n        ...\n        <!-- 定义autoconfig的版本，建议将此行写在parent pom.xml中。 -->\n        <autoconfig-plugin-version>1.2</autoconfig-plugin-version>\n    </properties>\n    ...\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>com.alibaba.citrus.tool</groupId>\n                <artifactId>autoconfig-maven-plugin</artifactId>\n                <version>${autoconfig-plugin-version}</version>\n                <configuration>\n                    <!-- 要进行AutoConfig的目标文件，默认为${project.artifact.file}。 \n                    <dest>${project.artifact.file}</dest>\n                    -->\n                    <!-- 配置后，是否展开目标文件，默认为false，不展开。 \n                    <exploding>true</exploding>\n                    -->\n                    <!-- 展开到指定目录，默认为${project.build.directory}/${project.build.finalName}。 \n                    <explodedDirectory>\n                        ${project.build.directory}/${project.build.finalName}\n                    </explodedDirectory>\n                    -->\n                </configuration>\n                <executions>\n                    <execution>\n                        <phase>package</phase>\n                        <goals>\n                            <goal>autoconfig</goal>\n                        </goals>\n                    </execution>\n                </executions>\n            </plugin>\n        </plugins>\n    </build>\n</project>\n"],["body","\n"],["body","这样，每次执行mvn package或者mvn install时，都会激活AutoConfig，对package目标文件进行配置。"],["body","\n"],["body","想要避免AutoConfig，只需要一个额外的命令行参数："],["body","\n"],["body","避免执行AutoConfig"],["body","\n"],["body","mvn install –Dautoconfig.skip\n"],["body","\n"],["headingLink","运行并观察autoconfig的结果"],["heading","运行并观察AutoConfig的结果"],["body","\n"],["body","第一次执行AutoConfig，无论通过何种方式（独立命令行或maven插件），"],["body","\n"],["body","AutoConfig都会提示你修改user properties文件，以提供所需要的properties值。"],["body","\n"],["body","AutoConfig提供了一套基于文本的交互式界面来编辑这些properties。"],["body","\n"],["body","交互式编辑properties"],["body","\n"],["body","╭───────────────────────┈┈┈┈\n│\n│ 您的配置文件需要被更新：\n│\n│ file:/.../antx.properties\n│\n│ 这个文件包括了您个人的特殊设置，\n│ 包括服务器端口、您的邮件地址等内容。\n│\n└───────┈┈┈┈┈┈┈┈┈┈┈\n\n 如果不更新此文件，可能会导致配置文件的内容不完整。\n 您需要现在更新此文件吗? [Yes][No] y\n"],["body","\n"],["body","当你通过交互式界面填写了所有properties的值，并通过了AutoConfig的验证以后，AutoConfig就开始生成配置文件："],["body","\n"],["body","即将保存到文件\"file:/.../antx.properties\"中, 确定? [Yes][No] y\n\n╭───────────────────────┈┈┈┈\n│ 保存文件 file:/.../antx.properties...\n│┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈┈\n│petstore.loggingLevel  = warn\n│petstore.loggingRoot   = ${petstore.work}/logs\n│petstore.upload        = ${petstore.work}/upload\n│petstore.work          = /tmp\n└───────┈┈┈┈┈┈┈┈┈┈┈\n 已保存至文件: file:/.../antx.properties\nLoading file:/.../antx.properties\n<jar:file:/.../Work/my/apps/petstore-webx3/target/petstore.war!/>\n    Generating WEB-INF/web.xml [UTF-8] => WEB-INF/web.xml [UTF-8]\n\n<jar:file:/.../Work/my/apps/petstore-webx3/target/petstore.war!/>\n    Generating WEB-INF/common/resources.xml [UTF-8] => WEB-INF/common/resources.xml [UTF-8]\n\n<jar:file:/.../Work/my/apps/petstore-webx3/target/petstore.war!/>\n    Generating log file: META-INF/autoconf/auto-config.xml.log\n\nExpanding: /.../Work/my/apps/petstore-webx3/target/petstore.war\n       To: /.../Work/my/apps/petstore-webx3/target/petstore\ndone.\n"],["body","\n"],["body","假如发现模板中某个placeholder，并未在auto-config.xml中定义，就会出现以下错误："],["body","\n"],["body","ERROR - Undefined placeholders found in template:\n- Template:   META-INF/autoconf/WEB-INF/web.xml\n- Descriptor: META-INF/autoconf/auto-config.xml\n- Base URL:   file:/.../Work/my/apps/petstore-webx3/target/petstore/\n---------------------------------------------------------------\n-> petstore.loggingRoot\n---------------------------------------------------------------\n"],["body","\n"],["body","出现错误以后，Maven会报错，并停止build过程。假如你不希望maven停止，可以用下面的命令来执行maven："],["body","\n"],["body","避免maven因为placeholder未定义而停止"],["body","\n"],["body","mvn ... –Dautoconfig.strict=false\n"],["body","\n"],["body","AutoConfig会生成一个日志文件，就在auto-config.xml所在的目录下，名字为：auto-config.xml.log。"],["body","\n"],["body","AutoConfig所生成的日志文件"],["body","\n"],["body","Last Configured at: Fri Jun 18 13:54:22 CST 2010\n\nBase URL: file:/.../Work/my/apps/petstore-webx3/target/petstore/\nDescriptor: META-INF/autoconf/auto-config.xml\n\nGenerating META-INF/autoconf/WEB-INF/web.xml [UTF-8] => WEB-INF/web.xml [UTF-8]\nGenerating META-INF/autoconf/WEB-INF/common/resources.xml [UTF-8] => WEB-INF/common/resources.xml [UTF-8]\n"],["body","\n"],["body","最后，让我们查看一下AutoConfig所生成的文件，其中所有的placeholders应当被替换成你所提供的值了。"],["body","\n"],["body","AutoConfig生成的结果"],["body","\n"],["body","...\n<context-param>\n    <param-name>loggingRoot</param-name>\n    <param-value>/tmp/logs</param-value>\n</context-param>\n<context-param>\n    <param-name>loggingLevel</param-name>\n    <param-value>warn</param-value>\n</context-param>\n...\n${runtime.placeholder}\n"],["body","\n"],["headingLink","共享properties文件"],["heading","共享properties文件"],["body","\n"],["body","当需要配置的内容越来越多时，即使使用AutoConfig这样的机制，也会变得不胜其烦。"],["body","\n"],["body","假如你的项目包含了好几个模块，而你只负责其中的一个模块。"],["body","\n"],["body","一般来说，你对其它模块的配置是什么并不清楚，事实上你也懒得去关心。"],["body","\n"],["body","但是你为了运行这个项目，你不得不去配置这些模块。"],["body","\n"],["body","假如模块A就是一个你不想关心的模块，但为了运行它，你需要告诉模块A一些参数：数据库连接的参数、域名、端口、文件目录、搜索引擎……可你并不清楚这些参数应该取什么值。"],["body","\n"],["body","好在AutoConfig提供了一个共享properties文件的方法。"],["body","\n"],["body","共享的properties文件"],["body","\n"],["body","你可以创建一系列文件：module-a-db.properites，module-a-searchengine.properties等等。每个文件中都包含了某个运行环境中的关于module A模块的配置参数。"],["body","\n"],["body","现在，你可以不关心module A了！你只要使用下面的命令："],["body","\n"],["body","-s参数代表“共享的properties文件”。"],["body","\n"],["body","autoconfig -s module-a-db.properties,module-a-searchengine.properties ……\n"],["body","\n"],["body","同时，你的antx.properties也被简化了，因为这里只会保存你定义的配置项，而不会包含共享的配置项。"],["body","\n"],["headingLink","共享整个目录"],["heading","共享整个目录"],["body","\n"],["body","假如共享的文件很多的话，AutoConfig还有一个贴心的功能，你可以把这些文件按目录来组织："],["body","\n"],["body","shared-properties/\n ├─test/                                 // 测试环境的共享配置\n │    module-a-db.properties\n │    module-a-searchengine.properties\n │    module-b.properties\n └─prod/                                 // 生产环境的共享配置\n       module-a-db.properties\n       module-a-searchengine.properties\n       module-b.properties\n"],["body","\n"],["body","然后，你可以直接在AutoConfig中引用目录："],["body","\n"],["body","autoconfig -s shared-propertes/test/ ……\n"],["body","\n"],["body","AutoConfig就会为你装载这个目录下的所有共享配置文件。（注意，目录必须以斜杠“/”结尾）"],["body","\n"],["headingLink","将共享目录放在httphttps或ssh服务器上"],["heading","将共享目录放在http、https或ssh服务器上"],["body","\n"],["body","AutoConfig还支持从http、https或ssh服务器上取得共享配置文件，只需要将前面例子中的文件名改成http或ssh的URI就可以了："],["body","\n"],["body","autoconfig -s http://share.alibaba.com/shared-propertes/test/ ……\nautoconfig -s http://myname@share.alibaba.com/shared-propertes/test/ ……\nautoconfig -s https://share.alibaba.com/shared-propertes/test/ ……\nautoconfig -s https://myname@share.alibaba.com/shared-propertes/test/ ……\nautoconfig -s ssh://myname@share.alibaba.com/shared-propertes/test/ ……\n"],["body","\n"],["body","由于Subversion、Git服务器是支持HTTP/HTTPS协议的，因此将properties文件存放在Subversion或Git服务器上，也是一个极好的办法。由于采用了Subversion或Git，properties文件的版本管理问题也被一举解决了。"],["body","\n"],["body","需要注意的是，访问http和ssh有可能需要验证用户和密码。当需要验证时，AutoConfig会提示你输入用户名和密码。输入以后，密码将被保存在*$HOME/passwd.autoconfig*文件中，以后就不需要重复提问了。"],["body","\n"],["headingLink","在多种配置项中切换"],["heading","在多种配置项中切换"],["body","\n"],["body","当你使用前文所述的autoconfig –s命令来生成antx.properties文件时，你会发现antx.properties中增加了几行特别的内容："],["body","\n"],["body","包含共享文件、目录信息的antx.properties文件"],["body","\n"],["body","antx.properties.default  = http://share.alibaba.com/shared-propertes/test/\n"],["body","\n"],["body","如果你在-s参数中指定了多项共享properties文件或目录，那么antx.properties中将会这样："],["body","\n"],["body","antx.properties.default.1  = http://share.alibaba.com/shared-propertes/test/\nantx.properties.default.2  = file:/shared-properties/test/my-1.properites\nantx.properties.default.3  = file:/shared-properties/test/my-2.properites\n"],["body","\n"],["body","事实上，AutoConfig还支持多组共享配置，请试用下面的命令："],["body","\n"],["body","使用多组共享配置"],["body","\n"],["body","autoconfig -s http://share.alibaba.com/shared-propertes/test/ -n test ……\n"],["body","\n"],["body","为当前共享配置定义一个名字，以后可以用这个名字来简化命令。"],["body","\n"],["body","antx.properties就会是这个样子："],["body","\n"],["body","antx.properties = test\nantx.properties.test = http://share.alibaba.com/shared-propertes/test/\n"],["body","\n"],["body","autoconfig -s http://share.alibaba.com/shared-propertes/prod/ -n prod ……\n"],["body","\n"],["body","antx.properties就会变成这个样子："],["body","\n"],["body","antx.properties = prod\nantx.properties.test = http://share.alibaba.com/shared-propertes/test/\nantx.properties.prod = http://share.alibaba.com/shared-propertes/prod/\n"],["body","\n"],["body","以后再执行，就不需要再指定-s参数了，只需用-n参数选择一组共享properties文件即可。例如："],["body","\n"],["body","autoconfig -n prod ……                      // 使用prod生产环境的参数\nautoconfig -n test ……                      // 使用test测试环境的参数\nautoconfig  ……                             // 不指定，则使用最近一次所选择的共享文件\n"],["body","\n"],["headingLink","autoconfig常用命令"],["heading","AutoConfig常用命令"],["body","\n"],["body","下面罗列了AutoConfig的常用的命令及参数："],["body","\n"],["headingLink","指定交互式界面的charset"],["heading","指定交互式界面的charset"],["body","\n"],["body","一般不需要特别指定charset，除非AutoConfig自动识别系统编码出错，导致显示乱码。"],["body","\n"],["body","运行AutoConfig独立可执行程序\t\nautoconfig ... -c GBK\n运行AutoConfig maven插件\t\nmvn ... -Dautoconfig.charset=GBK\n\n\n"],["body","\n"],["headingLink","指定交互模式"],["heading","指定交互模式"],["body","\n"],["body","默认情况下，交互模式为自动（auto）。仅当user properties中的值不满足auto-config.xml中的定义时，才会交互式地引导用户提供properties值。"],["body","\n"],["body","但你可以强制打开交互模式："],["body","\n"],["body","运行AutoConfig独立可执行程序\t\nautoconfig ... –i\nautoconfig ... –i on\n"],["body","\n"],["body","运行AutoConfig maven插件\t\nmvn ... -Dautoconfig.interactive\nmvn ...  -Dautoconfig.interactive=true\n"],["body","\n"],["body","或强制关闭交互模式："],["body","\n"],["body","运行AutoConfig独立可执行程序\t\nautoconfig ... –I\nautoconfig ... –i off\n运行AutoConfig maven插件\t\nmvn ...  -Dautoconfig.interactive=false\n"],["body","\n"],["headingLink","指定user-properties"],["heading","指定user properties"],["body","\n"],["body","默认情况下，AutoConfig会按下列顺序查找user properties："],["body","\n\n"],["body","当前目录/antx.properties"],["body","\n"],["body","当前用户HOME目录/antx.properties"],["body","\n\n"],["body","但你可以指定一个自己的properties文件，用下面的命令："],["body","\n"],["body","运行AutoConfig独立可执行程序\t\nautoconfig ... –u my.props\n运行AutoConfig maven插件\t\nmvn ... -Dautoconfig.userProperties=my.props\n"],["body","\n"],["headingLink","指定输出文件"],["heading","指定输出文件"],["body","\n"],["body","默认情况下，AutoConfig所生成的配置文件以及日志信息会直接输出到当前包文件或目录中。例如以下命令会改变petstore.war的内容："],["body","\n"],["body","autoconfig petstore.war\n"],["body","\n"],["body","但你可以指定另一个输出文件或目录，这样，原来的文件或目录就不会被修改："],["body","\n"],["body","运行AutoConfig独立可执行程序\t\nautoconfig petstore.war –o petstore-configured.war\n运行AutoConfig maven插件\t不适用\n"],["body","\n"],["headingLink","避免执行autoconfig"],["heading","避免执行AutoConfig"],["body","\n"],["body","将AutoConfig和maven package phase绑定以后，每次build都会激活AutoConfig。假如你想跳过这一步，只需要下面的命令："],["body","\n"],["body","mvn ... -Dautoconfig.skip\n"],["body","\n"],["headingLink","避免中断maven-build"],["heading","避免中断maven build"],["body","\n"],["body","mvn ... -Dautoconfig.strict=false\n"],["body","\n"],["body","AutoConfig是一个简单而有用的小工具，弥补了Maven Filtering及类似机制的不足。但它还有不少改进的余地。"],["body","\n\n"],["body","界面不够直观。如果能够通过GUI或WEB界面来配置，就更好了。"],["body","\n"],["body","Properties validator目前不易扩展。"],["body","\n"],["body","缺少集成环境的支持。"],["body","\n\n"],["body","COPY LINK"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/maven-archiver.html"],["title","maven-archiver.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Apache Maven Archiver"],["body","\n"],["body","Maven Archiver主要由插件使用以处理打包。"],["body","\n"],["body","详见"],["body","\n"],["headingLink","archive示例配置"],["heading","archive示例配置"],["body","\n"],["body","<archive>\n  <addMavenDescriptor/>\n  <compress/>\n  <forced/>\n  <index/>\n  <pomPropertiesFile/>\n \n  <manifestFile/>\n  <manifest>\n    <addClasspath/>\n    <addDefaultEntries/>\n    <addDefaultImplementationEntries/>\n    <addDefaultSpecificationEntries/>\n    <addBuildEnvironmentEntries/>\n    <addExtensions/>\n    <classpathLayoutType/>\n    <classpathPrefix/>\n    <customClasspathLayout/>\n    <mainClass/>\n    <packageName/>\n    <useUniqueVersions/>\n  </manifest>\n  <manifestEntries>\n    <key>value</key>\n  </manifestEntries>\n  <manifestSections>\n    <manifestSection>\n      <name/>\n      <manifestEntries>\n        <key>value</key>\n      </manifestEntries>\n    <manifestSection/>\n  </manifestSections>\n</archive>\n"],["body","\n"],["headingLink","archive元素"],["heading","archive元素"],["body","\n"],["body","\n"],["body","since的版本 是 Maven Archiver component 的版本，而不是plugin的版本"],["body","\n"],["body","\n"],["body","Element"],["body","Description"],["body","Type"],["body","默认值"],["body","Since"],["body","\n"],["body","addMavenDescriptor"],["body","是否包含两个文件: META-INF/maven/${groupId}/${artifactId}/pom.xml pom.properties file, located in the archive in META-INF/maven/${groupId}/${artifactId}/pom.properties"],["body","boolean"],["body","true"],["body","\n"],["body","compress"],["body","是由启用压缩"],["body","boolean"],["body","true"],["body","\n"],["body","forced"],["body","是否强制重新创建存档（默认），false意味着应将包含文件的时间戳与目标存档文件的存档时间戳进行比较，只有时间戳更新过了才会更新存档. 特别是，不会检测到源文件的删除."],["body","boolean"],["body","true"],["body","2.2"],["body","\n"],["body","index"],["body","创建的档案是否将包含一个“ INDEX.LIST”文件。"],["body","boolean"],["body","false"],["body","\n"],["body","pomPropertiesFile"],["body","使用这个文件覆盖自动生成的 pom.properties file (only if addMavenDescriptor is set to true)"],["body","File"],["body","2.3"],["body","\n"],["body","manifestFile"],["body","自定义 manifest文件"],["body","File"],["body","\n"],["body","manifest"],["body","\n"],["body","manifestEntries"],["body","A list of key/value pairs to add to the manifest."],["body","Map"],["body","\n"],["body","manifestSections"],["body","\n\n\n"],["headingLink","pomproperties-content"],["heading","pom.properties content"],["body","\n"],["body","自动创建的pom.properties文件将包含以下内容"],["body","\n"],["body","artifactId=${project.artifactId}\ngroupId=${project.groupId}\nversion=${project.version}\n"],["body","\n"],["headingLink","manifest"],["heading","manifest"],["body","\n"],["body","Element"],["body","Type"],["body","Description"],["body","默认值"],["body","Since"],["body","\n"],["body","addClasspath"],["body","boolean"],["body","是否创建 Class-Path"],["body","true"],["body","\n"],["body","addDefaultEntries"],["body","boolean"],["body","默认设置的 entries,"],["body","Created-By: Maven Archiver ${maven-archiver.version}"],["body","Build-Jdk-Spec: ${java.specification.version}"],["body","true"],["body","3.4.0"],["body","\n"],["body","addDefaultImplementationEntries"],["body","boolean"],["body","是否添加以下entries"],["body","Implementation-Title: ${project.name}"],["body","Implementation-Version: ${project.version}"],["body","Implementation-Vendor: ${project.organization.name}"],["body","false"],["body","2.1 and 2.6"],["body","\n"],["body","addDefaultSpecificationEntries"],["body","boolean"],["body","是否添加以下entries:"],["body","Specification-Title: ${project.name}"],["body","Specification-Version: ${project.artifact.selectedVersion.majorVersion}.​${project.artifact.selectedVersion.minorVersion}"],["body","Specification-Vendor: ${project.organization.name}"],["body","false"],["body","2.1"],["body","\n"],["body","addBuildEnvironmentEntries"],["body","boolean"],["body","是否添加以下entries:"],["body","Build-Tool: ${maven.build.version}"],["body","Build-Jdk: ${java.version} (​${java.vendor})"],["body","Build-Os:  ​${os.name} (​${os.version}; (${os.arch})"],["body","false"],["body","3.4.0"],["body","\n"],["body","addExtensions"],["body","boolean"],["body","是否添加以下entries"],["body","Extension-List manifest entry"],["body","false"],["body","\n"],["body","classpathLayoutType"],["body","String"],["body","生成 Class-Path的 layoutType 可选: "],["body","simple, "],["body","repository (the same as a Maven classpath layout) and "],["body","custom. If you specify a type of custom you must also set customClasspathLayout."],["body","simple"],["body","2.4"],["body","\n"],["body","classpathPrefix"],["body","String"],["body","A text that will be prefixed to all your Class-Path entries. The default value is \"\"."],["body","\n"],["body","customClasspathLayout"],["body","String"],["body","使用custom 的时候指定的表达式，"],["body","将根据以下与类路径相关的对象的有序列表对表达式进行求值"],["body","The current Artifact instance, if one exists."],["body","The current ArtifactHandler instance from the artifact above"],["body","2.4"],["body","\n"],["body","mainClass"],["body","String"],["body","The Main-Class manifest entry."],["body","\n"],["body","packageName"],["body","String"],["body","Package manifest entry."],["body","\n"],["body","useUniqueVersions"],["body","是否使用唯一的时间戳快照版本而不是-SNAPSHOT版本。"],["body","true"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/maven-bom.html"],["title","maven-bom.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","什么是BOM"],["body","\n"],["body","BOM（Bill of Materials）是由Maven提供的功能,它通过定义一整套相互兼容的jar包版本集合，"],["body","\n"],["body","使用时只需要依赖该BOM文件，即可放心的使用需要的依赖jar包，且无需再指定版本号。"],["body","\n"],["body","BOM的维护方负责版本升级，并保证BOM中定义的jar包版本之间的兼容性。"],["body","\n"],["h1","BOM作用"],["body","\n"],["body","使用BOM除了可以方便使用者在声明依赖的客户端时不需要指定版本号外"],["body","\n"],["body","最主要的原因是可以解决依赖冲突，如考虑以下的依赖场景："],["body","\n"],["body","项目A依赖项目B 2.1和  项目C 1.2版本：\n\n项目B 2.1依赖项目 D 1.1版本；\n\n项目C 1.2依赖项目 D 1.3版本；\n"],["body","\n"],["body","在该例中，项目A对于项目D的依赖就会出现冲突，按照maven dependency mediation的规则，最后生效的可能是:项目A中会依赖到项目D1.1版本（就近原则，取决于路径和依赖的先后,和Maven版本有关系）。"],["body","\n"],["body","在这种情况下，由于项目C依赖1.3版本的项目D，但是在运行时生效的确是1.1版本，"],["body","\n"],["body","所以在运行时很容易产生问题，如 NoSuchMethodError, ClassNotFoundException等，"],["body","\n"],["body","有些jar包冲突定位还是比较难的，这种方式可以节省很多定位此类问题的时间。"],["body","\n"],["body","Spring、SpringBoot、SpringCloud自身都采用了此机制来解决第三方包的冲突，"],["body","\n"],["h1","常见官方提供的BOM："],["body","\n"],["headingLink","resteasy-maven-bom-dependency"],["heading","RESTEasy Maven BOM dependency"],["body","\n"],["body","<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.jboss.resteasy</groupId>\n            <artifactId>resteasy-bom</artifactId>\n            <version>3.0.6.Final</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n"],["body","\n"],["headingLink","jboss-maven-bom-dependency"],["heading","JBOSS Maven BOM dependency"],["body","\n"],["body","<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.jboss.bom</groupId>\n            <artifactId>jboss-javaee-6.0-with-tools</artifactId>\n            <version>${some.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement> \n"],["body","\n"],["headingLink","spring-maven-bom-dependency"],["heading","Spring Maven BOM dependency"],["body","\n"],["body","<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework</groupId>\n            <artifactId>spring-framework-bom</artifactId>\n            <version>4.0.1.RELEASE</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n"],["body","\n"],["headingLink","jersey-maven-bom-dependency"],["heading","Jersey Maven BOM dependency"],["body","\n"],["body","<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.glassfish.jersey</groupId>\n            <artifactId>jersey-bom</artifactId>\n            <version>${jersey.version}</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n"],["body","\n"],["headingLink","springcloud-springboot-maven-bom-dependency"],["heading","SpringCloud SpringBoot Maven BOM dependency"],["body","\n"],["body","<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>2.4.4</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-dependencies</artifactId>\n            <version>2020.0.2</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n"],["body","\n"],["h1","BOM是如何解决依赖冲突的"],["body","\n"],["headingLink","定义bom"],["heading","定义BOM"],["body","\n"],["body","BOM本质上是一个普通的POM文件，区别是对于使用方而言，生效的只有 这一个部分。"],["body","\n"],["body","只需要在<dependencyManagement>定义对外发布的客户端版本即可，"],["body","\n"],["body","比如需要在项目中统一所有SpringBoot和SpringCloud的版本"],["body","\n"],["body","第一步需要在POM文件中增加两个的官方BOM，"],["body","\n"],["body","以目前最新稳定的SpringBoot版本为例，使用官方推荐的版本组合比较稳定，一般不会有什么大的问题"],["body","\n"],["body","<groupId>com.niu.not</groupId>\n<artifactId>niu-dependency</artifactId>\n<version>1.1.1</version>\n<modelVersion>4.0.0</modelVersion>\n<packaging>pom</packaging>\n<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-dependencies</artifactId>\n            <version>2.4.6</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-dependencies</artifactId>\n            <version>2020.0.3</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n<dependencies>\n    <dependency>\n        <groupId>com.google.code.gson</groupId>\n        <artifactId>gson</artifactId>\n        <version>2.8.6</version>\n    </dependency>\n</dependencies>\n"],["body","\n"],["body","下面的Gson是除了SpringBoot和SpingCloud外需要统一版本的jar"],["body","\n"],["headingLink","其他工程使用方法"],["heading","其他工程使用方法"],["body","\n"],["body","在项目主pom.xml文件中<dependencyManagement></dependencyManagement>节点下加入BOM的GAV信息如下："],["body","\n"],["body","<dependencyManagement>\n    <dependencies>\n        <dependency>\n            <groupId>com.niu.not</groupId>\n            <artifactId>niu-dependency</artifactId>\n            <version>1.1.1</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n"],["body","\n"],["body","在需要使用相关JAR包的pom.xml文件中节点下引入如下："],["body","\n"],["body","<dependencies>\n    <!--此时用到Spring和Gson都不需要加版本号,会自动引用BOM中提供的版本-->\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-openfeign</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>com.google.code.gson</groupId>\n        <artifactId>gson</artifactId>\n    </dependency>\n</dependencies>\n"],["body","\n"],["body","这种设置后，如果项目要求升级Spring版本，只需要在提供方升级验证兼容性，然后修改BOM依赖即可"],["body","\n"],["body","如果需要使用不同于当前bom中所维护的jar包版本，则加上覆盖即可，如："],["body","\n"],["body","<dependencies>\n    <!--此时用到Spring和Gson都不需要加版本号,会自动引用BOM中提供的版本-->\n    <dependency>\n        <groupId>org.springframework.cloud</groupId>\n        <artifactId>spring-cloud-starter-openfeign</artifactId>\n    </dependency>\n    <dependency>\n        <groupId>com.google.code.gson</groupId>\n        <artifactId>gson</artifactId>\n        <!--会覆盖掉BOM中声明的版本2.8.6，使用自定义版本2.8.2-->\n        <version>2.8.2</version>\n    </dependency>\n</dependencies>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/maven-依赖管理.html"],["title","maven-依赖管理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Maven 依赖管理"],["body","\n"],["headingLink","可传递性依赖发现"],["heading","可传递性依赖发现"],["body","\n"],["body","功能"],["body","功能描述"],["body","\n"],["body","依赖调节"],["body","决定当多个手动创建的版本同时出现时，哪个依赖版本将会被使用。 如果两个依赖版本在依赖树里的深度是一样的时候，第一个被声明的依赖将会被使用。"],["body","\n"],["body","依赖管理"],["body","直接的指定手动创建的某个版本被使用。例如当一个工程 C 在自己的依赖管理模块包含工程 B，即 B 依赖于 A， 那么 A 即可指定在 B 被引用时所使用的版本。"],["body","\n"],["body","依赖范围"],["body","包含在构建过程每个阶段的依赖。scope"],["body","\n"],["body","依赖排除"],["body","任何可传递的依赖都可以通过 \"exclusion\" 元素被排除在外。举例说明，A 依赖 B， B 依赖 C，因此 A 可以标记 C 为 \"被排除的\"。"],["body","\n"],["body","依赖可选"],["body","任何可传递的依赖可以被标记为可选的，通过使用 \"optional\" 元素。例如：A 依赖 B， B 依赖 C。因此，B 可以标记 C 为可选的， 这样 A 就可以不再使用 C。"],["body","\n\n\n"],["headingLink","依赖范围"],["heading","依赖范围"],["body","\n"],["body","传递依赖发现可以通过使用如下的依赖范围来得到限制："],["body","\n"],["body","范围"],["body","标识"],["body","描述"],["body","\n"],["body","编译阶段"],["body","compiler"],["body","该范围表明相关依赖是只在项目的类路径下有效。默认取值。"],["body","\n"],["body","供应阶段"],["body","provided"],["body","该范围表明相关依赖是由运行时的 JDK 或者 网络服务器提供的。(运行时由其他提供，例如从网络加载或者被别人依赖时由别人提供"],["body","在编译测试阶段由自己提供)"],["body","\n"],["body","运行阶段"],["body","runtime"],["body","该范围表明相关依赖在编译阶段不是必须的，但是在执行阶段是必须的。"],["body","\n"],["body","测试阶段"],["body","test"],["body","该范围表明相关依赖只在测试编译阶段和执行阶段。"],["body","\n"],["body","系统阶段"],["body","system"],["body","该范围表明你需要提供一个系统路径的jar包"],["body","\n"],["body","导入阶段"],["body","import"],["body","该范围只在依赖是一个 pom 里定义的依赖时使用。同时，当前项目的POM 文件的 部分定义的依赖关系可以取代某特定的 POM。"],["body","\n\n\n"],["headingLink","依赖范围对于-classpath的影响"],["heading","依赖范围对于 classpath的影响"],["body","\n"],["body","依赖范围（scope）"],["body","对于编译classpath有效"],["body","对于测试classpath有效"],["body","对于运行时classpath有效"],["body","例子"],["body","\n"],["body","compile"],["body","Y"],["body","Y"],["body","Y"],["body","spring-core"],["body","\n"],["body","test"],["body","-"],["body","Y"],["body","-"],["body","JUnit"],["body","\n"],["body","provided"],["body","Y"],["body","Y"],["body","-"],["body","servlet-api"],["body","\n"],["body","runtime"],["body","-"],["body","Y"],["body","Y"],["body","JDBC驱动实现"],["body","\n"],["body","system"],["body","Y"],["body","Y"],["body","-"],["body","本地的，Maven仓库之外的类库文件"],["body","\n\n\n"],["headingLink","依赖传递"],["heading","依赖传递"],["body","\n"],["body","第一依赖范围\\第二依赖范围"],["body","compile"],["body","test"],["body","provided"],["body","runtime"],["body","\n"],["body","compile"],["body","compile"],["body","N"],["body","\n"],["body","test"],["body","\n"],["body","provider"],["body","\n"],["body","runtime"],["body","\n\n\n"],["headingLink","使用父依赖"],["heading","使用父依赖"],["body","\n"],["body","App-UI-WAR依赖App-core-lib,App-data-lib"],["body","\n"],["body","app-ui-war的pom文件"],["body","\n"],["body","<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n      <modelVersion>4.0.0</modelVersion>\n      <groupId>com.companyname.groupname</groupId>\n      <artifactId>App-UI-WAR</artifactId>\n      <version>1.0</version>\n      <packaging>war</packaging>\n      <dependencies>\n         <dependency>\n            <groupId>com.companyname.groupname</groupId>\n            <artifactId>App-Core-lib</artifactId>\n            <version>1.0</version>\n         </dependency>\n      </dependencies>  \n      <dependencies>\n         <dependency>\n            <groupId>com.companyname.groupname</groupId>\n            <artifactId>App-Data-lib</artifactId>\n            <version>1.0</version>\n         </dependency>\n      </dependencies>  \n</project>\n"],["body","\n"],["body","App-Core-lib 的 pom.xml "],["body","\n"],["body","<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n      <parent>\n         <artifactId>Root</artifactId>\n         <groupId>com.companyname.groupname</groupId>\n         <version>1.0</version>\n      </parent>\n      <modelVersion>4.0.0</modelVersion>\n      <groupId>com.companyname.groupname</groupId>\n      <artifactId>App-Core-lib</artifactId>\n      <version>1.0</version> \n      <packaging>jar</packaging>\n</project>\n"],["body","\n"],["body","App-Data-lib 的 pom.xml "],["body","\n"],["body","<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n      <parent>\n         <artifactId>Root</artifactId>\n         <groupId>com.companyname.groupname</groupId>\n         <version>1.0</version>\n      </parent>\n      <modelVersion>4.0.0</modelVersion>\n      <groupId>com.companyname.groupname</groupId>\n      <artifactId>App-Data-lib</artifactId>\n      <version>1.0</version>   \n      <packaging>jar</packaging>\n</project>\n"],["body","\n"],["body","Root 的 pom.xml 文件代码"],["body","\n"],["body","<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0\n   http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n      <modelVersion>4.0.0</modelVersion>\n      <groupId>com.companyname.groupname</groupId>\n      <artifactId>Root</artifactId>\n      <version>1.0</version>\n      <packaging>pom</packaging>\n      <dependencies>\n         <dependency>\n            <groupId>com.companyname.groupname1</groupId>\n            <artifactId>Lib1</artifactId>\n            <version>1.0</version>\n         </dependency>\n      </dependencies>  \n      <dependencies>\n         <dependency>\n            <groupId>com.companyname.groupname2</groupId>\n            <artifactId>Lib2</artifactId>\n            <version>2.1</version>\n         </dependency>\n      </dependencies>  \n      <dependencies>\n         <dependency>\n            <groupId>com.companyname.groupname3</groupId>\n            <artifactId>Lib3</artifactId>\n            <version>1.1</version>\n         </dependency>\n      </dependencies>  \n</project>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","22.Maven/README.html"],["title","Maven - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概述"],["body","\n"],["body","本Maven教程的目的是使您了解Maven的工作方式。因此，本教程重点介绍Maven的核心概念。"],["body","\n"],["body","实际上，Maven开发人员声称Maven不仅仅是一个构建工具。参见 Philosophy of Maven"],["body","\n"],["body","Maven Version"],["body","\n"],["body","该Maven教程的第一个版本基于Maven 3.6.3。"],["body","\n"],["body","Maven Website"],["body","\n"],["body","[http://maven.apache.org]"],["body","\n"],["headingLink","what-is-a-build-tool"],["heading","What is a Build Tool?"],["body","\n"],["body","A build tool is a tool that automates everything related to building the software project. "],["body","\n"],["body","构建工具是一种工具，它可以自动完成与构建软件项目相关的所有操作，构建软件工程一半需要以下几个步骤"],["body","\n\n"],["body","产生源代码"],["body","\n"],["body","产生文档"],["body","\n"],["body","编译源代码"],["body","\n"],["body","打包编译后的源代码"],["body","\n"],["body","部署源代码"],["body","\n\n"],["body","任何给定的软件项目可能具有比完成最终软件所需的更多活动。通常可以将此类活动插入构建工具中，因此也可以将这些活动自动化。"],["body","\n"],["headingLink","安装maven"],["heading","安装Maven"],["body","\n\n"],["body","Set the JAVA_HOME environment variable to point to a valid Java SDK (e.g. Java 8)."],["body","\n"],["body","Set the M2_HOME environment variable to point to the directory you unzipped Maven to."],["body","\n"],["body","Set the M2 environment variable to point to M2_HOME/bin (%M2_HOME%\\bin on Windows, $M2_HOME/bin on unix)."],["body","\n"],["body","Add M2 to the PATH environment variable (%M2% on Windows, $M2 on unix)."],["body","\n"],["body","验证 mvn 命令"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","33.其他_Graavml/安装.html"],["title","安装 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","33.其他_Graavml/安装/Macos安装.html"],["title","Macos安装.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","installation-on-macos-platforms"],["heading","Installation on macOS Platforms"],["body","\n\n"],["body","可以为单个用户安装GraalVM Community Edition，并且不需要管理员权限"],["body","\n"],["body","但是，如果GraalVM打算成为默认的JDK，则需要管理员权限。"],["body","\n"],["body","GraalVM Community Edition不提供安装向导，与随附带DMG 镜像下载的用于macOS的OpenJDK发行版不同。Graavml直接从 压缩包安装"],["body","\n"],["body","注意：Macos 的Jdk安装路径是： /Library/Java/JavaVirtualMachines/<graalvm>/Contents/Home."],["body","\n\n"],["body","按照以下步骤在macOS操作系统上安装GraalVM Community:"],["body","\n\n"],["body","\n"],["body","Navigate to GraalVM Releases repository on GitHub. Select Java 11 based or Java 17 based distribution for macOS, and download."],["body","\n"],["body","\n"],["body","\n"],["body","Unzip the archive."],["body","\n"],["body","tar -xzf graalvm-ce-java<version>-darwin-amd64-<version>.tar.gz\n"],["body","\n"],["body","Alternatively, open the file in Finder."],["body","\n"],["body","\n"],["body","Note: If you are using macOS Catalina and later you may need to remove the quarantine attribute. See Installation Notes below."],["body","\n"],["body","\n"],["body","\n"],["body","\n"],["body","Move the downloaded package to its proper location, the"],["body","\n"],["body","/Library/Java/JavaVirtualMachines\n"],["body","\n"],["body","directory. Since this is a system directory, "],["body","\n"],["body","sudo \n"],["body","\n"],["body","is required:"],["body","\n"],["body","  sudo mv graalvm-ce-java<version>-<version> /Library/Java/JavaVirtualMachines\n"],["body","\n"],["body","要验证移动是否成功，并获取所有已安装的jdk的列表， run /usr/libexec/java_home -V."],["body","\n"],["body","\n"],["body","\n"],["body","机器上可以安装多个jdk。下一步是配置运行时环境:"],["body","\n\n"],["body","\n"],["body","Point the"],["body","\n"],["body","PATH\n"],["body","\n"],["body","environment variable to the GraalVM"],["body","\n"],["body","bin\n"],["body","\n"],["body","directory:"],["body","\n"],["body"," export PATH=/Library/Java/JavaVirtualMachines/<graalvm>/Contents/Home/bin:$PATH\n"],["body","\n"],["body","\n"],["body","\n"],["body","Set the"],["body","\n"],["body","JAVA_HOME\n"],["body","\n"],["body","environment variable to resolve to the GraalVM installation directory:"],["body","\n"],["body"," export JAVA_HOME=/Library/Java/JavaVirtualMachines/<graalvm>/Contents/Home\n"],["body","\n"],["body","\n\n"],["body","\n"],["body","\n"],["body","To check whether the installation was successful, run the java -version command."],["body","\n"],["body","\n\n"],["body","Optionally, you can specify GraalVM as the default JRE or JDK installation in your Java IDE."],["body","\n"],["body","For Oracle GraalVM Enterprise Edition users, find the installation instructions here."],["body","\n"],["headingLink","installation-notes"],["heading","Installation Notes"],["body","\n"],["headingLink","on-software-notarization"],["heading","On Software Notarization"],["body","\n"],["body","If you are using macOS Catalina and later you may need to remove the quarantine attribute from the bits before you can use them. To do this, run the following:"],["body","\n"],["body","sudo xattr -r -d com.apple.quarantine /path/to/GRAALVM_HOME\n"],["body","\n"],["headingLink","on-java_home-command"],["heading","On JAVA_HOME Command"],["body","\n"],["body","The information property file, Info.plist, is in the top level Contents folder. This means that GraalVM Enterprise participates in the macOS-specific /usr/libexec/java_home mechanism. Depending on other JDK installation(s) available, it is now possible that /usr/libexec/java_home -v1.8 returns /Library/Java/JavaVirtualMachines/<graalvm>/Contents/Home. You can run /usr/libexec/java_home -v1.8 -V to see the complete list of 1.8 JVMs available to the java_home command. This command sorts the JVMs in decreasing version order and chooses the top one as the default for the specified version. Within a specific version, the sort order appears to be stable but is unspecified."],["body","\n"],["headingLink","supported-functionalities"],["heading","Supported Functionalities"],["body","\n"],["body","The base distribution of GraalVM Community Edition for macOS includes OpenJDK with the GraalVM compiler enabled, LLVM and JavaScript runtimes. The base installation can be extended with:"],["body","\n"],["body","Tools/Utilities:"],["body","\n\n"],["body","Native Image – a technology to compile an application ahead-of-time into a native executable"],["body","\n"],["body","LLVM toolchain – a set of tools and APIs for compiling native programs to bitcode that can be executed with on the GraalVM runtime"],["body","\n\n"],["body","Runtimes:"],["body","\n\n"],["body","Java on Truffle – a Java Virtual Machine implementation based on a Truffle interpreter for GraalVM"],["body","\n"],["body","Node.js – Node.js v16.14.2 compatible"],["body","\n"],["body","Python – Python 3.8.5 compatible"],["body","\n"],["body","Ruby – Ruby 3.0.2 compatible"],["body","\n"],["body","R – GNU R 4.0.3 compatible"],["body","\n"],["body","Wasm – WebAssembly (Wasm)These runtimes are not part of the GraalVM Community base distribution and must be installed separately."],["body","\n\n"],["body","To assist a user with installation, GraalVM includes GraalVM Updater, a command line utility to install and manage additional functionalities. Proceed to the installation steps to add any necessary language runtime or utility from above to GraalVM."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","33.其他_Graavml/README.html"],["title","Graavml - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","start-running-applications"],["heading","Start Running Applications"],["body","\n\n"],["body","GraalVM的 core distribution  包括JVM、GraalVM编译器、LLVM运行时和JavaScript运行时"],["body","\n"],["body","下载并安装GraalVM后，您已经可以运行基于Java、JavaScript和LLVM的应用程序。"],["body","\n"],["body","GraalVM’s /bin 目录 类似于标准JDK。但是包含额外的 launchers and utilities:"],["body","\n\n\n"],["body","js a JavaScript launcher"],["body","\n"],["body","lli a LLVM bitcode launcher"],["body","\n"],["body","gu the GraalVM Updater tool to install additional language runtimes and utilities"],["body","\n\n"],["body","Check the versions of the runtimes provided by default:"],["body","\n"],["body","java -version\nopenjdk version \"17.0.3\" 2022-04-19\nOpenJDK Runtime Environment GraalVM CE 22.1.0 (build 17.0.3+5-jvmci-22.1-b04)\nOpenJDK 64-Bit Server VM GraalVM CE 22.1.0 (build 17.0.3+5-jvmci-22.1-b04, mixed mode, sharing)\njs -version\nGraalVM JavaScript (GraalVM CE Native 22.1.0)\n\nlli --version\nLLVM 12.0.1 (GraalVM CE Native 22.1.0)\n"],["body","\n"],["body","Further below you will find information on how to add other optionally available GraalVM runtimes including Node.js, Ruby, R, Python, and WebAssembly."],["body","\n"],["body","在下面，您将找到有关如何添加其他可选的GraalVM运行时的信息，包括Node.js，Ruby，R，Python和WebAssembly。"],["body","\n"],["headingLink","run-java"],["heading","Run Java"],["body","\n"],["body","The java launcher runs the JVM with the GraalVM default compiler - the GraalVM compiler. Take a look at this typical HelloWorld class:"],["body","\n"],["body","public class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello, World!\");\n  }\n}\n"],["body","\n"],["body","Run the following commands to compile this class to bytecode and then execute it:"],["body","\n"],["body","javac HelloWorld.java\njava HelloWorld\nHello World!\n"],["body","\n"],["body","You can find a collection of larger Java examples on the Examples Applications page. For more information on the GraalVM compiler, go to Compiler. For more extensive documentation on running Java, proceed to JVM Languages."],["body","\n"],["headingLink","run-javascript-and-nodejs"],["heading","Run JavaScript and Node.js"],["body","\n"],["body","如上所述，在GraalVM安装完成后，<graalvm>/bin目录已经包含用于运行JavaScript程序的js启动器。它可以在REPL模式下和通过直接执行脚本文件来执行普通的JavaScript代码:"],["body","\n"],["body","$JAVA_HOME/bin/js\n> 1 + 2\n3\n"],["body","\n"],["body","GraalVM还支持运行Node.js应用程序。默认情况下不安装Node.js支持，但可以使用GraalVM Updater轻松添加:"],["body","\n"],["body","gu install nodejs\n"],["body","\n"],["body","The node launcher becomes available in the <graalvm>/bin directory."],["body","\n"],["body","$JAVA_HOME/bin/node -v\nv16.14.2\n"],["body","\n\n"],["body","超过100,000 npm软件包定期测试，并与GraalVM兼容"],["body","\n"],["body","including modules like express, react, async, request, browserify, grunt, mocha, and underscore. "],["body","\n"],["body","To install a Node.js module, use the npm executable from the <graalvm>/bin folder, which is installed together with node. "],["body","\n"],["body","npm命令相当于默认的Node.js命令，支持所有Node.js api。"],["body","\n\n"],["body","Install the modules colors, ansispan, and express using npm install. After the modules are installed, you can use them from your application."],["body","\n"],["body","$JAVA_HOME/bin/npm install colors ansispan express\n"],["body","\n"],["body","Use the following code snippet and save it as the app.js file in the same directory where you installed the Node.js modules:"],["body","\n"],["body","const http = require(\"http\");\nconst span = require(\"ansispan\");\nrequire(\"colors\");\n\nhttp.createServer(function (request, response) {\n    response.writeHead(200, {\"Content-Type\": \"text/html\"});\n    response.end(span(\"Hello Graal.js!\".green));\n}).listen(8000, function() { console.log(\"Graal.js server running at http://127.0.0.1:8000/\".red); });\n\nsetTimeout(function() { console.log(\"DONE!\"); process.exit(); }, 2000);\n"],["body","\n"],["body","Run app.js on GraalVM Enterprise using the node command:"],["body","\n"],["body","$JAVA_HOME/bin/node app.js\n"],["body","\n"],["body","For more detailed documentation and information on compatibility with Node.js, proceed to JavaScript and Node.js."],["body","\n"],["headingLink","run-llvm-languages"],["heading","Run LLVM Languages"],["body","\n"],["body","GraalVM LLVM运行时可以执行C/C ++，Rust和其他可以编译为LLVM位码的编程语言"],["body","\n"],["body","必须使用LLVM前端将本机程序编译为LLVM bitcode 例如 clang"],["body","\n"],["body","可以使用GraalVM随附的clang通过预构建的LLVM工具链将C/C代码编译为LLVMBitcode。"],["body","\n"],["body","To set up the LLVM toolchain support:"],["body","\n"],["body","gu install llvm-toolchain\nexport LLVM_TOOLCHAIN=$(lli --print-toolchain-path)\n"],["body","\n"],["body","As an example, put this C code into a file named hello.c:"],["body","\n"],["body","#include <stdio.h>\n\nint main() {\n    printf(\"Hello from GraalVM!\\n\");\n    return 0;\n}\n"],["body","\n"],["body","Then compile hello.c to an executable hello with embedded LLVM bitcode and run it as follows:"],["body","\n"],["body","$LLVM_TOOLCHAIN/clang hello.c -o hello\nlli hello\n"],["body","\n"],["body","For in-depth documentation and more examples of running LLVM bitcode on GraalVM, go to LLVM Languages."],["body","\n"],["headingLink","run-python"],["heading","Run Python"],["body","\n"],["body","With GraalVM you can run Python applications in the Python 3 runtime environment. The support is not available by default, but you can quickly add it to GraalVM using the GraalVM Updater tool:"],["body","\n"],["body","gu install python\n"],["body","\n"],["body","It installs the graalpython launcher. Check the version, and you can already run Python programs:"],["body","\n"],["body","$JAVA_HOME/bin/graalpython --version\n$JAVA_HOME/bin/graalpython\n...\n>>> 1 + 2\n3\n>>> exit()\n"],["body","\n"],["body","More examples and additional information on Python support in GraalVM can be found in the Python reference manual."],["body","\n"],["headingLink","run-ruby"],["heading","Run Ruby"],["body","\n"],["body","GraalVM provides a high-performance Ruby runtime environment including the gem command that allows you to interact with RubyGems, Ruby Bundler, and much more. The Ruby runtime is not available by default in GraalVM, but can be easily added using the GraalVM Updater tool:"],["body","\n"],["body","gu install ruby\n"],["body","\n"],["body","Once it is installed, Ruby launchers like ruby, gem, irb, rake, rdoc, and ri become available to run Ruby programs:"],["body","\n"],["body","$JAVA_HOME/bin/ruby [options] program.rb\n"],["body","\n"],["body","GraalVM runtime for Ruby uses the same options as the standard implementation of Ruby, with some additions. For example:"],["body","\n"],["body","gem install chunky_png\n$JAVA_HOME/bin/ruby -r chunky_png -e \"puts ChunkyPNG::Color.to_hex(ChunkyPNG::Color('mintcream @ 0.5'))\"\n#f5fffa80\n"],["body","\n"],["body","More examples and in-depth documentation can be found in the Ruby reference manual."],["body","\n"],["headingLink","run-r"],["heading","Run R"],["body","\n"],["body","GraalVM provides a GNU-compatible environment to run R programs directly or in the REPL mode. Although the R language support is not available by default, you can add it to GraalVM using the GraalVM Updater tool:"],["body","\n"],["body","gu install R\n"],["body","\n"],["body","When the language is installed, you can execute R scripts and use the R REPL:"],["body","\n"],["body","R\nR version 4.0.3 (FastR)\n...\n\n> 1 + 1\n[1] 2\n"],["body","\n"],["body","More examples and in-depth documentation can be found in the R reference manual."],["body","\n"],["headingLink","run-webassembly"],["heading","Run WebAssembly"],["body","\n"],["body","With GraalVM you can run programs compiled to WebAssembly. The support is not available by default, but you can add it to GraalVM using the GraalVM Updater tool:"],["body","\n"],["body","gu install wasm\n"],["body","\n"],["body","Then the wasm launcher, that can run compiled WebAssembly binary code, becomes available."],["body","\n"],["body","For example, put the following C program in a file named floyd.c:"],["body","\n"],["body","#include <stdio.h>\n\nint main() {\n  int number = 1;\n  int rows = 10;\n  for (int i = 1; i <= rows; i++) {\n    for (int j = 1; j <= i; j++) {\n      printf(\"%d \", number);\n      ++number;\n    }\n    printf(\".\\n\");\n  }\n  return 0;\n}\n"],["body","\n"],["body","Compile it using the most recent Emscripten compiler frontend version. It should produce a standalone floyd.wasm file in the current working directory:"],["body","\n"],["body","emcc -o floyd.wasm floyd.c\n"],["body","\n"],["body","Then you can run the compiled WebAssembly binary on GraalVM as follows:"],["body","\n"],["body","$JAVA_HOME/bin/wasm --Builtins=wasi_snapshot_preview1 floyd.wasm\n"],["body","\n"],["body","More details can be found in the WebAssembly reference manual."],["body","\n"],["headingLink","combine-languages"],["heading","Combine Languages"],["body","\n"],["body","GraalVM allows you to call one programming language into another and exchange data between them. To enable interoperability, GraalVM provides the --polyglot flag."],["body","\n"],["body","For example, running js --jvm --polyglot example.js executes example.js in a polyglot context. If the program calls any code in other supported languages, GraalVM executes that code in the same runtime as the example.js application. For more information on running polyglot applications, see Polyglot Programming."],["body","\n"],["headingLink","native-image"],["heading","Native Image"],["body","\n"],["body","With GraalVM you can compile Java bytecode into a platform-specific, self-contained, native executable to achieve faster startup and smaller footprint for your application. GraalVM Native Image functionality is not available by default, but can be easily installed with the GraalVM Updater tool:"],["body","\n"],["body","gu install native-image\n"],["body","\n"],["body","The HelloWorld example from above is used here to demonstrate how to generate a native executable:"],["body","\n"],["body","// HelloWorld.java\npublic class HelloWorld {\n  public static void main(String[] args) {\n    System.out.println(\"Hello, World!\");\n  }\n}\n"],["body","\n"],["body","\n"],["body","Note: For compilation native-image depends on the local toolchain. Make sure your system meets the prerequisites."],["body","\n"],["body","\n"],["body","Compile HelloWorld.java to bytecode and then build a native executable:"],["body","\n"],["body","javac HelloWorld.java\nnative-image HelloWorld\n"],["body","\n"],["body","The last command generates an executable file named helloworld in the current working directory. Invoking it executes the natively compiled code of the HelloWorld class as follows:"],["body","\n"],["body","./helloworld\nHello, World!\n"],["body","\n"],["body","More detailed documentation on this innovative technology is available in the Native Image reference manual."],["body","\n"],["headingLink","polyglot-capabilities-of-native-image"],["heading","Polyglot Capabilities of Native Image"],["body","\n"],["body","GraalVM makes it possible to use polyglot capabilities when building native executables. Take this example of a JSON pretty-printer Java program that embeds some JavaScript code:"],["body","\n"],["body","// PrettyPrintJSON.java\nimport java.io.*;\nimport java.util.stream.*;\nimport org.graalvm.polyglot.*;\n\npublic class PrettyPrintJSON {\n  public static void main(String[] args) throws java.io.IOException {\n    BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));\n    String input = reader.lines()\n    .collect(Collectors.joining(System.lineSeparator()));\n    try (Context context = Context.create(\"js\")) {\n      Value parse = context.eval(\"js\", \"JSON.parse\");\n      Value stringify = context.eval(\"js\", \"JSON.stringify\");\n      Value result = stringify.execute(parse.execute(input), null, 2);\n      System.out.println(result.asString());\n    }\n  }\n}\n"],["body","\n"],["body","Compile it and build a native executable for it. The --language:js argument ensures that JavaScript is available in the generated executable:"],["body","\n"],["body","javac PrettyPrintJSON.java\nnative-image --language:js --initialize-at-build-time PrettyPrintJSON\n"],["body","\n"],["body","The generatation of a native executable will take several minutes as it does not just build the PrettyPrintJSON class, but also builds JavaScript. Additionally, the building requires large amounts of physical memory, especially if you build a native executable with the Truffle language implementation framework included, which is the case here."],["body","\n"],["body","The resulting executable can now perform JSON pretty-printing:"],["body","\n"],["body","./prettyprintjson <<EOF\n{\"GraalVM\":{\"description\":\"Language Abstraction Platform\",\"supports\":[\"combining languages\",\"embedding languages\",\"creating native images\"],\"languages\": [\"Java\",\"JavaScript\",\"Node.js\", \"Python\", \"Ruby\",\"R\",\"LLVM\"]}}\nEOF\n"],["body","\n"],["body","Here is the JSON output from the native executable:"],["body","\n"],["body","{\n  \"GraalVM\": {\n    \"description\": \"Language Abstraction Platform\",\n    \"supports\": [\n      \"combining languages\",\n      \"embedding languages\",\n      \"creating native images\"\n    ],\n    \"languages\": [\n      \"Java\",\n      \"JavaScript\",\n      \"Node.js\",\n      \"Python\",\n      \"Ruby\",\n      \"R\",\n      \"LLVM\"\n    ]\n  }\n}\n"],["body","\n"],["body","The native executable runs much faster than running the same code on the JVM directly:"],["body","\n"],["body","time bin/java PrettyPrintJSON < test.json > /dev/null\nreal\t0m1.101s\nuser\t0m2.471s\nsys\t0m0.237s\n\ntime ./prettyprintjson < test.json > /dev/null\nreal\t0m0.037s\nuser\t0m0.015s\nsys\t0m0.016s\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/ProjectReactor/core-features/线程和调度.html"],["title","线程和调度.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Threading and Schedulers"],["body","\n"],["body","Reactor 并不强制使用 并发模型，但也提供 并发帮助"],["body","\n"],["body","获取 Flux Mono 并不意味着 在专用 线程中 运行"],["body","\n"],["body","相反，大多数操作 运行在前面 操作的线程中，如果没有特别指定，最顶层的 操作：source 自身 运行在 subscribe的 调用线程上。"],["body","\n"],["body","以下示例显示 在 Mono中运行在新线程上"],["body","\n"],["body","public static void main(String[] args) throws InterruptedException {\n    //主线程 组装\n  final Mono<String> mono = Mono.just(\"hello \"); \n                        //其他线程订阅\n  Thread t = new Thread(() -> mono\n                        //map onNext 回调 实际上 都在 其他线程执行\n      .map(msg -> msg + \"thread \")\n      .subscribe(v -> \n          System.out.println(v + Thread.currentThread().getName()) \n      )\n  )\n  t.start();\n  t.join();\n}\n"],["body","\n"],["body","在Reactor中，执行模型 执行线程 取决于使用的 Scheduler "],["body","\n"],["body","A Scheduler  承担 调度 职责，类似于 ExecutorService"],["body","\n"],["body","但是有专门的抽象，让它做得更多。"],["body","\n"],["body","特别是 作为 时钟 并使更广泛的实现：虚拟时间测试， trampolining ，立即调度 等"],["body","\n"],["body","The Schedulers class 的静态方法 可以访问 以下 执行上下文"],["body","\n\n"],["body","\n"],["body","No execution context (Schedulers.immediate()): 在 处理时，已提交的 Runnable 会 直接执行，有效的运行在 当前线程（可以视为 空对象，或无操作的 Scheduler）"],["body","\n"],["body","\n"],["body","\n"],["body","A single, reusable thread (Schedulers.single()). 对于所有调用者使用一个线程你想每一个调用一个线程 则 使用  Schedulers.newSingle()"],["body","\n"],["body","\n"],["body","\n"],["body","An unbounded elastic thread pool (Schedulers.elastic()). 引入 Schedulers.boundedElastic() 之后 不在首选, 因为它有隐藏背压问题并导致太多线程的倾向"],["body","\n"],["body","\n"],["body","\n"],["body","A bounded elastic thread pool (Schedulers.boundedElastic()). Like its predecessor elastic(), "],["body","\n"],["body","它根据需要创建新的 工作线程池，重用 空闲线程，闲置线程闲置超过60s，会被回收，创建的线程有上限（默认是 CPU 核数 x10），线程池达到 上限后 ，提交多达 100 000 的任务 会被入队列等待，直到线程池可用（如果延迟调用，则延迟从 线程可用时开始计算）"],["body","\n"],["body","This is a better choice for I/O blocking work."],["body","\n"],["body","对于 阻塞式 I/O 工作来说，这是一个更好的选择。"],["body","\n"],["body","Schedulers.boundedElastic() 是一种方便的方式，在自己的线程中阻塞，一遍不会绑定其他资源"],["body","\n"],["body","See How Do I Wrap a Synchronous, Blocking Call?, 但不会给系统产生太多线程的压力"],["body","\n"],["body","\n\n\n"],["body","A fixed pool of workers that is tuned for parallel work (Schedulers.parallel()). 固定工作线程池，线程的个数和CPU的 核心数一样多"],["body","\n\n"],["body","另外，通过 Schedulers.fromExecutorService(ExecutorService)  从  ExecutorService  创建 Scheduler"],["body","\n"],["body","也可以 从 Executor 创建，这并不推荐"],["body","\n"],["body","也可以 通过 newXXX 方法   创建 不同调度类型的  Scheduler 实例"],["body","\n"],["body","例如： Schedulers.newParallel(yourScheduleName)  创建一个 并行的 命名的  Scheduler "],["body","\n"],["body","boundedElastic  用来帮助 旧的阻塞式代码（如果没法避免）"],["body","\n"],["body","single and parallel are not. "],["body","\n"],["body","As a consequence, "],["body","\n"],["body","因此，Reactor blocing APis的使用 （block(), blockFirst(), blockLast() as well as iterating over toIterable() or toStream()） "],["body","\n"],["body","the use of Reactor blocking APIs (block(), blockFirst(), blockLast() (as well as iterating over toIterable() or toStream()) inside the default single and parallel schedulers) results in an IllegalStateException being thrown."],["body","\n"],["body","自定义 Schedulers 同样能 被标记为 \"non blocking only\" ，只要 创建的 Thread 实现了  NonBlocking 标记接口"],["body","\n"],["body","一些操作 默认的 使用 来自 Schedulers  的指定 的Scheduler （这通常会提供不同的 选择 ）"],["body","\n"],["body","例如 调用   Flux.interval(Duration.ofMillis(300))   工厂方法 产生 一个 Flux<Long> 每300ms 滴答一下。默认的 使用 Schedulers.parallel()  以下代码 修改 Scheduler 成 Schedulers.single()"],["body","\n"],["body","Flux.interval(Duration.ofMillis(300), Schedulers.newSingle(\"test\"))`\n"],["body","\n"],["body","Reactor 提供 两种办法 在reactive chain种  切换 执行上下文（Scheduler） ：publishOn and subscribeOn"],["body","\n"],["body","都有一个 Scheduler参数"],["body","\n"],["body","但是  publishOn 在链条中的位置很重要，而subscribeOn 不重要"],["body","\n"],["body","To understand that difference, you first have to remember that nothing happens until you subscribe."],["body","\n"],["body","在Reactor中，当你 链接操作时，你可以 将 尽可能多的 Flux and Mono  实现 包裹 在 彼此的内部 "],["body","\n"],["body","订阅后，Subscriber objects 对象链 已经创建好，向后 到 第一个 Publiser"],["body","\n"],["body","对用户是透明的，你能看见的是 外层的 Flux or Mono 和 Subscription 但是 这些中间 特定操作的 Subscribers 才是实际工作发生的地方，有了这些认知后，我们可以更仔细的了解 publishOn subscription 操作"],["body","\n"],["headingLink","the-publishon-method"],["heading","The publishOn Method"],["body","\n"],["body","publishOn  同其他 操作 一样 以同样的方式 适用"],["body","\n"],["body","它接收来自上游的信号，并 执行回调时 重播它们( 回调的执行是在 相关联的 Scheduler )"],["body","\n"],["body","因此。它影响 后续 操作的  执行上下文（知道 另一个 publishOn 链入进来）"],["body","\n\n"],["body","Changes the execution context to one Thread picked by the Scheduler"],["body","\n"],["body","as per the specification, onNext calls happen in sequence, so this uses up a single thread"],["body","\n"],["body","unless they work on a specific Scheduler, operators after publishOn continue execution on that same thread"],["body","\n\n"],["body","//创建 新的 Scheduler\nScheduler s = Schedulers.newParallel(\"parallel-scheduler\", 4); \n\n\nfinal Flux<String> flux = Flux\n    .range(1, 2)\n    .map(i -> 10 + i)   //The first map runs on the anonymous thread\n    //切换到 Scheduler s\n    .publishOn(s)  \n    //继承上一个 Scheduler\n    .map(i -> \"value \" + i);  \n\n//订阅发生在该线程， print发生于 最近的执行上下文\nnew Thread(() -> flux.subscribe(System.out::println));  \n"],["body","\n"],["headingLink","the-subscribeon-method"],["heading","The subscribeOn Method"],["body","\n"],["body","当构建 后向链条时，subscribeOn  用于订阅过程 "],["body","\n"],["body","因此 无论您将 subscribeOn  放在链条的哪里，它总是 因是影响 源的产生的执行上下文"],["body","\n"],["body","但是，这不会影响后续 publishOn  的行为，它们仍然会切换执行上下文的链条部分"],["body","\n\n"],["body","改变 操作的整条链条的订阅的线程"],["body","\n"],["body","从调度器 中选择一个线程 "],["body","\n\n"],["body","Only the earliest subscribeOn call in the chain is actually taken into account."],["body","\n"],["body","//创建 Scheduler\nScheduler s = Schedulers.newParallel(\"parallel-scheduler\", 4); \n\nfinal Flux<String> flux = Flux\n    .range(1, 2)\n    //在 s中运行\n    .map(i -> 10 + i)  \n    //切换整个链条的上下文到 s中\n    .subscribeOn(s)  \n    .map(i -> \"value \" + i);  \n\nnew Thread(() -> flux.subscribe(System.out::println));  \n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/ProjectReactor/core-features/编程式创建序列.html"],["title","编程式创建序列.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Programmatically creating a sequence"],["body","\n"],["body","在此章节，我们将 介绍，Flux、Mono的编程式创建 ，定义关联事件（onNext, onError, and onComplete）"],["body","\n"],["body","所有这些方法都 体现了一个事实： 它们暴露了 API，去触发事件，我们称之为 sink"],["body","\n"],["body","实际上有几个 sink 的变体，"],["body","\n"],["headingLink","synchronous-generate"],["heading","Synchronous generate"],["body","\n"],["body","最简单的编程式 创建 Flux的 方式是 ：通过 generate 方法"],["body","\n"],["body","这是用于同步 的 一个个的  产生，这意味着 sink 是一个 SynchronousSink 他的 next 方法 在每次回调中只能被调用 一次，你可以 调用 error(Throwable)  或者 complete  这是可选的"],["body","\n"],["body","最有用的变体可能是 让你保持 一个状态，你可以 在你的 sink 使用中 引用这个 状态，以决定 下一步 产生什么"],["body","\n"],["body","generator 函数 形式为： BiFunction<S, SynchronousSink<T>, S> s是状态对象，必须提供初始化状态，Supplier<S> ，你的 generator 函数 现在 返回每轮的 新状态"],["body","\n"],["body","Flux<String> flux = Flux.generate(\n    () -> 0, \n    (state, sink) -> {\n      sink.next(\"3 x \" + state + \" = \" + 3*state); \n      if (state == 10) sink.complete(); \n      return state + 1; \n    });\n"],["body","\n"],["body","Flux<String> flux = Flux.generate(\n    AtomicLong::new, \n    (state, sink) -> {\n      long i = state.getAndIncrement(); \n      sink.next(\"3 x \" + i + \" = \" + 3*i);\n      if (i == 10) sink.complete();\n      return state; \n    });\n"],["body","\n"],["body","如果状态包含数据库连接或其他资源,需要在流程结束时处理,the consumer lamba 可以关闭连接，或者其他 在进程结束时，需要处理的任务"],["body","\n"],["headingLink","asynchronous-and-multi-threadedcreate"],["heading","Asynchronous and Multi-threaded:create"],["body","\n"],["body","\n"],["body","异步跟多线程 create"],["body","\n"],["body","\n"],["body","create 是更高级的 编程创建 Flux 的形式， 适合 每轮产生多个元素，甚至来自多线程"],["body","\n"],["body","它暴露  FluxSink 对象，这个对象有 next、error、complete 方法 "],["body","\n"],["body","与 generate 相反，它没有基于状态的变体，另一方面，它可以触发 回调中的多线程事件"],["body","\n"],["body","create 对于 桥接 已有API到 响应式 世界 很有用，例如基于监听器的 异步API"],["body","\n"],["body","create 不会串行化 你的 代码，也不会使之异步,但他能用于异步API"],["body","\n"],["body","如果你 在 create lamba 阻塞，你可能会面临 死锁或类似的副作用"],["body","\n"],["body","甚至使用 subscribeOn "],["body","\n"],["body","对于长阻塞的 create lamba 方法（例如 无限循环调用 sink.next(t) ）会锁住 pipeline "],["body","\n"],["body","请求永远不会执行 ，因为循环饿死了他们应该运行的同一个线程。"],["body","\n"],["body","Use the subscribeOn(Scheduler, false) variant: requestOnSeparateThread = false will use the Scheduler thread for the create and still let data flow by performing request in the original thread."],["body","\n"],["body","你有一个基于 监听器的 API，它按块处理数据，并具有两个事件在 MyEventListener  接口："],["body","\n\n"],["body","a chunk of data is ready and "],["body","\n"],["body","the processing is complete "],["body","\n\n"],["body","interface MyEventListener<T> {\n    void onDataChunk(List<T> chunk);\n    void processComplete();\n}\n"],["body","\n"],["body","使用create桥接"],["body","\n"],["body","Flux<String> bridge = Flux.create(sink -> {\n    myEventProcessor.register( \n      new MyEventListener<String>() { \n\n        public void onDataChunk(List<String> chunk) {\n          for(String s : chunk) {\n            sink.next(s); \n          }\n        }\n\n        public void processComplete() {\n            sink.complete(); \n        }\n    });\n});\n"],["body","\n"],["body","此外 由于 create  可以 桥接 异步API 并管理 背压"],["body","\n"],["body","您可以通过 指示 OverflowStrategy 来改进 如何 进行背压"],["body","\n\n"],["body","IGNORE 完全忽略下游背压请求，当 排队者占满 下游 ，可能会产生IllegalStateException"],["body","\n"],["body","ERROR 当下游跟不上时， 发出 IllegalStateException 的信号"],["body","\n"],["body","DROP 如果下游未准备好接收来信，则丢弃传入信号。."],["body","\n"],["body","`LATEST 让下游只从上游获得最新信号."],["body","\n"],["body","BUFFER （默认值）缓冲所有信号，如果下游跟不上 (这确实有无限制的缓冲， 并可能导致 OutOfMemoryError)."],["body","\n\n"],["body","Mono also has a create generator. The MonoSink of Mono’s create doesn’t allow several emissions. It will drop all signals after the first one."],["body","\n"],["headingLink","asynchronous-but-single-threaded-push"],["heading","Asynchronous but single-threaded: push"],["body","\n"],["body","push 是 generate 跟 create的 中间地带，适合于 来自单个 生产者的 事件处理"],["body","\n"],["body","与 create 类似 ，它同样可以 异步、使用  overflow strategies  管理背压，然后，只能来自一个生产线程，可能会 同时调用 next complete error "],["body","\n"],["body","Flux<String> bridge = Flux.push(sink -> {\n    myEventProcessor.register(\n      new SingleThreadEventListener<String>() { \n\n        public void onDataChunk(List<String> chunk) {\n          for(String s : chunk) {\n            sink.next(s); \n          }\n        }\n\n        public void processComplete() {\n            sink.complete(); \n        }\n\n        public void processError(Throwable e) {\n            sink.error(e); \n        }\n    });\n});\n"],["body","\n"],["body","A hybrid push/pull model"],["body","\n"],["body","Most Reactor operators, like create, follow a hybrid push/pull model. "],["body","\n"],["body","大多数 Reactor 操作，比如 create 遵循 混合的 push/pull 模型，"],["body","\n"],["body","意思是：尽管大多是处理是异步的（建议采用 push方法），有一个小的 pull  组件：request"],["body","\n"],["body","consumer 从源 pull 数据，直到第一次请求，它才会产生任何东西"],["body","\n"],["body","source 推送数据 给 consumer 在其请求的数量范围内"],["body","\n"],["body","Note that push() and create() both allow to set up an onRequest consumer in order to manage the request amount and to ensure that data is pushed through the sink only when there is pending request."],["body","\n"],["body","注意：push() creat() 都 允许 设置 onRequest consumer 为了 管理请求数量，以确保 存在 pending 的request 时 数据被推送"],["body","\n"],["body","Flux<String> bridge = Flux.create(sink -> {\n    myMessageProcessor.register(\n      new MyMessageListener<String>() {\n\n        public void onMessage(List<String> messages) {\n            //The remaining messages that arrive asynchronously later are also delivered.\n          for(String s : messages) {\n            sink.next(s); \n          }\n        }\n    });\n    sink.onRequest(n -> {\n        //\tPoll for messages when requests are made.\n        List<String> messages = myMessageProcessor.getHistory(n); \n        //If messages are available immediately, push them to the sink.\n        for(String s : messages) {\n           sink.next(s); \n        }\n    });\n});\n"],["body","\n"],["body","Cleaning up after push() or create()"],["body","\n"],["body","Two callbacks, onDispose and onCancel, perform any cleanup on cancellation or termination. "],["body","\n"],["body","onCancel can be used to perform any action specific to cancellation prior to cleanup with onDispose."],["body","\n"],["body","两个回调 onDispose onCancel 在 终止或 取消时 执行清理动作，"],["body","\n"],["body","当 Flux completes,、错误或取消时，OnDispose 可用于执行清理"],["body","\n"],["body","\"onCancel\" 可用于在   onDispose 之前执行任何特定于 cancellation   的\"操作\"。"],["body","\n"],["body","Flux<String> bridge = Flux.create(sink -> {\n    sink.onRequest(n -> channel.poll(n))\n        //onCancel is invoked first, for cancel signal only.\n        .onCancel(() -> channel.cancel()) \n        //onDispose is invoked for complete, error, or cancel signals.\n        .onDispose(() -> channel.close())  \n    });\n"],["body","\n"],["headingLink","handle"],["heading","Handle"],["body","\n"],["body","handle 方法 有一点不同，实例 方法，意思是他被 链接在 现有源上（普通操作也是）在 Mono Flux 都有"],["body","\n"],["body","与 generate 相近，使用 SynchronousSink  只允许 一个个的产生,handle 可用于从每个 元素 中生成 任意值，"],["body","\n"],["body","可以跳过 元素，它可以看作是 map 和 filter 的 组合"],["body","\n"],["body","Flux<R> handle(BiConsumer<T, SynchronousSink<R>>);\n"],["body","\n"],["body","The reactive streams specification 不允许 null值，你想要执行 map，但是想要使用预存在的 方法作为 map function 这个方法有时返回null,例如 以下方法 可以 安全的 应用于 整数源"],["body","\n"],["body","public String alphabet(int letterNumber) {\n\tif (letterNumber < 1 || letterNumber > 26) {\n\t\treturn null;\n\t}\n\tint letterIndexAscii = 'A' + letterNumber - 1;\n\treturn \"\" + (char) letterIndexAscii;\n}\n"],["body","\n"],["body","这时我们可以 handle 处理null值"],["body","\n"],["body","Flux<String> alphabet = Flux.just(-1, 30, 13, 9, 20)\n    .handle((i, sink) -> {\n        String letter = alphabet(i); \n        if (letter != null) \n            sink.next(letter); \n    });\n\nalphabet.subscribe(System.out::println);\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/ProjectReactor/core-features/FlatMapConcatMap区别.html"],["title","FlatMapConcatMap区别.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","flatmap"],["heading","FlatMap"],["body","\n"],["headingLink","flatmapsequential"],["heading","FlatMapSequential"],["body","\n"],["headingLink","concatmap"],["heading","ConcatMap"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/ProjectReactor/core-features/FluxAndMono.html"],["title","FluxAndMono.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Flux"],["body","\n"],["body","\n"],["body","an Asynchronous Sequence of 0-N Items"],["body","\n"],["body","\n"],["body","The following image shows how a Flux transforms items:"],["body","\n"],["body","\n\n"],["body","Flux发出的元素"],["body","\n"],["body","水平线：从左到右的  flux 时间流 "],["body","\n"],["body","垂直线表明：Flux成功完成"],["body","\n"],["body","虚点线和 box 表明 正在对 Flux执行 转换"],["body","\n"],["body","盒子中的 文字 展示了 转换规则"],["body","\n"],["body","下方是 Flux的转换后的结果 "],["body","\n"],["body","如果 处于某种原因 转换失败 ，垂直线 会被 x替代"],["body","\n\n"],["body","Flux<T> 是 标准的 Publiser 表明 异步 0~N 的  发出项的 异步序列，可选的被 完成 或 error 总结"],["body","\n"],["body","As in the Reactive Streams spec， 这三种类型的信号转换为 对 下游 订阅者的 onNext onComplete onError的调用"],["body","\n"],["body","在这种大范围的可能信号下，\"Flux\"是通用反应类型。"],["body","\n"],["body","请注意：所有事件 甚至 终止 是 可选的"],["body","\n"],["body","no onNext event but an onComplete event represents an empty finite sequence, "],["body","\n"],["body","but remove the onComplete and you have an infinite empty sequence (not particularly useful, except for tests around cancellation). "],["body","\n"],["body","Similarly, infinite sequences are not necessarily empty. For example, Flux.interval(Duration) produces a Flux<Long> that is infinite and emits regular ticks from a clock."],["body","\n"],["h1","Mono"],["body","\n"],["body","\n"],["body","an Asynchronous 0-1 Result"],["body","\n"],["body","\n"],["body","\n"],["body","A Mono<T> is a specialized Publisher<T> that emits at most one item via the onNext signal then terminates with an onComplete signal (successful Mono, with or without value), or only emits a single onError signal (failed Mono)."],["body","\n"],["body","Mono<T> 是 Publisher<T> 的特化 ，通过 onNext  最多产生 一个 item  然后 使用 onComplete 终止，或者产生 onEror 信号"],["body","\n"],["body","在调用 onNext 之后 Mono 的实现应该 立即调用 onComplete"],["body","\n"],["body","Mono.never() 是一个 outlier。不发出任何信号"],["body","\n"],["body","请注意，您可以使用\"Mono\"表示只有完成概念的无值异步过程（类似于\"runnable\"）。"],["body","\n"],["body","To create one, you can use an empty Mono<Void>."],["body","\n"],["h1","Flux Mono使用"],["body","\n"],["headingLink","subscribe-method-examples"],["heading","subscribe Method Examples"],["body","\n"],["body","No-op订阅"],["body","\n"],["body","Flux<Integer> ints = Flux.range(1, 3); \nints.subscribe(); \n"],["body","\n"],["body","处理元素订阅"],["body","\n"],["body","Flux<Integer> ints = Flux.range(1, 3); \nints.subscribe(i -> System.out.println(i)); \n"],["body","\n"],["body","异常处理"],["body","\n"],["body","Flux<Integer> ints = Flux.range(1, 4) \n      .map(i -> { \n        if (i <= 3) return i; \n        throw new RuntimeException(\"Got to 4\"); \n      });\nints.subscribe(i -> System.out.println(i), \n      error -> System.err.println(\"Error: \" + error));\n"],["body","\n"],["body","完成处理"],["body","\n"],["body","Flux<Integer> ints = Flux.range(1, 4); \nints.subscribe(i -> System.out.println(i),\n    error -> System.err.println(\"Error \" + error),\n    () -> System.out.println(\"Done\")); \n"],["body","\n"],["body","Subscription消费"],["body","\n"],["body","这个变体 方法可以 使你 对 Subscription做一些事情（request(n)） 或者取消它， Otherwise the Flux hangs."],["body","\n"],["body","Flux<Integer> ints = Flux.range(1, 4);\nints.subscribe(i -> System.out.println(i),\n    error -> System.err.println(\"Error \" + error),\n    () -> System.out.println(\"Done\"),\n    sub -> sub.request(10)); \n"],["body","\n"],["body","Flux<Integer> ints = Flux.range(1, 4);\nints.subscribe(i -> System.out.println(i),\n    error -> System.err.println(\"Error \" + error),\n    () -> System.out.println(\"Done\"),\n    sub -> sub.request(10)); \n"],["body","\n"],["headingLink","cancelling-a-subscribe-with-its-disposable"],["heading","Cancelling a subscribe() with Its Disposable"],["body","\n"],["body","所有以上的 Lambada 变体的 subscribe 都有 Disposable 返回值"],["body","\n"],["body","在这种情况下，the Disposable接口 表示 可以 通过 调用 dispost() 取消 订阅的事实"],["body","\n"],["body","对于 Flux or Mono 取消是一个 信号，源应该停止生产元素 ，但是不能立即保证，某些源可能会产生 如此之快的元素  以至于 在收到取消指令前已完成"],["body","\n"],["body","Disposable的一些工具方法 也是可用的。"],["body","\n"],["body","Disposables.swap()  创建一个  Disposable 包装器 ，让你自动取消 并 替换具体的 Disposable "],["body","\n"],["body","在UI场景下，当用户单击按钮时，您需要取消请求，然后用新请求替换请求"],["body","\n"],["body","Disposing the wrapper itself closes it. Doing so disposes the current concrete value and all future attempted replacements."],["body","\n"],["body","Another interesting utility is Disposables.composite(…). This composite lets you collect several Disposable — for instance, multiple in-flight requests associated with a service call — and dispose all of them at once later on. Once the composite’s dispose() method has been called, any attempt to add another Disposable immediately disposes it."],["body","\n"],["headingLink","an-alternative-to-lambdas-basesubscriber"],["heading","An Alternative to Lambdas: BaseSubscriber"],["body","\n"],["body","还有一个额外的订阅方法,更通用，采取成熟的订阅者,而不是通过Lamba组合。为了帮助 编写 Subscriber 我们提供了 可扩展的类  BaseSubscriber "],["body","\n"],["body","BaseSubscriber 的实例 是一次性的，意味着："],["body","\n\n"],["body","BaseSubscriber  在订阅第二个 Publisher 时 会 取消第一个"],["body","\n"],["body","这是因为 多次使用 实例，会 违反  Reactive Streams rule ：一个 Subscriber 的 onNext 方法  不能被并行调用"],["body","\n"],["body","因此 只有直接声明在 Publisher#subscribe(Subscriber) 的调用中 匿名实现 才行"],["body","\n\n"],["body","SampleSubscriber<Integer> ss = new SampleSubscriber<Integer>();\nFlux<Integer> ints = Flux.range(1, 4);\nints.subscribe(ss);\n\npackage io.projectreactor.samples;\n\nimport org.reactivestreams.Subscription;\n\nimport reactor.core.publisher.BaseSubscriber;\n\npublic class SampleSubscriber<T> extends BaseSubscriber<T> {\n\n\tpublic void hookOnSubscribe(Subscription subscription) {\n\t\tSystem.out.println(\"Subscribed\");\n\t\trequest(1);\n\t}\n\n\tpublic void hookOnNext(T value) {\n\t\tSystem.out.println(value);\n\t\trequest(1);\n\t}\n}\n"],["body","\n"],["body","该类提供可以覆盖的 hook ，以调整 subscriber的行为"],["body","\n"],["body","默认情况下 会触发  无界请求 与 subscribe() 行为一致"],["body","\n"],["body","但是，当您想要自定义请求数量时，扩展 BaseSubscriber 更有用"],["body","\n"],["body","对于自定义 请求数量，最小限度是 实现： hookOnSubscribe(Subscription subscription)  hookOnNext(T value) "],["body","\n"],["body","在上述例子中：the hookOnSubscribe 方法 发出第一个 请求，然后：hookOnNext 放出额外的 request "],["body","\n"],["body","BaseSubscriber 同样 提供了   requestUnbounded() 方法 请求 无界模式 等价于 request(Long.MAX_VALUE)) "],["body","\n"],["body","和 cancel方法"],["body","\n"],["body","它也有额外的  hooks   hookOnComplete, hookOnError, hookOnCancel hookFinally （当序列终止时，总是调用，终止类型作为  SignalType  参数传递）"],["body","\n"],["headingLink","on-backpressure-and-ways-to-reshape-requests"],["heading","On Backpressure and Ways to Reshape Requests"],["body","\n"],["body","Reactor 在 实现 背压时，消费者压力传回源头的 方式是 ：发送 request 请求给 上游"],["body","\n"],["body","当前请求的 总数 有时被引用为 当前 demand 或者 pending request"],["body","\n"],["body","Long.MAX_VALUE 的demand 表示 无限制的 请求（意味着：尽可能快的生产）"],["body","\n"],["body","第一个请求来自 订阅时 最终的订阅者"],["body","\n"],["body","所有最直接的 订阅方式 立即 触发了  无界的  Long.MAX_VALUE 的 request"],["body","\n\n"],["body","subscribe()，以及大部分 lambada 变体（除了：具有 Consumer<Subscription> 的变体） "],["body","\n"],["body","block(), blockFirst() and blockLast()"],["body","\n"],["body","iterating over a toIterable() or toStream()"],["body","\n\n"],["body","最简单的 自定义 原始 request的方式是： 使用 BaseSubscriber subcribe ，覆盖 hookOnSubscribe  方法"],["body","\n"],["body","Flux.range(1, 10)\n    .doOnRequest(r -> System.out.println(\"request of \" + r))\n    .subscribe(new BaseSubscriber<Integer>() {\n\n      @Override\n      public void hookOnSubscribe(Subscription subscription) {\n        request(1);\n      }\n\n      @Override\n      public void hookOnNext(Integer integer) {\n        System.out.println(\"Cancelling after having received \" + integer);\n        cancel();\n      }\n    });\n"],["body","\n"],["body","当修改 request时，你必须 小心，产生足够的 demand  以进行推进，否则 你的 Flux 会被卡住"],["body","\n"],["body","这也是为什么  BaseSubscriber  默认 在 hookOnSubscribe 中 请求 无限制的 request"],["body","\n"],["body","当覆盖此钩子函数时，你必须 至少 调用一次 request"],["body","\n"],["headingLink","operators-that-change-the-demand-from-downstream"],["heading","Operators that Change the Demand from Downstream"],["body","\n"],["headingLink","buffer"],["heading","buffer"],["body","\n"],["body","需求记住的是：上游链条 中 每个运营商 都可以 在 订阅级别上 重塑  表达的需求"],["body","\n"],["body","一个教科书案例是： buffer(N)  操作："],["body","\n"],["body","如果它收到 request(2)  ，它被解释为 填满  two full buffers."],["body","\n"],["body","因此 缓冲区需要 n个元素填满，而需要2个缓冲区，所以 buffer操作将 元素个数 重塑为 mxn m是请求的缓冲区的个数，n是缓冲区的大小"],["body","\n"],["headingLink","prefetch"],["heading","prefetch"],["body","\n"],["body","你可能会注意到： prefetch(int)，这是修改下游请求的另一个 操作，"],["body","\n"],["body","这通常是 处理内部序列，从每个 输入的元素中  提取 Publisher 像flatMap"],["body","\n"],["body","Prefetch 是一种   微调 初始化请求的方式，在其内部完成"],["body","\n"],["body","如果未指定，大多数 操作start with a demand of 32"],["body","\n"],["body","这些操作的通常 实现了 replenishing optimization: "],["body","\n"],["body","一旦操作员看到 75%的 prefetch 填充完毕，它将重新向上游请求 75%"],["body","\n"],["body","这是一个 启发式优化，使得操作 能够 主动预测 即将到来的请求"],["body","\n"],["headingLink","limit"],["heading","limit"],["body","\n"],["body","最后，几个操作允许您直接调整请求： limitRate and limitRequest"],["body","\n"],["body","limitRate(N)   将下游请求 拆分，以便以较小的 批次向下游传播"],["body","\n"],["body","例如：request(100)，和 limitRate(10) 会导致：最多 10个请求被传播到上游"],["body","\n"],["body","注意：limitRate 也实现了 replenishing optimization 该 操作也有一个变体，允许调整 请求数量，称作：lowTide : limitRate(highTide, lowTide). "],["body","\n"],["body","如果 lowTide为 0，则在每批次中 使用 严格的  highTide 请求数 。而不是 根据补充策略，批次进一步返工"],["body","\n"],["body","limitRequest(N), 在另一个方面， 将下游请求限制为最大总需求。"],["body","\n"],["body","它加起来 请求 高达 N"],["body","\n"],["body","如果单个 请求 没有超过 N的 需求，则该请求  完全传播到 上游，在源发出该数量之后，"],["body","\n"],["body","limitRequest 认为序列已完成，向下游发 onComplete 信号，并取消源"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/ProjectReactor/core-features/ProcessorOrSinks.html"],["title","ProcessorOrSinks.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Processors and Sinks"],["body","\n"],["body","Processors是 一种特殊的 Publisher ，同样也是 Subscriber"],["body","\n"],["body","它们最初是 在Reactive Streams 的不同实现中 作为 中间步骤的 可能 表示"],["body","\n"],["body","在Reactor中，这些步骤 相当由 Publiser 表示"],["body","\n"],["body","Processor 的常见误区是 直接调用 Subscriber 上 暴露的 onNext onComplete onError 方法"],["body","\n"],["body","这样直接调用需要小心："],["body","\n"],["body","特别是 关于 Reactive Streams specification 考虑到 调用之间的外部同步。Processors 可能会稍有用，除非遇到 基于 Reactive Streams的API，该API需要 Subscriber传入，而不是暴露发 Publisher"],["body","\n"],["body","Sinks是更好的选择，在 Reactor中，sink是一个 安全的手动的 触发 信号的类，它既可以于 Subscription 关联（从操作内部） 也可以完全独立"],["body","\n"],["body","Since 3.4.0, sinks 成为 一等公民，Processor 淘汰了"],["body","\n\n"],["body","抽象的  或 具体的 FluxProcessor and MonoProcessor  过时了，预计在3.5.0 中删除"],["body","\n"],["body","sink不是由 操作 产生的，而是通过 Sinks 的工厂方法 构建的"],["body","\n\n"],["headingLink","safely-produce-from-multiple-threads-by-using-sinksone-and-sinksmany"],["heading","Safely Produce from Multiple Threads by Using Sinks.One and Sinks.Many"],["body","\n"],["body","reactor-core 暴露出来的  Sinks  确保 在多线程使用，不会违反规范 或者 未定义的行为，从下游的角度看"],["body","\n"],["body","当使用 tryEmit*  API 时，并行调用 会 fail fast "],["body","\n"],["body","当使用 emit* API 时，提供的 EmissionFailureHandler 可以允许 在竞争中 重试（例如：忙碌轮询），否则 sink会以失败终止"],["body","\n"],["body","这对于 Processor.onNext 是一个提升，它 必须外部同步，否则就会 导致未定义的行为，从下游Subscribers的视角来看"],["body","\n"],["body","Sinks 构建起 为主要支持的 producer types 提供引导API"],["body","\n"],["body","你将会发现 Flux中 的一些行为 例如：onBackpressureBuffer"],["body","\n"],["body","Sinks.Many<Integer> replaySink = Sinks.many().replay().all();\n"],["body","\n"],["body","多个生产者线程可以通过以下工作同时 在 sink 上生成数据："],["body","\n"],["body","//thread1\nsink.emitNext(1, FAIL_FAST);\n\n//thread2, later\nsink.emitNext(2, FAIL_FAST);\n\n//thread3, concurrently with thread 2\nEmitResult result = sink.tryEmitNext(3); //would return FAIL_NON_SERIALIZED\n"],["body","\n"],["body","Sinks.Many 可以作为 Flux"],["body","\n"],["body","Flux<Integer> fluxView = replaySink.asFlux();\nfluxView\n\t.takeWhile(i -> i < 10)\n\t.log()\n\t.blockLast();\n"],["body","\n"],["body","Similarly, the Sinks.Empty and Sinks.One flavors can be viewed as a Mono with the asMono() method."],["body","\n"],["body","The Sinks categories are:"],["body","\n\n"],["body","many().multicast(): 只传输 新推的 数据给其 subscribers，遵循背压，（newly pushed as in \"after the subscriber’s subscription\"）"],["body","\n"],["body","many().unicast(): 与上述相同, with the twist that data pushed before the first subscriber registers is buffered."],["body","\n"],["body","many().replay(): a sink that will replay a specified history size of pushed data to new subscribers then continue pushing new data live."],["body","\n"],["body","one(): a sink that will play a single element to its subscribers"],["body","\n"],["body","empty(): a sink that will play a terminal signal only to its subscribers (error or complete), but can still be viewed as a Mono<T> (notice the generic type <T>)."],["body","\n\n"],["headingLink","overview-of-available-sinks"],["heading","Overview of Available Sinks"],["body","\n"],["headingLink","sinksmanyunicastonbackpressurebufferargs"],["heading","Sinks.many().unicast().onBackpressureBuffer(args?)"],["body","\n"],["body","Sinks.many().unicast() 使用 内部缓冲区 处理 背压，作为权衡：只能有一个 Subscriber"],["body","\n"],["body","Sinks.many().unicast().onBackpressureBuffer() 是基本的 sink创建方法"],["body","\n"],["body","还有其他变体微调"],["body","\n"],["body","例如，默认情况下，它是无限制的："],["body","\n"],["body","如果您在其 Subscriber 尚未请求数据时，推送任意数量的 数据时，它会缓冲数据数据"],["body","\n"],["body","你可以为内部 缓冲区 提供自定义队列的 实现来改变此情况 Sinks.many().unicast().onBackpressureBuffer(Queue) "],["body","\n"],["body","如果队列是有界的，缓冲区已满，未收到来自下游足够的请求，sink可能会 拒绝 数据的推送"],["body","\n"],["headingLink","sinksmanymulticastonbackpressurebufferargs"],["heading","Sinks.many().multicast().onBackpressureBuffer(args?)"],["body","\n"],["body","Sinks.many().multicast() 可以 触发 多个 subscribers ，同时处理 为每一个 subscriber 处理 背压"],["body","\n"],["body","subscribers 订阅后，只接收 通过 sink的 push 信号"],["body","\n"],["body","创建 sink的 基本方法  Sinks.many().multicast().onBackpressureBuffer(). "],["body","\n"],["body","默认情况下，所有 subscribers  取消了（这基本意味着 它们 都有未订阅）"],["body","\n"],["body","它会 清除其 内部缓冲区，并停止接受新的 subscribers"],["body","\n"],["body","你可以在 multicast  静态工厂方法中 使用autoCancel  参数微调，位于 Sinks.many().multicast()"],["body","\n"],["headingLink","sinksmanymulticastdirectallornothing"],["heading","Sinks.many().multicast().directAllOrNothing()"],["body","\n"],["body","处理背压很简单：如果有一个 subscribers  很慢例如 0 demand, 则 onNext 方法 会被 所有subscribers drop掉"],["body","\n"],["body","但是，慢subscribers  没有终止， 一旦 慢 subscribers  再次开始请求，所有subscribers  都将恢复 接收 从那里推送的数据"],["body","\n"],["body","一旦 Sinks.many 终止了 （通常是 调用emitError(Throwable) or emitComplete() ）"],["body","\n"],["body","它仍允许 更多的 subscribers subscribe  但是 会立即重播 终止信号给他们"],["body","\n"],["headingLink","sinksmanymulticastdirectbesteffort"],["heading","Sinks.many().multicast().directBestEffort()"],["body","\n\n"],["body","\n"],["body","最大努力的处理背压：只 drop掉 慢 subscriber  的 onNext"],["body","\n"],["body","\n"],["body","\n"],["body","如果慢 subscribers  恢复速度，会重新 push 元素"],["body","\n"],["body","\n"],["body","\n"],["body","Sinks.many 终止，允许新的 subscribers 加入，并重放 终止信号"],["body","\n"],["body","\n\n"],["headingLink","sinksmanyreplay"],["heading","Sinks.many().replay()"],["body","\n"],["body","缓存 产生的元素，并重播给 后续的 订阅者"],["body","\n"],["body","它有以下配置"],["body","\n\n"],["body","Caching a limited history (Sinks.many().replay().limit(int)) or an unbounded history (Sinks.many().replay().all()). 基于个数的缓存"],["body","\n"],["body","Caching a time-based replay window (Sinks.many().replay().limit(Duration)).  基于时间的缓存"],["body","\n"],["body","Caching a combination of history size and time window (Sinks.many().replay().limit(int, Duration)). 综合"],["body","\n\n"],["body","还有其他的重载方法 微调"],["body","\n"],["body","例如 latest() and latestOrDefault(T)"],["body","\n"],["headingLink","sinksunsafemany"],["heading","Sinks.unsafe().many()"],["body","\n"],["body","与 Sinks.Many  相比 没有额外的 producer 线程安全，也就意味着更小的开销"],["body","\n"],["body","根据 the Reactive Streams specification.可以确保  onNext, onComplete and onError  在外部同步"],["body","\n"],["headingLink","sinksone"],["heading","Sinks.one()"],["body","\n"],["body","Sinks的使用 是 Mono的 视图 ，通过 asMono() "],["body","\n"],["body","and has slightly different emit methods to better convey this Mono-like semantics:"],["body","\n"],["body","并有稍微不同的 emit 方法， 以更好地传达这种单一(Mono-like)的语义："],["body","\n\n"],["body","emitValue(T value) generates an onNext(value) signal and - in most implementations - will also trigger an implicit onComplete()"],["body","\n"],["body","emitEmpty() generates an isolated onComplete() signal, intended as generating the equivalent of an empty Mono"],["body","\n"],["body","emitError(Throwable t) generates an onError(t) signal"],["body","\n\n"],["body","Sinks.one() accepts one call of any of these methods, effectively generating a Mono that either completed with a value, completed empty or failed."],["body","\n"],["headingLink","sinksempty"],["heading","Sinks.empty()"],["body","\n"],["body","This flavor of Sinks is like Sinks.One<T>, except it doesn’t offer the emitValue method."],["body","\n"],["body","As a result, it can only generates a Mono that completes empty or fails."],["body","\n"],["body","The sink is still typed with a generic <T> despite being unable to trigger an onNext, because it allows easy composition and inclusion in chains of operators that require a specific type."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/ProjectReactor/core-features/错误处理.html"],["title","错误处理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Handling Errors"],["body","\n"],["body","\n"],["body","要快速查看可用于错误处理的操作  see the relevant operator decision tree."],["body","\n"],["body","\n"],["body","In Reactive Streams,错误是 终止事件，一旦错误发生，它会终止序列，传播 到 操作链的最后一个、the Subscriber 、以及其 onError 方法。这类错误 应该 在应用级别处理"],["body","\n"],["body","如果没有定义  onError 抛出一个 UnsupportedOperationException  可以通过  Exceptions.isErrorCallbackNotImplemented 检测跟 分类"],["body","\n"],["body","作为错误处理 操作，Reactor 还提供了 在链条中 处理错误的 方法"],["body","\n"],["body","Flux.just(1, 2, 0)\n    .map(i -> \"100 / \" + i + \" = \" + (100 / i)) //this triggers an error with 0\n    .onErrorReturn(\"Divided by zero :(\"); // error handling example\n"],["body","\n"],["body","错误处理操作 是一个终止序列，即使使用了 error-handling operator ，并不会让 序列继续，相反它将 onError信号 转换成 了 一个新序列的开始 ，换句话说：它替代了 原始序列"],["body","\n"],["body","现在，我们可以逐一考虑各种错误处理方法。当相关时，我们与命令式编程的 try pattenr 进行并行。"],["body","\n"],["headingLink","error-handling-operators"],["heading","Error Handling Operators"],["body","\n"],["body","try catch的错误处理模型"],["body","\n\n"],["body","Catch and return a static default value: catch 并返回静态默认值"],["body","\n"],["body","Catch and execute an alternative path with a fallback method：  catch，使用fallback 方法 执行替代路径"],["body","\n"],["body","Catch and dynamically compute a fallback value. catch 动态计算 fallback value"],["body","\n"],["body","Catch, wrap to a BusinessException, and re-throw.  catch,重新抛出"],["body","\n"],["body","Catch, log an error-specific message, and re-throw. catch 记录日志 重新抛出"],["body","\n"],["body","Use the finally block to clean up resources or a Java 7 “try-with-resource” construct. finally 执行资源清理"],["body","\n\n"],["body","上述所有这些情况都在 Reactor中都有等价API，以 error-handling 操作形式"],["body","\n"],["body","try catch与 Reactor error-handling的对照"],["body","\n"],["body","订阅时，the onError  callback 回调 类似于 catch块，当异常抛出 会直接调到 catch块执行"],["body","\n"],["body","Flux<String> s = Flux.range(1, 10)\n    .map(v -> doSomethingDangerous(v)) \n    .map(v -> doSecondTransform(v)); \ns.subscribe(value -> System.out.println(\"RECEIVED \" + value), \n            error -> System.err.println(\"CAUGHT \" + error) \n);\n"],["body","\n"],["headingLink","static-fallback-value"],["heading","Static Fallback Value"],["body","\n"],["body","trycatch模型"],["body","\n"],["body","try {\n  return doSomethingDangerous(10);\n}\ncatch (Throwable error) {\n  return \"RECOVERED\";\n}\n"],["body","\n"],["body","Reactor模型"],["body","\n"],["body","Flux.just(10)\n    .map(this::doSomethingDangerous)\n    .onErrorReturn(\"RECOVERED\");\n"],["body","\n"],["body","Reactor Predict模型"],["body","\n"],["body","//Recover only if the message of the exception is \"boom10\"\n\nFlux.just(10)\n    .map(this::doSomethingDangerous)\n    .onErrorReturn(e -> e.getMessage().equals(\"boom10\"), \"recovered10\"); \n"],["body","\n"],["headingLink","fallback-method"],["heading","Fallback Method"],["body","\n"],["body","trycatch模型"],["body","\n"],["body","String v1;\ntry {\n  v1 = callExternalService(\"key1\");\n}\ncatch (Throwable error) {\n  v1 = getFromCache(\"key1\");\n}\n\nString v2;\ntry {\n  v2 = callExternalService(\"key2\");\n}\ncatch (Throwable error) {\n  v2 = getFromCache(\"key2\");\n}\n"],["body","\n"],["body","Reactor模型"],["body","\n"],["body","Flux.just(\"key1\", \"key2\")\n    .flatMap(k -> callExternalService(k) \n        .onErrorResume(e -> getFromCache(k)) \n    );\n"],["body","\n"],["body","Reactor Predict模型"],["body","\n"],["body","Flux.just(\"timeout1\", \"unknown\", \"key2\")\n    .flatMap(k -> callExternalService(k)\n        .onErrorResume(error -> { \n            if (error instanceof TimeoutException) \n                return getFromCache(k);\n            else if (error instanceof UnknownKeyException)  \n                return registerNewEntry(k, \"DEFAULT\");\n            else\n                return Flux.error(error); \n        })\n    );\n"],["body","\n"],["headingLink","dynamic-fallback-value"],["heading","Dynamic Fallback Value"],["body","\n"],["body","trycatch模型"],["body","\n"],["body","try {\n  Value v = erroringMethod();\n  return MyWrapper.fromValue(v);\n}\ncatch (Throwable error) {\n  return MyWrapper.fromError(error);\n}\n"],["body","\n"],["body","Reactor模型"],["body","\n"],["body","erroringFlux.onErrorResume(error -> Mono.just( \n        MyWrapper.fromError(error) \n));\n"],["body","\n"],["headingLink","catch-and-rethrow"],["heading","Catch and Rethrow"],["body","\n"],["body","trycatch模型"],["body","\n"],["body","try {\n  return callExternalService(k);\n}\ncatch (Throwable error) {\n  throw new BusinessException(\"oops, SLA exceeded\", error);\n}\n"],["body","\n"],["body","Reactor模型"],["body","\n"],["body","Flux.just(\"timeout1\")\n    .flatMap(k -> callExternalService(k))\n    .onErrorResume(original -> Flux.error(\n            new BusinessException(\"oops, SLA exceeded\", original))\n    );\n\nFlux.just(\"timeout1\")\n    .flatMap(k -> callExternalService(k))\n    .onErrorMap(original -> new BusinessException(\"oops, SLA exceeded\", original));\n"],["body","\n"],["headingLink","log-or-react-on-the-side"],["heading","Log or React on the Side"],["body","\n"],["body","trycatch模型"],["body","\n"],["body","try {\n  return callExternalService(k);\n}\ncatch (RuntimeException error) {\n  //make a record of the error\n  log(\"uh oh, falling back, service failed for key \" + k);\n  throw error;\n}\n"],["body","\n"],["body","Reactor模型"],["body","\n"],["body","LongAdder failureStat = new LongAdder();\nFlux<String> flux =\nFlux.just(\"unknown\")\n    .flatMap(k -> callExternalService(k) \n        .doOnError(e -> {\n            failureStat.increment();\n            log(\"uh oh, falling back, service failed for key \" + k); \n        })\n        \n    );\n"],["body","\n"],["headingLink","using-resources-and-the-finally-block"],["heading","Using Resources and the Finally Block"],["body","\n"],["body","trycatch模型"],["body","\n"],["body","Stats stats = new Stats();\nstats.startTimer();\ntry {\n  doSomethingDangerous();\n}\nfinally {\n  stats.stopTimerAndRecordTiming();\n}\ntry (SomeAutoCloseable disposableInstance = new SomeAutoCloseable()) {\n  return disposableInstance.toString();\n}\n\n"],["body","\n"],["body","Reactor模型"],["body","\n"],["body","Both have their Reactor equivalents: doFinally and using."],["body","\n"],["body","doFinally()"],["body","\n"],["body","Stats stats = new Stats();\nLongAdder statsCancel = new LongAdder();\n\nFlux<String> flux =\nFlux.just(\"foo\", \"bar\")\n    .doOnSubscribe(s -> stats.startTimer())\n    .doFinally(type -> { \n        stats.stopTimerAndRecordTiming();\n        if (type == SignalType.CANCEL) \n          statsCancel.increment();\n    })\n    .take(1); \n"],["body","\n"],["body","Reactive try-with-resource"],["body","\n"],["body","Flux<String> flux =\nFlux.using(\n    //产生资源\n        () -> disposableInstance, \n    //通过资源产生 元素对象\n        disposable -> Flux.just(disposable.toString()), \n    // 清理资源的方式\n        Disposable::dispose \n);\n"],["body","\n"],["headingLink","证明-onerror-信号-导致终止"],["heading","证明 onError 信号 导致终止"],["body","\n"],["body","Flux<String> flux =\nFlux.interval(Duration.ofMillis(250))\n    .map(input -> {\n        if (input < 3) return \"tick \" + input;\n        throw new RuntimeException(\"boom\");\n    })\n    .onErrorReturn(\"Uh oh\");\n\nflux.subscribe(System.out::println);\nThread.sleep(2100); \n"],["body","\n"],["body","interval 在默认在 定时器上 执行 ，如果我们想在主类中运行该示例，"],["body","\n"],["body","我们需要在此处添加 Sleep  调用，以便应用程序不会立即退出，而不产生任何元素"],["body","\n"],["headingLink","retrying"],["heading","Retrying"],["body","\n"],["body","错误处理的另一种方式 retry 可以 重试 一个 正 产生错误的 序列"],["body","\n"],["body","原理是：重新订阅 上游 Flux，原始的仍然终止了"],["body","\n"],["body","Flux.interval(Duration.ofMillis(250))\n    .map(input -> {\n        if (input < 3) return \"tick \" + input;\n        throw new RuntimeException(\"boom\");\n    })\n    .retry(1)\n    .elapsed() //将每个值 与 自上一个值发出依赖的持续时间 关联在一起\n    .subscribe(System.out::println, System.err::println); \n\nThread.sleep(2100); \n"],["body","\n"],["body","259,tick 0\n249,tick 1\n251,tick 2\n506,tick 0 \n248,tick 1\n253,tick 2\njava.lang.RuntimeException: boom\n"],["body","\n"],["body","新的 interval 开始了，tick从0开始，在恢复的时候，需要额外等 250ms"],["body","\n"],["body","retry(1)  只是 仅仅 重订阅上游  interval ,第二轮仍会 发生异常，再次发生异常会 将错误 传播给 下游"],["body","\n"],["headingLink","retrywhen"],["heading","RetryWhen"],["body","\n"],["body","Retry.from"],["body","\n"],["body","接收 Flux<Retry.RetrySignal> 返回 Publisher<?>"],["body","\n"],["body","重试周期如下："],["body","\n\n"],["body","当 error 发生时，会给 Flux<RetrySignal> 发送 信号，可以纵览所有 重试，RetrySignal 提供对 错误的访问和 相关的元信息"],["body","\n"],["body","如果 Flux<RetrySignal>  产生一个 值，则重试发生"],["body","\n"],["body","如果 Flux<RetrySignal>   complete 完成了，则错误会被吞并，重试周期会 停止，结果序列 也会完成"],["body","\n"],["body","如果 Flux<RetrySignal>    产生错误，重试周期 停止，使得序列 产生错误"],["body","\n\n"],["body","使用 retryWhen 模拟 retry(3)"],["body","\n"],["body","//这不断产生错误，要求重试尝试。\nFlux<String> flux = Flux\n    .<String>error(new IllegalArgumentException()) \n//doOnError before the retry lets us log and see all failures.\n    .doOnError(System.out::println) \n//The Retry is adapted from a very simple Function lambda\n    .retryWhen(Retry.from(companion -> \n//我们认为前三个错误是可重复尝试的（takle(3)，然后放弃\n        companion.take(3))); \n"],["body","\n"],["headingLink","handling-exceptions-in-operators-or-functions"],["heading","Handling Exceptions in Operators or Functions"],["body","\n"],["body","\n"],["body","操作中处理异常"],["body","\n"],["body","\n"],["body","所有操作 和自定义的回调 都可能产生异常，惯例：未检查的异常 会被传播到 onError"],["body","\n"],["body","Flux.just(\"foo\")\n    .map(s -> { throw new IllegalArgumentException(s); })\n    .subscribe(v -> System.out.println(\"GOT VALUE\"),\n               e -> System.out.println(\"ERROR: \" + e));\n"],["body","\n"],["body","在传递给 onError之前，你可以通过 hook 调整异常"],["body","\n"],["body","Reactor定义了一些 必定失败的 异常，例如 OutOfMemoryError  ，详见Exceptions.throwIfFatal ，这些错误意味着 Reactor不能继续运行。"],["body","\n"],["body","在内部，存在一些场景 ，未检查的异常 不能被传播，因为并发竞争导致的  多次触发 "],["body","\n"],["body","onError onComplete ，无法被传播的  异常 会被 dropp掉，这种情况 可以在一定程度上 通过 使用 自定义的  hook来惯例See Dropping Hooks."],["body","\n"],["body","对于已检查的异常，同样需要 try-catch 块"],["body","\n\n"],["body","catch异常，从异常中恢复"],["body","\n"],["body","catch异常，使用 Exceptions 包装成  unchecked exception，抛出"],["body","\n"],["body","对于 flatmap 使用Flux.error(checkedException)"],["body","\n\n"],["body","Reactor 定义了 Exceptions 工具类"],["body","\n\n"],["body","使用 Exceptions.propagate  包装异常，可以 先 调用 thrwoIfFatal 不包装 RuntimeException"],["body","\n"],["body","使用  Exceptions.unwrap  方法 获取 原始异常（回到 recactor-specific 专有异常的继承机构种的  根原因）"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/ProjectReactor/core-features/README.html"],["title","core-features - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Reactor Core Features"],["body","\n"],["body","The Reactor project 主要构件 是 reactor-core"],["body","\n"],["body","专注于 reactive library 基于 java8"],["body","\n"],["body","Reactor 引入 composable reactive types  实现 Publisher，"],["body","\n"],["body","同时提供了丰富的 操作词汇：Flux and Mono"],["body","\n"],["body","Flux 对象表示 响应式的 序列 从  0..N，而 Mono 对象表示 单值或空 结果"],["body","\n"],["body","这种区别携带一些语义信息到类型，表示异步处理的粗糙基数（ the rough cardinality）"],["body","\n"],["body","例如，HTTP 请求只生成一个响应，所以做 \"计数\" 操作没有多大意义"],["body","\n"],["body","因此，将 HTTP 调用的结果 表示为Mono<HttpResponse>  比 Flux<HttpResponse> 更有意义"],["body","\n"],["body","因为它只提供与零或一个item 上下文相关的Operator。"],["body","\n"],["body","改变 最大的基数 的处理   的Operator   同样 切换到了 相应的类别 "],["body","\n"],["body","例如 count 计数 返回 Mono<Long>"],["body","\n"],["body","包括以下内容"],["body","\n\n"],["body","FluxAndMono"],["body","\n"],["body","编程式创建序列"],["body","\n"],["body","错误处理"],["body","\n"],["body","线程和调度"],["body","\n"],["body","ProcessorOrSinks"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/ProjectReactor/创建发布者.html"],["title","创建发布者.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","创建flux的几种方式"],["heading","创建FLux的几种方式"],["body","\n"],["headingLink","empty-flux"],["heading","Empty flux"],["body","\n"],["body","static <T> Flux<T> empty()\n"],["body","\n"],["headingLink","flux-from-values"],["heading","Flux from values"],["body","\n"],["body","static <T> Flux<T> just(T... data)\n"],["body","\n"],["body","Flux.just(\"12\",\"34\",\"56\").subscribe(System.out::println);\n"],["body","\n"],["headingLink","flux-from-range"],["heading","Flux from Range"],["body","\n"],["body","Flux<Integer> numbersFromFiveToSeven = Flux.range(5, 3); \n"],["body","\n"],["headingLink","flux-from-iterator"],["heading","Flux from iterator"],["body","\n"],["body","static <T> Flux<T> fromIterable(Iterable<? extends T> it)\n"],["body","\n"],["body","Flux<Integer> objectFlux = Flux.fromIterable(() -> new Iterator<Integer>() {\n            int i = 0;\n\n            @Override\n            public boolean hasNext() {\n                return i <= 100;\n            }\n\n            @Override\n            public Integer next() {\n                return i++;\n            }\n        });\n        objectFlux.subscribe(System.out::println);\n"],["body","\n"],["headingLink","create-a-flux-that-emits-an-illegalstateexception"],["heading","Create a Flux that emits an IllegalStateException"],["body","\n"],["body","static <T> Flux<T> error(Throwable error)\n    \nFlux<Object> error = Flux.error(new RuntimeException(\"自定义异常\")).onErrorStop();\nerror.subscribe(e-> System.out.println(e));\n"],["body","\n"],["headingLink","计数器"],["heading","计数器"],["body","\n"],["body","static Flux<Long> interval(Duration period)\nFlux.interval(Duration.ofMillis(100)).take(10).subscribe(e-> System.out.println(e));\n"],["body","\n"],["headingLink","创建mono的几种方式"],["heading","创建Mono的几种方式"],["body","\n"],["body","Mono 是Reactive Streams发布者，增加了几种运算符，可用于生成，转换或编排Mono序列。"],["body","\n"],["body","它是Flux的特化，最多可发出1个元素：Mono的值"],["body","\n\n"],["body","\n"],["body","带元素 完成"],["body","\n"],["body","\n"],["body","\n"],["body","空（不带元素的完成）"],["body","\n"],["body","\n"],["body","\n"],["body","或失败（错误）。"],["body","\n"],["body","\n\n"],["body","Mono<Void>可以用于仅关注完成信号的情况（相当于可运行任务的Reactive Streams完成）。"],["body","\n"],["body","Like for Flux, the operators can be used to define an asynchronous pipeline which will be materialized anew for each Subscription."],["body","\n"],["body","跟 Flux  operator 一样 ，可用于定义异步管道，该管道将针对每个“订阅”重新实现。"],["body","\n"],["body","请注意，某些更改序列的个数的API会返回“ Flux”（反之亦然，将“ Flux”中的个数减小为1的API会返回“ Mono”）。"],["body","\n"],["headingLink","empty-mono"],["heading","Empty Mono"],["body","\n"],["body","static <T> Mono<T> empty()\nMono.empty()\n"],["body","\n"],["headingLink","fromvalue"],["heading","fromValue"],["body","\n"],["body","Mono.just(1);\n"],["body","\n"],["headingLink","永不触发的mono"],["heading","永不触发的Mono"],["body","\n"],["body","Mono.never()\n"],["body","\n"],["headingLink","触发error"],["heading","触发Error"],["body","\n"],["body","Mono.error(new IllegalStateException());\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/ProjectReactor/创建订阅.html"],["title","创建订阅.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","订阅"],["body","\n"],["body","//简单直接订阅：不执行任何动作\nsubscribe(); \n\n//\tDo something with each produced value.\nsubscribe(Consumer<? super T> consumer); \n\n// 错误处理\nsubscribe(Consumer<? super T> consumer,\n          Consumer<? super Throwable> errorConsumer); \n\n// 完成处理\nsubscribe(Consumer<? super T> consumer,\n          Consumer<? super Throwable> errorConsumer,\n          Runnable completeConsumer); \n\n// 针对 Subscription 处理\nsubscribe(Consumer<? super T> consumer,\n          Consumer<? super Throwable> errorConsumer,\n          Runnable completeConsumer,\n          Consumer<? super Subscription> subscriptionConsumer); \n"],["body","\n"],["body","以上变体 返回 对 Subscription的引用 ，当不需要更多的数据时，你可以用来取消该 Subscription "],["body","\n"],["body","取消后，来源应停止产生值，并清理 其创建的任何资源，这种  cancel-and-clean-up 行为在 Reactor中 以 接口  Disposable表示"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/ProjectReactor/响应式流的动作.html"],["title","响应式流的动作.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","doOnNext"],["body","\n"],["body","有数据则触发"],["body","\n"],["h1","doOnSuccess"],["body","\n"],["body","成功完成后触发"],["body","\n"],["h1","then"],["body","\n"],["body","丢弃前面的负载，返回 Mono<Void>"],["body","\n"],["h1","then(Mono<V> other)"],["body","\n"],["body","返回另一个 Mono "],["body","\n"],["h1","数据降维"],["body","\n"],["headingLink","flatmap"],["heading","flatMap"],["body","\n"],["body","\n"],["headingLink","concatmap"],["heading","concatMap"],["body","\n"],["body","合并两个流"],["body","\n"],["body","\n\n"],["body","flatMap和flatMapSequential的订阅是同时进行的，而concatMap的是有先后顺序的"],["body","\n"],["body","concatMap和flatMapSequential的值是跟源中值顺序相同，其中flatMapSequential是经过后排序，二者输出相同"],["body","\n"],["body","flatMap中的值是交错的，根据事件触发"],["body","\n\n"],["h1","materialize、dematerialize"],["body","\n"],["body","\n"],["body","将数据封装成 Signal对象"],["body","\n"],["body","\n"],["h1","缓存"],["body","\n"],["body","CacheFlux"],["body","\n"],["body","CacheFlux.lookup(cache, CACHE_KEY, RouteDefinition.class)\n\t\t\t\t.onCacheMissResume(this::fetch);\n"],["body","\n"],["h1","PushlishOn"],["body","\n"],["body","在指定的调度器 中运行  onNext, onComplete and onError"],["body","\n"],["body","只会影响后面的操作"],["body","\n"],["body","Typically used for fast publisher, slow consumer(s) scenarios.\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/ProjectReactor/选择合适的操作符.html"],["title","选择合适的操作符.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Creating a New Sequence"],["body","\n"],["headingLink","从已有的值中创建序列"],["heading","从已有的值中创建序列"],["body","\n\n"],["body","来自 Optional Mono#justOrEmpty(Optional)"],["body","\n"],["body","来自可能为空的值 T  Mono#justOrEmpty(T)"],["body","\n\n"],["headingLink","从方法发出t"],["heading","从方法发出T"],["body","\n\n"],["body","Mono#fromSupplier"],["body","\n"],["body","Flux|Mono defer"],["body","\n\n"],["headingLink","显示枚举"],["heading","显示枚举"],["body","\n"],["body","Flux#just(T…)"],["body","\n"],["headingLink","从迭代器"],["heading","从迭代器"],["body","\n\n"],["body","从数组：Flux#fromArray"],["body","\n"],["body","从Collection类或者迭代器类：Flux#fromIterable"],["body","\n"],["body","从 Range：Flux#range"],["body","\n"],["body","从Stream：Flux#fromStream(Supplier)"],["body","\n\n"],["headingLink","单一来源"],["heading","单一来源"],["body","\n\n"],["body","supplier: Mono#fromSupplier"],["body","\n"],["body","从任务中：Mono#fromCallable,Mono#fromRunnable"],["body","\n"],["body","从 CompletableFuture 中"],["body","\n\n"],["headingLink","产生一个已完成的"],["heading","产生一个已完成的"],["body","\n"],["body","Flux|Mono.empty"],["body","\n"],["headingLink","立即产生错误"],["heading","立即产生错误"],["body","\n\n"],["body","Flux|Mono.error"],["body","\n"],["body","懒加载：error(Supplier<Throwable>)"],["body","\n\n"],["headingLink","永不做任何事"],["heading","永不做任何事"],["body","\n"],["body","never "],["body","\n"],["headingLink","延迟创建元素"],["heading","延迟创建元素"],["body","\n"],["body","defer"],["body","\n"],["headingLink","自动销毁资源"],["heading","自动销毁资源"],["body","\n"],["body","using "],["body","\n"],["body","三步走规范"],["body","\n\n"],["body","产生资源"],["body","\n"],["body","从资源中 产生 序列"],["body","\n"],["body","序列结束时关闭资源"],["body","\n\n"],["headingLink","编程式产生事件"],["heading","编程式产生事件"],["body","\n\n"],["body","同步  Flux#generate"],["body","\n"],["body","异步或同步： Flux|Mono #create"],["body","\n\n"],["h1","Transforming an Existing Sequence"],["body","\n"],["headingLink","从已存在的数据进行转换"],["heading","从已存在的数据进行转换"],["body","\n"],["headingLink","一对一转换"],["heading","一对一转换"],["body","\n"],["body","map： 转换"],["body","\n"],["body","cast：类型转换"],["body","\n"],["body","index: 生成二元组，附带索引"],["body","\n"],["headingLink","一对多转换"],["heading","一对多转换"],["body","\n"],["body","flatMap：自动转换"],["body","\n"],["body","handle：编程式自定义,一对一转换"],["body","\n"],["body","异步任务："],["body","\n\n"],["body","在 flatMap中不想返回数据：则 返回 Mono.empty()"],["body","\n"],["body","在异步过程中保持 原有序列的顺序 Flux#flatMapSequential，会立即触发产生无序数据，然后对结果重新排序"],["body","\n"],["body","如果返回多个值：则 Mono#flatMapMany ， Mono#flatMap只能返回 Mono,相比 Mono.map 多了一个异步过程"],["body","\n\n"],["headingLink","对现有序列添加预设元素"],["heading","对现有序列添加预设元素"],["body","\n"],["headingLink","前置添加"],["heading","前置添加"],["body","\n"],["body","在 前面添加元素：Flux#startWith(T…)"],["body","\n"],["headingLink","后置添加"],["heading","后置添加"],["body","\n"],["body","在后面添加元素：Flux#concatWithValues(T…)"],["body","\n"],["headingLink","收集flux"],["heading","收集Flux"],["body","\n"],["headingLink","list"],["heading","List"],["body","\n"],["body","into a List: collectList, collectSortedList"],["body","\n"],["headingLink","map"],["heading","Map"],["body","\n\n"],["body","into a Map: collectMap, collectMultiMap"],["body","\n\n"],["headingLink","任意容器"],["heading","任意容器"],["body","\n\n"],["body","collect"],["body","\n"],["body","配合 Collectors"],["body","\n\n"],["headingLink","统计sequence-size"],["heading","统计Sequence size"],["body","\n"],["body","count"],["body","\n"],["headingLink","合并"],["heading","合并"],["body","\n"],["body","reduce"],["body","\n"],["body","合并：但把中间值也会产生  scan"],["body","\n"],["headingLink","收集成bool值"],["heading","收集成Bool值"],["body","\n"],["body","所有值满足同一个条件： all"],["body","\n"],["body","至少有一个条件满足： any"],["body","\n"],["body","序列中至少有一个元素： hasElements "],["body","\n"],["headingLink","组合publishers"],["heading","组合publishers"],["body","\n"],["headingLink","组合publisher"],["heading","组合publisher"],["body","\n"],["body","按序列的顺序组合"],["body","\n"],["body","Flux#concat or .concatWith(other)"],["body","\n\n"],["body","\n"],["body","按序列出现的先后顺序组合，并延迟错误：Flux#concatDelayError"],["body","\n"],["body","\n"],["body","\n"],["body","急切的订阅 publishers：Flux#mergeSequential"],["body","\n"],["body","\n\n"],["body","按产生元素的顺序："],["body","\n\n"],["body","Flux#merge / .mergeWith(other) (Flux|Mono)：主要是为了异步 元素产生，和无限流准备的"],["body","\n"],["body","with different types (transforming merge): Flux#zip / Flux#zipWith ：将两个序列 合并成 一个 Tuple"],["body","\n\n"],["body","对合并的序列组队"],["body","\n\n"],["body","Flux#zip / Flux#zipWith "],["body","\n"],["body","from 2 Monos into a Tuple2: Mono#zipWith"],["body","\n"],["body","from n Monos when they all completed: Mono#zip"],["body","\n\n"],["body","等待其他序列完成"],["body","\n\n"],["body","\n"],["body","等待一个来源：Mono#and"],["body","\n"],["body","\n"],["body","\n"],["body","等待n个来源：Mono#when"],["body","\n"],["body","\n"],["body","\n"],["body","合并来源成为其他元素"],["body","\n\n"],["body","按元素产生顺序 依次合并  Flux#zip"],["body","\n"],["body","按最近Publishe 时间合并： Flux#combineLatest"],["body","\n\n"],["body","\n"],["body","\n"],["body","选中第一个产生元素的发布者"],["body","\n\n"],["body","firstWithValue"],["body","\n"],["body","firstWithSignal 第一个返回任何信号的"],["body","\n\n"],["body","\n"],["body","\n"],["body","每个元素产生一个 Publisher"],["body","\n\n"],["body","switchMap"],["body","\n\n"],["body","\n"],["body","\n"],["body","每个元素是一个Publisher"],["body","\n\n"],["body","switchOnNext"],["body","\n\n"],["body","\n\n"],["headingLink","重复publiser"],["heading","重复Publiser"],["body","\n"],["body","重复已有序列"],["body","\n\n"],["body","\n"],["body","repeat (Flux|Mono)"],["body","\n"],["body","\n"],["body","\n"],["body","定时重复：Flux.interval(duration).flatMap(tick → myExistingPublisher)"],["body","\n"],["body","\n\n"],["body","空值处理"],["body","\n\n"],["body","默认值：defaultIfEmpty (Flux|Mono)"],["body","\n"],["body","切换到另一个序列： switchIfEmpty (Flux|Mono)"],["body","\n\n"],["body","对值不敢兴趣"],["body","\n\n"],["body","ignoreElements (Flux.ignoreElements()|Mono.ignoreElement())"],["body","\n"],["body","转换为另一个Mono对象 ： then (Flux|Mono)"],["body","\n"],["body","等待另一个任何 完成：Mono#thenReturn(T)"],["body","\n"],["body","转换成 Flux ：thenMany (Flux|Mono)"],["body","\n\n"],["body","延迟完成"],["body","\n\n"],["body","延迟指定时间：Flux#delaySequence"],["body","\n"],["body","延迟等待另一个：Mono#delayUntil(Function)"],["body","\n\n"],["body","递归展开"],["body","\n\n"],["body","广度优先：expand(Function) (Flux|Mono)"],["body","\n"],["body","深度优先：expandDeep(Function) (Flux|Mono)"],["body","\n\n"],["h1","查看序列"],["body","\n"],["body","在不修改 最终sequence的情况下，可以被其他行为通知到"],["body","\n"],["headingLink","其他信号的回调"],["heading","其他信号的回调"],["body","\n"],["headingLink","信号的产生"],["heading","信号的产生"],["body","\n"],["body","emissions: doOnNext (Flux|Mono)"],["body","\n"],["headingLink","完成"],["heading","完成"],["body","\n"],["body","completion: Flux#doOnComplete, Mono#doOnSuccess (includes the result, if any)"],["body","\n"],["headingLink","错误"],["heading","错误"],["body","\n"],["body","error termination: doOnError (Flux|Mono)"],["body","\n"],["headingLink","取消"],["heading","取消"],["body","\n"],["body","cancellation: doOnCancel (Flux|Mono)"],["body","\n"],["headingLink","序列开始"],["heading","序列开始"],["body","\n"],["body","\"start\" of the sequence: doFirst (Flux|Mono)"],["body","\n"],["body","this is tied to Publisher#subscribe"],["body","\n"],["headingLink","订阅后"],["heading","订阅后"],["body","\n"],["body","doOnSubscribe (Flux|Mono)"],["body","\n"],["body","this is tied to Subscriber#onSubscribe(Subscription)"],["body","\n"],["headingLink","请求时"],["heading","请求时"],["body","\n"],["body","request: doOnRequest (Flux|Mono)"],["body","\n"],["headingLink","序列终止"],["heading","序列终止"],["body","\n"],["body","completion or error: doOnTerminate (Flux|Mono)"],["body","\n\n"],["body","but after it has been propagated downstream: doAfterTerminate (Flux|Mono)"],["body","\n\n"],["headingLink","有信号产生"],["heading","有信号产生"],["body","\n"],["body","any type of signal, represented as a Signal: doOnEach (Flux|Mono)"],["body","\n"],["headingLink","终止"],["heading","终止"],["body","\n"],["body","any terminating condition (complete, error, cancel): doFinally (Flux|Mono)"],["body","\n"],["headingLink","打印日志"],["heading","打印日志"],["body","\n"],["body","log what happens internally: log (Flux|Mono)"],["body","\n"],["headingLink","所有事件抽象"],["heading","所有事件抽象"],["body","\n\n"],["body","信号对象：doOnEach (Flux|Mono)"],["body","\n"],["body","将 onNext、onComplete 、onError 抽象成 SignObject 对象：materialize (Flux|Mono)、dematerialize (Flux|Mono)"],["body","\n\n"],["h1","过滤序列"],["body","\n"],["headingLink","过滤"],["heading","过滤"],["body","\n"],["body","任意过滤序列"],["body","\n"],["body","filter (Flux|Mono)"],["body","\n"],["body","异步过滤"],["body","\n"],["body","filterWhen (Flux|Mono)"],["body","\n"],["body","过滤类别"],["body","\n"],["body","ofType (Flux|Mono)"],["body","\n"],["body","过滤重复数据"],["body","\n"],["body","Flux#distinct"],["body","\n"],["body","元素本身会使用 HashSet保存"],["body","\n"],["body","使用 distinct(Object::hashcode) 更加轻量级，不会保存所有元素对象，但是会有 hashCode冲突"],["body","\n"],["body","过滤相邻之间的重复数据"],["body","\n"],["body","Flux#distinctUntilChanged"],["body","\n"],["headingLink","取部分序列"],["heading","取部分序列"],["body","\n"],["headingLink","取n个元素"],["heading","取n个元素"],["body","\n"],["body","从开头取n个元素"],["body","\n"],["body","limitRequest为true,确保 请求总数被限制在 n"],["body","\n"],["body","Flux#take(long, true)"],["body","\n"],["body","指定延迟"],["body","\n"],["body","Flux#take(Duration)"],["body","\n"],["body","只取下一个元素"],["body","\n"],["body","Flux#next()"],["body","\n"],["body","取最后n个"],["body","\n"],["body","Flux#takeLast"],["body","\n"],["body","直到满足条件后退出"],["body","\n"],["body","直到满足条件后退出：Flux#takeUntil"],["body","\n"],["body","直到其他订阅者发出元素： Flux#takeUntilOther "],["body","\n"],["body","条件满足直到返回false：Flux#takeWhile"],["body","\n"],["body","最多取一个元素"],["body","\n"],["body","指定位置：Flux#elementAt"],["body","\n"],["body","倒数第n个：.takeLast(1)"],["body","\n"],["body","最后一个： Flux#last()"],["body","\n"],["body","取默认值如果没有： Flux#last(T)"],["body","\n"],["headingLink","跳过元素"],["heading","跳过元素"],["body","\n"],["body","从开头跳过"],["body","\n"],["body","Flux#skip(long)"],["body","\n"],["body","基于延迟的跳过"],["body","\n"],["body","Flux#skip(Duration)"],["body","\n"],["body","跳过尾部元素"],["body","\n"],["body","Flux#skipLast"],["body","\n"],["body","一直跳过直到满足条件后不跳过"],["body","\n"],["body","Flux#skipUntil "],["body","\n"],["body","一直跳过直到其他Publisher产生对象"],["body","\n"],["body","Flux#skipUntilOther "],["body","\n"],["body","一直跳过，直到不满足条件后不跳过"],["body","\n"],["body","Flux#skipWhile"],["body","\n"],["headingLink","取样"],["heading","取样"],["body","\n"],["body","按时间间隔取样"],["body","\n"],["body","取样窗口的最后一个： Flux#sample(Duration)"],["body","\n"],["body","取样窗口的第一个：sampleFirst"],["body","\n"],["body","基于Publiser的 取样器"],["body","\n"],["body","Flux#sample(Publisher)"],["body","\n"],["body","辅助采样器 发出元素的间隔 作为取样窗口，取最后一个"],["body","\n"],["body","取样器终止后，当前序列也会终止"],["body","\n"],["body","如果序列开始前 取样器已经终止，则不会产生任何数据"],["body","\n"],["body","基于超时的Publisher取样器"],["body","\n"],["body","based on a publisher \"timing out\": Flux#sampleTimeout (each element triggers a publisher, and is emitted if that publisher does not overlap with the next)"],["body","\n"],["body","可以认为：将原始序列拆分为 相应 Flux的 start 和 complete 组成的时间窗口"],["body","\n"],["body","如果 当前元素的 时间窗口 和 下一个元素的 时间窗口 重合：则将当前元素窗口值丢弃"],["body","\n"],["body","stack_over_flow"],["body","\n"],["headingLink","最多取一个"],["heading","最多取一个"],["body","\n"],["body","没有值则报错： Flux#single()"],["body","\n"],["body","没有值取默认值： Flux#single(T)"],["body","\n"],["body","没有值则取空：: Flux#singleOrEmpty"],["body","\n"],["h1","Handling Errors"],["body","\n"],["headingLink","创建错误序列"],["heading","创建错误序列"],["body","\n"],["headingLink","替换成错误序列"],["heading","替换成错误序列"],["body","\n"],["body",".concat(Flux.error(e))"],["body","\n"],["body",".then(Mono.error(e))"],["body","\n"],["headingLink","元素间隔之间发出超时"],["heading","元素间隔之间发出超时"],["body","\n"],["body","timeout (Flux|Mono)"],["body","\n"],["headingLink","懒加载异常"],["heading","懒加载异常"],["body","\n"],["body","error(Supplier<Throwable>) (Flux|Mono)"],["body","\n"],["headingLink","trycatch"],["heading","trycatch"],["body","\n"],["headingLink","抛出异常"],["heading","抛出异常"],["body","\n"],["body","throwing: error (Flux|Mono)"],["body","\n"],["headingLink","catch异常"],["heading","catch异常"],["body","\n"],["body","返回默认值"],["body","\n"],["body","onErrorReturn (Flux|Mono)"],["body","\n"],["body","返回其他序列"],["body","\n"],["body","onErrorResume (Flux|Mono)"],["body","\n"],["body","重新抛出异常"],["body","\n"],["body",".onErrorMap(t → new RuntimeException(t)) (Flux|Mono)"],["body","\n"],["headingLink","finally块"],["heading","finally块"],["body","\n"],["body","doFinally (Flux|Mono)"],["body","\n"],["headingLink","使用-try-with-resource"],["heading","使用 try-with-resource"],["body","\n"],["body","using (Flux|Mono) factory method"],["body","\n"],["headingLink","从异常中恢复"],["heading","从异常中恢复"],["body","\n"],["headingLink","回滚默认值"],["heading","回滚默认值"],["body","\n"],["body","返回值：onErrorReturn (Flux|Mono)"],["body","\n"],["body","返回新的Publisher： Flux#onErrorResume and Mono#onErrorResume"],["body","\n"],["headingLink","重试"],["heading","重试"],["body","\n"],["body","简单次数重试"],["body","\n"],["body","retry() (Flux|Mono), retry(long) (Flux|Mono)"],["body","\n"],["body","通过 companion Flux 控制重试"],["body","\n"],["body","retryWhen (Flux|Mono)"],["body","\n"],["body","…using a standard backoff strategy (exponential backoff with jitter): retryWhen(Retry.backoff(…)) (Flux|Mono) (see also other factory methods in Retry)"],["body","\n"],["headingLink","处理背压错误"],["heading","处理背压错误"],["body","\n"],["body","从上游请求最大值，并且下游未产生足够请求时"],["body","\n"],["headingLink","抛出指定异常"],["heading","抛出指定异常"],["body","\n"],["body","by throwing a special IllegalStateException: Flux#onBackpressureError"],["body","\n"],["headingLink","抛出过量异常"],["heading","抛出过量异常"],["body","\n"],["body","by dropping excess values: Flux#onBackpressureDrop"],["body","\n\n"],["body","…except the last one seen: Flux#onBackpressureLatest"],["body","\n\n"],["headingLink","缓存过量异常"],["heading","缓存过量异常"],["body","\n"],["body","by buffering excess values (bounded or unbounded): Flux#onBackpressureBuffer"],["body","\n"],["body","如果缓存区满了："],["body","\n\n"],["body","…and applying a strategy when bounded buffer also overflows: Flux#onBackpressureBuffer with a BufferOverflowStrategy"],["body","\n\n"],["h1","Working with Time"],["body","\n"],["headingLink","测量元素产生的时间"],["heading","测量元素产生的时间"],["body","\n"],["headingLink","最精确"],["heading","最精确"],["body","\n"],["body","timed"],["body","\n"],["headingLink","从上次-onnext-距离本次-onnext-时间"],["heading","从上次 onNext 距离本次 onNext 时间"],["body","\n"],["body","Timed#elapsed() for Duration since last onNext"],["body","\n"],["headingLink","返回--epoch-timestamp"],["heading","返回  epoch timestamp"],["body","\n"],["body","(milliseconds resolution) ：Timed#timestamp() for Instant "],["body","\n"],["headingLink","返回自订阅以来的时间"],["heading","返回自订阅以来的时间"],["body","\n"],["body","Timed#elapsedSinceSubcription() for Duration since subscription (rather than last onNext)"],["body","\n"],["headingLink","超时"],["heading","超时"],["body","\n"],["body","I want my sequence to be interrupted if there is too much delay between emissions: timeout (Flux|Mono)"],["body","\n"],["headingLink","周期定时"],["heading","周期定时"],["body","\n"],["body","I want to get ticks from a clock, regular time intervals: Flux#interval"],["body","\n"],["headingLink","延迟"],["heading","延迟"],["body","\n"],["headingLink","单值延迟"],["heading","单值延迟"],["body","\n"],["body","I want to emit a single 0 after an initial delay: static Mono.delay."],["body","\n"],["headingLink","多值延迟"],["heading","多值延迟"],["body","\n"],["body","between each onNext signal: Mono#delayElement, Flux#delayElements"],["body","\n"],["headingLink","订阅延迟"],["heading","订阅延迟"],["body","\n"],["body","before the subscription happens: delaySubscription (Flux|Mono)"],["body","\n"],["h1","Splitting a Flux"],["body","\n"],["headingLink","将-flux-拆分成-fluxflux"],["heading","将 Flux 拆分成 Flux<Flux"],["body","\n"],["headingLink","按照-size拆分"],["heading","按照 size拆分"],["body","\n"],["body","window(int)"],["body","\n"],["headingLink","每次窗口丢弃大小"],["heading","每次窗口丢弃大小"],["body","\n"],["body","window(int, int)"],["body","\n"],["body","一般来说：maxSize == skipSize "],["body","\n"],["body","如果 maxSize> skipSize 则元素会重叠"],["body","\n"],["body","如果 maxSize< skipSize  则会跳过元素"],["body","\n"],["headingLink","超时窗口"],["heading","超时窗口"],["body","\n"],["body","通过元素产生的延迟将 元素划分"],["body","\n"],["headingLink","每次超时窗口丢弃大小"],["heading","每次超时窗口丢弃大小"],["body","\n"],["body","…with overlapping or dropping windows: window(Duration, Duration)"],["body","\n"],["headingLink","计数或超时"],["heading","计数或超时"],["body","\n"],["body","当计数达到或超时过去时，窗口关闭"],["body","\n"],["body","windowTimeout(int, Duration)"],["body","\n"],["headingLink","条件拆分"],["heading","条件拆分"],["body","\n"],["body","每当返回true时新开一个窗口： windowUntil"],["body","\n"],["body","每当返回false时新开一个窗口：windowWhile "],["body","\n"],["headingLink","通过-publisher控制"],["heading","通过 Publisher控制"],["body","\n"],["body","通过元素发出之间的时间间隔 拆分： window(Publisher)"],["body","\n"],["body","driven by an arbitrary boundary represented by onNexts in a control Publisher: window(Publisher), windowWhen"],["body","\n"],["headingLink","将fluxt-拆分成-fluxcollectiont"],["heading","将Flux<T> 拆分成 Flux<Collection<T>"],["body","\n"],["headingLink","拆分成list"],["heading","拆分成List"],["body","\n"],["body","大小边界： buffer(int)"],["body","\n"],["body","大小边界丢弃： buffer(int, int)"],["body","\n"],["body","超时边界： buffer(Duration)"],["body","\n"],["body","超时边界丢弃： buffer(Duration, Duration)"],["body","\n"],["body","大小与超时：bufferTimeout(int, Duration)"],["body","\n"],["body","直到满足条件边界： bufferUntil(Predicate)"],["body","\n"],["body","Publisher边界：buffer(Publisher), bufferWhen"],["body","\n"],["body","自定义边界集合： buffer(int, Supplier)"],["body","\n"],["headingLink","同一性质元素放置在同一个flux"],["heading","同一性质元素放置在同一个Flux"],["body","\n"],["body","groupBy(Function)  返回 Flux<GroupedFlux<K, T>"],["body","\n"],["h1","Going Back to the Synchronous World"],["body","\n"],["body","Note: all of these methods except Mono#toFuture will throw an UnsupportedOperatorException if called from within a Scheduler "],["body","\n"],["body","marked as \"non-blocking only\" (by default parallel() and single())."],["body","\n"],["headingLink","阻塞直到获取第一个元素"],["heading","阻塞直到获取第一个元素"],["body","\n"],["body","Flux#blockFirst"],["body","\n"],["body","…with a timeout: Flux#blockFirst(Duration)"],["body","\n"],["body","对于 Mono"],["body","\n"],["body","Mono#block"],["body","\n"],["body","…with a timeout: Mono#block(Duration)"],["body","\n"],["headingLink","阻塞直到获取最后一个元素"],["heading","阻塞直到获取最后一个元素"],["body","\n"],["body","Flux#blockLast"],["body","\n"],["body","…with a timeout: Flux#blockLast(Duration)"],["body","\n"],["headingLink","同步的切换到迭代器"],["heading","同步的切换到迭代器"],["body","\n"],["body","Flux#toIterable"],["body","\n"],["headingLink","同步的切换到-stream"],["heading","同步的切换到 Stream"],["body","\n"],["body","Flux#toStream"],["body","\n"],["headingLink","转换成completablefuture"],["heading","转换成CompletableFuture"],["body","\n"],["body","Mono#toFuture"],["body","\n"],["h1","Multicasting a Flux to several Subscribers"],["body","\n"],["body","一个发布者 对 多个 订阅者"],["body","\n"],["headingLink","连接多个订阅者"],["heading","连接多个订阅者"],["body","\n\n"],["body","调用 publish()  返回 ConnectableFlux"],["body","\n"],["body","调用 subscribe 订阅多个订阅者"],["body","\n"],["body","调用  connect 触发 资源"],["body","\n"],["body","调用 share 立即触发资源"],["body","\n"],["body","指定数量的注册器达到后自动 connect .publish().autoConnect(n) "],["body","\n"],["body","and automatically connect and cancel the source when subscribers go above/below the threshold: .publish().refCount(n)"],["body","\n"],["body","…but giving a chance for new subscribers to come in before cancelling: .publish().refCount(n, Duration)"],["body","\n\n"],["headingLink","缓存数据并重放"],["heading","缓存数据并重放"],["body","\n"],["headingLink","缓存n个数据"],["heading","缓存n个数据"],["body","\n"],["body","cache(int)"],["body","\n"],["headingLink","缓存指定时间段的元素"],["heading","缓存指定时间段的元素"],["body","\n"],["body","cache(Duration)"],["body","\n"],["body","个数限制：cache(int, Duration)"],["body","\n"],["body","不立即触发source： Flux#replay (returns a ConnectableFlux)"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/ProjectReactor/README.html"],["title","ProjectReactor - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","介绍"],["body","\n"],["body","Reactor 是一个 JVM上 完全 非阻塞的 响应式 编程框架，它有着高效的 需求管理（以管理\"背压\"的形式），它直接与 Java 8 功能 API 集成，特别是 CompletableFuture Stream Duration ，它提供可组合的异步序列 API Flux (for [N] elements)   Mono (for [0|1] elements) "],["body","\n"],["body","广泛实现了  Reactive Streams  规范"],["body","\n"],["body","Reactor-netty 还支持 非阻塞的 跨进程 通信，适合微服务架构，Reactor Netty 为 HTTP 包括 websockets TCP, and UDP  提供   backpressure-ready engines  完全支持反应编码和解码。"],["body","\n"],["headingLink","prerequisites"],["heading","Prerequisites"],["body","\n"],["headingLink","传递依赖引用orgreactivestreams"],["heading","传递依赖引用org.reactivestreams"],["body","\n"],["body","It has a transitive dependency on org.reactivestreams:reactive-streams:1.0.3."],["body","\n"],["headingLink","依赖java18"],["heading","依赖Java1.8"],["body","\n"],["headingLink","understanding-the-bom-and-versioning-scheme"],["heading","Understanding the BOM and versioning scheme"],["body","\n"],["body","BOM模型"],["body","\n"],["body","Reactor 3 采用 BOM 模型  （since reactor-core 3.0.4, with the Aluminium release train）"],["body","\n"],["body","此精心策划的列表将旨在很好地协同工作的器件组。"],["body","\n"],["body","Note the versioning scheme has changed between 3.3.x and 3.4.x (Dysprosium and Europium)."],["body","\n"],["body","版本命名规范"],["body","\n"],["body","构件采用 MAJOR.MINOR.PATCH-QUALIFIER  命名版本"],["body","\n"],["body","BOM  is versioned using a CalVer inspired scheme of YYYY.MINOR.PATCH-QUALIFIER, "],["body","\n\n"],["body","MAJOR Reactor的 generation, 每一代都能给项目结构带来根本性的变化 (这可能意外着 更重大的迁移工作)"],["body","\n"],["body","YYYY is the year of the first GA release in a given release cycle (like 3.4.0 for 3.4.x)"],["body","\n"],["body",".MINOR is a 0-based number incrementing with each new release cycle(是每个新发布版本周期的基于 0 的数字增量)\n\n"],["body","就构建而言，它通常反映了更广泛的变化，可以表明只需要 适度的迁移工作"],["body","\n"],["body","在 BOM 的情况下，它允许辨别 同一年的两个 首次发布周期"],["body","\n\n"],["body","\n"],["body",".PATCH 是每个服务版本的基于 0 的数字增量"],["body","\n"],["body","-QUALIFIER 是文本限定符，在 GA 版本的情况下省略（见下文）"],["body","\n\n"],["body","遵循该约定的第一个发布周期是 2020.0.x 研发代码 Europium 该计划使用以下限定符（注意使用破折号分割），顺序如下："],["body","\n\n"],["body","-M1..-M9: 里程碑（我们预计每次服务发布不超过 9 个）"],["body","\n"],["body","-RC1..-RC9: 发布候选项（我们预计每个服务版本不会超过 9 个）"],["body","\n"],["body","-SNAPSHOT: snapshots"],["body","\n"],["body","no qualifier for GA releases"],["body","\n\n"],["body","快照在上面的顺序中显示得更高，因为从概念上讲，它们总是任何给定的 PATCH 的\"最新鲜的预发布\"。"],["body","\n"],["body","即使补丁周期中的第一个部署的工件永远是 - 快照"],["body","\n"],["body","类似命名但更新的快照也将在例如之后发布。例如：里程碑或 发布候选者之间。"],["body","\n"],["body","版本周期代号"],["body","\n"],["body","每个版本周期也给出一个代号，与以前的基于代号的方案保持连续性"],["body","\n"],["body","可用于更非正式地引用它（比如在讨论、博客文章等。）"],["body","\n"],["body","代号代表传统上 MAJOR.MINOR"],["body","\n"],["body","它们（大部分）来自 Periodic Table of Elements,以增加字母顺序。"],["body","\n"],["body","Up until Dysprosium the BOM 使用  release train 模式： codename跟着 qualifier,qualifier略有不同"],["body","\n"],["body","For example: "],["body","\n"],["body","Aluminium-RELEASE (first GA release, would now be something like YYYY.0.0), "],["body","\n"],["body","Bismuth-M1, Californium-SR1 (service release would now be something like YYYY.0.1), "],["body","\n"],["body","Dysprosium-RC1, Dysprosium-BUILD-SNAPSHOT (after each patch, we’d go back to the same snapshot version. would now be something like YYYY.0.X-SNAPSHOT so we get 1 snapshot per PATCH)"],["body","\n"],["h1","获取Reactor"],["body","\n"],["body","使用 Reactor最简单的方法是 使用 BOM 并将相关的依赖 添加到 您的项目中"],["body","\n"],["body","注意：添加此类依赖时，必须省略版本，以便从 BOM 获取版本"],["body","\n"],["body","As of this version (reactor-core 3.4.10), the latest stable BOM in the associated release train line is 2020.0.11, "],["body","\n"],["body","which is what is used in snippets below. There might be newer versions since then (including snapshots, milestones and new release train lines), see https://projectreactor.io/docs for the latest artifacts and BOMs."],["body","\n"],["headingLink","maven"],["heading","Maven"],["body","\n"],["body","引入BOM"],["body","\n"],["body","<dependencyManagement> \n    <dependencies>\n        <dependency>\n            <groupId>io.projectreactor</groupId>\n            <artifactId>reactor-bom</artifactId>\n            <version>2020.0.11</version>\n            <type>pom</type>\n            <scope>import</scope>\n        </dependency>\n    </dependencies>\n</dependencyManagement>\n"],["body","\n"],["body","引入核心依赖"],["body","\n"],["body","<dependencies>\n    <dependency>\n        <groupId>io.projectreactor</groupId>\n        <artifactId>reactor-core</artifactId> \n        \n    </dependency>\n    <dependency>\n        <groupId>io.projectreactor</groupId>\n        <artifactId>reactor-test</artifactId> \n        <scope>test</scope>\n    </dependency>\n</dependencies>\n"],["body","\n"],["headingLink","milestones-and-snapshots"],["heading","Milestones and Snapshots"],["body","\n"],["body","里程碑和开发人员预览 通过 Spring Milestones 仓库 分发，而不是 Maven Central."],["body","\n"],["body","要将其添加到构建配置文件，请使用以下片段："],["body","\n"],["body","<repositories>\n\t<repository>\n\t\t<id>spring-milestones</id>\n\t\t<name>Spring Milestones Repository</name>\n\t\t<url>https://repo.spring.io/milestone</url>\n\t</repository>\n</repositories>\n\n<repositories>\n\t<repository>\n\t\t<id>spring-snapshots</id>\n\t\t<name>Spring Snapshot Repository</name>\n\t\t<url>https://repo.spring.io/snapshot</url>\n\t</repository>\n</repositories>\n"],["body","\n"],["headingLink","support-and-policies"],["heading","Support and policies"],["body","\n"],["headingLink","stack-overflow-first"],["heading","Stack Overflow first"],["body","\n"],["body","Search Stack Overflow first; discuss if necessary"],["body","\n"],["body","使用我们为此目的监控的标签中的相关标签："],["body","\n\n"],["body","reactor-netty for specific reactor-netty questions"],["body","\n"],["body","project-reactor for generic reactor questions"],["body","\n\n"],["body","如果您喜欢实时讨论，我们还有几个 Gitter 频道："],["body","\n\n"],["body","reactor 是历史上最活跃的一个, 社区的大部分可以帮助"],["body","\n"],["body","reactor-core is intended for more advanced pinpointed discussions around the inner workings of the library"],["body","\n"],["body","reactor-netty is intended for netty-specific questions"],["body","\n\n"],["body","有关潜在的其他信息来源，请参阅每个项目的 README。"],["body","\n"],["body","我们通常不鼓励打开 Github 问题的问题， 赞成上述两个渠道。"],["body","\n"],["headingLink","our-policy-on-deprecations"],["heading","Our policy on deprecations"],["body","\n"],["body","在处理弃用时，如果提供 A .B.C 版本，我们将确保："],["body","\n\n"],["body","\n"],["body","deprecations introduced in version A.B.0 will be removed no sooner than version A.B+1.0"],["body","\n"],["body","A.B.0的弃用  在 A.B+1.0 最早移除"],["body","\n"],["body","\n"],["body","\n"],["body","deprecations introduced in version A.B.1+ will be removed no sooner than version A.B+2.0"],["body","\n"],["body","A.B.1+的 弃用 在A.B+2 最早移除"],["body","\n"],["body","\n"],["body","\n"],["body","we’ll strive to mention the following in the deprecation javadoc:"],["body","\n\n"],["body","target minimum version for removal：目标弃用版本"],["body","\n"],["body","pointers to replacements for the deprecated method：替代方法"],["body","\n"],["body","version in which method was deprecated：声明 国企的版本"],["body","\n\n"],["body","\n\n"],["headingLink","active-development"],["heading","Active Development"],["body","\n"],["body","The following table summarises the development status of the various Reactor release trains:"],["body","\n"],["body","Version"],["body","Supported"],["body","\n"],["body","2020.0.0 (codename Europium) (core 3.4.x, netty 1.0.x)"],["body",":white_check_mark:"],["body","\n"],["body","Dysprosium Train (core 3.3.x, netty 0.9.x)"],["body",":white_check_mark:"],["body","\n"],["body","Califonium and below (core < 3.3, netty < 0.9)"],["body",":x:"],["body","\n"],["body","Reactor 1.x and 2.x Generations"],["body",":x:"],["body","\n\n\n"],["h1","响应式编程介绍"],["body","\n"],["body","Reactor 是反应编程范式的 实现：可以概括为"],["body","\n"],["body","\n"],["body","响应式编程 是一个 异步编程范式，关注 数据流的 以及 变化的 传播"],["body","\n"],["body","这意味着 编程语言 轻松表达 静态 （例如 数据） 或者 动态（例如 事件产生器） 数据流 "],["body","\n"],["body","\n"],["body","作为响应式编程的第一步，微软在.NET生态系统中实现了 Reactive Extensions 库"],["body","\n"],["body","然后 Rxjava 在 Jvm 上实现了反应性编程 ，随着时间的推移，通过 Reactive Streams  的努力 实现了  Java的标准化, 这个规范为 JVM库  定义了 一系列接口 和 交互规则，这些接口已集成到 Java9的 flow 类"],["body","\n"],["body","响应式编程范式 通常是 作为面向对象语言中的 观察者模式的 扩展"],["body","\n"],["body","你还可以 将 主 反应式 流 模式 和 熟悉的 迭代器模式 比较，因为对于 Interable-Iterator 对  具有二元性。一个主要的区别是  迭代器是 拉模式，reactive streams是基于 推模式"],["body","\n"],["body","使用 迭代器 是一个 必不可少的 设计模式，即使 访问值的方法完全由 Iterable 负责"],["body","\n"],["body","事实上，它是 由 开发人员选择 何时 访问序列中的  next，在 reactive stream中 等价的  对 是 publisher -subscriber  但是  是由 Publisher  通知 订阅者 最新可用的值 ,这种 push aspect   被称为 reactive "],["body","\n"],["body","此外：应用 push值 的 操作 是 声明式 而不是 命令式，程序员声明计算逻辑。而不是准确描述 其控制流"],["body","\n"],["body","除了推值外， 错误处理，完成后处理也以明确的方式定义"],["body","\n"],["body","A Publisher can push new values to its Subscriber (by calling onNext) but can also signal an error (by calling onError) or completion (by calling onComplete). Both errors and completion terminate the sequence. This can be summed up as follows:"],["body","\n"],["body","Publisher 能够 推 新值 给 它的Subscriber  （通过调用 onNext） 但是 也可以  发出 Error信号（通过 调用 onError） 或者 完成 （通过调用 onComplete）"],["body","\n"],["body","error 或 complete 都会 终止 序列 ，这可以概括为"],["body","\n"],["body","onNext x 0..N [onError | onComplete]\n"],["body","\n"],["headingLink","blocking-can-be-wasteful"],["heading","Blocking Can Be Wasteful"],["body","\n"],["body","现在应用 可会有 大量并发用户 ，尽管 现代硬件能力 得到了长足的发展，现代软件的性能 仍然是一个关键问题"],["body","\n"],["body","大致而言，有两种方法可以改进程序的性能："],["body","\n\n"],["body","parallelize  使用更多的线程和更多的硬件资源。"],["body","\n"],["body","seek more efficiency 当前资源的使用方式"],["body","\n\n"],["body","通常，Java开发人员使用 阻塞式编程，这种做法 存在性能 瓶颈，然后引入额外线程 ，运行 类似的 阻塞代码 "],["body","\n"],["body","这种资源利用规模的扩大 可以迅速 引入 数据竞争 和并发问题"],["body","\n"],["body","更遭的是，阻塞 浪费资源,如果 你仔细观察 只要一个程序 涉及一些延迟 (特别是 I/O 例如数据库请求 或网络请求)"],["body","\n"],["body","资源被浪费了，因为很多线程处于闲置状态，等待数据"],["body","\n"],["body","因此 并发化并不是一颗银弹，有必要 利用硬件的 全部能力"],["body","\n"],["headingLink","asynchronicity-to-the-rescue"],["heading","Asynchronicity to the Rescue"],["body","\n"],["body","\n"],["body","异步节省资源"],["body","\n"],["body","\n"],["body","通过编写 异步 非阻塞代码，您可以让执行 切换到 使用相同基础资源的已活动任务，并在 异步处理完成后返回 当前 过程"],["body","\n"],["body","但是：如何在JVM上生成 异步代码呢，Java提供了两种 异步编程模式"],["body","\n"],["body","Callbacks："],["body","\n"],["body","异步方法没有返回值，需要有额外的回调参数"],["body","\n"],["body","Future"],["body","\n"],["body","异步方法立即 返回 Future<T>"],["body","\n"],["body","异步计算过程返回 T，通过Future对象包装"],["body","\n"],["body","该值不可立即获得，对象可以进行 polled，直到该值可用。"],["body","\n"],["body","例如运行：ExecutorService  Callable<T> tasks  返回 Future队形"],["body","\n"],["body","这些技术够好吗？并非针对每个用例，两种方法都有局限性。"],["body","\n"],["body","回调很难组合在一起，导致难以读取 和维护 代码（known as “Callback Hell”）"],["body","\n"],["body","考虑一个例子：展示来自 用户UI上的 TOP 5 的收藏夹 或者如果没有收藏夹就建议"],["body","\n"],["body","这需求经过三项服务"],["body","\n"],["body","第一个提供 favorite IDs"],["body","\n"],["body","第二个取 favorite details"],["body","\n"],["body","第三个 提供 建议"],["body","\n"],["body","传统回调"],["body","\n"],["body","这是很多代码，它有点难以阅读，具有重复部分"],["body","\n"],["body","userService.getFavorites(userId, new Callback<List<String>>() { \n  public void onSuccess(List<String> list) { \n    if (list.isEmpty()) { \n      suggestionService.getSuggestions(new Callback<List<Favorite>>() {\n        public void onSuccess(List<Favorite> list) { \n          UiUtils.submitOnUiThread(() -> { \n            list.stream()\n                .limit(5)\n                .forEach(uiList::show); \n            });\n        }\n\n        public void onError(Throwable error) { \n          UiUtils.errorPopup(error);\n        }\n      });\n    } else {\n      list.stream() \n          .limit(5)\n          .forEach(favId -> favoriteService.getDetails(favId, \n            new Callback<Favorite>() {\n              public void onSuccess(Favorite details) {\n                UiUtils.submitOnUiThread(() -> uiList.show(details));\n              }\n\n              public void onError(Throwable error) {\n                UiUtils.errorPopup(error);\n              }\n            }\n          ));\n    }\n  }\n\n  public void onError(Throwable error) {\n    UiUtils.errorPopup(error);\n  }\n});\n"],["body","\n"],["body","响应式"],["body","\n"],["body","userService.getFavorites(userId) \n           .flatMap(favoriteService::getDetails) \n           .switchIfEmpty(suggestionService.getSuggestions()) \n           .take(5) \n           .publishOn(UiUtils.uiThreadScheduler()) \n           .subscribe(uiList::show, UiUtils::errorPopup); \n"],["body","\n"],["body","如果你想确保在不到 800 毫秒内检索到最喜欢的 ID， 该怎么办？"],["body","\n"],["body","如果需要更长的时间，从缓存中获取它们？"],["body","\n"],["body","在基于回调的代码中，这是一项复杂的任务"],["body","\n"],["body","在 Reactor 中 它变得像在链条中添加超时操作员一样简单"],["body","\n"],["body","userService.getFavorites(userId)\n           .timeout(Duration.ofMillis(800)) \n           .onErrorResume(cacheService.cachedFavoritesFor(userId)) \n           .flatMap(favoriteService::getDetails) \n           .switchIfEmpty(suggestionService.getSuggestions())\n           .take(5)\n           .publishOn(UiUtils.uiThreadScheduler())\n           .subscribe(uiList::show, UiUtils::errorPopup);\n"],["body","\n"],["body","Future objects 比 回调要好，但是 不能很好的组合，另外 Java8的 CompletableFuture  做出了改善"],["body","\n"],["body","将多个Future对象协调在一起是可行的，但并不容易。此外，Future还有其他问题："],["body","\n\n"],["body","get方法会阻塞"],["body","\n"],["body","不支持懒 计算"],["body","\n"],["body","缺乏对 多个值的支持 和高级错误处理"],["body","\n\n"],["body","考虑另一个例子："],["body","\n"],["body","我们得到一个ID列表，我们希望从中获取一个名称和一个统计数据，并结合这些配对，所有这些都是异步的"],["body","\n"],["body","CompletableFuture<List<String>> ids = ifhIds(); \n\nCompletableFuture<List<String>> result = ids.thenComposeAsync(l -> { \n\tStream<CompletableFuture<String>> zip =\n\t\t\tl.stream().map(i -> { \n\t\t\t\tCompletableFuture<String> nameTask = ifhName(i); \n\t\t\t\tCompletableFuture<Integer> statTask = ifhStat(i); \n\n\t\t\t\treturn nameTask.thenCombineAsync(statTask, (name, stat) -> \"Name \" + name + \" has stats \" + stat); \n\t\t\t});\n\tList<CompletableFuture<String>> combinationList = zip.collect(Collectors.toList()); \n\tCompletableFuture<String>[] combinationArray = combinationList.toArray(new CompletableFuture[combinationList.size()]);\n\n\tCompletableFuture<Void> allDone = CompletableFuture.allOf(combinationArray); \n\treturn allDone.thenApply(v -> combinationList.stream()\n\t\t\t.map(CompletableFuture::join) \n\t\t\t.collect(Collectors.toList()));\n});\n\nList<String> results = result.join(); \nassertThat(results).contains(\n\t\t\"Name NameJoe has stats 103\",\n\t\t\"Name NameBart has stats 104\",\n\t\t\"Name NameHenry has stats 105\",\n\t\t\"Name NameNicole has stats 106\",\n\t\t\"Name NameABSLAJNFOAJNFOANFANSF has stats 121\");\n"],["body","\n"],["body","由于 Reactor拥有 更多 开箱即用的 组合操作，因此过程可以 简化如下"],["body","\n"],["body","Flux<String> ids = ifhrIds(); \n\nFlux<String> combinations =\n\t\tids.flatMap(id -> { \n\t\t\tMono<String> nameTask = ifhrName(id); \n\t\t\tMono<Integer> statTask = ifhrStat(id); \n\n\t\t\treturn nameTask.zipWith(statTask, \n\t\t\t\t\t(name, stat) -> \"Name \" + name + \" has stats \" + stat);\n\t\t});\n\nMono<List<String>> result = combinations.collectList(); \n\nList<String> results = result.block(); \nassertThat(results).containsExactly( \n\t\t\"Name NameJoe has stats 103\",\n\t\t\"Name NameBart has stats 104\",\n\t\t\"Name NameHenry has stats 105\",\n\t\t\"Name NameNicole has stats 106\",\n\t\t\"Name NameABSLAJNFOAJNFOANFANSF has stats 121\"\n);\n"],["body","\n"],["headingLink","from-imperative-to-reactive-programming"],["heading","From Imperative to Reactive Programming"],["body","\n"],["body","Reactive 库例如 Reactor 旨在 解决 经典异步方法的缺点 同时关注其他几个方面"],["body","\n\n"],["body","组合型跟可读性"],["body","\n"],["body","数据流动，丰富的操作方法"],["body","\n"],["body","懒加载"],["body","\n"],["body","被压：消费者向 生产者 发出 生产速率 过高的信号的能力"],["body","\n"],["body","高度抽象，高度价值 抽象   concurrency-agnostic"],["body","\n\n"],["headingLink","composability-and-readability"],["heading","Composability and Readability"],["body","\n"],["body","通过 可组合性，我们有能力能 协调多个 异步任务，我们使用 以前任务的结果输入到 后续的调用中 或者 我们可以 fork-join style 运行任务 ，此外在更高级的组件中，作为 离散组件  我们可以重用 异步任务 "],["body","\n"],["body","协调任务的能力与 可读性 和可维护性的代码 紧密结合"],["body","\n"],["body","随着异步 过程 层在数量和 复杂性上 都有所增加 "],["body","\n"],["body","能够编写 和阅读代码 变得越来越困难，正如所看到的  回调模型很简单 "],["body","\n"],["body","主要缺点之一是：回调地狱"],["body","\n"],["body","Reactor提供了丰富的选项组合，其中 代码反映了 抽象过程的组织，并且所有内容通常 保持在同一水平 （嵌套最小化）"],["body","\n"],["headingLink","the-assembly-line-analogy"],["heading","The Assembly Line Analogy"],["body","\n"],["body","\n"],["body","装配线类比"],["body","\n"],["body","\n"],["body","您可以将响应式应用程序 处理的数据 视为 通过装配线移动"],["body","\n"],["body","Reactor 既是 传送带 也是 工作站 ，原料 从源头（原始 Publisher ）倾泻而出 "],["body","\n"],["body","最终成为成品 准备将推给 消费者（订阅者）"],["body","\n"],["body","原材料 可以经历 各种转换 和其他中间步骤 或成为  将中间件聚合在一起的 大型装配线 的一部分 "],["body","\n"],["body","如果某时刻 出现故障 或阻塞 （业务 boxing 产品 花费很长的时间）"],["body","\n"],["body","负载严重的工作站 可以向上游发出信号，以限制原材料的流动"],["body","\n"],["headingLink","operators"],["heading","Operators"],["body","\n"],["body","Reactor中，操作就是工作站，每一个操作 都会 将行为添加到 Publisher 中"],["body","\n"],["body","并将前一步的 Publisher 包装成一个 新的 实例"],["body","\n"],["body","因此整个链条是相连的"],["body","\n"],["body","这样 数据源自 第一个 Publisher 沿着 链条向下移动，由每个链节点 转换，最终订阅者 完成了该过程，如果没有 Subscriber没有订阅 ，"],["body","\n"],["body","了解 operators 创建 新实例 帮助您 避免 常见的误区，这个误区 会导致您相信 一个操作 在链条中没有被应用"],["body","\n"],["body","虽然 Reactive Streams 规范 没有 规定操作 "],["body","\n"],["body","one of the best added values of reactive libraries, such as Reactor, is the rich vocabulary of operators that they provide. "],["body","\n"],["body","这些覆盖了很多面，从简单的 转换 和过滤 到复杂的 编排 和错误处理"],["body","\n"],["headingLink","nothing-happens-until-you-subscribe"],["heading","Nothing Happens Until You subscribe()"],["body","\n"],["body","In Reactor, 当你 编写 Publisher 链时，默认情况下 数据不会 泵入该链条"],["body","\n"],["body","相反：您可以创建 异步过程的 抽象描述 （这有助于重用和组合）"],["body","\n"],["body","通过订阅的 行为 您将 发布者 与 订阅者 联系起来 ，从而触发整个链中的数据流。"],["body","\n"],["body","这是通过 从上游 传播的 Subscriber 的单个 request请求 信号内部实现的，一直传回源  发布者"],["body","\n"],["headingLink","backpressure"],["heading","Backpressure"],["body","\n"],["body","上游传播信号也用于实现背压，我们在装配线类比中 描述为当 工作站比上游处理得慢时，向线路发送发聩信号"],["body","\n"],["body","Reactive Streams specification定义的 真实机制 非常接近类比"],["body","\n"],["body","订阅者可以 在 无限制 的模式 工作 ，并让源 以最快的 速度 推送数据"],["body","\n"],["body","或者 它可以使用 请求 机制 向 源 发出信号，表明 它已准备好 处理最多 n个元素"],["body","\n"],["body","中间操作 同样可以更改 在途请求，想象 一个缓冲操作员将元素 分十批分组 "],["body","\n"],["body","如果订阅者 请求一个缓冲 则 源可以生成 是个元素"],["body","\n"],["body","一些操作 同样实现了 预取 策略 这避免了 request(1) 的 round-trips "],["body","\n"],["body","如果在要求 之前 生产 元素不是 太昂贵  则是有益的"],["body","\n"],["body","这将 推送模型 将 转化为  push-pull hybrid ，如果上游随时可用，下游可以从上游拉n元素"],["body","\n"],["body","如果 元素尚未准备好 ，他们一产生就会 被 上游推"],["body","\n"],["headingLink","hot-vs-cold"],["heading","Hot vs Cold"],["body","\n"],["body","Rx 家族的 反应式库 区分了 两大类反应式 序列库 hot and cold."],["body","\n"],["body","这种区别 主要与  reactive stream 如何与 subscribers 相关联起来"],["body","\n\n"],["body","\n"],["body","A Cold 序列 为每一个 Subscriber开启一个新的 包括数据源. 如果源包住Http调用 则为 每个订阅提出 新的 HTTP 请求"],["body","\n"],["body","\n"],["body","\n"],["body","hot 序列 不会为 每个 subscriber 从头开始"],["body","\n"],["body","收到 他们订阅后 ， 延迟订阅 者 会发出的信号 "],["body","\n"],["body","但是：请注意，某些热 reactive stream 可以完全 或部分的缓存或重播 安排的历史"],["body","\n"],["body","从一般角度 来看，当没有subscriber监听时   热序列 可以 发出 信号（订阅前不做任何事的 规则的 例外）"],["body","\n"],["body","\n\n"],["h1","快速开始"],["body","\n"],["body","Flux<T>  是 Reactive Streams 体系中的  Publisher，它有许多 operator ,可用于生成，转换或编排Flux序列"],["body","\n"],["body","它可以发出0到n个元素（onNext事件），要么完成或者出错（onComplete和onError终止事件）。\n如果未触发任何终止事件，则 Flux是无限的。"],["body","\n\n"],["body","Flux上的静态工厂允许创建源，或从几种回调类型生成 Publisher"],["body","\n"],["body","实例方法，operators,使您可以构建异步处理管道，该管道将产生异步序列"],["body","\n"],["body","每个Flux＃subscribe()或multicasting (多播操作)（例如Flux#publish和Flux#publishNext）都会具体化管道的专用实例并触发其中的数据流。"],["body","\n\n"],["headingLink","订阅"],["heading","订阅"],["body","\n"],["headingLink","订阅-1"],["heading","订阅"],["body","\n"],["body","subscribe(Consumer<? super T> consumer,\n          Consumer<? super Throwable> errorConsumer,\n          Runnable completeConsumer,\n          Consumer<? super Subscription> subscriptionConsumer); \n"],["body","\n"],["body","处理值 以及 异常 或者成功，同样 触发订阅事件的处理"],["body","\n"],["headingLink","取消订阅"],["heading","取消订阅"],["body","\n"],["body","\n"],["body","disposable"],["body","\n"],["body","\n"],["body","disposable"],["body","\n"],["body","所有这些基于 lambda 的 subscribe（）变体都具有Disposable返回类型。\n在这种情况下，Disposable接口表示可以通过调用其dispose（）方法来取消订阅的事实。"],["body","\n"],["body","对于 Flux or Mono，取消 是 信号源 应停止产生元素的信号。\n但是，并不能保证立即执行：某些源可能会产生如此快的元素，以至于甚至在接收到取消指令之前它们也可以完成"],["body","\n"],["body","swap"],["body","\n"],["body","Disposables类中提供了一些有关Disposable的实用程序。\n其中，Disposables.swap（）创建一个Disposable包装器，使您可以原子地取消和替换一个具体的Disposable。"],["body","\n"],["body","例如，这在UI场景中很有用，在UI场景中，您希望在用户单击按钮时取消请求并将其替换为新的请求。\n关闭 包装器本身也会 关闭 它\n这样做会 处理 当前的 具体价值 以及将来所有尝试的替代产品。\n"],["body","\n"],["body","composite"],["body","\n"],["body","您可以收集多个Disposable（例如，与服务调用关联的多个进行中的请求），并在以后一次将所有这些都处置。\n在调用组合的dispose（）方法后，任何尝试添加另一个Disposable的尝试都会立即将其处置。"],["body","\n"],["body","BaseSubscriber"],["body","\n"],["body","额外的订阅方法，该方法更通用并且采用成熟的订阅服务器，而不是从一个lambda中组成一个。\n为了帮助编写这样的订阅服务器，我们提供了一个称为 BaseSubscriber 的可扩展类。"],["body","\n"],["body","BaseSubscriber（或其子类）的实例是一次性的，这意味着，"],["body","\n"],["body","如果BaseSubscriber 同时 订阅两个发布者，只有一个能成功，需要CAS 操作去 争抢，失败的则会自行 取消"],["body","\n"],["body","这是因为使用实例两次将违反“Reactive Stream”规则，即不得并行调用订阅服务器的onNext方法。"],["body","\n"],["headingLink","stepverifier"],["heading","StepVerifier"],["body","\n"],["body","\n"],["body","步骤验证器"],["body","\n"],["body","\n"],["body","使用 StepVerifier 来 定义一个测试单元 来检查 每个测试的结果"],["body","\n"],["body","这个类来自 reactor-test 构件，能够订阅任何 Publisher ，然后针对改序列 申明 一些列用户定义的 期望"],["body","\n"],["body","如果触发了任何与当前期望不符的事件，则StepVerifier将产生一个“ AssertionError”。"],["body","\n"],["body","您可以从静态工厂create获取StepVerifier的实例。它提供了一个DSL来设置数据部分的期望值，并以单个终端期望值（完成，错误，取消...）结束。"],["body","\n"],["body","获取到实例后，必须调用verify 方法，或者  结合 termination 期望和验证的快捷方式之一 例如：.verifyErrorMessage(String) "],["body","\n"],["body","StepVerifier.create(T<Publisher>).{expectations...}.verify()\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","18.响应式编程/README.html"],["title","响应式编程 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","什么是响应式编程"],["body","\n"],["body","异步回调地狱"],["body","\n"],["body","异步编程时，存在很多难题，比如典型的回调地狱(Callback Hell)，一层套一层的回调函数简直是个灾难，这里列出几个异步编程常见的问题："],["body","\n\n"],["body","超时、异常处理困难"],["body","\n"],["body","难以重构"],["body","\n"],["body","多个异步任务协同处理"],["body","\n\n"],["body","编程范式"],["body","\n"],["body","就像面向对象编程，函数式编程一样，反应式编程也是另一种编程范式，响应式编程是一种新的编程范式，可以使用 申明式代码，类似函数式编程来构建异步处理管道，这是一个基于事件的模型，在数据可用时将数据推送到使用者"],["body","\n"],["body","标准制定"],["body","\n"],["body","当越来越多的开发人员使用这种编程思想时，自然而然需要一套统一的规范，2013年底Netflix，Pivotal和Lightbend中的工程师们，启动了Reactive Streams项目，希望为异步流(包含背压)处理提供标准，它包括针对运行时环境（JVM和JavaScript）以及网络协议的工作。"],["body","\n"],["h1","概念"],["body","\n"],["body","处理数据流，特别是实时数据，其体积未预先确定"],["body","\n"],["body","最突出的问题：需要严格控制资源消耗，以防快速的 数据源 不会压倒流目的地"],["body","\n"],["body","Reactive Streams  的主要目标是 管理异步边界的流数据交换，可以认为是将元素传递到另一个线程或线程池，同时确保接收方不会被迫缓冲任意数量的数据"],["body","\n"],["body","换句话说，背压是此模型的一个组成部分，以便允许在线程之间进行调解的队列被绑定。"],["body","\n"],["body","The benefits of asynchronous processing would be negated if the backpressure signals were synchronous (see also the Reactive Manifesto), "],["body","\n"],["body","如果背压信号是同步的（另见[反应宣言]（http://reactivemanifesto.org/），异步处理的好处将不存在"],["body","\n"],["body","在 Reactive Streams 实现中，需要考虑到 完全的非阻塞和异步行为"],["body","\n"],["body","本规范的目的是允许创建许多符合的实现，通过遵守规则就能顺利地互操作，在整个流应用程序的处理图中保留上述优势和特征。"],["body","\n"],["body","应当指出，本规范不包括流操作的精确性质（转换、拆分、合并等）"],["body","\n"],["body","Reactive Streams 只关心 在不同的 API组件中 调解 数据流"],["body","\n"],["body","总之：Reactive Streams 是面向流的 JVM库的 标准和规范"],["body","\n\n"],["body","处理可能不受限制的元素数量"],["body","\n"],["body","顺序处理"],["body","\n"],["body","异步传递组件之间的元素，"],["body","\n"],["body","具有强制性的非阻塞背压"],["body","\n\n"],["body","反应流规范包括以下部分："],["body","\n"],["body","The API ：API组件定义"],["body","\n"],["body","The Technology Compatibility Kit (TCK) 是实现的符合性测试的标准测试套件"],["body","\n"],["body","只要符合 API 要求并通过 TCK 中的测试，实施可以自由实现规范未涵盖的其他功能。"],["body","\n"],["body","Reactive Streams API中仅仅包含了如下四个接口："],["body","\n"],["body","//发布者\npublic  interface  Publisher < T > {\n    public  void  subscribe（Subscriber <？super  T >  s）;\n}\n//订阅者\npublic  interface  Subscriber < T > {\n    public  void  onSubscribe（Subscription  s）;\n    public  void  onNext（T  t）;\n    public  void  onError（Throwable  t）;\n    public  void  onComplete（）;\n}\n//表示Subscriber消费Publisher发布的一个消息的生命周期\npublic interface Subscription {\n    public void request(long n);\n    public void cancel();\n}\n//处理器，表示一个处理阶段，它既是订阅者也是发布者，并且遵守两者的契约\npublic interface Processor<T, R> extends Subscriber<T>, Publisher<R> {}\n"],["body","\n"],["body","背压(back-pressure)"],["body","\n"],["body","背压是从流体动力学中借用的类比, 在维基百科的定义是：抵抗所需流体通过管道的阻力或力。"],["body","\n"],["body","在软件环境中，可以调整定义：通过软件抵抗所需数据流的阻力或力量。"],["body","\n"],["body","解决问题"],["body","\n"],["body","背压是为了解决这个问题的：上游组件了过量的消息，导致下游组件无法及时处理，从而导致程序崩溃。"],["body","\n"],["body","对于正遭受压力的组件来说，无论是灾难性地失败，还是不受控地丢弃消息，都是不可接受的。既然它既不能应对压力，又不能直接做失败处理，那么它就应该向其上游组件传达其正在遭受压力的事实，并让它们降低负载。"],["body","\n"],["body","这种背压（back-pressure）是一种重要的反馈机制，使得系统得以优雅地响应负载，而不是在负载下崩溃。相反，如果下游组件比较空闲，则可以向上游组件发出信号，请求获得更多的调用。"],["body","\n"],["h1","事件发布"],["body","\n"],["body","Publisher 是潜在无限数量的序列元素的提供者，根据订阅者的需求发布这些元素。"],["body","\n"],["body","为了响应   Publisher.subscribe(Subscriber) 的呼叫，Subscriber上方法的可能调用顺序遵循以下协议"],["body","\n"],["body","onSubscribe onNext* (onError | onComplete)?\n"],["body","\n"],["body","This means that onSubscribe is always signalled, "],["body","\n\n"],["body","这意味着 onSubscribe 总是发出信号，"],["body","\n"],["body","然后是可能未绑定的\"OnNext\"信号（as requested by Subscriber）"],["body","\n"],["body","然后是 onError（如果出现故障）或 onComplete 信号（只要 Subscription 未取消时 且没有更多元素可用）。"],["body","\n\n"],["h1","与Java1.8、Java1.9的关系"],["body","\n"],["body","Reactive Streams不要求必须使用Java8，Reactive Streams也不是Java API的一部分。"],["body","\n"],["body","但是使用Java8中lambda表达式的存在，可以发挥Reactive Streams规范的强大特性，比如Reactive Streams的实现Project Reactor项目的当前版本，就要求最低使用Java1.8。"],["body","\n"],["h1","具体实现框架"],["body","\n"],["body","Reactive Streams的实现现在比较多了，David Karnok在Advanced Reactive Java这边文章中，将这些实现分解成几代，也可以侧面了解反应式编程的发展史。"],["body","\n"],["body","RxJava"],["body","\n"],["body","RxJava是ReactiveX项目中的Java实现。ReactiveX项目实现了很多语言，比如JavaScript，.NET（C＃），Scala，Clojure，C ++，Ruby，Python，PHP，Swift等。"],["body","\n"],["body","RxJava早于Reactive Streams规范。虽然RxJava 2.0+确实实现了Reactive Streams API规范，单使用的术语略有不同。"],["body","\n"],["body","Reactor"],["body","\n"],["body","Reactor是Pivotal提供的Java实现，它作为Spring Framework 5的重要组成部分，是WebFlux采用的默认反应式框架。"],["body","\n"],["body","Akka Streams"],["body","\n"],["body","Akka Streams完全实现了Reactive Streams规范，但Akka Streams API与Reactive Streams API完全分离。"],["body","\n"],["body","Ratpack"],["body","\n"],["body","Ratpack是一组用于构建现代高性能HTTP应用程序的Java库。Ratpack使用Java 8，Netty和Reactive原则。可以将RxJava或Reactor与Ratpack一起使用。"],["body","\n"],["body","Vert.x"],["body","\n"],["body","Vert.x是一个Eclipse Foundation项目，它是JVM的多语言事件驱动的应用程序框架。Vert.x中的反应支持与Ratpack类似。Vert.x允许我们使用RxJava或其Reactive Streams API的实现。"],["body","\n"],["body","互操作性"],["body","\n"],["body","在Reactive Streams之前，各种反应库无法实现互操作性。早期版本的RxJava与Project Reactor的早期版本不兼容。"],["body","\n"],["body","另外，反应式编程无法大规模普及，一个很重要的原因是并不是所有库都支持反应式编程，当一些类库只能同步调用时，就无法达到节约性能的作用了。"],["body","\n"],["body","Reactive Streams的推出统一了反应式编程的规范，并且已经被Java9集成。由此，不同的库可以互操作了，互操作性是一个重要的多米诺骨牌。"],["body","\n"],["body","例如，MongoDB实现了Reactive Streams驱动程序后，我们可以使用Reactor或RxJava来使用MongoDB中的数据"],["body","\n"],["h1","SPECIFICATION"],["body","\n"],["headingLink","publisher"],["heading","Publisher"],["body","\n"],["body","public interface Publisher<T> {\n    public void subscribe(Subscriber<? super T> s);\n}\n"],["body","\n"],["headingLink","onnext信号总数"],["heading","OnNext信号总数"],["body","\n"],["body","Publisher 向 Subscriber 发布的 OnNext 信号 总数 必须小于等于 该 Subscriber 的订阅要求的总数"],["body","\n"],["body","此规则的主要目的是表明：发布者不能发出比订阅者要求的更多的元素信号"],["body","\n"],["body","此规则有一个隐含但重要的后果：由于需求只有在收到需求后才能实现，因此请求元素和接收元素之间之间存在一种先发生的关系。"],["body","\n"],["headingLink","publisher-产生的信号总数"],["heading","Publisher 产生的信号总数"],["body","\n"],["body","Publisher 可能发出的 onNext 信号比请求的要少，并通过 调用 onComplete or onError 来终止 Subscription"],["body","\n"],["body","此规则的目的是要表明：Publisher 不能保证它 能够产生所需求的元素数量，他可能根本无法生产他们所有：它可能处于失败状态;它可能是空的或其他已经完成"],["body","\n"],["headingLink","信号触发的是串行的"],["heading","信号触发的是串行的"],["body","\n"],["body","onSubscribe, onNext, onError and onComplete signaled to a Subscriber MUST be signaled serially."],["body","\n"],["headingLink","publisher失败触发信号"],["heading","Publisher失败触发信号"],["body","\n"],["body","If a Publisher fails it MUST signal an onError."],["body","\n"],["body","此规则的目的是要明确说明，如果发布者发现无法继续订阅，则有责任通知其订阅者"],["body","\n"],["body","订阅者必须有机会清理资源或以其他方式处理  Publisher 的失败"],["body","\n"],["headingLink","publisher成功触发完成信号"],["heading","Publisher成功触发完成信号"],["body","\n"],["body","If a Publisher terminates successfully (finite stream) it MUST signal an onComplete."],["body","\n"],["body","此规则的目的是表明，发布者负责通知其订阅者，它已达到 terminal state ，订阅者可以根据此信息采取行动：清理资源"],["body","\n"],["headingLink","publisher失败或成功要取消订阅"],["heading","Publisher失败或成功要取消订阅"],["body","\n"],["body","如果\"发布者\"在\"订阅者\"上发出    onError or onComplete 的信号，则必须考虑取消\"订阅者\"的\"订阅\"。"],["body","\n"],["body","此规则的目的是确保订阅无论是否被取消，发布者都受到相同的对待"],["body","\n"],["headingLink","publisher处于终止时不在触发信号"],["heading","Publisher处于终止时不在触发信号"],["body","\n"],["body","Once a terminal state has been signaled (onError, onComplete) it is REQUIRED that no further signals occur."],["body","\n"],["body","此规则的目的是确保在Error和Complete上是发布者和订阅者对之间交互的最终状态"],["body","\n"],["headingLink","subscription被取消则不再接收信号"],["heading","Subscription被取消则不再接收信号"],["body","\n"],["body","If a Subscription is cancelled its Subscriber MUST eventually stop being signaled"],["body","\n"],["body","此规则的目的是确保发布者尊重订阅者在调用订阅时取消订阅的请求。最终的原因是，由于异步，信号可能会有传播延迟"],["body","\n"],["headingLink","subscriber的onsubscribe最先调用"],["heading","Subscriber的onSubscribe最先调用"],["body","\n"],["body","Publisher.subscribe方法,必须  在任何其他信号之前  调用 提供的  Subscriber 上的  onSubscribe 方法 ，MUST return normally"],["body","\n"],["body","如果提供的 Subscriber 是空 抛出 NPE给调用者"],["body","\n"],["body","对于所有其他情况，发出故障信号（或拒绝\"订阅者\"）的唯一合法方式是 调用 OnError (在调用 onSubscribe )"],["body","\n"],["body","此规则的目的是确保\"订阅\"  始终在任何其他信号之前发出信号，以便订阅者可以在收到信号时执行初始化逻辑。"],["body","\n"],["body","此外， \"订阅\" 最多只能调用一次"],["body","\n"],["body","如果提供的\"订阅者\"是\"空\"，除了向调用者 发出信号，别无他法，例如可能会抛出 NPE"],["body","\n"],["body","可能的情况：一个有状态的 Publisher  可能会不堪重负，受有限数量的基础资源限制用尽，或者处于 terminal state."],["body","\n"],["headingLink","publishersubscribe多次调用不同subscribe"],["heading","Publisher.subscribe多次调用不同Subscribe"],["body","\n"],["body","Publisher.subscribe 可以 随需 调用多次 但是每次必须与不同的  Subscriber"],["body","\n"],["body","此规则的目的是让\"订阅\"调用者 了解到：a generic Publisher and a generic Subscriber 不能支持多次 附加"],["body","\n"],["body","此外，它还要求无论 subscribe 的语义被调用多少次，都必须得到维护。"],["body","\n"],["headingLink","多个subscriber的支持"],["heading","多个Subscriber的支持"],["body","\n"],["body","A Publisher MAY support multiple Subscribers and decides whether each Subscription is unicast or multicast."],["body","\n"],["body","发布者可能支持多个 订阅者，并决定每个订阅 是单波还是 多播"],["body","\n"],["body","此规则的目的是让发布者实现灵活决定他们将支持多少（如果有的话）订阅者，以及如何分发元素"],["body","\n"],["headingLink","subscriber"],["heading","Subscriber"],["body","\n"],["body","public interface Subscriber<T> {\n    public void onSubscribe(Subscription s);\n    public void onNext(T t);\n    public void onError(Throwable t);\n    public void onComplete();\n}\n"],["body","\n"],["headingLink","subscriber-通过request发出信号接收请求"],["heading","Subscriber 通过request发出信号接收请求"],["body","\n"],["body","Subscriber 必须通过  Subscription.request(long n) 发出 信号需求以 接收 onNext signals"],["body","\n"],["body","此规则的目的是确定 Subscriber  有责任决定  何时以及能够和愿意接收多少元素"],["body","\n"],["body","为避免重新加入订阅方法导致信号重新订购，"],["body","\n"],["body","强烈建议同步订阅者实现在任何信号处理结束时调用订阅方法。"],["body","\n"],["body","建议订阅者请求其 能够处理的内容的上限，因为一次只请求一个元素会导致固有的低效\"停止和等待\"协议"],["body","\n"],["headingLink","建议使用异步处理信号"],["heading","建议使用异步处理信号"],["body","\n"],["body","如果\"订阅者\"怀疑其处理信号会对其\"发布者\"的责任产生负面影响，则建议其异步发送信号。"],["body","\n"],["body","此规则的意图是，订阅者不应从执行角度阻止 发布者的 进程"],["body","\n"],["body","换句话说：订阅者不应使发布者无法接收 CPU 周期。"],["body","\n"],["headingLink","终止状态的信号中-不应该调发布订阅中的方法"],["heading","终止状态的信号中 不应该调发布订阅中的方法"],["body","\n"],["body","Subscriber.onComplete() and Subscriber.onError(Throwable t) MUST NOT call any methods on the Subscription or the Publisher."],["body","\n"],["body","此规则的目的是防止在处理完成信号期间 避免 发布者、订阅、订阅者 之间的出现循环 或者 竞争"],["body","\n"],["headingLink","收到终止信号后必须考虑取消状态"],["heading","收到终止信号后必须考虑取消状态"],["body","\n"],["body","Subscriber.onComplete() and Subscriber.onError(Throwable t) MUST consider the Subscription cancelled after having received the signal"],["body","\n"],["body","此规则的目的是：确保 Subscribers 尊重 Publisher的  terminal state 信号，一旦 收到 onComplete onError  信号，一个订阅过程 就无效了"],["body","\n"],["headingLink","阻止多个发布者订阅同一个订阅者"],["heading","阻止多个发布者订阅同一个订阅者"],["body","\n"],["body","在 onSubscribe 信号之后， 在一个给定的 Subscription中 ，如果已经存在一个 活跃的 Subscription 则 Subscriber 必须 调用  Subscription.cancel() "],["body","\n"],["body","此规则的目的是防止两个或更多单独的发布者尝试与同一订阅者进行交互"],["body","\n"],["body","Enforcing this rule means that resource leaks are prevented since extra Subscriptions will be cancelled"],["body","\n"],["body","执行此规则意味着防止资源泄漏，因为额外的订阅将被取消。"],["body","\n"],["body","如果不符合此规则，可能导致违反 Publisher rule 1。此类违规行为可能导致难以诊断的错误"],["body","\n"],["headingLink","subscription不用之后需要cancel"],["heading","Subscription不用之后需要Cancel"],["body","\n"],["body","一个 Subscription 如果不再需要了，则 Subscriber  必须 调用  Subscription.cancel() "],["body","\n"],["headingLink","cancel有延迟"],["heading","Cancel有延迟"],["body","\n"],["body","Subscriber 必须有能力处理下列情况"],["body","\n"],["body","当 调用 Subscription.cancel 时，如果还存在 请求的元素 正 pending中，能够接收一个或多个 onNext 信号，Subscription.cancel() 不保证立即执行基础清洁操作"],["body","\n"],["body","此规则的目的是强调，在调用 cancel 和  publisher 遵守 cancel之间可能会有延迟。"],["body","\n"],["headingLink","允许流提前完成"],["heading","允许流提前完成"],["body","\n"],["body","一个 Subscriber 必须能够 处理 onComplete 信号 无论是否前置调用 Subscription.request(long n) "],["body","\n"],["body","此规则的目的是确定 completion 与需求流无关，这允许流提前完成，并避免 poll 完成的需要。"],["body","\n"],["headingLink","onerror与信号需求无关"],["heading","OnError与信号需求无关"],["body","\n"],["body","订阅者 必须准备好接收 OnError 信号，无论是否事先发出 Subscription.request(long n)"],["body","\n"],["body","此规则的目的是确定发布者故障可能与信号需求完全无关。这意味着订阅者不需要 poll 来了解发布者是否无法满足其请求"],["body","\n"],["headingLink","信号的异步处理"],["heading","信号的异步处理"],["body","\n"],["body","订阅者 必须确保在处理相关信号之前：所有 发生在其 signal 方法 的调用 "],["body","\n"],["body","Subscriber必须确保 所有 信号方法的调用 发生于 信号处理之前"],["body","\n"],["body","即订阅者必须注意正确发布信号以达到其处理逻辑。"],["body","\n"],["body","此规则的目的是确定订阅者实现的责任，以确保其信号的异步处理是线程安全的"],["body","\n"],["body","JMM definition of Happens-Before in section 17.4.5"],["body","\n"],["headingLink","subscriber对于一个publisher只能调用一次"],["heading","Subscriber对于一个Publisher只能调用一次"],["body","\n"],["body","Subscriber.onSubscribe 对于给定的 Subscriber（ (based on object equality)最多只能被调用一次"],["body","\n"],["body","此规则的目的是确定必须假定最多只能订阅一次相同的订阅者"],["body","\n"],["headingLink","信号方法必须-returnnormal"],["heading","信号方法必须 ReturnNormal"],["body","\n"],["body","调用  onSubscribe, onNext, onError or onComplete  必须 return normally "],["body","\n"],["body","除非任何提供的参数是 \"空\"，在这种情况下 它 必须向 调用者 抛出 java.lang.NullPointerException"],["body","\n"],["body","对于所有其他情况，\"订阅者\"发出故障信号的唯一合法方式是取消其 \"订阅\"。"],["body","\n"],["body","如果违反此规则，任何与 subscriber 关联的 Subscription 必须 被取消，调用者必须以适应 运行时环境的方式 抛出此 错误状态"],["body","\n"],["body","此规则的目的是确定 订阅者的方法的语义，以及允许发布者在违反此规则的情况下做什么的语义"],["body","\n"],["body","«Raise this error condition in a fashion that is adequate for the runtime environment» 可能意味着记录错误"],["body","\n"],["body","或者使某人某事 意识到这种情况，因为错误不能向有故障的订阅者发出信号"],["body","\n"],["headingLink","subscription"],["heading","Subscription"],["body","\n"],["body","public interface Subscription {\n    public void request(long n);\n    public void cancel();\n}\n"],["body","\n"],["headingLink","subscriber控制请求"],["heading","Subscriber控制请求"],["body","\n"],["body","Subscription.request Subscription.cancel 必须 在 Subscriber context 中调用"],["body","\n"],["body","此规则的目的是确定  Subscription  代表订阅者和发布者之间的独特关系"],["body","\n"],["body","订阅者可以控制何时请求元素以及何时不再需要更多元素"],["body","\n"],["headingLink","request可重复调用"],["heading","Request可重复调用"],["body","\n"],["body","Subscription  必须 允许 Subscriber   在onNext or onSubscribe   中  同步地调用   Subscription.request"],["body","\n"],["body","此规则的目的是明确  request  的实现 必须可重入，以避免在  request onNext  之间相互重复的情况下出现堆栈溢出（最终onComplete / onError）之间发生堆栈溢出"],["body","\n"],["body","这意味着发布者可以是\"同步的\"，即在称为\"请求\"的线程上发出\"onNext\"的信号"],["body","\n"],["headingLink","request-onnext递归上限"],["heading","Request OnNext递归上限"],["body","\n"],["body","Subscription.request 在  Publisher and Subscriber的递归调用之间 放置一个 上限"],["body","\n"],["body","此规则的目的是通过对 request onNext 之间的递归调用 设置上限来补充（最终 onComplete onError）"],["body","\n"],["body","Implementations are RECOMMENDED to limit this mutual recursion to a depth of 1 (ONE)—for the sake of conserving stack space."],["body","\n"],["body","为了节省堆栈空间，建议实现将这种相互递归限制为\"1\"（One）深度"],["body","\n"],["headingLink","request应该足够快"],["heading","Request应该足够快"],["body","\n"],["body","Subscription.request应该遵循 调用者的 职责 。应及时返回"],["body","\n"],["body","此规则的目的是确定 request 被实现为 轻量级 非阻塞方法，能在调用线程中 尽快执行，避免 重计算，及其他拖慢调用线程的执行"],["body","\n"],["headingLink","cancel应该幂等线程安全快"],["heading","Cancel应该幂等线程安全快"],["body","\n"],["body","Subscription.cancel  必须 遵循 调用者的 责任，及时返回，必须是幂等、线程安全"],["body","\n"],["body","此规则的目的是确定 cancel 旨在 设计为 非阻塞 方法，能够在调用线程尽快执行，避免重计算和其他会拖慢 调用者 线程执行的 事情。"],["body","\n"],["body","此外，还必须可以多次调用它，而不会产生任何不利影响。"],["body","\n"],["headingLink","取消后的request是-no-op的"],["heading","取消后的Request是 No-op的"],["body","\n"],["body","Subscription被取消后，对  Subscription.request(long n)的调用 都应该是 NOPs."],["body","\n"],["body","此规则的目的是在取消订阅与随后 non-operation request 更多元素之间建立因果关系"],["body","\n"],["body","此规则被  3.5 取代了"],["body","\n"],["headingLink","request-is-an-additive-operation"],["heading","Request is an additive operation"],["body","\n"],["body","当 Subscription未被 取消时， Subscription.request(long n) 必须注册 给定数量的额外元素，这些元素将会产生给 相应的  Subscriber"],["body","\n"],["body","此规则的目的是确保 request 是一个 附加的操作，也确保 元素的请求 被 递送到 Publisher"],["body","\n"],["headingLink","request-param-参数小于等于0时触发onerror"],["heading","Request Param 参数小于等于0时触发onError"],["body","\n"],["body","当 Subscription 没有取消时，使用参数小于等于0 调用 Subscription.request(long n) 必须发出 onError 信号，带有java.lang.IllegalArgumentException "],["body","\n"],["body","Request Param"],["body","\n"],["body","当订阅未被取消， Subscription.request(long n)"],["body","\n"],["headingLink","request-可以同步调用onnext"],["heading","Request 可以同步调用onNext"],["body","\n"],["body","虽然\"订阅\"未被取消，但 Subscription.request(long n)  可在此（或其他）订阅者上同步调用\"onNext\""],["body","\n"],["body","此规则的目的是确定允许创建同步发布者，即在 调用线程上执行逻辑的发布者"],["body","\n"],["headingLink","subscriptioncancel停止发出信号"],["heading","Subscription.Cancel停止发出信号"],["body","\n"],["body","当订阅未被取消时，Subscription.cancel()  必须  请求 Publisher 最终停止向 订阅者 发出信号"],["body","\n"],["body","操作不需要 立即 影响 Subscription"],["body","\n"],["body","此规则的目的是 确定： 取消一个 Subscription 最终会 影响到  Publisher 并且 众所周知 可能会 花费一定时间 才能收到 信号"],["body","\n"],["headingLink","cancel后放弃对subscriber的引用"],["heading","cancel后放弃对Subscriber的引用"],["body","\n"],["body","当 Subscription 未被 取消，但 Subscription.cancel()  必须  请求 Publisher 最终放弃 对相应 subscriber 的任何引用"],["body","\n"],["body","此规则的目的是确保订阅者在订阅不再有效后可以正确收集垃圾"],["body","\n"],["body","不鼓励使用同一订阅对象重新订阅，但此规范并不要求它被禁止，因为这意味着必须无限期地存储以前取消的订阅"],["body","\n"],["headingLink","cancel-可能会导致-publisher进入-shut-down"],["heading","cancel 可能会导致 Publisher进入 shut-down"],["body","\n"],["body","当Subscription 未被取消，调用  Subscription.cancel 可能会导致 Publisher（如果是有状态）在此点不存在其他\"订阅\"时过渡到\"关闭\"状态"],["body","\n"],["body","此规则的目的是允许发布者在\"订阅\"后对新订阅者发出  onComplete 或  onError 上发出信号，以响应现有订阅者的取消信号。"],["body","\n"],["headingLink","subscriptioncancel-must-return-normally"],["heading","Subscription.cancel MUST return normally"],["body","\n"],["body","此规则的目的是不允许实现 针对所谓的\"取消\"而抛出例外情况。"],["body","\n"],["headingLink","subscriptionrequest-must-return-normally"],["heading","Subscription.request MUST return normally"],["body","\n"],["body","此规则的目的是不允许实施针对被调用的\"请求\"抛出例外情况。"],["body","\n"],["headingLink","subscription必须支持无边界的request"],["heading","Subscription必须支持无边界的request"],["body","\n"],["body","\"订阅\" 必须支持无限制的\"request\" 调用数量 并且必须支持高达  2^63-1 需求 , greater than 2^63-1 的需求可能被\"发布者\"视为\"有效无限制\"。"],["body","\n"],["body","此规则的目的是确定订阅者可以请求无限数量的元素，在任何增量超过 0，在任意数量的\"请求\"中。"],["body","\n"],["body","因为它不能在合理的时间内使用当前或预见到的硬件（每纳秒 1 个元素需要 292 年）以达到  2×63-1 的需求，允许 Publisher 在此点之后停止跟踪需求"],["body","\n"],["headingLink","processor"],["heading","Processor"],["body","\n"],["body","public interface Processor<T, R> extends Subscriber<T>, Publisher<R> {\n}\n"],["body","\n"],["headingLink","processor处理阶段"],["heading","Processor处理阶段"],["body","\n"],["body","Processor 代表 一个处理阶段，既是订阅者又是 发布者，并且遵循两者的  规则"],["body","\n"],["body","此规则的目的是确定处理器的行为，并受发布者和订阅者规范的约束"],["body","\n"],["headingLink","onerror恢复与传播"],["heading","onError恢复与传播"],["body","\n"],["body","\"处理器\"可以选择恢复 onError信号，如果它选择这样做，它必须考虑取消的\"订阅\"，否则，它必须立即向订阅者传播\"OnError\"信号。"],["body","\n"],["body","此规则的目的是告知实现 可能不仅仅是简单的转换"],["body","\n"],["h1","Asynchronous vs Synchronous Processing"],["body","\n"],["body","The Reactive Streams API 规定 所有元素的调用 onNext 最终信号的调用 onError onCompelete 必须不阻塞 Publisher 但是 onHander的调用可以是 同步或者异步"],["body","\n"],["body","以此示例为例："],["body","\n"],["body","nioSelectorThreadOrigin map(f) filter(p) consumeTo(toNioSelectorOutput)\n"],["body","\n"],["body","它有一个 异步的 起源 和异步的 目的地  让我们假设原点和目的地都是选择器事件循环  Subscription.request(n) 必须 从 目的地链接到原点"],["body","\n"],["body","，每个实现可以选择如何执行"],["body","\n"],["body","下面使用管道|表示不一样边界（队列和计划）和 R#表示资源（可能为线程）的字符。"],["body","\n"],["body","nioSelectorThreadOrigin | map(f) | filter(p) | consumeTo(toNioSelectorOutput)\n-------------- R1 ----  | - R2 - | -- R3 --- | ---------- R4 ----------------\n"],["body","\n"],["body","在此示例中，3 个消费者中的每一个，map、filter 和 consumer 都异步地安排工作。它可以在同一事件循环（trampoline），单独的线程，无论什么。"],["body","\n"],["body","nioSelectorThreadOrigin map(f) filter(p) | consumeTo(toNioSelectorOutput)\n------------------- R1 ----------------- | ---------- R2 ----------------\n"],["body","\n"],["body","只有最后一步 是使用 异步调度，通过将 任务 加入到  NioSelectorOutput event loop"],["body","\n"],["body","The map and filter steps 在原始线程中 同步执行"],["body","\n"],["body","实现也可以 融合其他操作 到最终消费者"],["body","\n"],["body","nioSelectorThreadOrigin | map(f) filter(p) consumeTo(toNioSelectorOutput)\n--------- R1 ---------- | ------------------ R2 -------------------------\n"],["body","\n"],["body","所有这些变种都是\"异步流\"。它们都有自己的位置，每个都有不同的权衡，包括性能和实现复杂性。"],["body","\n"],["body","The Reactive Streams 允许实现管理资源和调度的灵活性，并在非阻塞、异步、动态推拉流范围内混合异步和同步处理。"],["body","\n"],["body","以便完全异步实现所有参与的 API 元素 Publisher/Subscription/Subscriber/Processor 上的所有方法均返回void"],["body","\n"],["h1","Subscriber controlled queue bounds"],["body","\n"],["body","一个基本设计原则是：所有 bufferSize是 有界的，这些界限必须由Subscribe 已知  和 控制"],["body","\n"],["body","这些界限以 元素计数 表示（这又导致转化为下一个的调用计数）"],["body","\n"],["body","旨在支持无限流的任何实现（特别是高输出率流），需要一直控制（enforce） 边界，限制资源使用 以避免内存溢出错误"],["body","\n"],["body","由于背压是强制性的，可以避免使用无限制的缓冲器,"],["body","\n"],["body","一般来说，队列增长 没有边界的 唯一时刻 是 当 Publisher 维持 高速率 生产 比 订阅者的消费速度要快，但是这种场景 使用背压 处理"],["body","\n"],["body","Queue bounds can be controlled by a subscriber signaling demand for the appropriate number of elements. "],["body","\n"],["body","队列边界可由用户对适当数量的元素发出信号需求来控制："],["body","\n"],["body","在任何时刻，subscriber都知道"],["body","\n\n"],["body","请求的总元素数量: P"],["body","\n"],["body","已处理的元素数量 N"],["body","\n\n"],["body","然后，可能到达的最大元素数量是  P - N，直到更多的需求向 Publisher 发出信号 "],["body","\n"],["body","如果订阅者也知道其输入缓冲器中的元素 B 数，则此边界重新定义为：P-B-N"],["body","\n"],["body","这些边界 必须影响 到 publisher 独立于 它所代表的来源是否可以回压，"],["body","\n"],["body","如果生产率不能受到影响的来源:例如时钟滴答声或鼠标运动,Publisher必须选择缓冲或丢弃元素以遵守  imposed bounds 。"],["body","\n\n"],["body","Subscribers 在接收到一个元素后，发布对一个元素需求的信号。从而有效的执行了： Stop-and-Wait 协议 ：需要信号等同于 确认信号"],["body","\n"],["body","通过提供 多个元素的 request 确认的成本 被 分摊"],["body","\n"],["body","值得注意的是： Subscriber 被允许 随时 发起需求信号 ，允许它避免 Publiser 和  Subscriber 之间不必要的延迟（例如：保持输入缓冲填满，无需等待完整的往返）"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/JVM复制算法.html"],["title","JVM复制算法.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JVM 垃圾回收算法——复制算法"],["body","\n"],["headingLink","复制算法"],["heading","复制算法"],["body","\n"],["body","在复制算法中，回收器将堆空间划分为两个大小相等的半区 (semispace)，分别是 来源空间(fromspace) 和 目标空间(tospace) 。在进行垃圾回收时，回收器将存活对象从来源空间复制到目标空间，复制结束后，所有存活对象紧密排布在目标空间一端，最后将来源空间和目标空间互换。"],["body","\n"],["headingLink","复制前"],["heading","复制前"],["body","\n"],["body","\n"],["headingLink","复制后"],["heading","复制后"],["body","\n"],["body","\n"],["headingLink","代码段"],["heading","代码段"],["body","\n"],["body","collect() {\n// 变量前面加*表示指针\n// free指向TOSPACE半区的起始位置\n*free = *to_start;\nfor(root in Roots) {\ncopy(*free, root);\n}\n// 交换FROMSPACE和TOSPACE\nswap(*from_start,*to_start);\n}\n"],["body","\n"],["body","核心函数 copy 的实现如下所示："],["body","\n"],["body","copy(*free,obj) {\n// 检查obj是否已经复制完成\n// 这里的tag仅是一个逻辑上的域\nif(obj.tag != COPIED) {\n// 将obj真正的复制到free指向的空间\ncopy_data(*free,obj);\n// 给obj.tag贴上COPIED这个标签\n// 即使有多个指向obj的指针，obj也不会被复制多次\nobj.tag = COPIED;\n// 复制完成后把对象的新地址存放在老对象的forwarding域中\nobj.forwarding = *free;\n// 按照obj的长度将free指针向前移动\n*free += obj.size;\n\n// 递归调用copy函数复制其关联的子对象\nfor(child ingetRefNode(obj.forwarding)){\n*child = copy(*free,child);\n}\n}\nreturnobj.forwarding;\n}\n"],["body","\n"],["headingLink","两个注意点"],["heading","两个注意点"],["body","\n\n"],["body","\n"],["body","tag=COPIED"],["body","\n"],["body","标记该对象已经被复制完成"],["body","\n"],["body","\n"],["body","\n"],["body","forwarding"],["body","\n"],["body","标记该对象所复制后的地址"],["body","\n"],["body","\n\n"],["headingLink","算法评价-3"],["heading","算法评价 3"],["body","\n"],["body","优点"],["body","\n\n"],["body","吞吐量高：整个 GC 算法只搜索并复制存活对象，尤其是堆越大，差距越明显，毕竟它消耗的时间只是与活动对象数量成正比。"],["body","\n"],["body","内存连续,无碎片"],["body","\n"],["body","与缓存兼容：可以回顾一下前面说的局部性原理，由于所有存活对象都紧密的排布在内存里，非常有利于 CPU 的高速缓存。"],["body","\n\n"],["body","缺点"],["body","\n\n"],["body","堆空间利用率低"],["body","\n"],["body","递归调用函数：复制某个对象时要递归复制它引用的对象，相较于迭代算法，递归的效率更低，而且有栈空间溢出的风险"],["body","\n\n"],["headingLink","cheney-复制算法"],["heading","Cheney 复制算法"],["body","\n"],["body","\n"],["body","Cheney 算法是用来解决如何遍历引用关系图并将存活对象移动到 TOSPACE 的算法，它使用迭代算法来代替递归"],["body","\n"],["body","\n"],["headingLink","注意点"],["heading","注意点"],["body","\n"],["body","双指针"],["body","\n\n"],["body","\n"],["body","scan 指针扫描对象的所有 第一层级引用, scan 前面的表示 已经被扫描过引用了, 后面的是已经被复制 还未 扫描过引用"],["body","\n"],["body","\n"],["body","\n"],["body","free 指针 指向链条尾端, 前面的表示已经复制完毕了"],["body","\n"],["body","\n\n"],["headingLink","代码段-1"],["heading","代码段"],["body","\n"],["body","代码实现只需要在之前的代码上稍做修改，即可："],["body","\n"],["body","collect() {\n// free指向TOSPACE半区的起始位置\n*scan = *free = *to_start;\n// 复制根节点直接引用的对象\nfor(root in Roots) {\ncopy(*free, root);\n}\n// scan开始向前移动\n// 首先获取scan位置处对象所引用的对象\n// 所有引用对象复制完成后，向前移动scan\nwhile(*scan != *free) {\nfor(child ingetRefObject(scan)){\ncopy(*free, child);\n}\n*scan += scan.size;\n}\nswap(*from_start,*to_start);\n}\n"],["body","\n"],["body","而 copy 函数也不再包含递归调用，仅仅是完成复制功能："],["body","\n"],["body","copy(*free,obj) {\nif(!is_pointer_to_heap(obj.forwarding,*to_start)) {\n// 将obj真正的复制到free指向的空间\ncopy_data(*free,obj);\n// 复制完成后把对象的新地址存放在老对象的forwarding域中\nobj.forwarding = *free;\n// 按照obj的长度将free指针向前移动\n*free += obj.size;\n}\nreturnobj.forwarding;\n}\n"],["body","\n"],["body","通过代码可以看出，Cheney 算法采用的是广度优先算法"],["body","\n"],["body","广度优先搜索算法是需要一个先进先出的队列来辅助的，但这儿并没有队列。实际上 scan 和 free 之间的堆变成了一个队列，scan 左边是已经搜索完的对象，右边是待搜索对象。free 向前移动，队列就会追加对象，scan 向前移动，都会有对象被取出并进行搜索"],["body","\n"],["headingLink","算法评价"],["heading","算法评价"],["body","\n\n"],["body","避免了栈的消耗和可能的栈溢出风险"],["body","\n"],["body","相互引用的对象并不是相邻的，就没办法充分利用缓存"],["body","\n\n"],["body","参考"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/javaUnsafe工具类与CAS.html"],["title","javaUnsafe工具类与CAS.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JavaUnsafe类与CAS操作"],["body","\n"],["headingLink","前言"],["heading","前言"],["body","\n"],["body","最近看java源码发现有多处地方都使用到了Unsafe类,于是在网上查阅资料教程.以下是个人总结"],["body","\n"],["headingLink","unsafe简介"],["heading","Unsafe简介"],["body","\n"],["body","Unsafe两大功能:"],["body","\n\n"],["body","直接通过内存地址 修改对象,获取对象引用"],["body","\n"],["body","使用硬件指令 实现 原子操作 (CAS compare and swap)"],["body","\n\n"],["body","Unsafe的使用:"],["body","\n\n"],["body","\n"],["body","Unsafe是典型的单例模式,通过  public static Unsafe getUnsafe()获取实例"],["body","\n"],["body","\n"],["body","\n"],["body","且 该方法被 @CallerSensitive所注解, 表明只能由系统类加载器加载的类所调用"],["body","\n"],["body","\n"],["body","\n"],["body","为了在测试代码中使用Unsafe,可以通过反射获取该类的静态字段的实例"],["body","\n"],["body","Field f= Unsafe.class.getDeclaredField(\"theUnsafe\");\nf.setAccessible(true);\nUnsafe u = (Unsafe) f.get(null);\n"],["body","\n"],["body","\n\n"],["headingLink","unsafe-api"],["heading","Unsafe API"],["body","\n"],["headingLink","获取偏移"],["heading","获取偏移"],["body","\n\n"],["body","\n"],["body","获取成员变量在 对象中的偏移"],["body","\n"],["body","public native long objectFieldOffset(Field f);"],["body","\n"],["body","\n"],["body","\n"],["body","获取静态成员所在 的类,返回Class对象"],["body","\n"],["body","public native Object staticFieldBase(Field f);"],["body","\n"],["body","\n"],["body","\n"],["body","获取静态成员在 类中的偏移"],["body","\n"],["body","public native long staticFieldOffset(Field f);"],["body","\n"],["body","\n"],["body","\n"],["body","获取数组首个元素 在数组对象中的偏移"],["body","\n"],["body","public native int arrayBaseOffset(Class arrayClass);"],["body","\n"],["body","\n"],["body","\n"],["body","获取每个数组元素所占空间"],["body","\n"],["body","public native int arrayIndexScale(Class arrayClass);"],["body","\n"],["body","\n\n"],["headingLink","根据-对象偏移--获取或设置-对象中字段的引用或值"],["heading","根据 对象+偏移  获取或设置 对象中字段的引用或值"],["body","\n\n"],["body","\n"],["body","获取 对象var1内部中偏移为var2的 XXX类型字段的 值或引用"],["body","\n"],["body","public native byte getXxxx(Object var1, long var2);\n例如\n   public native byte getByte(Object var1, long var2);\n   public native int getInt(Object var1, long var2);\n   public native double getDouble(long var1);\n   public native boolean getBoolean(Object var1, long var2);\n   public native Object getObject(Object var1, long var2);\n......\n"],["body","\n"],["body","\n"],["body","\n"],["body","设置对象var1内部中偏移为var2的 XXX类型字段的值 为var4"],["body","\n"],["body"," public native void putBoolean(Object var1, long var2, boolean var4);\n public native void putByte(Object var1, long var2, byte var4);\n public native void putInt(Object var1, long var2, int var4);\n public native void putObject(Object var1, long var2, Object var4);\n......\n"],["body","\n"],["body","\n"],["body","\n"],["body","带volatile语义的get,put:表示多线程之间的变量可见,一个线程修改一个变量之后,另一个线程立刻能看到"],["body","\n"],["body","public native void putBooleanVolatile(Object var1, long var2, boolean var4);\npublic native int getIntVolatile(Object var1, long var2);\npublic native long getLongVolatile(Object var1, long var2);\n......\n"],["body","\n"],["body","\n\n"],["headingLink","本地内存操作"],["heading","本地内存操作"],["body","\n\n"],["body","\n"],["body","分配指定大小的一块本地内存 (同C语言中的 malloc)"],["body","\n"],["body","public native long allocateMemory(long bytes);"],["body","\n"],["body","\n"],["body","\n"],["body","重新分配内存(同C语言中的 realloc)"],["body","\n"],["body","public native long reallocateMemory(long address, long bytes);"],["body","\n"],["body","\n"],["body","\n"],["body","将给定的内存块  的所有字节 bytes 设置成固定的值 value (通过 object + offset 确定内存的基址)(同C语言中的 memset)"],["body","\n"],["body","public native void setMemory(Object o, long offset, long bytes, byte value);"],["body","\n"],["body","\n"],["body","\n"],["body","复制内存块,内存块 srcBasc+srcOffset + bytes - > destBase+destOffset + bytes  (同C语言中的 memcpy)"],["body","\n"],["body","public native void copyMemory(Object srcBase, long srcOffset, Object destBase, long destOffset,long bytes);"],["body","\n"],["body","\n"],["body","\n"],["body","释放通过Allocate分配的本地内存(同C语言中的 free)"],["body","\n"],["body"," public native void freeMemory(long address);"],["body","\n"],["body","\n"],["body","\n"],["body","获取和设置本地内存中的值,va1表示本地内存绝对地址,var3表示要设置的值"],["body","\n"],["body","public native short getShort(long var1);\npublic native int getInt(long var1);\npublic native void putShort(long var1, short var3);\npublic native void putInt(long var1, int var3);\n"],["body","\n"],["body","\n\n"],["headingLink","cas操作"],["heading","CAS操作"],["body","\n"],["body","java.util.concurrent 包中无锁化的实现就是调用了CAS以下原子操作"],["body","\n\n"],["body","\n"],["body","CAS语义"],["body","\n\n"],["body","将 由var1+var2确定的地址的值  从var4 修改成 var5 "],["body","\n"],["body","如果旧值不为 var4,则直接退出"],["body","\n"],["body","多个线程修改同一个变量时, 只会有一个线程修改成功,其他线程不会被挂起,而是告知失败"],["body","\n"],["body","这是一种 乐观锁的语义, 每个线程都假设自己的操作能成功,与之相对应的synchronized的悲观锁语义,每次修改操作必须 只能有一个线程独占资源"],["body","\n\n"],["body","\n"],["body","\n"],["body","设置 通过 var1+var2确定的内存基址的int类型变量,将值原子的从 var4 变成 var5,成功true,失败false"],["body","\n"],["body","替换int值:public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n替换引用:public final native boolean compareAndSwapObject(Object var1, long var2, Object var4, Object var5);\n"],["body","\n"],["body","\n"],["body","\n"],["body","基于上面操作的包装方法: 得到对象 中某个int字段的值 通过(var1+var2), 并给该值加上 var4,返回相加前的值"],["body","\n"],["body","典型实现\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n        int var5;\n        do {\n            var5 = this.getIntVolatile(var1, var2);\n        } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n        return var5;\n    }\n"],["body","\n"],["body","\n\n"],["headingLink","packunpack"],["heading","Pack/Unpack"],["body","\n\n"],["body","\n"],["body","阻塞和释放任一线程对象"],["body","\n"],["body","\n"],["body","\n"],["body","内部实现通过 信号量的方式,信号量值为1,pack 消耗值, unpack增加值"],["body","\n"],["body","\n"],["body","\n"],["body","在 LockSupport 类包装使用"],["body","\n"],["body","\n\n"],["headingLink","example"],["heading","Example"],["body","\n"],["body","//测试对象\npublic class UnsafeEntity {\n    private  int a;\n    private  int c;\n    private  int d;\n    private  static  int b = 1;\n    getter......\n    setter......\n}\n"],["body","\n"],["body","//测试代码\npackage com.weisanju;\nimport sun.misc.Unsafe;\nimport java.lang.reflect.Field;\n\npublic class UnsafeTest {\n    public static void main(String[] args) throws Exception {\n        Field f= Unsafe.class.getDeclaredField(\"theUnsafe\");\n        f.setAccessible(true);\n        Unsafe u = (Unsafe) f.get(null);\n        //获取成员变量 的偏移\n        long a = u.objectFieldOffset(UnsafeEntity.class.getDeclaredField(\"a\"));\n        long c = u.objectFieldOffset(UnsafeEntity.class.getDeclaredField(\"c\"));\n        long d = u.objectFieldOffset(UnsafeEntity.class.getDeclaredField(\"d\"));\n        System.out.println(\"成员字段a:\"+a);\n        System.out.println(\"成员字段c:\"+c);\n        System.out.println(\"成员字段d:\"+d);\n\n        //设置对象字段的值\n        UnsafeEntity testa = new UnsafeEntity();\n        testa.setA(666);\n        System.out.println(\"设置前:\"+u.getInt(testa, a));\n        u.putInt(testa,a,777);\n        System.out.println(\"设置后:\"+u.getInt(testa, a));\n\n        //获取静态字段所在的类的对象\n        System.out.println(u.staticFieldBase(UnsafeEntity.class.getDeclaredField(\"b\")));\n        //获取静态字段的偏移\n        long b = u.staticFieldOffset(UnsafeEntity.class.getDeclaredField(\"b\"));\n        System.out.println(\"静态字段b:\"+b);\n\n        //静态字段的设置, 注意由于静态字段,存储于方法区,所以起始对象为类的字节码\n        System.out.println(\"设置前:\"+u.getInt(UnsafeEntity.class, b));\n        u.putInt(UnsafeEntity.class,b,11);\n        System.out.println(\"设置后:\"+u.getInt(UnsafeEntity.class, b));\n\n\n        //普通 数组的使用\n        int arr[] = {1,2,3,4,5,6,7,8};\n        //head为头地址偏移\n        long head = u.arrayBaseOffset(int[].class);\n        //step为数组元素所占空间\n        long step = u.arrayIndexScale(int[].class);\n        // 获取 与设置 arr[7] 的值\n        int index = 7;\n        System.out.println(u.getInt(arr, head + step * index));\n        u.putInt(arr,head+step*index,666);\n        System.out.println(arr[index]);\n\n        //对象数组的使用\n        UnsafeEntity arrObj[] = new UnsafeEntity[10];\n        //head为头地址偏移\n        head = u.arrayBaseOffset(UnsafeEntity[].class);\n        //step为数组元素所占空间\n        step = u.arrayIndexScale(UnsafeEntity[].class);\n        // 获取 与设置 arr[7] 的值\n        index = 7;\n        arrObj[index] = new UnsafeEntity();\n        System.out.println(u.getObject(arrObj, head + step * index));\n        u.putObject(arrObj,head+step*index,new UnsafeEntity());\n        System.out.println(arrObj[index]);\n    }\n}\n"],["body","\n"],["body","输出结果\n成员字段a:12\n成员字段c:16\n成员字段d:20\n设置前:666\n设置后:777\nclass com.weisanju.UnsafeEntity\n静态字段b:104\n设置前:1\n设置后:11\n8\n666\ncom.weisanju.UnsafeEntity@1540e19d\ncom.weisanju.UnsafeEntity@677327b6\n"],["body","\n"],["headingLink","总结"],["heading","总结"],["body","\n\n"],["body","Unsafe为从cpu底层指令 层面 为多线程提供了无锁化设计,以及直接操作内存地址的能力,Java中 Atomic原子类,netty,concurrent包等底层都封装了 该对象"],["body","\n"],["body","当然 极大的效率,也必然意外着 极大的不安全, 如果错误给一块内存区赋值,程序不会有任何反应,这就给程序带来极大的安全隐患"],["body","\n"],["body","当然了解Unsafe类 能够便于我们更好的阅读 Java底层源码"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/XXSurvivorRatio.html"],["title","XXSurvivorRatio.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","关于jvm参数-xxsurvivorratio的理解"],["heading","关于JVM参数-XX:SurvivorRatio的理解"],["body","\n"],["body","JVM参数中有一个比较重要的参数SurvivorRatio，它定义了新生代中Eden区域和Survivor区域（From幸存区或To幸存区）的比例，默认为8，也就是说Eden占新生代的8/10，From幸存区和To幸存区各占新生代的1/10"],["body","\n"],["body","-XX:SurvivorRatio\n1\n可参考以下计算公式："],["body","\n"],["body","Eden = (R*Y)/(R+1+1)\nFrom = Y/(R+1+1)\nTo   = Y/(R+1+1)\n"],["body","\n"],["body","其中：\nR：SurvivorRatio比例\nY：新生代空间大小"],["body","\n"],["body","这里举个例子，如果我们通过设置-Xmn60M来指定新生代分配的空间大小，那么Eden则会分配60M * 0.8 = 48M，Survivor一共分配60M * 0.2 = 12M的内存空间"],["body","\n"],["body","下面我们通过实际命令行的演示来验证上面的结果"],["body","\n"],["body","启动参数配置"],["body","\n"],["body","-Xmn60M\n-XX:SurvivorRatio=8\n-XX:+PrintFlagsFinal\n"],["body","\n"],["body","\n控制台输出\nuintx NewSize         := 62914560    {product}\nuintx MaxNewSize      := 62914560    {product}\n"],["body","\n"],["body","默认的，新生代 ( Young ) 与老年代 ( Old ) 的比例的值为 1:2 ( 该值可以通过参数 –XX:NewRatio 来指定 )，即：新生代 ( Young ) = 1/3 的堆空间大小。"],["body","\n"],["body","老年代 ( Old ) = 2/3 的堆空间大小。其中，新生代 ( Young ) 被细分为 Eden 和 两个 Survivor 区域，这两个 Survivor 区域分别被命名为 from 和 to，以示区分。"],["body","\n"],["body","默认的，Edem : from : to = 8 : 1 : 1 ( 可以通过参数 –XX:SurvivorRatio 来设定 )，即： Eden = 8/10 的新生代空间大小，from = to = 1/10 的新生代空间大小。"],["body","\n"],["body","‍JVM 每次只会使用 Eden 和其中的一块 Survivor 区域来为对象服务，所以无论什么时候，总是有一块 Survivor 区域是空闲着的。"],["body","\n"],["body","因此，新生代实际可用的内存空间为 9/10 ( 即90% )的新生代空间。"],["body","\n"],["body","Java 中的堆是 JVM 所管理的最大的一块内存空间，主要用于存放各种类的实例对象。"],["body","\n"],["body","在 Java 中，堆被划分成两个不同的区域：新生代 ( Young )、老年代 ( Old )。新生代 ( Young ) 又被划分为三个区域：Eden、From Survivor、To Survivor。"],["body","\n"],["body","这样划分的目的是为了使 JVM 能够更好的管理堆内存中的对象，包括内存的分配以及回收。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/类加载/类加载器.html"],["title","类加载器.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","类加载器基本概念"],["body","\n"],["body","顾名思义，类加载器（class loader）用来加载 Java 类到 Java 虚拟机中。一般来说，Java 虚拟机使用 Java 类的方式如下：Java 源程序（.java 文件）在经过 Java 编译器编译之后就被转换成 Java 字节代码（.class 文件）。类加载器负责读取 Java 字节代码，并转换成 java.lang.Class 类的一个实例。"],["body","\n"],["body","所有的类加载器都是 java.lang.ClassLoader 类的一个实例。"],["body","\n"],["h1","java.lang.ClassLoader"],["body","\n"],["body","方法"],["body","说明"],["body","\n"],["body","getParent()"],["body","返回该类加载器的分类加载器"],["body","\n"],["body","loadClass(String name)"],["body","加载类"],["body","\n"],["body","findClass(String name)"],["body","查询 class"],["body","\n"],["body","findLoadedClass(String name)"],["body","查询已经被加载过的类"],["body","\n"],["body","defineClass(String name,byte[] b,int off,int len)"],["body","把 byte 字节数组转换成类"],["body","\n"],["body","resolveClass(Class<?> c)"],["body","链接指定的 Java 类"],["body","\n\n\n"],["h1","类加载器的树状组织结构"],["body","\n\n"],["body","\n"],["body","引导类加载器（bootstrap class loader）"],["body","\n\n"],["body","它用来加载 Java 的核心库，比如 Object、System、 String ,Java 运行时的 rt.jar 等 jar 包"],["body","\n"],["body","是用 C++来实现的，并不继承自 java.lang.ClassLoader。"],["body","\n\n"],["body","\n"],["body","\n"],["body","扩展类加载器（extensions class loader）"],["body","\n\n"],["body","它用来加载 Java 的扩展库。Java 虚拟机的实现会提供一个扩展目录。该类加载器在此目录里面查找并加载 Java 类。"],["body","\n"],["body","负责加载<JAVA_HOME>\\lib\\ext 目录中的，或者 java.ext.dirs 系统变量指定的路径中的所有类库;"],["body","\n\n"],["body","\n"],["body","\n"],["body","Application ClassLoader"],["body","\n"],["body","应用类加载器，主要是加载用户定义的 CLASSPATH 路径下的类"],["body","\n"],["body","\n\n"],["body","它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。"],["body","\n"],["body","\n"],["h1","类加载器的代理模式"],["body","\n"],["body","\n"],["body","类加载器在尝试自己去查找某个类的字节代码并定义它时，会先代理给其父类加载器，由父类加载器先去尝试加载这个类"],["body","\n"],["body","\n"],["body","代理模式是为了保证 Java 核心库的类型安全"],["body","\n"],["body","**注意：**类加载的双亲委派 是需要根据代码遵守，但是可以打破，但是 Java核心类跟 扩展类是没法自定义类加载器加载的"],["body","\n"],["body","代理流程"],["body","\n\n"],["body","判断是否已加载"],["body","\n"],["body","未加载则通过父类 加载器查找"],["body","\n"],["body","若父类为空 则调用 bootstrap加载器"],["body","\n"],["body","若父类找不到 则调用本类的查找方法"],["body","\n\n"],["body","\n"],["body","如果不想打破双亲委派模型，那么只需要重写findClass方法即可"],["body","\n"],["body","\n"],["body","\n"],["body","如果想打破双亲委派模型，那么就重写整个loadClass方法"],["body","\n"],["body","\n"],["body","protected synchronized Class<?> loadClass(String name, boolean resolve)\n    throws ClassNotFoundException\n    {\n    // First, check if the class has already been loaded\n    Class c = findLoadedClass(name);\n    if (c == null) {\n        try {\n        if (parent != null) {\n            c = parent.loadClass(name, false);\n        } else {\n            c = findBootstrapClass0(name);\n        }\n        } catch (ClassNotFoundException e) {\n            // If still not found, then invoke findClass in order\n            // to find the class.\n            c = findClass(name);\n        }\n    }\n    if (resolve) {\n        resolveClass(c);\n    }\n    return c;\n    }\n"],["body","\n"],["h1","类加载过程"],["body","\n"],["body","在前面介绍类加载器的代理模式的时候，提到过类加载器会首先代理给其它类加载器来尝试加载某个类。这就意味着真正完成类的加载工作的类加载器和启动这个加载过程的类加载器，有可能不是同一个。"],["body","\n\n"],["body","\n"],["body","真正完成类的加载工作是通过调用 defineClass来实现的；"],["body","\n"],["body","\n"],["body","\n"],["body","而启动类的加载过程是通过调用 loadClass来实现的。前者称为一个类的定义加载器（defining loader），后者称为初始加载器（initiating loader）。"],["body","\n"],["body","\n"],["body","\n"],["body","在 Java 虚拟机判断两个类是否相同的时候，使用的是类的定义加载器。"],["body","\n"],["body","\n"],["body","\n"],["body","也就是说，哪个类加载器启动类的加载过程并不重要，重要的是最终定义这个类的加载器。"],["body","\n"],["body","\n"],["body","\n"],["body","两种类加载器的关联之处在于：一个类的定义加载器 是它引用的其它类的初始加载器，或者说一个类的 初始加载器 是引用它的类的 定义加载器"],["body","\n"],["body","如类 com.example.Outer引用了类 com.example.Inner，则由类 com.example.Outer的定义加载器负责启动类 com.example.Inner的加载过程。\n\n方法 loadClass()抛出的是\njava.lang.ClassNotFoundException异常；方法 defineClass()抛出的是\njava.lang.NoClassDefFoundError异常。\n"],["body","\n"],["body","\n"],["body","\n"],["body","类加载器在成功加载某个类之后，会把得到的 java.lang.Class类的实例缓存起来。下次再请求加载该类的时候，类加载器会直接使用缓存的类的实例，而不会尝试再次加载。也就是说，对于一个类加载器实例来说，相同全名的类只加载一次，即 loadClass方法不会被重复调用。"],["body","\n"],["body","\n\n"],["h1","Class.forName"],["body","\n"],["body","Class.forName是一个静态方法，同样可以用来加载类。"],["body","\n"],["body","该方法有两种形式："],["body","\n"],["body","// name表示的是类的全名,initialize表示是否初始化类,loader表示加载时使用的类加载器\nClass.forName(String name, boolean initialize, ClassLoader loader)\n//第二种形式则相当于设置了参数 initialize的值为 true，loader的值为当前类的类加载器,Class.forName的一个很常见的用法是在加载数据库驱动的时候\nClass.forName(String className)。\n"],["body","\n"],["h1","自定义文件系统类加载器"],["body","\n"],["headingLink","示例1"],["heading","示例1"],["body","\n"],["body","\n"],["body","在开发自己的类加载器时，最好不要覆写 loadClass()方法，而是覆写 findClass()方法。"],["body","\n"],["headingLink","示例2"],["heading","示例2"],["body","\n"],["body","import java.io.*;\nimport java.net.URL;\nimport java.nio.channels.Channels;\nimport java.nio.channels.FileChannel;\nimport java.nio.channels.WritableByteChannel;\n\npublic class MyCustomerLoader extends ClassLoader{\n    @Override\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n        //读\n        String file = \"D:\\\\Person.class\";\n        FileInputStream in = null;\n        try {\n            in = new FileInputStream(file);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n            return null;\n        }\n        FileChannel channel = in.getChannel();\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        WritableByteChannel writableByteChannel = Channels.newChannel(baos);\n        try {\n            channel.transferTo(0,channel.size(),writableByteChannel);\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n\n\n        byte[] bytes = baos.toByteArray();\n\n        return defineClass(name,bytes,0,bytes.length);\n    }\n\n    public static void main(String[] args) throws IOException, ClassNotFoundException {\n        MyCustomerLoader myCustomerLoader = new MyCustomerLoader();\n        Class<?> c1 = Class.forName(\"Person\", true, myCustomerLoader);\n\n        System.out.println(c1.getClassLoader());\n    }\n}\n"],["body","\n"],["h1","网络类加载器"],["body","\n"],["body","下面将通过一个网络类加载器来说明如何通过类加载器来实现组件的动态更新。即基本的场景是：Java 字节代码（.class）文件存放在服务器上，客户端通过网络的方式获取字节代码并执行。当有版本更新的时候，只需要替换掉服务器上保存的文件即可。通过类加载器可以比较简单的实现这种需求。"],["body","\n"],["body","类 NetworkClassLoader负责通过网络下载 Java 类字节代码并定义出 Java 类。它的实现与 FileSystemClassLoader类似。在通过 NetworkClassLoader加载了某个版本的类之后，一般有两种做法来使用它。第一种做法是使用 Java 反射 API。另外一种做法是使用接口。需要注意的是，并不能直接在客户端代码中引用从服务器上下载的类，因为客户端代码的类加载器找不到这些类。使用 Java 反射 API 可以直接调用 Java 类的方法。而使用接口的做法则是把接口的类放在客户端中，从服务器上加载实现此接口的不同版本的类。在客户端通过相同的接口来使用这些实现类。网络类加载器的具体代码见 下载。"],["body","\n"],["h1","类加载器与 Web 容器"],["body","\n"],["headingLink","web容器类加载原则"],["heading","web容器类加载原则"],["body","\n\n"],["body","对于运行在 Java EE™容器中的 Web 应用来说，类加载器的实现方式与一般的 Java 应用有所不同。不同的 Web 容器的实现方式也会有所不同。"],["body","\n"],["body","以 Apache Tomcat 来说，每个 Web 应用都有一个对应的类加载器实例。该类加载器也使用代理模式，"],["body","\n"],["body","所不同的是它是首先尝试去加载某个类，如果找不到再代理给父类加载器。这与一般类加载器的顺序是相反的。这是 Java Servlet 规范中的推荐做法，其目的是使得 Web 应用自己的类的优先级高于 Web 容器提供的类。"],["body","\n"],["body","这种代理模式的一个例外是：Java 核心库的类是不在查找范围之内的。这也是为了保证 Java 核心库的类型安全。"],["body","\n\n"],["body","绝大多数情况下，Web 应用的开发人员不需要考虑与类加载器相关的细节。下面给出几条简单的原则："],["body","\n\n"],["body","每个 Web 应用自己的 Java 类文件和使用的库的 jar 包，分别放在 WEB-INF/classes和 WEB-INF/lib目录下面。"],["body","\n"],["body","多个应用共享的 Java 类文件和 jar 包，分别放在 Web 容器指定的由所有 Web 应用共享的目录下面。"],["body","\n"],["body","当出现找不到类的错误时，检查当前类的类加载器和当前线程的上下文类加载器是否正确。"],["body","\n\n"],["headingLink","tomcat-类加载机制"],["heading","Tomcat 类加载机制"],["body","\n"],["body","\n"],["h1","OSGI"],["body","\n"],["body","OSGi™是 Java 上的动态模块系统。它为开发人员提供了面向服务和基于组件的运行环境，并提供标准的方式用来管理软件的生命周期。OSGi 已经被实现和部署在很多产品上，在开源社区也得到了广泛的支持。Eclipse 就是基于 OSGi 技术来构建的。"],["body","\n"],["body","OSGi 中的每个模块（bundle）都包含 Java 包和类。模块可以声明它所依赖的需要导入（import）的其它模块的 Java 包和类（通过 Import-Package），也可以声明导出（export）自己的包和类，供其它模块使用（通过 Export-Package）。也就是说需要能够隐藏和共享一个模块中的某些 Java 包和类。这是通过 OSGi 特有的类加载器机制来实现的。OSGi 中的每个模块都有对应的一个类加载器。它负责加载模块自己包含的 Java 包和类。当它需要加载 Java 核心库的类时（以 java开头的包和类），它会代理给父类加载器（通常是启动类加载器）来完成。当它需要加载所导入的 Java 类时，它会代理给导出此 Java 类的模块来完成加载。模块也可以显式的声明某些 Java 包和类，必须由父类加载器来加载。只需要设置系统属性\norg.osgi.framework.bootdelegation的值即可。"],["body","\n"],["body","假设有两个模块 bundleA 和 bundleB，它们都有自己对应的类加载器 classLoaderA 和 classLoaderB。在 bundleA 中包含类 com.bundleA.Sample，并且该类被声明为导出的，也就是说可以被其它模块所使用的。bundleB 声明了导入 bundleA 提供的类 com.bundleA.Sample，并包含一个类 com.bundleB.NewSample继承自 com.bundleA.Sample。在 bundleB 启动的时候，其类加载器 classLoaderB 需要加载类 com.bundleB.NewSample，进而需要加载类 com.bundleA.Sample。由于 bundleB 声明了类 com.bundleA.Sample是导入的，classLoaderB 把加载类 com.bundleA.Sample的工作代理给导出该类的 bundleA 的类加载器 classLoaderA。classLoaderA 在其模块内部查找类 com.bundleA.Sample并定义它，所得到的类 com.bundleA.Sample实例就可以被所有声明导入了此类的模块使用。对于以 java开头的类，都是由父类加载器来加载的。如果声明了系统属性\norg.osgi.framework.bootdelegation=com.example.core.*，那么对于包 com.example.core中的类，都是由父类加载器来完成的。"],["body","\n"],["body","OSGi 模块的这种类加载器结构，使得一个类的不同版本可以共存在 Java 虚拟机中，带来了很大的灵活性。不过它的这种不同，也会给开发人员带来一些麻烦，尤其当模块需要使用第三方提供的库的时候。下面提供几条比较好的建议："],["body","\n\n"],["body","如果一个类库只有一个模块使用，把该类库的 jar 包放在模块中，在 Bundle-ClassPath中指明即可。"],["body","\n"],["body","如果一个类库被多个模块共用，可以为这个类库单独的创建一个模块，把其它模块需要用到的 Java 包声明为导出的。其它模块声明导入这些类。"],["body","\n"],["body","如果类库提供了 SPI 接口，并且利用线程上下文类加载器来加载 SPI 实现的 Java 类，有可能会找不到 Java 类。如果出现了 NoClassDefFoundError异常，首先检查当前线程的上下文类加载器是否正确。通过 Thread.currentThread().getContextClassLoader()就可以得到该类加载器。该类加载器应该是该模块对应的类加载器。如果不是的话，可以首先通过 class.getClassLoader()来得到模块对应的类加载器，再通过 Thread.currentThread().setContextClassLoader()来设置当前线程的上下文类加载器。"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/类加载/线程上下文加载器.html"],["title","线程上下文加载器.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","线程上下文类加载器"],["body","\n"],["body","\n"],["body","线程上下文类加载器（context class loader）是从 JDK 1.2 开始引入的。"],["body","\n"],["body","\n"],["headingLink","api"],["heading","API"],["body","\n"],["body","//获取线程的上下文类加载器\ngetContextClassLoader()\n//设置线程的上下文类加载器\nsetContextClassLoader(ClassLoader cl)\n"],["body","\n"],["body","如果没有通过 setContextClassLoader(ClassLoader cl)方法进行设置的话，线程将继承其父线程的上下文类加载器。"],["body","\n"],["body","Java 应用运行的初始线程的上下文类加载器是系统类加载器。在线程中运行的代码可以通过此类加载器来加载类和资源。"],["body","\n"],["headingLink","为什么要定义线程上下文类加载器"],["heading","为什么要定义线程上下文类加载器？"],["body","\n"],["body","SPI接口"],["body","\n"],["body","前面提到的类加载器的代理模式并不能解决 Java 应用开发中会遇到的类加载器的全部问题。"],["body","\n"],["body","Java 提供了很多服务提供者接口（Service Provider Interface，SPI），允许第三方为这些接口提供实现"],["body","\n"],["body","常见的 SPI 有 JDBC、JCE、JNDI、JAXP 和 JBI 等。这些 SPI 的接口由 Java 核心库来提供，而接口实现是由其三方库来实现的"],["body","\n"],["body","核心库接口与三方库实现的冲突"],["body","\n"],["body","而问题在于，SPI 的接口是 Java 核心库的一部分，是由引导类加载器来加载的；SPI 实现的 Java 类一般是由系统类加载器来加载的。引导类加载器是无法找到 SPI 的实现类的，因为它只加载 Java 的核心库"],["body","\n"],["body","解决办法"],["body","\n"],["body","线程上下文类加载器正好解决了这个问题。如果不做任何的设置，Java 应用的线程的上下文类加载器默认就是系统上下文类加载器。"],["body","\n"],["body","在 SPI 接口的代码中使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。线程上下文类加载器在很多 SPI 的实现中都会用到。"],["body","\n"],["headingLink","线程上下文类加载器的一般模式"],["heading","线程上下文类加载器的一般模式"],["body","\n"],["body","# 伪代码：\n    // 获取\n    ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n    try {\n        // 使用\n        Thread.currentThread().setContextClassLoader(targetTccl);\n        myMethod();\n    } finally {\n        // 还原\n        Thread.currentThread().setContextClassLoader(classLoader);\n    }\n"],["body","\n"],["body","myMethod 里面则调用了 Thread.currentThread().getContextClassLoader()，获取当前线程的上下文类加载器做某些事情。"],["body","\n"],["body","如果一个类由类加载器A加载，那么这个类的依赖也是由相同的类加载器加载的（如果该依赖类之前没有被加载过的话）"],["body","\n"],["body","当高层提供了统一的接口让低层去实现，，同时又要在高层加载（或实例化）低层的类时，就必须要通过线程上下文类加载器来帮助高层的 ClassLoader 找到并加载该类。"],["body","\n"],["body","如果我们没有对线程上下文类加载器做任何设值的话，那么当前线程的上下文类加载器就是\"系统类加载器\"。"],["body","\n"],["headingLink","以jdbc-spi为例"],["heading","以JDBC SPI为例"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/类加载/类加载过程.html"],["title","类加载过程.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","类加载过程"],["body","\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/类加载/README.html"],["title","类加载 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","总结"],["body","\n"],["headingLink","如果要自定义类加载器可以放在classpath-中吗"],["heading","如果要自定义类加载器，可以放在classpath 中吗"],["body","\n"],["body","不能，默认情况下，Application ClassLoader 会加载 classpath下的  所有类，如果 需要自定义类加载器加载类 则需要将 该class文件放置到其他路径下"],["body","\n"],["headingLink","class与classloader的getresourceasstream区别"],["heading","Class与ClassLoader的getResourceAsStream区别"],["body","\n"],["body","不仅ClassLoader中有getResourceAsStream(String name)方法，Class下也有getResourceAsStream(String name)方法，它们两个方法的区别在于："],["body","\n"],["body","1、Class的getResourceAsStream(String name)方法，参数不以\"/\"开头则默认从此类对应的.class文件所在的packge下取资源，以\"/\"开头则从CLASSPATH下获取"],["body","\n"],["body","2、ClassLoader的getResourceAsStream(String name)方法，默认就是从CLASSPATH下获取资源，参数不可以以\"/\"开头"],["body","\n"],["headingLink","为什么要自定义类加载器"],["heading","为什么要自定义类加载器"],["body","\n"],["body","主流的 Java Web 服务器，比如 Tomcat,都实现了自定义的类加载器（一般都不止一个）。因为一个功能健全的 Web 服务器，要解决如下几个问题："],["body","\n\n"],["body","部署在同一个服务器上的两个 Web 应用程序所使用的 Java 类库可以实现相互隔离(不同应用使用不同版本的 同名 Java 类)"],["body","\n"],["body","部署在同一个服务器上的两个 Web 应用程序所使用的 Java 类库可以相互共享"],["body","\n"],["body","支持热部署"],["body","\n\n"],["headingLink","如何判定类是否相同"],["heading","如何判定类是否相同"],["body","\n\n"],["body","类的全名是否相同"],["body","\n"],["body","还要看加载此类的类加载器是否一样(被不同的类加载器加载之后所得到的类，也是不同的)"],["body","\n\n"],["body","两个不同的类加载器 ClassLoaderA和 ClassLoaderB分别读取了这个 Sample.class文件，并定义出两个 java.lang.Class类的实例来表示这个类。这两个实例是不相同的。对于 Java 虚拟机来说，它们是不同的类。试图对这两个类的对象进行相互赋值，会抛出运行时异常 ClassCastException\n"],["body","\n"],["headingLink","tomcat等web容器的类加载有何不同"],["heading","tomcat等web容器的类加载有何不同"],["body","\n\n"],["body","\n"],["body","优先加载 web应用提供的类，而找不到时，才使用 容器提供的类"],["body","\n"],["body","\n"],["body","\n"],["body","但时java核心类，交给 启动类加载器，或者扩展类加载器启动"],["body","\n"],["body","\n\n"],["body","这样既保证 应用之间的 不通版本的类可以隔离，又保证相同版本的类可以共享"],["body","\n"],["headingLink","为什么要使用-classforname加载-sql驱动类"],["heading","为什么要使用 Class.forName加载 sql驱动类"],["body","\n\n"],["body","高版本的不需要手动加载了"],["body","\n\n"],["body","参考链接"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/java引用类型.html"],["title","java引用类型.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JAVA 引用类型"],["body","\n"],["body","\n"],["body","在 java 的引用体系中，存在着强引用，软引用，弱引用，虚引用，这 4 种引用类型。关于这四种引用类型，可以查看强引用、弱引用、软引用、虚引用"],["body","\n"],["body","\n"],["body","引用类型"],["body","被垃圾回收时间"],["body","用途"],["body","生存时间"],["body","\n"],["body","强引用"],["body","从来不会"],["body","对象一般状态"],["body","JVM 停止运行时终止"],["body","\n"],["body","软引用(SoftReference)"],["body","内存不足时"],["body","对象缓存"],["body","内存不足时被回收"],["body","\n"],["body","弱引用(WeakReference)"],["body","垃圾回收时"],["body","对象缓存"],["body","GC 运行后后终止"],["body","\n"],["body","虚引用(PhantomReference)"],["body","Unkonw"],["body","Unkonw"],["body","Unkonw"],["body","\n\n\n"],["h1","强引用"],["body","\n\n"],["body","强引用是使用最普遍的引用。如果一个对象具有强引用，那垃圾回收器绝不会回收它"],["body","\n\n"],["h1","软引用"],["body","\n\n"],["body","如果一个对象只具有软引用，则内存空间足够，垃圾回收器就不会回收它；如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。"],["body","\n"],["body","软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收器回收，Java虚拟机就会把这个软引用加入到与之关联的引用队列中"],["body","\n\n"],["h1","弱引用"],["body","\n\n"],["body","弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程，因此不一定会很快发现那些只具有弱引用的对象。"],["body","\n"],["body","如果这个对象是偶尔的使用，并且希望在使用时随时就能获取到，但又不想影响此对象的垃圾收集，那么你应该用 Weak Reference 来记住此对象"],["body","\n"],["body","弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java 虚拟机就会把这个弱引用加入到与之关联的引用队列中。"],["body","\n\n"],["body","为什么引入？"],["body","\n"],["body","\n"],["body","考虑下面的场景：现在有一个 Product 类代表一种产品，这个类被设计为不可扩展的，而此时我们想要为每个产品增加一个编号。一种解决方案是使用 HashMap<Product, Integer>。于是问题来了，如果我们已经不再需要一个 Product 对象存在于内存中（比如已经卖出了这件产品），假设指向它的引用为 productA，我们这时会给 productA 赋值为 null，然而这时 productA 过去指向的 Product 对象并不会被回收，因为它显然还被 HashMap 引用着。所以这种情况下，我们想要真正的回收一个 Product 对象，仅仅把它的强引用赋值为 null 是不够的，还要把相应的条目从 HashMap 中移除。显然“从 HashMap 中移除不再需要的条目”这个工作我们不想自己完成，我们希望告诉垃圾收集器：在只有 HashMap 中的 key 在引用着 Product 对象的情况下，就可以回收相应 Product 对象了。显然，根据前面弱引用的定义，使用弱引用能帮助我们达成这个目的。我们只需要用一个指向 Product 对象的弱引用对象来作为 HashMap 中的 key 就可以了。"],["body","\n"],["body","\n"],["h1","虚引用"],["body","\n"],["body","如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收。"],["body","\n"],["body","虚引用主要用来跟踪对象被垃圾回收器回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之 关联的引用队列中。"],["body","\n"],["h1","引用图"],["body","\n"],["body","\n"],["h1","引用队列"],["body","\n"],["body","\n"],["body","ReferenceQueue, 当对象被 GC 时, 通知用户线程"],["body","\n"],["body","\n\n"],["body","对于软引用和弱引用，我们希望当一个对象被 gc 掉的时候通知用户线程，进行额外的处理时，就需要使用引用队列了。ReferenceQueue 即这样的一个对象，当一个 obj 被 gc 掉之后，其相应的包装类，即 ref 对象会被放入 queue 中。我们可以从 queue 中获取到相应的对象信息，同时进行额外的处理。比如反向操作，数据清理等。"],["body","\n\n"],["body","在 weakHashMap 中引用队列的使用"],["body","\n"],["headingLink","继承-abstractmapmap-接口和-hashmap-一样都是散列表存储的是-key-value键和值都可以为-null"],["heading","继承 AbstractMap、Map 接口。和 HashMap 一样都是散列表，存储的是 key-value,键和值都可以为 null。"],["body","\n"],["body","清除代码"],["body","\n"],["body","\n"],["body","每次对map的操作都会从 ReferenceQueue 获取失效的key, 然后从map中删除。调用该方法"],["body","\n"],["body","\n"],["body","for (Object x; (x = queue.poll()) != null; ) {\n    synchronized (queue) {\n        @SuppressWarnings(\"unchecked\")\n            Entry<K,V> e = (Entry<K,V>) x;\n        int i = indexFor(e.hash, table.length);\n\n        Entry<K,V> prev = table[i];\n        Entry<K,V> p = prev;\n        while (p != null) {\n            Entry<K,V> next = p.next;\n            if (p == e) {\n                if (prev == e)\n                    table[i] = next;\n                else\n                    prev.next = next;\n                // Must not null out e.next;\n                // stale entries may be in use by a HashIterator\n                e.value = null; // Help GC\n                size--;\n                break;\n            }\n            prev = p;\n            p = next;\n        }\n    }\n}\n"],["body","\n"],["body","weakHashMap总结"],["body","\n\n"],["body","\n"],["body","WeakHashMap 使用(数据 + 链表 ） 存储结构。"],["body","\n"],["body","\n"],["body","\n"],["body","WeakHashMap中的key 是弱引用，垃圾回收时会被回收。"],["body","\n"],["body","\n"],["body","\n"],["body","使用场景： 作为缓存"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/java内存泄露与OOM.html"],["title","java内存泄露与OOM.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","内存泄漏（memory leak ）"],["body","\n"],["body","占着茅坑不拉 shi\n"],["body","\n"],["body","如上图，对象X引用对象Y，X的生命周期为60，Y的生命周期为20，当Y生命周期结束的时候，X依然引用着B，这时候，垃圾回收期是不会回收对象Y的；如果对象X还引用着生命周期比较短的A、B、C...对象A又引用着对象a、b、c...\n\n那么就可能造成大量无用的对象不能被回收，进而占据了内存资源，造成内存泄漏，直到内存溢出。\n"],["body","\n"],["headingLink","内存泄漏的分类"],["heading","内存泄漏的分类"],["body","\n\n"],["body","经常（不断）发生：发生内存泄露的代码会被多次执行，每次执行，泄露一块内存；"],["body","\n"],["body","偶然发生：在某些特定情况下才会发生；"],["body","\n"],["body","一次性：发生内存泄露的方法只会执行一次；"],["body","\n"],["body","隐式泄露：一直占着内存不释放，直到执行结束；严格的说这个不算内存泄露，因为最终释放掉了，但是如果执行时间特别长，也可能会导致内存耗尽。"],["body","\n\n"],["headingLink","内存泄露产生的可能原因"],["heading","内存泄露产生的可能原因"],["body","\n\n"],["body","循环过多或死循环，产生大量对象；"],["body","\n"],["body","静态集合类引起内存泄漏，因为静态集合的生命周期和应用一致，所以静态集合引用的对象不能被释放；"],["body","\n"],["body","单例模式，和静态集合导致内存泄露的原因类似；"],["body","\n"],["body","事件监听（listeners）和回调（callbacks）；"],["body","\n"],["body","各种连接，比如数据库连接、Socket 连接、IO 等，必须显式释放（close）；"],["body","\n"],["body","内存中加载数据量过大；我之前项目有一次上线的时候，应用启动奇慢直到夯死，就是因为代码中会加载一个表中的数据到缓存（内存）中，测试环境只有几百条数据，但是生产环境有几百万的数据。"],["body","\n\n"],["h1","内存溢出（OutofMemory）"],["body","\n"],["body","JVM中常见的两个经典错误"],["body","\n"],["body","StackoverFlowError ：栈溢出"],["body","\n"],["body","OutofMemoryError: java heap space：堆溢出"],["body","\n"],["body","除此之外，还有以下的错误"],["body","\n\n"],["body","java.lang.StackOverflowError 栈溢出"],["body","\n"],["body","java.lang.OutOfMemoryError：java heap space  堆溢出"],["body","\n"],["body","java.lang.OutOfMemoryError：GC overhead limit exceeeded "],["body","\n"],["body","java.lang.OutOfMemoryError：Direct buffer memory"],["body","\n"],["body","java.lang.OutOfMemoryError：unable to create new native thread"],["body","\n"],["body","java.lang.OutOfMemoryError：Metaspace"],["body","\n\n"],["headingLink","栈溢出stackoverflowerror"],["heading","栈溢出StackoverFlowError"],["body","\n"],["body","堆栈溢出，我们有最简单的一个递归调用，就会造成堆栈溢出，也就是深度的方法调用"],["body","\n"],["body","栈一般是512K，不断的深度调用，直到栈被撑破"],["body","\n"],["headingLink","outofmemoryerror"],["heading","OutOfMemoryError"],["body","\n"],["headingLink","java-heap-space"],["heading","java heap space"],["body","\n"],["body","创建了很多对象，导致堆空间不够存储"],["body","\n"],["body","-Xms10m -Xmx20m\n限定堆大小最大为20M,初始为10M\n"],["body","\n"],["headingLink","gc-overhead-limit-exceeded"],["heading","GC overhead limit exceeded"],["body","\n"],["body","GC回收时间过长时会抛出OutOfMemoryError，过长的定义是，超过了98%的时间用来做GC，并且回收了不到2%的堆内存"],["body","\n"],["body","连续多次GC都只回收了不到2%的极端情况下，才会抛出。假设不抛出GC overhead limit 错误会造成什么情况呢？"],["body","\n"],["body","那就是GC清理的这点内存很快会再次被填满，迫使GC再次执行，这样就形成了恶性循环，CPU的使用率一直都是100%，而GC却没有任何成果。"],["body","\n"],["headingLink","达到步骤"],["heading","达到步骤"],["body","\n"],["body","设置JVM参数"],["body","\n"],["body","-Xms10m -Xmx10m -XX:+PrintGCDetails -XX:MaxDirectMemorySize=5m\n"],["body","\n"],["body","代码"],["body","\n"],["body","import java.util.ArrayList;\nimport java.util.List;\n\npublic class GCOverheadLimitDemo {\n    public static void main(String[] args) {\n        int i = 0;\n        List<String> list = new ArrayList<>();\n        try {\n            while(true) {\n                list.add(String.valueOf(++i).intern());\n            }\n        } catch (Exception e) {\n            System.out.println(\"***************i:\" + i);\n            e.printStackTrace();\n            throw e;\n        } finally {\n\n        }\n\n    }\n}\n"],["body","\n"],["body","结果"],["body","\n"],["body","> Task :GCOverheadLimitDemo.main()\n[GC (Allocation Failure) [PSYoungGen: 2048K->506K(2560K)] 2048K->1690K(9728K), 0.0029415 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[GC (Allocation Failure) [PSYoungGen: 2331K->481K(2560K)] 3515K->3313K(9728K), 0.0023773 secs] [Times: user=0.00 sys=0.00, \nException in thread \"main\" java.lang.OutOfMemoryError: GC overhead limit exceeded\n[Full GC (Ergonomics) [PSYoungGen: 2047K->0K(2560K)] [ParOldGen: 7051K->524K(7168K)] 9099K->524K(9728K), [Metaspace: 2682K->2682K(1056768K)], 0.0061980 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] \n\tat java.lang.Integer.toString(Integer.java:401)\n\tat java.lang.String.valueOf(String.java:3099)\n\tat GCOverheadLimitDemo.main(GCOverheadLimitDemo.java:10)\nHeap\n PSYoungGen      total 2560K, used 54K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 2% used [0x00000000ffd00000,0x00000000ffd0d9b8,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n ParOldGen       total 7168K, used 524K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 7% used [0x00000000ff600000,0x00000000ff6833d0,0x00000000ffd00000)\n Metaspace       used 2689K, capacity 4486K, committed 4864K, reserved 1056768K\n  class space    used 290K, capacity 386K, committed 512K, reserved 1048576K\n\n> Task :GCOverheadLimitDemo.main() FAILED\n\nExecution failed for task ':GCOverheadLimitDemo.main()'.\n> Process 'command 'C:/Program Files/Java/jdk1.8.0_141/bin/java.exe'' finished with non-zero exit value 1\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\n"],["body","\n"],["headingLink","direct-buffer-memory"],["heading","Direct buffer memory"],["body","\n"],["body","原因"],["body","\n"],["body","这是由于NIO引起的"],["body","\n"],["body","写NIO程序的时候经常会使用ByteBuffer来读取或写入数据，这是一种基于通道(Channel) 与 缓冲区(Buffer)的I/O方式，它可以使用Native 函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。"],["body","\n"],["body","ByteBuffer.allocate(capability)：第一种方式是分配JVM堆内存，属于GC管辖范围，由于需要拷贝所以速度相对较慢"],["body","\n"],["body","ByteBuffer.allocteDirect(capability)：第二种方式是分配OS本地内存，不属于GC管辖范围，由于不需要内存的拷贝，所以速度相对较快"],["body","\n"],["body","但如果不断分配本地内存，堆内存很少使用，那么JVM就不需要执行GC，DirectByteBuffer对象就不会被回收，这时候堆内存充足，但本地内存可能已经使用光了，再次尝试分配本地内存就会出现OutOfMemoryError，那么程序就崩溃了。"],["body","\n"],["body","一句话说：本地内存不足，但是堆内存充足的时候，就会出现这个问题"],["body","\n"],["body","配置参数"],["body","\n"],["body","我们使用 -XX:MaxDirectMemorySize=5m 配置能使用的堆外物理内存为5M"],["body","\n"],["body","代码"],["body","\n"],["body","import java.nio.ByteBuffer;\n\npublic class DirectBufferDemo {\n    public static void main(String[] args) {\n        ByteBuffer bb = ByteBuffer.allocateDirect(6 * 1024 * 1024);\n\n    }\n}\n"],["body","\n"],["body","日志"],["body","\n"],["body","> Task :DirectBufferDemo.main() FAILED\n[GC (System.gc()) [PSYoungGen: 787K->504K(2560K)] 787K->648K(9728K), 0.0009607 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] \n[Full GC (System.gc()) [PSYoungGen: 504K->0K(2560K)] [ParOldGen: 144K->533K(7168K)] 648K->533K(9728K), [Metaspace: 2649K->2649K(1056768K)], 0.0056731 secs] [Times: user=0.02 sys=0.00, real=0.01 secs] \nException in thread \"main\" java.lang.OutOfMemoryError: Direct buffer memory\n\tat java.nio.Bits.reserveMemory(Bits.java:694)\n\tat java.nio.DirectByteBuffer.<init>(DirectByteBuffer.java:123)\n\tat java.nio.ByteBuffer.allocateDirect(ByteBuffer.java:311)\n\tat DirectBufferDemo.main(DirectBufferDemo.java:5)\nHeap\n PSYoungGen      total 2560K, used 61K [0x00000000ffd00000, 0x0000000100000000, 0x0000000100000000)\n  eden space 2048K, 3% used [0x00000000ffd00000,0x00000000ffd0f750,0x00000000fff00000)\n  from space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)\n  to   space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)\n ParOldGen       total 7168K, used 533K [0x00000000ff600000, 0x00000000ffd00000, 0x00000000ffd00000)\n  object space 7168K, 7% used [0x00000000ff600000,0x00000000ff685708,0x00000000ffd00000)\n Metaspace       used 2682K, capacity 4486K, committed 4864K, reserved 1056768K\n  class space    used 290K, capacity 386K, committed 512K, reserved 1048576K\n\nExecution failed for task ':DirectBufferDemo.main()'.\n> Process 'command 'C:/Program Files/Java/jdk1.8.0_141/bin/java.exe'' finished with non-zero exit value 1\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\n"],["body","\n"],["headingLink","unable-to-create-new-native-thread"],["heading","unable to create new native thread"],["body","\n"],["body","不能够创建更多的新的线程了，也就是说创建线程的上限达到了"],["body","\n\n"],["body","应用创建了太多线程，一个应用进程创建多个线程，超过系统承载极限"],["body","\n"],["body","服务器并不允许你的应用程序创建这么多线程，linux系统默认运行单个进程可以创建的线程为1024个，如果应用创建超过这个数量，就会报 java.lang.OutOfMemoryError:unable to create new native thread"],["body","\n\n"],["headingLink","metaspace"],["heading","Metaspace"],["body","\n"],["body","元空间内存不足，Matespace元空间应用的是本地内存"],["body","\n"],["body","-XX:MetaspaceSize 的处理器大小为20M"],["body","\n"],["body","元空间就是我们的方法区，存放的是类模板，类信息，常量池等"],["body","\n"],["body","Metaspace是方法区HotSpot中的实现，它与持久代最大的区别在于：Metaspace并不在虚拟内存中，而是使用本地内存，也即在java8中，class metadata（the virtual machines internal presentation of Java class），被存储在叫做Matespace的native memory"],["body","\n"],["body","永久代（java8后背元空间Metaspace取代了）存放了以下信息："],["body","\n\n"],["body","虚拟机加载的类信息"],["body","\n"],["body","常量池"],["body","\n"],["body","静态变量"],["body","\n"],["body","即时编译后的代码"],["body","\n\n"],["body","模拟Metaspace空间溢出，我们不断生成类 往元空间里灌输，类占据的空间总会超过Metaspace指定的空间大小"],["body","\n"],["body","指定元空间大小"],["body","\n"],["body","-XX:MetaspaceSize=8m -XX:MaxMetaspaceSize=8m\n"],["body","\n"],["body","spring动态字节码技术"],["body","\n"],["body","public class MetaspaceOutOfMemoryDemo {\n\n    // 静态类\n    static class OOMTest {\n\n    }\n\n    public static void main(final String[] args) {\n        // 模拟计数多少次以后发生异常\n        int i =0;\n        try {\n            while (true) {\n                i++;\n                // 使用Spring的动态字节码技术\n                Enhancer enhancer = new Enhancer();\n                enhancer.setSuperclass(OOMTest.class);\n                enhancer.setUseCache(false);\n                enhancer.setCallback(new MethodInterceptor() {\n                    @Override\n                    public Object intercept(Object o, Method method, Object[] objects, MethodProxy methodProxy) throws Throwable {\n                        return methodProxy.invokeSuper(o, args);\n                    }\n                });\n                enhancer.create();\n            }\n        } catch (Exception e) {\n            System.out.println(\"发生异常的次数:\" + i);\n            e.printStackTrace();\n        } finally {\n\n        }\n\n    }\n}\n"],["body","\n"],["body","> Task :MetaspaceOutOfMemoryDemo.main() FAILED\n1\n2\n3\n4\n......\n311\n312\nException in thread \"main\" java.lang.OutOfMemoryError: Metaspace\n\tat net.sf.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:348)\n\tat net.sf.cglib.proxy.Enhancer.generate(Enhancer.java:492)\n\tat net.sf.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:117)\n\tat net.sf.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:294)\n\tat net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:480)\n\tat net.sf.cglib.proxy.Enhancer.create(Enhancer.java:305)\n\tat MetaspaceOutOfMemoryDemo.main(MetaspaceOutOfMemoryDemo.java:27)\n\nExecution failed for task ':MetaspaceOutOfMemoryDemo.main()'.\n> Process 'command 'C:/Program Files/Java/jdk1.8.0_141/bin/java.exe'' finished with non-zero exit value 1\n\n* Try:\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/GC后对象地址变化了HashCode如何保持不变.html"],["title","GC后对象地址变化了HashCode如何保持不变.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","hashcode的约定"],["heading","HashCode的约定"],["body","\n"],["body","在java.lang.Object的JavaDoc注释上对hashCode方法有三项约定"],["body","\n\n"],["body","当一个对象equals方法所使用的字段不变时，多次调用hashCode方法的值应保持不变"],["body","\n"],["body","如果两个对象equals(Object o)方法是相等的，则hashCode方法值必须相等"],["body","\n"],["body","如果两个对象equals(Object o)方法是不相等，则hashCode方法值不要求相等，但在这种情况下尽量确保hashCode不同，以提升性能。"],["body","\n\n"],["h1","验证"],["body","\n"],["body","public static void main(String[] args) {\n    Object obj = new Object();\n    //获取当前地址\n    long address = VM.current().addressOf(obj);\n    //取hashCode\n    long hashCode = obj.hashCode();\n    System.out.println(\"before GC : The memory address is \" + address);\n    System.out.println(\"before GC : The hash code is \" + hashCode);\n\n    new Object();\n    new Object();\n    new Object();\n\n    System.gc();\n\n    long afterAddress = VM.current().addressOf(obj);\n    long afterHashCode = obj.hashCode();\n    System.out.println(\"after GC : The memory address is \" + afterAddress);\n    System.out.println(\"after GC : The hash code is \" + afterHashCode);\n    System.out.println(\"---------------------\");\n\n    System.out.println(\"memory address = \" + (address == afterAddress));\n    System.out.println(\"hash code = \" + (hashCode == afterHashCode));\n}\n"],["body","\n"],["h1","hashCode不变的原理"],["body","\n"],["body","存储到对象头"],["body","\n"],["body","原来的hashcode值被存储在了某个地方，以备再用。对此以Hotspot为例，最直接的实现方式就是在对象的header区域中划分出来一部分（32位机器上是占用25位，64位机器上占用31）用来存储hashcode值。但这种方式会添加额外信息到对象中，而在大多数情况下hashCode方法并不会被调用，这就造成空间浪费"],["body","\n"],["body","懒计算"],["body","\n"],["body","当hashCode方法未被调用时，object header中用来存储hashcode的位置为0，只有当hashCode方法（本质上是System#identityHashCode）首次被调用时，才会计算对应的hashcode值，并存储到object header中。当再次被调用时，则直接获取计算好hashcode即可。"],["body","\n"],["h1","hashcode生成的方式"],["body","\n"],["body","不同的JVM对hashcode值的生成方式不同。Open JDK中提供了6中生成hash值的方法。"],["body","\n\n"],["body","0：随机数生成器（A randomly generated number.）；"],["body","\n"],["body","1：通过对象内存地址的函数生成（A function of memory address of the object.）；"],["body","\n"],["body","2：硬编码1（用于敏感度测试）（A hardcoded 1 (used for sensitivity testing.)）；"],["body","\n"],["body","3：通过序列（A sequence.）；"],["body","\n"],["body","4：对象的内存地址，强制转换为int。（The memory address of the object, cast to int.）"],["body","\n"],["body","5：线程状态与xorshift结合（Thread state combined with xorshift）；"],["body","\n\n"],["body","其中在OpenJDK6、7中使用的是随机数生成器的（第0种）方式，OpenJDK8、9则采用第5种作为默认的生成方式。所以，单纯从OpenJDK的实现来说，其实hashcode的生成与对象内存地址没有什么关系。而Object类中hashCode方法上的注释，很有可能是早期版本中使用到了第4种方式。"],["body","\n"],["h1","hashCode与identityHashCode"],["body","\n"],["body","重写hashCode"],["body","\n"],["body","上面我们多次提到hashCode方法，还提到identityHashCode方法，如果单纯以Object类中的hashCode方法来说，它与System类中提供了的identityHashCode方法是一致的"],["body","\n"],["body","但在实践中我们往往会重写hashCode方法，此时object header中存储的hashcode值便有两种情况，一个是父类Object的，一个是实现类的。"],["body","\n"],["body","实时调用"],["body","\n"],["body","在OpenJDK中，header中存储的是通过System#identityHashCode获得的hashcode，而重写的hashCode方法的子类的hashcode则是通过实时调用其实现方法获得的。"],["body","\n"],["body","获取固定HashCode"],["body","\n"],["body","System.identityHashCode(person)\n"],["body","\n"],["h1","验证JVM hashCode懒存储"],["body","\n"],["body","public static void main(String[] args) {\n    Object obj = new Object();\n\n    System.out.println(ClassLayout.parseInstance(obj).toPrintable());\n    System.out.println(Integer.toHexString(obj.hashCode()));\n\n    System.out.println(ClassLayout.parseInstance(obj).toPrintable());\n\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/JMM与volatile关键字.html"],["title","JMM与volatile关键字.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JMM"],["body","\n"],["headingLink","java内存模型是什么"],["heading","Java内存模型是什么？"],["body","\n"],["body","Java是跨平台的语言，因为JVM屏蔽了底层操作系统和物理计算机的差异，JMM也是JVM规范定义的一部分，JMM抽象地定义了JVM在计算机内存中的工作方式。"],["body","\n"],["body","JMM规定了所有的变量都存储在主内存（Main Memory）中。每个线程还有自己的工作内存（Working Memory）。"],["body","\n"],["body","\n"],["body","线程的工作内存中保存了该线程使用的主内存变量的副本拷贝，线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的变量。"],["body","\n"],["body","不同的线程之间无法直接访问对方工作内存中的变量，线程之间值的传递都需要通过主内存来完成。"],["body","\n"],["headingLink","线程的数据共享"],["heading","线程的数据共享"],["body","\n\n"],["body","\n"],["body","JMM规定了线程之间的通信必须经过主内存，例如：线程a要将变量传给线程b，首先线程a要将本地工作内存中的变量刷新到主内存中的共享变量，然后线程b去主内存中读取刚刚被线程a更新后的共享变量，才能完成变量的传递。"],["body","\n"],["body","\n"],["body","\n"],["body","线程间的传递需要将变量数据在工作内存和主内存之间来回传递。JMM 定义了 8 个操作来完成主内存和工作内存之间的交互操作。"],["body","\n\n"],["body","assign(赋值)：作用于工作内存的变量，把一个从执行引擎接收到的值赋值给工作内存的变量；"],["body","\n"],["body","store (存储)：作用于工作内存的变量，把工作内存中的变量的值传送到主内存中 , 以便随后的写入操作；"],["body","\n"],["body","write (写入)：作用于主内存的变量, 它把传送给主内存的变量的值写入到主内存的变量中；"],["body","\n"],["body","unlock(解锁)：作用于主内存的变量，把一个处于锁定状态的变量释放出来 , 释放后的变量才可以被其他线程锁定；"],["body","\n"],["body","lock(锁定)：作用于主内存的变量，另外一个需要使用这个变量的线程对变量锁定，把一个主内存的变量标识为线程独占状态；"],["body","\n"],["body","read(读取)：作用于主内存的变量，把变量值从主内存的变量中读取出来，以便随后载入工作内存的变量副本；"],["body","\n"],["body","load(载入)：作用于工作内存的变量，它把从主内存中得到的变量值放入工作内存的变量副本中；"],["body","\n"],["body","use (使用)：作用于工作内存的变量 ，将工作内存中的变量值传递给执行引擎使用。"],["body","\n\n"],["body","至此，两个线程完成了变量的传递。"],["body","\n"],["body","\n\n"],["body","\n"],["headingLink","jmm的三大特性"],["heading","JMM的三大特性"],["body","\n"],["body","JMM是一个抽象的概念，是围绕着并发编程中原子性、可见性、有序性这三个特性来建立的。上面介绍的Java 内存交互的8个基本操作，都遵循这三个特性。"],["body","\n"],["body","原子性"],["body","\n"],["body","一个操作不能被打断，要么全部执行完毕，要么不执行。在这点上有点类似于事务操作，要么全部执行成功，要么回退到执行该操作之前的状态。"],["body","\n"],["body","可见性"],["body","\n"],["body","一个线程对共享变量做了修改之后，其他的线程立即能够看到该变量的这种修改。JMM是通过主内存作为变量传递媒介来实现的。"],["body","\n"],["body","有序性"],["body","\n"],["body","在本线程内观察，所有的操作都是有序的；观察另外的线程，所有的操作都是无序的。编译器和处理器可能会对操作做重排序。对于单线程，编译器和处理器不会改变存在数据依赖关系的两个操作的执行顺序，但不保证多线程的数据依赖。"],["body","\n"],["h1","Volatile关键字"],["body","\n"],["body","volatile关键词作用于变量，具有两种语义：一是保证变量对所有线程的可见性，二是禁止进行指令重排序。下面分别加以说明。"],["body","\n"],["headingLink","线程可见性"],["heading","线程可见性"],["body","\n"],["body","volatile的作用是确保每次对volatile变量的读操作都从主内存里读取变量的值，每次对volatile变量的写操作也都将值写到主内存里。"],["body","\n"],["headingLink","禁止重排序"],["heading","禁止重排序"],["body","\n"],["headingLink","禁止重排序规则"],["heading","禁止重排序规则"],["body","\n"],["body","编译器有时候会对指令进行重排序优化以获得更好的性能"],["body","\n"],["body","volatile禁止重排序的规则如下："],["body","\n\n"],["body","当程序执行到 volatile 变量的读操作或者写操作时，在其前面的操作的更改肯定全部已经进行，且结果对后面的操作可见；在其后面的操作肯定还没有进行；"],["body","\n"],["body","在进行指令优化时，不能将后面的代码放到volatile变量访问语句之前执行，也不能将前面的代码放到volatile变量访问语句之后执行。"],["body","\n\n"],["headingLink","volatile-实现禁止重排序的原理"],["heading","volatile 实现禁止重排序的原理"],["body","\n"],["body","JMM的处理器重排序规则会要求Java编译器在生成指令序列时，插入特定类型的**内存屏障（Memory Barriers）**指令，通过内存屏障来禁止特定类型的处理器重排序。"],["body","\n"],["body","内存屏障类型包括下表列出的四种。"],["body","\n"],["body","\n"],["body","volatile实现禁止重排序的方式就是在编译生成字节码时，在对volatile变量的读写操作前后增加了内存屏障，以阻止和其他指令的执行顺序被重排。"],["body","\n"],["body","操作之间的重排序规则"],["body","\n"],["body","\n\n"],["body","只要第二个操作是volatile写，不管第一个操作是什么都不会重排序"],["body","\n"],["body","只要第一个操作是volatile读，不管第二个操作是什么都不会重排序"],["body","\n"],["body","第一个操作是volatile写，第二个操作是volatile读，也不会发生重排序"],["body","\n\n"],["body","volatile 的使用场景总结起来，就是“一次写入，到处读取”"],["body","\n"],["body","volatile不保证原子性"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/JVM参数.html"],["title","JVM参数.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概述"],["body","\n"],["body","JVM参数有很多，其实我们直接使用默认的JVM参数，不去修改都可以满足大多数情况。但是如果你想在有限的硬件资源下，部署的系统达到最大的运行效率，那么进行相关的JVM参数设置是必不可少的。下面我们就来对这些JVM参数进行详细的介绍。"],["body","\n"],["body","　　JVM参数主要分为以下三种（可以根据书写形式来区分）："],["body","\n"],["h1","标准参数"],["body","\n\n"],["body","\n"],["body","标准参数中包括功能以及输出的结果都是很稳定的，基本上不会随着JVM版本的变化而变化。"],["body","\n"],["body","\n"],["body","\n"],["body","以 - 开头"],["body","\n"],["body","\n\n"],["body","模块操作"],["body","\n"],["body","-p <模块路径>\n--module-path <模块路径>...\n              用 ; 分隔的目录列表, 每个目录\n              都是一个包含模块的目录。\n--upgrade-module-path <模块路径>...\n              用 ; 分隔的目录列表, 每个目录\n              都是一个包含模块的目录, 这些模块\n              用于替换运行时映像中的可升级模块\n--add-modules <模块名称>[,<模块名称>...]\n              除了初始模块之外要解析的根模块。\n              <模块名称> 还可以为 ALL-DEFAULT, ALL-SYSTEM,\n              ALL-MODULE-PATH.\n--list-modules\n              列出可观察模块并退出\n-d <module name>\n--describe-module <模块名称>\n              描述模块并退出\n--validate-modules\n              验证所有模块并退出\n              --validate-modules 选项对于查找\n              模块路径中模块的冲突及其他错误可能非常有用。\n--show-module-resolution\n              在启动过程中显示模块解析输出\n"],["body","\n"],["body","类路径搜索"],["body","\n"],["body","-cp <目录和 zip/jar 文件的类搜索路径>\n-classpath <目录和 zip/jar 文件的类搜索路径>\n--class-path <目录和 zip/jar 文件的类搜索路径>\n              使用 ; 分隔的, 用于搜索类文件的目录, JAR 档案\n              和 ZIP 档案列表。\n              \n"],["body","\n"],["body","版本、详细、帮助"],["body","\n"],["body","-verbose:[class|module|gc|jni]\n              启用详细输出\n-version      将产品版本输出到错误流并退出\n--version     将产品版本输出到输出流并退出\n-showversion  将产品版本输出到错误流并继续\n--show-version\n              将产品版本输出到输出流并继续\n\n-? -h -help\n              将此帮助消息输出到错误流\n--help        将此帮助消息输出到输出流\n-X            将额外选项的帮助输出到错误流\n--help-extra  将额外选项的帮助输出到输出流\n"],["body","\n"],["body","属性与参数"],["body","\n"],["body","-D<名称>=<值>\n              设置系统属性\n@argument 文件\n              一个或多个包含选项的参数文件\n"],["body","\n"],["body","断言"],["body","\n"],["body","-ea[:<程序包名称>...|:<类名>]\n-enableassertions[:<程序包名称>...|:<类名>]\n              按指定的粒度启用断言\n-da[:<程序包名称>...|:<类名>]\n-disableassertions[:<程序包名称>...|:<类名>]\n              按指定的粒度禁用断言\n-esa | -enablesystemassertions\n              启用系统断言\n-dsa | -disablesystemassertions\n              禁用系统断言\n              \n\n"],["body","\n"],["body","代理库"],["body","\n"],["body","-agentlib:<库名>[=<选项>]\n              加载本机代理库 <库名>, 例如 -agentlib:jdwp\n              另请参阅 -agentlib:jdwp=help\n-agentpath:<路径名>[=<选项>]\n              按完整路径名加载本机代理库\n-javaagent:<jar 路径>[=<选项>]\n              加载 Java 编程语言代理, 请参阅 java.lang.instrument\n"],["body","\n"],["body","其他"],["body","\n"],["body","--dry-run     创建 VM 并加载主类, 但不执行 main 方法。\n              此 --dry-run 选项对于验证诸如\n              模块系统配置这样的命令行选项可能非常有用。\n\n\n-splash:<图像路径>\n              使用指定的图像显示启动屏幕\n              自动支持和使用 HiDPI 缩放图像\n              (如果可用)。应始终将未缩放的图像文件名 (例如, image.ext)\n              作为参数传递给 -splash 选项。\n              将自动选取提供的最合适的缩放\n              图像。\n              有关详细信息, 请参阅 SplashScreen API 文档\n\n-disable-@files\n              阻止进一步扩展参数文件\n--enable-preview\n              允许类依赖于此发行版的预览功能\n"],["body","\n"],["h1","X 参数"],["body","\n"],["body","非标准化参数。表示在将来的JVM版本中可能会发生改变，"],["body","\n"],["body","常用"],["body","\n"],["body","-Xmn<大小>        为年轻代（新生代）设置初始和最大堆大小\n                  （以字节为单位）\n-Xms<大小>        设置初始 Java 堆大小\n-Xmx<大小>        设置最大 Java 堆大小\n-Xss<大小>        设置 Java 线程栈大小\n"],["body","\n"],["body","-Xbatch           禁用后台编译\n-Xbootclasspath/a:<以 ; 分隔的目录和 zip/jar 文件>\n                  附加在引导类路径末尾\n-Xcheck:jni       对 JNI 函数执行其他检查\n-Xcomp            在首次调用时强制编译方法\n-Xdebug           为实现向后兼容而提供\n-Xdiag            显示附加诊断消息\n-Xfuture          启用最严格的检查，预期将来的默认值\n-Xint             仅解释模式执行\n-Xinternalversion\n                  显示比 -version 选项更详细的 JVM\n                  版本信息\n-Xloggc:<文件>    将 GC 状态记录在文件中（带时间戳）\n-Xmixed           混合模式执行（默认值）\n\n-Xnoclassgc       禁用类垃圾收集\n-Xrs              减少 Java/VM 对操作系统信号的使用（请参见文档）\n-Xshare:auto      在可能的情况下使用共享类数据（默认值）\n-Xshare:off       不尝试使用共享类数据\n-Xshare:on        要求使用共享类数据，否则将失败。\n-XshowSettings    显示所有设置并继续\n-XshowSettings:all\n                  显示所有设置并继续\n-XshowSettings:locale\n                  显示所有与区域设置相关的设置并继续\n-XshowSettings:properties\n                  显示所有属性设置并继续\n-XshowSettings:vm\n                  显示所有与 vm 相关的设置并继续\n-XshowSettings:system\n                  （仅 Linux）显示主机系统或容器\n                  配置并继续\n-Xverify          设置字节码验证器的模式\n--add-reads <模块>=<目标模块>(,<目标模块>)*\n                  更新 <模块> 以读取 <目标模块>，而无论\n                  模块声明如何。\n                  <目标模块> 可以是 ALL-UNNAMED 以读取所有未命名\n                  模块。\n--add-exports <模块>/<程序包>=<目标模块>(,<目标模块>)*\n                  更新 <模块> 以将 <程序包> 导出到 <目标模块>，\n                  而无论模块声明如何。\n                  <目标模块> 可以是 ALL-UNNAMED 以导出到所有\n                  未命名模块。\n--add-opens <模块>/<程序包>=<目标模块>(,<目标模块>)*\n                  更新 <模块> 以在 <目标模块> 中打开\n                  <程序包>，而无论模块声明如何。\n--illegal-access=<值>\n                  允许或拒绝通过未命名模块中的代码对命名模块中的\n                  类型成员进行访问。\n                  <值> 为 \"deny\"、\"permit\"、\"warn\" 或 \"debug\" 之一\n                  此选项将在未来发行版中删除。\n--limit-modules <模块名>[,<模块名>...]\n                  限制可观察模块的领域\n--patch-module <模块>=<文件>(;<文件>)*\n                  使用 JAR 文件或目录中的类和资源\n                  覆盖或增强模块。\n--disable-@files  禁止进一步扩展参数文件\n--source <版本>\n                  设置源文件模式中源的版本。\n"],["body","\n"],["h1","XX参数"],["body","\n"],["body","这是我们日常开发中接触到最多的参数类型。这也是非标准化参数，相对来说不稳定，随着JVM版本的变化可能会发生变化，主要用于JVM调优和debug。"],["body","\n"],["body","主要有两种类型，Boolean，与key-value"],["body","\n"],["headingLink","boolean类型"],["heading","Boolean类型"],["body","\n"],["body","-XX:[+-]<name> 表示启用或者禁用name属性。"],["body","\n"],["body","-XX:+UseG1GC（表示启用G1垃圾收集器）"],["body","\n"],["headingLink","key-value类型"],["heading","Key-Value类型"],["body","\n"],["body","-XX:<name>=<value> 表示name的属性值为value。\n-XX:MaxGCPauseMillis=500（表示设置GC的最大停顿时间是500ms）\n"],["body","\n"],["h1","参数详解"],["body","\n"],["headingLink","打印jvm参数"],["heading","打印JVM参数"],["body","\n"],["body","打印已经被用户或者当前虚拟机设置过的参数"],["body","\n"],["body","-XX:+PrintCommandLineFlags\n"],["body","\n"],["headingLink","最大堆和最小堆内存设置"],["heading","最大堆和最小堆内存设置"],["body","\n"],["body","-Xms512M：设置堆内存初始值为512M\n-Xmx1024M：设置堆内存最大值为1024M\n\n这里的ms是memory start的简称，mx是memory max的简称，分别代表最小堆容量和最大堆容量。但是别看这里是-X参数，其实这是-XX参数，等价于：\n-XX:InitialHeapSize\n-XX:MaxHeapSize\n"],["body","\n"],["headingLink","dump异常快照"],["heading","Dump异常快照"],["body","\n"],["body","-XX:+HeapDumpOnOutOfMemoryError\n-XX:HeapDumpPath\n\n-XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=./\n"],["body","\n"],["headingLink","发送oom后执行一个脚本"],["heading","发送OOM后，执行一个脚本"],["body","\n"],["body","-XX:OnOutOfMemoryError\n-XX:OnOutOfMemoryError=\"C:\\Program Files\\Java\\jdk1.8.0_152\\bin\\jconsole.exe\"\n\n利用这个参数，我们可以在系统OOM后，自定义一个脚本，可以用来发送邮件告警信息，可以用来重启系统等等。\n"],["body","\n"],["headingLink","打印gc信息"],["heading","打印gc信息"],["body","\n"],["headingLink","打印gc简单信息"],["heading","打印GC简单信息"],["body","\n"],["body","-verbose:gc\n-XX:+PrintGC\n"],["body","\n"],["body","一个是标准参数，一个是-XX参数，都是打印详细的gc信息。通常会打印如下信息："],["body","\n"],["body","[Full GC (Ergonomics)  12907K->11228K(19968K), 0.0541310 secs]\n\n比如第一行，表示GC回收之前有12195K的内存，回收之后剩余1088K，总共内存为125951K\n"],["body","\n"],["headingLink","打印详细gc信息"],["heading","打印详细GC信息"],["body","\n"],["body","-XX:+PrintGCDetails\n-XX:+PrintGCTimeStamps\n"],["body","\n"],["headingLink","指定gc日志以文件输出"],["heading","指定GC日志以文件输出"],["body","\n"],["body","-Xloggc:./gc.log\n\n　　这个在参数用于将gc日志以文件的形式输出，更方便我们去查看日志，定位问题。\n"],["body","\n"],["headingLink","垃圾收集器常用参数"],["heading","垃圾收集器常用参数"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/JVMGC.html"],["title","JVMGC.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","堆内存结构"],["body","\n"],["body","\n"],["body","堆是 Java 虚拟机进行垃圾回收的主要场所，其次要场所是方法区"],["body","\n"],["body","\n"],["body","\n"],["body","在 JDK1.8 之后，堆的永久区取消了由元空间取代"],["body","\n"],["body","\n"],["body","\n"],["h1","JVM 如何判定一个对象是否要回收？"],["body","\n"],["body","\n"],["body","判断一个对象是否应该被回收，主要是看其是否还有引用"],["body","\n"],["body","\n"],["headingLink","引用计数法"],["heading","引用计数法"],["body","\n"],["body","对象有一个引用，即增加一个计数，删除一个引用则减少一个计数。垃圾回收时，只需要收集计数为 0 的对象。此算法最致命的是无法处理循环引用的问题。"],["body","\n"],["headingLink","可达性分析"],["heading","可达性分析"],["body","\n"],["body","是通过一系列可以做为 root 的对象作为起始点，从这些节点开始向下搜索。当一个对象到 root 节点没有任何引用链接时，则证明此对象是可以被回收的。以下对象会被认为是 root 对象："],["body","\n\n"],["body","虚拟机栈 ( 栈帧的本地变量表 ) 中的引用对象。"],["body","\n"],["body","方法区中类静态属性的引用的对象,常量引用的对象。"],["body","\n"],["body","被启动类（bootstrap 加载器）加载的类和创建的对象"],["body","\n"],["body","本地方法栈中JNI引用的对象。(native 方法)"],["body","\n\n"],["body","一句话总结： 只要你的对象被方法的局部变量、类的静态变量给引用了，就不会回收他们。"],["body","\n"],["h1","JVM 垃圾回收算法有哪些"],["body","\n"],["body","\n"],["body","HotSpot 虚拟机采用了可达性分析来进行内存回收，常见的回收算法有标记-清除算法，复制算法和标记整理算法。"],["body","\n"],["body","\n"],["headingLink","标记-清除算法mark-sweep"],["heading","标记-清除算法(Mark-Sweep)"],["body","\n\n"],["body","\n"],["body","从引用根节点开始标记所有被引用的对象，"],["body","\n"],["body","\n"],["body","\n"],["body","遍历整个堆，把未标记的对象清除。此算法需要暂停整个应用，并且会产生内存碎片。"],["body","\n"],["body","\n\n"],["headingLink","复制算法"],["heading","复制算法"],["body","\n"],["body","复制算法把内存空间划为两个相等的区域，每次只使用其中一个区域"],["body","\n"],["body","复制算法"],["body","\n"],["headingLink","标记-整理算法"],["heading","标记-整理算法"],["body","\n"],["body","标记-整理算法结合了**“标记-清除”和“复制”**两个算法的优点。也是分两阶段，"],["body","\n\n"],["body","\n"],["body","从根节点开始标记所有被引用对象，"],["body","\n"],["body","\n"],["body","\n"],["body","遍历整个堆，清除未标记对象并且把存活对象“压缩”到堆的其中一块，按顺序排放。此算法避免了“标记-清除”的碎片问题，同时也避免了“复制”算法的空间问题。"],["body","\n"],["body","\n\n"],["h1","垃圾收集器"],["body","\n"],["body","JVM 中的垃圾收集器主要包括 7 种，即Serial，Serial Old，ParNew，Parallel Scavenge，Parallel Old 以及 CMS，G1 收集器\n"],["body","\n"],["headingLink","serial"],["heading","Serial"],["body","\n\n"],["body","是否需要 STW : 是"],["body","\n"],["body","单线程/多线程: 单"],["body","\n"],["body","算法: 未知"],["body","\n"],["body","作用区域: 新生代"],["body","\n\n"],["headingLink","serial-old"],["heading","Serial Old"],["body","\n\n"],["body","是否需要 STW : 是"],["body","\n"],["body","单线程/多线程: 单"],["body","\n"],["body","算法: 未知"],["body","\n"],["body","作用区域: 老年代"],["body","\n\n"],["body","当 CMS 并发收集发生 Concurrent Mode Failure 时使用。"],["body","\n"],["headingLink","parnew-收集器"],["heading","ParNew 收集器"],["body","\n"],["body","\n"],["body","Serial 收集器的多线程版本"],["body","\n"],["body","\n\n"],["body","\n"],["body","是否需要 STW : 是"],["body","\n"],["body","\n"],["body","\n"],["body","单线程/多线程: 新生代是并行的（多线程的）,老年代是串行的（单线程的）"],["body","\n"],["body","\n"],["body","\n"],["body","作用区域: 新生代 ,老年代"],["body","\n"],["body","\n"],["body","\n"],["body","算法: 新生代采用复制算法，老年代采用标记整理算法"],["body","\n"],["body","\n"],["body","\n"],["body","JVM 参数:"],["body","\n"],["body","-XX：UseParNewGC使用该收集器，"],["body","\n"],["body","-XX：ParallelGCThreads 可以限制线程数量"],["body","\n"],["body","\n\n"],["headingLink","parallel-scavenge"],["heading","Parallel Scavenge"],["body","\n"],["body","\n"],["body","Paralle 收集器特点是更加关注吞吐量（吞吐量就是 cpu 用于运行用户代码的时间与 cpu 总消耗时间的比值）"],["body","\n"],["body","自适应调节策略是 Parallel Scavenge 收集器和 ParNew 的主要区别之一。"],["body","\n"],["body","\n\n"],["body","\n"],["body","是否需要 STW : 是"],["body","\n"],["body","\n"],["body","\n"],["body","单线程/多线程: 多线程"],["body","\n"],["body","\n"],["body","\n"],["body","作用区域: 新生代"],["body","\n"],["body","\n"],["body","\n"],["body","算法: 复制算法"],["body","\n"],["body","\n"],["body","\n"],["body","JVM 参数:"],["body","\n"],["body","-XX:MaxGCPauseMillis 控制最大垃圾收集停顿时间"],["body","\n"],["body","-XX:GCTimeRatio 直接设置吞吐量大小"],["body","\n"],["body","-XX:+UseAdaptiveSizePolicy 可以打开 GC 自适应调节策略"],["body","\n"],["body","\n\n"],["headingLink","parallel-old"],["heading","Parallel Old"],["body","\n"],["body","\n"],["body","Parallel Old 是 Parallel Scavenge 收集器的老年代版本，使用 标记-整理算法。"],["body","\n"],["body","\n\n"],["body","是否需要 STW : 是"],["body","\n"],["body","单线程/多线程: 多线程"],["body","\n"],["body","作用区域: 老年代"],["body","\n"],["body","算法: 标记整理"],["body","\n\n"],["headingLink","cms"],["heading","CMS"],["body","\n"],["body","\n"],["body","Concurrent Mark Sweep,并发标记清除"],["body","\n"],["body","\n"],["body","\n"],["body","CMS 收集器是一种以获取最短回收停顿时间为目标的收集器"],["body","\n"],["body","\n\n"],["body","\n"],["body","是否需要 STW : 很短的时间"],["body","\n"],["body","\n"],["body","\n"],["body","单线程/多线程: 多线程"],["body","\n"],["body","\n"],["body","\n"],["body","作用区域: 老年代"],["body","\n"],["body","\n"],["body","\n"],["body","算法: 标记清除"],["body","\n"],["body","\n"],["body","\n"],["body","步骤"],["body","\n\n"],["body","初始标记：需要“Stop the World”，初始标记仅仅只是标记一下 GC Root 能直接关联到的对象，速度很快。"],["body","\n"],["body","并发标记：是主要标记过程，这个标记过程是和用户线程并发执行的。"],["body","\n"],["body","重新标记：需要“Stop the World”，为了修正并发标记期间因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录（停顿时间比初始标记长，但比并发标记短得多）。"],["body","\n"],["body","并发清除：和用户线程并发执行的，基于标记结果来清理对象。"],["body","\n\n"],["body","\n\n"],["body","\n\n"],["body","\n"],["body","优点"],["body","\n"],["body","STW时间短"],["body","\n"],["body","\n"],["body","\n"],["body","缺点"],["body","\n\n"],["body","对CPU资源非常敏感与用户线程并行, 资源不足导致效率低"],["body","\n"],["body","产生浮动垃圾,  不可以在老年代内存不够用了才进行垃圾回收,必须提前进行垃圾收集\n\n"],["body","由于在应用运行的同时进行垃圾回收，所以有些垃圾可能在垃圾回收进行完成时产生，这样就造成了**“Floating Garbage”**，这些垃圾需要在下次垃圾回收周期时才能回收掉。所以，并发收集器一般需要20%的预留空间用于这些浮动垃圾。"],["body","\n"],["body","-XX:CMSInitiatingOccupancyFraction的值来控制内存使用百分比。如果该值设置的太高，"],["body","\n"],["body","那么在CMS运行期间预留的内存可能无法满足程序所需，会出现Concurrent Mode Failure失败，之后会临时使用Serial Old收集器做为老年代收集器，会产生更长时间的停顿。"],["body","\n\n"],["body","\n"],["body","标记-清除方式会产生内存碎片\n\n"],["body","-XX:UseCMSCompactAtFullCollection来控制是否开启内存整理（无法并发，默认是开启的）。"],["body","\n"],["body","-XX:CMSFullGCsBeforeCompaction用于设置执行多少次不压缩的Full GC后进行一次带压缩的内存碎片整理（默认值是0）。"],["body","\n\n"],["body","\n\n"],["body","\n\n"],["headingLink","g1"],["heading","G1"],["body","\n"],["body","\n"],["body","Garbage-First"],["body","\n"],["body","\n"],["body","G1收集器将新生代和老年代取消了，取而代之的是将堆划分为若干个区域，每个区域都可以根据需要扮演新生代的Eden和Survivor区或者老年代空间，仍然属于分代收集器，区域的一部分包含新生代，新生代采用复制算法，老年代采用标记-整理算法。"],["body","\n"],["body","通过将JVM堆分为一个个的区域（region）,G1收集器可以避免在Java堆中进行全区域的垃圾收集。G1跟踪各个region里面的垃圾堆积的价值大小（回收所获得的空间大小以及回收所需时间的经验值），在后台维护一个优先列表，每次根据回收时间来优先回收价值最大的region。"],["body","\n"],["body","G1收集器的特点："],["body","\n\n"],["body","并行与并发：G1能充分利用多CPU，多核环境下的硬件优势，来缩短Stop the World，是并发的收集器。"],["body","\n"],["body","分代收集：G1不需要其他收集器就能独立管理整个GC堆，能够采用不同的方式去处理新建对象、存活一段时间的对象和熬过多次GC的对象。"],["body","\n"],["body","空间整合：G1从整体来看是基于标记-整理算法，从局部（两个Region）上看基于复制算法实现，G1运作期间不会产生内存空间碎片。"],["body","\n"],["body","可预测的停顿：能够建立可以预测的停顿时间模型，预测停顿时间。"],["body","\n\n"],["body","和CMS收集器类似，G1收集器的垃圾回收工作也分为了四个阶段："],["body","\n\n"],["body","初始标记"],["body","\n"],["body","并发标记"],["body","\n"],["body","最终标记"],["body","\n"],["body","筛选回收"],["body","\n\n"],["body","其中，筛选回收阶段首先对各个Region的回收价值和成本进行计算，根据用户期望的GC停顿时间来制定回收计划。"],["body","\n"],["h1","Java常用版本垃圾收集器"],["body","\n"],["body","java -XX:+PrintCommandLineFlags -version\n"],["body","\n"],["body","jdk1.8默认的新生代垃圾收集器：Parallel Scavenge，老年代：Parallel Old"],["body","\n"],["body","jdk1.9 默认垃圾收集器G1"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/JVM内存模型.html"],["title","JVM内存模型.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JVM内存模型"],["body","\n"],["body","Java虚拟机(Java Virtual Machine=JVM)的内存空间分为五个部分，分别是： "],["body","\n\n"],["body","程序计数器"],["body","\n"],["body","Java虚拟机栈 "],["body","\n"],["body","本地方法栈 "],["body","\n"],["body","堆 "],["body","\n"],["body","方法区"],["body","\n\n"],["headingLink","程序计数器"],["heading","程序计数器"],["body","\n"],["headingLink","什么是程序计数器"],["heading","什么是程序计数器？"],["body","\n"],["body","程序计数器是一块较小的内存空间，可以把它看作当前线程正在执行的字节码的行号指示器。也就是说，程序计数器里面记录的是当前线程正在执行的那一条字节码指令的地址。 \n**注：**但是，如果当前线程正在执行的是一个本地方法，那么此时程序计数器为空。 "],["body","\n"],["headingLink","程序计数器的作用"],["heading","程序计数器的作用"],["body","\n"],["body","程序计数器有两个作用："],["body","\n\n"],["body","字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。"],["body","\n"],["body","在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。 "],["body","\n\n"],["headingLink","程序计数器的特点"],["heading","程序计数器的特点"],["body","\n\n"],["body","是一块较小的存储空间"],["body","\n"],["body","线程私有。每条线程都有一个程序计数器。"],["body","\n"],["body","是唯一一个不会出现OutOfMemoryError的内存区域。"],["body","\n"],["body","生命周期随着线程的创建而创建，随着线程的结束而死亡。 "],["body","\n\n"],["headingLink","java虚拟机栈jvm-stack"],["heading","Java虚拟机栈(JVM Stack)"],["body","\n"],["headingLink","什么是java虚拟机栈"],["heading","什么是Java虚拟机栈？"],["body","\n"],["body","Java虚拟机栈是描述Java方法运行过程的内存模型。 \nJava虚拟机栈会为每一个即将运行的Java方法创建一块叫做“栈帧”的区域，这块区域用于存储该方法在运行过程中所需要的一些信息，这些信息包括："],["body","\n\n"],["body","局部变量表 \n存放基本数据类型变量、引用类型的变量、returnAddress类型的变量。"],["body","\n"],["body","操作数栈"],["body","\n"],["body","动态链接"],["body","\n"],["body","方法出口信息"],["body","\n"],["body","等"],["body","\n\n"],["body","当一个方法即将被运行时，Java虚拟机栈首先会在Java虚拟机栈中为该方法创建一块“栈帧”，栈帧中包含局部变量表、操作数栈、动态链接、方法出口信息等。当方法在运行过程中需要创建局部变量时，就将局部变量的值存入栈帧的局部变量表中。 \n当这个方法执行完毕后，这个方法所对应的栈帧将会出栈，并释放内存空间。\n"],["body","\n"],["body","Java虚拟机栈是由一个个栈帧组成，而每个栈帧中都拥有：局部变量表、操作数栈、动态链接、方法出口信息。 "],["body","\n"],["headingLink","java虚拟机栈的特点"],["heading","Java虚拟机栈的特点"],["body","\n\n"],["body","\n"],["body","方法的局部变量表不会改变"],["body","\n"],["body","局部变量表的创建是在方法被执行的时候，随着栈帧的创建而创建。而且，局部变量表的大小在编译时期就确定下来了，在创建的时候只需分配事先规定好的大小即可。此外，在方法运行的过程中局部变量表的大小是不会发生改变的。"],["body","\n"],["body","\n"],["body","\n"],["body","Java虚拟机栈会出现两种异常：StackOverFlowError和OutOfMemoryError。 "],["body","\n\n"],["body","StackOverFlowError： \n若Java虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前Java虚拟机栈的最大深度的时候，就抛出StackOverFlowError异常。"],["body","\n"],["body","OutOfMemoryError： \n若Java虚拟机栈的内存大小允许动态扩展，且当线程请求栈时内存用完了，无法再动态扩展了，此时抛出OutOfMemoryError异常。"],["body","\n\n"],["body","\n"],["body","\n"],["body","Java虚拟机栈也是线程私有的，每个线程都有各自的Java虚拟机栈，而且随着线程的创建而创建，随着线程的死亡而死亡。"],["body","\n"],["body","\n\n"],["headingLink","本地方法栈"],["heading","本地方法栈"],["body","\n"],["headingLink","什么是本地方法栈"],["heading","什么是本地方法栈？"],["body","\n"],["body","本地方法栈和Java虚拟机栈实现的功能类似，只不过本地方法区是本地方法运行的内存模型。"],["body","\n"],["body","本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。"],["body","\n"],["body","方法执行完毕后相应的栈帧也会出栈并释放内存空间。"],["body","\n"],["body","也会抛出StackOverFlowError和OutOfMemoryError异常。"],["body","\n"],["headingLink","堆"],["heading","堆"],["body","\n"],["body","堆是用来存放对象的内存空间。 \n几乎所有的对象都存储在堆中。 "],["body","\n"],["headingLink","堆的特点"],["heading","堆的特点"],["body","\n\n"],["body","线程共享 \n整个Java虚拟机只有一个堆，所有的线程都访问同一个堆。而程序计数器、Java虚拟机栈、本地方法栈都是一个线程对应一个的。"],["body","\n"],["body","在虚拟机启动时创建"],["body","\n"],["body","垃圾回收的主要场所。"],["body","\n"],["body","可以进一步细分为：新生代、老年代。 \n新生代又可被分为：Eden、From Survior、To Survior。 \n不同的区域存放具有不同生命周期的对象。这样可以根据不同的区域使用不同的垃圾回收算法，从而更具有针对性，从而更高效。"],["body","\n"],["body","堆的大小既可以固定也可以扩展，但主流的虚拟机堆的大小是可扩展的，因此当线程请求分配内存，但堆已满，且内存已满无法再扩展时，就抛出OutOfMemoryError。 "],["body","\n\n"],["headingLink","方法区"],["heading","方法区"],["body","\n"],["headingLink","什么是方法区"],["heading","什么是方法区？"],["body","\n"],["body","Java虚拟机规范中定义方法区是堆的一个逻辑部分。 \n方法区中存放已经被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等。 "],["body","\n"],["headingLink","方法区的特点"],["heading","方法区的特点"],["body","\n\n"],["body","线程共享 \n方法区是堆的一个逻辑部分，因此和堆一样，都是线程共享的。整个虚拟机中只有一个方法区。"],["body","\n"],["body","内存回收效率低 \n方法区中的信息一般需要长期存在，回收一遍内存之后可能只有少量信息无效。 \n对方法区的内存回收的主要目标是：对常量池的回收 和 对类型的卸载。"],["body","\n"],["body","Java虚拟机规范对方法区的要求比较宽松。 \n和堆一样，允许固定大小，也允许可扩展的大小，还允许不实现垃圾回收。 "],["body","\n\n"],["headingLink","什么是运行时常量池"],["heading","什么是运行时常量池？"],["body","\n"],["body","方法区中存放三种数据：类信息、常量、静态变量、即时编译器编译后的代码。其中常量存储在运行时常量池中。"],["body","\n"],["body","我们一般在一个类中通过public static final来声明一个常量。这个类被编译后便生成Class文件，这个类的所有信息都存储在这个class文件中。"],["body","\n"],["body","当这个类被Java虚拟机加载后，class文件中的常量就存放在方法区的运行时常量池中。而且在运行期间，可以向常量池中添加新的常量。如：String类的intern()方法就能在运行期间向常量池中添加字符串常量。"],["body","\n"],["body","当运行时常量池中的某些常量没有被对象引用，同时也没有被变量引用，那么就需要垃圾收集器回收。 "],["body","\n"],["headingLink","元空间"],["heading","元空间"],["body","\n"],["body","元空间的引入"],["body","\n\n"],["body","JDK1.8以前的HotSpot JVM，方法区的实现 使用堆内存，也叫 永久代**(permanent generation)**"],["body","\n"],["body","永久代的GC是和老年代(old generation)捆绑在一起的，无论谁满了，都会触发永久代和老年代的垃圾收集。"],["body","\n"],["body","JDK1.7开始了方法区的部分移除：符号引用(Symbols)移至native heap，字面量(interned strings)和静态变量(class statics)移至java heap。"],["body","\n\n"],["body","为什么要用Metaspace替代方法区\n随着动态类加载的情况越来越多，这块内存变得不太可控，如果设置小了，系统运行过程中就容易出现内存溢出，设置大了又浪费内存。"],["body","\n"],["body","这个元空间是使用本地内存（Native Memory）实现的，也就是说它的内存是不在虚拟机内的，所以可以理论上物理机器还有多个内存就可以分配，而不用再受限于JVM本身分配的内存了。"],["body","\n"],["body","如果使用永久代实现方法区，那么需要手动扩大堆的大小，而使用元空间之后，就可以直接存储在内存当中，不用手动去修改堆的大小。"],["body","\n"],["headingLink","直接内存"],["heading","直接内存"],["body","\n"],["body","直接内存是除Java虚拟机之外的内存，但也有可能被Java使用。"],["body","\n"],["body","在NIO中引入了一种基于通道和缓冲的IO方式。它可以通过调用本地方法直接分配Java虚拟机之外的内存，然后通过一个存储在Java堆中的DirectByteBuffer对象直接操作该内存，而无需先将外面内存中的数据复制到堆中再操作，从而提升了数据操作的效率。"],["body","\n"],["body","直接内存的大小不受Java虚拟机控制，但既然是内存，当内存不足时就会抛出OOM异常。 "],["body","\n"],["h1","示意图"],["body","\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","07.jvm_jvm基础/java对象分析.html"],["title","java对象分析.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","参考链接"],["body","\n"],["h1","Java 对象内存模型"],["body","\n"],["body","\n"],["h1","Object obj=new Object()占用字节"],["body","\n\n"],["body","未开启指针压缩\n占用大小为：8(Mark Word)+8(Class Pointer)=16 字节"],["body","\n"],["body","开启了指针压缩(默认是开启的)\n开启指针压缩后，Class Pointer 会被压缩为 4 字节，最终大小为：8(Mark Word)+4(Class Pointer)+4(对齐填充)=16 字节"],["body","\n\n\n"],["body","\n"],["body","打印 对象内存分布"],["body","\n"],["body","        <dependency>\n            <groupId>org.openjdk.jol</groupId>\n            <artifactId>jol-core</artifactId>\n            <version>0.10</version>\n        </dependency>\n"],["body","\n"],["body","package com.zwx.jvm;\n\nimport org.openjdk.jol.info.ClassLayout;\n\npublic class HeapMemory {\n    public static void main(String[] args) {\n        Object obj = new Object();\n        System.out.println(ClassLayout.parseInstance(obj).toPrintable());\n    }\n}\n"],["body","\n"],["body","\n\n"],["h1","对象的创建"],["body","\n"],["body","\n"],["body","类加载检查"],["body","\n"],["body","当虚拟机遇到一条 new 指令时"],["body","\n\n"],["body","会去检查这个指令的参数能否在常量池中定位到一个类的符号引用"],["body","\n"],["body","并检查代表的类是否已经被类加载器加载。如果没有被加载那么必须先执行这个类的加载。"],["body","\n\n"],["body","内存分配"],["body","\n\n"],["body","虚拟机将为新对象分配内存，对象所需内存的大小在类加载后便可以确定。"],["body","\n"],["body","分配方式\n\n"],["body","Java 堆内存是规整的(使用标记整理或带压缩的垃圾收集器)，使用一个指针指向空闲位置，分配内存既将指针移动与分配大小相等的距离"],["body","\n"],["body","内存不是规整的(使用标记清除的垃圾收集器)，虚拟机维护一个可用内存块列表，分配内存时从列表中找到一个足够大的内存空间划分给对象并更新可用内存列表。"],["body","\n"],["body","无法找到足够的内存时会触发一次 GC"],["body","\n"],["body","分配内存时并发问题解决方案：\n\n"],["body","对分配内存空间的动作进行同步操作---采用 CAS 失败重试的方式保证更新操作的原子性。"],["body","\n"],["body","每个线程在堆中预先分配一块小内存，称为本地线程分配缓冲(Thread Local Allocation Buffer,TLAB)，哪个线程要分配内存就在它的 TLAB 上分配，只有 TLAB 用完并分配新的 TLAB 时才需要同步锁定。通过-XX:+/-UseTLAB 参数来设定。"],["body","\n\n"],["body","\n\n"],["body","\n\n"],["body","初始化"],["body","\n"],["body","虚拟机需要将对象初始化为零值，保证对象的实例变量在代码中不赋初始值就能直接使用。类变量在类加载的准备阶段初始化为零值。"],["body","\n"],["body","设置对象头"],["body","\n"],["body","对对象头进行必要信息的设置，比如如何找到类的元数据信息、对象的 HashCode、GC 分代年龄等。"],["body","\n"],["body","执行 init 方法"],["body","\n"],["body","这时候需要执行<init>方法(构造方法)把对象按照程序员的意愿进行初始化。类变量的初始化操作在类加载的初始化阶段方法完成"],["body","\n"],["h1","创建对象指令重排序问题"],["body","\n"],["body","new 一个对象的简单分解动作："],["body","\n\n"],["body","分配对象的内存空间"],["body","\n"],["body","初始化对象"],["body","\n"],["body","设置引用指向分配的内存地址"],["body","\n\n"],["body","其中 2、3 两步间会发生指令重排序，导致多线程时如果在初始化之前访问对象则会出现问题，单例模式的双重检测锁模式正是会存在这个问题。可以使用 volatile 来禁止指令重排序解决问题"],["body","\n"],["h1","对象的访问"],["body","\n"],["headingLink","句柄访问"],["heading","句柄访问"],["body","\n"],["body","\n"],["body","Java 虚拟机会在堆内划分出一块内存来存储句柄池，那么对象当中存储的就是句柄地址，然后句柄池中才会存储对象实例数据和对象类型数据地址"],["body","\n"],["body","\n"],["body","\n"],["headingLink","直接指针访问"],["heading","直接指针访问"],["body","\n"],["body","\n"],["body","直接指针访问的话对象中就会直接存储对象类型数据。"],["body","\n"],["body","\n"],["headingLink","句柄访问和直接指针访问区别"],["heading","句柄访问和直接指针访问区别"],["body","\n"],["body","\n"],["body","使用句柄访问的时候，会多了一次指针定位,有一个好处就是，假如一个对象被移动(地址改变了),只需要改变句柄池的指向就可以了，不需要修改 reference 对象内的指向,而如果使用直接指针访问，就还需要到局部变量表内修改 reference 指向。"],["body","\n"],["body","\n"],["h1","javaGC"],["body","\n"],["body","对象分代年龄"],["body","\n\n"],["body","在 Java 对象头当中的 Mark Word 存储了对象的分代年龄, 一个对象的分代年龄可以理解为垃圾回收次数,当一个对象经过一次垃圾回收之后还存在,那么分代年龄就会加 1"],["body","\n"],["body","Java 堆内存中按照分代年龄来划分，分为 Young 区和 Old 区，对象分配首先会到 Young 区，达到一定分代年龄(-XX:MaxTenuringThreshold 可以设置大小，默认为 15)就会进入 Old 区(注意：如果一个对象太大，那么就会直接进入 Old 区)。"],["body","\n\n"],["body","为什么 jvm 要划分 GC 分区"],["body","\n\n"],["body","之所以会这么划分是因为如果整个堆只有一个区的话，那么垃圾回收的时候每次都需要把堆内所有对象都扫描一遍，浪费性能"],["body","\n"],["body","而其实大部分 Java 对象的生命周期都是很短的，一旦一个对象回收很多次都回收不掉，可以认为下一次垃圾回收的时候可能也回收不掉"],["body","\n"],["body","只有当 Young 区在进行垃圾回收之后还是没有腾出空间，那么再去触发 Old 区的垃圾回收。"],["body","\n\n"],["body","不连续导致的内存不连续?"],["body","\n"],["body","\n"],["body","堆上分配的对象,在内存中是不连续的,有时候,明明有空间,是因为空间不连续，导致对象申请内存失败，导致触发 GC 了"],["body","\n"],["body","\n"],["body","解决的思路: 就是把 Young 区的对象按顺序放好"],["body","\n"],["body","所以就产生了一个方法，把 Young 区再次划分一下，分为 2 个区：Eden 区和Survivor 区。"],["body","\n"],["body","\n"],["body","工作流程"],["body","\n"],["body","一个对象来了之后，先分配到 Eden 区，Eden 区满了之后，触发 GC，经过 GC 之后，为了防止空间不连续，把幸存下来的对象复制到 Survivor 区，然后 Eden 区就可以完整清理掉了"],["body","\n"],["body","前提是:大部分对象都是生命周期极短的，基本一次垃圾回收就可以把 Eden 区大部分对象回收掉"],["body","\n"],["body","Survivor 区还是不连续?"],["body","\n"],["body","\n"],["body","触发 GC 的时候 Survivor 区也会一起回收,Survivor 区又可能产生空间碎片,导致不连续了"],["body","\n"],["body","\n"],["body","解决办法: 把 Survivor 区给一分为二\n"],["body","\n"],["body","工作流程"],["body","\n"],["body","首先还是在 Eden 区分配空间，Eden 区满了之后触发 GC，GC 之后把幸存对象 复制到 S0 区(S1 区是空的)，然后继续在 Eden 区分配对象，再次触发 GC 之后如果发现 S0 区放不下了(产生空间碎片，实际还有空间)，那么就把 S0 区对象复制到 S1 区，并把幸存对象也复制到 S1 区，这时候 S0 区是空的了，并依次反复操作，假如说 S0 区或者 S1 区空间对象复制移动了之后还是放不下，那就说明这时候是真的满了，那就去老年区借点空间过来（这就是担保机制，老年代需要提供这种空间分配担保），假如说老年区空间也不够了，那就会触发 Full GC，如果还是不够，那就会抛出 OutOfMemeoyError 异常了。"],["body","\n"],["body","注意：为了确保 S0 和 S1 两个区域之间每次复制都能顺利进行，S0 和 S1 两个区的大小必须要保持一致，而且同一时间有一个区域一定是空的。虽然说这种做法是会导致了一小部分空间的浪费，但是综合其他性能的提升来说，是值得的。"],["body","\n"],["body","当 Young 区的对象达到设置的分代年龄之后，对象会进入 Old 区，Old 区满了之后会触发 Full GC，如果还是清理不掉空间，那么就抛出 OutOfMemeoyError 异常。"],["body","\n"],["h1","关于 JavaGC 的名词"],["body","\n\n"],["body","垃圾回收：简称 GC。"],["body","\n"],["body","Minor GC：针对新生代的 GC"],["body","\n"],["body","Major GC：针对老年代的 GC，一般老年代触发 GC 的同时也会触发 Minor GC，也就等于触发了 Full GC。"],["body","\n"],["body","Full GC：新生代+老年代同时发生 GC。"],["body","\n"],["body","Young 区：新生代"],["body","\n"],["body","Old 区：老年代"],["body","\n"],["body","Eden 区：暂时没发现有什么中文翻译(伊甸园?)"],["body","\n"],["body","Surcivor 区：幸存区"],["body","\n"],["body","S0 和 S1：也称之为 from 区和 to 区，注意 from 和 to 两个区是不断互换身份的，且 S0 和 S1 一定要相等，并且保证一块区域是空的"],["body","\n\n"],["body","内存分配流程图\n"],["body","\n"],["h1","jdk8 内存结构"],["body","\n"],["body","java 内存分布"],["body","\n"],["body","\n"],["body","元数据空间"],["body","\n"],["body","\n"],["body","在 jdk8 以后,方法区( 也就是永久代), 变为 元数据空间\n"],["body","\n"],["body","\n"],["body","元数据空间与 永久代的区别"],["body","\n"],["body","元空间并不在虚拟机中，而是使用本地内存"],["body","\n"],["body","元空间是方法区的在 HotSpot jvm 中的实现，方法区主要用于存储类的信息、常量池、方法数据、方法代码等。方法区逻辑上属于堆的一部分，但是为了与堆进行区分，通常又叫“非堆”。"],["body","\n"],["body","常用配置参数"],["body","\n"],["body","MetaspaceSize"],["body","\n"],["body","初始化的 Metaspace 大小，控制元空间发生 GC 的阈值。GC 后，动态增加或降低 MetaspaceSize。在默认情况下，这个值大小根据不同的平台在 12M 到 20M 浮动。使用 Java -XX:+PrintFlagsInitial 命令查看本机的初始化参数"],["body","\n"],["body","MaxMetaspaceSize"],["body","\n"],["body","限制 Metaspace 增长的上限，防止因为某些情况导致 Metaspace 无限的使用本地内存，影响到其他程序。在本机上该参数的默认值为 4294967295B（大约 4096MB）。"],["body","\n"],["body","MinMetaspaceFreeRatio"],["body","\n"],["body","当进行过 Metaspace GC 之后，会计算当前 Metaspace 的空闲空间比，如果空闲比小于这个参数（即实际非空闲占比过大，内存不够用），那么虚拟机将增长 Metaspace 的大小。默认值为 40，也就是 40%。设置该参数可以控制 Metaspace 的增长的速度，太小的值会导致 Metaspace 增长的缓慢，Metaspace 的使用逐渐趋于饱和，可能会影响之后类的加载。而太大的值会导致 Metaspace 增长的过快，浪费内存。"],["body","\n"],["body","MaxMetasaceFreeRatio"],["body","\n"],["body","当进行过 Metaspace GC 之后， 会计算当前 Metaspace 的空闲空间比，如果空闲比大于这个参数，那么虚拟机会释放 Metaspace 的部分空间。默认值为 70，也就是 70%。"],["body","\n"],["body","MaxMetaspaceExpansion"],["body","\n"],["body","Metaspace 增长时的最大幅度。在本机上该参数的默认值为 5452592B（大约为 5MB）。"],["body","\n"],["body","MinMetaspaceExpansion"],["body","\n"],["body","Metaspace 增长时的最小幅度。在本机上该参数的默认值为 340784B（大约 330KB 为）。"],["body","\n"],["body","\n"],["body","可以配合 JVisualVM 来看"],["body","\n"],["body","\n"],["h1","Java 对象头"],["body","\n"],["body","\n"],["body","额外参考链接"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","29.其他_JSR/jar包规范.html"],["title","jar包规范.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JAR File Specification"],["body","\n"],["headingLink","introduction"],["heading","Introduction"],["body","\n\n"],["body","JAR文件是一种基于流行的ZIP文件格式的文件格式，用于将许多文件聚合到一个文件中"],["body","\n"],["body","JAR文件本质上是一个zip文件，其中包含一个可选的META-INF目录。"],["body","\n"],["body","可以从 jar 命令行创建 或者 使用  java.util.jar API"],["body","\n"],["body","jar包不仅用于存储jar文件，META-INF 如果存在，可以用于 存储包，扩展配置数据，例如：安全，版本控制，扩展和服务"],["body","\n\n"],["headingLink","the-meta-inf-directory"],["heading","The META-INF directory"],["body","\n"],["body","The following files/directories in the META-INF directory are recognized and interpreted by the Java 2 Platform to configure applications, extensions, class loaders and services:"],["body","\n"],["body","Java 2 Platform 识别并解释了META-INF目录中的以下文件/目录，以配置应用程序，扩展，类加载器和服务"],["body","\n"],["headingLink","manifestmf"],["heading","MANIFEST.MF"],["body","\n"],["body","The manifest file that is used to define extension and package related data."],["body","\n"],["headingLink","indexlist"],["heading","INDEX.LIST"],["body","\n"],["body","\n"],["body","This file is generated by the new \"-i\" option of the jar tool"],["body","\n"],["body","\n"],["body","which contains location information for packages defined in an application or extension. "],["body","\n"],["body","It is part of the JarIndex implementation and used by class loaders to speed up their class loading process."],["body","\n"],["headingLink","xsf"],["heading","x.SF"],["body","\n"],["body","The signature file for the JAR file. 'x' stands for the base file name."],["body","\n"],["headingLink","xdsa"],["heading","x.DSA"],["body","\n"],["body","The signature block file associated with the signature file with the same base file name. "],["body","\n"],["body","This file stores the digital signature of the corresponding signature file."],["body","\n"],["headingLink","services"],["heading","services/"],["body","\n"],["body","This directory stores all the service provider configuration files(SPI文件)"],["body","\n"],["headingLink","name-value-pairs-and-sections"],["heading","Name-Value pairs and Sections"],["body","\n"],["body","定义一些格式约定，在 manifest 清单、签名文件中的数据 以 name: value 键值对，受 RFC822启发"],["body","\n"],["body","一组 键值对 叫 组，一个或多个空行 分隔组"],["body","\n"],["body","二进制的数据以 base64表示，对于导致行长超过72个字节的二进制数据，需要连续进行。二进制数据的示例是摘要和签名。jar实现应支持最大65535字节的值。"],["body","\n"],["body","语法申明"],["body","\n"],["body","Specification:\n  section:                       *header +newline\n  nonempty-section:      +header +newline\n  newline:                      CR LF | LF | CR (not followed by LF)\n  header:                       name : value\n  name:                         alphanum *headerchar\n  value:                          SPACE *otherchar newline *continuation\n  continuation:              SPACE *otherchar newline\n  alphanum:                  {A-Z} | {a-z} | {0-9}\n  headerchar:                alphanum | - | _\n  otherchar:                  any UTF-8 character except NUL, CR and LF\n; Also: To prevent mangling of files sent via straight e-mail, no\n; header will start with the four letters \"From\".\n"],["body","\n"],["headingLink","jar-manifest"],["heading","JAR Manifest"],["body","\n"],["headingLink","overview"],["heading","Overview"],["body","\n"],["body","jar文件 manifest 包含一个  主分区，以及跟随一系列 单独的 jar文件条目"],["body","\n"],["body","manifest 清单的 主分区是指文件最先开始到 第一个空行"],["body","\n"],["body","包括 安全和 jar本身的配置信息，还有组成jar所依赖的应用或扩展"],["body","\n"],["body","主分区还定义了适用于每个单独清单条目的主要属性"],["body","\n"],["body","此部分中的任何属性名称都不能等于“Name”。"],["body","\n"],["body","其他 单独分区定义了各种各样的属性"],["body","\n"],["body","并非JAR文件中的所有文件都需要在清单中作为条目列出，但必须列出所有要签名的文件。清单文件本身不能列出"],["body","\n"],["body","每个分区 都必须以名称为“Name”的属性开头，该值必须是文件的相对路径，或者是引用外部数据的绝对URL。"],["body","\n"],["body","申明多个单独分区且 文件entry是一样的，属性会合并，相同属性的最后一个会胜选"],["body","\n"],["body","未知属性被忽略，可以由应用程序去实现"],["body","\n"],["body","Manifest Specification:\n  manifest-file:                    main-section newline *individual-section\n  main-section:                    version-info newline *main-attribute\n  version-info:                      Manifest-Version : version-number\n  version-number :               digit+{.digit+}*\n  main-attribute:                 (any legitimate main attribute) newline\n  individual-section:             Name : value newline *perentry-attribute\n  perentry-attribute:            (any legitimate perentry attribute) newline\n  newline :                            CR LF | LF | CR (not followed by LF)\n   digit:                                {0-9} \n"],["body","\n"],["body","main-attribute 指的是出现在 主分区中的 属性"],["body","\n"],["body","per-entry attribute 指的是 出现在 独立分区中的属性"],["body","\n"],["body","如果同时出现在main分区，和独立分区，则独立分区优先"],["body","\n"],["headingLink","main-attributes"],["heading","Main Attributes"],["body","\n"],["body","general main attributes "],["body","\n"],["body","\n"],["body","通用主属性"],["body","\n"],["body","\n\n"],["body","Manifest-Version: 定义manifest的版本."],["body","\n"],["body","Created-By: 定义这个jar文件是被哪一个vendor 实现的"],["body","\n"],["body","Signature-Version:  jar文件的签名版本"],["body","\n"],["body","Class-Path:此属性的值指定此应用程序或扩展程序需要的扩展程序或库的相对URL。URLs 由一个或多个空格分隔. 应用程序或扩展类加载器使用此属性的值来构造其内部搜索路径。"],["body","\n\n"],["body","attribute defined for stand-alone applications"],["body","\n"],["body","\n"],["body","独立应用程序,捆绑到可执行jar文件中的独立应用程序使用此属性组，java -jar x.jar"],["body","\n"],["body","\n\n"],["body","Main-Class: Java启动类文件相对路径,必须有 .class 后缀"],["body","\n\n"],["body","attributes defined for applets "],["body","\n"],["body","attribute defined for extension identification"],["body","\n"],["body","attributes defined for extension and package"],["body","\n\n"],["body","Implementation-Title: The value is a string that defines the title of the extension implementation."],["body","\n"],["body","Implementation-Version: The value is a string that defines the version of the extension implementation."],["body","\n"],["body","Implementation-Vendor: The value is a string that defines the organization that maintains the extension implementation."],["body","\n"],["body","Implementation-Vendor-Id: The value is a string id that uniquely defines the organization that maintains the extension implementation."],["body","\n"],["body","Implementation-URL: This attribute defines the URL from which the extension implementation can be downloaded from."],["body","\n"],["body","Specification-Title: The value is a string that defines the title of the extension specification."],["body","\n"],["body","Specification-Version: The value is a string that defines the version of the extension specification."],["body","\n"],["body","Specification-Vendor: The value is a string that defines the organization that maintains the extension specification."],["body","\n"],["body","Sealed: This attribute defines whether this JAR file is sealed or not. The value can be either \"true\" or \"false\", case is ignored. If it is set to \"true\", then all the packages in the JAR file are defaulted to be sealed, unless they are defined otherwise individually."],["body","\n\n"],["headingLink","per-entry-attributes"],["heading","Per-Entry Attributes"],["body","\n"],["body","例如"],["body","\n"],["body","Manifest-Version: 1.0\nCreated-By: 1.2 (Sun Microsystems Inc.)\nSealed: true\nName: foo/bar/\nSealed: false\n"],["body","\n"],["body","所有在a.jar中存档的软件包都是密封的 foo.bar除外"],["body","\n"],["body","per-entry attribute 有以下配置组"],["body","\n"],["body","attributes defined for file contents:"],["body","\n"],["body","\n"],["body","文件内容相关的属性"],["body","\n"],["body","\n\n"],["body","Content-Type: 指定 文件的 MIME类型 值必须是 type/subtype. RFC 1521 and 1522 对MIME类型进行了定义"],["body","\n\n"],["body","attributes defined for package versioning and sealing information"],["body","\n"],["body","\n"],["body","包的版本控制与 封装信息"],["body","\n"],["body","\n"],["body","与 主分区 的属性一致，会覆盖主分区的同名属性"],["body","\n"],["body","attribute defined for beans objects"],["body","\n"],["body","\n"],["body","bean对象"],["body","\n"],["body","\n\n"],["body","Java-Bean: 指定的jar文件条目是否为Java Beans对象. true 或 false"],["body","\n\n"],["body","attributes defined for signing"],["body","\n"],["body","\n"],["body","签名与校验"],["body","\n"],["body","\n\n"],["body","x-Digest-y: 此属性的值存储实际的摘要值. 前缀“ x”指定算法名称，可选的后缀“ y”表示摘要值应针对哪种语言进行验证。"],["body","\n"],["body","Magic: 这是一个可选属性，应用程序可以使用该属性来指示验证者应如何计算清单条目中包含的摘要值。\n此属性的值是一组用逗号分隔的上下文特定的字符串。"],["body","\n\n"],["headingLink","signed-jar-file"],["heading","Signed JAR File"],["body","\n"],["body","A JAR file can be signed by using the command line jarsigner tool or directly through the java.security API. Every file entry, including non-signature related files in the META-INF directory, will be signed if the JAR file is signed by the jarsigner tool. The signature related files are:"],["body","\n"],["body","可以使用命令行， jarsigner 工具或直接通过java.security API 来对JAR文件进行签名。 \n如果JAR文件由jarsigner工具签名，则每个文件条目（包括META-INF目录中与签名无关的文件）都将被签名。\n与签名相关的文件是："],["body","\n\n"],["body","META-INF/MANIFEST.MF"],["body","\n"],["body","META-INF/*.SF"],["body","\n"],["body","META-INF/*.DSA"],["body","\n"],["body","META-INF/*.RSA"],["body","\n"],["body","META-INF/SIG-*"],["body","\n\n"],["body","如果此类文件位于“ META-INF”子目录中，则它们不被视为与签名相关。"],["body","\n"],["body","这些文件名的不区分大小写的版本将被保留，也不会被签名。"],["body","\n"],["body","可以使用java.security API对JAR文件的子集进行签名。"],["body","\n"],["body","已签名的JAR文件与原始JAR文件完全相同，不同之处在于已更新其清单，并将两个附加文件添加到“ META-INF”目录中：签名文件和 signature block file。\n当不使用jarsigner时，签名程序必须构造签名文件和签名块文件。"],["body","\n"],["body","对于在签名的jar文件中签名的每个文件条目，只要清单中不存在该清单条目，就会为其创建一个单独的清单条目"],["body","\n"],["body","每个清单条目 列出一个或多个 摘要属性"],["body","\n"],["headingLink","signature-file"],["heading","Signature File"],["body","\n"],["headingLink","signature-validation"],["heading","Signature Validation"],["body","\n"],["headingLink","the-magic-attribute"],["heading","The Magic Attribute"],["body","\n"],["headingLink","digital-signatures"],["heading","Digital Signatures"],["body","\n"],["headingLink","notes-on-manifest-and-signature-files"],["heading","Notes on Manifest and Signature Files"],["body","\n"],["headingLink","jar-index"],["heading","JAR Index"],["body","\n"],["headingLink","overview-1"],["heading","Overview"],["body","\n"],["body","优化网络应用程序"],["body","\n"],["body","从1.3开始，引入JarIndex来优化网络应用程序（尤其是小应用程序）的类加载器的类搜索过程。\n最初，小程序类加载器使用简单的线性搜索算法来搜索其内部搜索路径中的每个元素，该内部搜索路径是由“ ARCHIVE”标签或“ Class-Path”主属性构造的。\n类加载器将下载并打开其搜索路径中的每个元素，直到找到该类或资源为止。\n如果类加载器尝试查找不存在的资源，则必须下载应用程序或applet中的所有jar文件。\n对于大型网络应用程序和小程序，这可能导致启动缓慢，响应缓慢以及网络带宽浪费。 \nJarIndex机制收集小程序中定义的所有jar文件的内容，并将信息存储在小程序类路径上第一个jar文件的索引文件中。\n在下载第一个jar文件之后，小应用程序类加载器将使用收集的内容信息来高效下载jar文件。"],["body","\n"],["body","Index.list"],["body","\n"],["body","现有的jar工具已得到增强，能够检查jar文件列表并生成有关哪些类和资源驻留在哪个jar文件中的目录信息。\n该目录信息存储在根jar文件的META-INF目录中名为INDEX.LIST的简单文本文件中。\n当类加载器加载根jar文件时，它将读取“ INDEX.LIST”文件，并使用它来构建从文件名和程序包名到jar文件名列表的映射的哈希表。\n为了找到类或资源，类加载器查询哈希表以找到正确的jar文件，然后在必要时下载它。"],["body","\n"],["body","Index.list 过时"],["body","\n"],["body","一旦类加载器在一个特定的jar文件中找到一个“ INDEX.LIST”文件，它就总是信任其中列出的信息。\n如果找到特定类的映射，但类加载器无法通过跟踪链接找到它，则抛出InvalidJarIndexException\n发生这种情况时，应用程序开发人员应在扩展名上重新运行“ jar”工具，以将正确的信息添加到索引文件中。"],["body","\n"],["body","文件尽量小"],["body","\n"],["body","为了防止给应用程序增加过多的空间开销并加快内存中哈希表的构建速度，INDEX.LIST文件应保持尽可能小。"],["body","\n\n"],["body","对于具有非空程序包名称的类，映射记录在程序包级别。\n通常，一个程序包名称映射到一个jar文件，"],["body","\n"],["body","但是如果一个特定的程序包跨越一个以上的jar文件，则此程序包的映射值将是jar文件列表。"],["body","\n"],["body","对于具有非空目录前缀的资源文件，映射也记录在目录级别。"],["body","\n"],["body","仅对于包名称为空的类以及位于根目录中的资源文件，映射将在单个文件级别记录。"],["body","\n\n"],["headingLink","index-file-specification"],["heading","Index File Specification"],["body","\n"],["body","INDEX.LIST文件包含一个或多个节，每个节由单个空白行分隔。\n每个部分定义了一个特定jar文件的内容，其中的头定义了jar文件的路径名，后跟一个包或文件名的列表，每行一个。\n所有的jar文件路径都相对于根jar文件的代码库。\n这些路径名的解析方式与当前扩展机制对捆绑扩展名的解析方式相同。 \nUTF-8编码用于支持索引文件中文件名或包名中的非ASCII字符。"],["body","\n"],["headingLink","service-provider"],["heading","Service Provider"],["body","\n"],["body","META-INF/services SPI 机制 详见 SPI"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","29.其他_JSR/README.html"],["title","JSR - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","java体系"],["body","\n"],["body","Java分为三个体系，分别为 "],["body","\n\n"],["body","Java SE（J2SE，Java to Platform Standard Edition，标准版），"],["body","\n"],["body","JavaEE（J2EE，Java to Platform, Enterprise Edition，企业版），"],["body","\n"],["body","Java ME（J2ME，Java to Platform Micro Edition，微型版）。"],["body","\n\n"],["h1","概述"],["body","\n"],["body","JCP官网"],["body","\n\n"],["body","\n"],["body","任何一门语言的问世和流传，以及取得这样大的影响力都离不开厂商、组织、开发者与用户们的共同参与，而Sun公司为了发展和更新这门语言组成了一个开放性国际组织JCP（Java Community Process），"],["body","\n"],["body","\n"],["body","\n"],["body","任何想要提议加入Java功能或特性都必须以JSR正式文件（Java Specification Request）（Java 规范提案），进行提交然后经过JCP执行委员会投票，通过即成为最终标准文件"],["body","\n"],["body","\n"],["body","\n"],["body","然后必须根据这个JSR做出免费且开发原始码的参考实现RI（Reference Implementation），并提供技术兼容性测试工具包TCK（Technology Compatibility Kit），厂商可以根据JSR实现产品。"],["body","\n"],["body","\n"],["body","\n"],["body","JCP维护的规范包括J2ME、J2SE、J2EE，XML，OSS，JAIN等。组织成员可以提交JSR（Java Specification Requests），通过特定程序以后主要包括（Java技术规范、参考实现（RI）、技术兼容包（TCK）)，进入到下一版本的规范里面。"],["body","\n"],["body","\n"],["body","\n"],["body","所有声称符合J2EE规范的J2EE类产品（应用服务器、应用软件、开发工具等），必须通过该组织提供的TCK兼容性测试（需要购买测试包），通过该测试后，需要缴纳J2EE商标使用费。两项完成，即是通过J2EE认证（Authorized Java Licensees of J2EE）。"],["body","\n"],["body","\n\n"],["body","现在Java无疑已经成为了业界共同制定的一个标准，每一个标准也代表着业界面临的一些问题，而一个JSR规范标准可以有多种技术解决方案。"],["body","\n\n"],["body","下面列出了基于java三个平台的一系列标准JSR（标准）链接：\n\n"],["body","Java EE (54 JSRs) （https://www.jcp.org/en/jsr/platform?listBy=3&listByType=platform）"],["body","\n"],["body","Java SE (57 JSRs) （https://www.jcp.org/en/jsr/platform?listBy=2&listByType=platform）"],["body","\n"],["body","Java ME (85 JSRs) （https://www.jcp.org/en/jsr/platform?listBy=1&listByType=platform）"],["body","\n\n"],["body","\n\n"],["h1","以JTA为样例"],["body","\n"],["body","现在我们进入到一个（Java EE (54 JSRs)）标准的JSR下载页面（JSR-000907 JTA）的API标准："],["body","\n"],["body","其中有下载链接有两个文档"],["body","\n\n"],["body","从字面意思明白一个是 这些规则及标准的评估，"],["body","\n"],["body","一个是这些规则的实施，打开实施规则的文档可以看出\n\n"],["body","这些标准提供了一些接口文档和协议。"],["body","\n"],["body","里面提供了一些面对开发人员的接口以及面对具体实现接口的各个软件公司，也就是这些接口的具体的实现包，由各个软件厂商实现。"],["body","\n\n"],["body","\n\n"],["h1","JSR规范整理"],["body","\n"],["body","JSR编号"],["body","模块与功能"],["body","\n"],["body","JSR 310"],["body","Java Date与Time API (时间与日期API)"],["body","\n"],["body","JSR 315"],["body","Java Servlet 3.0（servlet规范）"],["body","\n"],["body","JSR 303"],["body","Bean Validation1.0（bean检验）"],["body","\n"],["body","JSR 380"],["body","Bean Validation 2.0"],["body","\n"],["body","JSR 317"],["body","Java Persistence 2.0（持久化）"],["body","\n"],["body","JSR 338"],["body","Java Persistence 2.2"],["body","\n"],["body","JSR 907"],["body","Java Transaction API (JTA)（事务管理器）"],["body","\n"],["body","JSR 250"],["body","Common Annotations for the Java Platform"],["body","\n"],["body","JSR 107"],["body","JCache API（缓存）"],["body","\n\n\n"],["h1","Java EE 8技术对应的JSR标准"],["body","\n"],["body","Java EE 8 基于Java EE 7. 下面是Java EE 8在java EE7之上的更新或者新增JSR:"],["body","\n\n"],["body","JSR 366 – Java EE 8 Platform"],["body","\n"],["body","JSR 365 – Contexts and Dependency Injection (CDI) 2.0"],["body","\n"],["body","JSR 367 – The Java API for JSON Binding (JSON-B) 1.0"],["body","\n"],["body","JSR 369 – Java Servlet 4.0"],["body","\n"],["body","JSR 370 – Java API for RESTful Web Services (JAX-RS) 2.1"],["body","\n"],["body","JSR 372 – JavaServer Faces (JSF) 2.3"],["body","\n"],["body","JSR 374 – Java API for JSON Processing (JSON-P)1.1"],["body","\n"],["body","JSR 375 – Java EE Security API 1.0"],["body","\n"],["body","JSR 380 – Bean Validation 2.0"],["body","\n"],["body","JSR 250 – Common Annotations 1.3"],["body","\n"],["body","JSR 338 – Java Persistence 2.2"],["body","\n"],["body","JSR 356 – Java API for WebSocket 1.1"],["body","\n"],["body","JSR 919 – JavaMail 1.6"],["body","\n\n"],["body","参考链接"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","20.设计模式/PipeLine.html"],["title","PipeLine.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Pipeline 设计模式"],["body","\n"],["headingLink","定义"],["heading","定义"],["body","\n"],["body","解释"],["body","\n"],["body","Pipeline 翻译过来就是水管的意思，Pipeline 设计模式其实很简单，就像是我们常用的 CI/CD 的 Pipeline 一样，一个环节做一件事情，最终串联成一个完整的 Pipeline。"],["body","\n"],["body","概念"],["body","\n"],["body","Pipeline 设计模式有三个概念：Pipeline、Valve、Context。它们的关系大概是这样："],["body","\n"],["body","\n"],["body","对象定义"],["body","\n"],["body","public interface Pipeline {\n    void init(PipelineConfig config);\n    void start();\n    Context getContext();\n}\n\npublic class Context {\n\n}\n\npublic interface Valve {\n    void invoke(Context context);\n    void invokeNext(Context context);\n    String getValveName();\n}\n"],["body","\n"],["body","Tomcat 也广泛使用了 Pipeline 设计模式"],["body","\n"],["body","\n"],["body","value配置"],["body","\n"],["body","{\n    \"scene_a\": {\n        \"valves\": [\n            \"checkOrder\",\n            \"checkPayment\",\n            \"checkDiscount\",\n            \"computeMount\",\n            \"payment\",\n            \"DeductInventory\"\n        ],\n        \"config\": {\n            \"sendEmail\": true,\n            \"supportAlipay\": true\n        }\n    }\n}\n"],["body","\n"],["headingLink","pipeline变种与演化"],["heading","Pipeline变种与演化"],["body","\n"],["body","\n"],["body","Pipeline不是一成不变的，根据你的需要，它可以有很多变种和演化。"],["body","\n"],["body","\n"],["headingLink","设计模式"],["heading","设计模式"],["body","\n"],["body","\n"],["body","Pipeline其实是使用了责任链模式的思想。但它也可以和其它设计模式很好地结合起来。"],["body","\n"],["body","\n"],["body","策略模式"],["body","\n"],["body","可以在配置里面写上当前这个业务线要发送的渠道,然后在Valve里面通过策略模式去决定使用什么渠道发送"],["body","\n"],["body","模板方法模式"],["body","\n"],["body","这个时候就可以使用模板方法模式，定义一个抽象的Valve，把公共逻辑抽取出来，把每个Valve差异的逻辑做成抽象方法，由Valve自己去实现。"],["body","\n"],["body","工厂方法模式"],["body","\n"],["body","Pipeline pipeline = PipelineFactory.create(pipelineConfig);\npipeline.start();\n"],["body","\n"],["body","组合"],["body","\n"],["body","虽然我们说一个Valve只做一件简单的事。但这是相对于整个流程来说的。有时候太过细化也不好，不方便管理。正确的做法应该是做好抽象和分组。比如我们会有一个“校验”阶段，就不用把具体每个字段的校验都单独抽成Valve放进主流程。我们可以就在主流程放一个“校验”的Valve，然后在这个“校验”的Valve里面专门生成一条“校验Pipeline”。这样主流程也比较清晰明了，每个Valve的职责也比较清晰。"],["body","\n"],["body","\n"],["body","注意，子Pipeline应该有它单独的Context，但是它同时也应该具有主Pipeline的Context，是不是应该通过继承来实现?"],["body","\n"],["body","\n"],["headingLink","树与图"],["heading","树与图"],["body","\n"],["body","上面我们介绍的Pipeline，本质上是一个链。但如果往更通用（同时也更复杂）的方向去设计，它还可以做成一个图或者树。"],["body","\n"],["body","假设我们在某个环节有一个条件分支，通过当时的context里面的数据状态，来判断下一步要走哪个Valve，形成一个树。最后可能又归拢到一个Valve，那就形成了一个图。"],["body","\n"],["headingLink","并行执行"],["heading","并行执行"],["body","\n"],["body","我们在前面看到Valve都是链式一个一个执行的。但有时候可能多个Valve彼此之间并不依赖，可以同时并行地去跑。比如发消息，可能多个Valve并行地去发"],["body","\n"],["body","这个时候我们可以把Pipeline改造一下，就像Jenkins设计Pipeline那样，把一个完整的Pipeline分成Phase、Stage、Step等，我们可以对某个Phase或者某个Step设置成可以并行执行的。这需要另外写一个并行执行的Pipeline，用CountDownLatch等工具来等待所有Valve执行完，往下走。"],["body","\n"],["headingLink","日志和可视化"],["heading","日志和可视化"],["body","\n"],["body","日志和可视化是有必要的。对于一条Pipeline来说，推荐在Context里面生成一个traceId，然后用AOP等技术打印日志或者落库，最后通过可视化的方式在界面展现每次调用经过了哪些Valve，时间，在每个Valve执行前和执行后的Context等等信息。"],["body","\n"],["body","异常也很重要。如果使用Pipeline设计模式，推荐专门定义一套异常，可以区分为“可中断Pipeline异常”和“不可中断Pipeline”异常。这个根据实际的业务需求，来决定是否需要中断Pipeline。以我们前面的例子来说，我们在校验阶段如果不通过，就应该抛出一个可以中断Pipeline的异常，让它不往下走。但如果在发送邮件的时候发生了异常，只需要catch住异常，打印一下warn日志，继续往下走。中不中断Pipeline，是业务来决定的。"],["body","\n"],["headingLink","使用threadlocal"],["heading","使用ThreadLocal"],["body","\n"],["body","不要把零散的一个个属性放进ThreadLocal，因为同一种类型，一个线程只能在一个ThreadLocal里面放一个值。而我们的上下文可能会有多个String、boolean等值。如果使用ThreadLocal，可以把所有属性都包成一个Context类，放进ThreadLocal。"],["body","\n"],["headingLink","pipe的缺点"],["heading","Pipe的缺点"],["body","\n\n"],["body","\n"],["body","第一个缺点是可读性不强。因为它是可配置化的，且配置经常在外部（比如数据库里的一个JSON）。所以可读性不好。尤其是我们在读Valve代码的时候，如果不对照配置，其实是不知道它的前后调用关系的。"],["body","\n"],["body","\n"],["body","\n"],["body","第二个缺点是Pipeline之间传递数据是通过Context，而不是简单的函数调用。所以一条Pipeline是有状态的，而且方法调用内部修改Context，而不是通过返回值，是有副作用的。"],["body","\n"],["body","\n\n"],["body","参考链接"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","16.spring_SpringCache/4.配置缓存库.html"],["title","配置缓存库.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","存储集成"],["body","\n"],["body","缓存抽象提供了几种存储集成选项。要使用它们，您需要声明一个适当的CacheManager（控制和管理Cache实例的实体，可用于检索这些实例以进行存储）。"],["body","\n"],["h1","JDK ConcurrentMap-based Cache"],["body","\n"],["body","基于JDK的Cache实现位于org.springframework.cache.concurrent包下。 它使您可以将ConcurrentHashMap用作后备缓存存储。\n以下示例显示了如何配置两个缓存："],["body","\n"],["body","<!-- simple cache manager -->\n<bean id=\"cacheManager\" class=\"org.springframework.cache.support.SimpleCacheManager\">\n    <property name=\"caches\">\n        <set>\n            <bean class=\"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean\" p:name=\"default\"/>\n            <bean class=\"org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean\" p:name=\"books\"/>\n        </set>\n    </property>\n</bean>\n"],["body","\n"],["body","上面的代码段使用SimpleCacheManager为两个嵌套的名为default和books的ConcurrentMapCache实例创建CacheManager。请注意，名称是直接为每个缓存配置的。"],["body","\n"],["h1","Ehcache-based Cache"],["body","\n"],["body","Ehcache 3.x完全符合JSR-107，并且不需要专用支持。"],["body","\n"],["body","<bean id=\"cacheManager\"\n        class=\"org.springframework.cache.ehcache.EhCacheCacheManager\" p:cache-manager-ref=\"ehcache\"/>\n\n<!-- EhCache library setup -->\n<bean id=\"ehcache\"\n        class=\"org.springframework.cache.ehcache.EhCacheManagerFactoryBean\" p:config-location=\"ehcache.xml\"/>\n"],["body","\n"],["h1","Caffeine Cache"],["body","\n"],["body","Caffeine是Java 8对Guava缓存的重写，它的实现位于org.springframework.cache.caffeine包中，并提供对Caffeine多个功能的访问。\n以下示例配置一个CacheManager，该CacheManager按需创建缓存："],["body","\n"],["body","<bean id=\"cacheManager\"\n        class=\"org.springframework.cache.caffeine.CaffeineCacheManager\"/>\n"],["body","\n"],["body","<bean id=\"cacheManager\" class=\"org.springframework.cache.caffeine.CaffeineCacheManager\">\n    <property name=\"caches\">\n        <set>\n            <value>default</value>\n            <value>books</value>\n        </set>\n    </property>\n</bean>\n"],["body","\n"],["body","Caffeine CacheManager还支持自定义Caffeine和CacheLoader。有关这些的更多信息，请参见   Caffeine documentation"],["body","\n"],["h1","GemFire-based Cache"],["body","\n"],["body","GemFire is a memory-oriented, disk-backed, elastically scalable, continuously available, active (with built-in pattern-based subscription notifications), globally replicated database and provides fully-featured edge caching. For further information on how to use GemFire as a CacheManager (and more), see the Spring Data GemFire reference documentation."],["body","\n"],["h1","JSR-107 Cache"],["body","\n"],["body","Spring的缓存抽象也可以使用符合JSR-107的缓存。 JCache实现位于org.springframework.cache.jcache包中。\n同样，要使用它，您需要声明适当的CacheManager。\n以下示例显示了如何执行此操作："],["body","\n"],["body","<bean id=\"cacheManager\"\n        class=\"org.springframework.cache.jcache.JCacheCacheManager\"\n        p:cache-manager-ref=\"jCacheManager\"/>\n\n<!-- JSR-107 cache manager setup  -->\n<bean id=\"jCacheManager\" .../>\n"],["body","\n"],["h1","在没有后备存储的情况下处理缓存"],["body","\n"],["body","有时，在切换环境或进行测试时，您可能具有缓存声明而未配置实际的后备缓存。\n由于这是无效的配置，因此在运行时将引发异常，因为缓存基础结构无法找到合适的存储。\n在这种情况下，可以删除一个简单的伪高速缓存，该高速缓存不执行任何高速缓存，而不是删除高速缓存声明（这可能会很乏味），也就是说，它强制每次都调用高速缓存的方法。\n以下示例显示了如何执行此操作："],["body","\n"],["body","<bean id=\"cacheManager\" class=\"org.springframework.cache.support.CompositeCacheManager\">\n    <property name=\"cacheManagers\">\n        <list>\n            <ref bean=\"jdkCache\"/>\n            <ref bean=\"gemfireCache\"/>\n        </list>\n    </property>\n    <property name=\"fallbackToNoOpCache\" value=\"true\"/>\n</bean>\n"],["body","\n"],["body","前面的CompositeCacheManager链接了多个CacheManager实例，并通过fallbackToNoOpCache标志为未配置的缓存管理器处理的所有定义添加无操作缓存。\n也就是说，在jdkCache或gemfireCache（在示例中之前配置）中都找不到的每个缓存定义都由不存储任何信息的无操作缓存处理，从而导致每次都调用目标方法。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","16.spring_SpringCache/3.XML的申明式缓存.html"],["title","XML的申明式缓存.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","基于声明式XML的缓存"],["body","\n"],["body","如果不能使用注释（可能是由于无法访问源代码或没有外部代码），则可以使用XML进行声明式缓存。因此，您可以在外部指定目标方法和缓存指令，而不是注释用于缓存的方法（类似于声明式事务管理建议）。\n上一节中的示例可以转换为以下示例："],["body","\n"],["body","<!-- the service we want to make cacheable -->\n<bean id=\"bookService\" class=\"x.y.service.DefaultBookService\"/>\n\n<!-- cache definitions -->\n<cache:advice id=\"cacheAdvice\" cache-manager=\"cacheManager\">\n    <cache:caching cache=\"books\">\n        <cache:cacheable method=\"findBook\" key=\"#isbn\"/>\n        <cache:cache-evict method=\"loadBooks\" all-entries=\"true\"/>\n    </cache:caching>\n</cache:advice>\n\n<!-- apply the cacheable behavior to all BookService interfaces -->\n<aop:config>\n    <aop:advisor advice-ref=\"cacheAdvice\" pointcut=\"execution(* x.y.BookService.*(..))\"/>\n</aop:config>\n\n<!-- cache manager definition omitted -->\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","16.spring_SpringCache/2.JCacheAnnotations.html"],["title","JCacheAnnotations.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JCache (JSR-107) Annotations"],["body","\n\n"],["body","\n"],["body","从4.1版开始，Spring的缓存抽象完全支持JCache标准注解：@CacheResult，@CachePut，@CacheRemove和@CacheRemoveAll以及@ CacheDefaults，@ CacheKey和@CacheValue"],["body","\n"],["body","\n"],["body","\n"],["body","内部实现使用Spring的缓存抽象，并提供符合规范的默认CacheResolver和KeyGenerator实现"],["body","\n"],["body","\n"],["body","\n"],["body","换句话说，如果您已经在使用Spring的缓存抽象，则可以切换到这些标准注释，而无需更改缓存存储（或配置）。"],["body","\n"],["body","\n\n"],["h1","Feature Summary"],["body","\n"],["body","下表描述了Spring注释与JSR-107副本之间的主要区别："],["body","\n"],["body","Spring"],["body","JSR-107"],["body","Remark"],["body","\n"],["body","@Cacheable"],["body","@CacheResult"],["body","Fairly similar. @CacheResult can cache specific exceptions and force the execution of the method regardless of the content of the cache."],["body","\n"],["body","@CachePut"],["body","@CachePut"],["body","While Spring updates the cache with the result of the method invocation, JCache requires that it be passed it as an argument that is annotated with @CacheValue. Due to this difference, JCache allows updating the cache before or after the actual method invocation."],["body","\n"],["body","@CacheEvict"],["body","@CacheRemove"],["body","Fairly similar. @CacheRemove supports conditional eviction when the method invocation results in an exception."],["body","\n"],["body","@CacheEvict(allEntries=true)"],["body","@CacheRemoveAll"],["body","See @CacheRemove."],["body","\n"],["body","@CacheConfig"],["body","@CacheDefaults"],["body","Lets you configure the same concepts, in a similar fashion."],["body","\n\n\n"],["body","JCache具有javax.cache.annotation.CacheResolver的概念，该概念与Spring的CacheResolver接口相同，只是JCache仅支持单个缓存。\n默认情况下，一个简单的实现根据 注解中声明的名称检索要使用的缓存。\n应该注意的是，如果注释中未指定缓存名称，则会自动生成一个默认值。"],["body","\n"],["body","CacheResolver实例由CacheResolverFactory检索。可以为每个缓存操作自定义工厂，如以下示例所示："],["body","\n"],["body","@CacheResult(cacheNames=\"books\", cacheResolverFactory=MyCacheResolverFactory.class) \npublic Book findBook(ISBN isbn)\n"],["body","\n"],["body","key 是由javax.cache.annotation.CacheKeyGenerator生成的，其作用与Spring的KeyGenerator相同。\n默认情况下，将考虑所有方法参数，除非至少一个参数用@CacheKey注释。这类似于Spring的自定义密钥生成声明。\n例如，以下是相同的操作，一个使用Spring的抽象，另一个使用JCache："],["body","\n"],["body","@Cacheable(cacheNames=\"books\", key=\"#isbn\")\npublic Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)\n\n@CacheResult(cacheName=\"books\")\npublic Book findBook(@CacheKey ISBN isbn, boolean checkWarehouse, boolean includeUsed)\n"],["body","\n"],["body","您还可以在操作上指定CacheKeyResolver，类似于指定CacheResolverFactory的方式。"],["body","\n"],["body","可以缓存异常"],["body","\n"],["body","JCache可以管理带注解的方法引发的异常。这样可以防止更新缓存，但是也可以将异常缓存为失败的指示，而不必再次调用该方法。\n假定如果ISBN的结构无效，则引发InvalidIsbnNotFoundException。\n这是一个永久性的失败（使用这样的参数无法检索任何书籍）。\n以下内容缓存了该异常，以便使用相同的无效ISBN进行的进一步调用直接引发该缓存的异常，而不是再次调用该方法："],["body","\n"],["body","@CacheResult(cacheName=\"books\", exceptionCacheName=\"failures\"\n            cachedExceptions = InvalidIsbnNotFoundException.class)\npublic Book findBook(ISBN isbn)\n"],["body","\n"],["h1","Enabling JSR-107 Support"],["body","\n"],["body","除了启用Spring的声明性注释支持外，您无需执行任何其他操作即可启用JSR-107支持。\n如果类路径中同时存在JSR-107 API和spring-context-support模块，则@EnableCaching和cache：annotation-driven元素都会自动启用JCache支持。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","16.spring_SpringCache/1.基于申明式缓存.html"],["title","基于申明式缓存.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","申明式缓存的注解"],["body","\n\n"],["body","@Cacheable: Triggers cache population. 触发缓存"],["body","\n"],["body","@CacheEvict: Triggers cache eviction. 触发驱逐"],["body","\n"],["body","@CachePut: Updates the cache without interfering with the method execution. 更新缓存，不会影响方法的执行"],["body","\n"],["body","@Caching: Regroups multiple cache operations to be applied on a method.重新组合要在一个方法上应用的多个缓存操作"],["body","\n"],["body","@CacheConfig: Shares some common cache-related settings at class-level. 在类级别共享一些与缓存有关的常见设置。"],["body","\n\n"],["h1","@Cacheable"],["body","\n"],["headingLink","缓存区"],["heading","缓存区"],["body","\n"],["body","cacheNames 表示 选用的 缓存区名称"],["body","\n"],["headingLink","default-key-generation"],["heading","Default Key Generation"],["body","\n"],["body","Key生成策略"],["body","\n\n"],["body","如果没有给出参数，则返回SimpleKey.EMPTY。"],["body","\n"],["body","如果仅给出一个参数，则返回该实例。作为 key"],["body","\n"],["body","如果给定多个参数，则返回包含所有参数的“ SimpleKey”。"],["body","\n\n"],["body","自定义策略"],["body","\n\n"],["body","只要参数具有自然键并实现有效的hashCode（）和equals（）方法，该方法就适用于大多数用例。如果不是这种情况，则需要更改策略。"],["body","\n"],["body","自定义key生成策略需要实现org.springframework.cache.interceptor.KeyGenerator接口。"],["body","\n\n"],["body","注意"],["body","\n\n"],["body","随着Spring 4.0的发布，默认的密钥生成策略发生了变化。 "],["body","\n"],["body","Spring的早期版本使用密钥生成策略，对于多个密钥参数，该策略仅考虑参数的hashCode（）而不考虑equals（）。这可能会导致意外的键冲突（有关背景，请参阅SPR-10237）。"],["body","\n"],["body","新的SimpleKeyGenerator在这种情况下使用复合键"],["body","\n\n"],["headingLink","custom-key-generation-declaration"],["heading","Custom Key Generation Declaration"],["body","\n"],["body","\n"],["body","使用 SpringEL 去申明键 生成策略 是推荐的"],["body","\n"],["body","\n"],["body","@Cacheable(cacheNames=\"books\", key=\"#isbn\")\npublic Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)\n\n@Cacheable(cacheNames=\"books\", key=\"#isbn.rawNumber\")\npublic Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)\n\n@Cacheable(cacheNames=\"books\", key=\"T(someType).hash(#isbn)\")\npublic Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)\n"],["body","\n"],["body","基于springbean的 keygenerator"],["body","\n"],["body","\n"],["body","如果key生成策略很复杂或者 需要多出共享，可以自定义一个 keyGenerator  并加入到spring容器管理"],["body","\n"],["body","\n"],["body","@Cacheable(cacheNames=\"books\", keyGenerator=\"myKeyGenerator\")\npublic Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)\n"],["body","\n"],["body","key和keyGenerator参数是互斥的，同时指定两个参数的操作将导致异常。"],["body","\n"],["headingLink","default-cache-resolution"],["heading","Default Cache Resolution"],["body","\n"],["body","缓存抽象使用一个简单的CacheResolver，该缓存通过使用配置的CacheManager检索在操作级别定义的缓存。要提供其他默认缓存解析器，您需要实现org.springframework.cache.interceptor.CacheResolver接口。"],["body","\n"],["headingLink","custom-cache-resolution"],["heading","Custom Cache Resolution"],["body","\n"],["body","@Cacheable(cacheNames=\"books\", cacheManager=\"anotherCacheManager\") \npublic Book findBook(ISBN isbn) {...}\n\n@Cacheable(cacheResolver=\"runtimeCacheResolver\") \npublic Book findBook(ISBN isbn) {...}\nSpecifying the CacheResolver.\n\n"],["body","\n"],["headingLink","synchronized-caching"],["heading","Synchronized Caching"],["body","\n\n"],["body","在多线程环境中，可能会为同一参数同时调用某些操作（通常是在启动时）。"],["body","\n"],["body","默认情况下，缓存抽象不会锁定任何内容，并且可能会多次计算相同的值，从而破坏了缓存的目的。"],["body","\n"],["body","对于那些特殊情况，您可以使用sync属性来指示基础缓存提供程序在计算值时锁定缓存条目。"],["body","\n"],["body","结果，只有一个线程正在忙于计算该值，而其他线程则被阻塞，直到在缓存中更新该条目为止。\n以下示例显示如何使用sync属性："],["body","\n\n"],["body","@Cacheable(cacheNames=\"foos\", sync=true) \npublic Foo executeExpensiveOperation(String id) {...}\n"],["body","\n"],["headingLink","条件缓存"],["heading","条件缓存"],["body","\n"],["body","el布尔表达式"],["body","\n"],["body","@Cacheable(cacheNames=\"book\", condition=\"#name.length() < 32\") \npublic Book findBook(String name)\n"],["body","\n"],["body","unless否决"],["body","\n"],["body","@Cacheable(cacheNames=\"book\", condition=\"#name.length() < 32\", unless=\"#result.hardback\") \npublic Book findBook(String name)\n"],["body","\n"],["body","Optional支持"],["body","\n"],["body","@Cacheable(cacheNames=\"book\", condition=\"#name.length() < 32\", unless=\"#result?.hardback\")\npublic Optional<Book> findBook(String name)\n"],["body","\n"],["headingLink","spel表达式可用的上下文"],["heading","SpEL表达式可用的上下文"],["body","\n"],["body","Name"],["body","Location"],["body","Description"],["body","Example"],["body","\n"],["body","methodName"],["body","Root object"],["body","The name of the method being invoked，方法名"],["body","#root.methodName"],["body","\n"],["body","method"],["body","Root object"],["body","The method being invoked，正在被调用的方法"],["body","#root.method.name"],["body","\n"],["body","target"],["body","Root object"],["body","The target object being invoked 被调用方法的实例对象"],["body","#root.target"],["body","\n"],["body","targetClass"],["body","Root object"],["body","The class of the target being invoked 被调用方法的实例对象的class"],["body","#root.targetClass"],["body","\n"],["body","args"],["body","Root object"],["body","The arguments (as array) used for invoking the target 调用参数"],["body","#root.args[0]"],["body","\n"],["body","caches"],["body","Root object"],["body","Collection of caches against which the current method is run，运行当前方法的缓存的集合"],["body","#root.caches[0].name"],["body","\n"],["body","Argument name"],["body","Evaluation context"],["body","Name of any of the method arguments. If the names are not available (perhaps due to having no debug information), the argument names are also available under the #a<#arg> where #arg stands for the argument index (starting from 0)."],["body","#iban or #a0 (you can also use #p0 or #p<#arg> notation as an alias)."],["body","\n"],["body","result"],["body","Evaluation context"],["body","方法返回值，Only available in unless expressions, "],["body","cache put expressions (to compute the key), or "],["body","cache evict expressions (when beforeInvocation is false). For supported wrappers (such as Optional), #result refers to the actual object, not the wrapper."],["body","#result"],["body","\n\n\n"],["h1","@CachePut"],["body","\n\n"],["body","当需要在不影响方法执行的情况下更新缓存时，可以使用@CachePut 注解。"],["body","\n"],["body","也就是说，始终调用该方法，并将其结果放入缓存中（根据@CachePut选项）。"],["body","\n"],["body","它支持与@Cacheable相同的选项，应用于缓存填充，而不是方法流优化。"],["body","\n\n"],["body","以下示例使用@CachePut批注："],["body","\n"],["body","无论什么时候都会 填充缓存"],["body","\n"],["body","@CachePut(cacheNames=\"book\", key=\"#isbn\")\npublic Book updateBook(ISBN isbn, BookDescriptor descriptor)\n"],["body","\n"],["body","@CachePut和@Cacheable 不要同时使用"],["body","\n"],["h1","@CacheEvict"],["body","\n\n"],["body","@ CacheEvict需要指定一个或多个受操作影响的缓存，允许指定自定义缓存和键解析或条件"],["body","\n"],["body","并具有一个额外的参数（allEntries），该参数指示是否在整个缓存范围内逐出需要执行，而不仅仅是输入驱逐（基于密钥）。"],["body","\n\n"],["body","下面的示例从工作簿缓存中逐出所有条目："],["body","\n"],["body","@CacheEvict(cacheNames=\"books\", allEntries=true) \npublic void loadBooks(InputStream batch)\n"],["body","\n\n"],["body","您还可以使用 beforeInvocation 属性指示驱逐是在调用方法之后（默认）还是在调用方法之前发生。"],["body","\n"],["body","前者提供与其余批注相同的语义：方法成功完成后，将对缓存执行操作（在这种情况下为逐出）。如果该方法未运行（可能已缓存）或引发了异常，则不会发生驱逐。"],["body","\n"],["body","后者（beforeInvocation = true）导致逐出总是在调用该方法之前发生。在不需要将逐出与方法结果联系在一起的情况下，这很有用。"],["body","\n"],["body","void方法可与@CacheEvict一起使用-由于这些方法充当触发器，因此将忽略返回值（因为它们不与缓存交互）。 \n@Cacheable并非如此，@ Cacheable将数据添加到缓存或更新缓存中的数据，因此需要结果。"],["body","\n\n"],["h1","@Caching"],["body","\n\n"],["body","有时，需要指定相同类型的多个注解（例如@CacheEvict或@CachePut），"],["body","\n"],["body","例如，因为不同缓存之间的条件或键表达式不同。 \n@Caching允许在同一方法上使用多个嵌套的@ Cacheable，@ CachePut和@CacheEvict批注。\n下面的示例使用两个@CacheEvict批注："],["body","\n\n"],["body","@Caching(evict = { @CacheEvict(\"primary\"), @CacheEvict(cacheNames=\"secondary\", key=\"#p0\") })\npublic Book importBooks(String deposit, Date date)\n"],["body","\n"],["headingLink","cacheconfig"],["heading","@CacheConfig"],["body","\n"],["body","全局统一 缓存配置"],["body","\n"],["body","@CacheConfig(\"books\") \npublic class BookRepositoryImpl implements BookRepository {\n\n    @Cacheable\n    public Book findBook(ISBN isbn) {...}\n}\n"],["body","\n\n"],["body","@CacheConfig是一个类级别的注解，它允许共享缓存名称，自定义KeyGenerator，自定义CacheManager和自定义CacheResolver。\n将此注释放在类上不会打开任何缓存操作。"],["body","\n"],["body","操作级别的自定义始终会覆盖@CacheConfig上设置的自定义。因此，这为每个缓存操作提供了三个定制级别：\n\n"],["body","Globally configured, available for CacheManager, KeyGenerator."],["body","\n"],["body","At the class level, using @CacheConfig."],["body","\n"],["body","At the operation level."],["body","\n\n"],["body","\n\n"],["h1","@EnableCaching"],["body","\n"],["body","必须声明性地启用缓存功能"],["body","\n"],["body","@Configuration\n@EnableCaching\npublic class AppConfig {\n}\n"],["body","\n"],["body","另外，对于XML配置，可以使用cache：annotation-driven元素："],["body","\n"],["body","<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:cache=\"http://www.springframework.org/schema/cache\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/cache https://www.springframework.org/schema/cache/spring-cache.xsd\">\n\n        <cache:annotation-driven/>\n</beans>\n"],["body","\n"],["body","更多自定义实现 请实现 CachingConfigurer所需的高级自定义（使用Java配置）"],["body","\n"],["body","可选配置"],["body","\n"],["body","XML Attribute"],["body","Annotation Attribute"],["body","Default"],["body","Description"],["body","\n"],["body","cache-manager"],["body","N/A (see the CachingConfigurer javadoc)"],["body","cacheManager"],["body","The name of the cache manager to use. A default CacheResolver is initialized behind the scenes with this cache manager (or cacheManager if not set). For more fine-grained management of the cache resolution, consider setting the 'cache-resolver' attribute."],["body","\n"],["body","cache-resolver"],["body","N/A (see the CachingConfigurer javadoc)"],["body","A SimpleCacheResolver using the configured cacheManager."],["body","The bean name of the CacheResolver that is to be used to resolve the backing caches. This attribute is not required and needs to be specified only as an alternative to the 'cache-manager' attribute."],["body","\n"],["body","key-generator"],["body","N/A (see the CachingConfigurer javadoc)"],["body","SimpleKeyGenerator"],["body","Name of the custom key generator to use."],["body","\n"],["body","error-handler"],["body","N/A (see the CachingConfigurer javadoc)"],["body","SimpleCacheErrorHandler"],["body","The name of the custom cache error handler to use. By default, any exception thrown during a cache related operation is thrown back at the client."],["body","\n"],["body","mode"],["body","mode"],["body","proxy"],["body","The default mode (proxy) processes annotated beans to be proxied by using Spring’s AOP framework (following proxy semantics, as discussed earlier, applying to method calls coming in through the proxy only). The alternative mode (aspectj) instead weaves the affected classes with Spring’s AspectJ caching aspect, modifying the target class byte code to apply to any kind of method call. AspectJ weaving requires spring-aspects.jar in the classpath as well as load-time weaving (or compile-time weaving) enabled. (See Spring configuration for details on how to set up load-time weaving.)"],["body","\n"],["body","proxy-target-class"],["body","proxyTargetClass"],["body","false"],["body","Applies to proxy mode only. Controls what type of caching proxies are created for classes annotated with the @Cacheable or @CacheEvict annotations. If the proxy-target-class attribute is set to true, class-based proxies are created. If proxy-target-class is false or if the attribute is omitted, standard JDK interface-based proxies are created. (See Proxying Mechanisms for a detailed examination of the different proxy types.)"],["body","\n"],["body","order"],["body","order"],["body","Ordered.LOWEST_PRECEDENCE"],["body","Defines the order of the cache advice that is applied to beans annotated with @Cacheable or @CacheEvict. (For more information about the rules related to ordering AOP advice, see Advice Ordering.) No specified ordering means that the AOP subsystem determines the order of the advice"],["body","\n\n\n"],["h1","注意"],["body","\n"],["body","同一个 spring容器"],["body","\n"],["body","仅在定义它的相同 applicationContext 中的bean上查找@ Cacheable / @ CachePut / @ CacheEvict / @ Caching。\n这意味着，如果将放在  DispatcherServlet 的  WebApplicationContext 中，它将仅在控制器中检查bean，而不在服务中检查bean。"],["body","\n"],["body","方法可见性和缓存注解"],["body","\n"],["body","最好使用 public 访问"],["body","\n"],["body","注解接口"],["body","\n\n"],["body","Spring建议您仅使用 @Cache 对具体类（以及具体类的方法）进行注释，而不是对接口进行注释。"],["body","\n"],["body","您当然可以在接口（或接口方法）上放置@ Cache *批注，但这仅在您使用基于接口的代理时才可以预期。 "],["body","\n"],["body","Java注解不是从接口继承的事实意味着，如果您使用基于类的代理（代理目标类=“ true”）或基于编织的方面（mode =“ aspectj”），则缓存设置不会生效"],["body","\n\n"],["h1","Using Custom Annotations"],["body","\n\n"],["body","该功能仅适用于基于代理的方法，但可以通过使用AspectJ花费一点额外的精力来启用。 \nspring-aspects模块仅为标准注释定义一个切面。如果定义了自己的注解，则还需要为其定义一个切面。\n查看AnnotationCacheAspect中的示例。"],["body","\n\n"],["body","自定义组合注解"],["body","\n"],["body","@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.METHOD})\n@Cacheable(cacheNames=\"books\", key=\"#isbn\")\npublic @interface SlowService {\n}\n"],["body","\n"],["body","在前面的示例中，我们定义了自己的SlowService批注，该批注本身使用@Cacheable批注。现在我们可以替换以下代码："],["body","\n"],["body","@Cacheable(cacheNames=\"books\", key=\"#isbn\")\npublic Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)\n\n//替换为\n@SlowService\npublic Book findBook(ISBN isbn, boolean checkWarehouse, boolean includeUsed)\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","16.spring_SpringCache/README.html"],["title","SpringCache - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Cache Abstraction"],["body","\n\n"],["body","\n"],["body","从3.1版开始，Spring框架提供了对将缓存透明添加到现有Spring应用程序的支持。与事务支持类似，缓存抽象允许对各种缓存解决方案的一致使用，而对代码的影响最小。"],["body","\n"],["body","\n"],["body","\n"],["body","从Spring 4.1开始，通过支持JSR-107注释和更多自定义选项，对缓存抽象进行了显着扩展。"],["body","\n"],["body","\n\n"],["h1","了解缓存抽象"],["body","\n"],["headingLink","cache-vs-buffer"],["heading","Cache vs Buffer"],["body","\n\n"],["body","术语“缓冲区”和“缓存”倾向于互换使用。但是请注意，它们代表不同的事物。"],["body","\n"],["body","一般，缓冲区用作快速实体和慢速实体之间的数据的中间临时存储。由于一方必须等待另一方（这会影响性能）"],["body","\n"],["body","缓冲区通过允许立即移动整个数据块而不是小块数据来缓解这种情况。数据只能从缓冲区写入和读取一次。此外，缓冲区对于至少一个知道缓冲区的一方是可见的。"],["body","\n"],["body","另一方面，根据定义，缓存是隐藏的，任何一方都不知道发生了缓存。它还可以提高性能，但是可以通过快速读取多次相同数据来实现。"],["body","\n"],["body","本质上，缓存抽象 是对 方法的缓存，减少方法的执行次数。对于方法的调用者来说是透明的"],["body","\n"],["body","要保证 方法是无状态的 "],["body","\n\n"],["headingLink","spring缓存抽象"],["heading","spring缓存抽象"],["body","\n"],["body","\n"],["body","spring对 缓存的抽象 是通过对 org.springframework.cache.Cache and  org.springframework.cache.CacheManager "],["body","\n"],["body","\n"],["body","Spring提供了该抽象的一些实现："],["body","\n\n"],["body","JDK java.util.concurrent.ConcurrentMap based caches, "],["body","\n"],["body","Ehcache 2.x, "],["body","\n"],["body","Gemfire cache, "],["body","\n"],["body","Caffeine,"],["body","\n"],["body","JSR-107 compliant caches (such as Ehcache 3.x). "],["body","\n\n"],["body","多进程环境的缓存"],["body","\n\n"],["body","如果您具有多进程环境（即，一个应用程序部署在多个节点上），则需要相应地配置缓存提供程序。根据您的用例，在几个节点上复制相同数据就足够了。\n但是，如果在应用程序过程中更改数据，则可能需要启用其他传播机制。"],["body","\n\n"],["body","多线程环境的缓存"],["body","\n"],["body","缓存某一个对象时， 直接等 同于 典型的  缓存交互程序中的  “如果找不到，然后继续执行 之后并放入”的 代码块。"],["body","\n"],["body","没有应用锁，几个线程可能会尝试同时加载同一项目。驱逐同样如此。如果多个线程试图同时更新或逐出数据，则可能使用了旧数据。"],["body","\n"],["body","要使用缓存抽象，您需要注意两个方面："],["body","\n\n"],["body","Caching declaration（申明缓存）: Identify the methods that need to be cached and their policy."],["body","\n"],["body","Cache configuration（配置缓存）: The backing cache where the data is stored and from which it is read."],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","26.ORM_JPA/README.html"],["title","JPA - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JPA对象关系映射"],["body","\n"],["body","单向关系"],["body","\n"],["body","在这种关系中，只有一个实体可以将属性引用到另一个实体。它仅包含一个侧面，由于指定如何更新可以在数据库中进行。"],["body","\n"],["body","双向关系"],["body","\n"],["body","这种关系包含两边 - 既包含一个侧面，也包含另一个侧面。 所以这里每个实体都有一个关系字段或将该属性引用到其他实体。"],["body","\n"],["h1","映射类型"],["body","\n"],["body","**一对一 **"],["body","\n"],["body","@OneToOne"],["body","\n"],["body","一对多"],["body","\n"],["body","@OneToMany"],["body","\n"],["body","多对一"],["body","\n"],["body","@ManyToOne"],["body","\n"],["body","多对多"],["body","\n"],["body","@ManyToMany"],["body","\n"],["h1","JPA实体"],["body","\n"],["body","实体属性"],["body","\n"],["body","如果一个对象存储在数据库中并且可以随时访问，则该对象称为持久性"],["body","\n"],["body","持久性标识"],["body","\n"],["body","在Java中，每个实体都是唯一的，并表示为对象标识。 同样，当对象标识存储在数据库中时，它被表示为持久性标识。"],["body","\n"],["body","事务性"],["body","\n"],["body","实体可以执行各种操作，例如:创建，删除，更新。 每个操作都会对数据库进行一些更改。它确保无论数据库中的任何更改是原子级成功还是失败"],["body","\n"],["body","粒度"],["body","\n"],["body","实体不应该是基元，原始包装或具有单维状态的内置对象。"],["body","\n"],["h1","实体元数据"],["body","\n"],["body","注解 - 在Java中，注解是表示元数据的标签形式。 这个元数据保存在类中。"],["body","\n"],["body","XML - 在此形式中，元数据在XML文件的类外部保存。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","28.其他_Security/README.html"],["title","Security - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n"],["body","和前端进行数据交互时或者和第三方商家对接时，需要对隐私数据进行加密。单向加密，对称加密，非对称加密，其对应的算法也各式各样。java提供了统一的框架来规范（java.security）安全加密这类API。"],["body","\n"],["h1","加密算法概念及分类"],["body","\n"],["body","常用的加密算法类型有三种，如下:"],["body","\n\n"],["body","单向加密：也就是不可逆的加密，例如MD5，SHA，HMAC"],["body","\n"],["body","对称加密：也就是加密方和解密方利用同一个秘钥对数据进行加密和解密，例如DES，PBE等等"],["body","\n"],["body","非对称加密：非对称加密分为公钥和秘钥，二者是非对称的，例如用私钥加密的内容需要使用公钥来解密，使用公钥加密的内容需要用私钥来解密，DSA，RSA"],["body","\n\n"],["h1","秘钥生成"],["body","\n"],["headingLink","对称加密密钥的生成"],["heading","对称加密密钥的生成"],["body","\n\n"],["body","KeyGenerator用于生成对称秘钥(可逆加密)，或者一个密码性秘钥"],["body","\n"],["body","支持算法：AES、ARCFOUR、DES、DESede、HmacMD5、HmacSHA1、HmacSHA224、HmacSHA256、HmacSHA384、HmacSHA512、RC2"],["body","\n\n"],["body","public static final KeyGenerator getInstance(String algorithm, String provider)\npublic static final KeyGenerator getInstance(String algorithm)\npublic final void init(int keysize)\npublic final void init(int keysize, SecureRandom random)\npublic final void init(SecureRandom random)\npublic final void init(AlgorithmParameterSpec params, SecureRandom random)\npublic final SecretKey generateKey()\n"],["body","\n"],["body","示例"],["body","\n"],["body","public static void main(String[] args) throws  Exception {\n    SecretKey secretKey = generatorDesKey();\n    System.out.println(secretKey);\n}\npublic static SecretKey generatorDesKey() throws NoSuchAlgorithmException {\n    KeyGenerator keyGen = KeyGenerator.getInstance(\"DES\");\n    SecureRandom random = new SecureRandom();\n    random.nextBytes(new byte[128]);\n    keyGen.init(56,random);\n    SecretKey key = keyGen.generateKey();\n    return key;\n}\n"],["body","\n"],["headingLink","非对称加密秘钥的生成"],["heading","非对称加密秘钥的生成"],["body","\n\n"],["body","KeyPairGenerator用于生成非对称加密算法的密钥对KeyPair，KeyPair会包括一个公钥和私钥"],["body","\n"],["body","支持算法：DiffieHellman、DSA、RSA、RSASSA-PSS、EC"],["body","\n\n"],["body","//KeyPairGenerator.java\npublic static KeyPairGenerator getInstance(String algorithm)\npublic static KeyPairGenerator getInstance(String algorithm, String provider)\npublic void initialize(int keysize, SecureRandom random)\npublic void initialize(AlgorithmParameterSpec params, SecureRandom random)\npublic final KeyPair genKeyPair() \n//KeyPair.java\npublic PublicKey getPublic()\npublic PrivateKey getPrivate()\n"],["body","\n"],["body","示例"],["body","\n"],["body","public static void main(String[] args) throws Exception {\n    KeyPair keyPair = generatorRsaKey();\n    System.out.println(keyPair);\n}\npublic static KeyPair generatorRsaKey() throws Exception {\n    KeyPairGenerator keyGen = KeyPairGenerator.getInstance(\"RSA\");\n    SecureRandom random = new SecureRandom();\n    random.nextBytes(new byte[516]);\n    keyGen.initialize(516,random);\n    KeyPair keyPair = keyGen.genKeyPair();\n    System.out.println(keyPair.getPrivate());\n    System.out.println(keyPair.getPublic());\n    return keyPair;\n}\n"],["body","\n"],["headingLink","密钥key和密钥规格keyspec的相互转化"],["heading","密钥Key和密钥规格KeySpec的相互转化"],["body","\n"],["body","\n"],["body","KeySpec是一个接口，用来组成加密密钥的密钥内容的（透明）规范。如果密钥存储在硬件设备上，则其规范可以包含有助于标识该设备上的密钥的信息"],["body","\n"],["body","\n"],["body","\n"],["body","KeySpec具有规范性，所以一般会根据外部参数生成KeySpec，再根据KeySpec生成对应的Key"],["body","\n"],["body","\n"],["headingLink","secretkeyfactory"],["heading","SecretKeyFactory"],["body","\n"],["body","\n"],["body","用于对称加密的密钥和密钥规格之间的转换，配合KeyGenerator使用"],["body","\n"],["body","\n"],["body","public static final SecretKeyFactory getInstance(String algorithm)\npublic static final SecretKeyFactory getInstance(String algorithm, String provider)\npublic final SecretKey translateKey(SecretKey key)\npublic final SecretKey generateSecret(KeySpec keySpec)\npublic final KeySpec getKeySpec(SecretKey key, Class<?> keySpec)\n"],["body","\n"],["body","示例"],["body","\n"],["body","public static void main(String[] args) throws Exception {\n    SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(\"DES\");\n    byte[] DESKey = \"helloWWW\".getBytes(StandardCharsets.UTF_8);// 设置密钥\n    DESKeySpec keySpec = new DESKeySpec(DESKey);// 设置密钥参数\n    SecretKey key = keyFactory.generateSecret(keySpec);// 得到密钥对象\n    System.out.println(key);\n}\n"],["body","\n"],["headingLink","keyfactory"],["heading","KeyFactory"],["body","\n"],["body","用于非对称加密的密钥和密钥规格之间的转换，配合KeyPairGenerator使用"],["body","\n\n"],["body","支持算法：DiffieHellman、DSA、RSA、RSASSA-PSS、EC"],["body","\n\n"],["body","//KeyFactory.java\npublic static KeyFactory getInstance(String algorithm)\npublic static KeyFactory getInstance(String algorithm, String provider)\npublic final PublicKey generatePublic(KeySpec keySpec)\npublic final PrivateKey generatePrivate(KeySpec keySpec)\npublic final <T extends KeySpec> T getKeySpec(Key key, Class<T> keySpec)\n"],["body","\n"],["body","示例"],["body","\n"],["body","public static void main(String[] args) throws Exception {\n    //生成RSA秘钥对；generatorRsaKey是上面示例提供的函数\n    KeyPair keyPair = generatorRsaKey();\n    System.out.println(keyPair);\n    //PublicKey转KeySpec;KeySpec再转PublicKey\n    X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(keyPair.getPublic().getEncoded());\n    KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n    PublicKey pubKey = keyFactory.generatePublic(pubKeySpec);\n    System.out.println(pubKey);\n    //PrivateKey转KeySpec;KeySpec再转PrivateKey\n    PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(keyPair.getPrivate().getEncoded());\n    PrivateKey priKey = keyFactory.generatePrivate(priKeySpec);\n    System.out.println(priKey);\n}\n"],["body","\n"],["h1","摘要算法"],["body","\n"],["body","MessageDigest和javax.crypto.Mac(HMAC)"],["body","\n\n"],["body","\n"],["body","单向加密是不可逆的，MD5、SHA、MAC都是属于单向加密算法的一种，也称之为摘要算法"],["body","\n"],["body","\n"],["body","\n"],["body","MD5、SHA它们会根据明文用哈希算法计算一个固定长度的摘要（哈希值），然后把明文和摘要发送给接收者，接收者根据同样的算法计算出摘要，对比两个摘要是否一样即可验证明文的正确性，它的应用场景是：防止篡改和校验数据"],["body","\n"],["body","\n"],["body","\n"],["body","MD5、SHA等算法是开源的，容易被试探出来。有没有更安全的摘要算法呢？HMAC-带密钥(密码)的hash函数，用一个密钥和一个明文消息作为输入，生成一个消息摘要。密钥一般使用KeyGenerator创建，相当于一个密码值，其被试探出的概率小"],["body","\n"],["body","\n"],["body","\n"],["body","MessageDigest支持的算法：MD2、MD5、SHA-1、SHA-224、SHA-256、SHA-384、SHA-512、SHA-512/224、SHA-512/256"],["body","\n"],["body","\n"],["body","\n"],["body","javax.crypto.Mac支持的算法：HmacMD5、HmacSHA1、HmacSHA224、HmacSHA256、HmacSHA384、HmacSHA512、PBEWithHmacSHA1"],["body","\n"],["body","\n\n"],["body","MD5的示例"],["body","\n"],["body","MessageDigest digest = MessageDigest.getInstance(\"MD5\");\nSystem.out.println(new String(digest.digest(\"hello world!\".getBytes())));\nSystem.out.println(new String(digest.digest(\"hello world!\".getBytes())));\n"],["body","\n"],["body","MAC的示例"],["body","\n"],["body","public static void main(String[] args) throws Exception {\n    // 初始化HmacMD5摘要算法的密钥产生器\n    KeyGenerator generator = KeyGenerator.getInstance(\"HmacMD5\");\n    // 产生密钥\n    SecretKey secretKey = generator.generateKey();\n    //SecretKeySpec继承于SecretKey和KeySpec，因此可直接用SecretKeySpec初始化Mac\n    //SecretKey secretKey = new SecretKeySpec(\"password\".getBytes(), \"HmacMD5\");\n    Mac mac = Mac.getInstance(\"HmacMD5\");\n    mac.init(secretKey);\n    //计算摘要\n    String data = \"hello world\";\n    byte[] result1 = mac.doFinal(data.getBytes());\n    byte[] result2 = mac.doFinal(data.getBytes());\n    System.out.println(new String(result1).equals(new String(result2)));\n}\n"],["body","\n"],["h1","签名算法工具-Signature"],["body","\n\n"],["body","签名算法其实也是加密算法，它加密后的数据具有唯一标识性，就像一个人的签名能代表一个人身份。签名一般是指用非对称加密算法的私钥来加密明文的过程，生成的密文可以被持有公钥的人识别解密，只要你的公钥是准确对应无误的，就能保证你解密的数据是来自持有私钥的一方"],["body","\n"],["body","支持算法：NONEwithRSA、MD2withRSA、MD5withRSA、SHA512/224withRSA、SHA512/256withRSA、RSASSA-PSS、NONEwithDSA、SHA512withDSA、NONEwithECDSA、SHA512withECDSA、MD5withRSAandMGF1（太多了，选择列举几个）"],["body","\n\n"],["body","示例"],["body","\n"],["body","public static void main(String[] args) throws Exception {\n    KeyPair keyPair = generatorRsaKey();\n    Signature signature = Signature.getInstance(\"MD5withRSA\");\n    signature.initSign(keyPair.getPrivate());\n    //加解密数据\n    byte[] data = \"hello world\".getBytes();\n    //数据签名\n    signature.update(data);\n    byte[] digest = signature.sign();\n    //数据解密加验证\n    signature.initVerify(keyPair.getPublic());\n    signature.update(data);\n    System.out.println(\"验证结果:\"+signature.verify(digest));\n}\n"],["body","\n"],["h1","常用加密工具类-Cipher"],["body","\n\n"],["body","用于加密/解密数据。支持各种类型的算法：对称加密（例如AES），非对称加密（例如RSA）"],["body","\n"],["body","支持算法：AES、AESWrap、ARCFOUR、Blowfish、DES、DESede、DESedeWrap、ECIES、RSA（太多了，选择列举几个）"],["body","\n\n"],["body","public static void main(String[] args) throws Exception {\n    KeyPair keyPair = generatorRsaKey();\n    Cipher cipher = Cipher.getInstance(\"RSA\");\n    // 编码前设定编码方式及密钥\n    cipher.init(Cipher.ENCRYPT_MODE, keyPair.getPrivate());\n    //加解密数据\n    byte[] data = \"hello world\".getBytes();\n    //数据签名\n    byte[] enData = cipher.doFinal(data);\n    //数据解密\n    cipher.init(Cipher.DECRYPT_MODE, keyPair.getPublic());\n    byte[] newData = cipher.doFinal(enData);\n    System.out.println(\"验证结果:\"+new String(newData));\n}\n------------输出结果------------------\n验证结果:hello world\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/Queue与Deque.html"],["title","Queue与Deque.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Queue"],["body","\n"],["body","\n"],["body","队列"],["body","\n"],["body","\n"],["headingLink","接口申明"],["heading","接口申明"],["body","\n"],["body","public interface Queue<E> extends Collection<E> {\n}\n"],["body","\n"],["headingLink","插入"],["heading","插入"],["body","\n"],["headingLink","插入1"],["heading","插入1"],["body","\n"],["body","boolean add(E e);\n"],["body","\n"],["headingLink","插入2"],["heading","插入2"],["body","\n"],["body","boolean offer(E e);\n"],["body","\n"],["headingLink","移除"],["heading","移除"],["body","\n"],["headingLink","移除队头元素1"],["heading","移除队头元素1"],["body","\n"],["body","E remove();\n"],["body","\n"],["headingLink","移除对头元素2"],["heading","移除对头元素2"],["body","\n\n"],["body","与1相比，如果为空则返回NULL，而1会 抛异常"],["body","\n\n"],["body","E poll();\n"],["body","\n"],["headingLink","取队头元素"],["heading","取队头元素"],["body","\n"],["headingLink","取队头元素1"],["heading","取队头元素1"],["body","\n"],["body","E element();\n"],["body","\n"],["headingLink","取队头元素2"],["heading","取队头元素2"],["body","\n\n"],["body","与1相比，如果为空则返回NULL，而1会 抛异常"],["body","\n\n"],["body","E peek();\n"],["body","\n"],["h1","Deque"],["body","\n"],["body","双向队列"],["body","\n"],["headingLink","声明"],["heading","声明"],["body","\n"],["body","public interface Deque<E> extends Queue<E> {}\n"],["body","\n"],["headingLink","插入元素"],["heading","插入元素"],["body","\n"],["body","//头部插入\nvoid addFirst(E e);\n//尾部插入\nvoid addLast(E e);\n//头部插入\nboolean offerFirst(E e);\n//尾部插入\nboolean offerLast(E e);\n"],["body","\n"],["headingLink","移除元素"],["heading","移除元素"],["body","\n"],["body","E removeFirst();\nE removeLast();\n\n//以下移除空队列不会报错\nE pollFirst();\nE pollLast();\n\n//移除第一个出现的对象\nboolean removeFirstOccurrence(Object o);\n\n//移除最后一个出现的对象\nboolean removeLastOccurrence(Object o);\n"],["body","\n"],["headingLink","获取元素"],["heading","获取元素"],["body","\n"],["body","E getFirst();\nE getLast();\n//以下取空队列不会报错\nE peekFirst();\nE peekLast();\n"],["body","\n"],["headingLink","栈方法"],["heading","栈方法"],["body","\n"],["body","//头部压栈\nvoid push(E e);\n\n//头部出栈\nE pop();\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/Map接口.html"],["title","Map接口.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概述"],["body","\n\n"],["body","包含 key values 键值对的 集合"],["body","\n"],["body","不能包含重复key"],["body","\n"],["body","每个key只能映射一个值"],["body","\n"],["body","该接口代替Dictionary类"],["body","\n"],["body","Map提供了 三个 集合视图：keys，values，entrys"],["body","\n"],["body","迭代顺序不做保证"],["body","\n"],["body","如果使用 可变对象 作为 key，则必须格外小心，如果对象中 影响 equals比较的键变了，那么map的行为可能会未知"],["body","\n"],["body","禁止Map 自身作为 Key"],["body","\n"],["body","所有 通用Map的 实现类 必须 提供 二个标准的 构造函数\n\n"],["body","无参构造"],["body","\n"],["body","指定Map类型的 构造，（用作Map拷贝目的）"],["body","\n\n"],["body","\n\n"],["h1","查询操作"],["body","\n"],["headingLink","大小"],["heading","大小"],["body","\n"],["body","int size();\n"],["body","\n"],["headingLink","是否为空"],["heading","是否为空"],["body","\n"],["body","boolean isEmpty();\n"],["body","\n"],["headingLink","是否包含key"],["heading","是否包含key"],["body","\n"],["body","boolean containsKey(Object key);\n"],["body","\n"],["headingLink","是否包含值"],["heading","是否包含值"],["body","\n"],["body","boolean containsValue(Object value);\n"],["body","\n"],["headingLink","根据key获取值"],["heading","根据Key获取值"],["body","\n"],["body","V get(Object key);\n"],["body","\n"],["h1","修改操作"],["body","\n"],["headingLink","放入元素"],["heading","放入元素"],["body","\n"],["body","V put(K key, V value);\n"],["body","\n"],["headingLink","移除元素"],["heading","移除元素"],["body","\n"],["body","V remove(Object key);\n"],["body","\n"],["h1","批量操作"],["body","\n"],["headingLink","放入map"],["heading","放入Map"],["body","\n"],["body","void putAll(Map<? extends K, ? extends V> m);\n"],["body","\n"],["headingLink","清空map"],["heading","清空Map"],["body","\n"],["body","void clear();\n"],["body","\n"],["h1","视图"],["body","\n"],["headingLink","键集合"],["heading","键集合"],["body","\n"],["body","Set<K> keySet();\n"],["body","\n"],["headingLink","values集合"],["heading","Values集合"],["body","\n"],["body","Collection<V> values();\n"],["body","\n"],["headingLink","entry集合"],["heading","Entry集合"],["body","\n"],["body","Set<Map.Entry<K, V>> entrySet();\n"],["body","\n"],["h1","默认方法"],["body","\n"],["headingLink","获取key不存在则取默认值"],["heading","获取key,不存在则取默认值"],["body","\n"],["body","default V getOrDefault(Object key, V defaultValue) {\n    V v;\n    return (((v = get(key)) != null) || containsKey(key))\n        ? v\n        : defaultValue;\n}\n"],["body","\n"],["headingLink","迭代"],["heading","迭代"],["body","\n"],["body","default void forEach(BiConsumer<? super K, ? super V> action) {\n    Objects.requireNonNull(action);\n    for (Map.Entry<K, V> entry : entrySet()) {\n        K k;\n        V v;\n        try {\n            k = entry.getKey();\n            v = entry.getValue();\n        } catch(IllegalStateException ise) {\n            // this usually means the entry is no longer in the map.\n            throw new ConcurrentModificationException(ise);\n        }\n        action.accept(k, v);\n    }\n}\n"],["body","\n"],["headingLink","批量更新key"],["heading","批量更新Key"],["body","\n"],["body","default void replaceAll(BiFunction<? super K, ? super V, ? extends V> function) {\n    Objects.requireNonNull(function);\n    for (Map.Entry<K, V> entry : entrySet()) {\n        K k;\n        V v;\n        try {\n            k = entry.getKey();\n            v = entry.getValue();\n        } catch(IllegalStateException ise) {\n            // this usually means the entry is no longer in the map.\n            throw new ConcurrentModificationException(ise);\n        }\n\n        // ise thrown from function is not a cme.\n        v = function.apply(k, v);\n\n        try {\n            entry.setValue(v);\n        } catch(IllegalStateException ise) {\n            // this usually means the entry is no longer in the map.\n            throw new ConcurrentModificationException(ise);\n        }\n    }\n}\n"],["body","\n"],["headingLink","不存在则更新"],["heading","不存在则更新"],["body","\n"],["body","default V putIfAbsent(K key, V value) {\n    V v = get(key);\n    if (v == null) {\n        v = put(key, value);\n    }\n\n    return v;\n}\n"],["body","\n"],["headingLink","根据keyvalue移除"],["heading","根据KeyValue移除"],["body","\n"],["body","default boolean remove(Object key, Object value) {\n    Object curValue = get(key);\n    if (!Objects.equals(curValue, value) ||\n        (curValue == null && !containsKey(key))) {\n        return false;\n    }\n    remove(key);\n    return true;\n}\n"],["body","\n"],["headingLink","替换指定keyvalue的元素的值"],["heading","替换指定KeyValue的元素的值"],["body","\n"],["body","default boolean replace(K key, V oldValue, V newValue) {\n    Object curValue = get(key);\n    if (!Objects.equals(curValue, oldValue) ||\n        (curValue == null && !containsKey(key))) {\n        return false;\n    }\n    put(key, newValue);\n    return true;\n}\n"],["body","\n"],["headingLink","替换指定key的值"],["heading","替换指定Key的值"],["body","\n"],["body","default V replace(K key, V value) {\n    V curValue;\n    if (((curValue = get(key)) != null) || containsKey(key)) {\n        curValue = put(key, value);\n    }\n    return curValue;\n}\n"],["body","\n"],["headingLink","不存在则放入元素1"],["heading","不存在则放入元素1"],["body","\n"],["body","default V computeIfAbsent(K key,\n        Function<? super K, ? extends V> mappingFunction) {\n    Objects.requireNonNull(mappingFunction);\n    V v;\n    if ((v = get(key)) == null) {\n        V newValue;\n        if ((newValue = mappingFunction.apply(key)) != null) {\n            put(key, newValue);\n            return newValue;\n        }\n    }\n\n    return v;\n}\n"],["body","\n"],["headingLink","不存在则放入元素2"],["heading","不存在则放入元素2"],["body","\n"],["body","default V computeIfPresent(K key,\n        BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n    Objects.requireNonNull(remappingFunction);\n    V oldValue;\n    if ((oldValue = get(key)) != null) {\n        V newValue = remappingFunction.apply(key, oldValue);\n        if (newValue != null) {\n            put(key, newValue);\n            return newValue;\n        } else {\n            remove(key);\n            return null;\n        }\n    } else {\n        return null;\n    }\n}\n"],["body","\n"],["headingLink","根据mapping返回的结果更新-或移除-key"],["heading","根据Mapping返回的结果更新 或移除 key"],["body","\n\n"],["body","key，与oldValue 映射为 null，则移除 该 key"],["body","\n"],["body","如果映射不为 null，则放入元素"],["body","\n\n"],["body","default V compute(K key,\n        BiFunction<? super K, ? super V, ? extends V> remappingFunction) {\n    Objects.requireNonNull(remappingFunction);\n    V oldValue = get(key);\n\n    V newValue = remappingFunction.apply(key, oldValue);\n    if (newValue == null) {\n        // delete mapping\n        if (oldValue != null || containsKey(key)) {\n            // something to remove\n            remove(key);\n            return null;\n        } else {\n            // nothing to do. Leave things as they were.\n            return null;\n        }\n    } else {\n        // add or replace old mapping\n        put(key, newValue);\n        return newValue;\n    }\n}\n"],["body","\n"],["headingLink","合并"],["heading","合并"],["body","\n"],["body","如果旧值 为NULL，则直接用新值"],["body","\n"],["body","如果旧值 不为 NULL，则两者的值进行合并"],["body","\n"],["body","合并的返回值 为 NULL 则移除 该key"],["body","\n"],["body","不为NULL 则  放入key"],["body","\n"],["body","default V merge(K key, V value,\n        BiFunction<? super V, ? super V, ? extends V> remappingFunction) {\n    Objects.requireNonNull(remappingFunction);\n    Objects.requireNonNull(value);\n    V oldValue = get(key);\n    V newValue = (oldValue == null) ? value :\n               remappingFunction.apply(oldValue, value);\n    if(newValue == null) {\n        remove(key);\n    } else {\n        put(key, newValue);\n    }\n    return newValue;\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/ArrayBlockingQueue.html"],["title","ArrayBlockingQueue.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","BlockingQueue接口"],["body","\n"],["headingLink","声明"],["heading","声明"],["body","\n"],["body","public interface BlockingQueue<E> extends Queue<E> {\n"],["body","\n"],["headingLink","概述"],["heading","概述"],["body","\n"],["body","额外功能"],["body","\n"],["body","blockingQueue是 一个队列，提供额外的功能"],["body","\n\n"],["body","当向队列取元素时，会阻塞直到队列存在元素"],["body","\n"],["body","当向队列存元素时，会阻塞直到队列有空余"],["body","\n\n"],["body","形式"],["body","\n"],["body","BlockingQueue方法有四种形式，它们以不同的方式处理操作，这些操作无法立即满足，但将来可能会满足"],["body","\n\n"],["body","第一种抛异常"],["body","\n"],["body","第二种 有返回值"],["body","\n"],["body","第三种 阻塞，直到操作可执行"],["body","\n"],["body","第四种 超时阻塞"],["body","\n\n"],["body","Throws Exception"],["body","SpecialValue"],["body","Blocks"],["body","TimesOut"],["body","\n"],["body","Insert"],["body","add(e)"],["body","offer(e)"],["body","put(e)"],["body","offer(e,time,unit)"],["body","\n"],["body","remove"],["body","remove()"],["body","poll"],["body","take()"],["body","poll(time,unit)"],["body","\n"],["body","examine"],["body","element()"],["body","peek()"],["body","\n\n\n"],["body","NULL值"],["body","\n"],["body","blockingQueue 不能 插入NULL ，所有插入NULL的操作 抛NPE，空值在内部视为  失败"],["body","\n"],["body","容量限制"],["body","\n"],["body","BlockingQueue可能受容量限制。在任何给定时间，它可能具有剩余容量，超过该容量就不能放置其他元素而不会阻塞。\n没有任何内部容量约束的BlockingQueue始终报告Integer.MAX_VALUE的剩余容量。"],["body","\n"],["body","集合关系"],["body","\n"],["body","BlockingQueue实现被设计为主要用于生产者-消费者队列，但额外也支持 集合接口，也可以随机 移除 一个数据 remove(x)，这样的操作效率不会很高，建议很少使用，例如 当消息队列中，某个消息被取消"],["body","\n"],["body","线程安全"],["body","\n"],["body","BlockingQueue实现是线程安全的。所有排队方法 都由内部锁实现并发控制"],["body","\n"],["body","批量操作不保证 原子性，除非在实现中另行指定，否则批量Collection操作addAll，containsAll，retainAll和removeAll不一定是原子执行的。\n因此，例如，仅在c中添加一些元素之后，addAll（c）可能会失败（引发异常）。"],["body","\n"],["body","关闭操作"],["body","\n"],["body","BlockingQueue本质上不支持任何类型的“关闭”或“关闭”操作，以指示将不再添加任何项目。\n此类功能的需求和使用往往取决于实现。\n例如，一种常见的策略是让生产者插入特殊的流尾对象或有毒对象（ special end-of-stream or poison objects）当消费者采取这种方法时会对其进行相应的解释。"],["body","\n"],["headingLink","接口"],["heading","接口"],["body","\n"],["body","新增"],["body","\n"],["body","boolean add(E e);\nboolean offer(E e);\nvoid put(E e) throws InterruptedException;\nboolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException;\n"],["body","\n"],["body","移除"],["body","\n"],["body","E take() throws InterruptedException;\nE poll(long timeout, TimeUnit unit) throws InterruptedException;\nboolean remove(Object o);\n"],["body","\n"],["body","批量移除"],["body","\n"],["body","//将队列中的元素 倒入 指定集合\nint drainTo(Collection<? super E> c);\n//maxElements 指定最大要倒的集合\nint drainTo(Collection<? super E> c, int maxElements);\n"],["body","\n"],["h1","ArrayBlockingQueue"],["body","\n"],["headingLink","初始化"],["heading","初始化"],["body","\n"],["body","空初始化"],["body","\n\n"],["body","立即初始化容量"],["body","\n"],["body","使用 可重入锁"],["body","\n"],["body","两个条件：notEmpty，notFull"],["body","\n\n"],["body","public ArrayBlockingQueue(int capacity, boolean fair) {\n    if (capacity <= 0)\n        throw new IllegalArgumentException();\n    this.items = new Object[capacity];\n    lock = new ReentrantLock(fair);\n    notEmpty = lock.newCondition();\n    notFull =  lock.newCondition();\n}\n"],["body","\n"],["body","复制初始化"],["body","\n\n"],["body","使用者 自行确保容量 不能小于 Collection"],["body","\n\n"],["body","public ArrayBlockingQueue(int capacity, boolean fair,\n                          Collection<? extends E> c) {\n    this(capacity, fair);\n\n    final ReentrantLock lock = this.lock;\n    lock.lock(); // Lock only for visibility, not mutual exclusion ,出于可见性，上锁。不是为了互斥\n    try {\n        int i = 0;\n        try {\n            for (E e : c) {\n                checkNotNull(e);\n                items[i++] = e;\n            }\n        } catch (ArrayIndexOutOfBoundsException ex) {\n            throw new IllegalArgumentException();\n        }\n        count = i;\n        putIndex = (i == capacity) ? 0 : i;\n    } finally {\n        lock.unlock();\n    }\n}\n"],["body","\n"],["headingLink","重要方法"],["heading","重要方法"],["body","\n"],["headingLink","入队列"],["heading","入队列"],["body","\n\n"],["body","确保 已经获取到锁"],["body","\n"],["body","确保 当前位置 为空"],["body","\n"],["body","放入元素"],["body","\n"],["body","容量自增"],["body","\n"],["body","putIndex 自增"],["body","\n"],["body","通知 消费者队列"],["body","\n\n"],["body","private void enqueue(E x) {\n    // assert lock.getHoldCount() == 1;\n    // assert items[putIndex] == null;\n    final Object[] items = this.items;\n    items[putIndex] = x;\n    if (++putIndex == items.length)\n        putIndex = 0;\n    count++;\n    notEmpty.signal();\n}\n"],["body","\n"],["headingLink","出队列"],["heading","出队列"],["body","\n\n"],["body","确保 已经获取到锁"],["body","\n"],["body","确保 当前位置 不为空"],["body","\n"],["body","根据 takeIndex 取数据"],["body","\n"],["body","原位置置空"],["body","\n"],["body","容量自减"],["body","\n"],["body","通知 生产者队列"],["body","\n\n"],["body","private E dequeue() {\n    // assert lock.getHoldCount() == 1;\n    // assert items[takeIndex] != null;\n    final Object[] items = this.items;\n    @SuppressWarnings(\"unchecked\")\n    E x = (E) items[takeIndex];\n    items[takeIndex] = null;\n    if (++takeIndex == items.length)\n        takeIndex = 0;\n    count--;\n    if (itrs != null)\n        itrs.elementDequeued(); //关于迭代器的维护比较复杂，在此不赘叙\n    notFull.signal();\n    return x;\n}\n"],["body","\n"],["headingLink","新增元素"],["heading","新增元素"],["body","\n"],["headingLink","非阻塞新增"],["heading","非阻塞新增"],["body","\n"],["body","容量满了立刻退出返回 false"],["body","\n"],["body","public boolean offer(E e) {\n    checkNotNull(e);\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        if (count == items.length)\n            return false;\n        else {\n            enqueue(e);\n            return true;\n        }\n    } finally {\n        lock.unlock();\n    }\n}\n"],["body","\n"],["headingLink","阻塞新增"],["heading","阻塞新增"],["body","\n\n"],["body","获取锁"],["body","\n"],["body","如果队列不为空，则等待"],["body","\n"],["body","否则入队列"],["body","\n\n"],["body","public void put(E e) throws InterruptedException {\n    checkNotNull(e);\n    final ReentrantLock lock = this.lock;\n    lock.lockInterruptibly();\n    try {\n        while (count == items.length)\n            notFull.await();\n        enqueue(e);\n    } finally {\n        lock.unlock();\n    }\n}\n"],["body","\n"],["headingLink","超时新增"],["heading","超时新增"],["body","\n\n"],["body","尝试获取锁"],["body","\n"],["body","成功获取锁 之后 在开始计时"],["body","\n"],["body","锁超时之后 立刻返回 false"],["body","\n\n"],["body","public boolean offer(E e, long timeout, TimeUnit unit)\n    throws InterruptedException {\n\n    checkNotNull(e);\n    long nanos = unit.toNanos(timeout);\n    final ReentrantLock lock = this.lock;\n    lock.lockInterruptibly();\n    try {\n        while (count == items.length) {\n            if (nanos <= 0)\n                return false;\n            nanos = notFull.awaitNanos(nanos);\n        }\n        enqueue(e);\n        return true;\n    } finally {\n        lock.unlock();\n    }\n}\n"],["body","\n"],["headingLink","移除元素"],["heading","移除元素"],["body","\n"],["headingLink","阻塞移除"],["heading","阻塞移除"],["body","\n"],["body","public E take() throws InterruptedException {\n    final ReentrantLock lock = this.lock;\n    lock.lockInterruptibly();\n    try {\n        while (count == 0)\n            notEmpty.await();\n        return dequeue();\n    } finally {\n        lock.unlock();\n    }\n}\n"],["body","\n"],["headingLink","超时移除"],["heading","超时移除"],["body","\n"],["body","public E poll(long timeout, TimeUnit unit) throws InterruptedException {\n    long nanos = unit.toNanos(timeout);\n    final ReentrantLock lock = this.lock;\n    lock.lockInterruptibly();\n    try {\n        while (count == 0) {\n            if (nanos <= 0)\n                return null;\n            nanos = notEmpty.awaitNanos(nanos);\n        }\n        return dequeue();\n    } finally {\n        lock.unlock();\n    }\n}\n"],["body","\n"],["headingLink","随机指定对象移除"],["heading","随机指定对象移除"],["body","\n\n"],["body","需要将 移除对象后面的元素 全都 左移一位"],["body","\n\n"],["body","public boolean remove(Object o) {\n    if (o == null) return false;\n    final Object[] items = this.items;\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        if (count > 0) {\n            final int putIndex = this.putIndex;\n            int i = takeIndex;\n            do {\n                if (o.equals(items[i])) {\n                    removeAt(i);\n                    return true;\n                }\n                if (++i == items.length)\n                    i = 0;\n            } while (i != putIndex);\n        }\n        return false;\n    } finally {\n        lock.unlock();\n    }\n}\n"],["body","\n"],["headingLink","批量移除数据到指定集合中"],["heading","批量移除数据到指定集合中"],["body","\n\n"],["body","获取锁"],["body","\n"],["body","循环 把数据加入到 新集合"],["body","\n"],["body","维护count 变量"],["body","\n"],["body","\n\n"],["body","public int drainTo(Collection<? super E> c, int maxElements) {\n    checkNotNull(c);\n    if (c == this)\n        throw new IllegalArgumentException();\n    if (maxElements <= 0)\n        return 0;\n    final Object[] items = this.items;\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        int n = Math.min(maxElements, count);\n        int take = takeIndex;\n        int i = 0;\n        try {\n            while (i < n) {\n                @SuppressWarnings(\"unchecked\")\n                E x = (E) items[take];\n                c.add(x);\n                items[take] = null;\n                if (++take == items.length)\n                    take = 0;\n                i++;\n            }\n            return n;\n        } finally {\n            // Restore invariants even if c.add() threw\n            if (i > 0) {\n                count -= i;\n                takeIndex = take;\n                if (itrs != null) {\n                    if (count == 0)\n                        itrs.queueIsEmpty();\n                    else if (i > take)\n                        itrs.takeIndexWrapped();\n                }\n                for (; i > 0 && lock.hasWaiters(notFull); i--)\n                    notFull.signal();\n            }\n        }\n    } finally {\n        lock.unlock();\n    }\n}\n"],["body","\n"],["h1","总结"],["body","\n"],["headingLink","arrayblockingqueue的实现原理"],["heading","ArrayBlockingQueue的实现原理"],["body","\n"],["body","同步实现方式"],["body","\n\n"],["body","使用可重入锁 实现，所有方法基本都加锁"],["body","\n\n"],["body","take与put的实现方式"],["body","\n\n"],["body","使用 两个条件锁，实现 take与 put的阻塞与通知"],["body","\n\n"],["body","存储结构"],["body","\n\n"],["body","使用循环队列作为存储结构"],["body","\n"],["body","内部使用 数组，加上 两个 索引 takeIndex负责 取，putIndex负责存 实现的双向循环队列"],["body","\n"],["body","takeIndex总是指向 下一个待取的数据，而 putIndex总是指向 下一个空闲的位置"],["body","\n\n"],["headingLink","应用"],["heading","应用"],["body","\n"],["body","线程池的默认底层数据结构"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/Collections工具类.html"],["title","Collections工具类.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Collections中API的分类"],["body","\n\n"],["body","排序操作"],["body","\n"],["body","查找替换"],["body","\n"],["body","checkedxxx 检查集合"],["body","\n"],["body","emptyxxx 返回空集合"],["body","\n"],["body","synchronizedXXX 同步集合"],["body","\n"],["body","unmodifiableXXX 不可变集合"],["body","\n\n"],["h1","排序操作"],["body","\n"],["body","static boolean addAIl(Collection <? super T>c,T... elements)"],["body","\n"],["body","将所有指定元素添加到指定的collection中"],["body","\n"],["body","static void reverse(List list)"],["body","\n"],["body","反转指定List集合中元素的顺序"],["body","\n"],["body","static void shuffle(List list)"],["body","\n"],["body","对List集合中的元素进行随机排序（模拟玩扑克中的“洗牌”）"],["body","\n"],["body","static void sort(List list)"],["body","\n"],["body","根据元素的自然顺序对List集合中的元素进行排序"],["body","\n"],["body","static void swap(List list,int i，int j)"],["body","\n"],["body","将指定List集合中i处元素和j处元素进行交换"],["body","\n"],["h1","查找替换"],["body","\n"],["body","static int binaryScarch ( List list,Object key)"],["body","\n"],["body","使用二分法搜索指定对象在List集合中的索引，查找的 List集合中的元素必须是有序的"],["body","\n"],["body","static Object max(Collection col)"],["body","\n"],["body","返回给定集合中最大的元素"],["body","\n"],["body","static Object min (Collection col)"],["body","\n"],["body","返回给定集合中最小的元素"],["body","\n"],["body","static boolean replaccAll (List list，Object oldVal,Object newVal)"],["body","\n"],["body","用一个新的newVal替换List集合中所有的旧值oldVal"],["body","\n"],["h1","checkedxxx 检查集合"],["body","\n"],["body","返回类型检查的集合，在对类型进行set 或者add的时候会做类型检查"],["body","\n"],["body","用法：\n\nArrayList list = Lists.newArrayList();\n\nlist.add(new Player(\"香菜\"));\n\n// 返回的safeList 在add时会进行类型检查\n\nList safeList = Collections.checkedList(list, Player.class);\n\n//此时会对类型进行检查，不是Player类型，抛出异常 java.lang.ClassCastException:\n"],["body","\n"],["h1","emptyxxx 返回空的集合"],["body","\n"],["body","返回一个空集合，不能添加，不能删除"],["body","\n"],["h1","synchronizedxxx 同步集合"],["body","\n"],["body","对集合进行了二次包装，在内部加了一把锁"],["body","\n"],["h1","unmodifiableXxx 不可变集合"],["body","\n"],["body","传入的集合返回后不可以改变。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/List.html"],["title","List.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","List接口"],["body","\n"],["headingLink","查询操作"],["heading","查询操作"],["body","\n"],["body","int size();\nboolean isEmpty();\nboolean contains(Object o);\nIterator<E> iterator();\nObject[] toArray();\n<T> T[] toArray(T[] a);\n"],["body","\n"],["headingLink","修改操作"],["heading","修改操作"],["body","\n"],["body","boolean add(E e);\nboolean remove(Object o);\nboolean containsAll(Collection<?> c);\nboolean addAll(Collection<? extends E> c);\nboolean addAll(int index, Collection<? extends E> c);\nboolean removeAll(Collection<?> c);\nboolean retainAll(Collection<?> c);\ndefault void replaceAll(UnaryOperator<E> operator) {\n    Objects.requireNonNull(operator);\n    final ListIterator<E> li = this.listIterator();\n    while (li.hasNext()) {\n    \tli.set(operator.apply(li.next()));\n    }\n}\nvoid clear();\n"],["body","\n"],["headingLink","排序"],["heading","排序"],["body","\n\n"],["body","先取出数组"],["body","\n"],["body","后调用 数组静态排序方法"],["body","\n"],["body","然后设置回当前 ListIterator"],["body","\n\n"],["body","default void sort(Comparator<? super E> c) {\n    Object[] a = this.toArray();\n    Arrays.sort(a, (Comparator) c);\n    ListIterator<E> i = this.listIterator();\n    for (Object e : a) {\n        i.next();\n        i.set((E) e);\n    }\n}\n"],["body","\n"],["headingLink","基于索引的操作"],["heading","基于索引的操作"],["body","\n"],["body","E get(int index);\nE set(int index, E element);\nvoid add(int index, E element);\nE remove(int index);\nint indexOf(Object o);\nint lastIndexOf(Object o);\n"],["body","\n"],["headingLink","基于索引的迭代器"],["heading","基于索引的迭代器"],["body","\n"],["body","ListIterator<E> listIterator();\nListIterator<E> listIterator(int index);\n"],["body","\n"],["headingLink","基于索引的视图"],["heading","基于索引的视图"],["body","\n"],["body","List<E> subList(int fromIndex, int toIndex);\n"],["body","\n"],["headingLink","总结"],["heading","总结"],["body","\n\n"],["body","List接口 增加了 基于索引的方法\n\n"],["body","包括基于索引的增删查改"],["body","\n"],["body","以及基于索引的 视图"],["body","\n\n"],["body","\n"],["body","同时提供了  基于 list迭代器  的两个默认实现 sort 与 replaceAll "],["body","\n\n"],["h1","AbstractList"],["body","\n"],["headingLink","类声明"],["heading","类声明"],["body","\n"],["body","public abstract class AbstractList<E> extends AbstractCollection<E> implements List<E> {\n\t\n}\n"],["body","\n"],["headingLink","未实现方法"],["heading","未实现方法"],["body","\n"],["body","public void add(int index, E element) {}\nabstract public E get(int index);\npublic E set(int index, E element) {}\npublic E remove(int index) {}\n"],["body","\n"],["headingLink","搜索"],["heading","搜索"],["body","\n"],["body","根据对象本身查找对象索引"],["body","\n\n"],["body","依赖 ListIterator 实现"],["body","\n"],["body","从头往后查找"],["body","\n\n"],["body","public int indexOf(Object o) {\n    ListIterator<E> it = listIterator();\n    if (o==null) {\n        while (it.hasNext())\n            if (it.next()==null)\n                return it.previousIndex();\n    } else {\n        while (it.hasNext())\n            if (o.equals(it.next()))\n                return it.previousIndex();\n    }\n    return -1;\n}\n"],["body","\n"],["body","查找最后一次出现的"],["body","\n\n"],["body","依赖 ListIterator 实现"],["body","\n"],["body","从后往前查找"],["body","\n\n"],["body","public int lastIndexOf(Object o) {\n    ListIterator<E> it = listIterator(size());\n    if (o==null) {\n        while (it.hasPrevious())\n            if (it.previous()==null)\n                return it.nextIndex();\n    } else {\n        while (it.hasPrevious())\n            if (o.equals(it.previous()))\n                return it.nextIndex();\n    }\n    return -1;\n}\n"],["body","\n"],["headingLink","移除"],["heading","移除"],["body","\n\n"],["body","依赖 ListIterator 实现"],["body","\n"],["body","从前往后 移除范围内的元素"],["body","\n\n"],["body","public void clear() {\n    removeRange(0, size());\n}\n\nprotected void removeRange(int fromIndex, int toIndex) {\n    ListIterator<E> it = listIterator(fromIndex);\n    for (int i=0, n=toIndex-fromIndex; i<n; i++) {\n        it.next();\n        it.remove();\n    }\n}\n"],["body","\n"],["headingLink","比较"],["heading","比较"],["body","\n\n"],["body","\n"],["body","快速比较内存地址"],["body","\n"],["body","如果内存地址相等 则返回 True"],["body","\n"],["body","\n"],["body","\n"],["body","类型判断 判断是否是List"],["body","\n"],["body","\n"],["body","\n"],["body","依赖 ListIterator"],["body","\n"],["body","\n"],["body","\n"],["body","空值与空值相等"],["body","\n"],["body","\n\n"],["body","public boolean equals(Object o) {\n    if (o == this)\n        return true;\n    if (!(o instanceof List))\n        return false;\n\n    ListIterator<E> e1 = listIterator();\n    ListIterator<?> e2 = ((List<?>) o).listIterator();\n    while (e1.hasNext() && e2.hasNext()) {\n        E o1 = e1.next();\n        Object o2 = e2.next();\n        if (!(o1==null ? o2==null : o1.equals(o2)))\n            return false;\n    }\n    return !(e1.hasNext() || e2.hasNext());\n}\n"],["body","\n"],["headingLink","hashcode"],["heading","hashCode"],["body","\n\n"],["body","将每个元素的hashCode累加"],["body","\n"],["body","确保了，equals 相等 则hashCode 不相等"],["body","\n\n"],["body","public int hashCode() {\n    int hashCode = 1;\n    for (E e : this)\n        hashCode = 31*hashCode + (e==null ? 0 : e.hashCode());\n    return hashCode;\n}\n"],["body","\n"],["headingLink","普通迭代器子类"],["heading","普通迭代器子类"],["body","\n"],["headingLink","变量释义"],["heading","变量释义"],["body","\n"],["body","lastRet"],["body","\n"],["body","上一次访问的 索引位置，如果没有访问或者 元素被删除了，则置为-1"],["body","\n"],["body","cursor"],["body","\n"],["body","下一次访问的索引"],["body","\n"],["body","expectedModCount"],["body","\n"],["body","当生成迭代器时，记录当前集合被修改的次数"],["body","\n"],["body","private class Itr implements Iterator<E> {\n    /**\n     * Index of element to be returned by subsequent call to next.\n     */\n    int cursor = 0;\n\n    /**\n     * Index of element returned by most recent call to next or\n     * previous.  Reset to -1 if this element is deleted by a call\n     * to remove.\n     */\n    int lastRet = -1;\n\n    /**\n     * The modCount value that the iterator believes that the backing\n     * List should have.  If this expectation is violated, the iterator\n     * has detected concurrent modification.\n     */\n    int expectedModCount = modCount;\n\n    //是否有下一个\n    public boolean hasNext() {\n        return cursor != size();\n    }\n    //取下一个，记录 lastRet，移动cursor\n    public E next() {\n        checkForComodification();\n        try {\n            int i = cursor;\n            E next = get(i);\n            lastRet = i;\n            cursor = i + 1;\n            return next;\n        } catch (IndexOutOfBoundsException e) {\n            checkForComodification();\n            throw new NoSuchElementException();\n        }\n    }\n\n    //根据索引，移除最近的元素，并更新 modCount\n    public void remove() {\n        if (lastRet < 0)\n            throw new IllegalStateException();\n        checkForComodification();\n\n        try {\n            AbstractList.this.remove(lastRet);\n            if (lastRet < cursor)\n                cursor--;\n            lastRet = -1;\n            expectedModCount = modCount;\n        } catch (IndexOutOfBoundsException e) {\n            throw new ConcurrentModificationException();\n        }\n    }\n\n    final void checkForComodification() {\n        if (modCount != expectedModCount)\n            throw new ConcurrentModificationException();\n    }\n}\n"],["body","\n"],["headingLink","listiterator迭代器"],["heading","ListIterator迭代器"],["body","\n"],["body","List迭代器 与  普通迭代器相比，多了以下几个特性"],["body","\n\n"],["body","可以 往前迭代"],["body","\n"],["body","且可以获取索引，"],["body","\n"],["body","可以修改当前位置的值，可以在最后插入值"],["body","\n\n"],["body","接口定义"],["body","\n"],["body","public interface ListIterator<E> extends Iterator<E> {\n\n\tboolean hasNext();\n    boolean hasPrevious();\n   \n    \n\tE next();\n\n\tE previous();\n\tint nextIndex();\n\tint previousIndex();\n\t\n\t\n\tvoid remove();\n\t\n\tvoid set(E e);\n\tvoid add(E e);\n}\n"],["body","\n"],["body","实现"],["body","\n\n"],["body","ListItr 继承于 Itr"],["body","\n"],["body","可以指定 cursor"],["body","\n"],["body","迭代器的头为0"],["body","\n"],["body","previos 实现为 cursor-1 取得"],["body","\n\n"],["body","private class ListItr extends Itr implements ListIterator<E> {\n    ListItr(int index) {\n        cursor = index;\n    }\n\n    public boolean hasPrevious() {\n        return cursor != 0;\n    }\n\n    public E previous() {\n        checkForComodification();\n        try {\n            int i = cursor - 1;\n            E previous = get(i);\n            lastRet = cursor = i;\n            return previous;\n        } catch (IndexOutOfBoundsException e) {\n            checkForComodification();\n            throw new NoSuchElementException();\n        }\n    }\n\n    public int nextIndex() {\n        return cursor;\n    }\n\n    public int previousIndex() {\n        return cursor-1;\n    }\n\n    public void set(E e) {\n        if (lastRet < 0)\n            throw new IllegalStateException();\n        checkForComodification();\n\n        try {\n            AbstractList.this.set(lastRet, e);\n            expectedModCount = modCount;\n        } catch (IndexOutOfBoundsException ex) {\n            throw new ConcurrentModificationException();\n        }\n    }\n\n    public void add(E e) {\n        checkForComodification();\n\n        try {\n            int i = cursor;\n            AbstractList.this.add(i, e);\n            lastRet = -1;\n            cursor = i + 1;\n            expectedModCount = modCount;\n        } catch (IndexOutOfBoundsException ex) {\n            throw new ConcurrentModificationException();\n        }\n    }\n}\n"],["body","\n"],["headingLink","总结-1"],["heading","总结"],["body","\n\n"],["body","AbstractList 提供了 基于 List迭代器，根据 对象查询索引的实现"],["body","\n"],["body","提供了 基于 List迭代器的 范围删除的实现"],["body","\n"],["body","实现了 equals 与 hashCode的实现"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/SynchronousQueue.html"],["title","SynchronousQueue.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概述"],["body","\n"],["body","SynchronousQueue类实现了BlockingQueue接口。"],["body","\n"],["body","SynchronousQueue是一个内部只能包含一个元素的队列。插入元素到队列的线程被阻塞，直到另一个线程从队列中获取了队列中存储的元素。同样，如果线程尝试获取元素并且当前不存在任何元素，则该线程将被阻塞，直到线程将元素插入队列。"],["body","\n"],["body","将这个类称为队列有点不是很形象，这更像是一个点。"],["body","\n"],["h1","源码分析"],["body","\n"],["body","SynchronousQueue的内部实现了两个类，一个是TransferStack类，使用LIFO顺序存储元素，这个类用于非公平模式；还有一个类是TransferQueue，使用FIFI顺序存储元素，这个类用于公平模式。这两个类继承自\"Nonblocking Concurrent Objects with Condition Synchronization\"算法，此算法是由W. N. Scherer III 和 M. L. Scott提出的，关于此算法的理论内容在这个网站中：http://www.cs.rochester.edu/u/scott/synchronization/pseudocode/duals.html。两个类的性能差不多，FIFO通常用于在竞争下支持更高的吞吐量，而LIFO在一般的应用中保证更高的线程局部性。"],["body","\n"],["body","队列（或者栈）的节点在任何时间要么是\"data\"模式 —— 通过put操作提供的元素的模式，要么是\"request\"模式 —— 通过take操作取出元素的模式，要么为空。还有一个模式是\"fulfill\"模式，当队列有一个data节点时，请求从队列中获取一个元素就会构造一个\"fulfill\"模式的节点，反之亦然。这个类最有趣的特性在于任何操作都能够计算出现在队列头节点处于什么模式，然后根据它进行操作而无需使用锁。"],["body","\n"],["body","队列和栈都继承了抽象类Transferer，这个类只定义了一个方法transfer，此方法可以既可以执行put也可以执行take操作。这两个操作被统一到了一个方法中，因为在dual数据结构中，put和take操作是对称的，所以相近的所有结点都可以被结合。使用transfer方法是从长远来看的，它相比分为两个几乎重复的部分来说更加容易理解。"],["body","\n"],["headingLink","transferer抽象类"],["heading","Transferer抽象类"],["body","\n"],["body","abstract static class Transferer<E> {\n    /**\n     * 执行put或者take操作/\n     * 如果参数e非空，这个元素将被交给一个消费线程；如果为null，\n     * 则请求返回一个被生产者提交的元素。\n     * 如果返回的结果非空，那么元素被提交了或被接受了；如果为null，\n     * 这个操作可能因为超时或者中断失败了。调用者可以通过检查\n     * Thread.interrupted来区分到底是因为什么元素失败。\n     */\n    abstract E transfer(E e, boolean timed, long nanos);\n}\n"],["body","\n"],["headingLink","transferstack"],["heading","TransferStack"],["body","\n"],["headingLink","数据结构定义"],["heading","数据结构定义"],["body","\n"],["body","static final class TransferStack<E> extends Transferer<E> {\n/* Modes for SNodes, ORed together in node fields */\n/** 表示一个未满足的消费者 */\nstatic final int REQUEST    = 0;\n/** 表示一个未满足的生产者 */\nstatic final int DATA       = 1;\n/** Node is fulfilling another unfulfilled DATA or REQUEST */\nstatic final int FULFILLING = 2;\n\nstatic boolean isFulfilling(int m) { return (m & FULFILLING) != 0; }\n\n/** Node class for TransferStacks. */\nstatic final class SNode {\n    volatile SNode next;        // 栈中的下一个结点\n    volatile SNode match;       // 匹配此结点的结点\n    volatile Thread waiter;     // 控制 park/unpark\n    Object item;                // 数据\n    int mode;//结点模式\n"],["body","\n"],["headingLink","stack的核心方法"],["heading","Stack的核心方法"],["body","\n"],["body","使用put操作时参数e不为空，而使用take操作时参数e为null，而timed和nanos指定是否使用超时。"],["body","\n"],["body","此方法主要有三个 Action"],["body","\n\n"],["body","当栈为空或者， 栈顶有模式相同的元素：则直接入栈顶"],["body","\n"],["body","当 栈顶存在不同模式的元素，则 尝试 fullFiller 待插入的元素，入栈顶，并尝试匹配下一个结点 一起出栈"],["body","\n"],["body","当栈顶 存在 fullfiller 元素 则帮助其 出栈"],["body","\n\n"],["body","E transfer(E e, boolean timed, long nanos) {\n    /*\n     * 基础算法，循环尝试下面三种操作中的一个：\n     *\n     * 1. 如果头节点为空或者已经包含了相同模式的结点，尝试将结点\n     *    增加到栈中并且等待匹配。如果被取消，返回null\n     *\n     * 2. 如果头节点是一个模式不同的结点，尝试将一个`fulfilling`结点加入\n     *    到栈中，匹配相应的等待结点，然后一起从栈中弹出，\n     *    并且返回匹配的元素。匹配和弹出操作可能无法进行，\n     *    由于其他线程正在执行操作3\n     *\n     * 3. 如果栈顶已经有了一个`fulfilling`结点，帮助它完成\n     *    它的匹配和弹出操作，然后继续。\n     */\n\n    SNode s = null; // constructed/reused as needed\n    // 传入参数为null代表请求获取一个元素，否则表示插入元素\n    int mode = (e == null) ? REQUEST : DATA;\n\n    for (;;) {\n        SNode h = head;\n        // 如果头节点为空或者和当前模式相同\n        if (h == null || h.mode == mode) {  // empty or same-mode\n            // 设置超时时间为 0，立刻返回\n            if (timed && nanos <= 0L) {     // can't wait\n                if (h != null && h.isCancelled())\n                    casHead(h, h.next);     // pop cancelled node\n                else\n                    return null;\n            // 构造一个结点并且设为头节点\n            } else if (casHead(h, s = snode(s, e, h, mode))) {\n                // 等待满足\n                SNode m = awaitFulfill(s, timed, nanos);\n                if (m == s) {               // wait was cancelled\n                    clean(s);\n                    return null;\n                }\n                if ((h = head) != null && h.next == s)\n                    casHead(h, s.next);     // help s's fulfiller\n                return (E) ((mode == REQUEST) ? m.item : s.item);\n            }\n        // 检查头节点是否为FULFILLIING\n        } else if (!isFulfilling(h.mode)) { // try to fulfill\n            if (h.isCancelled())            // already cancelled\n                casHead(h, h.next);         // pop and retry\n            // 更新头节点为自己\n            else if (casHead(h, s=snode(s, e, h, FULFILLING|mode))) {\n                // 循环直到匹配成功\n                for (;;) { // loop until matched or waiters disappear\n                    SNode m = s.next;       // m is s's match\n                    if (m == null) {        // all waiters are gone\n                        casHead(s, null);   // pop fulfill node\n                        s = null;           // use new node next time\n                        break;              // restart main loop\n                    }\n                    SNode mn = m.next;\n                    if (m.tryMatch(s)) {\n                        casHead(s, mn);     // pop both s and m\n                        return (E) ((mode == REQUEST) ? m.item : s.item);\n                    } else                  // lost match\n                        s.casNext(m, mn);   // help unlink\n                }\n            }\n        // 帮助满足的结点匹配\n        } else {                            // help a fulfiller\n            SNode m = h.next;               // m is h's match\n            if (m == null)                  // waiter is gone\n                casHead(h, null);           // pop fulfilling node\n            else {\n                SNode mn = m.next;\n                if (m.tryMatch(h))          // help match\n                    casHead(h, mn);         // pop both h and m\n                else                        // lost match\n                    h.casNext(m, mn);       // help unlink\n            }\n        }\n    }\n}\n"],["body","\n"],["headingLink","同模式自旋等待"],["heading","同模式自旋等待"],["body","\n"],["body","\n"],["body","遇到同模式的结点后，入栈自旋一段时间后等待"],["body","\n"],["body","\n"],["body","SNode awaitFulfill(SNode s, boolean timed, long nanos) {\n    final long deadline = timed ? System.nanoTime() + nanos : 0L;\n    Thread w = Thread.currentThread();\n    int spins = (shouldSpin(s) ?\n                 (timed ? maxTimedSpins : maxUntimedSpins) : 0); //计算需要自旋的次数\n    for (;;) {\n        if (w.isInterrupted()) //中断后取消自己\n            s.tryCancel();\n        SNode m = s.match;\n        if (m != null) // 被唤醒之后，匹配不为空，说明匹配成功\n            return m;\n        if (timed) {\n            nanos = deadline - System.nanoTime();\n            if (nanos <= 0L) {\n                s.tryCancel(); //超时后取消自己\n                continue;\n            }\n        }\n        if (spins > 0)\n            spins = shouldSpin(s) ? (spins-1) : 0;//当自己是头结点，或者已经是fullFiller了，保持自旋\n        else if (s.waiter == null) //自旋完毕，开始等待\n            s.waiter = w; // establish waiter so can park next iter\n        else if (!timed)\n            LockSupport.park(this);\n        else if (nanos > spinForTimeoutThreshold)\n            LockSupport.parkNanos(this, nanos);\n    }\n}\n"],["body","\n"],["headingLink","示意图"],["heading","示意图"],["body","\n"],["body","\n"],["headingLink","transferqueue"],["heading","TransferQueue"],["body","\n"],["headingLink","数据结构定义-1"],["heading","数据结构定义"],["body","\n"],["body","static final class TransferQueue<E> extends Transferer<E> {\n    /** Head of queue */\n    transient volatile QNode head; //队列头结点\n    /** Tail of queue */\n    transient volatile QNode tail; //队列尾结点\n    /**\n         * Reference to a cancelled node that might not yet have been\n         * unlinked from queue because it was the last inserted node\n         * when it was cancelled.\n         */\n    transient volatile QNode cleanMe;\n    /** Node class for TransferQueue. */\n    static final class QNode {\n        volatile QNode next;          // next node in queue 下节点\n        volatile Object item;         // CAS'ed to or from null，数据域\n        volatile Thread waiter;       // to control park/unpark\n        final boolean isData; //是否包含数\n"],["body","\n"],["headingLink","核心方法"],["heading","核心方法"],["body","\n\n"],["body","如果 队列为空 或者 与队尾模式相同，则入队尾 自旋等待"],["body","\n"],["body","如果  与队头模式匹配成功，则尝试 队头出队列，并唤醒匹配的等待结点"],["body","\n\n"],["body","E transfer(E e, boolean timed, long nanos) {\n    /* Basic algorithm is to loop trying to take either of\n     * two actions:\n     *\n     * 1. If queue apparently empty or holding same-mode nodes,\n     *    try to add node to queue of waiters, wait to be\n     *    fulfilled (or cancelled) and return matching item.\n     *\n     * 2. If queue apparently contains waiting items, and this\n     *    call is of complementary mode, try to fulfill by CAS'ing\n     *    item field of waiting node and dequeuing it, and then\n     *    returning matching item.\n     *\n     * In each case, along the way, check for and try to help\n     * advance head and tail on behalf of other stalled/slow\n     * threads.\n     *\n     * The loop starts off with a null check guarding against\n     * seeing uninitialized head or tail values. This never\n     * happens in current SynchronousQueue, but could if\n     * callers held non-volatile/final ref to the\n     * transferer. The check is here anyway because it places\n     * null checks at top of loop, which is usually faster\n     * than having them implicitly interspersed.\n     */\n\n    QNode s = null; // constructed/reused as needed\n    boolean isData = (e != null);\n\n    for (;;) {\n        QNode t = tail;\n        QNode h = head;\n        if (t == null || h == null)         // saw uninitialized value\n            continue;                       // spin\n\n        // 如果队列为空或者模式与头节点相同\n        if (h == t || t.isData == isData) { // empty or same-mode\n            QNode tn = t.next;\n            // 如果有其他线程修改了tail，进入下一循环重读\n            if (t != tail)                  // inconsistent read    还未开始竞争，就输了：已经将tail更新好了，则退出，开始下一轮\n                continue;\n            // 如果有其他线程修改了tail，尝试cas更新尾节点，进入下一循环重读\n            if (tn != null) {               // lagging tail   还未开始竞争，就输了：已经更新了next，还未开始更新tail引用，则帮忙更新下，然后退出开始下一轮\n                advanceTail(t, tn);\n                continue;\n            }\n            // 超时返回\n            if (timed && nanos <= 0L)       // can't wait\n                return null;\n            // 构建一个新节点\n            if (s == null)\n                s = new QNode(e, isData);\n            // 尝试CAS设置尾节点的next字段指向自己\n            // 如果失败，重试\n            if (!t.casNext(null, s))        // failed to link in，正式开始竞争，竞争失败，则退出\n                continue;\n      \n            // cas设置当前节点为尾节点\n            advanceTail(t, s);              // swing tail and wait  竞争成功设置 尾结点\n            // 等待匹配的节点\n            Object x = awaitFulfill(s, e, timed, nanos); //自旋等待\n            // 如果被取消，删除自己，返回null\n            if (x == s) {                   // wait was cancelled 由于中断被唤醒了，则取消\n                clean(t, s);\n                return null;\n            }\n\n            // 如果此节点没有被模式匹配的线程出队:即将 头节点 从上一个指向自己，\n            // 那么自己进行出队操作\n            if (!s.isOffList()) {           // not already unlinked  唤醒自己的结点还没来得扫尾，则自己开始扫尾\n                advanceHead(t, s);          // unlink if head 此时头节点理应是t， 更新为s 指向自己，即出队列，此出发生在 队列已经成功匹配，且已经唤醒了配对的线程，也就是当前线程，但还未来得及 出队列故 出队列，小优化：不是必要\n                if (x != null)              // and forget fields：取消对 item的引用，加快GC\n                    s.item = s;\n                s.waiter = null;//取消对 线程对象的引用，加快GC\n            }\n            return (x != null) ? (E)x : e;\n\n        } else {                            // complementary-mode\n            QNode m = h.next;               // node to fulfill\n            // 数据不一致，重读\n            if (t != tail || m == null || h != head)\n                continue;                   // inconsistent read\n\n            Object x = m.item;\n            if (isData == (x != null) ||    // m already fulfilled     m已经匹配成功了\n                x == m ||                   // m cancelled             m被取消了\n                !m.casItem(x, e)) {         // lost CAS                CAS竞争失败\n                // 上面三个条件无论哪一个满足，都证明m已经失效无用了，\n                // 需要将其出队\n                advanceHead(h, m);          // dequeue and retry\n                continue;\n            }\n\n            // 成功匹配，依然需要将节点出队\n            advanceHead(h, m);              // successfully fulfilled\n            // 唤醒匹配节点，如果它被阻塞了\n            LockSupport.unpark(m.waiter);\n            return (x != null) ? (E)x : e;\n        }\n    }\n}\n\nObject awaitFulfill(QNode s, E e, boolean timed, long nanos) {\n    /* Same idea as TransferStack.awaitFulfill */\n    final long deadline = timed ? System.nanoTime() + nanos : 0L;\n    Thread w = Thread.currentThread();\n    int spins = (head.next == s)\n        ? (timed ? MAX_TIMED_SPINS : MAX_UNTIMED_SPINS)\n        : 0;\n    for (;;) {\n        if (w.isInterrupted())\n            s.tryCancel(e);\n        Object x = s.item;\n        // item被修改后返回\n        // 如果put操作在此等待，item会被更新为null\n        // 如果take操作再次等待，item会由null变为一个值\n        if (x != e)\n            return x;\n        if (timed) {\n            nanos = deadline - System.nanoTime();\n            if (nanos <= 0L) {\n                s.tryCancel(e);\n                continue;\n            }\n        }\n        if (spins > 0) {\n            --spins;\n            Thread.onSpinWait();\n        }\n        else if (s.waiter == null)\n            s.waiter = w;\n        else if (!timed)\n            LockSupport.park(this);\n        else if (nanos > SPIN_FOR_TIMEOUT_THRESHOLD)\n            LockSupport.parkNanos(this, nanos);\n    }\n}\n"],["body","\n"],["headingLink","等待"],["heading","等待"],["body","\n\n"],["body","先自旋一段时间判断 是否已经匹配，匹配成功 则 返回"],["body","\n"],["body","否则 超时等待"],["body","\n"],["body","如果被打断 则取消自身结点"],["body","\n\n"],["body","Object awaitFulfill(QNode s, E e, boolean timed, long nanos) {\n    /* Same idea as TransferStack.awaitFulfill */\n    final long deadline = timed ? System.nanoTime() + nanos : 0L;\n    Thread w = Thread.currentThread();\n    int spins = ((head.next == s) ?\n                 (timed ? maxTimedSpins : maxUntimedSpins) : 0);\n    for (;;) {\n        if (w.isInterrupted())\n            s.tryCancel(e);\n        Object x = s.item;\n        if (x != e)\n            return x;\n        if (timed) {\n            nanos = deadline - System.nanoTime();\n            if (nanos <= 0L) {\n                s.tryCancel(e);\n                continue;\n            }\n        }\n        if (spins > 0)\n            --spins;\n        else if (s.waiter == null)\n            s.waiter = w;\n        else if (!timed)\n            LockSupport.park(this);\n        else if (nanos > spinForTimeoutThreshold)\n            LockSupport.parkNanos(this, nanos);\n    }\n}\n"],["body","\n"],["headingLink","示意图-1"],["heading","示意图"],["body","\n"],["body","PUT -> PUT -> TAKE"],["body","\n"],["body","\n"],["body","TAKE -> TAKE -> PUT"],["body","\n"],["body","\n"],["headingLink","公共方法"],["heading","公共方法"],["body","\n"],["headingLink","初始化"],["heading","初始化"],["body","\n\n"],["body","公平、非公平"],["body","\n\n"],["body","public SynchronousQueue(boolean fair) {\n    transferer = fair ? new TransferQueue<E>() : new TransferStack<E>();\n}\n"],["body","\n"],["headingLink","queue的方法"],["heading","Queue的方法"],["body","\n"],["body","//非阻塞 取数据，失败 返回*NULL*,成功 返回数据\npublic E poll() {\n    return transferer.transfer(null, true, 0);\n}\n"],["body","\n"],["body","//同步队列 不存放任何数据，所以返回NULL\npublic E peek() {\n    return null;\n}\n"],["body","\n"],["headingLink","blockingqueued的方法"],["heading","BlockingQueued的方法"],["body","\n"],["body","PUT"],["body","\n\n"],["body","不允许空"],["body","\n"],["body","阻塞获取数据 直到数据返回"],["body","\n"],["body","如果返回NULL 则表明是被中断了，则手动中断"],["body","\n\n"],["body","public void put(E e) throws InterruptedException {\n    if (e == null) throw new NullPointerException();\n    if (transferer.transfer(e, false, 0) == null) {\n        Thread.interrupted();\n        throw new InterruptedException();\n    }\n}\n"],["body","\n"],["body","Offer"],["body","\n\n"],["body","超时等待"],["body","\n"],["body","超时则返回false"],["body","\n"],["body","中断抛异常"],["body","\n\n"],["body","public boolean offer(E e, long timeout, TimeUnit unit)\n    throws InterruptedException {\n    if (e == null) throw new NullPointerException();\n    if (transferer.transfer(e, true, unit.toNanos(timeout)) != null)\n        return true;\n    if (!Thread.interrupted())\n        return false;\n    throw new InterruptedException();\n}\n"],["body","\n"],["body","Take"],["body","\n\n"],["body","阻塞获取数据"],["body","\n"],["body","为空则认为是中断，抛异常"],["body","\n\n"],["body","public E take() throws InterruptedException {\n    E e = transferer.transfer(null, false, 0);\n    if (e != null)\n        return e;\n    Thread.interrupted();\n    throw new InterruptedException();\n}\n"],["body","\n"],["body","Poll"],["body","\n\n"],["body","超时取数据"],["body","\n"],["body","获取数据成功或者超时 则返回 e"],["body","\n"],["body","否则 抛异常"],["body","\n\n"],["body","public E poll(long timeout, TimeUnit unit) throws InterruptedException {\n    E e = transferer.transfer(null, true, unit.toNanos(timeout));\n    if (e != null || !Thread.interrupted())\n        return e;\n    throw new InterruptedException();\n}\n"],["body","\n"],["headingLink","drainto"],["heading","DrainTo"],["body","\n\n"],["body","非阻塞循环 快速取数据"],["body","\n"],["body","能取多少是多少，直到无法取到"],["body","\n\n"],["body","public int drainTo(Collection<? super E> c) {\n    if (c == null)\n        throw new NullPointerException();\n    if (c == this)\n        throw new IllegalArgumentException();\n    int n = 0;\n    for (E e; (e = poll()) != null;) {\n        c.add(e);\n        ++n;\n    }\n    return n;\n}\n"],["body","\n"],["h1","总结"],["body","\n"],["headingLink","synchronousqueue的实现原理是怎样的"],["heading","SynchronousQueue的实现原理是怎样的？"],["body","\n\n"],["body","使用栈 或者队列 实现 公平与非公平"],["body","\n"],["body","利用 模式匹配 统一 存或取操作，如果队尾 或 栈顶 是 同种 模式则 自旋一定次数进入等待，如果不是同种模式则 匹配成功\n\n"],["body","如果是队列 则 直接将队头结点 出队列，并唤醒等待在该结点的 线程"],["body","\n"],["body","如果是栈，则入栈一个 匹配结点，然后将两个结点 出栈"],["body","\n\n"],["body","\n\n"],["headingLink","transferqueue与transferstack的异同"],["heading","TransferQueue与TransferStack的异同"],["body","\n"],["headingLink","核心不同点"],["heading","核心不同点"],["body","\n\n"],["body","一个FIFO，一个FILO "],["body","\n\n"],["headingLink","共同点"],["heading","共同点"],["body","\n\n"],["body","都使用 NULL 值返回 表明 没有取到数据"],["body","\n"],["body","都使用 匹配 模式，实现1对1的存取"],["body","\n"],["body","都通过 将指针 指向自己  表明 结点的取消状态"],["body","\n\n"],["headingLink","不同处"],["heading","不同处"],["body","\n\n"],["body","队列实际匹配时，不会将待匹配的结点入队列，而是直接 将已匹配的结点出队列"],["body","\n"],["body","栈 在 模式匹配时，会将两个结点都入栈"],["body","\n\n"],["headingLink","transferstack与queue如何-减少多线程间的竞争"],["heading","TransferStack与Queue如何 减少多线程间的竞争"],["body","\n\n"],["body","通过设置 标记位 通知正 在自旋的线程已 完成匹配"],["body","\n"],["body","Stack：当检测到 其他结点 在 进行匹配操作时 会 其他线程会帮助 匹配的那对元素 出栈 后 在进行自己的 入栈"],["body","\n"],["body","Queue：多个线程在队头 竞争一个资源\n\n"],["body","还未开始竞争，其他线程已经 到手了，则默默退出"],["body","\n"],["body","竞争失败后，会默默帮对方做 好善后工作：例如更新 队头结点"],["body","\n"],["body","竞争成功后，唤醒等待在该结点的线程"],["body","\n\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/ArrayList.html"],["title","ArrayList.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","ArrayList"],["body","\n"],["headingLink","初始化"],["heading","初始化"],["body","\n"],["body","空参初始化空集合"],["body","\n"],["body","private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\npublic ArrayList() {\n    this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n}\n"],["body","\n"],["body","指定容量初始化"],["body","\n"],["body","public ArrayList(int initialCapacity) {\n    if (initialCapacity > 0) {\n        this.elementData = new Object[initialCapacity];\n    } else if (initialCapacity == 0) {\n        this.elementData = EMPTY_ELEMENTDATA;\n    } else {\n        throw new IllegalArgumentException(\"Illegal Capacity: \"+\n                                           initialCapacity);\n    }\n}\n"],["body","\n"],["body","指定集合初始化"],["body","\n\n"],["body","集合转数组"],["body","\n"],["body","数组可能不是  Object[].class 则强行copy成 Object[]数组类型"],["body","\n\n"],["body","public ArrayList(Collection<? extends E> c) {\n    elementData = c.toArray();\n    if ((size = elementData.length) != 0) {\n        // c.toArray might (incorrectly) not return Object[] (see 6260652)\n        if (elementData.getClass() != Object[].class)\n            elementData = Arrays.copyOf(elementData, size, Object[].class);\n    } else {\n        // replace with empty array.\n        this.elementData = EMPTY_ELEMENTDATA;\n    }\n}\n"],["body","\n"],["headingLink","放入元素"],["heading","放入元素"],["body","\n"],["headingLink","尾部插入"],["heading","尾部插入"],["body","\n"],["body","public boolean add(E e) {\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    elementData[size++] = e;\n    return true;\n}\n//扩容\nprivate void ensureCapacityInternal(int minCapacity) {\n    ensureExplicitCapacity(calculateCapacity(elementData, minCapacity));\n}\n//当底层数组为空数组时，给定一个默认的容量10\nprivate static int calculateCapacity(Object[] elementData, int minCapacity) {\n    if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n        return Math.max(DEFAULT_CAPACITY, minCapacity);\n    }\n    return minCapacity;\n}\n//当前指针 超过了数组容量，则数组扩容\nprivate void ensureExplicitCapacity(int minCapacity) {\n    modCount++;\n\n    // overflow-conscious code\n    if (minCapacity - elementData.length > 0)\n        grow(minCapacity);\n}\n//new=old+old/2 = (3/2) * old\nprivate void grow(int minCapacity) {\n    // overflow-conscious code\n    int oldCapacity = elementData.length;\n    int newCapacity = oldCapacity + (oldCapacity >> 1);\n    if (newCapacity - minCapacity < 0)\n        newCapacity = minCapacity;\n    if (newCapacity - MAX_ARRAY_SIZE > 0)\n        newCapacity = hugeCapacity(minCapacity);\n    // minCapacity is usually close to size, so this is a win:\n    elementData = Arrays.copyOf(elementData, newCapacity);\n}\n"],["body","\n"],["headingLink","中间插入"],["heading","中间插入"],["body","\n\n"],["body","将index之后的往后 移动一位"],["body","\n"],["body","插入数据"],["body","\n\n"],["body","public void add(int index, E element) {\n    rangeCheckForAdd(index);\n\n    ensureCapacityInternal(size + 1);  // Increments modCount!!\n    System.arraycopy(elementData, index, elementData, index + 1,\n                     size - index);\n    elementData[index] = element;\n    size++;\n}\n"],["body","\n"],["headingLink","尾部批量插入"],["heading","尾部批量插入"],["body","\n\n"],["body","获取底层数组"],["body","\n"],["body","扩容"],["body","\n"],["body","拷贝"],["body","\n\n"],["body","public boolean addAll(Collection<? extends E> c) {\n    Object[] a = c.toArray();\n    int numNew = a.length;\n    ensureCapacityInternal(size + numNew);  // Increments modCount\n    System.arraycopy(a, 0, elementData, size, numNew);\n    size += numNew;\n    return numNew != 0;\n}\n"],["body","\n"],["headingLink","中间批量插入"],["heading","中间批量插入"],["body","\n\n"],["body","索引范围检查"],["body","\n"],["body","获取底层数组，容量检查"],["body","\n"],["body","判断是否需要移动后面元素"],["body","\n"],["body","拷贝 a数组到 目标数组"],["body","\n\n"],["body","public boolean addAll(int index, Collection<? extends E> c) {\n    rangeCheckForAdd(index);\n\n    Object[] a = c.toArray();\n    int numNew = a.length;\n    ensureCapacityInternal(size + numNew);  // Increments modCount\n\n    int numMoved = size - index;\n    if (numMoved > 0)\n        System.arraycopy(elementData, index, elementData, index + numNew,\n                         numMoved);\n\n    System.arraycopy(a, 0, elementData, index, numNew);\n    size += numNew;\n    return numNew != 0;\n}\n"],["body","\n"],["headingLink","移除元素"],["heading","移除元素"],["body","\n"],["headingLink","根据索引移除"],["heading","根据索引移除"],["body","\n"],["body","public E remove(int index) {\n    //索引检查\n    rangeCheck(index);\n\n    modCount++;\n    E oldValue = elementData(index);\n\n    //将 后面的元素 往前移动一位\n    int numMoved = size - index - 1;\n    if (numMoved > 0)\n        System.arraycopy(elementData, index+1, elementData, index,\n                         numMoved);//将最后一个元素置为 null\n    elementData[--size] = null; // clear to let GC do its work\n//返回旧元素\n    return oldValue;\n}\n"],["body","\n"],["headingLink","根据对象移除"],["heading","根据对象移除"],["body","\n\n"],["body","循环迭代 查找索引"],["body","\n"],["body","然后将该索引后面的元素 往前移动一位"],["body","\n\n"],["body","public boolean remove(Object o) {\n    if (o == null) {\n        for (int index = 0; index < size; index++)\n            if (elementData[index] == null) {\n                fastRemove(index);\n                return true;\n            }\n    } else {\n        for (int index = 0; index < size; index++)\n            if (o.equals(elementData[index])) {\n                fastRemove(index);\n                return true;\n            }\n    }\n    return false;\n}\n\n\nprivate void fastRemove(int index) {\n    modCount++;\n    int numMoved = size - index - 1;\n    if (numMoved > 0)\n        System.arraycopy(elementData, index+1, elementData, index,\n                         numMoved);\n    elementData[--size] = null; // clear to let GC do its work\n}\n"],["body","\n"],["headingLink","移除全部元素"],["heading","移除全部元素"],["body","\n"],["body","public void clear() {\n    modCount++;\n\n    // clear to let GC do its work\n    for (int i = 0; i < size; i++)\n        elementData[i] = null;\n\n    size = 0;\n}\n"],["body","\n"],["headingLink","保留交集元素"],["heading","保留交集元素"],["body","\n\n"],["body","重新整理相等的元素，并放到 数组的前段"],["body","\n"],["body","如果 contains 发生异常 把未处理完的元素 都移动到 新的 位置上来"],["body","\n"],["body","并将 移动完之后的元素 之外的索引 置为空，以便GC"],["body","\n\n"],["body","public boolean retainAll(Collection<?> c) {\n    Objects.requireNonNull(c);\n    return batchRemove(c, true);\n}\n//complement为true\nprivate boolean batchRemove(Collection<?> c, boolean complement) {\n    final Object[] elementData = this.elementData;\n    int r = 0, w = 0;\n    boolean modified = false;\n    try {\n        for (; r < size; r++)\n            if (c.contains(elementData[r]) == complement)\n                elementData[w++] = elementData[r];\n    } finally {\n        // Preserve behavioral compatibility with AbstractCollection,\n        // even if c.contains() throws.\n        if (r != size) {\n            System.arraycopy(elementData, r,\n                             elementData, w,\n                             size - r);\n            w += size - r;\n        }\n        if (w != size) {\n            // clear to let GC do its work\n            for (int i = w; i < size; i++)\n                elementData[i] = null;\n            modCount += size - w;\n            size = w;\n            modified = true;\n        }\n    }\n    return modified;\n}\n"],["body","\n"],["headingLink","删除交集元素"],["heading","删除交集元素"],["body","\n"],["body","重新整理 不相等的元素，并放到 数组的前段"],["body","\n"],["body","public boolean removeAll(Collection<?> c) {\n    Objects.requireNonNull(c);\n    return batchRemove(c, false);\n}\n"],["body","\n"],["headingLink","按条件移除"],["heading","按条件移除"],["body","\n\n"],["body","\n"],["body","遍历每一个元素"],["body","\n"],["body","\n"],["body","\n"],["body","标记要修改的数据"],["body","\n"],["body","条件测试成功 则记录index，记录 removeCount"],["body","\n"],["body","\n"],["body","\n"],["body","如果在这个过程中遇到并发修改，则报错"],["body","\n"],["body","\n"],["body","\n"],["body","循环移动需要更改的 索引位"],["body","\n"],["body","\n"],["body","\n"],["body","多余的 元素位置空"],["body","\n"],["body","\n"],["body","\n"],["body","如果在这个过程中遇到并发修改，则报错"],["body","\n"],["body","\n\n"],["body","public boolean removeIf(Predicate<? super E> filter) {\n    Objects.requireNonNull(filter);\n    // figure out which elements are to be removed\n    // any exception thrown from the filter predicate at this stage\n    // will leave the collection unmodified\n    int removeCount = 0;\n    final BitSet removeSet = new BitSet(size);\n    final int expectedModCount = modCount;\n    final int size = this.size;\n    for (int i=0; modCount == expectedModCount && i < size; i++) {\n        @SuppressWarnings(\"unchecked\")\n        final E element = (E) elementData[i];\n        if (filter.test(element)) {\n            removeSet.set(i);\n            removeCount++;\n        }\n    }\n    if (modCount != expectedModCount) {\n        throw new ConcurrentModificationException();\n    }\n\n    // shift surviving elements left over the spaces left by removed elements\n    final boolean anyToRemove = removeCount > 0;\n    if (anyToRemove) {\n        final int newSize = size - removeCount;\n        for (int i=0, j=0; (i < size) && (j < newSize); i++, j++) {\n            i = removeSet.nextClearBit(i);\n            elementData[j] = elementData[i];\n        }\n        for (int k=newSize; k < size; k++) {\n            elementData[k] = null;  // Let gc do its work\n        }\n        this.size = newSize;\n        if (modCount != expectedModCount) {\n            throw new ConcurrentModificationException();\n        }\n        modCount++;\n    }\n\n    return anyToRemove;\n}\n"],["body","\n"],["headingLink","替换元素"],["heading","替换元素"],["body","\n"],["headingLink","根据索引替换"],["heading","根据索引替换"],["body","\n"],["body","public E set(int index, E element) {\n    rangeCheck(index);\n\n    E oldValue = elementData(index);\n    elementData[index] = element;\n    return oldValue;\n}\n"],["body","\n"],["headingLink","替换所有元素"],["heading","替换所有元素"],["body","\n"],["body","public void replaceAll(UnaryOperator<E> operator) {\n    Objects.requireNonNull(operator);\n    final int expectedModCount = modCount;\n    final int size = this.size;\n    for (int i=0; modCount == expectedModCount && i < size; i++) {\n        elementData[i] = operator.apply((E) elementData[i]);\n    }\n    if (modCount != expectedModCount) {\n        throw new ConcurrentModificationException();\n    }\n    modCount++;\n}\n"],["body","\n"],["headingLink","排序"],["heading","排序"],["body","\n"],["body","public void sort(Comparator<? super E> c) {\n    final int expectedModCount = modCount;\n    Arrays.sort((E[]) elementData, 0, size, c);\n    if (modCount != expectedModCount) {\n        throw new ConcurrentModificationException();\n    }\n    modCount++;\n}\n"],["body","\n"],["headingLink","转数组"],["heading","转数组"],["body","\n"],["body","public <T> T[] toArray(T[] a) {\n    if (a.length < size)\n        // Make a new array of a's runtime type, but my contents:\n        return (T[]) Arrays.copyOf(elementData, size, a.getClass());\n    System.arraycopy(elementData, 0, a, 0, size);\n    if (a.length > size)\n        a[size] = null;\n    return a;\n}\n\npublic Object[] toArray() {\n    return Arrays.copyOf(elementData, size);\n}\n"],["body","\n"],["headingLink","总结"],["heading","总结"],["body","\n\n"],["body","完整的利用 索引 实现了List接口的定义的各个方法，扩容时的倍率 是 3/2，初始值是10"],["body","\n"],["body","在每次修改完 数组后，会检查 有没有被其他线程修改过，如果是 则 fastFail"],["body","\n\n"],["h1","ArrayList的SubList"],["body","\n"],["headingLink","类声明"],["heading","类声明"],["body","\n"],["body","private class SubList extends AbstractList<E> implements RandomAccess {}\n"],["body","\n"],["headingLink","初始化-1"],["heading","初始化"],["body","\n\n"],["body","parent 父List"],["body","\n"],["body","offSet 偏移量"],["body","\n"],["body","fromIndex 从哪开始"],["body","\n"],["body","toIndex 从结束"],["body","\n"],["body","记录父List的 修改次数"],["body","\n\n"],["body","SubList(AbstractList<E> parent,\n        int offset, int fromIndex, int toIndex) {\n    this.parent = parent;\n    this.parentOffset = fromIndex;\n    this.offset = offset + fromIndex;\n    this.size = toIndex - fromIndex;\n    this.modCount = ArrayList.this.modCount;\n}\n"],["body","\n"],["headingLink","取值"],["heading","取值"],["body","\n"],["body","取值过程中，父容器不能修改"],["body","\n"],["body","public E get(int index) {\n    rangeCheck(index);\n    checkForComodification();\n    return ArrayList.this.elementData(offset + index);\n}\n\n\nprivate void checkForComodification() {\n    if (ArrayList.this.modCount != this.modCount)\n        throw new ConcurrentModificationException();\n}\n"],["body","\n"],["headingLink","存值"],["heading","存值"],["body","\n"],["body","往父容器存值"],["body","\n"],["body","public void add(int index, E e) {\n    rangeCheckForAdd(index);\n    checkForComodification();\n    parent.add(parentOffset + index, e);\n    this.modCount = parent.modCount;\n    this.size++;\n}\n"],["body","\n"],["headingLink","更新"],["heading","更新"],["body","\n"],["body","直接往父容器更新"],["body","\n"],["body","public E set(int index, E e) {\n    rangeCheck(index);\n    checkForComodification();\n    E oldValue = ArrayList.this.elementData(offset + index);\n    ArrayList.this.elementData[offset + index] = e;\n    return oldValue;\n}\n"],["body","\n"],["headingLink","移除"],["heading","移除"],["body","\n"],["body","public E remove(int index) {\n    rangeCheck(index);\n    checkForComodification();\n    E result = parent.remove(parentOffset + index);\n    this.modCount = parent.modCount;\n    this.size--;\n    return result;\n}\n"],["body","\n"],["body","...等等"],["body","\n"],["headingLink","总结-1"],["heading","总结"],["body","\n\n"],["body","一旦 外部List修改了 集合，则所有sublist 都会 失效"],["body","\n\n"],["h1","RandomAccessSubList"],["body","\n"],["body","是一个标记了 RandomAccess 接口的 SubList"],["body","\n"],["body","暂时不知道有什么用"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/ConcurrentHashMap.html"],["title","ConcurrentHashMap.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概述"],["body","\n"],["body","ConcurrentHashMap是conccurrent家族中的一个类，由于它可以高效地支持并发操作，以及被广泛使用，经典的开源框架spring的底层数据结构就是使用ConcurrentHashMap实现的。与同是线程安全的老大哥HashTable相比，它已经更胜一筹，因此它的锁更加细化，而不是像HashTable一样为几乎每个方法都添加了synchronized锁，这样的锁无疑会影响到性能。"],["body","\n"],["h1","重要的属性"],["body","\n"],["headingLink","sizectl"],["heading","sizeCtl"],["body","\n"],["body","申明"],["body","\n"],["body","private transient volatile int sizeCtl;\n"],["body","\n\n"],["body","\n"],["body","负数代表正在进行初始化或扩容操作"],["body","\n\n"],["body","-1代表正在初始化"],["body","\n"],["body","-N 表示有N-1个线程正在进行扩容操作"],["body","\n\n"],["body","\n"],["body","\n"],["body","正数或0代表hash表还没有被初始化，这个数值表示初始化或下一次进行扩容的大小，这一点类似于扩容阈值的概念。还后面可以看到，它的值始终是当前ConcurrentHashMap容量的0.75倍，这与loadfactor是对应的。"],["body","\n"],["body","\n\n"],["headingLink","table"],["heading","table"],["body","\n"],["body","transient volatile Node<K,V>[] table;  \n"],["body","\n"],["body","盛装Node元素的数组 它的大小是2的整数次幂"],["body","\n"],["h1","使用 CounterCells 记录数据容量"],["body","\n\n"],["body","ConcurrentHashMap是采用CounterCell数组来记录元素个数的，像一般的集合记录集合大小，直接定义一个size的成员变量即可，当出现改变的时候只要更新这个变量就行。"],["body","\n\n"],["body","为什么ConcurrentHashMap要用这种形式来处理呢？ "],["body","\n\n"],["body","问题还是处在并发上，ConcurrentHashMap是并发集合，如果用一个成员变量来统计元素个数的话，为了保证并发情况下共享变量的的安全，势必会需要通过加锁或者自旋来实现"],["body","\n"],["body","如果竞争比较激烈的情况下，size的设置上会出现比较大的冲突反而影响了性能，所以在ConcurrentHashMap采用了分片的方法来记录大小"],["body","\n\n"],["h1","三个核心方法"],["body","\n"],["body"," @SuppressWarnings(\"unchecked\")\n//获得在i位置上的Node节点,保证获取得是最新的改动\nstatic final <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) {\n    return (Node<K,V>)U.getObjectVolatile(tab, ((long)i << ASHIFT) + ABASE);\n}\n//利用CAS算法设置i位置上的Node节点。之所以能实现并发是因为他指定了原来这个节点的值是多少\n//在CAS算法中，会比较内存中的值与你指定的这个值是否相等，如果相等才接受你的修改，否则拒绝你的修改\n//因此当前线程中的值并不是最新的值，这种修改可能会覆盖掉其他线程的修改结果  有点类似于SVN\nstatic final <K,V> boolean casTabAt(Node<K,V>[] tab, int i,\n                                    Node<K,V> c, Node<K,V> v) {\n    return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v);\n}\n//利用volatile方法设置节点位置的值\nstatic final <K,V> void setTabAt(Node<K,V>[] tab, int i, Node<K,V> v) {\n    U.putObjectVolatile(tab, ((long)i << ASHIFT) + ABASE, v);\n}\n"],["body","\n"],["h1","扩容"],["body","\n"],["headingLink","inittable"],["heading","initTable"],["body","\n"],["body","\n"],["body","懒加载初始化"],["body","\n"],["body","\n"],["body","CAS 设置  sizeCtl 为 -1"],["body","\n\n"],["body","初始化竞争成功\n\n"],["body","设置 sizeCtl为-1，表示已占据"],["body","\n"],["body","新建数组"],["body","\n"],["body","修改table引用"],["body","\n"],["body","变更 sizeCtl为 sc，即3/4的当前容量"],["body","\n\n"],["body","\n"],["body","初始化竞争失败（判断 sizeCtl<0）\n\n"],["body","自旋"],["body","\n\n"],["body","\n\n"],["body","private final Node<K,V>[] initTable() {\n    Node<K,V>[] tab; int sc;\n    while ((tab = table) == null || tab.length == 0) {\n        if ((sc = sizeCtl) < 0)\n            Thread.yield(); // lost initialization race; just spin\n        else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) {\n            try {\n                if ((tab = table) == null || tab.length == 0) {\n                    int n = (sc > 0) ? sc : DEFAULT_CAPACITY;\n                    @SuppressWarnings(\"unchecked\")\n                    Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n];\n                    table = tab = nt;\n                    sc = n - (n >>> 2);\n                }\n            } finally {\n                sizeCtl = sc;\n            }\n            break;\n        }\n    }\n    return tab;\n}\n"],["body","\n"],["headingLink","addcount"],["heading","addCount"],["body","\n\n"],["body","此方法 用于维护 map的 size大小"],["body","\n"],["body","二是用于 判断是否需要扩容"],["body","\n\n"],["body","private final void addCount(long x, int check) {\n\t......//舍去size维护 code\n    if (check >= 0) {\n        Node<K,V>[] tab, nt; int n, sc;\n        while (s >= (long)(sc = sizeCtl) && (tab = table) != null &&\n               (n = tab.length) < MAXIMUM_CAPACITY) { //如果 当前元素个数 大于 sc,且数组不为0，且数组大小没有超过最大值\n            int rs = resizeStamp(n); //取得扩容标志：  16的容量，返回28，且第16位为1，保证 右移16位后为负数，则该值为 65536+28 = 65564\n            if (sc < 0) { //sc小于0，表示当前正在扩容\n                if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                    sc == rs + MAX_RESIZERS || (nt = nextTable) == null ||\n                    transferIndex <= 0)\n                    break; //进入此路的情况是：已经完成了扩容，且更新了 table变量，但还未来得及更新 ctl字段\n                if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) //加入扩容\n                    transfer(tab, nt);\n            }\n            else if (U.compareAndSwapInt(this, SIZECTL, sc,\n                                         (rs << RESIZE_STAMP_SHIFT) + 2)) //还未扩容，则将 sc直接 覆盖为 (rs << RESIZE_STAMP_SHIFT) + 2，+2： 1表示初始化，1表示有一个线程在扩容\n                transfer(tab, null);\n            s = sumCount(); //更新大小\n        }\n    }\n}\n"],["body","\n"],["headingLink","transfer"],["heading","transfer"],["body","\n"],["body","扩容是ConcurrentHashMap的精华之一，扩容操作的核心在于数据的转移"],["body","\n"],["body","在单线程环境下数据的转移很简单，无非就是把旧数组中的数据迁移到新的数组。"],["body","\n"],["body","但是这在多线程环境下，在扩容的时候其他线程也可能正在添加元素，这时又触发了扩容怎么办？"],["body","\n"],["body","可能大家想到的第一个解决方案是加互斥锁，把转移过程锁住，虽然是可行的解决方案，但是会带来较大的性能开销。"],["body","\n"],["body","因为互斥锁会导致所有访问临界区的线程陷入到阻塞状态，持有锁的线程耗时越长，其他竞争线程就会一直被阻塞，导致吞吐量较低。"],["body","\n"],["body","而且还可能导致死锁。 "],["body","\n"],["body","而ConcurrentHashMap并没有直接加锁，而是采用CAS实现无锁的并发同步策略"],["body","\n"],["body","最精华的部分是它可以利用多线程来进行协同扩容 简单来说，"],["body","\n\n"],["body","\n"],["body","它把Node数组当作多个线程之间共享的任务队列"],["body","\n"],["body","\n"],["body","\n"],["body","然后通过维护一个指针来划分每个线程锁负责的区间"],["body","\n"],["body","\n"],["body","\n"],["body","每个线程通过区间逆向遍历来实现扩容"],["body","\n"],["body","\n"],["body","\n"],["body","一个已经迁移完的bucket会被替换为一个ForwardingNode节点，标记当前bucket已经被其他线程迁移完了。接下来分析一下它的源码实现"],["body","\n"],["body","\n\n"],["body","1、fwd:这个类是个标识类，用于指向新表用的，其他线程遇到这个类会主动跳过这个类，因为这个类要么就是扩容迁移正在进行，要么就是已经完成扩容迁移，也就是这个类要保证线程安全，再进行操作。"],["body","\n"],["body","2、advance:这个变量是用于提示代码是否进行推进处理，也就是当前桶处理完，处理下一个桶的标识"],["body","\n"],["body","3、finishing:这个变量用于提示扩容是否结束用的"],["body","\n"],["body","private final void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) {\n        int n = tab.length, stride;\n//将 (n>>>3相当于 n/8) 然后除以 CPU核心数。如果得到的结果小于 16，那么就使用 16\n \n    // 这里的目的是让每个 CPU 处理的桶一样多，避免出现转移任务不均匀的现象，如果桶较少的话，默认一个 CPU（一个线程）处理 16 个桶，也就是长度为16的时候，扩容的时候只会有一个线程来扩容\n    if ((stride = (NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE)\n        stride = MIN_TRANSFER_STRIDE; // subdivide range\n    \n    //nextTab未初始化，nextTab是用来扩容的node数组\n    if (nextTab == null) {            // initiating\n        try {\n \n            //新建一个n<<1原始table大小的nextTab,也就是32\n            @SuppressWarnings(\"unchecked\")\n            Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n << 1];\n \n            //赋值给nextTab\n            nextTab = nt;\n        } catch (Throwable ex) {      // try to cope with OOME\n \n            //扩容失败，sizeCtl使用int的最大值\n            sizeCtl = Integer.MAX_VALUE;\n            return;\n        }\n \n        //更新成员变量\n        nextTable = nextTab;\n \n        //更新转移下标，表示转移时的下标\n        transferIndex = n;\n    }\n \n    //新的tab的长度\n    int nextn = nextTab.length;\n \n    // 创建一个 fwd 节点，表示一个正在被迁移的Node，并且它的hash值为-1(MOVED)，也就是前面我们在讲putval方法的时候，会有一个判断MOVED的逻辑。它的作用是用来占位，表示原数组中位置i处的节点完成迁移以后，就会在i位置设置一个fwd来告诉其他线程这个位置已经处理过了，具体后续还会在讲\n    ForwardingNode<K,V> fwd = new ForwardingNode<K,V>(nextTab);\n \n    // 首次推进为 true，如果等于 true，说明需要再次推进一个下标（i--），反之，如果是 false，那么就不能推进下标，需要将当前的下标处理完毕才能继续推进\n    boolean advance = true;\n \n    //判断是否已经扩容完成，完成就return，退出循环\n    boolean finishing = false; // to ensure sweep before committing nextTab\n \n    //通过for自循环处理每个槽位中的链表元素，默认advace为真，通过CAS设置transferIndex属性值，并初始化i和bound值，i指当前处理的槽位序号，bound指需要处理的槽位边界，先处理槽位15的节点；\n    for (int i = 0, bound = 0;;) {\n \n        // 这个循环使用CAS不断尝试为当前线程分配任务\n \n        // 直到分配成功或任务队列已经被全部分配完毕\n \n        // 如果当前线程已经被分配过bucket区域\n \n        // 那么会通过--i指向下一个待处理bucket然后退出该循环\n        Node<K,V> f; int fh;\n        while (advance) {\n            int nextIndex, nextBound;\n \n            //--i表示下一个待处理的bucket，如果它>=bound,表示当前线程已经分配过bucket区域\n            if (--i >= bound || finishing)\n                advance = false;\n \n            //表示所有bucket已经被分配完毕 给nextIndex赋予初始值 = 16\n            else if ((nextIndex = transferIndex) <= 0) {\n                i = -1;\n                advance = false;\n            }\n            //通过cas来修改TRANSFERINDEX,为当前线程分配任务，处理的节点区间为(nextBound,nextIndex)->(0,15)\n            else if (U.compareAndSwapInt\n                     (this, TRANSFERINDEX, nextIndex,\n                      nextBound = (nextIndex > stride ?\n                                   nextIndex - stride : 0))) {\n \n                //0\n                bound = nextBound;\n \n                //15\n                i = nextIndex - 1;\n                advance = false;\n            }\n        }\n \n        //i<0说明已经遍历完旧的数组，也就是当前线程已经处理完所有负责的bucket\n        if (i < 0 || i >= n || i + n >= nextn) {\n            int sc;\n \n            //如果完成了扩容\n            if (finishing) {\n \n                //删除成员变量\n                nextTable = null;\n \n                //更新table数组\n                table = nextTab;\n \n                //更新阈值(32*0.75=24)\n                sizeCtl = (n << 1) - (n >>> 1);\n                return;\n            }\n \n            // sizeCtl 在迁移前会设置为 (rs << RESIZE_STAMP_SHIFT) + 2 (详细介绍点击这里)\n \n            // 然后，每增加一个线程参与迁移就会将 sizeCtl 加 1，\n \n            // 这里使用 CAS 操作对 sizeCtl 的低16位进行减 1，代表做完了属于自己的任务\n            if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) {\n \n                //第一个扩容的线程，执行transfer方法之前，会设置 sizeCtl = (resizeStamp(n) << RESIZE_STAMP_SHIFT) + 2)\n \n                //后续帮其扩容的线程，执行transfer方法之前，会设置 sizeCtl = sizeCtl+1\n \n                //每一个退出transfer的方法的线程，退出之前，会设置 sizeCtl = sizeCtl-1\n \n                //那么最后一个线程退出时：必然有\n                //sc == (resizeStamp(n) << RESIZE_STAMP_SHIFT) + 2)，即 (sc - 2) == resizeStamp(n) << RESIZE_STAMP_SHIFT\n \n                // 如果 sc - 2 不等于标识符左移 16 位。如果他们相等了，说明没有线程在帮助他们扩容了。也就是说，扩容结束了。\n                if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT)\n                    return;\n \n                // 如果相等，扩容结束了，更新 finising 变量\n                finishing = advance = true;\n \n                // 再次循环检查一下整张表\n                i = n; // recheck before commit\n            }\n        }\n \n        // 如果位置 i 处是空的，没有任何节点，那么放入刚刚初始化的 ForwardingNode ”空节点“\n        else if ((f = tabAt(tab, i)) == null)\n            advance = casTabAt(tab, i, null, fwd);\n \n        //表示该位置已经完成了迁移，也就是如果线程A已经处理过这个节点，那么线程B处理这个节点时，hash值一定为MOVED\n        else if ((fh = f.hash) == MOVED)\n            advance = true; // already processed\n        else { //真正开始迁移\n            synchronized (f) {\n                ...... //省略\n            }\n        }\n    }\n}\n"],["body","\n"],["headingLink","数据迁移"],["heading","数据迁移"],["body","\n"],["body","链表迁移优化"],["body","\n\n"],["body","\n"],["body","如果在链表 尾端存在 类似的数据，那么尾端的三个0 可以直接搬过来，减少内存的使用，lastRun的作用"],["body","\n"],["body","1->1->0->0->0"],["body","\n"],["body","\n"],["body","\n\n"],["body"," synchronized (f) {\n    if (tabAt(tab, i) == f) {\n        Node<K,V> ln, hn;\n        if (fh >= 0) {\n            int runBit = fh & n;\n            Node<K,V> lastRun = f;\n            for (Node<K,V> p = f.next; p != null; p = p.next) {\n                int b = p.hash & n;\n                if (b != runBit) {\n                    runBit = b;\n                    lastRun = p;\n                }\n            }\n            if (runBit == 0) {\n                ln = lastRun;\n                hn = null;\n            }\n            else {\n                hn = lastRun;\n                ln = null;\n            }\n            for (Node<K,V> p = f; p != lastRun; p = p.next) {\n                int ph = p.hash; K pk = p.key; V pv = p.val;\n                if ((ph & n) == 0)\n                    ln = new Node<K,V>(ph, pk, pv, ln);\n                else\n                    hn = new Node<K,V>(ph, pk, pv, hn);\n            }\n            setTabAt(nextTab, i, ln);\n            setTabAt(nextTab, i + n, hn);\n            setTabAt(tab, i, fwd);\n            advance = true;\n        }\n        else if (f instanceof TreeBin) {\n            TreeBin<K,V> t = (TreeBin<K,V>)f;\n            TreeNode<K,V> lo = null, loTail = null;\n            TreeNode<K,V> hi = null, hiTail = null;\n            int lc = 0, hc = 0;\n            for (Node<K,V> e = t.first; e != null; e = e.next) {\n                int h = e.hash;\n                TreeNode<K,V> p = new TreeNode<K,V>\n                    (h, e.key, e.val, null, null);\n                if ((h & n) == 0) {\n                    if ((p.prev = loTail) == null)\n                        lo = p;\n                    else\n                        loTail.next = p;\n                    loTail = p;\n                    ++lc;\n                }\n                else {\n                    if ((p.prev = hiTail) == null)\n                        hi = p;\n                    else\n                        hiTail.next = p;\n                    hiTail = p;\n                    ++hc;\n                }\n            }\n            ln = (lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) :\n            (hc != 0) ? new TreeBin<K,V>(lo) : t;\n            hn = (hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) :\n            (lc != 0) ? new TreeBin<K,V>(hi) : t;\n            setTabAt(nextTab, i, ln);\n            setTabAt(nextTab, i + n, hn);\n            setTabAt(tab, i, fwd);\n            advance = true;\n        }\n    }\n }\n"],["body","\n"],["headingLink","helptransfer"],["heading","helpTransfer"],["body","\n\n"],["body","当发现 存在 ForwardingNode结点，则加入扩容行列上来"],["body","\n\n"],["body","final Node<K,V>[] helpTransfer(Node<K,V>[] tab, Node<K,V> f) {\n    Node<K,V>[] nextTab; int sc;\n    if (tab != null && (f instanceof ForwardingNode) &&\n        (nextTab = ((ForwardingNode<K,V>)f).nextTable) != null) {\n        int rs = resizeStamp(tab.length);\n        while (nextTab == nextTable && table == tab &&\n               (sc = sizeCtl) < 0) {\n            //已经扩容完，但还未来得及更新SC\n            if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 ||\n                sc == rs + MAX_RESIZERS || transferIndex <= 0)\n                break;\n            if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) {\n                transfer(tab, nextTab);\n                break;\n            }\n        }\n        return nextTab;\n    }\n    return table;\n}\n"],["body","\n"],["headingLink","sizectl为负数的含义分析"],["heading","sizeCtl为负数的含义分析"],["body","\n"],["headingLink","组成图"],["heading","组成图"],["body","\n"],["body","\n"],["headingLink","这样存储带来的好处"],["heading","这样存储带来的好处？？"],["body","\n"],["body","首先在 CHM 中是支持并发扩容的，也就是说如果当前的数组需要进行扩容操作，可以由多个线程来共同负责；\n第一个扩容的线程，执行 transfer 方法之前，\n会设置 sizeCtl =(resizeStamp(n) << RESIZE_STAMP_SHIFT) + 2)"],["body","\n\n"],["body","后续帮其扩容的线程，执行 transfer 方法之前，会设置 sizeCtl = sizeCtl+1"],["body","\n"],["body","每一个退出 transfer 的方法的线程，退出之前，会设置 sizeCtl = sizeCtl-1\n那么最后一个线程退出时：必然有 sc == (resizeStamp(n) << RESIZE_STAMP_SHIFT) + 2)，\n如果 sc - 2 不等于标识符左移 16 位。"],["body","\n\n"],["body","如果他们相等了，说明没有线程在帮助他们扩容了。也就是说，扩容结束了。"],["body","\n"],["body","可以保证每次扩容都生成唯一的生成戳， 每次新的扩容，都有一个不同的 n（n是map的size），这个生成戳就是根据 n 来计算出来的一个数字， n 不同，这个数字也不同"],["body","\n"],["headingLink","第一个线程尝试扩容的时候为什么是2-"],["heading","第一个线程尝试扩容的时候，为什么是+2 ？？"],["body","\n"],["body","因为 1 表示初始化，2 表示一个线程在执行扩容，而且对 sizeCtl 的操作都是基于位运算的，\n所以不会关心它本身的数值是多少，只关心它在二进制上的数值，而 sc + 1 会在\n低 16 位上加 1。"],["body","\n"],["headingLink","多线程扩容要注意的问题"],["heading","多线程扩容要注意的问题？"],["body","\n"],["h1","PUTVAL"],["body","\n\n"],["body","如果还未初始化，则初始化"],["body","\n"],["body","如果当前 位置空闲，则直接插入结点"],["body","\n"],["body","如果当前位置 为 MOVED 则说明有 扩容存在，则参与扩容"],["body","\n"],["body","对当前结点加锁\n\n"],["body","如果是链表 则往链表后插入"],["body","\n"],["body","如果是红黑树，则按红黑树插入"],["body","\n\n"],["body","\n"],["body","桶中有两种结点，一种是 链表结点，一种是 TreeBin结点，TreeBin结点负责 维护红黑树的 形成，插入删除"],["body","\n\n"],["body","final V putVal(K key, V value, boolean onlyIfAbsent) {\n    if (key == null || value == null) throw new NullPointerException();\n    int hash = spread(key.hashCode());\n    int binCount = 0;\n    for (Node<K,V>[] tab = table;;) {\n        Node<K,V> f; int n, i, fh;\n        if (tab == null || (n = tab.length) == 0)\n            tab = initTable();\n        else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) {\n            if (casTabAt(tab, i, null,\n                         new Node<K,V>(hash, key, value, null)))\n                break;                   // no lock when adding to empty bin\n        }\n        else if ((fh = f.hash) == MOVED)\n            tab = helpTransfer(tab, f);\n        else {\n            V oldVal = null;\n            synchronized (f) {\n                if (tabAt(tab, i) == f) {\n                    if (fh >= 0) {\n                        binCount = 1;\n                        for (Node<K,V> e = f;; ++binCount) {\n                            K ek;\n                            if (e.hash == hash &&\n                                ((ek = e.key) == key ||\n                                 (ek != null && key.equals(ek)))) {\n                                oldVal = e.val;\n                                if (!onlyIfAbsent)\n                                    e.val = value;\n                                break;\n                            }\n                            Node<K,V> pred = e;\n                            if ((e = e.next) == null) {\n                                pred.next = new Node<K,V>(hash, key,\n                                                          value, null);\n                                break;\n                            }\n                        }\n                    }\n                    else if (f instanceof TreeBin) {\n                        Node<K,V> p;\n                        binCount = 2;\n                        if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n                                                       value)) != null) {\n                            oldVal = p.val;\n                            if (!onlyIfAbsent)\n                                p.val = value;\n                        }\n                    }\n                }\n            }\n            if (binCount != 0) {\n                if (binCount >= TREEIFY_THRESHOLD)\n                    treeifyBin(tab, i);\n                if (oldVal != null)\n                    return oldVal;\n                break;\n            }\n        }\n    }\n    addCount(1L, binCount);\n    return null;\n}\n"],["body","\n"],["h1","红黑树操作"],["body","\n\n"],["body","红黑树，即维护了 红黑树 的信息，又维护了 线性链表"],["body","\n\n"],["headingLink","查询"],["heading","查询"],["body","\n\n"],["body","如果当前 root结点 有写锁存在，则 使用线性查找"],["body","\n"],["body","没有写锁，则 使用红黑树查找，并设置一个 读锁"],["body","\n"],["body","读完之后，如果当前 有阻塞在此处的线程则 唤醒"],["body","\n\n"],["body","final Node<K,V> find(int h, Object k) {\n    if (k != null) {\n        for (Node<K,V> e = first; e != null; ) {\n            int s; K ek;\n            if (((s = lockState) & (WAITER|WRITER)) != 0) {\n                if (e.hash == h &&\n                    ((ek = e.key) == k || (ek != null && k.equals(ek))))\n                    return e;\n                e = e.next;\n            }\n            else if (U.compareAndSwapInt(this, LOCKSTATE, s,\n                                         s + READER)) {\n                TreeNode<K,V> r, p;\n                try {\n                    p = ((r = root) == null ? null :\n                         r.findTreeNode(h, k, null));\n                } finally {\n                    Thread w;\n                    if (U.getAndAddInt(this, LOCKSTATE, -READER) ==\n                        (READER|WAITER) && (w = waiter) != null)\n                        LockSupport.unpark(w);\n                }\n                return p;\n            }\n        }\n    }\n    return null;\n}\n"],["body","\n"],["headingLink","新增"],["heading","新增"],["body","\n\n"],["body","对跟结点上锁"],["body","\n"],["body","定位到叶子结点"],["body","\n"],["body","红黑树上锁\n\n"],["body","先尝试上写锁"],["body","\n"],["body","上锁失败，则尝试更加 耗时的锁竞争\n\n"],["body","如果当前没有 人获取读写锁，则尝试 获取写锁"],["body","\n"],["body","如果当前没有 等待者，则设置 自己为 等待者，且进入 等待"],["body","\n"],["body","如果当前 锁被人占用，且等待者 也被人占用，则自旋"],["body","\n\n"],["body","\n\n"],["body","\n"],["body","进行插入操作"],["body","\n"],["body","解锁：state 置为0"],["body","\n\n"],["headingLink","删除"],["heading","删除"],["body","\n\n"],["body","对根节点上锁"],["body","\n"],["body","定位到该结点"],["body","\n"],["body","红黑树上锁\n\n"],["body","先尝试上写锁"],["body","\n"],["body","上锁失败，则尝试更加 耗时的锁竞争\n\n"],["body","如果当前没有 人获取读写锁，则尝试 获取写锁"],["body","\n"],["body","如果当前没有 等待者，则设置 自己为 等待者，且进入 等待"],["body","\n"],["body","如果当前 锁被人占用，且等待者 也被人占用，则自旋"],["body","\n\n"],["body","\n\n"],["body","\n"],["body","进行删除操作"],["body","\n"],["body","解锁：state 置为0"],["body","\n\n"],["h1","总结"],["body","\n"],["headingLink","如何保证并发下的数据安全性"],["heading","如何保证并发下的数据安全性"],["body","\n"],["body","维护 map 大小"],["body","\n"],["body","使用分段锁，先尝试更新 baseCount，更新失败然后尝试  更新 某个 CounterCell 更新某个CounterCell失败 最后尝试 全量更新CounterCell"],["body","\n"],["body","扩容"],["body","\n"],["body","并发扩容，每个线程负责 迁移 部分范围的 桶的数据"],["body","\n"],["body","维护红黑树"],["body","\n"],["body","使用读写锁"],["body","\n"],["headingLink","concurrenthashmap如何扩容"],["heading","ConcurrentHashMap如何扩容"],["body","\n\n"],["body","并发扩容，每个线程负责维护 数组的固定段"],["body","\n"],["body","当其他线程 查询，新增，删除时遇到 扩容则 参与扩容"],["body","\n\n"],["body","参考链接"],["body","\n"],["body","JDK ConcurrentHashMap的BUG集锦"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/LinkedList与双向队列.html"],["title","LinkedList与双向队列.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","LinkedList"],["body","\n"],["headingLink","初始化"],["heading","初始化"],["body","\n"],["body","public LinkedList() {\n}\npublic LinkedList(Collection<? extends E> c) {\n    this();\n    addAll(c);\n}\n"],["body","\n"],["headingLink","api"],["heading","API"],["body","\n"],["headingLink","头插法"],["heading","头插法"],["body","\n"],["body","private void linkFirst(E e) {\n    final Node<E> f = first;\n    final Node<E> newNode = new Node<>(null, e, f);\n    first = newNode;\n    if (f == null)\n        last = newNode;\n    else\n        f.prev = newNode;\n    size++;\n    modCount++;\n}\n"],["body","\n"],["headingLink","尾插法"],["heading","尾插法"],["body","\n"],["body","void linkLast(E e) {\n    final Node<E> l = last;\n    final Node<E> newNode = new Node<>(l, e, null);\n    last = newNode;\n    if (l == null)\n        first = newNode;\n    else\n        l.next = newNode;\n    size++;\n    modCount++;\n}\n"],["body","\n"],["headingLink","中间插入"],["heading","中间插入"],["body","\n"],["body","void linkBefore(E e, Node<E> succ) {\n    // assert succ != null;\n    final Node<E> pred = succ.prev;\n    final Node<E> newNode = new Node<>(pred, e, succ);\n    succ.prev = newNode;\n    if (pred == null)\n        first = newNode;\n    else\n        pred.next = newNode;\n    size++;\n    modCount++;\n}\n"],["body","\n"],["headingLink","移除头"],["heading","移除头"],["body","\n"],["body","private E unlinkFirst(Node<E> f) {\n    // assert f == first && f != null;\n    final E element = f.item;\n    final Node<E> next = f.next;\n    f.item = null;\n    f.next = null; // help GC\n    first = next;\n    if (next == null)\n        last = null;\n    else\n        next.prev = null;\n    size--;\n    modCount++;\n    return element;\n}\n"],["body","\n"],["headingLink","移除尾"],["heading","移除尾"],["body","\n"],["body","private E unlinkLast(Node<E> l) {\n    // assert l == last && l != null;\n    final E element = l.item;\n    final Node<E> prev = l.prev;\n    l.item = null;\n    l.prev = null; // help GC\n    last = prev;\n    if (prev == null)\n        first = null;\n    else\n        prev.next = null;\n    size--;\n    modCount++;\n    return element;\n}\n"],["body","\n"],["headingLink","移除中间"],["heading","移除中间"],["body","\n"],["body","E unlink(Node<E> x) {\n    // assert x != null;\n    final E element = x.item;\n    final Node<E> next = x.next;\n    final Node<E> prev = x.prev;\n\n    if (prev == null) {\n        first = next;\n    } else {\n        prev.next = next;\n        x.prev = null;\n    }\n\n    if (next == null) {\n        last = prev;\n    } else {\n        next.prev = prev;\n        x.next = null;\n    }\n\n    x.item = null;\n    size--;\n    modCount++;\n    return element;\n}\n"],["body","\n"],["headingLink","获取头"],["heading","获取头"],["body","\n"],["body","public E getFirst() {\n    final Node<E> f = first;\n    if (f == null)\n        throw new NoSuchElementException();\n    return f.item;\n}\n"],["body","\n"],["headingLink","获取尾"],["heading","获取尾"],["body","\n"],["body","public E getLast() {\n    final Node<E> l = last;\n    if (l == null)\n        throw new NoSuchElementException();\n    return l.item;\n}\n"],["body","\n"],["headingLink","根据索引查找结点"],["heading","根据索引查找结点"],["body","\n\n"],["body","如果索引 在前半段 则从前往后找"],["body","\n"],["body","如果索引 在后半段 则从后往前找"],["body","\n\n"],["body","Node<E> node(int index) {\n    // assert isElementIndex(index);\n\n    if (index < (size >> 1)) {\n        Node<E> x = first;\n        for (int i = 0; i < index; i++)\n            x = x.next;\n        return x;\n    } else {\n        Node<E> x = last;\n        for (int i = size - 1; i > index; i--)\n            x = x.prev;\n        return x;\n    }\n}\n"],["body","\n"],["headingLink","线性集合方法"],["heading","线性集合方法"],["body","\n"],["headingLink","插入元素"],["heading","插入元素"],["body","\n"],["body","默认插入尾部"],["body","\n"],["body","public boolean add(E e) {\n    linkLast(e);\n    return true;\n}\n"],["body","\n"],["body","根据索引插入"],["body","\n"],["body","public void add(int index, E element) {\n    checkPositionIndex(index);\n\n    if (index == size)\n        linkLast(element);\n    else\n        linkBefore(element, node(index));\n}\n"],["body","\n"],["body","批量插入"],["body","\n\n"],["body","找到插入的索引点"],["body","\n"],["body","循环将数组 生成链表"],["body","\n\n"],["body","public boolean addAll(Collection<? extends E> c) {\n    return addAll(size, c);\n}\n\npublic boolean addAll(int index, Collection<? extends E> c) {\n    checkPositionIndex(index);\n\n    Object[] a = c.toArray();\n    int numNew = a.length;\n    if (numNew == 0)\n        return false;\n\n    Node<E> pred, succ;\n    if (index == size) {\n        succ = null;\n        pred = last;\n    } else {\n        succ = node(index);\n        pred = succ.prev;\n    }\n\n    for (Object o : a) {\n        @SuppressWarnings(\"unchecked\") E e = (E) o;\n        Node<E> newNode = new Node<>(pred, e, null);\n        if (pred == null)\n            first = newNode;\n        else\n            pred.next = newNode;\n        pred = newNode;\n    }\n\n    if (succ == null) {\n        last = pred;\n    } else {\n        pred.next = succ;\n        succ.prev = pred;\n    }\n\n    size += numNew;\n    modCount++;\n    return true;\n}\n"],["body","\n"],["headingLink","删除元素"],["heading","删除元素"],["body","\n"],["body","根据索引删除"],["body","\n\n"],["body","根据索引找到结点"],["body","\n"],["body","维护索引前后 链表"],["body","\n\n"],["body","public E remove(int index) {\n    checkElementIndex(index);\n    return unlink(node(index));\n}\n"],["body","\n"],["body","根据对象删除"],["body","\n"],["body","public boolean remove(Object o) {\n    if (o == null) {\n        for (Node<E> x = first; x != null; x = x.next) {\n            if (x.item == null) {\n                unlink(x);\n                return true;\n            }\n        }\n    } else {\n        for (Node<E> x = first; x != null; x = x.next) {\n            if (o.equals(x.item)) {\n                unlink(x);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n\n\npublic boolean removeFirstOccurrence(Object o) {\n    return remove(o);\n}\n\npublic boolean removeLastOccurrence(Object o) {\n    if (o == null) {\n        for (Node<E> x = last; x != null; x = x.prev) {\n            if (x.item == null) {\n                unlink(x);\n                return true;\n            }\n        }\n    } else {\n        for (Node<E> x = last; x != null; x = x.prev) {\n            if (o.equals(x.item)) {\n                unlink(x);\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"],["body","\n"],["body","清空链表"],["body","\n"],["body","public void clear() {\n    // Clearing all of the links between nodes is \"unnecessary\", but:\n    // - helps a generational GC if the discarded nodes inhabit\n    //   more than one generation\n    // - is sure to free memory even if there is a reachable Iterator\n    for (Node<E> x = first; x != null; ) {\n        Node<E> next = x.next;\n        x.item = null;\n        x.next = null;\n        x.prev = null;\n        x = next;\n    }\n    first = last = null;\n    size = 0;\n    modCount++;\n}\n"],["body","\n"],["headingLink","获取元素"],["heading","获取元素"],["body","\n"],["body","public E get(int index) {\n    checkElementIndex(index);\n    return node(index).item;\n}\n"],["body","\n"],["headingLink","修改元素"],["heading","修改元素"],["body","\n"],["body","public E set(int index, E element) {\n    checkElementIndex(index);\n    Node<E> x = node(index);\n    E oldVal = x.item;\n    x.item = element;\n    return oldVal;\n}\n"],["body","\n"],["headingLink","队列方法"],["heading","队列方法"],["body","\n"],["headingLink","插入元素-1"],["heading","插入元素"],["body","\n"],["body","\n"],["body","同集合插入，尾部"],["body","\n"],["body","\n"],["body","public boolean offer(E e) {\n    return add(e);\n}\n"],["body","\n"],["headingLink","移除元素"],["heading","移除元素"],["body","\n"],["body","//移除头元素\npublic E poll() {\n    final Node<E> f = first;\n    return (f == null) ? null : unlinkFirst(f);\n}\n"],["body","\n"],["headingLink","查看元素"],["heading","查看元素"],["body","\n\n"],["body","peek遇到空 队列不会报错，element会报错"],["body","\n\n"],["body","public E peek() {\n    final Node<E> f = first;\n    return (f == null) ? null : f.item;\n}\n\npublic E element() {\n    return getFirst();\n}\n"],["body","\n"],["headingLink","双向队列方法"],["heading","双向队列方法"],["body","\n"],["body","包括 头尾曾删改查"],["body","\n"],["body","省略"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/hashMap.html"],["title","hashMap.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n\n"],["body","java.util.Map接口常用的实现类：HashMap、TreeMap、HashTable、SortedMap。这些实现中最常用的是HashMap。"],["body","\n"],["body","HashMap是存放键值对key-value的散列表，它的底层数据结构是数组+链表+红黑树。"],["body","\n"],["body","\n\n"],["h1","核心参数"],["body","\n\n"],["body","DEFAULT_INITIAL_CAPACITY 为16，默认大小"],["body","\n"],["body","MAXIMUM_CAPACITY 为 1 << 30 ，最大大小"],["body","\n"],["body","TREEIFY_THRESHOLD 8，树形化阈值，当链表的个数大于8 ，才从链表转 红黑树"],["body","\n"],["body","UNTREEIFY_THRESHOLD 6 去树形话阈值，从红黑树转 链表的阈值"],["body","\n"],["body","MIN_TREEIFY_CAPACITY 当 容器的大小大于 64 才会  在 链表过长时 转 红黑树"],["body","\n"],["body","DEFAULT_LOAD_FACTOR 负载因子 0.75 ，当元素个数/容器大小 超过 0.75时，会扩容"],["body","\n\n"],["h1","HashMap的Node对象"],["body","\n"],["body","Node对象定义了4个变量："],["body","\n\n"],["body","hash：key的hash值"],["body","\n"],["body","key：需要存储的键值对的key值"],["body","\n"],["body","value：需要存储的键值对的value值"],["body","\n"],["body","next：指向下一个元素的指针地址，如果不是链表或者树next为null"],["body","\n\n"],["h1","对键取Hash方法"],["body","\n"],["body","//将hashCode的 低16位与高16位 做异或\nstatic final int hash(Object key) {\n    int h;\n    return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);\n}\n"],["body","\n"],["h1","PUT方法"],["body","\n"],["headingLink","put方法流程图"],["heading","PUT方法流程图"],["body","\n"],["body","\n"],["headingLink","put_value-code"],["heading","PUT_VALUE CODE"],["body","\n"],["body","    final V putVal(int hash, K key, V value, boolean onlyIfAbsent,\n                   boolean evict) {\n        Node<K,V>[] tab; Node<K,V> p; int n, i;\n        //判断table是否初始化，如果为空则 扩容\n        if ((tab = table) == null || (n = tab.length) == 0)\n            n = (tab = resize()).length;\n        //如果没有冲突则直接插入\n        if ((p = tab[i = (n - 1) & hash]) == null)\n            tab[i] = newNode(hash, key, value, null);\n        //如果存在冲突则\n        else {\n            Node<K,V> e; K k;\n            //当key跟 数组的第一个结点一样，则只更新 value\n            if (p.hash == hash &&\n                ((k = p.key) == key || (key != null && key.equals(k))))\n                e = p;\n            //当结点为 TreeNode 则插入红黑树\n            else if (p instanceof TreeNode)\n                e = ((TreeNode<K,V>)p).putTreeVal(this, tab, hash, key, value);\n            //当结点为 普通Node，则插入普通结点，如果已经存在结点，则只更新value\n            //当超过了树形化阈值，则树形化\n            else {\n                for (int binCount = 0; ; ++binCount) {\n                    if ((e = p.next) == null) {\n                        p.next = newNode(hash, key, value, null);\n                        if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st\n                            treeifyBin(tab, hash);\n                        break;\n                    }\n                    if (e.hash == hash &&\n                        ((k = e.key) == key || (key != null && key.equals(k))))\n                        break;\n                    p = e;\n                }\n            }\n            if (e != null) { // existing mapping for key\n                V oldValue = e.value;\n                if (!onlyIfAbsent || oldValue == null)\n                    e.value = value;\n                afterNodeAccess(e);\n                return oldValue;\n            }\n        }\n        //如果大小超过了 容量阈值，则扩容\n        ++modCount;\n        if (++size > threshold)\n            resize();\n        afterNodeInsertion(evict);\n        return null;\n    }\n"],["body","\n"],["h1","树形化"],["body","\n"],["body","略，参照红黑树"],["body","\n"],["headingLink","结点转换"],["heading","结点转换"],["body","\n\n"],["body","首先将 普通node结点转换为 TreeNode结点"],["body","\n"],["body","然后从将 链表树形化"],["body","\n\n"],["body","\nfinal void treeifyBin(Node<K,V>[] tab, int hash) {\n    int n, index; Node<K,V> e;\n    if (tab == null || (n = tab.length) < MIN_TREEIFY_CAPACITY)\n        resize();\n    \n    //链表结点 转树形结点\n    else if ((e = tab[index = (n - 1) & hash]) != null) {\n        TreeNode<K,V> hd = null, tl = null;\n        do {\n            TreeNode<K,V> p = replacementTreeNode(e, null);\n            if (tl == null)\n                hd = p;\n            else {\n                p.prev = tl;\n                tl.next = p;\n            }\n            tl = p;\n        } while ((e = e.next) != null);\n        if ((tab[index] = hd) != null)\n            hd.treeify(tab);\n    }\n}\n"],["body","\n"],["headingLink","树形化-1"],["heading","树形化"],["body","\n\n"],["body","遍历 结点树链表，依次平衡插入"],["body","\n\n"],["body","key值比较逻辑"],["body","\n\n"],["body","hash 大于 根节点的 放右边，小于根节点的hash放 左边"],["body","\n"],["body","如果hash相等，则判断 key是否实现了 Compareable类，如果实现了则 调用 compareable方法"],["body","\n"],["body","如果hash相等，也没有实现 compareable,则 调用全局系统的 判定方法"],["body","\n\n"],["body","        final void treeify(Node<K,V>[] tab) {\n            TreeNode<K,V> root = null;\n            for (TreeNode<K,V> x = this, next; x != null; x = next) {\n                next = (TreeNode<K,V>)x.next;\n                x.left = x.right = null;\n                //树立根结点\n                if (root == null) {\n                    x.parent = null;\n                    x.red = false;\n                    root = x;\n                }\n                else {\n                    K k = x.key;\n                    int h = x.hash;\n                    Class<?> kc = null;\n                    //大于根节点的放在 \n                    for (TreeNode<K,V> p = root;;) {\n                        int dir, ph;\n                        K pk = p.key;\n                        if ((ph = p.hash) > h)\n                            dir = -1;\n                        else if (ph < h)\n                            dir = 1;\n                        else if ((kc == null &&\n                                  (kc = comparableClassFor(k)) == null) ||\n                                 (dir = compareComparables(kc, k, pk)) == 0)\n                            dir = tieBreakOrder(k, pk);\n\n                        TreeNode<K,V> xp = p;\n                        if ((p = (dir <= 0) ? p.left : p.right) == null) {\n                            x.parent = xp;\n                            if (dir <= 0)\n                                xp.left = x;\n                            else\n                                xp.right = x;\n                            root = balanceInsertion(root, x);\n                            break;\n                        }\n                    }\n                }\n            }\n            moveRootToFront(tab, root);\n        }\n"],["body","\n"],["headingLink","平衡插入"],["heading","平衡插入"],["body","\n"],["body","略，具体实现见 红黑树"],["body","\n"],["h1","重新扩容"],["body","\n\n"],["body","\n"],["body","如果容量 超过了 允许的最大的个数 MAXIMUM_CAPACITY = 1 << 30 则退出"],["body","\n"],["body","\n"],["body","\n"],["body","将容量翻倍 ，阈值翻倍"],["body","\n"],["body","\n"],["body","\n"],["body","遍历旧 容器的 所有结点"],["body","\n\n"],["body","\n"],["body","如果 链条中结点只有一个 则直接使用 新容量  重新计算 位置"],["body","\n"],["body","\n"],["body","\n"],["body","如果是 链条结点 则将链条数据分为 两类，一类是需要改变位置的结点，一类是不需要改变位置结点"],["body","\n\n"],["body","(e.hash & oldCap) == 0 判断 hash值的高位 是否为0\n\n"],["body","如果为0 则说明 hash值< oldCap 在新数组中的位置 不用变，"],["body","\n"],["body","如果为1 则说明 hash值> oldCap 需要重新改变"],["body","\n\n"],["body","\n\n"],["body","\n"],["body","\n"],["body","如果是 红黑树  将数据分为 两类，一类是需要改变位置的结点，一类是不需要改变位置结点"],["body","\n\n"],["body","\n"],["body","(e.hash & oldCap) == 0 判断 hash值的高位 是否为0"],["body","\n\n"],["body","如果为0 则说明 hash值< oldCap 在新数组中的位置 不用变，"],["body","\n"],["body","如果为1 则说明 hash值> oldCap 需要重新改变"],["body","\n\n"],["body","\n"],["body","\n"],["body","如果链条长度 超过了树形话的阈值，则树形话"],["body","\n"],["body","loHead.treeify(tab);\n"],["body","\n"],["body","\n\n"],["body","\n\n"],["body","\n\n"],["headingLink","重新扩容主方法"],["heading","重新扩容主方法"],["body","\n"],["body"," final Node<K,V>[] resize() {\n        Node<K,V>[] oldTab = table;\n        int oldCap = (oldTab == null) ? 0 : oldTab.length;\n        int oldThr = threshold;\n        int newCap, newThr = 0;\n        if (oldCap > 0) {\n            if (oldCap >= MAXIMUM_CAPACITY) {\n                threshold = Integer.MAX_VALUE;\n                return oldTab;\n            }\n            else if ((newCap = oldCap << 1) < MAXIMUM_CAPACITY &&\n                     oldCap >= DEFAULT_INITIAL_CAPACITY)\n                newThr = oldThr << 1; // double threshold\n        }\n        else if (oldThr > 0) // initial capacity was placed in threshold\n            newCap = oldThr;\n        else {               // zero initial threshold signifies using defaults\n            newCap = DEFAULT_INITIAL_CAPACITY;\n            newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);\n        }\n        if (newThr == 0) {\n            float ft = (float)newCap * loadFactor;\n            newThr = (newCap < MAXIMUM_CAPACITY && ft < (float)MAXIMUM_CAPACITY ?\n                      (int)ft : Integer.MAX_VALUE);\n        }\n        threshold = newThr;\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n        Node<K,V>[] newTab = (Node<K,V>[])new Node[newCap];\n        table = newTab;\n        if (oldTab != null) {\n            for (int j = 0; j < oldCap; ++j) {\n                Node<K,V> e;\n                if ((e = oldTab[j]) != null) {\n                    oldTab[j] = null;\n                    if (e.next == null)\n                        newTab[e.hash & (newCap - 1)] = e;\n                    else if (e instanceof TreeNode)\n                        ((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n                    else { // preserve order\n                        Node<K,V> loHead = null, loTail = null;\n                        Node<K,V> hiHead = null, hiTail = null;\n                        Node<K,V> next;\n                        do {\n                            next = e.next;\n                            if ((e.hash & oldCap) == 0) {\n                                if (loTail == null)\n                                    loHead = e;\n                                else\n                                    loTail.next = e;\n                                loTail = e;\n                            }\n                            else {\n                                if (hiTail == null)\n                                    hiHead = e;\n                                else\n                                    hiTail.next = e;\n                                hiTail = e;\n                            }\n                        } while ((e = next) != null);\n                        if (loTail != null) {\n                            loTail.next = null;\n                            newTab[j] = loHead;\n                        }\n                        if (hiTail != null) {\n                            hiTail.next = null;\n                            newTab[j + oldCap] = hiHead;\n                        }\n                    }\n                }\n            }\n        }\n        return newTab;\n    }\n"],["body","\n"],["headingLink","对红黑树进行重新hash"],["heading","对红黑树进行重新hash"],["body","\n"],["body","\n"],["body","((TreeNode<K,V>)e).split(this, newTab, j, oldCap);\n"],["body","\n"],["body","\n"],["body","        final void split(HashMap<K,V> map, Node<K,V>[] tab, int index, int bit) {\n            TreeNode<K,V> b = this;\n            // Relink into lo and hi lists, preserving order\n            TreeNode<K,V> loHead = null, loTail = null;\n            TreeNode<K,V> hiHead = null, hiTail = null;\n            int lc = 0, hc = 0;\n            for (TreeNode<K,V> e = b, next; e != null; e = next) {\n                next = (TreeNode<K,V>)e.next;\n                e.next = null;\n                if ((e.hash & bit) == 0) {\n                    if ((e.prev = loTail) == null)\n                        loHead = e;\n                    else\n                        loTail.next = e;\n                    loTail = e;\n                    ++lc;\n                }\n                else {\n                    if ((e.prev = hiTail) == null)\n                        hiHead = e;\n                    else\n                        hiTail.next = e;\n                    hiTail = e;\n                    ++hc;\n                }\n            }\n\n            if (loHead != null) {\n                if (lc <= UNTREEIFY_THRESHOLD)\n                    tab[index] = loHead.untreeify(map);\n                else {\n                    tab[index] = loHead;\n                    if (hiHead != null) // (else is already treeified)\n                        loHead.treeify(tab);\n                }\n            }\n            if (hiHead != null) {\n                if (hc <= UNTREEIFY_THRESHOLD)\n                    tab[index + bit] = hiHead.untreeify(map);\n                else {\n                    tab[index + bit] = hiHead;\n                    if (loHead != null)\n                        hiHead.treeify(tab);\n                }\n            }\n        }\n"],["body","\n"],["h1","移除结点"],["body","\n\n"],["body","根据 hash 索引数组 "],["body","\n\n"],["body","p = tab[index = (n - 1) & hash]\n"],["body","\n\n"],["body","查找结点\n\n"],["body","通过 链条查找结点"],["body","\n"],["body","通过 红黑树查找结点"],["body","\n\n"],["body","\n"],["body","找到结点之后\n\n"],["body","如果是链条 则 断开该节点的链条"],["body","\n"],["body","如果是红黑树，则 调用红黑树的删除"],["body","\n\n"],["body","\n\n"],["body","final Node<K,V> removeNode(int hash, Object key, Object value,\n                           boolean matchValue, boolean movable) {\n    Node<K,V>[] tab; Node<K,V> p; int n, index;\n    if ((tab = table) != null && (n = tab.length) > 0 &&\n        (p = tab[index = (n - 1) & hash]) != null) {\n        Node<K,V> node = null, e; K k; V v;\n        if (p.hash == hash &&\n            ((k = p.key) == key || (key != null && key.equals(k))))\n            node = p;\n        else if ((e = p.next) != null) {\n            if (p instanceof TreeNode)\n                node = ((TreeNode<K,V>)p).getTreeNode(hash, key);\n            else {\n                do {\n                    if (e.hash == hash &&\n                        ((k = e.key) == key ||\n                         (key != null && key.equals(k)))) {\n                        node = e;\n                        break;\n                    }\n                    p = e;\n                } while ((e = e.next) != null);\n            }\n        }\n        if (node != null && (!matchValue || (v = node.value) == value ||\n                             (value != null && value.equals(v)))) {\n            if (node instanceof TreeNode)\n                ((TreeNode<K,V>)node).removeTreeNode(this, tab, movable);\n            else if (node == p)\n                tab[index] = node.next;\n            else\n                p.next = node.next;\n            ++modCount;\n            --size;\n            afterNodeRemoval(node);\n            return node;\n        }\n    }\n    return null;\n}\n"],["body","\n"],["h1","面试总结"],["body","\n"],["headingLink","hashmap-的底层结构"],["heading","hashMap 的底层结构"],["body","\n"],["body","数组+链表+红黑树，通过数组存储 hash 散列后的位置，使用链条 解决 hash冲突，当冲突足够多时，为了提高查询效率 使用 红黑树"],["body","\n"],["headingLink","hashmap-容量大小为什么是-2的倍数"],["heading","hashMap 容量大小为什么是 2的倍数"],["body","\n\n"],["body","\n"],["body","hash散列 时 是使用 key的 hash值 与   hash(key) & (capacity-1)   能够充分的散列 "],["body","\n"],["body","\n"],["body","\n"],["body","在扩容时减少 数据移动"],["body","\n\n"],["body","数据索引的位置 跟 hash 与 capacity-1 有关"],["body","\n"],["body","扩容后  hash不变   要么 变化为 index+oldCapcity"],["body","\n\n"],["body","\n\n"],["headingLink","hashmap-的key值-允许为空吗"],["heading","hashMap 的key值 允许为空吗？"],["body","\n"],["body","允许，因为无论 null Key取hash的值为0"],["body","\n"],["body","hashTab 在插入null Key时直接报错"],["body","\n"],["headingLink","hashmap与-hashtab的区别"],["heading","HashMap与 HashTab的区别"],["body","\n\n"],["body","\n"],["body","数据结构不同 数组加链表"],["body","\n"],["body","\n"],["body","\n"],["body","没有 容量懒加载"],["body","\n"],["body","\n"],["body","\n"],["body","key值不能为空"],["body","\n"],["body","\n"],["body","\n"],["body","容量 不用满足 2的幂方"],["body","\n"],["body","\n"],["body","\n"],["body","求 hash散列方式略微不同"],["body","\n"],["body","\n\n"],["body","最重要的"],["body","\n"],["body","所有 新增，删除，扩容方法 都加了锁"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/arraylist和linkedlist.html"],["title","arraylist和linkedlist.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/Set与LinkedHashMap.html"],["title","Set与LinkedHashMap.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","总结"],["body","\n"],["headingLink","linkedhashmap-与hashmap-有什么区别"],["heading","LinkedHashMap 与HashMap 有什么区别"],["body","\n"],["body","功能上来说"],["body","\n\n"],["body","可以维持 结点的插入顺序"],["body","\n"],["body","支持 根据 访问结点的 先后顺序 访问"],["body","\n"],["body","还支持 LRU 算法的 驱逐，前提是（第二个要开启）"],["body","\n\n"],["body","如何实现的"],["body","\n\n"],["body","\n"],["body","第一点是 在 Entry元素 中维持了 before after，在 LinkHashMap中 维持了 以下这两个变量"],["body","\n"],["body","头尾指针"],["body","\n"],["body","/**\n * The head (eldest) of the doubly linked list.\n */\ntransient LinkedHashMap.Entry<K,V> head;\n\n/**\n * The tail (youngest) of the doubly linked list.\n */\ntransient LinkedHashMap.Entry<K,V> tail;\n"],["body","\n"],["body","前驱后继"],["body","\n"],["body","static class Entry<K,V> extends HashMap.Node<K,V> {\n    Entry<K,V> before, after;\n    Entry(int hash, K key, V value, Node<K,V> next) {\n        super(hash, key, value, next);\n    }\n}\n"],["body","\n"],["body","重写了 newNode方法"],["body","\n"],["body","以此来维持插入顺序"],["body","\n"],["body","Node<K,V> newNode(int hash, K key, V value, Node<K,V> e) {\n    LinkedHashMap.Entry<K,V> p =\n        new LinkedHashMap.Entry<K,V>(hash, key, value, e);\n    linkNodeLast(p);\n    return p;\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","访问顺序的实现 与 LRU 的实现"],["body","\n"],["body","HashMap留下的 三个回调在LinkHashMap 中的实现"],["body","\n"],["body","// Callbacks to allow LinkedHashMap post-actions，\nvoid afterNodeAccess(Node<K,V> p) { } //当 get,put访问结点都会回调该方法\nvoid afterNodeInsertion(boolean evict) { } //当插入新元素时，判断需不需要 逐出旧元素\nvoid afterNodeRemoval(Node<K,V> p) { } //结点被移除之后 维持 链条\n"],["body","\n"],["body","\n\n"],["headingLink","linkhashmap-的内部视图是如何实现的"],["heading","LinkHashMap 的内部视图是如何实现的"],["body","\n"],["body","都借助于迭代器，在内部进行了一个实现"],["body","\n"],["body","可以实现 访问与  删除 但不能新增"],["body","\n"],["body","\n"],["headingLink","如何用-linkhashmap使用-lru"],["heading","如何用 LinkHashMap使用 LRU"],["body","\n"],["body","package com.example.demo;\n\nimport java.util.LinkedHashMap;\nimport java.util.Map;\n\npublic class LRU<K,V> extends LinkedHashMap<K, V> implements Map<K, V> {\n\n    private static final long serialVersionUID = 1L;\n\n    public LRU(int initialCapacity,\n             float loadFactor,\n                        boolean accessOrder) {\n        super(initialCapacity, loadFactor, accessOrder);\n    }\n\n    /** \n     * @description 重写LinkedHashMap中的removeEldestEntry方法，当LRU中元素多余6个时，\n     *              删除最不经常使用的元素\n     * @param eldest\n     * @return     \n     * @see java.util.LinkedHashMap#removeEldestEntry(java.util.Map.Entry)     \n     */  \n    @Override\n    protected boolean removeEldestEntry(java.util.Map.Entry<K, V> eldest) {\n        // TODO Auto-generated method stub\n        if(size() > 6){\n            return true;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n\n        LRU<Character, Integer> lru = new LRU<Character, Integer>(\n                16, 0.75f, true);\n\n        String s = \"abcdefghijkl\";\n        for (int i = 0; i < s.length(); i++) {\n            lru.put(s.charAt(i), i);\n        }\n        System.out.println(\"LRU中key为h的Entry的值为： \" + lru.get('h'));\n        System.out.println(\"LRU的大小 ：\" + lru.size());\n        System.out.println(\"LRU ：\" + lru);\n    }\n}\n"],["body","\n"],["headingLink","linkedhashset与linkedhashmap的关系"],["heading","LinkedHashSet与LinkedHashMap的关系"],["body","\n"],["body","底层使用 LinkedHashMap 实现"],["body","\n"],["body","HashSet(int initialCapacity, float loadFactor, boolean dummy) {\n    map = new LinkedHashMap<>(initialCapacity, loadFactor);\n}\n"],["body","\n"],["headingLink","hashmap的序列化与反序列化"],["heading","HashMap的序列化与反序列化"],["body","\n"],["headingLink","序列化"],["heading","序列化"],["body","\n\n"],["body","写入 阈值，负载因子，"],["body","\n"],["body","写入容量"],["body","\n"],["body","写入大小"],["body","\n"],["body","循环写入 Entry"],["body","\n\n"],["body","private void writeObject(java.io.ObjectOutputStream s)\n    throws IOException {\n    int buckets = capacity();\n    // Write out the threshold, loadfactor, and any hidden stuff\n    s.defaultWriteObject();\n    s.writeInt(buckets);\n    s.writeInt(size);\n    internalWriteEntries(s);\n}\n"],["body","\n"],["body","void internalWriteEntries(java.io.ObjectOutputStream s) throws IOException {\n    Node<K,V>[] tab;\n    if (size > 0 && (tab = table) != null) {\n        for (int i = 0; i < tab.length; ++i) {\n            for (Node<K,V> e = tab[i]; e != null; e = e.next) {\n                s.writeObject(e.key);\n                s.writeObject(e.value);\n            }\n        }\n    }\n}\n"],["body","\n"],["headingLink","反序列化"],["heading","反序列化"],["body","\n\n"],["body","读入默认 成员变量字段"],["body","\n"],["body","重新初始化 其他字段"],["body","\n"],["body","读入容量，忽略"],["body","\n"],["body","读入 size大小"],["body","\n"],["body","选择 loadFactor （0.25~4 之间）"],["body","\n"],["body","计算容量，计算新的阈值"],["body","\n"],["body","循环批量插入"],["body","\n\n"],["body","private void readObject(java.io.ObjectInputStream s)\n    throws IOException, ClassNotFoundException {\n    // Read in the threshold (ignored), loadfactor, and any hidden stuff\n    s.defaultReadObject();\n    reinitialize();\n    if (loadFactor <= 0 || Float.isNaN(loadFactor))\n        throw new InvalidObjectException(\"Illegal load factor: \" +\n                                         loadFactor);\n    s.readInt();                // Read and ignore number of buckets\n    int mappings = s.readInt(); // Read number of mappings (size)\n    if (mappings < 0)\n        throw new InvalidObjectException(\"Illegal mappings count: \" +\n                                         mappings);\n    else if (mappings > 0) { // (if zero, use defaults)\n        // Size the table using given load factor only if within\n        // range of 0.25...4.0\n        float lf = Math.min(Math.max(0.25f, loadFactor), 4.0f);\n        float fc = (float)mappings / lf + 1.0f;\n        int cap = ((fc < DEFAULT_INITIAL_CAPACITY) ?\n                   DEFAULT_INITIAL_CAPACITY :\n                   (fc >= MAXIMUM_CAPACITY) ?\n                   MAXIMUM_CAPACITY :\n                   tableSizeFor((int)fc));\n        float ft = (float)cap * lf;\n        threshold = ((cap < MAXIMUM_CAPACITY && ft < MAXIMUM_CAPACITY) ?\n                     (int)ft : Integer.MAX_VALUE);\n\n        // Check Map.Entry[].class since it's the nearest public type to\n        // what we're actually creating.\n        SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap);\n        @SuppressWarnings({\"rawtypes\",\"unchecked\"})\n        Node<K,V>[] tab = (Node<K,V>[])new Node[cap];\n        table = tab;\n\n        // Read the keys and values, and put the mappings in the HashMap\n        for (int i = 0; i < mappings; i++) {\n            @SuppressWarnings(\"unchecked\")\n                K key = (K) s.readObject();\n            @SuppressWarnings(\"unchecked\")\n                V value = (V) s.readObject();\n            putVal(hash(key), key, value, false, false);\n        }\n    }\n}\n"],["body","\n"],["body","void reinitialize() {\n    table = null;\n    entrySet = null;\n    keySet = null;\n    values = null;\n    modCount = 0;\n    threshold = 0;\n    size = 0;\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","06.java基础_集合框架/README.html"],["title","集合框架 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","集合类继承图"],["body","\n"],["body","\n"],["h1","Collection接口"],["body","\n"],["headingLink","查询操作"],["heading","查询操作"],["body","\n"],["body","int size();，boolean isEmpty();，boolean contains(Object o)"],["body","\n"],["headingLink","数组与集合转换"],["heading","数组与集合转换"],["body","\n"],["body","返回Object数组"],["body","\n"],["body","返回一个全新的数组，可以任意修改"],["body","\n"],["body","Object[] toArray();\n"],["body","\n"],["body","返回指定类型的数组"],["body","\n\n"],["body","如果数组大小正合适，则将元素 填充至该指定数组，否则，返回全新数组"],["body","\n"],["body","如果数组元素有多的，则第一个多的元素会被置为 NULL，以示区分"],["body","\n"],["body","这个方法能精确控制 数组返回的 运行时类型"],["body","\n\n"],["body","<T> T[] toArray(T[] a);\n//一般使用\nString[] y = x.toArray(new String[0]);\n"],["body","\n"],["headingLink","修改操作"],["heading","修改操作"],["body","\n"],["body","boolean add(E e);\nboolean remove(Object o);\n"],["body","\n"],["headingLink","批量操作"],["heading","批量操作"],["body","\n"],["body","//判断当前集合  是否 包含 指定集合\nboolean containsAll(Collection<?> c);\n//添加到集合中\nboolean addAll(Collection<? extends E> c);\n//通过迭代器，迭代，移除\nboolean removeAll(Collection<?> c);\n    default boolean removeIf(Predicate<? super E> filter) {\n        Objects.requireNonNull(filter);\n        boolean removed = false;\n        final Iterator<E> each = iterator();\n        while (each.hasNext()) {\n            if (filter.test(each.next())) {\n                each.remove();\n                removed = true;\n            }\n        }\n        return removed;\n    }\n\n//取交集，只保留 当前集合与 指定集合 都含有的元素\nboolean retainAll(Collection<?> c);\n//清空集合\nvoid clear();\n"],["body","\n"],["headingLink","排序与比较"],["heading","排序与比较"],["body","\n"],["body","boolean equals(Object o);\nint hashCode();\n"],["body","\n"],["h1","AbstractCollection"],["body","\n"],["body","//类声明\npublic abstract class AbstractCollection<E> implements Collection<E> {\n}\n"],["body","\n"],["headingLink","是否包含"],["heading","是否包含"],["body","\n"],["body","//包含\npublic boolean contains(Object o) {\n    Iterator<E> it = iterator();\n    if (o==null) { //如果对象是NULL，则判断集合中有没有NULL值\n        while (it.hasNext())\n            if (it.next()==null)\n                return true;\n    } else { //如果不是NULL，则equals判断\n        while (it.hasNext())\n            if (o.equals(it.next()))\n                return true;\n    }\n    return false;\n}\n"],["body","\n"],["headingLink","转数组"],["heading","转数组"],["body","\n\n"],["body","新建 Object 数组"],["body","\n"],["body","如果迭代器返回少数据\n\n"],["body","则将数组调整至实际大小"],["body","\n\n"],["body","\n"],["body","如果迭代器返回多数据\n\n"],["body","则将数组 扩容至 实际迭代器返回的个数"],["body","\n"],["body","扩容速率是(n/2+1) "],["body","\n"],["body","超过 INT的最大值，则会 抛出 OutOfMemoryError"],["body","\n\n"],["body","\n\n"],["body","public Object[] toArray() {\n    // Estimate size of array; be prepared to see more or fewer elements，先以集合大小作为数组大小\n    Object[] r = new Object[size()];\n    Iterator<E> it = iterator();\n    for (int i = 0; i < r.length; i++) {\n        if (! it.hasNext()) // fewer elements than expected\n            return Arrays.copyOf(r, i);\n        r[i] = it.next();\n    }\n    return it.hasNext() ? finishToArray(r, it) : r;\n}\n\nprivate static <T> T[] finishToArray(T[] r, Iterator<?> it) {\n    int i = r.length;\n    while (it.hasNext()) {\n        int cap = r.length;\n        if (i == cap) {\n            int newCap = cap + (cap >> 1) + 1;\n            // overflow-conscious code\n            if (newCap - MAX_ARRAY_SIZE > 0)\n                newCap = hugeCapacity(cap + 1);\n            r = Arrays.copyOf(r, newCap);\n        }\n        r[i++] = (T)it.next();\n    }\n    // trim if overallocated\n    return (i == r.length) ? r : Arrays.copyOf(r, i);\n}\n\nprivate static int hugeCapacity(int minCapacity) {\n    if (minCapacity < 0) // overflow\n        throw new OutOfMemoryError\n        (\"Required array size too large\");\n    return (minCapacity > MAX_ARRAY_SIZE) ?\n        Integer.MAX_VALUE :\n    MAX_ARRAY_SIZE;\n}\n"],["body","\n"],["headingLink","指定运行时类型转数组"],["heading","指定运行时类型转数组"],["body","\n\n"],["body","如果数组大小 足够，则使用传入的数组，不够则 反射实例化一个"],["body","\n"],["body","当 迭代器返回的 元素个数不够时\n\n"],["body","如果使用的是 传入的数组 则 置为NULL"],["body","\n"],["body","如果使用的不是 传入的数组，但时 传入数组大小 大于 实际迭代器返回的元素个数，则返回 传入的元素数组"],["body","\n"],["body","如果使用的不是 传入的数组，且传入数组大小 小于 实际迭代器返回的元素个数，则重新调整数组大小并返回"],["body","\n\n"],["body","\n"],["body","当迭代器返回的 比预期多的 元素时\n\n"],["body","重新调整数组大小"],["body","\n\n"],["body","\n\n"],["body","public <T> T[] toArray(T[] a) {\n    // Estimate size of array; be prepared to see more or fewer elements\n    int size = size();\n    T[] r = a.length >= size ? a :\n              (T[])java.lang.reflect.Array\n              .newInstance(a.getClass().getComponentType(), size);\n    Iterator<E> it = iterator();\n\n    for (int i = 0; i < r.length; i++) {\n        if (! it.hasNext()) { // fewer elements than expected\n            if (a == r) {\n                r[i] = null; // null-terminate\n            } else if (a.length < i) {\n                return Arrays.copyOf(r, i);\n            } else {\n                System.arraycopy(r, 0, a, 0, i);\n                if (a.length > i) {\n                    a[i] = null;\n                }\n            }\n            return a;\n        }\n        r[i] = (T)it.next();\n    }\n    // more elements than expected\n    return it.hasNext() ? finishToArray(r, it) : r;\n}\n"],["body","\n"],["headingLink","remove"],["heading","Remove"],["body","\n\n"],["body","如果是 NULL 则移除 第一个为NULL的"],["body","\n"],["body","如果不是NULL，则移除 相等的为NULL的"],["body","\n\n"],["body","public boolean remove(Object o) {\n    Iterator<E> it = iterator();\n    if (o==null) {\n        while (it.hasNext()) {\n            if (it.next()==null) {\n                it.remove();\n                return true;\n            }\n        }\n    } else {\n        while (it.hasNext()) {\n            if (o.equals(it.next())) {\n                it.remove();\n                return true;\n            }\n        }\n    }\n    return false;\n}\n"],["body","\n"],["headingLink","containsall"],["heading","containsAll"],["body","\n"],["body","循环调用Contains"],["body","\n"],["body","public boolean containsAll(Collection<?> c) {\n    for (Object e : c)\n        if (!contains(e))\n            return false;\n    return true;\n}\n"],["body","\n"],["headingLink","addall"],["heading","addAll"],["body","\n"],["body","循环调用 add"],["body","\n"],["body","public boolean addAll(Collection<? extends E> c) {\n    boolean modified = false;\n    for (E e : c)\n        if (add(e))\n            modified = true;\n    return modified;\n}\n"],["body","\n"],["headingLink","removeall"],["heading","removeAll"],["body","\n"],["body","循环调用 迭代器的remove"],["body","\n"],["body","public boolean removeAll(Collection<?> c) {\n    Objects.requireNonNull(c);\n    boolean modified = false;\n    Iterator<?> it = iterator();\n    while (it.hasNext()) {\n        if (c.contains(it.next())) {\n            it.remove();\n            modified = true;\n        }\n    }\n    return modified;\n}\n"],["body","\n"],["headingLink","retainall"],["heading","retainAll"],["body","\n"],["body","public boolean retainAll(Collection<?> c) {\n    Objects.requireNonNull(c);\n    boolean modified = false;\n    Iterator<E> it = iterator();\n    while (it.hasNext()) {\n        if (!c.contains(it.next())) {\n            it.remove();\n            modified = true;\n        }\n    }\n    return modified;\n}\n"],["body","\n"],["headingLink","clear"],["heading","clear"],["body","\n"],["body","public void clear() {\n    Iterator<E> it = iterator();\n    while (it.hasNext()) {\n        it.next();\n        it.remove();\n    }\n}\n"],["body","\n"],["headingLink","总结"],["heading","总结"],["body","\n"],["body","利用 迭代器 实现了 contains与 remove的语义 ，add的语义还未实现"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","14.spring_SpringWebFlux/基于注解的控制器/RequestMapping.html"],["title","RequestMapping.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","request-mapping"],["heading","Request Mapping"],["body","\n"],["body","@RequestMapping 注解用来 映射请求到 控制器方法"],["body","\n"],["body","它有很多参数进行匹配"],["body","\n\n"],["body","by URL"],["body","\n"],["body","HTTP method"],["body","\n"],["body","request parameters"],["body","\n"],["body","headers"],["body","\n"],["body","media types"],["body","\n\n"],["body","在类级别用于 共享映射"],["body","\n"],["body","在方法级别 用于 确定一个 指定的 endpoint mapping"],["body","\n"],["body","基于不同的Http方法的@RequestMapping 的快捷方式"],["body","\n\n"],["body","@GetMapping"],["body","\n"],["body","@PostMapping"],["body","\n"],["body","@PutMapping"],["body","\n"],["body","@DeleteMapping"],["body","\n"],["body","@PatchMapping"],["body","\n\n"],["body","前面的注解是  Custom Annotations ，因为 大多数方法都需要映射到一个指定的 Http方法，而不是 直接使用 @RequestMapping匹配所有Http方法，同时 @RequestMapping需要 在类级别 上表示 共享的 映射"],["body","\n"],["body","@RestController\n@RequestMapping(\"/persons\")\nclass PersonController {\n\n    @GetMapping(\"/{id}\")\n    public Person getPerson(@PathVariable Long id) {\n        // ...\n    }\n\n    @PostMapping\n    @ResponseStatus(HttpStatus.CREATED)\n    public void add(@RequestBody Person person) {\n        // ...\n    }\n}\n"],["body","\n"],["headingLink","uri-patterns"],["heading","URI Patterns"],["body","\n"],["body","可以使用通配符"],["body","\n"],["body","Pattern"],["body","Description"],["body","Example"],["body","\n"],["body","?"],["body","匹配一个字符"],["body","\"/pages/t?st.html\" matches \"/pages/test.html\" and \"/pages/t3st.html\""],["body","\n"],["body","*"],["body","Matches zero or more characters within a path segment"],["body","\"/resources/*.png\" matches \"/resources/file.png\"``\"/projects/*/versions\" matches \"/projects/spring/versions\" but does not match \"/projects/spring/boot/versions\""],["body","\n"],["body","**"],["body","Matches zero or more path segments until the end of the path"],["body","\"/resources/**\" matches \"/resources/file.png\" and \"/resources/images/file.png\"``\"/resources/**/file.png\" is invalid as ** is only allowed at the end of the path."],["body","\n"],["body","{name}"],["body","Matches a path segment and captures it as a variable named \"name\""],["body","\"/projects/{project}/versions\" matches \"/projects/spring/versions\" and captures project=spring"],["body","\n"],["body","{name:[a-z]+}"],["body","Matches the regexp \"[a-z]+\" as a path variable named \"name\""],["body","\"/projects/{project:[a-z]+}/versions\" matches \"/projects/spring/versions\" but not \"/projects/spring1/versions\""],["body","\n"],["body","{*path}"],["body","Matches zero or more path segments until the end of the path and captures it as a variable named \"path\""],["body","\"/resources/{*file}\" matches \"/resources/images/file.png\" and captures file=/images/file"],["body","\n\n\n"],["body","捕获的URI可以通过  @PathVariable 变量访问"],["body","\n"],["body","@GetMapping(\"/owners/{ownerId}/pets/{petId}\")\npublic Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {\n    // ...\n}\n\n//类级别上的 变量捕获\n@Controller\n@RequestMapping(\"/owners/{ownerId}\") \npublic class OwnerController {\n\n    @GetMapping(\"/pets/{petId}\") \n    public Pet findPet(@PathVariable Long ownerId, @PathVariable Long petId) {\n        // ...\n    }\n}\n"],["body","\n\n"],["body","\n"],["body","URI 变量 自动转换成合适的类型，或者抛出TypeMismatchException ，默认支持简单类型（int, long, Date）可以注册其他类型的支持See Type Conversion and DataBinder"],["body","\n"],["body","\n"],["body","\n"],["body","URI variables 可以显示命名（@PathVariable(\"customId\")） 但是可以忽略，如果使用 Java8 -parameters 选项 编译代码"],["body","\n"],["body","\n"],["body","\n"],["body","{*varName} 语法 申明了 一个 URI 变量，匹配一个或多个 剩余路径片段 例如 /resources/{*path}  匹配  /resources/ 下所有资源的路径"],["body","\n"],["body","\n"],["body","\n"],["body","{varName:regex}  申明了 URI 变量 使用正则表达式示例如下"],["body","\n"],["body","\n\n"],["body","@GetMapping(\"/{name:[a-z-]+}-{version:\\\\d\\\\.\\\\d\\\\.\\\\d}{ext:\\\\.[a-z]+}\")\npublic void handle(@PathVariable String version, @PathVariable String ext) {\n    // ...\n}\n"],["body","\n"],["body","URI path支持 ${} 占位符 ，在启动时 使用 PropertyPlaceHolderConfigurer 通过 local、system、environment等其他 资源属性"],["body","\n"],["body","Spring WebFlux  使用PathPattern  PathPatternParser  来进行 路径匹配，这些类在 spring-web 模块，主要是用来在web应用 运行时 对 HTTP URL path进行大量的路径匹配"],["body","\n"],["body","Spring WebFlux 不支持 后缀路径匹配"],["body","\n"],["headingLink","pattern-comparison"],["heading","Pattern Comparison"],["body","\n"],["body","当多个模式 都匹配 到URL时，必须比较出一个 最佳比配，使用 PathPattern.SPECIFICITY_COMPARATOR 已经完成，这回查找最精确的 patterns"],["body","\n"],["body","对于每一个 pattern，都会计算出一个分数，URI变量和 通配符的个数，URI变量 分数低于 通配符，更低的 分数 获胜，分数一致的 更长的获胜"],["body","\n"],["body","Catch-all patterns (for example, **, {*varName})  不会计算分数，最会最后一个考虑，如果两个都是 catch-all 则长的 会被选择"],["body","\n"],["headingLink","consumable-media-types"],["heading","Consumable Media Types"],["body","\n"],["body","你可以更加精确 请求 通过 Content-Type "],["body","\n"],["body","Java"],["body","\n"],["body","@PostMapping(path = \"/pets\", consumes = \"application/json\")\npublic void addPet(@RequestBody Pet pet) {\n    // ...\n}\n"],["body","\n"],["body","consumers属性 支持内容协商表达式："],["body","\n\n"],["body","!text/plain  匹配任何内容除了 text/plain"],["body","\n"],["body","可以在类级别 定义 consumes"],["body","\n"],["body","方法级别的 consumes覆盖 类级别的  consumes"],["body","\n\n"],["body","MediaType 提供 通用使用的常量 例如：APPLICATION_JSON_VALUE and APPLICATION_XML_VALUE."],["body","\n"],["headingLink","producible-media-types"],["heading","Producible Media Types"],["body","\n"],["body","基于 Accept请求头 可以列出 controller 方法 产生的 内容类型   更加精确请求，"],["body","\n"],["body","Java"],["body","\n"],["body","@GetMapping(path = \"/pets/{petId}\", produces = \"application/json\")\n@ResponseBody\npublic Pet getPet(@PathVariable String petId) {\n    // ...\n}\n"],["body","\n\n"],["body","\n"],["body","媒体类型可以 指定 字符集"],["body","\n"],["body","\n"],["body","\n"],["body","支持 否定表达式 例如：!text/plain"],["body","\n"],["body","\n"],["body","\n"],["body","可以在类级别声明 produces 属性，方法级别的 produces属性 会 覆盖类级别的"],["body","\n"],["body","\n"],["body","\n"],["body","MediaType  提供 常量访问，e.g. APPLICATION_JSON_VALUE, APPLICATION_XML_VALUE."],["body","\n"],["body","\n\n"],["headingLink","parameters-and-headers"],["heading","Parameters and Headers"],["body","\n"],["body","支持查询参数条件匹配"],["body","\n\n"],["body","使用myParam 测试参数存在"],["body","\n"],["body","使用 !myParam 测试 条件不存在"],["body","\n"],["body","使用 myParam=myValue 测试等于某一个具体值"],["body","\n\n"],["body","Java"],["body","\n"],["body","@GetMapping(path = \"/pets/{petId}\", params = \"myParam=myValue\") \npublic void findPet(@PathVariable String petId) {\n    // ...\n}\n"],["body","\n"],["body","测试请求体中的头"],["body","\n"],["body","Java"],["body","\n"],["body","@GetMapping(path = \"/pets\", headers = \"myHeader=myValue\") \npublic void findPet(@PathVariable String petId) {\n    // ...\n}\n"],["body","\n"],["headingLink","http-head-options"],["heading","HTTP HEAD, OPTIONS"],["body","\n"],["body","@GetMapping and @RequestMapping(method=HttpMethod.GET) 透明的 支持 HTTP HEAD方法"],["body","\n"],["body","response wrapper 应用于 HttpHandler server adapter，确保 Content-Length 头 被设置 ，且字节数没有计算 实际响应。"],["body","\n"],["body","默认的 HTTP OPTIONS  通过 设置 Allow 头 来处理，由该URL匹配的  方法所支持的请求方式"],["body","\n\n"],["body","对于 没有指定请求方法的@RequestMapping ，Allow头 设置为 GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS"],["body","\n"],["body","控制器方法 应该始终指定 请求方法： @GetMapping, @PostMapping"],["body","\n\n"],["headingLink","custom-annotations"],["heading","Custom Annotations"],["body","\n"],["body","Spring WebFlux 支持 request mapping的  组合注解 （ composed annotations ）的使用"],["body","\n"],["body","自定义注解本身 使用 @RequestMapping  注解，并在注解中 重新声明 RequetMapping 的属性"],["body","\n"],["body","@GetMapping, @PostMapping, @PutMapping, @DeleteMapping, and @PatchMapping 就是组合注解的实例"],["body","\n"],["body","Spring WebFlux 同样支持 自定义请求 映射属性 和 自定以请求匹配逻辑"],["body","\n"],["body","这是更高级的选项：需要继承 RequestMappingHandlerMapping  覆盖getCustomMethodCondition  方法，这里你可以检查 自定义属性，并且返回 自己的RequestCondition"],["body","\n"],["headingLink","explicit-registrations"],["heading","Explicit Registrations"],["body","\n"],["body","可以编程式注册 handler 方法，这可以用于动态注册 或者 高级 案例"],["body","\n"],["body","例如同一个 Handler类 的不同实例 处理不同的 URLs"],["body","\n"],["body","Java"],["body","\n"],["body","@Configuration\npublic class MyConfig {\n\n    @Autowired\n    public void setHandlerMapping(RequestMappingHandlerMapping mapping, UserHandler handler) \n            throws NoSuchMethodException {\n//准备 request mapping 元数据\n        RequestMappingInfo info = RequestMappingInfo\n                .paths(\"/user/{id}\").methods(RequestMethod.GET).build(); \n//获取handler方法\n        Method method = UserHandler.class.getMethod(\"getUser\", Long.class); \n//注册\n        mapping.registerMapping(info, handler, method); \n    }\n\n}\n"],["body","\n"],["headingLink",""],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","14.spring_SpringWebFlux/基于注解的控制器/HandlerMethod.html"],["title","HandlerMethod.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","handler-methods"],["heading","Handler Methods"],["body","\n"],["body","@RequestMapping  的handler 方法 可以有 灵活的 申明"],["body","\n"],["headingLink","method-arguments"],["heading","Method Arguments"],["body","\n"],["body","Reactive types 支持 需要 阻塞IO才能解析的 参数（例如 读请求体），这会在 Description 列中标记"],["body","\n"],["body","Reactive types 不应该 期望 不需要 阻塞的 参数"],["body","\n"],["body","JDK 1.8’s java.util.Optional  支持 方法参数 上的注解  required 属性，并设置为required=false"],["body","\n"],["body","Controller method argument"],["body","Description"],["body","\n"],["body","ServerWebExchange"],["body","Access to the full ServerWebExchange — container for the HTTP request and response, request and session attributes, checkNotModified methods, and others."],["body","\n"],["body","ServerHttpRequest, ServerHttpResponse"],["body","Access to the HTTP request or response."],["body","\n"],["body","WebSession"],["body","Access to the session. This does not force the start of a new session unless attributes are added. Supports reactive types."],["body","\n"],["body","java.security.Principal"],["body","The currently authenticated user — possibly a specific Principal implementation class if known. Supports reactive types."],["body","\n"],["body","org.springframework.http.HttpMethod"],["body","The HTTP method of the request."],["body","\n"],["body","java.util.Locale"],["body","The current request locale, determined by the most specific LocaleResolver available — in effect, the configured LocaleResolver/LocaleContextResolver."],["body","\n"],["body","java.util.TimeZone + java.time.ZoneId"],["body","The time zone associated with the current request, as determined by a LocaleContextResolver."],["body","\n"],["body","@PathVariable"],["body","For access to URI template variables. See URI Patterns."],["body","\n"],["body","@MatrixVariable"],["body","For access to name-value pairs in URI path segments. See Matrix Variables."],["body","\n"],["body","@RequestParam"],["body","For access to Servlet request parameters. Parameter values are converted to the declared method argument type. See @RequestParam.Note that use of @RequestParam is optional — for example, to set its attributes. See “Any other argument” later in this table."],["body","\n"],["body","@RequestHeader"],["body","For access to request headers. Header values are converted to the declared method argument type. See @RequestHeader."],["body","\n"],["body","@CookieValue"],["body","For access to cookies. Cookie values are converted to the declared method argument type. See @CookieValue."],["body","\n"],["body","@RequestBody"],["body","For access to the HTTP request body. Body content is converted to the declared method argument type by using HttpMessageReader instances. Supports reactive types. See @RequestBody."],["body","\n"],["body","HttpEntity<B>"],["body","For access to request headers and body. The body is converted with HttpMessageReader instances. Supports reactive types. See HttpEntity."],["body","\n"],["body","@RequestPart"],["body","For access to a part in a multipart/form-data request. Supports reactive types. See Multipart Content and Multipart Data."],["body","\n"],["body","java.util.Map, org.springframework.ui.Model, and org.springframework.ui.ModelMap."],["body","For access to the model that is used in HTML controllers and is exposed to templates as part of view rendering."],["body","\n"],["body","@ModelAttribute"],["body","For access to an existing attribute in the model (instantiated if not present) with data binding and validation applied. See @ModelAttribute as well as Model and DataBinder.Note that use of @ModelAttribute is optional — for example, to set its attributes. See “Any other argument” later in this table."],["body","\n"],["body","Errors, BindingResult"],["body","For access to errors from validation and data binding for a command object, i.e. a @ModelAttribute argument. An Errors, or BindingResult argument must be declared immediately after the validated method argument."],["body","\n"],["body","SessionStatus + class-level @SessionAttributes"],["body","For marking form processing complete, which triggers cleanup of session attributes declared through a class-level @SessionAttributes annotation. See @SessionAttributes for more details."],["body","\n"],["body","UriComponentsBuilder"],["body","For preparing a URL relative to the current request’s host, port, scheme, and context path. See URI Links."],["body","\n"],["body","@SessionAttribute"],["body","For access to any session attribute — in contrast to model attributes stored in the session as a result of a class-level @SessionAttributes declaration. See @SessionAttribute for more details."],["body","\n"],["body","@RequestAttribute"],["body","For access to request attributes. See @RequestAttribute for more details."],["body","\n"],["body","Any other argument"],["body","If a method argument is not matched to any of the above, it is, by default, resolved as a @RequestParam if it is a simple type, as determined by BeanUtils#isSimpleProperty, or as a @ModelAttribute, otherwise."],["body","\n\n\n"],["headingLink","return-values"],["heading","Return Values"],["body","\n"],["body","返回值支持的类型"],["body","\n"],["body","Controller method return value"],["body","Description"],["body","\n"],["body","@ResponseBody"],["body","使用 HttpMessageWriter 实例 编码，并写入到响应，详见：@ResponseBody"],["body","\n"],["body","HttpEntity<B>, ResponseEntity<B>"],["body","包括 Http头,请求体使用HttpMessageWriter 实例 编码，并写入到响应，详见 ResponseEntity."],["body","\n"],["body","HttpHeaders"],["body","只返回头，不返回响应"],["body","\n"],["body","String"],["body","使用  ViewResolver  解析的 视图名"],["body","\n"],["body","View"],["body","视图实例"],["body","\n"],["body","java.util.Map, org.springframework.ui.Model"],["body","要添加到  隐式模型中的属性"],["body","\n"],["body","@ModelAttribute"],["body","要添加到 隐式 模型中的属性"],["body","\n"],["body","Rendering"],["body","An API for model and view rendering scenarios."],["body","\n"],["body","void"],["body","返回 Void的方法 可能是 异步的（eg： Mono<Void>）， 返回值类型（可能是 null返回值）"],["body","1. 被认为是 已经将 响应 处理完成 ，如果有一个 ServerHttpResponse, a ServerWebExchange  参数"],["body","2. 或者存在  @ResponseStatus 注解"],["body","3. 如果 controller 对 ETag lastModified timestamp 进行 检查"],["body","\n"],["body","Flux<ServerSentEvent>, Observable<ServerSentEvent>, or other reactive type"],["body","Emit server-sent events. The ServerSentEvent wrapper can be omitted when only data needs to be written (however, text/event-stream must be requested or declared in the mapping through the produces attribute)."],["body","\n"],["body","Any other return value"],["body","如果以上返回值都不匹配，如果是空的或者 是Sting 则默认的作为视图名 or 否则会加入到 Model中作为 attributes,触发 它是简单类型 依据BeanUtils#isSimpleProperty"],["body","\n\n\n"],["headingLink","type-conversion"],["heading","Type Conversion"],["body","\n"],["body","基于 string的请求输入 的 注解控制器方法参数 （例如：@RequestParam，@RequestHeader，@PathVariable, @MatrixVariable, and @CookieValue）"],["body","\n"],["body","需要类型转换，会自动进行类型转换，基于 配置的 converters"],["body","\n"],["body","通过 自定义 WebDataBinder 配置类型转换(see DataBinder) ，或者 使用FormattingConversionService  注册 Formatters "],["body","\n"],["headingLink","matrix-variables"],["heading","Matrix Variables"],["body","\n"],["body","RFC 3986 discusses name-value pairs in path segments"],["body","\n"],["body","In Spring WebFlux, 我们把它叫做：matrix variables based on an “old post” by Tim Berners-Lee "],["body","\n"],["body","但它们也可以称为 URI 路劲参数，Matrix variables 可以出现在任何 路径参数中，每一个变量被 分号分隔，多值用逗号分隔，也可以重复变量名"],["body","\n"],["body","`\"/cars;color=red,green;year=2012\"` `\"color=red;color=green;color=blue\"`\n"],["body","\n"],["body","跟SpringMVC 不一样的是：matrix variables 不会影响请求映射"],["body","\n"],["body","// GET /pets/42;q=11;r=22\n\n@GetMapping(\"/pets/{petId}\")\npublic void findPet(@PathVariable String petId, @MatrixVariable int q) {\n\n    // petId == 42\n    // q == 11\n}\n"],["body","\n"],["body","每一个路径片段都可以有 matrix variable,这时候需要消除歧义"],["body","\n"],["body","// GET /owners/42;q=11/pets/21;q=22\n\n@GetMapping(\"/owners/{ownerId}/pets/{petId}\")\npublic void findPet(\n        @MatrixVariable(name=\"q\", pathVar=\"ownerId\") int q1,\n        @MatrixVariable(name=\"q\", pathVar=\"petId\") int q2) {\n\n    // q1 == 11\n    // q2 == 22\n}\n"],["body","\n"],["body","默认值"],["body","\n"],["body","// GET /pets/42\n\n@GetMapping(\"/pets/{petId}\")\npublic void findPet(@MatrixVariable(required=false, defaultValue=\"1\") int q) {\n\n    // q == 1\n}\n"],["body","\n"],["body","获取某个 路径片段的所有 matrix variable"],["body","\n"],["body","// GET /owners/42;q=11;r=12/pets/21;q=22;s=23\n\n@GetMapping(\"/owners/{ownerId}/pets/{petId}\")\npublic void findPet(\n        @MatrixVariable MultiValueMap<String, String> matrixVars,\n        @MatrixVariable(pathVar=\"petId\") MultiValueMap<String, String> petMatrixVars) {\n\n    // matrixVars: [\"q\" : [11,22], \"r\" : 12, \"s\" : 23]\n    // petMatrixVars: [\"q\" : 22, \"s\" : 23]\n}\n"],["body","\n"],["headingLink","requestparam"],["heading","@RequestParam"],["body","\n"],["body","使用 @RequestParam  注解绑定 查询参数"],["body","\n"],["body","@Controller\n@RequestMapping(\"/pets\")\npublic class EditPetForm {\n    // ...\n    @GetMapping\n    public String setupForm(@RequestParam(\"petId\") int petId, Model model) { \n        Pet pet = this.clinic.loadPet(petId);\n        model.addAttribute(\"pet\", pet);\n        return \"petForm\";\n    }\n}\n"],["body","\n"],["body","The Servlet API request parameter 概念 将 查询参数、表单、multiparts  合成一个，在 WebFlux中，每一个是通过 ServerWebExchange 独立访问的"],["body","\n"],["body","@RequestParam 只绑定 查询参数，你可以使用数据绑定 将 查询参数、表单、multiparts 绑定到 command object."],["body","\n"],["body","使用 @RequestParam  注解的方法参数 默认是 必须，支持 java.util.Optional  wrapper"],["body","\n"],["body","会自动应用类型转换，See Type Conversion."],["body","\n"],["body","当 @RequestParam  注解声明在 Map<String, String> or MultiValueMap<String, String>  参数上"],["body","\n"],["body","map会填充所有 查询参数"],["body","\n"],["body","注意：@RequestParam   是可选的，例如：为了设置它的属性。"],["body","\n"],["body","默认的，任何参数，且是一个 简单值类型、依据BeanUtils#isSimpleProperty  不被任何参数解析器 解析，会被当做 使用了 @RequestParam一样"],["body","\n"],["headingLink","requestheader"],["heading","@RequestHeader"],["body","\n"],["body","在控制器中  使用 @RequestHeader 可以绑定 请求头"],["body","\n"],["body","Host                    localhost:8080\nAccept                  text/html,application/xhtml+xml,application/xml;q=0.9\nAccept-Language         fr,en-gb;q=0.7,en;q=0.3\nAccept-Encoding         gzip,deflate\nAccept-Charset          ISO-8859-1,utf-8;q=0.7,*;q=0.7\nKeep-Alive              300\n"],["body","\n"],["body","获取Accept-Encoding Keep-Alive "],["body","\n"],["body","@GetMapping(\"/demo\")\npublic void handle(\n        @RequestHeader(\"Accept-Encoding\") String encoding, \n        @RequestHeader(\"Keep-Alive\") long keepAlive) { \n    //...\n}\n"],["body","\n\n"],["body","会自动应用类型转换，See Type Conversion."],["body","\n"],["body","@RequestHeader 注解在 Map<String, String>, MultiValueMap<String, String>, or HttpHeaders  上，那么会填充所有 header"],["body","\n\n"],["body","例如 @RequestHeader(\"Accept\") 可以注解在 String、List<String>、 String[] "],["body","\n"],["headingLink","cookievalue"],["heading","@CookieValue"],["body","\n"],["body","使用  @CookieValue  绑定 HTTP cookie到 参数方法上"],["body","\n"],["body","JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84\n"],["body","\n"],["body","@GetMapping(\"/demo\")\npublic void handle(@CookieValue(\"JSESSIONID\") String cookie) { \n    //...\n}\n"],["body","\n"],["body","自动应用类型转换 See Type Conversion"],["body","\n"],["headingLink","modelattribute"],["heading","@ModelAttribute"],["body","\n"],["body","在参数方法上 使用 @ModelAttribute 注解 ，对 model的属性访问，如果它不在的话 实例化它"],["body","\n"],["body","The model attribute 同样也和 查询参数、表单字段重叠"],["body","\n"],["body","这称为 数据绑定、使你避免 处理 解析、转换单独的查询参数以及表单字段"],["body","\n"],["body","@PostMapping(\"/owners/{ownerId}/pets/{petId}/edit\")\npublic String processSubmit(@ModelAttribute Pet pet) { } \n"],["body","\n"],["body","Pet 实例 会按以下方式解析"],["body","\n\n"],["body","从已添加到 Model  的属性"],["body","\n"],["body","来自 HTTP session  通过@SessionAttributes"],["body","\n"],["body","从默认构造器的调用"],["body","\n"],["body","来自 primary constructor 的调用，带着 匹配 查询参数或表单字段的 参数"],["body","\n"],["body","参数名 通过 JavaBean的 @ConstructorProperties 判断，或者通过 字节码中 运行时的 参数名保留"],["body","\n\n"],["body","获取到 model attribute  的实例后，开始应用数据绑定，WebExchangeDataBinder 类在目标对象上 匹配 查询参数和表单字段名"],["body","\n"],["body","匹配字段会在 类型转换后 填充,对于校验 详见： Validation，对于 自定义数据绑定，详见：DataBinder."],["body","\n"],["body","数据绑定会造成错误，默认情况下，WebExchangeBindException 会被抛出，但是为了在控制器方法 检查异常，可以在  @ModelAttribute 下一个参数中声明  BindingResult 0"],["body","\n"],["body","@PostMapping(\"/owners/{ownerId}/pets/{petId}/edit\")\npublic String processSubmit(@ModelAttribute(\"pet\") Pet pet, BindingResult result) { \n    if (result.hasErrors()) {\n        return \"petForm\";\n    }\n    // ...\n}\n"],["body","\n"],["body","可以通过 添加  javax.validation.Valid   或者 spring的注解@Validated  注解 在数据绑定后 自动应用 校验，详见  (see also Bean Validation and Spring validation)"],["body","\n"],["body","@PostMapping(\"/owners/{ownerId}/pets/{petId}/edit\")\npublic String processSubmit(@Valid @ModelAttribute(\"pet\") Pet pet, BindingResult result) { \n    if (result.hasErrors()) {\n        return \"petForm\";\n    }\n    // ...\n}\n"],["body","\n"],["body","Spring WebFlux 支持 在 model中的 响应式类型  例如：Mono<Account> ，可以声明 存在或不存在 响应式类型的包装类的 @ModelAttribute 注解的参数"],["body","\n"],["body","如果使用 BindingResult  参数，必须 声明@ModelAttribute  是非响应式的"],["body","\n"],["body","Java"],["body","\n"],["body","@PostMapping(\"/owners/{ownerId}/pets/{petId}/edit\")\npublic Mono<String> processSubmit(@Valid @ModelAttribute(\"pet\") Mono<Pet> petMono) {\n    return petMono\n        .flatMap(pet -> {\n            // ...\n        })\n        .onErrorResume(ex -> {\n            // ...\n        });\n}\n"],["body","\n"],["headingLink","sessionattributes"],["heading","@SessionAttributes"],["body","\n"],["body","@SessionAttributes 是用来在 请求间 保存 model属性的，将属性存储在 WebSession，这是个类级别的注解，声明在某个控制器中，这通常列出model属性的 名称 或者模型属性的  类型，它们被透明的 存储在 session 中以供下次请求使用"],["body","\n"],["body","Java"],["body","\n"],["body","@Controller\n@SessionAttributes(\"pet\") \npublic class EditPetForm {\n    // ...\n}\n"],["body","\n"],["body","在第一次请求中，模型属性 pet 会被添加到 模型中、自动保存在 WebSession，它保持直到 另一个控制器 方法 使用 SessionStatus  方法参数来 清除存储"],["body","\n"],["body","@Controller\n@SessionAttributes(\"pet\") \npublic class EditPetForm {\n\n    // ...\n\n    @PostMapping(\"/pets/{id}\")\n    public String handle(Pet pet, BindingResult errors, SessionStatus status) { \n        if (errors.hasErrors()) {\n            // ...\n        }\n            status.setComplete();\n            // ...\n        }\n    }\n}\n"],["body","\n"],["headingLink","sessionattribute"],["heading","@SessionAttribute"],["body","\n"],["body","如果想访问 预先存在的 session 属性（由全局管理），可以使用 @SessionAttribute  属性管理"],["body","\n"],["body","@GetMapping(\"/\")\npublic String handle(@SessionAttribute User user) { \n    // ...\n}\n"],["body","\n"],["body","如果想添加 或者删除session属性，注入WebSession 到方法参数中"],["body","\n"],["headingLink","requestattribute"],["heading","@RequestAttribute"],["body","\n"],["body","使用 @RequestAttribute  访问 request attirbutes 中的属性"],["body","\n"],["body","@GetMapping(\"/\")\npublic String handle(@RequestAttribute Client client) { \n    // ...\n}\n"],["body","\n"],["headingLink","multipart-content"],["heading","Multipart Content"],["body","\n"],["body","上述提到的 Multipart Data, ServerWebExchange  提供了 对 multipart 内容的访问"],["body","\n"],["body","在控制器中 最佳的处理文件上传的方式是 通过数据绑定到  command object"],["body","\n"],["body","Java"],["body","\n"],["body","class MyForm {\n\n    private String name;\n\n    private MultipartFile file;\n\n    // ...\n\n}\n\n@Controller\npublic class FileUploadController {\n\n    @PostMapping(\"/form\")\n    public String handleFormUpload(MyForm form, BindingResult errors) {\n        // ...\n    }\n\n}\n"],["body","\n"],["body","在 RESTFUL 场景 从非浏览器客户端 中提交 multipart 请求"],["body","\n"],["body","POST /someUrl\nContent-Type: multipart/mixed\n\n--edt7Tfrdusa7r3lNQc79vXuhIIMlatb7PQg7Vp\nContent-Disposition: form-data; name=\"meta-data\"\nContent-Type: application/json; charset=UTF-8\nContent-Transfer-Encoding: 8bit\n\n{\n    \"name\": \"value\"\n}\n--edt7Tfrdusa7r3lNQc79vXuhIIMlatb7PQg7Vp\nContent-Disposition: form-data; name=\"file-data\"; filename=\"file.properties\"\nContent-Type: text/xml\nContent-Transfer-Encoding: 8bit\n... File Data ...\n"],["body","\n"],["body","使用 @RequestPart 访问 单独部件"],["body","\n"],["body","@PostMapping(\"/\")\npublic String handle(@RequestPart(\"meta-data\") Part metadata, \n        @RequestPart(\"file-data\") FilePart file) { \n    // ...\n}\n"],["body","\n"],["body","反序列化 原始部件内容（例如：to JSON），你可以申明一个具体的 对象，而不是 Part"],["body","\n"],["body","Java"],["body","\n"],["body","@PostMapping(\"/\")\npublic String handle(@RequestPart(\"meta-data\") MetaData metadata) { \n    // ...\n}\n"],["body","\n"],["body","你可以将  @RequestPart  与 javax.validation.Valid or Spring’s @Validated  注解组合，这会 引入 Standard Bean Validation "],["body","\n"],["body","校验报错 会导致 WebExchangeBindException   导致 BAD_REQUEST（400）"],["body","\n"],["body","异常包含BindingResult  ，可以通过申明为 Mono<MetaData> ，在Mono 中 进行错误的处理"],["body","\n"],["body","@PostMapping(\"/\")\npublic String handle(@Valid @RequestPart(\"meta-data\") Mono<MetaData> metadata) {\n    // use one of the onError* operators...\n}\n"],["body","\n"],["body","声明为 MultiValueMap 可以使用 @RequestBody  以访问所有部件"],["body","\n"],["body","@PostMapping(\"/\")\npublic String handle(@RequestBody Mono<MultiValueMap<String, Part>> parts) { \n    // ...\n}\n"],["body","\n"],["body","以流式序列的访问，可以申明 @RequestBody  以及Flux<Part>"],["body","\n"],["body","@PostMapping(\"/\")\npublic String handle(@RequestBody Flux<Part> parts) { \n    // ...\n}\n"],["body","\n"],["headingLink","requestbody"],["heading","@RequestBody"],["body","\n"],["body","使用 @RequestBody  注解 通过 HttpMessageReader.  读取 请求头 反序列化 成 对象"],["body","\n"],["body","@PostMapping(\"/accounts\")\npublic void handle(@RequestBody Account account) {\n    // ...\n}\n"],["body","\n"],["body","和SpringMVC不同的是，WebMVC中，@RequestBody 注解的方法参数支持 响应式类型，完全支持 非阻塞读"],["body","\n"],["body","@PostMapping(\"/accounts\")\npublic void handle(@RequestBody Mono<Account> account) {\n    // ...\n}\n"],["body","\n"],["body","可以使用  WebFlux Config 中的 HTTP message codecs  选项去配置"],["body","\n"],["body","你可以将  @RequestBody  与 javax.validation.Valid or Spring’s @Validated  注解组合，这会 引入 Standard Bean Validation "],["body","\n"],["body","校验报错 会导致 WebExchangeBindException   导致 BAD_REQUEST（400）"],["body","\n"],["body","异常包含BindingResult  ，可以通过申明为 Mono<MetaData> ，在Mono 中 进行错误的处理"],["body","\n"],["body","@PostMapping(\"/accounts\")\npublic void handle(@Valid @RequestBody Mono<Account> account) {\n    // use one of the onError* operators...\n}\n"],["body","\n"],["headingLink","httpentity"],["heading","HttpEntity"],["body","\n"],["body","HttpEntity 或多或少 与  @RequestBody  相同 ，但是基于 一个容器对象，暴露请求体和请求头"],["body","\n"],["body","@PostMapping(\"/accounts\")\npublic void handle(HttpEntity<Account> entity) {\n    // ...\n}\n"],["body","\n"],["headingLink","responsebody"],["heading","@ResponseBody"],["body","\n"],["body","使用@ResponseBody  注解在 方法上 使得 方法的返回值 使用 HttpMessageWriter 进行序列化"],["body","\n"],["body","@GetMapping(\"/accounts/{id}\")\n@ResponseBody\npublic Account handle() {\n    // ...\n}\n"],["body","\n\n"],["body","@ResponseBody 支持类级别上，被所有控制器的方法继承"],["body","\n"],["body","@RestController 只不过是 一个 注解了@Controller and @ResponseBody的元注解"],["body","\n"],["body","@ResponseBody  支持 响应式 类型这意味着 你可以 返回Reactor类型"],["body","\n\n"],["body","更多额外的 细节详见： see Streaming and JSON rendering"],["body","\n"],["body","可以使用 JSON serialization views 综合 @ResponseBody  方法See Jackson JSON for details."],["body","\n"],["headingLink","responseentity"],["heading","ResponseEntity"],["body","\n"],["body","ResponseEntity 与@ResponseBody  类似但是 由 状态 和 头"],["body","\n"],["body","Java"],["body","\n"],["body","@GetMapping(\"/something\")\npublic ResponseEntity<String> handle() {\n    String body = ... ;\n    String etag = ... ;\n    return ResponseEntity.ok().eTag(etag).build(body);\n}\n"],["body","\n"],["body","WebFlux supports using a single value reactive type to produce the ResponseEntity asynchronously, and/or single and multi-value reactive types for the body. This allows a variety of async responses with ResponseEntity as follows:"],["body","\n"],["body","WebFlux 支持 使用 单值 响应式类型 异步产生ResponseEntity "],["body","\n\n"],["body","ResponseEntity<Mono<T>> or ResponseEntity<Flux<T>>  使得 响应 状态跟 请求头立即 可用，但是 请求体 是稍后异步 提供的，如果body是单值 则 使用Mono、如果 多值使用 Flux"],["body","\n\n\n"],["body","Mono<ResponseEntity<T>>  异步提供 响应状态、请求头、请求体，这允许 响应状态 和头 因异步请求的结果而异"],["body","\n"],["body","Mono<ResponseEntity<Mono<T>>> or Mono<ResponseEntity<Flux<T>>>  这又是另一种可能，虽然是不太常见的选择，异步的提供请求头、请求体，之后在异步的响应请求内容"],["body","\n\n"],["headingLink","jackson-json"],["heading","Jackson JSON"],["body","\n"],["body","Spring offers support for the Jackson JSON library."],["body","\n"],["headingLink","json-views"],["heading","JSON Views"],["body","\n"],["body","Spring WebFlux 提供内置 Jackson’s Serialization Views 的支持，允许 渲染对象中字段的某个子集"],["body","\n"],["body","To use it with @ResponseBody or ResponseEntity controller methods, "],["body","\n"],["body","需要 配合@ResponseBody or ResponseEntity 使用，使用  @JsonView 注解 激活 序列化视图"],["body","\n"],["body","Java"],["body","\n"],["body","@RestController\npublic class UserController {\n\n    @GetMapping(\"/user\")\n    @JsonView(User.WithoutPasswordView.class)\n    public User getUser() {\n        return new User(\"eric\", \"7!jd#h23\");\n    }\n}\n\npublic class User {\n\n    public interface WithoutPasswordView {};\n    public interface WithPasswordView extends WithoutPasswordView {};\n\n    private String username;\n    private String password;\n\n    public User() {\n    }\n\n    public User(String username, String password) {\n        this.username = username;\n        this.password = password;\n    }\n\n    @JsonView(WithoutPasswordView.class)\n    public String getUsername() {\n        return this.username;\n    }\n\n    @JsonView(WithPasswordView.class)\n    public String getPassword() {\n        return this.password;\n    }\n}\n"],["body","\n"],["body","@JsonView 允许数组的视图类，但是 每个 控制器方法 指定一个"],["body","\n"],["body","如果需要多个视图 ，请组合接口 "],["body","\n"],["headingLink","model"],["heading","Model"],["body","\n"],["body","可以使用 @ModelAttribute 注解"],["body","\n\n"],["body","方法参数：在 @RequestMapping方法参数中  从model 中 创建或访问 对象，然后 通过WebDataBinder 绑定到 请求中"],["body","\n"],["body","方法上：在 @Controller or @ControllerAdvice 类中， 作为方法级别的注解，优先于  @RequestMapping  方法的调用 帮助 初始化 model"],["body","\n"],["body","返回值：在一个@RequestMapping 方法中，将其返回值 标记为 model 属性"],["body","\n\n"],["body","这节讨论 @ModelAttribute  方法，或者 上述列表中的第二项"],["body","\n"],["body","控制器可以有 任意数量的 @ModelAttribute 方法"],["body","\n"],["body","所有这些方法都 在 @RequestMapping 方法之前调用"],["body","\n"],["body","通过 @ControllerAdvice @ModelAttribute 方法 可以 跨控制器 共享"],["body","\n"],["body","详见：Controller Advice 章节"],["body","\n"],["body","@ModelAttribute 方法有很灵活的  方法声明"],["body","\n"],["body","它们与 @RequestMapping 方法一样 支持同样多的 参数 除了 @ModelAttribute  本身任何其他 跟 request body 相关的参数"],["body","\n"],["body","@ModelAttribute\npublic void populateModel(@RequestParam String number, Model model) {\n    model.addAttribute(accountRepository.findAccount(number));\n    // add more ...\n}\n"],["body","\n"],["body","将返回值 加入到 Model中"],["body","\n"],["body","@ModelAttribute\npublic Account addAccount(@RequestParam String number) {\n    return accountRepository.findAccount(number);\n}\n"],["body","\n"],["body","当没有显示指定名称时，会基于类型选择默认名称，详见： Conventions"],["body","\n"],["body","可以通过 addAttribute  显示指定名称 或者 在返回值中加入  @ModelAttribute  注解指定"],["body","\n"],["body","Spring WebFlux 支持 显示的 响应式类型"],["body","\n"],["body","@ModelAttribute\npublic void addAccount(@RequestParam String number) {\n    Mono<Account> accountMono = accountRepository.findAccount(number);\n    model.addAttribute(\"account\", accountMono);\n}\n\n@PostMapping(\"/accounts\")\npublic String handle(@ModelAttribute Account account, BindingResult errors) {\n    // ...\n}\n"],["body","\n"],["body","另外 ，任何 模型属性 ，只要有响应式类型包装 ，在 视图渲染前 会被 解析成实际值"],["body","\n"],["body","可以在 @RequestMapping 方法上注解 @RequestMapping，这会让 返回值 被当作 模型属性"],["body","\n"],["body","这个不用特别指定，因为 这是 HTML 控制器的默认行为，除非 返回值 是 string类型：这个会被解析成视图"],["body","\n"],["body","@ModelAttribute 也可以自定义 属性名"],["body","\n"],["body","Java"],["body","\n"],["body","@GetMapping(\"/accounts/{id}\")\n@ModelAttribute(\"myAccount\")\npublic Account handle() {\n    // ...\n    return account;\n}\n"],["body","\n"],["headingLink","databinder"],["heading","DataBinder"],["body","\n"],["body","@Controller  或者  @ControllerAdvice  类 可以有 @InitBinder 方法，用来初始化 WebDataBinder 实例"],["body","\n"],["body","这个实例是用来以下："],["body","\n\n"],["body","绑定请求参数到模型中去."],["body","\n"],["body","将基于 string的请求值 转换成 控制器方法参数对象"],["body","\n"],["body","在渲染模板时，将 model对象 转换为 string"],["body","\n\n"],["body","@InitBinder 方法 可以注解 特定于 控制器的 java.beans.PropertyEditor  或者 Spring Converter and Formatter 组件"],["body","\n"],["body","另外：可以使用WebFlux Java configuration  在全局共享的FormattingConversionService中注册 Converter and Formatter"],["body","\n"],["body","@InitBinder 支持 跟  @RequestMapping 方法 许多相同的参数，除了 @ModelAttribute参数"],["body","\n"],["body","典型的，WebDataBinder  参数用来注册 ，返回 VOID"],["body","\n"],["body","Java"],["body","\n"],["body","@Controller\npublic class FormController {\n\n    @InitBinder \n    public void initBinder(WebDataBinder binder) {\n        SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n        dateFormat.setLenient(false);\n        binder.registerCustomEditor(Date.class, new CustomDateEditor(dateFormat, false));\n    }\n    // ...\n}\n"],["body","\n"],["body","另外可以通过 FormattingConversionService 注册   Formatter based "],["body","\n"],["body","Java"],["body","\n"],["body","@Controller\npublic class FormController {\n\n    @InitBinder\n    protected void initBinder(WebDataBinder binder) {\n        binder.addCustomFormatter(new DateFormatter(\"yyyy-MM-dd\")); \n    }\n\n    // ...\n}\n"],["body","\n"],["headingLink","managing-exceptions"],["heading","Managing Exceptions"],["body","\n"],["body","@Controller and @ControllerAdvice  类可以有  @ExceptionHandler 方法来处理 控制器方法的异常"],["body","\n"],["body","Java"],["body","\n"],["body","@Controller\npublic class SimpleController {\n\n    // ...\n\n    @ExceptionHandler \n    public ResponseEntity<String> handle(IOException ex) {\n        // ...\n    }\n}\n"],["body","\n"],["body","异常可以 与 正在传播的 顶层 异常相匹配 （也就是：一个直接的 IOException 被抛出） 或者是 包装异常的直接 异常（例如： IOException包装在 IllegalStateException的内部）"],["body","\n"],["body","对于异常类型匹配，最好 声明 目标异常作为 方法参数"],["body","\n"],["body","也可以在 注解中声明 异常的类型"],["body","\n"],["body","通常建议："],["body","\n\n"],["body","在参数中 声明的越具体越好"],["body","\n"],["body","在注解中 声明 primary root exception"],["body","\n"],["body","在  @ControllerAdvice中 按照 优先级的顺序 声明 异常处理方法，See the MVC section for details"],["body","\n\n"],["body","An @ExceptionHandler 方法 支持 与@RequestMapping method  同样的方法参数、返回值，除了 equest body- 和 @ModelAttribute 关联的 方法参数"],["body","\n"],["body","在SpringWebFlux中 @ExceptionHandler  方法支持 由  @RequestMapping  方法的 HandlerAdapter 提供"],["body","\n"],["body","See DispatcherHandler"],["body","\n"],["headingLink","rest-api-exceptions"],["heading","REST API exceptions"],["body","\n"],["body","REST services  的 通用要求是 包含 错误明细在 响应中"],["body","\n"],["body","Spring Framework 不会自动做这些工作，因为 错误的明细 是特定于应用程序的"],["body","\n"],["body","@RestController  可以使用 @ExceptionHandler  方法 ，返回 ResponseEntity  值 用来设置 状态 和响应体"],["body","\n"],["body","可以生命在 @ControllerAdvice  以全局 处理 "],["body","\n"],["body","注意：Spring WebFlux 没有 SpringMVC中 类似的 ResponseEntityExceptionHandler  因为WebFlux 只抛出 ResponseStatusException 或者其 子类，不需要转换成 HTTP状态码"],["body","\n"],["headingLink","controller-advice"],["heading","Controller Advice"],["body","\n"],["body","典型说来，@ExceptionHandler, @InitBinder, and @ModelAttribute 方法  应用于 它们所声明的控制器类（或者类继承结构）内部，如果你想跨控制器全局使用 可以把它们声明在 @ControllerAdvice or @RestControllerAdvice"],["body","\n"],["body","@ControllerAdvice  被 @Component 注解了，这意味着 这些类可以被 注册到 Spring bean容器中"],["body","\n"],["body","@RestControllerAdvice  是一个组合注解，由  @ControllerAdvice and @ResponseBody 注解 注解 这也意味着 @ExceptionHandler 方法 渲染数据到 响应体，通过 message conversion"],["body","\n"],["body","在启动时， @RequestMapping and @ExceptionHandler 方法的 基础设施类 检测 Spring beans 中 带有 @ControllerAdvice 注解的 bean,在运行时 应用"],["body","\n"],["body","Global (来自@ControllerAdvice)  @ExceptionHandler  方法  应用于 本地 之后（来自  @Controller）"],["body","\n"],["body","据约定， 全局的 @ModelAttribute and @InitBinder  应用于 本地之前"],["body","\n"],["body","By default, @ControllerAdvice methods apply to every request (that is, all controllers), but you can narrow that down to a subset of controllers by using attributes on the annotation, as the following example shows:"],["body","\n"],["body","默认情况下，@ControllerAdvice 方法应用于每个请求（即所有控制器类），但是可以缩小 控制器的范围"],["body","\n"],["body","// Target all Controllers annotated with @RestController\n@ControllerAdvice(annotations = RestController.class)\npublic class ExampleAdvice1 {}\n\n// Target all Controllers within specific packages\n@ControllerAdvice(\"org.example.controllers\")\npublic class ExampleAdvice2 {}\n\n// Target all Controllers assignable to specific classes\n@ControllerAdvice(assignableTypes = {ControllerInterface.class, AbstractController.class})\npublic class ExampleAdvice3 {}\n"],["body","\n"],["body","上述案例的  选择 是在运行时 解析的，可能会轻微的影响性能，详见 @ControllerAdvice"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","14.spring_SpringWebFlux/基于注解的控制器/README.html"],["title","基于注解的控制器 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Annotated Controllers"],["body","\n"],["body","Spring WebFlux 提供 基于注解的编程模型，使用@Controller and @RestController  组件表示 请求映射、请求输入、处理异常以及其他，基于注解的控制器 方法申明很灵活，没必要继承 基类或者实现接口"],["body","\n"],["body","Java"],["body","\n"],["body","@RestController\npublic class HelloController {\n\n    @GetMapping(\"/hello\")\n    public String handle() {\n        return \"Hello WebFlux\";\n    }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","14.spring_SpringWebFlux/WebFluxConfig.html"],["title","WebFluxConfig.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","WebFlux Config"],["body","\n"],["body","使用 @EnableWebFlux  注解启用 WebFlux"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig {\n}\n"],["body","\n"],["body","以上例子注册了一系列 的 SpringWebFlux infrastructure beans ，自动应用 可用的依赖：JSON、XML"],["body","\n"],["h1","WebFlux config API"],["body","\n"],["body","实现WebFluxConfigurer 去配置"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n    // Implement configuration methods...\n}\n"],["body","\n"],["headingLink","conversion-formatting"],["heading","Conversion, formatting"],["body","\n"],["body","默认情况下，各种数据类型的 格式化都已安装。也支持字段的 @NumberFormat @DateTimeFormat"],["body","\n"],["body","注册Formatter"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n    @Override\n    public void addFormatters(FormatterRegistry registry) {\n        // ...\n    }\n}\n"],["body","\n"],["body","默认情况下，Spring WebFlux 在解析或格式化日期格式 考虑 到 request Locale"],["body","\n"],["body","自定义日期时间格式化"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n    @Override\n    public void addFormatters(FormatterRegistry registry) {\n        DateTimeFormatterRegistrar registrar = new DateTimeFormatterRegistrar();\n        registrar.setUseIsoFormat(true);\n        registrar.registerFormatters(registry);\n    }\n}\n"],["body","\n"],["body","当使用 FormatterRegistrar  时，详见 FormatterRegistrar SPI   以及 FormattingConversionServiceFactoryBean"],["body","\n"],["headingLink","validation"],["heading","Validation"],["body","\n"],["body","默认情况下：如果 Bean Validation  在 类路径上（例如：the Hibernate Validator），LocalValidatorFactoryBean  会注册为 全局 validator 供 @Controller方法参数上的  @Valid and @Validated  使用"],["body","\n"],["body","可以自定义 Validator实例"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n    @Override\n    public Validator getValidator(); {\n        // ...\n    }\n\n}\n"],["body","\n"],["body","应用本地Validator"],["body","\n"],["body","@Controller\npublic class MyController {\n\n    @InitBinder\n    protected void initBinder(WebDataBinder binder) {\n        binder.addValidators(new FooValidator());\n    }\n}\n"],["body","\n"],["body","如果需要LocalValidatorFactoryBean  注入，创建一个 bean 使用 @Primary  标注，避免 在 MVC config 中冲突"],["body","\n"],["headingLink","content-type-resolvers"],["heading","Content Type Resolvers"],["body","\n"],["body","可以配置 Spring WebFlux如何 判断 请求的 媒体类型"],["body","\n"],["body","默认情况下，会检查 Accept 头，但是你可以 启用 基于 查询参数的 策略"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n    @Override\n    public void configureContentTypeResolver(RequestedContentTypeResolverBuilder builder) {\n        // ...\n    }\n}\n"],["body","\n"],["headingLink","http-message-codecs"],["heading","HTTP message codecs"],["body","\n"],["body","自定义 request 和 response body 被读写"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n    @Override\n    public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {\n        configurer.defaultCodecs().maxInMemorySize(512 * 1024);\n    }\n}\n"],["body","\n"],["body","ServerCodecConfigurer 提供默认的 读写器，可以添加，自定义修改默认的配置，对于"],["body","\n"],["body","For Jackson JSON and XML, consider using Jackson2ObjectMapperBuilder, which customizes Jackson’s default properties with the following ones:"],["body","\n\n"],["body","DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES is disabled."],["body","\n"],["body","MapperFeature.DEFAULT_VIEW_INCLUSION is disabled."],["body","\n\n"],["body","It also automatically registers the following well-known modules if they are detected on the classpath:"],["body","\n\n"],["body","jackson-datatype-joda: Support for Joda-Time types."],["body","\n"],["body","jackson-datatype-jsr310: Support for Java 8 Date and Time API types."],["body","\n"],["body","jackson-datatype-jdk8: Support for other Java 8 types, such as Optional."],["body","\n"],["body","jackson-module-kotlin: Support for Kotlin classes and data classes."],["body","\n\n"],["headingLink","view-resolvers"],["heading","View Resolvers"],["body","\n"],["body","视图解析"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n    @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        // ...\n    }\n}\n"],["body","\n"],["body","The ViewResolverRegistry  有配置模板库的快捷方式"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n\n    @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        registry.freeMarker();\n    }\n\n    // Configure Freemarker...\n\n    @Bean\n    public FreeMarkerConfigurer freeMarkerConfigurer() {\n        FreeMarkerConfigurer configurer = new FreeMarkerConfigurer();\n        configurer.setTemplateLoaderPath(\"classpath:/templates\");\n        return configurer;\n    }\n}\n"],["body","\n"],["body","配置自定义的视图"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n\n    @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        ViewResolver resolver = ... ;\n        registry.viewResolver(resolver);\n    }\n}\n"],["body","\n"],["body","为了支持 Content Negotiation  ，渲染除了 HTML的 其他格式，可以配置多个基于 HttpMessageWriterView的默认视图，它从 spring-web 中接收多种可用的  Codecs "],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n    @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        registry.freeMarker();\n        Jackson2JsonEncoder encoder = new Jackson2JsonEncoder();\n        registry.defaultViews(new HttpMessageWriterView(encoder));\n    }\n    // ...\n}\n"],["body","\n"],["headingLink","static-resources"],["heading","Static Resources"],["body","\n"],["body","基于location的 静态资源服务的便捷方法，下面例子中，/resources 使用相对路径查找静态资源，相对于 classPath 下,资源在一年到期，以确保浏览器缓存的最大使用 和减少HTTP请求次数，Last-Modified 请求头 会校验，如果存在则返回304"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/resources/**\")\n            .addResourceLocations(\"/public\", \"classpath:/static/\")\n            .setCacheControl(CacheControl.maxAge(365, TimeUnit.DAYS));\n    }\n\n}\n"],["body","\n"],["body","资源处理器 同样支持 ResourceResolver 与  ResourceTransformer  链式处理"],["body","\n"],["body","可以 使用VersionResourceResolver ， 对版本化资源，可以使用 资源内容的MD5、固定应用程序版本等"],["body","\n"],["body","ContentVersionStrategy (基于内容的MD5) 是一个好的选择，但是有一个明显的缺点（无法处理，使用 module loader的 js）"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n    @Override\n    public void addResourceHandlers(ResourceHandlerRegistry registry) {\n        registry.addResourceHandler(\"/resources/**\")\n                .addResourceLocations(\"/public/\")\n                .resourceChain(true)\n                .addResolver(new VersionResourceResolver().addContentVersionStrategy(\"/**\"));\n    }\n}\n"],["body","\n"],["body","You can use ResourceUrlProvider to rewrite URLs and apply the full chain of resolvers and transformers (for example, to insert versions). The WebFlux configuration provides a ResourceUrlProvider so that it can be injected into others."],["body","\n"],["body","Unlike Spring MVC, at present, in WebFlux, there is no way to transparently rewrite static resource URLs, since there are no view technologies that can make use of a non-blocking chain of resolvers and transformers. When serving only local resources, the workaround is to use ResourceUrlProvider directly (for example, through a custom element) and block."],["body","\n"],["body","Note that, when using both EncodedResourceResolver (for example, Gzip, Brotli encoded) and VersionedResourceResolver, they must be registered in that order, to ensure content-based versions are always computed reliably based on the unencoded file."],["body","\n"],["body","WebJars are also supported through the WebJarsResourceResolver which is automatically registered when the org.webjars:webjars-locator-core library is present on the classpath. The resolver can re-write URLs to include the version of the jar and can also match against incoming URLs without versions — for example, from /jquery/jquery.min.js to /jquery/1.2.0/jquery.min.js."],["body","\n"],["headingLink","path-matching"],["heading","Path Matching"],["body","\n"],["body","自定义路径匹配"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n    @Override\n    public void configurePathMatch(PathMatchConfigurer configurer) {\n        configurer\n            .setUseCaseSensitiveMatch(true)\n            .setUseTrailingSlashMatch(false)\n            .addPathPrefix(\"/api\",\n                    HandlerTypePredicate.forAnnotation(RestController.class));\n    }\n}\n"],["body","\n"],["headingLink","websocketservice"],["heading","WebSocketService"],["body","\n"],["body","WebFlux 定义了 WebSocketHandlerAdapter  提供对 WebSocket handlers 的支持，意味着所有，要处理网络套接字握手请求，所有做的是将 WebSocketHandler  映射到 URL 通过 SimpleUrlHandlerMapping"],["body","\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n    @Override\n    public WebSocketService getWebSocketService() {\n        TomcatRequestUpgradeStrategy strategy = new TomcatRequestUpgradeStrategy();\n        strategy.setMaxSessionIdleTimeout(0L);\n        return new HandshakeWebSocketService(strategy);\n    }\n}\n"],["body","\n"],["headingLink","advanced-configuration-mode"],["heading","Advanced Configuration Mode"],["body","\n"],["body","@EnableWebFlux imports DelegatingWebFluxConfiguration that:"],["body","\n\n"],["body","Provides default Spring configuration for WebFlux applications"],["body","\n"],["body","detects and delegates to WebFluxConfigurer implementations to customize that configuration."],["body","\n\n"],["body","继承DelegatingWebFluxConfiguration"],["body","\n"],["body","@Configuration\npublic class WebConfig extends DelegatingWebFluxConfiguration {\n    // ...\n}\n"],["body","\n"],["headingLink","http2"],["heading","HTTP/2"],["body","\n"],["body","HTTP/2 is supported with Reactor Netty, Tomcat, Jetty, and Undertow. However, there are considerations related to server configuration. For more details, see the HTTP/2 wiki page."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","14.spring_SpringWebFlux/URILinks.html"],["title","URILinks.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","URI Links"],["body","\n"],["body","此章节讨论 在Spring中 创建 URI s的方式"],["body","\n"],["h1","UriComponents"],["body","\n"],["body","UriComponentsBuilder  从模板变量 构建 URI"],["body","\n"],["body","UriComponents uriComponents = UriComponentsBuilder\n        .fromUriString(\"https://example.com/hotels/{hotel}\")  \n        .queryParam(\"q\", \"{q}\")  \n        .encode() \n        .build(); \n\nURI uri = uriComponents.expand(\"Westin\", \"123\").toUri();  \n"],["body","\n"],["body","简化"],["body","\n"],["body","URI uri = UriComponentsBuilder\n        .fromUriString(\"https://example.com/hotels/{hotel}\")\n        .queryParam(\"q\", \"{q}\")\n        .encode()\n        .buildAndExpand(\"Westin\", \"123\")\n        .toUri();\n"],["body","\n"],["body","简化1"],["body","\n"],["body","URI uri = UriComponentsBuilder\n        .fromUriString(\"https://example.com/hotels/{hotel}\")\n        .queryParam(\"q\", \"{q}\")\n        .build(\"Westin\", \"123\");\n"],["body","\n"],["body","简化2"],["body","\n"],["body","URI uri = UriComponentsBuilder\n        .fromUriString(\"https://example.com/hotels/{hotel}?q={q}\")\n        .build(\"Westin\", \"123\");\n"],["body","\n"],["h1","UriBuilder"],["body","\n"],["body","UriComponentsBuilder  实现 UriBuilder ，通过 UriBuilderFactory 创建 UriBuilder，可以创建共享的配置（baseURL、encoding preference）"],["body","\n"],["body","可以使用 UriBuilderFactory 配置 RestTemplate 和 WebClient "],["body","\n"],["body","DefaultUriBuilderFactory 是 UriBuilderFactory 的默认实现 "],["body","\n"],["body","configure a RestTemplate:"],["body","\n"],["body","// import org.springframework.web.util.DefaultUriBuilderFactory.EncodingMode;\n\nString baseUrl = \"https://example.org\";\nDefaultUriBuilderFactory factory = new DefaultUriBuilderFactory(baseUrl);\nfactory.setEncodingMode(EncodingMode.TEMPLATE_AND_VALUES);\n\nRestTemplate restTemplate = new RestTemplate();\nrestTemplate.setUriTemplateHandler(factory);\n"],["body","\n"],["body","WebClient"],["body","\n"],["body","// import org.springframework.web.util.DefaultUriBuilderFactory.EncodingMode;\n\nString baseUrl = \"https://example.org\";\nDefaultUriBuilderFactory factory = new DefaultUriBuilderFactory(baseUrl);\nfactory.setEncodingMode(EncodingMode.TEMPLATE_AND_VALUES);\n\nWebClient client = WebClient.builder().uriBuilderFactory(factory).build();\n"],["body","\n"],["body","直接使用 uriBuilderFactory"],["body","\n"],["body","String baseUrl = \"https://example.com\";\nDefaultUriBuilderFactory uriBuilderFactory = new DefaultUriBuilderFactory(baseUrl);\n\nURI uri = uriBuilderFactory.uriString(\"/hotels/{hotel}\")\n        .queryParam(\"q\", \"{q}\")\n        .build(\"Westin\", \"123\");\n"],["body","\n"],["h1","URI Encoding"],["body","\n"],["body","UriComponentsBuilder exposes encoding options at two levels:"],["body","\n"],["body","UriComponentsBuilder 有两个级别的 encoding options "],["body","\n\n"],["body","UriComponentsBuilder#encode(): 编码 URI template 然后 严格对 URI变量进行编码"],["body","\n"],["body","UriComponents#encode(): 不替换关键字"],["body","\n\n"],["body","这两个选项 使用 转义的八进制 替换 非ASCII 和非法字符 ，第一个选项会 替换 变量中的关键字"],["body","\n"],["body","URI uri = UriComponentsBuilder.fromPath(\"/hotel list/{city}\")\n        .queryParam(\"q\", \"{q}\")\n        .encode()\n        .buildAndExpand(\"New York\", \"foo+bar\")\n        .toUri();\n\n// Result is \"/hotel%20list/New%20York?q=foo%2Bbar\"\n"],["body","\n"],["body","URI uri = UriComponentsBuilder.fromPath(\"/hotel list/{city}\")\n        .queryParam(\"q\", \"{q}\")\n        .build(\"New York\", \"foo+bar\");\n"],["body","\n"],["body","URI uri = UriComponentsBuilder.fromUriString(\"/hotel list/{city}?q={q}\")\n        .build(\"New York\", \"foo+bar\");\n"],["body","\n"],["body","String baseUrl = \"https://example.com\";\nDefaultUriBuilderFactory factory = new DefaultUriBuilderFactory(baseUrl)\nfactory.setEncodingMode(EncodingMode.TEMPLATE_AND_VALUES);\n\n// Customize the RestTemplate..\nRestTemplate restTemplate = new RestTemplate();\nrestTemplate.setUriTemplateHandler(factory);\n\n// Customize the WebClient..\nWebClient client = WebClient.builder().uriBuilderFactory(factory).build();\n"],["body","\n"],["body","The DefaultUriBuilderFactory implementation uses UriComponentsBuilder internally to expand and encode URI templates. As a factory, it provides a single place to configure the approach to encoding, based on one of the below encoding modes:"],["body","\n\n"],["body","TEMPLATE_AND_VALUES: Uses UriComponentsBuilder#encode(), corresponding to the first option in the earlier list, to pre-encode the URI template and strictly encode URI variables when expanded."],["body","\n"],["body","VALUES_ONLY: Does not encode the URI template and, instead, applies strict encoding to URI variables through UriUtils#encodeUriVariables prior to expanding them into the template."],["body","\n"],["body","URI_COMPONENT: Uses UriComponents#encode(), corresponding to the second option in the earlier list, to encode URI component value after URI variables are expanded."],["body","\n"],["body","NONE: No encoding is applied."],["body","\n\n"],["body","The RestTemplate is set to EncodingMode.URI_COMPONENT for historic reasons and for backwards compatibility. The WebClient relies on the default value in DefaultUriBuilderFactory, which was changed from EncodingMode.URI_COMPONENT in 5.0.x to EncodingMode.TEMPLATE_AND_VALUES in 5.1."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","14.spring_SpringWebFlux/源码分析/springBoot创建WebFlux分析.html"],["title","springBoot创建WebFlux分析.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","创建上下文"],["body","\n"],["body","//org.springframework.boot.SpringApplication#createApplicationContext\nApplicationContextFactory DEFAULT = (webApplicationType) -> {\n    try {\n        switch (webApplicationType) {\n            case SERVLET:\n                return new AnnotationConfigServletWebServerApplicationContext();\n            case REACTIVE:\n                return new AnnotationConfigReactiveWebServerApplicationContext();\n            default:\n                return new AnnotationConfigApplicationContext();\n        }\n    }\n    catch (Exception ex) {\n        throw new IllegalStateException(\"Unable create a default ApplicationContext instance, \"\n                                        + \"you may need a custom ApplicationContextFactory\", ex);\n    }\n};\n"],["body","\n"],["body","如何判断 web应用类型"],["body","\n"],["body","\tprivate static final String[] SERVLET_INDICATOR_CLASSES = { \"javax.servlet.Servlet\",\n\t\t\t\"org.springframework.web.context.ConfigurableWebApplicationContext\" };\n\n\t//webmvc判断类\n\tprivate static final String WEBMVC_INDICATOR_CLASS = \"org.springframework.web.servlet.DispatcherServlet\";\n\n\t//webflux判断类\n\tprivate static final String WEBFLUX_INDICATOR_CLASS = \"org.springframework.web.reactive.DispatcherHandler\";\n\n\t//jersy\n\tprivate static final String JERSEY_INDICATOR_CLASS = \"org.glassfish.jersey.servlet.ServletContainer\";\n\n\t//servlet\n\tprivate static final String SERVLET_APPLICATION_CONTEXT_CLASS = \"org.springframework.web.context.WebApplicationContext\";\n\n\nstatic WebApplicationType deduceFromClasspath() {\n    if (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, null) && !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, null)\n        && !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, null)) {\n        return WebApplicationType.REACTIVE;\n    }\n    for (String className : SERVLET_INDICATOR_CLASSES) {\n        if (!ClassUtils.isPresent(className, null)) {\n            return WebApplicationType.NONE;\n        }\n    }\n    return WebApplicationType.SERVLET;\n}\n"],["body","\n"],["h1","创建WebServerManager"],["body","\n"],["body","//org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext#refresh\n\tprivate void createWebServer() {\n\t\tWebServerManager serverManager = this.serverManager;\n\t\tif (serverManager == null) {\n\t\t\tStartupStep createWebServer = this.getApplicationStartup().start(\"spring.boot.webserver.create\");\n            //获取 ReactiveWebServerFactory bean名\n\t\t\tString webServerFactoryBeanName = getWebServerFactoryBeanName();\n            //获取 ReactiveWebServerFactory bean\n\t\t\tReactiveWebServerFactory webServerFactory = getWebServerFactory(webServerFactoryBeanName);\n            \n\t\t\tcreateWebServer.tag(\"factory\", webServerFactory.getClass().toString());\n\t\t\tboolean lazyInit = getBeanFactory().getBeanDefinition(webServerFactoryBeanName).isLazyInit();\n            //获取 HttpHandlerbean,创建ServerManager\n\t\t\tthis.serverManager = new WebServerManager(this, webServerFactory, this::getHttpHandler, lazyInit);\n\t\t\tgetBeanFactory().registerSingleton(\"webServerGracefulShutdown\",\n\t\t\t\t\tnew WebServerGracefulShutdownLifecycle(this.serverManager.getWebServer()));\n\t\t\tgetBeanFactory().registerSingleton(\"webServerStartStop\",\n\t\t\t\t\tnew WebServerStartStopLifecycle(this.serverManager));\n\t\t\tcreateWebServer.end();\n\t\t}\n\t\tinitPropertySources();\n\t}\n"],["body","\n"],["h1","创建WebSevrer"],["body","\n"],["headingLink","nettyserver"],["heading","NettyServer"],["body","\n"],["body","\tpublic WebServer getWebServer(HttpHandler httpHandler) {\n\t\tHttpServer httpServer = createHttpServer();\n\t\tReactorHttpHandlerAdapter handlerAdapter = new ReactorHttpHandlerAdapter(httpHandler);\n\t\tNettyWebServer webServer = createNettyWebServer(httpServer, handlerAdapter, this.lifecycleTimeout,\n\t\t\t\tgetShutdown());\n\t\twebServer.setRouteProviders(this.routeProviders);\n\t\treturn webServer;\n\t}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","14.spring_SpringWebFlux/源码分析/README.html"],["title","源码分析 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","服务层"],["body","\n"],["body","该层是各个 HTTP 服务器的 启动方法，服务就是从该层启动"],["body","\n"],["headingLink","netty"],["heading","Netty"],["body","\n"],["body","HttpHandler handler = ...\nReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(handler);\nHttpServer.create().host(host).port(port).handle(adapter).bind().block();\n"],["body","\n"],["headingLink","tomcat"],["heading","Tomcat"],["body","\n"],["body","HttpHandler handler = ...\nServlet servlet = new TomcatHttpHandlerAdapter(handler);\n\nTomcat server = new Tomcat();\nFile base = new File(System.getProperty(\"java.io.tmpdir\"));\nContext rootContext = server.addContext(\"\", base.getAbsolutePath());\nTomcat.addServlet(rootContext, \"main\", servlet);\nrootContext.addServletMappingDecoded(\"/\", \"main\");\nserver.setHost(host);\nserver.setPort(port);\nserver.start();\n"],["body","\n"],["h1","适配层"],["body","\n\n"],["body","利用服务库的API实现响应式"],["body","\n"],["body","不同 的 服务层中 有不同形式的 handler去处理请求与响应"],["body","\n\n"],["headingLink","netty-1"],["heading","Netty"],["body","\n"],["body","需要的handler签名"],["body","\n"],["body","BiFunction<HttpServerRequest, HttpServerResponse, Mono<Void>>\n"],["body","\n"],["headingLink","tomcat-1"],["heading","Tomcat"],["body","\n"],["body","Servlet\n"],["body","\n"],["h1","WebFlux处理层"],["body","\n"],["body","WebFlux将处理逻辑转交给 HttpHandler"],["body","\n"],["headingLink","httpwebhandleradapter"],["heading","HttpWebHandlerAdapter"],["body","\n\n"],["body","将请求逻辑转统一定向到WebHandler"],["body","\n"],["body","并提供 spring容器，会话管理，请求、国际化，编解码等的初步支持"],["body","\n\n"],["headingLink","webhandler"],["heading","WebHandler"],["body","\n\n"],["body","处理会话、容器、国际化、编解码等"],["body","\n"],["body","将路由与 业务处理逻辑交给其他层"],["body","\n\n"],["headingLink","路由与业务处理"],["heading","路由与业务处理"],["body","\n"],["headingLink","routerfunctionwebhandler"],["heading","RouterFunctionWebHandler"],["body","\n"],["body","基于 RouterFunction 的路由"],["body","\n"],["body","基于 HandlerFunction 的业务处理"],["body","\n"],["headingLink","dispatcherhandler"],["heading","DispatcherHandler"],["body","\n"],["body","路由查找"],["body","\n"],["body","HandlerMapping  ：不同的路由方式 映射到 不同的 handler"],["body","\n\n"],["body","\n"],["body","RouterFunctionMapping：基于 RouterFunction 的路由"],["body","\n"],["body","\n"],["body","\n"],["body","AbstractUrlHandlerMapping：基于Url匹配的路由"],["body","\n"],["body","\n"],["body","\n"],["body","AbstractHandlerMethodMapping：基于RequestMapping方法的路由"],["body","\n"],["body","\n\n"],["body","业务处理"],["body","\n"],["body","由于不同的 HandlerMapping  返回不同的 handler，所以定义了 HandlerAdapter 去定义了如何调用 handler"],["body","\n\n"],["body","RequestMappingHandlerAdapter：处理 AbstractHandlerMethodMapping产生的 HandlerMethod"],["body","\n"],["body","HandlerFunctionAdapter：处理 RouterFunctionMapping 产生的 HandlerFunction"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","14.spring_SpringWebFlux/FunctionEndpoint.html"],["title","FunctionEndpoint.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Functional Endpoints"],["body","\n"],["body","Spring WebFlux 包含 WebFlux.fn，轻量级的函数式编程模型，函数 是用来 作 路由 跟 请求处理，协定旨在不可变，是 基于注解的 编程模型的另一个可用的方式"],["body","\n"],["h1","Overview"],["body","\n"],["body","在WebFlux.fn中，使用 HandlerFunction处理 HTTP请求，以 ServerRequest 为参数，返回 延迟的 ServerResponse ，例如 Mono<ServerResponse>"],["body","\n\n"],["body","请求跟响应都 有不变的 协定，以 jdk8友好的 方式 访问 请求跟响应"],["body","\n"],["body","HandlerFunction 类似注解中的  @RequestMapping 方法，即将到来的请求通过 RouterFunction 映射到 handler function"],["body","\n"],["body","RouterFunctions.route()  提供 router的构建"],["body","\n\n"],["body","import static org.springframework.http.MediaType.APPLICATION_JSON;\nimport static org.springframework.web.reactive.function.server.RequestPredicates.*;\nimport static org.springframework.web.reactive.function.server.RouterFunctions.route;\n\nPersonRepository repository = ...\nPersonHandler handler = new PersonHandler(repository);\n\nRouterFunction<ServerResponse> route = route()\n    .GET(\"/person/{id}\", accept(APPLICATION_JSON), handler::getPerson)\n    .GET(\"/person\", accept(APPLICATION_JSON), handler::listPeople)\n    .POST(\"/person\", handler::createPerson)\n    .build();\n\npublic class PersonHandler {\n\n    // ...\n\n    public Mono<ServerResponse> listPeople(ServerRequest request) {\n        // ...\n    }\n\n    public Mono<ServerResponse> createPerson(ServerRequest request) {\n        // ...\n    }\n\n    public Mono<ServerResponse> getPerson(ServerRequest request) {\n        // ...\n    }\n}\n"],["body","\n"],["body","运行 RouterFunction 的一个方法是：将它转换为 HttpHandler ，通过 内置的 server adapters 安装它们"],["body","\n\n"],["body","RouterFunctions.toHttpHandler(RouterFunction)"],["body","\n"],["body","RouterFunctions.toHttpHandler(RouterFunction, HandlerStrategies)"],["body","\n\n"],["h1","HandlerFunction"],["body","\n"],["body","ServerRequest and ServerResponse  是不可变接口，提供 jdk8友好访问 HTTP的请求和响应"],["body","\n"],["body","请求跟响应 都提供了 响应式流  的背压，请求Body被表示为 Flux or Mono 响应被表示为 任何 Reactive Streams Publisher"],["body","\n"],["headingLink","serverrequest"],["heading","ServerRequest"],["body","\n"],["body","ServerRequest 提供对 HTTP方法 URI 请求头、查询参数的访问，访问请求体通过  body 方法"],["body","\n"],["body","body转Mono<String>"],["body","\n"],["body","Mono<String> string = request.bodyToMono(String.class);\n"],["body","\n"],["body","Person对象通过 反序列化的方式（JSON或者 XML）"],["body","\n"],["body","Flux<Person> people = request.bodyToFlux(Person.class);\n"],["body","\n"],["body","提供自定义函数解析"],["body","\n"],["body","Mono<String> string = request.body(BodyExtractors.toMono(String.class));\nFlux<Person> people = request.body(BodyExtractors.toFlux(Person.class));\n"],["body","\n"],["body","访问表单格式"],["body","\n"],["body","Mono<MultiValueMap<String, String>> map = request.formData();\n"],["body","\n"],["body","访问multi-part"],["body","\n"],["body","Mono<MultiValueMap<String, Part>> map = request.multipartData();\n"],["body","\n"],["body","响应式流 一次访问一个"],["body","\n"],["body","Flux<Part> parts = request.body(BodyExtractors.toParts());\n"],["body","\n"],["headingLink","serverresponse"],["heading","ServerResponse"],["body","\n"],["body","ServerResponse  提供对 HTTP 响应的 访问。因为是不可变的，可以使用 build 构建"],["body","\n"],["body","可以设置请求状态、请求头、请求体"],["body","\n"],["body","Mono<Person> person = ...\nServerResponse.ok().contentType(MediaType.APPLICATION_JSON).body(person, Person.class);\n"],["body","\n"],["body","201（CREATED）with a location"],["body","\n"],["body","URI location = ...\nServerResponse.created(location).build();\n"],["body","\n"],["body","提供 hint 参数以 自定义 body如何序列化如何反序列化"],["body","\n"],["body","ServerResponse.ok().hint(Jackson2CodecSupport.JSON_VIEW_HINT, MyJacksonView.class).body(...);\n"],["body","\n"],["headingLink","handler-classes"],["heading","Handler Classes"],["body","\n"],["body","使用 Lambada表达式定义HandlerFunction"],["body","\n"],["body","HandlerFunction<ServerResponse> helloWorld =\n  request -> ServerResponse.ok().bodyValue(\"Hello World\");\n"],["body","\n"],["body","如果有多个hander function，可以使用 一个 handler class 将 多个方法组合起来，类似于 controller的作用"],["body","\n"],["body","使用 Person repository构建响应式流"],["body","\n"],["body","import static org.springframework.http.MediaType.APPLICATION_JSON;\nimport static org.springframework.web.reactive.function.server.ServerResponse.ok;\n\npublic class PersonHandler {\n\n    private final PersonRepository repository;\n\n    public PersonHandler(PersonRepository repository) {\n        this.repository = repository;\n    }\n\n    public Mono<ServerResponse> listPeople(ServerRequest request) { \n        Flux<Person> people = repository.allPeople();\n        return ok().contentType(APPLICATION_JSON).body(people, Person.class);\n    }\n\n    public Mono<ServerResponse> createPerson(ServerRequest request) { \n        Mono<Person> person = request.bodyToMono(Person.class);\n        return ok().build(repository.savePerson(person));\n    }\n\n    public Mono<ServerResponse> getPerson(ServerRequest request) { \n        int personId = Integer.valueOf(request.pathVariable(\"id\"));\n        return repository.getPerson(personId)\n            .flatMap(person -> ok().contentType(APPLICATION_JSON).bodyValue(person))\n            .switchIfEmpty(ServerResponse.notFound().build());\n    }\n}\n"],["body","\n"],["headingLink","validation"],["heading","Validation"],["body","\n"],["body","functional endpoint 可以使用  Spring’s validation facilities  以校验请求体"],["body","\n"],["body","public class PersonHandler {\n\n    private final Validator validator = new PersonValidator(); \n\n    // ...\n\n    public Mono<ServerResponse> createPerson(ServerRequest request) {\n        Mono<Person> person = request.bodyToMono(Person.class).doOnNext(this::validate); \n        return ok().build(repository.savePerson(person));\n    }\n\n    private void validate(Person person) {\n        Errors errors = new BeanPropertyBindingResult(person, \"person\");\n        validator.validate(person, errors);\n        if (errors.hasErrors()) {\n            throw new ServerWebInputException(errors.toString()); \n        }\n    }\n}\n"],["body","\n"],["body","Handlers 同样 使用 the standard bean validation API (JSR-303) ，通过 创建注入 全局 Validator 实例，基于LocalValidatorFactoryBean，See Spring Validation"],["body","\n"],["h1","RouterFunction"],["body","\n"],["body","使用  RouterFunctions工具类 创建 RouterFunction,RouterFunctions.route() 创建 链式构造器，RouterFunctions.route(RequestPredicate, HandlerFunction)直接创建 router"],["body","\n"],["headingLink","predicates"],["heading","Predicates"],["body","\n"],["body","RequestPredicates工具类 提供基于request path, HTTP method, content-type等 常用的实现"],["body","\n"],["body","RouterFunction<ServerResponse> route = RouterFunctions.route()\n    .GET(\"/hello-world\", accept(MediaType.TEXT_PLAIN),\n        request -> ServerResponse.ok().bodyValue(\"Hello World\")).build();\n"],["body","\n"],["body","可以组合 多个 request predicates "],["body","\n\n"],["body","RequestPredicate.and(RequestPredicate) — both must match."],["body","\n"],["body","RequestPredicate.or(RequestPredicate) — either can match."],["body","\n\n"],["body","来自 RequestPredicates  大多数 predicates 是组合的"],["body","\n"],["body","例如：RequestPredicates.GET(String)  组合于 RequestPredicates.method(HttpMethod) RequestPredicates.path(String)"],["body","\n"],["headingLink","routes"],["heading","Routes"],["body","\n"],["body","Router functions  按顺序解析的：如果第一个 不匹配 解析第二个，因此 精确的 routes应该在 广泛的 routes 前面"],["body","\n"],["body","将 RouterFunction 注册为 Spring beans 也是很重要的，与基于注解的 行为不同之处是：最佳匹配是自动计算的，"],["body","\n"],["body","还有其他组合 多个 router functions的方法"],["body","\n\n"],["body","add(RouterFunction) on the RouterFunctions.route() builder"],["body","\n"],["body","RouterFunction.and(RouterFunction)"],["body","\n"],["body","RouterFunction.andRoute(RequestPredicate, HandlerFunction) — shortcut for RouterFunction.and() with nested RouterFunctions.route()."],["body","\n\n"],["body","以下案例是 四个routes组合"],["body","\n"],["body","import static org.springframework.http.MediaType.APPLICATION_JSON;\nimport static org.springframework.web.reactive.function.server.RequestPredicates.*;\n\nPersonRepository repository = ...\nPersonHandler handler = new PersonHandler(repository);\n\nRouterFunction<ServerResponse> otherRoute = ...\n\nRouterFunction<ServerResponse> route = route()\n    //`GET /person/{id}` with an `Accept` header that matches JSON is routed to `PersonHandler.getPerson`\n    .GET(\"/person/{id}\", accept(APPLICATION_JSON), handler::getPerson) \n    //GET /person` with an `Accept` header that matches JSON is routed to `PersonHandler.listPeople\n    .GET(\"/person\", accept(APPLICATION_JSON), handler::listPeople) \n    //POST /person` with no additional predicates is mapped to `PersonHandler.createPerson\n    .POST(\"/person\", handler::createPerson) \n    //`otherRoute` is a router function that is created elsewhere, and added to the route built.\n    .add(otherRoute) \n    .build();\n"],["body","\n"],["headingLink","nested-routes"],["heading","Nested Routes"],["body","\n"],["body","一组 functions共享 一个predicate，例如 共享前缀"],["body","\n"],["body","在上述例子中 就是 共享 /person 路径"],["body","\n"],["body","当使用注解时，使用 @RequestMapping  注解在 类上来共享 /person 路径"],["body","\n"],["body","在 WebFlux.fn  path predicates  可以 通过 router function  构造器共享"],["body","\n"],["body","RouterFunction<ServerResponse> route = route()\n    .path(\"/person\", builder -> builder \n        .GET(\"/{id}\", accept(APPLICATION_JSON), handler::getPerson)\n        .GET(accept(APPLICATION_JSON), handler::listPeople)\n        .POST(\"/person\", handler::createPerson))\n    .build();\n"],["body","\n"],["body","嵌套路由 表示外层的 predicate 在内层是共享的"],["body","\n"],["body","基于 路径的嵌套式很普遍的  可以使用  builder#nest 方法"],["body","\n"],["body","RouterFunction<ServerResponse> route = route()\n    .path(\"/person\", b1 -> b1\n        .nest(accept(APPLICATION_JSON), b2 -> b2\n            .GET(\"/{id}\", handler::getPerson)\n            .GET(handler::listPeople))\n        .POST(\"/person\", handler::createPerson))\n    .build();\n"],["body","\n"],["headingLink","running-a-server"],["heading","Running a Server"],["body","\n"],["body","如何使用 router function 运行HTTP服务器，一个简单的 方法是 将 一个 router function 转换成 http handler"],["body","\n\n"],["body","RouterFunctions.toHttpHandler(RouterFunction)"],["body","\n"],["body","RouterFunctions.toHttpHandler(RouterFunction, HandlerStrategies)"],["body","\n\n"],["body","将 返回的   HttpHandler 与 一系列 server adapters 配合使用，在SpringBooter中 使用 DispatcherHandler ，它使用spring 配置化 声明 需要的组件"],["body","\n"],["body","WebFlux Java configuration 声明了 以下基础设施组件"],["body","\n\n"],["body","RouterFunctionMapping: 检测 RouterFunction<?>  bean对象， orders them, 通过RouterFunction.andOther 组合"],["body","\n"],["body","HandlerFunctionAdapter:  让  DispatcherHandler  执行 HandlerFunction  的简单适配器 "],["body","\n"],["body","ServerResponseResultHandler: 处理返回结果"],["body","\n\n"],["body","@Configuration\n@EnableWebFlux\npublic class WebConfig implements WebFluxConfigurer {\n\n    @Bean\n    public RouterFunction<?> routerFunctionA() {\n        // ...\n    }\n\n    @Bean\n    public RouterFunction<?> routerFunctionB() {\n        // ...\n    }\n\n    // ...\n\n    @Override\n    public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {\n        // configure message conversion...\n    }\n\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        // configure CORS...\n    }\n\n    @Override\n    public void configureViewResolvers(ViewResolverRegistry registry) {\n        // configure view resolution for HTML rendering...\n    }\n}\n"],["body","\n"],["h1","Filtering Handler Functions"],["body","\n"],["body","可以在 builder 上使用  before, after, or filter 创建过滤器"],["body","\n"],["body","也可以使用注解@ControllerAdvice、 ServletFilter 这些过滤器会 应用于所有 路由"],["body","\n"],["body","RouterFunction<ServerResponse> route = route()\n    .path(\"/person\", b1 -> b1\n        .nest(accept(APPLICATION_JSON), b2 -> b2\n            .GET(\"/{id}\", handler::getPerson)\n            .GET(handler::listPeople)\n            .before(request -> ServerRequest.from(request) \n                .header(\"X-RequestHeader\", \"Value\")\n                .build()))\n        .POST(\"/person\", handler::createPerson))\n    .after((request, response) -> logResponse(response)) \n    .build();\n"],["body","\n"],["body","before过滤器 只应用于 两个 GET routes"],["body","\n"],["body","after 过滤器 应用于所有 路由"],["body","\n"],["body","SecurityManager securityManager = ...\n\nRouterFunction<ServerResponse> route = route()\n    .path(\"/person\", b1 -> b1\n        .nest(accept(APPLICATION_JSON), b2 -> b2\n            .GET(\"/{id}\", handler::getPerson)\n            .GET(handler::listPeople))\n        .POST(\"/person\", handler::createPerson))\n    .filter((request, next) -> {\n        if (securityManager.allowAccessTo(request.path())) {\n            return next.handle(request);\n        }\n        else {\n            return ServerResponse.status(UNAUTHORIZED).build();\n        }\n    })\n    .build();\n"],["body","\n"],["body","Besides using the filter method on the router function builder, it is possible to apply a filter to an existing router function via RouterFunction.filter(HandlerFilterFunction)."],["body","\n"],["body","除了 在 builder上 时使用 过滤器方法，可以在已存在的  router function上应用 过滤器 通过 RouterFunction.filter(HandlerFilterFunction)"],["body","\n"],["body","通过  CorsWebFilter 支持 CORS"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","14.spring_SpringWebFlux/CoreFeatures.html"],["title","CoreFeatures.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Reactive Core"],["body","\n"],["body","对于响应式 web应用，spring-web模块 包含以下 几个 基础支持"],["body","\n\n"],["body","对于服务端请求处理，有两个级别的支持\n\n"],["body","HttpHandler: 使用非阻塞IO处理Http请求的基本协定  还有 Reactive Streams back pressure, along with adapters for Reactor Netty, Undertow, Tomcat, Jetty, and any Servlet 3.1+ container."],["body","\n"],["body","WebHandler API: 稍微高一点的API, 用于请求处理的通用 Web API,具体的编程模型 在这个基础上 构建（例如：基于注解、函数式）"],["body","\n\n"],["body","\n"],["body","对于客户端, ClientHttpConnector 是一个基本的 非阻塞的 执行 Http请求的约定 并且 Reactive Streams back pressure, along with adapters for Reactor Netty, reactive Jetty HttpClient and Apache HttpComponents. \n\n"],["body","更高级的 API： WebClient 基于 此协定"],["body","\n\n"],["body","\n"],["body","对于客户端 服务端 都可用的是, codecs for serialization and deserialization of HTTP request and response content."],["body","\n\n"],["h1","HttpHandler"],["body","\n"],["body","HttpHandler  是一个简单的 接口，只有一个方法处理 请求和响应"],["body","\n"],["body","以下表格 表明支持的 HttpHandler"],["body","\n"],["body","Server name"],["body","Server API used"],["body","Reactive Streams support"],["body","\n"],["body","Netty"],["body","Netty API"],["body","Reactor Netty"],["body","\n"],["body","Undertow"],["body","Undertow API"],["body","spring-web: Undertow to Reactive Streams bridge"],["body","\n"],["body","Tomcat"],["body","Servlet 3.1 non-blocking I/O; Tomcat API to read and write ByteBuffers vs byte[]"],["body","spring-web: Servlet 3.1 non-blocking I/O to Reactive Streams bridge"],["body","\n"],["body","Jetty"],["body","Servlet 3.1 non-blocking I/O; Jetty API to write ByteBuffers vs byte[]"],["body","spring-web: Servlet 3.1 non-blocking I/O to Reactive Streams bridge"],["body","\n"],["body","Servlet 3.1 container"],["body","Servlet 3.1 non-blocking I/O"],["body","spring-web: Servlet 3.1 non-blocking I/O to Reactive Streams bridge"],["body","\n\n\n"],["body","以下表格描述了 依赖以及版本"],["body","\n"],["body","Server name"],["body","Group id"],["body","Artifact name"],["body","\n"],["body","Reactor Netty"],["body","io.projectreactor.netty"],["body","reactor-netty"],["body","\n"],["body","Undertow"],["body","io.undertow"],["body","undertow-core"],["body","\n"],["body","Tomcat"],["body","org.apache.tomcat.embed"],["body","tomcat-embed-core"],["body","\n"],["body","Jetty"],["body","org.eclipse.jetty"],["body","jetty-server, jetty-servlet"],["body","\n\n\n"],["headingLink","codeexample"],["heading","CodeExample"],["body","\n"],["headingLink","reactornetty-code"],["heading","ReactorNetty Code"],["body","\n"],["body","HttpHandler handler = ...\nReactorHttpHandlerAdapter adapter = new ReactorHttpHandlerAdapter(handler);\nHttpServer.create().host(host).port(port).handle(adapter).bind().block();\n"],["body","\n"],["headingLink","tomcat"],["heading","Tomcat"],["body","\n"],["body","HttpHandler handler = ...\nServlet servlet = new TomcatHttpHandlerAdapter(handler);\n\nTomcat server = new Tomcat();\nFile base = new File(System.getProperty(\"java.io.tmpdir\"));\nContext rootContext = server.addContext(\"\", base.getAbsolutePath());\nTomcat.addServlet(rootContext, \"main\", servlet);\nrootContext.addServletMappingDecoded(\"/\", \"main\");\nserver.setHost(host);\nserver.setPort(port);\nserver.start();\n"],["body","\n"],["headingLink","servlet-31-container"],["heading","Servlet 3.1+ Container"],["body","\n"],["body","To deploy as a WAR to any Servlet 3.1+ container, you can extend and include AbstractReactiveWebInitializer in the WAR. That class wraps an HttpHandler with ServletHttpHandlerAdapter and registers that as a Servlet."],["body","\n"],["h1","WebHandler"],["body","\n"],["headingLink","webhandler作用"],["heading","webhandler作用"],["body","\n"],["body","WebHandler 主要是为了 提供  通用 web-APi，通过 多个 WebExceptionHandler 多个  WebFilter 和一个  WebHandler 组件"],["body","\n"],["body","这些链条可以通过  WebHttpHandlerBuilder 中设置 ApplicationContext ，会自动检测 或者 手动注册"],["body","\n"],["body","HttpHandler主要是为了处理 不同 HttpServer的抽象使用"],["body","\n"],["body","WebHandler旨在 提供 web应用中 更广泛的使用"],["body","\n\n"],["body","session with attribute "],["body","\n"],["body","request attribute"],["body","\n"],["body","本地化：Resolved Locale or Principal for the request."],["body","\n"],["body","对表单的解析、缓存、访问"],["body","\n"],["body","multipart data的抽象"],["body","\n"],["body","and more.."],["body","\n\n"],["headingLink","special-bean-types"],["heading","Special bean types"],["body","\n"],["body","下表列出了 WebHttpHandlerBuilder 能够自动检测容器中的bean类型的列表，或者能够直接注册"],["body","\n"],["body","Bean name"],["body","Bean type"],["body","Count"],["body","Description"],["body","\n"],["body","WebExceptionHandler"],["body","0..N"],["body","Provide handling for exceptions from the chain of WebFilter instances and the target WebHandler. For more details, see Exceptions."],["body","\n"],["body","WebFilter"],["body","0..N"],["body","Apply interception style logic to before and after the rest of the filter chain and the target WebHandler. For more details, see Filters."],["body","\n"],["body","webHandler"],["body","WebHandler"],["body","1"],["body","The handler for the request."],["body","\n"],["body","webSessionManager"],["body","WebSessionManager"],["body","0..1"],["body","The manager for WebSession instances exposed through a method on ServerWebExchange. DefaultWebSessionManager by default."],["body","\n"],["body","serverCodecConfigurer"],["body","ServerCodecConfigurer"],["body","0..1"],["body","For access to HttpMessageReader instances for parsing form data and multipart data that is then exposed through methods on ServerWebExchange. ServerCodecConfigurer.create() by default."],["body","\n"],["body","localeContextResolver"],["body","LocaleContextResolver"],["body","0..1"],["body","The resolver for LocaleContext exposed through a method on ServerWebExchange. AcceptHeaderLocaleContextResolver by default."],["body","\n"],["body","forwardedHeaderTransformer"],["body","ForwardedHeaderTransformer"],["body","0..1"],["body","For processing forwarded type headers, either by extracting and removing them or by removing them only. Not used by default."],["body","\n\n\n"],["headingLink","form-data"],["heading","Form Data"],["body","\n"],["body","ServerWebExchange 暴露了下面方法 以访问 FormData:"],["body","\n"],["body","Mono<MultiValueMap<String, String>> getFormData();\n"],["body","\n"],["body","The DefaultServerWebExchange uses the configured HttpMessageReader to parse form data (application/x-www-form-urlencoded) into a MultiValueMap."],["body","\n"],["body","By default, FormHttpMessageReader is configured for use by the ServerCodecConfigurer bean (see the Web Handler API)."],["body","\n"],["headingLink","multipart-data"],["heading","Multipart Data"],["body","\n"],["body","ServerWebExchange exposes the following method for accessing multipart data:"],["body","\n"],["body","Mono<MultiValueMap<String, Part>> getMultipartData();\n"],["body","\n"],["body","默认使用 HttpMessageReader"],["body","\n"],["body","The DefaultServerWebExchange uses the configured HttpMessageReader<MultiValueMap<String, Part>> to parse multipart/form-data content into a MultiValueMap. By default, this is the DefaultPartHttpMessageReader, which does not have any third-party dependencies. "],["body","\n"],["body","使用SynchronossPartHttpMessageReader"],["body","\n"],["body","Alternatively, the SynchronossPartHttpMessageReader can be used, which is based on the Synchronoss NIO Multipart library. Both are configured through the ServerCodecConfigurer bean (see the Web Handler API)."],["body","\n"],["body","使用 StreamingFashion"],["body","\n"],["body","To parse multipart data in streaming fashion, you can use the Flux<Part> returned from an HttpMessageReader<Part> instead. For example, in an annotated controller, use of @RequestPart implies Map-like access to individual parts by name and, hence, requires parsing multipart data in full. By contrast, you can use @RequestBody to decode the content to Flux<Part> without collecting to a MultiValueMap."],["body","\n"],["headingLink","forwarded-headers"],["heading","Forwarded Headers"],["body","\n"],["body","代理改变服务器信息"],["body","\n"],["body","由于请求会走代理，host、port、scheme、可能会变。这导致 客户端无法连接正确的服务端"],["body","\n"],["body","原始信息"],["body","\n"],["body","RFC 7239  定义了  Forwarded HTTP header，代理可以提供 原始请求的信息，也有非标准的：including X-Forwarded-Host, X-Forwarded-Port, X-Forwarded-Proto, X-Forwarded-Ssl, and X-Forwarded-Prefix."],["body","\n"],["body","将Forwarded 头 替代为 request中信息"],["body","\n\n"],["body","\n"],["body","ForwardedHeaderTransformer  基于 转发的headers 修改 host、port、scheme"],["body","\n"],["body","\n"],["body","\n"],["body","移除这些转发的头"],["body","\n"],["body","\n"],["body","\n"],["body","如果申明为 forwardedHeaderTransformer bean 则会自动检测"],["body","\n"],["body","\n\n"],["body","对于 forwarded headers 这是处于安全问题考虑的，因为 应用程序 无法知道 请求头是被代理添加的还是 被 可疑的客户端"],["body","\n"],["body","这也就是为什么 一个 边界区域的代理 应配置 移除外部不受信任的转发流量"],["body","\n"],["body","你可以设置为  removeOnly=true ：这意味着 只删除不适用"],["body","\n"],["body","向下兼容"],["body","\n"],["body","从5.1 ForwardedHeaderFilter 已过时，被 ForwardedHeaderTransformer 取代，在 exchange创建之前 以尽早处理  forwarded headers"],["body","\n"],["body","如果配置了 ForwardedHeaderFilter 会把它拿出来、然后 使用 ForwardedHeaderTransformer"],["body","\n"],["h1","Filters"],["body","\n"],["body","在 WebHandler的API中、使用 WebFilter 应用 拦截器样式逻辑，在 处理链中的 前、后、剩余部分 以及 目标 webHandler"],["body","\n"],["body","当使用  WebFlux Config, 时 通过 容器自动注册 或者 手动、使用 @Order 注解 或者 实现 Ordered接口 来表明 先后顺序"],["body","\n"],["body","CORS"],["body","\n"],["body","Spring WebFlux provides fine-grained support for CORS configuration through annotations on controllers. However, when you use it with Spring Security, "],["body","\n"],["body","Spring WebFlux 提供了 细粒度的 CORS 配置支持 通过 controllers上的注解"],["body","\n"],["body","当使用Spring Security 时呢？，我们建议使用 内置的CorsFilter  必须在 Spring Security’s 其他过滤器之前"],["body","\n"],["body","See the section on CORS and the webflux-cors.html for more details."],["body","\n"],["h1","Exceptions"],["body","\n"],["body","In the WebHandler API, you can use a WebExceptionHandler to handle exceptions from the chain of WebFilter instances and the target WebHandler. When using the WebFlux Config, registering a WebExceptionHandler is as simple as declaring it as a Spring bean and (optionally) expressing precedence by using @Order on the bean declaration or by implementing Ordered."],["body","\n"],["body","The following table describes the available WebExceptionHandler implementations:"],["body","\n"],["body","Exception Handler"],["body","Description"],["body","\n"],["body","ResponseStatusExceptionHandler"],["body","Provides handling for exceptions of type ResponseStatusException by setting the response to the HTTP status code of the exception."],["body","\n"],["body","WebFluxResponseStatusExceptionHandler"],["body","Extension of ResponseStatusExceptionHandler that can also determine the HTTP status code of a @ResponseStatus annotation on any exception.This handler is declared in the WebFlux Config."],["body","\n\n\n"],["h1","Codecs"],["body","\n"],["headingLink","介绍"],["heading","介绍"],["body","\n"],["body","The spring-web and spring-core 模块提供 序列化与反序列化，从字节码到高级对象之间、通过非阻塞IO、使用Reactive Streams back pressure."],["body","\n"],["body","以下是详情"],["body","\n\n"],["body","Encoder and Decoder 是独立于 HTTP 对内容进行编码和解码的低级协定"],["body","\n"],["body","HttpMessageReader and HttpMessageWriter 是编码和解码 HTTP 消息内容的协定"],["body","\n"],["body","An Encoder can be wrapped with EncoderHttpMessageWriter to adapt it for use in a web application, while a Decoder can be wrapped with DecoderHttpMessageReader."],["body","\n"],["body","DataBuffer abstracts different byte buffer representations (e.g. Netty ByteBuf, java.nio.ByteBuffer, etc.) and is what all codecs work on. See Data Buffers and Codecs in the \"Spring Core\" section for more on this topic."],["body","\n\n"],["body","spring默认实现"],["body","\n"],["body","The spring-core 模块提供 byte[], ByteBuffer, DataBuffer, Resource, and String  encoder、decoder实现"],["body","\n"],["body","The spring-web module provides Jackson JSON, Jackson Smile, JAXB2, Protocol Buffers and other encoders and decoders along with web-only HTTP message reader and writer implementations for form data, multipart content, server-sent events, and others."],["body","\n"],["body","ClientCodecConfigurer and ServerCodecConfigurer are typically used to configure and customize the codecs to use in an application. See the section on configuring HTTP message codecs."],["body","\n"],["headingLink","jackson-json"],["heading","Jackson JSON"],["body","\n"],["body","当 jackson library 存在时  JSON and binary JSON 支持"],["body","\n"],["body","Jackson2Decoder 工作"],["body","\n\n"],["body","Jackson’s 异步非阻塞的 parser 用于 byte chunks 聚合 成 TokenBuffer，代表一个 JSON Object"],["body","\n"],["body","每一个 TokenBuffer 传给 ObjectMapper 用来船舰 高等级的对象"],["body","\n"],["body","When decoding to a multi-value publisher (e.g. Flux), each TokenBuffer is passed to the ObjectMapper as soon as enough bytes are received for a fully formed object. The input content can be a JSON array, or any line-delimited JSON format such as NDJSON, JSON Lines, or JSON Text Sequences."],["body","\n\n"],["body","Jackson2Encoder 工作如下:"],["body","\n\n"],["body","For a single value publisher (e.g. Mono), simply serialize it through the ObjectMapper."],["body","\n"],["body","For a multi-value publisher with application/json, by default collect the values with Flux#collectToList() and then serialize the resulting collection."],["body","\n"],["body","For a multi-value publisher with a streaming media type such as application/x-ndjson or application/stream+x-jackson-smile, encode, write, and flush each value individually using a line-delimited JSON format. Other streaming media types may be registered with the encoder."],["body","\n"],["body","For SSE the Jackson2Encoder is invoked per event and the output is flushed to ensure delivery without delay."],["body","\n\n"],["body","Jackson2Encoder and Jackson2Decoder 不支持 string"],["body","\n"],["headingLink","form-data-1"],["heading","Form Data"],["body","\n"],["body","FormHttpMessageReader and FormHttpMessageWriter  支持 application/x-www-form-urlencoded  的编码与解码"],["body","\n"],["body","在服务器端，表单内容通常需要在多个位置访问， ServerWebExchange 提供专门的 getFormData()  方法 ，使用 FormHttpMessageReader 解析 重复访问会缓存结果 See Form Data in the WebHandler API section."],["body","\n"],["body","一旦调用 getFormData() 那么无法从 request body中 读取原始内容，因此，应用程序应该始终通过 ServerWebExchange 一致的访问 缓存的 form data而不是从 原始请求体读取数据"],["body","\n"],["headingLink","multipart"],["heading","Multipart"],["body","\n"],["body","MultipartHttpMessageReader and MultipartHttpMessageWriter  支持 编码与解码  multipart/form-data 内容"],["body","\n"],["body","MultipartHttpMessageReader  将实际 解析 Flux<Part> 的工作 交给 另一个 HttpMessageReader，然后简单的 将其收集成 MultiValueMap"],["body","\n"],["body","默认实现为 ：DefaultPartHttpMessageReader ，通过 ServerCodecConfigurer 可以改变，详见：javadoc of DefaultPartHttpMessageReader"],["body","\n"],["body","在服务端，可能需要从多个位置访问 multipart， ServerWebExchange提供了 专门的：getMultipartData()  方法，通过 MultipartHttpMessageReader  解析数据，然后缓存，See Multipart Data in the WebHandler API section."],["body","\n"],["body","一旦调用getMultipartData() 那么无法再从 request body中 读取原始内容，所以 应该始终使用  getMultipartData() 或者 依赖 SynchronossPartHttpMessageReader ，一次性访问 Flux<Part>"],["body","\n"],["headingLink","limits"],["heading","Limits"],["body","\n"],["body","Decoder and HttpMessageReader 的实现 了 要么部分 缓存 要么 全部 缓存 输入流。这是可以配置的，限制在内存中缓冲的最大字节数。"],["body","\n"],["body","在默写情况，缓冲发生 因为 输入被聚合 表示为单个对象，例如：@RequestBody byte[], x-www-form-urlencoded "],["body","\n"],["body","缓冲也可能 发生在 流中，拆分输入流时（例如：分割的文本、JOSN对象流），这个限制适用于 一个对象关联的字节数"],["body","\n"],["body","使用 maxInMemorySize 属性来配置  Decoder or HttpMessageReader"],["body","\n"],["body","在服务端 ServerCodecConfigurer 提供 统一设置所有 codecs的该limit的地方，, see HTTP message codecs"],["body","\n"],["body","在客户端 通过 WebClient.Builder. 配置"],["body","\n"],["body","对于 Multipart parsing   maxInMemorySize 属性限制了 非文件 parts的大小、对于文件 它决定 了 文件是否要写入到磁盘。对于写入到磁盘，还有一个额外的参数：maxDiskUsagePerPart 限制 每个 part 使用的磁盘 上限，maxParts 限制了 在一个 multipart 请求中 最多 parts部件总数"],["body","\n"],["headingLink","streaming"],["heading","Streaming"],["body","\n"],["body","对于 HTTP 流式的响应，例如：（ text/event-stream, application/x-ndjson）"],["body","\n"],["body","定期发送数据很重要，尽早的可靠的 检测断开的客户端，这样的发送可以只是 * comment-only* 空 SSE 事件 或者 其他 no-op 数据，作为 heartbeat"],["body","\n"],["headingLink","databuffer"],["heading","DataBuffer"],["body","\n"],["body","DataBuffer  在 WebFlux中表示 a byte buffer ，详见： Data Buffers and Codecs. "],["body","\n"],["body","The key point to understand is that on some servers like Netty, byte buffers are pooled and reference counted,"],["body","\n"],["body","要知道的关键点是：在 Netty等服务器上，byte buffer 是池化 并且引用计算的，当被消费完之后，需要被释放 避免内存泄漏"],["body","\n"],["body","WebFlux 程序 大体上 不需要 关系这类问题，除非 直接 消费或者产生 data buffers，相反 一般都依赖 codecs 转换 除非创建自定义的 codecs"],["body","\n"],["body","详见： Data Buffers and Codecs, especially the section on Using DataBuffer."],["body","\n"],["h1","Logging"],["body","\n"],["body","DEBUG  ：在 SpringWebFlux中 DEBUG  级别的日志  旨在 紧凑、最小、可读。关注 重要信息 "],["body","\n"],["body","TRACE： 与 DEBUG 遵循一样的原则 但是可以用来调式 任何问题"],["body","\n"],["headingLink","log-id"],["heading","Log Id"],["body","\n"],["body","在 WebFlux中，一个请求可能跨多个线程，线程ID 记录 特定请求 的日志消息不是很有用。这也是为什么 WebFlux默认使用 request-specific id"],["body","\n"],["body","在服务端，logID 存储在 ServerWebExchange 属性，LOG_ID_ATTRIBUTE"],["body","\n"],["body","ServerWebExchange#getLogPrefix() 获取完整格式化的 ID 前缀"],["body","\n"],["body","在客户端，logId 存储在ClientRequest   LOG_ID_ATTRIBUTE "],["body","\n"],["body","ClientRequest#logPrefix() 获取完整格式化的 ID 前缀"],["body","\n"],["headingLink","sensitive-data"],["heading","Sensitive Data"],["body","\n"],["body","DEBUG and TRACE  可以记录 敏感信息，这也是为什么表单参数 跟请求头 默认被掩盖，需要显示启用"],["body","\n"],["body","Java"],["body","\n"],["body","@Configuration\n@EnableWebFlux\nclass MyConfig implements WebFluxConfigurer {\n\n    @Override\n    public void configureHttpMessageCodecs(ServerCodecConfigurer configurer) {\n        configurer.defaultCodecs().enableLoggingRequestDetails(true);\n    }\n}\n"],["body","\n"],["body","The following example shows how to do so for client-side requests:"],["body","\n"],["body","Java"],["body","\n"],["body","Consumer<ClientCodecConfigurer> consumer = configurer ->\n        configurer.defaultCodecs().enableLoggingRequestDetails(true);\n\nWebClient webClient = WebClient.builder()\n        .exchangeStrategies(strategies -> strategies.codecs(consumer))\n        .build();\n"],["body","\n"],["headingLink","appenders"],["heading","Appenders"],["body","\n"],["body","日志库 例如 SLF4J and Log4J2  提供异步 日志器 避免阻塞，这也有缺点，比如 可能会 丢失消息，因为没法对日志 入队列，它们最好的选择就是使用 reactive "],["body","\n"],["headingLink","custom-codecs"],["heading","Custom codecs"],["body","\n"],["body","应用程序 能注册 自定义的 codecs ，以支持 额外的 请求类型，或者 默认codecs 不支持的 特定行为"],["body","\n"],["body","想 保持跟 首选项对齐的配置"],["body","\n"],["body","Java"],["body","\n"],["body","WebClient webClient = WebClient.builder()\n        .codecs(configurer -> {\n                CustomDecoder decoder = new CustomDecoder();\n                configurer.customCodecs().registerWithDefaultConfig(decoder);\n        })\n        .build();\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","14.spring_SpringWebFlux/taskList.html"],["title","taskList.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n"],["body","静态资源处理"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","14.spring_SpringWebFlux/DispatcherHandler.html"],["title","DispatcherHandler.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","DispatcherHandler"],["body","\n"],["body","SpringWebFlux 类似于 SpringMVC 围绕 前端 控制器模式，中央 WebHandler ：DispatcherHandler 为请求处理 提供共享算法，实际工作由 其他组件完成"],["body","\n"],["body","DispatcherHandler  从Spring配置中 发现它 所需要的组件"],["body","\n"],["body","DispatcherHandler 也可以申明为 WebHandler bean名。由  WebHttpHandlerBuilder 发现，这个类是用来 构建 WebHandler的请求处理链"],["body","\n"],["body","WebFlux的Spring配置 一般包含"],["body","\n\n"],["body","DispatcherHandler with the bean name webHandler"],["body","\n"],["body","WebFilter and WebExceptionHandler beans"],["body","\n"],["body","DispatcherHandler special beans"],["body","\n"],["body","Others"],["body","\n\n"],["body","这些配置由 WebHttpHandlerBuilder 去构建 处理链"],["body","\n"],["body","Java"],["body","\n"],["body","ApplicationContext context = ...\nHttpHandler handler = WebHttpHandlerBuilder.applicationContext(context).build();\n"],["body","\n"],["body","返回的 HttpHandler用于 server adapter"],["body","\n"],["headingLink","special-bean-types"],["heading","Special Bean Types"],["body","\n"],["body","DispatcherHandler  将 请求处理 响应渲染 委托给 特殊bean（指spring管理的对象，并且是实现WebFlux协定）"],["body","\n"],["body","以下是 DispatcherHandler 会自动检测的bean"],["body","\n"],["headingLink","handlermapping"],["heading","HandlerMapping"],["body","\n"],["body","将请求映射到具体的 Handler"],["body","\n"],["body","映射规则 基于 不同 HandlerMapping的实现"],["body","\n\n"],["body","annotated controllers"],["body","\n"],["body","simple URL pattern mappings"],["body","\n"],["body","and others"],["body","\n\n"],["body","主要的实现是"],["body","\n\n"],["body","基于@RequestMapping的   RequestMappingHandlerMapping "],["body","\n"],["body","函数式端点：RouterFunctionMapping"],["body","\n"],["body","简单的URL匹配：：SimpleUrlHandlerMapping"],["body","\n\n"],["headingLink","handleradapter"],["heading","HandlerAdapter"],["body","\n"],["body","帮助 DispatcherHandler 执行 handler "],["body","\n"],["body","例如：执行基于注解的控制器，需要解析注解：此类的主要目的是隐藏调用 handler细节"],["body","\n"],["headingLink","handlerresulthandler"],["heading","HandlerResultHandler"],["body","\n"],["body","从Handler 调用的结果，并最终确定响应See Result Handling."],["body","\n"],["headingLink","processing"],["heading","Processing"],["body","\n"],["body","DispatcherHandler 按以下方式处理请求"],["body","\n\n"],["body","每一个  HandlerMapping  会请求去 匹配 handler，使用第一个匹配到的"],["body","\n"],["body","找到 handler后，HandlerAdapter 会去调用 该 handler，并返回 HandlerResult"],["body","\n"],["body","HandlerResultHandler  会处理 HandlerResult 返回值，完成处理过程，要么直接 写数据到响应、要么使用 视图渲染"],["body","\n\n"],["headingLink","result-handling"],["heading","Result Handling"],["body","\n"],["body","通过 HandlerAdapter 调用handler的返回值 被封装为 HandlerResult，包含额外上下文，传给第一个 能支持 该result的 HandlerResultHandler "],["body","\n"],["body","下表是HandlerResultHandler  的实现"],["body","\n"],["body","Result Handler Type"],["body","Return Values"],["body","Default Order"],["body","\n"],["body","ResponseEntityResultHandler"],["body","ResponseEntity, typically from @Controller instances."],["body","0"],["body","\n"],["body","ServerResponseResultHandler"],["body","ServerResponse, typically from functional endpoints."],["body","0"],["body","\n"],["body","ResponseBodyResultHandler"],["body","Handle return values from @ResponseBody methods or @RestController classes."],["body","100"],["body","\n"],["body","ViewResolutionResultHandler"],["body","CharSequence, View, Model, Map, Rendering, or any other Object is treated as a model attribute.See also View Resolution."],["body","Integer.MAX_VALUE"],["body","\n\n\n"],["headingLink","exceptions"],["heading","Exceptions"],["body","\n"],["body","HandlerResult  提供错误处理 的 函数，基于 handler-specific  机制"],["body","\n"],["body","错误函数会在以下情况被调用"],["body","\n\n"],["body","handler处理发生异常"],["body","\n"],["body","The handling of the handler return value through a HandlerResultHandler fails."],["body","\n\n"],["body","error function 可以改变 响应（例如 error status）只要在 从 handler返回的 响应式类型  产生任何数据项 之前 发出错误信号"],["body","\n"],["body","这也是 为什么 @ExceptionHandler  方法 支持 在 @Controller类中受支持"],["body","\n"],["body","Spring MVC  也同样支持，基于 HandlerExceptionResolver. "],["body","\n"],["body","记住：不能使用 @ControllerAdvice  处理异常，因为这发生在 handler 被选中前"],["body","\n"],["body","See also Managing Exceptions in the “Annotated Controller” section or Exceptions in the WebHandler API section."],["body","\n"],["headingLink","view-resolution"],["heading","View Resolution"],["body","\n"],["body","视图解析 使得可以 向浏览器 渲染 HTML 模板，无需使用某一个特定的 模板机制"],["body","\n"],["body","在 SpringWebFlux中，视图解析 是通过 专有 HandlerResultHandler ，使用  ViewResolver  实例 将  string 映射成 View实例"],["body","\n"],["headingLink","handling"],["heading","Handling"],["body","\n"],["body","传给 ViewResolutionResultHandler 的 HandlerResult  包含 从 handler 的返回值，包含 在 request handling 中添加进来的 属性的 model，返回值会按以下步骤处理"],["body","\n\n"],["body","String, CharSequence: 逻辑视图页面，通过配置的 ViewResolver 实例 解析成View实例"],["body","\n"],["body","void: 基于request path选择默认页面, 将请求URI，去除前导斜线和后缀斜线, 解析成 View. 如果未提供视图名也会按此逻辑处理(例如：返回ModelAndAttribute) 或者 返回异步值(例如：Mono 为空)"],["body","\n"],["body","Rendering: 视图解析API"],["body","\n"],["body","Model, Map: 添加到 model中的额外 model attributes"],["body","\n"],["body","Any other: 任何其他返回值 (除了简单属性，依据BeanUtils#isSimpleProperty) 被当作 属性 被添加进 Model当作 ，属性名 使用 conventions 从 类名中取，除非 有@ModelAttribute 注解"],["body","\n\n"],["body","The model 可以包含 异步 响应式 类型，"],["body","\n"],["body","在渲染之前AbstractView  将 model attributes 解析成 具体的值，并更新模型，单值响应式类型被解析成单值或无值，多值会被解析成List<T>"],["body","\n"],["body","配置视图解析 ViewResolutionResultHandler 添加到Spring配置中"],["body","\n"],["body","WebFlux Config 提供专门的视图解析配置API"],["body","\n"],["headingLink","redirecting"],["heading","Redirecting"],["body","\n"],["body","在 视图名的 特殊redirect: 前缀可以 重定向"],["body","\n"],["body","UrlBasedViewResolver （及其子类） 可以识别，余下的是重定向的URL"],["body","\n"],["body","效果跟 controller返回 RedirectView 或者 Rendering.redirectTo(\"abc\").build()"],["body","\n"],["body","但控制器本身可以 按逻辑视图名操作"],["body","\n"],["body","视图名 如redirect:/some/resource ，相当于当前 应用的重定向"],["body","\n"],["body","redirect:https://example.com/arbitrary/path 绝对路径的重定向"],["body","\n"],["headingLink","content-negotiation"],["heading","Content Negotiation"],["body","\n"],["body","ViewResolutionResultHandler 支持内容协商."],["body","\n"],["body","它比较 请求的媒体类型 和 每一个 视图支持的媒体类型 ，第一个支持的 被选中"],["body","\n"],["body","为了支持 JSON XML媒体类型 SpringWebFlux 提供了 HttpMessageWriterView ，这是一个特殊的视图，通过  HttpMessageWriter.  渲染"],["body","\n"],["body","一般来说，你可以通过WebFlux Configuration  配置 这些作为 默认视图"],["body","\n"],["body","默认视图 如果支持请求的媒体类型，它总是第一个被选中"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","14.spring_SpringWebFlux/README.html"],["title","SpringWebFlux - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","1-spring-webflux"],["heading","1. Spring WebFlux"],["body","\n"],["body","Spring WebFlux 是 5.0 之后加入的，它支持完全的 非阻塞、支持  Reactive Streams  背压、可以运行在 Netty、Undertow、以及 Servlet3.1+以上的 容器"],["body","\n"],["body","spring-webmvc and  spring-webflux 在 spring框架中并存、都是可选的、也可以都选，例如：使用 Spring MVC controllers 和 reactive WebClient"],["body","\n"],["headingLink","11-overview"],["heading","1.1. Overview"],["body","\n"],["body","Why was Spring WebFlux created?"],["body","\n\n"],["body","非阻塞 web端  使用小部分线程 处理并发，能够以更小的硬件资源为代价 实现扩展 这部分的需求，Servlet3.1提供了非阻塞的API，但是使用它违背 rest 风格的Servlet API，这就是  需要一个  通用API 作为 任何非阻塞运行时的底层 "],["body","\n"],["body","另一个原因是 函数式编程：它 让非阻塞应用 和 流API 能够以 声明式的方式组合异步逻辑"],["body","\n\n"],["headingLink","111-define-reactive"],["heading","1.1.1. Define “Reactive”"],["body","\n"],["body","我们提到 非阻塞、函数式。响应式是什么意思呢?"],["body","\n"],["body","术语，reactive 引用自 编程模型 。围绕对变化的响应而构建：网络组件响应 IO事件、UI控制器 响应鼠标事件，非阻塞是响应式的，因为 我们正处于  一种 针对 操作完成 或  数据可用 进行响应的模型"],["body","\n"],["body","还有另外一个跟响应式 关联的重要的机制：非阻塞背压，在同步的命令式代码中，阻塞的调用作为 一种自然的背压的形式，让调用者强制等待"],["body","\n"],["body","在非阻塞代码中，控制事件的速率使得 生产者不会 压倒 目的地，Reactive Streams 是 一个小的规范，处理背压的方式是 让 订阅者 控制 产生元素的速率"],["body","\n"],["body","\n"],["body","如果一个生产者 没有减速： ReactorStream的机制是 建立一种机制跟边界，决定是否要 缓存、丢弃、或者 失败"],["body","\n"],["body","\n"],["headingLink","112-reactive-api"],["heading","1.1.2. Reactive API"],["body","\n"],["body","Reactive Stream 在互操作性上有着 很重要的作用，但是这是 库或者基础设施 组件所需要关注的 地方"],["body","\n"],["body","对于应用程序来说，用处不是很大。因为它 太低级了。应用程序需要 更高级的 更丰富的API"],["body","\n"],["body","Spring WebFlux 选用 Reactor 作为响应式框架"],["body","\n"],["headingLink","113-programming-models"],["heading","1.1.3. Programming Models"],["body","\n"],["body","spring-web 模块 包含了响应式基础模块，是构建 Spring WebFlux 的基础。包括 "],["body","\n\n"],["body","HTTP abstractions"],["body","\n"],["body","Reactive Streams adapters for supported servers"],["body","\n"],["body","codecs"],["body","\n"],["body","a core WebHandler API comparable to the Servlet API but with non-blocking contracts"],["body","\n\n"],["body","在上述基础之上，提供两种基础模型"],["body","\n\n"],["body","Annotated Controllers: 和Spring-web模块中的 注解一致，SpringMVC 跟 WebFlux 控制器 支持 响应式的 返回值类型（Reactor and RxJava），因此也难以将两者分开，一个显著的区别是：WebFlux 支持 reactive @RequestBody  参数"],["body","\n"],["body","Functional Endpoints: 基于Lambda、轻量级、函数式编程模型，与基于注解的最大区别是：应用程序 负责从头到尾 的请求处理"],["body","\n\n"],["headingLink","114-applicability"],["heading","1.1.4. Applicability"],["body","\n"],["body","Spring MVC or WebFlux?"],["body","\n"],["body","两者协同工作，互补"],["body","\n"],["body","\n"],["body","要使用 MVC或者 WebFlux，请考虑以下几点"],["body","\n\n"],["body","\n"],["body","正在使用MVC、且工作得很好，不用换"],["body","\n"],["body","\n"],["body","\n"],["body","如果你在对 非阻塞的 响应式web栈 进行技术选型"],["body","\n\n"],["body","SpringWebFlux提供 servers可选（Netty, Tomcat, Jetty, Undertow, and Servlet 3.1+ containers）"],["body","\n"],["body","提供编程模式 可选（基于注解的、基于函数式）"],["body","\n"],["body","提供 响应式库 可选(Reactor, RxJava, or other)"],["body","\n\n"],["body","\n"],["body","\n"],["body","检查应用程序的依赖：如果有 使用 阻塞式的API（JPA、JDBC）或者网络APIs，最好使用 SpringMVC，从技术上讲，Reactor在单独的线程执行 阻塞调用 是可行的，但没有充分利用非阻塞"],["body","\n"],["body","\n"],["body","\n"],["body","建议先尝试使用 WebClient"],["body","\n"],["body","\n\n"],["headingLink","115-servers"],["heading","1.1.5. Servers"],["body","\n"],["body","支持servers"],["body","\n"],["body","Spring WebFlux 支持 Tomcat、jetty，Servlet3.1+ 容器，同样非Servlet运行环境例如 Netty、Undertow"],["body","\n"],["body","所有servers 适配于 低级common API ，这样 高级 programming models  能够 跨 serves使用"],["body","\n"],["body","启停"],["body","\n"],["body","Spring WebFlux 没有对 启停服务 提供内置支持 但是很容器 从 Spring配置 和 WebFlux infrastructure   中 使用少量代码组装 并运行"],["body","\n"],["body","Spring Boot has a WebFlux starter  自动完成这些步骤"],["body","\n"],["body","对Servlet3.1的依赖"],["body","\n"],["body","Spring MVC 依赖于 Servlet阻塞API  可以让应用程序  直接使用 ServletAPI"],["body","\n"],["body","Spring WebFlux 依赖 Servlet3.1 非阻塞IO ，在一个较低级别的 适配器中 使用的，不能让应用程序直接使用"],["body","\n"],["headingLink","116-performance"],["heading","1.1.6. Performance"],["body","\n"],["body","性能有许多方面，Reactive 和非阻塞 不会 让应用程序运行更快，反而需要更多的工作，略微提供了处理事件。"],["body","\n"],["body","核心的 收益是 ：以较少的线程和更低的内存 去缩放，使得应用程序在负载下更具弹性"],["body","\n"],["headingLink","117-configuring"],["heading","1.1.7. Configuring"],["body","\n"],["body","The Spring Framework does not provide support for starting and stopping servers. "],["body","\n"],["body","Spring不提供 servers的启停，配置一个 server的 线程模型你需要 使用 特定server的 配置API或者使用SpringBoot"],["body","\n"],["body","检查SpringBoot的每个server的 配置选项"],["body","\n"],["body","可以直接配置 WebClient"],["body","\n"],["h1","Spring经典问题"],["body","\n"],["headingLink","springboot是如何判断-webflux还是-webmvc还是其他"],["heading","springBoot是如何判断 webflux还是 webMVC，还是其他"],["body","\n"],["headingLink","从-classpath-判断"],["heading","从 classPath 判断"],["body","\n\n"],["body","org.springframework.web.reactive.DispatcherHandler 对应 webflux的核心类"],["body","\n"],["body","org.springframework.web.servlet.DispatcherServlet webMVC的核心类"],["body","\n"],["body","org.glassfish.jersey.servlet.ServletContainer jersey的核心类"],["body","\n\n"],["headingLink","如果三个都存在"],["heading","如果三个都存在"],["body","\n\n"],["body","则判断 javax.servlet.Servlet org.springframework.web.context.ConfigurableWebApplicationContext 是否存在类路径"],["body","\n"],["body","都存在则 使用 SERVLET "],["body","\n\n"],["body","//org.springframework.boot.WebApplicationType#deduceFromClasspath\n    static WebApplicationType deduceFromClasspath() {\n\t\tif (ClassUtils.isPresent(WEBFLUX_INDICATOR_CLASS, null) && !ClassUtils.isPresent(WEBMVC_INDICATOR_CLASS, null)\n\t\t\t\t&& !ClassUtils.isPresent(JERSEY_INDICATOR_CLASS, null)) {\n\t\t\treturn WebApplicationType.REACTIVE;\n\t\t}\n\t\tfor (String className : SERVLET_INDICATOR_CLASSES) {\n\t\t\tif (!ClassUtils.isPresent(className, null)) {\n\t\t\t\treturn WebApplicationType.NONE;\n\t\t\t}\n\t\t}\n\t\treturn WebApplicationType.SERVLET;\n\t}\n"],["body","\n"],["headingLink","根据-不同的-webapplicationtype-创建不同的-springcontext"],["heading","根据 不同的 WebApplicationType 创建不同的 SpringContext"],["body","\n"],["body","//org.springframework.boot.ApplicationContextFactory\nApplicationContextFactory DEFAULT = (webApplicationType) -> {\n   try {\n      switch (webApplicationType) {\n      case SERVLET:\n         return new AnnotationConfigServletWebServerApplicationContext();\n      case REACTIVE:\n         return new AnnotationConfigReactiveWebServerApplicationContext();\n      default:\n         return new AnnotationConfigApplicationContext();\n      }\n   }\n   catch (Exception ex) {\n      throw new IllegalStateException(\"Unable create a default ApplicationContext instance, \"\n            + \"you may need a custom ApplicationContextFactory\", ex);\n   }\n};\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/基于AQS的同步工具/ReentrantReadWriteLock.html"],["title","ReentrantReadWriteLock.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概述"],["body","\n"],["body","简介"],["body","\n\n"],["body","ReentrantReadWriteLock是Lock的另一种实现方式，ReentrantLock是一个可重入的排他锁，同一时间只允许一个线程访问"],["body","\n"],["body","而ReentrantReadWriteLock允许多个读线程同时访问，但不允许写线程和读线程、写线程和写线程同时访问。相对于排他锁，提高了并发性。"],["body","\n"],["body","在实际应用中，大部分情况下对共享数据（如缓存）的访问都是读操作远多于写操作，这时ReentrantReadWriteLock能够提供比排他锁更好的并发性和吞吐量。"],["body","\n"],["body","读写锁内部维护了两个锁，一个用于读操作，一个用于写操作。所有 ReadWriteLock实现都必须保证 writeLock操作的内存同步效果也要保持与相关 readLock的联系。也就是说，成功获取读锁的线程会看到写入锁之前版本所做的所有更新。"],["body","\n\n"],["body","　　"],["body","\n"],["body","ReentrantReadWriteLock锁功能"],["body","\n\n"],["body","支持公平和非公平的获取锁的方式；"],["body","\n"],["body","支持可重入。读线程在获取了读锁后还可以获取读锁；写线程在获取了写锁之后既可以再次获取写锁又可以获取读锁；"],["body","\n"],["body","还允许从写入锁降级为读取锁，其实现方式是：先获取写入锁，然后获取读取锁，最后释放写入锁。但是，从读取锁升级到写入锁是不允许的；"],["body","\n"],["body","读取锁和写入锁都支持锁获取期间的中断；"],["body","\n"],["body","Condition支持。仅写入锁提供了一个 Conditon 实现；读取锁不支持 Conditon ，readLock().newCondition() 会抛出 UnsupportedOperationException。 "],["body","\n\n"],["h1","实现原理"],["body","\n"],["body","​\t\tReentrantReadWriteLock 也是基于AQS实现的，它的自定义同步器（继承AQS）需要在同步状态（一个整型变量state）上维护多个读线程和一个写线程的状态，读写锁将变量切分成了两个部分，高16位表示读，低16位表示写。"],["body","\n"],["body","\n"],["headingLink","写锁的获取与释放writelock"],["heading","写锁的获取与释放（WriteLock）"],["body","\n"],["headingLink","获取写锁"],["heading","获取写锁"],["body","\n\n"],["body","如果存在读锁 则 返回失败"],["body","\n"],["body","如果存在 写锁 且不为当前线程所拥有，则返回失败"],["body","\n"],["body","如果存在 写锁  且为当前线程 且没有超过 极值，则加锁成功"],["body","\n"],["body","如果读写锁都不存在\n\n"],["body","如果是公平锁则 进入队列等待"],["body","\n"],["body","如果是非公平锁，则先尝试获取 锁，然后进入队列等待"],["body","\n\n"],["body","\n\n"],["body","//获取写锁\npublic void lock() {\n    sync.acquire(1);\n}\n\n//AQS实现的独占式获取同步状态方法\npublic final void acquire(int arg) {\n    if (!tryAcquire(arg) &&\n        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n        selfInterrupt();\n}\n\n//自定义重写的tryAcquire方法\nprotected final boolean tryAcquire(int acquires) {\n    Thread current = Thread.currentThread();\n    int c = getState();\n    int w = exclusiveCount(c);    //取同步状态state的低16位，写同步状态\n    if (c != 0) {\n        // (Note: if c != 0 and w == 0 then shared count != 0)\n        //存在读锁或当前线程不是已获取写锁的线程，返回false\n        if (w == 0 || current != getExclusiveOwnerThread())\n            return false;\n\t\t//说明当前线程获取了写锁，判断可重入次数（最大次数65535）\n        if (w + exclusiveCount(acquires) > MAX_COUNT)    //\n            throw new Error(\"Maximum lock count exceeded\");\n        // Reentrant acquire\n        setState(c + acquires);\n        return true;\n    }\n    //此时c=0,读锁和写锁都没有被获取\n    if (writerShouldBlock() ||\n        !compareAndSetState(c, c + acquires))\n        return false;\n    setExclusiveOwnerThread(current);\n    return true;\n}\n"],["body","\n"],["headingLink","释放写锁"],["heading","释放写锁"],["body","\n"],["body","\n"],["body","支持可重入的释放"],["body","\n"],["body","\n"],["body","//写锁释放\npublic void unlock() {\n    sync.release(1);\n}\n\n//AQS提供独占式释放同步状态的方法\npublic final boolean release(int arg) {\n    if (tryRelease(arg)) {\n        Node h = head;\n        if (h != null && h.waitStatus != 0)\n            unparkSuccessor(h);\n        return true;\n    }\n    return false;\n}\n\n//自定义重写的tryRelease方法\nprotected final boolean tryRelease(int releases) {\n    if (!isHeldExclusively())\n        throw new IllegalMonitorStateException();\n    int nextc = getState() - releases;    //同步状态减去releases\n    //判断同步状态的低16位（写同步状态）是否为0，如果为0则返回true，否则返回false.\n    //因为支持可重入\n    boolean free = exclusiveCount(nextc) == 0;\n    if (free)\n        setExclusiveOwnerThread(null);\n    setState(nextc);    //以获取写锁，不需要其他同步措施，是线程安全的\n    return free;\n}\n"],["body","\n"],["headingLink","读锁的获取与释放"],["heading","读锁的获取与释放"],["body","\n"],["headingLink","获取读锁"],["heading","获取读锁"],["body","\n\n"],["body","如果有写锁在且当前线程没有拥有锁  则 返回失败"],["body","\n"],["body","如果是 非公平锁 则判断下一个排队的是否为写锁，如果不是 则 直接 尝试 CAS获取一个读锁。"],["body","\n\n"],["body","public void lock() {\n    sync.acquireShared(1);\n}\n\n//使用AQS提供的共享式获取同步状态的方法\npublic final void acquireShared(int arg) {\n    if (tryAcquireShared(arg) < 0)\n        doAcquireShared(arg);\n}\n\n//自定义重写的tryAcquireShared方法，参数是unused，因为读锁的重入计数是内部维护的\nprotected final int tryAcquireShared(int unused) {\n    /*\n             * Walkthrough:\n             * 1. If write lock held by another thread, fail.\n             * 2. Otherwise, this thread is eligible for\n             *    lock wrt state, so ask if it should block\n             *    because of queue policy. If not, try\n             *    to grant by CASing state and updating count.\n             *    Note that step does not check for reentrant\n             *    acquires, which is postponed to full version\n             *    to avoid having to check hold count in\n             *    the more typical non-reentrant case.\n             * 3. If step 2 fails either because thread\n             *    apparently not eligible or CAS fails or count\n             *    saturated, chain to version with full retry loop.\n             */\n    Thread current = Thread.currentThread();\n    int c = getState();\n    if (exclusiveCount(c) != 0 &&\n        getExclusiveOwnerThread() != current)\n        return -1;\n    int r = sharedCount(c);\n    if (!readerShouldBlock() &&\n        r < MAX_COUNT &&\n        compareAndSetState(c, c + SHARED_UNIT)) {\n        if (r == 0) { //缓存第一个获取读锁的线程\n            firstReader = current;\n            firstReaderHoldCount = 1;\n        } else if (firstReader == current) { //可重入获取第一个读锁计数\n            firstReaderHoldCount++;\n        } else { //不是第一个获取读锁的线程\n            HoldCounter rh = cachedHoldCounter; //当前线程缓存的 holdCounter,每个线程一个\n            if (rh == null || rh.tid != getThreadId(current))\n                cachedHoldCounter = rh = readHolds.get();\n            else if (rh.count == 0) // 当前线程 获取读锁->释放读锁->获取读锁，这个过程没有第三方线程获取读锁，这种情况需要重新设置 ThreadLocal\n                readHolds.set(rh);\n            rh.count++;\n        }\n        return 1;\n    }\n    \n     //第一次获取读锁失败，有两种情况：\n\t\t//1）没有写锁被占用时，尝试通过一次CAS去获取锁时，更新失败（说明有其他读锁在申请）\n\t\t//2）（非公平锁的逻辑）当前线程占有写锁，并且有其他写锁在当前线程的下一个节点等待获取写锁，除非当前线程的下一个节点被取消，否则fullTryAcquireShared也获取不到读锁\n    return fullTryAcquireShared(current);\n}\n"],["body","\n"],["body","**公平与非公平 readerShouldBlock()逻辑"],["body","\n"],["body","//FairSync中需要判断是否有前驱节点，如果有则返回false，否则返回true。遵循FIFO\nfinal boolean readerShouldBlock() {\n    return hasQueuedPredecessors();\n}\n//unfair\nfinal boolean readerShouldBlock() {\n    return apparentlyFirstQueuedIsExclusive();\n}\n//当head节点不为null且head节点的下一个节点s不为null且s是独占模式（写线程）且s的线程不为null时，返回true。\n//目的是不应该让写锁始终等待。作为一个启发式方法用于避免可能的写线程饥饿，这只是一种概率性的作用，因为如果有一个等待的写线程在其他尚未从队列中出队的读线程后面等待，那么新的读线程将不会被阻塞。\nfinal boolean apparentlyFirstQueuedIsExclusive() {\n    Node h, s;\n    return (h = head) != null &&\n        (s = h.next)  != null &&\n        !s.isShared()         &&\n        s.thread != null;\n}\n//头节点的 下一个不是当前线程，则继续阻塞\n public final boolean hasQueuedPredecessors() {\n        // The correctness of this depends on head being initialized\n        // before tail and on head.next being accurate if the current\n        // thread is first in queue.\n        Node t = tail; // Read fields in reverse initialization order\n        Node h = head;\n        Node s;\n        return h != t &&\n            ((s = h.next) == null || s.thread != Thread.currentThread());\n    }\n"],["body","\n"],["body","第一次获取失败，尝试完整版本的自旋获取锁"],["body","\n"],["body","       final int fullTryAcquireShared(Thread current) {\n            /*\n             * This code is in part redundant with that in\n             * tryAcquireShared but is simpler overall by not\n             * complicating tryAcquireShared with interactions between\n             * retries and lazily reading hold counts.\n             */\n            HoldCounter rh = null;\n            for (;;) {\n                int c = getState();\n                if (exclusiveCount(c) != 0) { //如果当前线程不是写锁的持有者，直接返回-1，结束尝试获取读锁，需要排队去申请读锁\n                    if (getExclusiveOwnerThread() != current) //且不是当前线程，则返回\n                        return -1;\n                    // else we hold the exclusive lock; blocking here\n                    // would cause deadlock.\n                \t} else if (readerShouldBlock()) { //如果当前线程持有写锁，而且还有其他线程已经排队在申请写锁，故，即使申请读锁的线程已经持有写锁（写锁内部再次申请读锁，俗称锁降级）还是会失败，因为有其他线程也在申请写锁，此时，只能结束本次申请读锁的请求，转而去排队。\n                    // Make sure we're not acquiring read lock reentrantly\n                    if (firstReader == current) { \n                        // 当前线程已持有写锁，且有其他线程在申请写锁，且当前线程已获取过读锁，则可以继续获取读锁\n                        // assert firstReaderHoldCount > 0;\n                    } else {\n                        // 当前线程已持有写锁，且有其他线程在申请写锁，且当前线程未获取读锁，则返回阻塞\n                        if (rh == null) {\n                            rh = cachedHoldCounter;\n                            if (rh == null || rh.tid != getThreadId(current)) {\n                                rh = readHolds.get();\n                                if (rh.count == 0)\n                                    readHolds.remove();  \n                            }\n                        }\n                        if (rh.count == 0)\n                            return -1;\n                    }\n                }\n                //共享锁最大值判定\n                if (sharedCount(c) == MAX_COUNT)\n                    throw new Error(\"Maximum lock count exceeded\");\n                //尝试获取一个读锁,获取失败 则继续\n                if (compareAndSetState(c, c + SHARED_UNIT)) {\n                    //第一次使用 firstReader，firstReaderHoldCount\n                    if (sharedCount(c) == 0) {\n                        firstReader = current;\n                        firstReaderHoldCount = 1;\n                    } else if (firstReader == current) {\n                        firstReaderHoldCount++;\n                    } else {\n                        //其他线程使用 ThreadLocal\n                        if (rh == null)\n                            rh = cachedHoldCounter;\n                        if (rh == null || rh.tid != getThreadId(current))\n                            rh = readHolds.get();\n                        else if (rh.count == 0)\n                            readHolds.set(rh);\n                        rh.count++;\n                        cachedHoldCounter = rh; // cache for release\n                    }\n                    return 1;\n                }\n            }\n        }\n"],["body","\n"],["headingLink","释放写锁-1"],["heading","释放写锁"],["body","\n"],["body","        protected final boolean tryReleaseShared(int unused) {\n            //第一个获取读锁 更新 重入计数\n            Thread current = Thread.currentThread();\n            if (firstReader == current) {\n                // assert firstReaderHoldCount > 0;\n                if (firstReaderHoldCount == 1)\n                    firstReader = null;\n                else\n                    firstReaderHoldCount--;\n            } else {\n                //否则 从 ThreadLocal 中 取 HoldCount\n                HoldCounter rh = cachedHoldCounter;\n                if (rh == null || rh.tid != getThreadId(current))\n                    rh = readHolds.get();\n                int count = rh.count;\n                if (count <= 1) {\n                    readHolds.remove();\n                    if (count <= 0)\n                        throw unmatchedUnlockException();\n                }\n                --rh.count;\n            }\n            \n            //更新状态，为0 返回true，表示全部读锁释放完毕\n            for (;;) {\n                int c = getState();\n                int nextc = c - SHARED_UNIT;\n                if (compareAndSetState(c, nextc))\n                    // Releasing the read lock has no effect on readers,\n                    // but it may allow waiting writers to proceed if\n                    // both read and write locks are now free.\n                    return nextc == 0;\n            }\n        }\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/基于AQS的同步工具/Lock锁接口.html"],["title","Lock锁接口.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","介绍"],["body","\n\n"],["body","\n"],["body","与使用 synchronized 方法和语句相比，锁实现提供了更扩展的锁操作。"],["body","\n"],["body","\n"],["body","\n"],["body","锁是 在多线程环境中，对共享资源 的访问控制"],["body","\n"],["body","\n"],["body","\n"],["body","尽管 synchronized关键字提供的 作用域使得编程更为简单，但有时候需要更为 弹性的方式使用锁 例如 链式锁"],["body","\n"],["body","\n\n"],["body","获取 nodeA的锁，获取nodeB的锁，然后释放A，\n获取C的锁，释放B，获取D的锁\n"],["body","\n\n"],["body","灵活性的提高带来了额外的工作量，例如不会 像 synchronized 自动释放锁"],["body","\n\n"],["body","锁实现提供了 比 synchronized 更多的功能"],["body","\n\n"],["body","非阻塞获取锁 tryLock()"],["body","\n"],["body","可中断的方式获取锁 lockInterruptibly ，tryLock(long, TimeUnit)"],["body","\n"],["body","非可重入"],["body","\n"],["body","死锁检测"],["body","\n"],["body","公平与公平"],["body","\n\n"],["body","内存同步语义"],["body","\n"],["body","所有Lock实现都必须强制执行与内置监视器锁相同的内存同步语义"],["body","\n"],["body","三种获取锁的形式（可中断，不可中断，超时）根据 不同的实现而不同"],["body","\n"],["body","实现需要清楚地记录每个锁定方法提供的语义和保证。"],["body","\n"],["h1","Lock接口方法"],["body","\n"],["headingLink","lock"],["heading","LOCK"],["body","\n"],["body","签名"],["body","\n"],["body","void lock();\n"],["body","\n\n"],["body","获取锁，如果锁不可用，则当前线程进入休眠状态，不会被CPU进行线程调度"],["body","\n"],["body","子类实现 要求 能够进行 错误检测，例如死锁，错误检测需要 标识出文档"],["body","\n\n"],["headingLink","trylock"],["heading","TryLock"],["body","\n"],["body","签名"],["body","\n"],["body","boolean tryLock();\n"],["body","\n\n"],["body","当锁可用时 上锁，并返回True"],["body","\n"],["body","当锁不可用时，返回false"],["body","\n\n"],["body","用法"],["body","\n"],["body"," Lock lock = ...;\n if (lock.tryLock()) {\n   try {\n     // manipulate protected state\n   } finally {\n     lock.unlock();\n   }\n } else {\n   // perform alternative actions\n }\n"],["body","\n"],["headingLink","timed-trylock"],["heading","Timed TryLock"],["body","\n"],["body","签名"],["body","\n"],["body","boolean tryLock(long time, TimeUnit unit) throws InterruptedException;\n"],["body","\n\n"],["body","如果锁在给定的等待时间内是空闲的，并且当前线程尚未中断，则获取该锁。"],["body","\n"],["body","如果锁可用，则此方法立即返回true值。如果该锁不可用，当前线程处于休眠状态，直到发生以下三种情况之一：\n\n"],["body","当前线程获取锁，返回true"],["body","\n"],["body","其他线程中断了此线程（获取锁支持中断） 抛出 InterruptedException 并清除中断标志"],["body","\n"],["body","指定时间到了 返回false"],["body","\n\n"],["body","\n\n"],["headingLink","unlock"],["heading","Unlock"],["body","\n"],["body","签名"],["body","\n"],["body","void unlock();\n"],["body","\n"],["headingLink","condition"],["heading","Condition"],["body","\n"],["body","\n"],["body","新建与 锁实例绑定的  条件"],["body","\n"],["body","synchronized 与 wait,notify,notifyAll 的关系 等同于 Condition 与 Lock的关系"],["body","\n"],["body","\n"],["body","签名"],["body","\n"],["body","Condition newCondition();\n"],["body","\n"],["body","具体 条件类 见 Condition接口"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/基于AQS的同步工具/Condition条件等待.html"],["title","Condition条件等待.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Condition接口方法"],["body","\n"],["headingLink","介绍"],["heading","介绍"],["body","\n\n"],["body","\n"],["body","Condition 对象 将 对象监视锁方法（wait，notify，noyifyAll ） 分解成多个对象，通过与任意Lock实现结合使用，使得每个锁实例对象有多个等待集"],["body","\n"],["body","\n"],["body","\n"],["body","条件（也称为条件队列或条件变量）为一个线程挂起（“等待”），直到另一线程通知某些状态条件现在可能为真提供了一种方法。"],["body","\n"],["body","\n"],["body","\n"],["body","condition的关键特性： 它自动释放关联的锁并挂起当前线程，就像Object.wait一样。"],["body","\n"],["body","\n"],["body","\n"],["body","condition与锁实例 紧密关联，通过  newCondition 创建*Condition**"],["body","\n"],["body","\n"],["body","\n"],["body","Condition 子类实现能提供 比 对象锁方法 （ wait，notify，noyifyAll ） 更多的功能，例如 有序通知，没有必要 只能在拥有锁的情况下通知，"],["body","\n"],["body","\n"],["body","\n"],["body","不要使用 Condition对象身上的 对象锁"],["body","\n"],["body","\n\n"],["headingLink","实现注意事项"],["heading","实现注意事项"],["body","\n"],["body","\n"],["body","当条件等待时，允许 spurious wakeup情况发生，"],["body","\n"],["body","\n"],["body","实现可以自由地消除虚假唤醒的可能性，但是建议应用程序程序员始终假定它们会发生，因此总是在循环中等待。"],["body","\n"],["body","三种形式的条件等待 （interruptible, non-interruptible, and timed）应实现各异"],["body","\n"],["headingLink","举例说明"],["heading","举例说明"],["body","\n"],["body","假设我们有一个有界缓冲区，它支持put和take方法。"],["body","\n"],["body","当缓冲区为空， take方法 会阻塞"],["body","\n"],["body","当缓冲区为满，put方法会阻塞"],["body","\n"],["body","这样可以使用两个 Condition实例"],["body","\n"],["body","Code"],["body","\n"],["body","\n"],["body","该实例，将put与take 分离，分别做两个等待条件"],["body","\n"],["body","java.util.concurrent.ArrayBlockingQueue  就是如此的实现思想"],["body","\n"],["body","\n"],["body","   class BoundedBuffer {\n     final Lock lock = new ReentrantLock();\n     final Condition notFull  = lock.newCondition(); \n     final Condition notEmpty = lock.newCondition(); \n  \n     final Object[] items = new Object[100];\n     int putptr, takeptr, count;\n  \n     public void put(Object x) throws InterruptedException {\n       lock.lock();\n       try {\n         while (count == items.length)\n           notFull.await();\n         items[putptr] = x;\n         if (++putptr == items.length) putptr = 0;\n         ++count;\n         notEmpty.signal();\n       } finally {\n         lock.unlock();\n       }\n     }\n  \n     public Object take() throws InterruptedException {\n       lock.lock();\n       try {\n         while (count == 0)\n           notEmpty.await();\n         Object x = items[takeptr];\n         if (++takeptr == items.length) takeptr = 0;\n         --count;\n         notFull.signal();\n         return x;\n       } finally {\n         lock.unlock();\n       }\n     }\n   }\n"],["body","\n"],["headingLink","接口方法"],["heading","接口方法"],["body","\n"],["headingLink","await"],["heading","Await"],["body","\n"],["body","方法申明"],["body","\n"],["body","void await() throws InterruptedException;\n"],["body","\n"],["headingLink","方法语义"],["heading","方法语义"],["body","\n\n"],["body","与此条件相关联的锁被原子释放，当前线程处于休眠状态，直到发生以下四种情况之一：\n\n"],["body","其他线程 调用了 该 condition的 signal 方法，且碰巧当前线程被选中 唤醒"],["body","\n"],["body","其他线程 调用了 signalAll 方法"],["body","\n"],["body","其他线程 打断了 该线程，且 该Condition支持 中断"],["body","\n"],["body","虚假唤醒 "],["body","\n\n"],["body","\n"],["body","只有线程重新竞争到锁了，之后代码才会继续执行"],["body","\n\n"],["headingLink","同类型方法"],["heading","同类型方法"],["body","\n"],["body","不可中断等待"],["body","\n"],["body","\n"],["body","不支持中断"],["body","\n"],["body","\n"],["body","void awaitUninterruptibly();\n"],["body","\n"],["body","超时等待"],["body","\n"],["body","\n"],["body","可不可中断，看各自的实现"],["body","\n"],["body","\n"],["body","boolean awaitUntil(Date deadline) throws InterruptedException;\nboolean await(long time, TimeUnit unit) throws InterruptedException;\nlong awaitNanos(long nanosTimeout) throws InterruptedException;\n"],["body","\n"],["headingLink","signal"],["heading","Signal"],["body","\n"],["body","\n"],["body","唤醒等待在该条件的线程"],["body","\n"],["body","\n"],["body","方法申明"],["body","\n"],["body","void signal();\nvoid signalAll();\n"],["body","\n"],["body","方法语义"],["body","\n\n"],["body","唤醒原则 决定于实现"],["body","\n"],["body","唤醒一个，随机，或者公平，或者 全部唤醒"],["body","\n\n"],["h1","ConditionObject"],["body","\n"],["body","\n"],["body","唯一的 具体实现类，"],["body","\n"],["body","\n"],["headingLink","类声明"],["heading","类声明"],["body","\n"],["body","public abstract class AbstractQueuedSynchronizer\n    extends AbstractOwnableSynchronizer\n    implements java.io.Serializable {\n\t//与AQS 同步器 实例，相关联，一个AQS实例 可以 拥有 多个ConditionObject\n    public class ConditionObject implements Condition, java.io.Serializable {}\n}\n"],["body","\n"],["headingLink","条件等待"],["heading","条件等待"],["body","\n"],["headingLink","await方法"],["heading","AWAIT方法"],["body","\n\n"],["body","是将当前线程 入 条件队列，并等待唤醒，或者中断"],["body","\n"],["body","被signal 唤醒后，将其 从条件队列  移出 到 同步队列等待"],["body","\n"],["body","被中断时 也将其 从条件队列  移出 到 同步队列等待"],["body","\n"],["body","获取锁成功之后 清理 条件队列中cancelled结点"],["body","\n\n"],["body","        public final void await() throws InterruptedException {\n            //如果是中断的，则抛异常\n            if (Thread.interrupted())\n                throw new InterruptedException();\n            Node node = addConditionWaiter();//在 该条件队列 新增一个等待结点\n            int savedState = fullyRelease(node); //释放当前线程所占有的 锁资源\n            int interruptMode = 0;\n            while (!isOnSyncQueue(node)) { 判断当前 线程结点 是否在AQS同步队列\n                LockSupport.park(this);//如果不在 则阻塞\n                if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n                    //当线程被唤醒后，判断 是由于 中断唤醒的，还是 signal 唤醒的，如果是由于中断唤醒的则，将结点 从 条件队列转移到同步队列\n                    break;\n            }\n            //尝试在同步队列等待获取锁，如果被中断了，且之前未发生中断，或者 signal先发生于中断\n            if (acquireQueued(node, savedState) && interruptMode != THROW_IE)\n                interruptMode = REINTERRUPT;\n            if (node.nextWaiter != null) // clean up if cancelled ，清理cancelled结点\n                unlinkCancelledWaiters();\n            if (interruptMode != 0) //重放中断\n                reportInterruptAfterWait(interruptMode);\n        }\n"],["body","\n"],["headingLink","往条件队列尾部插入结点"],["heading","往条件队列尾部插入结点"],["body","\n"],["body","        private Node addConditionWaiter() {\n            Node t = lastWaiter;\n            // If lastWaiter is cancelled, clean out. 清理cancelled结点\n            if (t != null && t.waitStatus != Node.CONDITION) {\n                unlinkCancelledWaiters();\n                t = lastWaiter;\n            }\n            Node node = new Node(Thread.currentThread(), Node.CONDITION);\n            if (t == null)\n                firstWaiter = node;\n            else\n                t.nextWaiter = node;\n            lastWaiter = node;\n            return node;\n        }\n"],["body","\n"],["headingLink","释放当前线程持有锁"],["heading","释放当前线程持有锁"],["body","\n\n"],["body","如果释放失败，当前线程抛异常，并将结点置为 CANCELLED"],["body","\n"],["body","其他等待在该条件队列的结点 会自动清理 CANCELLED结点"],["body","\n\n"],["body","    final int fullyRelease(Node node) {\n        boolean failed = true;\n        try {\n            int savedState = getState();\n            if (release(savedState)) {\n                failed = false;\n                return savedState;\n            } else {\n                throw new IllegalMonitorStateException();\n            }\n        } finally {\n            \n            if (failed)\n                node.waitStatus = Node.CANCELLED;\n        }\n    }\n"],["body","\n"],["headingLink","判断是否在同步队列"],["heading","判断是否在同步队列"],["body","\n"],["body","在条件队列满足的情况"],["body","\n\n"],["body","状态 为 CONDITION肯定位于 条件队列"],["body","\n"],["body","prev指针为空，肯定是位于 条件队列 （同步队列CAS操作维护的是prev 指针，所以一定不可能为空）"],["body","\n"],["body","next指针 不为null 一定是在同步队列"],["body","\n"],["body","以上判断均不通过则\n\n"],["body","从尾到头 遍历结点 找到了则 在同步队列 找不到则不在"],["body","\n\n"],["body","\n\n"],["body","    final boolean isOnSyncQueue(Node node) {\n        if (node.waitStatus == Node.CONDITION || node.prev == null)\n            return false;\n        if (node.next != null) // If has successor, it must be on queue\n            return true;\n        /*\n         * node.prev can be non-null, but not yet on queue because\n         * the CAS to place it on queue can fail. So we have to\n         * traverse from tail to make sure it actually made it.  It\n         * will always be near the tail in calls to this method, and\n         * unless the CAS failed (which is unlikely), it will be\n         * there, so we hardly ever traverse much.\n         */\n        return findNodeFromTail(node);\n    }\n\n    private boolean findNodeFromTail(Node node) {\n        Node t = tail;\n        for (;;) {\n            if (t == node)\n                return true;\n            if (t == null)\n                return false;\n            t = t.prev;\n        }\n    }\n"],["body","\n"],["headingLink","唤醒判断"],["heading","唤醒判断"],["body","\n"],["body","\n"],["body","条件队列等待的结点被唤醒后，可能有两种情况，一种是被 中断唤醒，一种是 被 signal唤醒"],["body","\n"],["body","\n\n"],["body","判断是否存在中断\n\n"],["body","存在中断\n\n"],["body","如果CAS没有失败，中断前没有发生 signal 则直接入同步队列，更新 结点状态为0"],["body","\n"],["body","如果CAS失败了，则中断前发生了 signal，则等待 自旋等待 其入同步队列"],["body","\n\n"],["body","\n"],["body","不存在中断则返回0"],["body","\n\n"],["body","\n\n"],["body","private int checkInterruptWhileWaiting(Node node) {\n    return Thread.interrupted() ?\n        (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) :\n    0;\n}\n\nfinal boolean transferAfterCancelledWait(Node node) {\n    if (compareAndSetWaitStatus(node, Node.CONDITION, 0)) {\n        enq(node);\n        return true;\n    }\n    /*\n         * If we lost out to a signal(), then we can't proceed\n         * until it finishes its enq().  Cancelling during an\n         * incomplete transfer is both rare and transient, so just\n         * spin.\n         */\n    while (!isOnSyncQueue(node))\n        Thread.yield();\n    return false;\n}\n"],["body","\n"],["headingLink","条件唤醒"],["heading","条件唤醒"],["body","\n"],["body","\n"],["body","唤醒条件队列，需要持有锁，且以队列先进先出形式 唤醒."],["body","\n"],["body","\n"],["body","先进先出唤醒"],["body","\n"],["body","        public final void signal() {\n            //唤醒条件 需要持有锁\n            if (!isHeldExclusively())\n                throw new IllegalMonitorStateException();\n            Node first = firstWaiter;\n            //唤醒队列中的第一个\n            if (first != null)\n                doSignal(first);\n        }\n"],["body","\n"],["body","头节点出队列"],["body","\n"],["body","        private void doSignal(Node first) {\n        //移除头结点，并清空引用，当头结点也为空了，尾结点也置空\n            do {\n                if ( (firstWaiter = first.nextWaiter) == null)\n                    lastWaiter = null;\n                first.nextWaiter = null;\n            } while (!transferForSignal(first) &&\n                     (first = firstWaiter) != null);\n        }\n"],["body","\n"],["body","入同步队列"],["body","\n"],["body","    final boolean transferForSignal(Node node) {\n        /*\n         * If cannot change waitStatus, the node has been cancelled.如果结点被取消了。则尝试唤醒下一个结点\n         */\n        if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))\n            return false;\n\n        /*\n         * Splice onto queue and try to set waitStatus of predecessor to\n         * indicate that thread is (probably) waiting. If cancelled or\n         * attempt to set waitStatus fails, wake up to resync (in which\n         * case the waitStatus can be transiently and harmlessly wrong).\n         */\n        Node p = enq(node);\n        int ws = p.waitStatus;\n        if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))\n            LockSupport.unpark(node.thread);\n        return true;\n    }\n"],["body","\n"],["body","总结"],["body","\n\n"],["body","首先发信号需要持有锁"],["body","\n"],["body","先唤醒 条件队列中的第一个，如果已取消则顺延到下一个"],["body","\n"],["body","然后入同步队列，并尝试修改 前驱的 状态为 SIGNAL，修改失败可能是由于 线程中断，超时，取消等原因"],["body","\n"],["body","修改失败，则唤醒 当前结点 同步前驱引用"],["body","\n\n"],["headingLink","唤醒全部"],["heading","唤醒全部"],["body","\n"],["body","循环遍历 条件队列中的每一个 结点调用 上述 唤醒逻辑"],["body","\n"],["headingLink","不可中断等待"],["heading","不可中断等待"],["body","\n\n"],["body","新增结点"],["body","\n"],["body","释放锁"],["body","\n"],["body","如果不在同步队列则 阻塞"],["body","\n"],["body","如果 中途被中断了 则记录中断状态"],["body","\n"],["body","后续被唤醒后 重放中断"],["body","\n\n"],["body","public final void awaitUninterruptibly() {\n    Node node = addConditionWaiter();\n    int savedState = fullyRelease(node);\n    boolean interrupted = false;\n    while (!isOnSyncQueue(node)) {\n        LockSupport.park(this);\n        if (Thread.interrupted())\n            interrupted = true;\n    }\n    if (acquireQueued(node, savedState) || interrupted)\n        selfInterrupt();\n}\n"],["body","\n"],["headingLink","超时等待"],["heading","超时等待"],["body","\n\n"],["body","新增结点"],["body","\n"],["body","释放锁"],["body","\n"],["body","如果不在同步队列则 阻塞指定纳秒，（当小于1000NS，则应该自旋比阻塞更快）"],["body","\n"],["body","如果中间存在中断则 响应中断"],["body","\n"],["body","如果 时间到期了，则入同步队列"],["body","\n\n"],["body","public final long awaitNanos(long nanosTimeout)\n    throws InterruptedException {\n    if (Thread.interrupted())\n        throw new InterruptedException();\n    Node node = addConditionWaiter();\n    int savedState = fullyRelease(node);\n    final long deadline = System.nanoTime() + nanosTimeout;\n    int interruptMode = 0;\n    while (!isOnSyncQueue(node)) {\n        if (nanosTimeout <= 0L) {\n            transferAfterCancelledWait(node);\n            break;\n        }\n        if (nanosTimeout >= spinForTimeoutThreshold)\n            LockSupport.parkNanos(this, nanosTimeout);\n        if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)\n            break;\n        nanosTimeout = deadline - System.nanoTime();\n    }\n    if (acquireQueued(node, savedState) && interruptMode != THROW_IE)\n        interruptMode = REINTERRUPT;\n    if (node.nextWaiter != null)\n        unlinkCancelledWaiters();\n    if (interruptMode != 0)\n        reportInterruptAfterWait(interruptMode);\n    return deadline - System.nanoTime();\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/基于AQS的同步工具/StampedLock.html"],["title","StampedLock.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","介绍"],["body","\n\n"],["body","\n"],["body","StampedLock类，在JDK1.8时引入，是对读写锁ReentrantReadWriteLock的增强，该类提供了一些功能，优化了读锁、写锁的访问，同时使读写锁之间可以互相转换，更细粒度控制并发。"],["body","\n"],["body","\n"],["body","\n"],["body","ReentrantReadWriteLock使得多个读线程同时持有读锁（只要写锁未被占用），而写锁是独占的。但是，读写锁如果使用不当，很容易产生“饥饿”问题："],["body","\n"],["body","比如在读线程非常多，写线程很少的情况下，很容易导致写线程“饥饿”，虽然使用“公平”策略可以一定程度上缓解这个问题，但是“公平”策略是以牺牲系统吞吐量为代价的。"],["body","\n"],["body","\n"],["body","\n"],["body","try系列获取锁的函数，当获取锁失败后会返回为0的stamp值。当调用释放锁和转换锁的方法时候需要传入获取锁时候返回的stamp值。"],["body","\n"],["body","\n\n"],["h1","使用示例"],["body","\n"],["body","class Point {\n    private double x, y;\n    private final StampedLock sl = new StampedLock();\n\n    void move(double deltaX, double deltaY) {\n        long stamp = sl.writeLock();    //涉及对共享资源的修改，使用写锁-独占操作\n        try {\n            x += deltaX;\n            y += deltaY;\n        } finally {\n            sl.unlockWrite(stamp);\n        }\n    }\n\n    /**\n     * 使用乐观读锁访问共享资源\n     * 注意：乐观读锁在保证数据一致性上需要拷贝一份要操作的变量到方法栈，并且在操作数据时候可能其他写线程已经修改了数据，\n     * 而我们操作的是方法栈里面的数据，也就是一个快照，所以最多返回的不是最新的数据，但是一致性还是得到保障的。\n     *\n     * @return\n     */\n    double distanceFromOrigin() {\n        long stamp = sl.tryOptimisticRead();    // 使用乐观读锁\n        double currentX = x, currentY = y;      // 拷贝共享资源到本地方法栈中\n        if (!sl.validate(stamp)) {              // 如果有写锁被占用，可能造成数据不一致，所以要切换到普通读锁模式\n            stamp = sl.readLock();             \n            try {\n                currentX = x;\n                currentY = y;\n            } finally {\n                sl.unlockRead(stamp);\n            }\n        }\n        return Math.sqrt(currentX * currentX + currentY * currentY);\n    }\n\n    void moveIfAtOrigin(double newX, double newY) { // upgrade\n        // Could instead start with optimistic, not read mode\n        long stamp = sl.readLock();\n        try {\n            while (x == 0.0 && y == 0.0) {\n                long ws = sl.tryConvertToWriteLock(stamp);  //读锁转换为写锁\n                if (ws != 0L) {\n                    stamp = ws;\n                    x = newX;\n                    y = newY;\n                    break;\n                } else {\n                    sl.unlockRead(stamp);\n                    stamp = sl.writeLock();\n                }\n            }\n        } finally {\n            sl.unlock(stamp);\n        }\n    }\n}\n"],["body","\n"],["h1","使用乐观锁 遵循的模式"],["body","\n"],["body","long stamp = lock.tryOptimisticRead();  // 非阻塞获取版本信息\ncopyVaraibale2ThreadMemory();           // 拷贝变量到线程本地堆栈\nif(!lock.validate(stamp)){              // 校验\n    long stamp = lock.readLock();       // 获取读锁\n    try {\n        copyVaraibale2ThreadMemory();   // 拷贝变量到线程本地堆栈\n     } finally {\n       lock.unlock(stamp);              // 释放悲观锁\n    }\n\n}\nuseThreadMemoryVarables();              // 使用线程本地堆栈里面的数据进行操作\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/基于AQS的同步工具/AQS.html"],["title","AQS.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","AQS框架"],["body","\n"],["headingLink","aqs数据结构图"],["heading","AQS数据结构图"],["body","\n"],["body","\n"],["body","它维护了一个volatile int state（代表共享资源）和一个FIFO线程等待队列（多线程争用资源被阻塞时会进入此队列）。"],["body","\n"],["headingLink","资源访问的两种方式"],["heading","资源访问的两种方式"],["body","\n"],["body","AQS定义两种资源共享方式："],["body","\n\n"],["body","\n"],["body","Exclusive（独占，只有一个线程能执行，如ReentrantLock）和"],["body","\n"],["body","\n"],["body","\n"],["body","Share（共享，多个线程可同时执行，如Semaphore/CountDownLatch）。"],["body","\n"],["body","\n\n"],["body","自定义同步器实现"],["body","\n"],["body","\n"],["body","不同的自定义同步器争用共享资源的方式也不同。自定义同步器在实现时只需要实现共享资源state的获取与释放方式即可, 至于具体线程等待队列的维护（ 如获取资源失败入队/唤醒出队等），AQS已经在顶层实现好了。自定义同步器实现时主要实现以下几种方法："],["body","\n"],["body","\n\n"],["body","isHeldExclusively()：该线程是否正在独占资源。只有用到condition才需要去实现它。"],["body","\n"],["body","tryAcquire(int)：独占方式。尝试获取资源，成功则返回true，失败则返回false。"],["body","\n"],["body","tryRelease(int)：独占方式。尝试释放资源，成功则返回true，失败则返回false。"],["body","\n"],["body","tryAcquireShared(int)：共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。"],["body","\n"],["body","tryReleaseShared(int)：共享方式。尝试释放资源，如果释放后允许唤醒后续等待结点返回true，否则返回false。"],["body","\n\n"],["body","一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现tryAcquire-tryRelease、tryAcquireShared-tryReleaseShared中的一种即可。但AQS也支持自定义同步器同时实现独占和共享两种方式，如ReentrantReadWriteLock。"],["body","\n"],["body","示例"],["body","\n"],["body","ReentrantLock"],["body","\n"],["body","state初始化为0，表示未锁定状态。A线程lock()时，会调用tryAcquire()独占该锁并将state+1。此后，其他线程再tryAcquire()时就会失败，直到A线程unlock()到state=0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A线程自己是可以重复获取此锁的（state会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证state是能回到零态的。\n"],["body","\n"],["body","CountDownLatch\t"],["body","\n"],["body","任务分为N个子线程去执行，state也初始化为N（注意N要与线程个数一致）。这N个子线程是并行执行的，每个子线程执行完后countDown()一次，state会CAS减1。等到所有子线程都执行完后(即state=0)，会unpark()主调用线程，然后主调用线程就会从await()函数返回，继续后余动作。\n"],["body","\n"],["h1","源码解析"],["body","\n"],["headingLink","结点状态"],["heading","结点状态"],["body","\n"],["body","\n"],["body","Node结点是对每一个等待获取资源的线程的封装，其包含了需要同步的线程本身及其等待状态，如是否被阻塞、是否等待唤醒、是否已经被取消等。"],["body","\n"],["body","\n"],["body","变量 waitStatus 则表示当前Node结点的等待状态，共有5种取值CANCELLED、SIGNAL、CONDITION、PROPAGATE、0。"],["body","\n\n"],["body","CANCELLED(1)：表示当前结点已取消调度。当timeout或被中断（响应中断的情况下），会触发变更为此状态，进入该状态后的结点将不会再变化。"],["body","\n"],["body","SIGNAL(-1)：表示后继结点在等待当前结点唤醒。后继结点入队时，会将前继结点的状态更新为SIGNAL。"],["body","\n"],["body","CONDITION(-2)：表示结点等待在Condition上，当其他线程调用了Condition的signal()方法后，CONDITION状态的结点将从等待队列转移到同步队列中，等待获取同步锁。"],["body","\n"],["body","PROPAGATE(-3)：共享模式下，前继结点不仅会唤醒其后继结点，同时也可能会唤醒后继的后继结点。"],["body","\n"],["body","0：新结点入队时的默认状态。"],["body","\n\n"],["body","注意，负值表示结点处于有效等待状态，而正值表示结点已被取消。所以源码中很多地方用>0、<0来判断结点的状态是否正常。"],["body","\n"],["headingLink","获取独占锁入口"],["heading","获取独占锁入口"],["body","\n"],["headingLink","方法体"],["heading","方法体"],["body","\n"],["body","\n"],["body","acquire 方法是在独占模式下线程获取共享资源的顶层入口。如果获取到资源，线程直接返回，否则进入等待队列，直到获取到资源为止，且整个过程忽略中断的影响。这也正是lock()的语义，当然不仅仅只限于lock()。获取到资源后，线程就可以去执行其临界区代码了。下面是acquire()的源码："],["body","\n"],["body","\n"],["body","    public final void acquire(int arg) {\n        if (!tryAcquire(arg) &&\n            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))\n            selfInterrupt();\n    }\n"],["body","\n"],["body","函数流程如下："],["body","\n\n"],["body","tryAcquire() 尝试直接去获取资源，如果成功则直接返回（这里体现了非公平锁，每个线程获取锁时会尝试直接抢占加塞一次，而CLH队列中可能还有别的线程在等待）；"],["body","\n"],["body","addWaiter() 将该线程加入等待队列的尾部，并标记为独占模式；"],["body","\n"],["body","acquireQueued() 使线程阻塞在等待队列中获取资源，一直获取到资源后才返回。如果在整个等待过程中被中断过，则返回true，否则返回false。"],["body","\n"],["body","如果线程在等待过程中被中断过，它是不响应的。只是获取资源后才再进行自我中断selfInterrupt()，将中断补上。"],["body","\n\n"],["headingLink","tryacquireint"],["heading","tryAcquire(int)"],["body","\n\n"],["body","\n"],["body","此方法尝试去获取独占资源。如果获取成功，则直接返回true，否则直接返回false"],["body","\n"],["body","\n"],["body","\n"],["body","具体资源的获取交由自定义同步器去实现了（通过state的get/set/CAS）至于能不能重入，能不能加塞，交由实现决定"],["body","\n"],["body","\n"],["body","\n"],["body","之所以没有定义成abstract，是因为独占模式下只用实现tryAcquire-tryRelease，而共享模式下只用实现tryAcquireShared-tryReleaseShared"],["body","\n"],["body","\n\n"],["headingLink","addwaiternode"],["heading","addWaiter(Node)"],["body","\n"],["body","\n"],["body","此方法用于将当前线程加入到等待队列的队尾，并返回当前线程所在的结点"],["body","\n"],["body","\n"],["body","private Node addWaiter(Node mode) {\n    //以给定模式构造结点。mode有两种：EXCLUSIVE（独占）和SHARED（共享）\n    Node node = new Node(Thread.currentThread(), mode);\n\n    //尝试快速方式直接放到队尾。\n    Node pred = tail;\n    if (pred != null) {\n        node.prev = pred;\n        if (compareAndSetTail(pred, node)) {\n            pred.next = node;\n            return node;\n        }\n    }\n\n    //上一步失败则通过enq入队。\n    enq(node);\n    return node;\n}\n//循环取 tail，设置值\n    private Node enq(final Node node) {\n        for (;;) {\n            Node t = tail;\n            if (t == null) { // Must initialize\n                if (compareAndSetHead(new Node()))\n                    tail = head;\n            } else {\n                node.prev = t;\n                if (compareAndSetTail(t, node)) {\n                    t.next = node;\n                    return t;\n                }\n            }\n        }\n    }\n"],["body","\n"],["headingLink","acquirequeuednode-int"],["heading","acquireQueued(Node, int)"],["body","\n"],["body","\n"],["body","获取锁失败，入队列，进入等待状态休息，直到其他线程彻底释放资源后唤醒自己"],["body","\n"],["body","\n"],["body","    final boolean acquireQueued(final Node node, int arg) {\n        boolean failed = true;\n        try {\n            boolean interrupted = false;\n            for (;;) {//自旋\n                final Node p = node.predecessor();//拿到前驱\n                //如果前驱是head，即该结点已成老二，那么便有资格去尝试获取资源（可能是老大释放完资源唤醒自己的，当然也可能被interrupt了）。\n                if (p == head && tryAcquire(arg)) {\n                    setHead(node); //拿到资源后，将head指向该结点。所以head所指的结点，就是当前获取到资源的那个结点或null。\n                    p.next = null; // help GC，setHead中node.prev已置为null，此处再将head.next置为null，就是为了方便GC回收以前的head结点。也就意味着之前拿完资源的结点出队了！\n                    failed = false; //成功获取资源标识\n                    return interrupted; //返回等待过程中是否被中断过\n                }\n                //如果自己可以休息了，就通过park()进入waiting状态，直到被unpark()。如果不可中断的情况下被中断了，那么会从park()中醒过来，发现拿不到资源，从而继续进入park()等待。\n                if (shouldParkAfterFailedAcquire(p, node) &&\n                    parkAndCheckInterrupt())\n                    interrupted = true;\n            }\n        } finally {\n            if (failed) // 如果等待过程中没有成功获取资源（如timeout，或者可中断的情况下被中断了），那么取消结点在队列中的等待。\n                cancelAcquire(node);\n        }\n    }\n"],["body","\n"],["headingLink","shouldparkafterfailedacquire"],["heading","shouldParkAfterFailedAcquire"],["body","\n"],["body","\n"],["body","此方法主要用于检查状态，看看自己是否真的可以去休息了，要是 队列前边的线程都放弃了 那么当前线程可以尝试 竞争下"],["body","\n"],["body","\n"],["body","如果前驱结点的状态不是SIGNAL，那么自己就不能安心去休息，需要去找个安心的休息点，同时可以再尝试下看有没有机会轮到自己拿号。"],["body","\n"],["body","private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {\n    int ws = pred.waitStatus;//拿到前驱的状态\n    if (ws == Node.SIGNAL)\n        //如果已经告诉前驱拿完号后通知自己一下，那就可以安心休息了\n        return true;\n    if (ws > 0) {\n        /*\n         * 如果前驱放弃了，那就一直往前找，直到找到最近一个正常等待的状态，并排在它的后边。\n         * 注意：那些放弃的结点，由于被自己“加塞”到它们前边，它们相当于形成一个无引用链，稍后就会被保安大叔赶走了(GC回收)！\n         * 回收已经处于  CANCELLED 状态的 等待线程结点\n         */\n        do {\n            node.prev = pred = pred.prev;\n        } while (pred.waitStatus > 0);\n        pred.next = node;\n    } else {\n         //如果前驱正常，那就把前驱的状态设置成SIGNAL，告诉它拿完号后通知自己一下。有可能失败，可能前驱刚刚释放锁完毕\n        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);\n    }\n    return false;\n}\n"],["body","\n"],["headingLink","parkandcheckinterrupt"],["heading","parkAndCheckInterrupt()"],["body","\n"],["body","\n"],["body","如果线程找好安全休息点后，那就可以安心去休息了。此方法就是让线程去休息，真正进入等待状态。"],["body","\n"],["body","\n"],["body","private final boolean parkAndCheckInterrupt() {\n     LockSupport.park(this);//调用park()使线程进入waiting状态\n     return Thread.interrupted();//如果被唤醒，查看自己是不是被中断的。\n}\n"],["body","\n"],["body","park()会让当前线程进入waiting状态。在此状态下，有两种途径可以唤醒该线程：1）被unpark()；2）被interrupt()。"],["body","\n"],["headingLink","小结"],["heading","小结"],["body","\n"],["headingLink","入队列流程"],["heading","入队列流程"],["body","\n\n"],["body","结点进入队尾后，检查状态，找到安全休息点；"],["body","\n"],["body","调用park()进入waiting状态，等待unpark()或interrupt()唤醒自己；"],["body","\n"],["body","被唤醒后，看自己是不是有资格能拿到号。如果拿到，head指向当前结点，并返回从入队到拿到号的整个过程中是否被中断过；如果没拿到，继续流程1。"],["body","\n\n"],["headingLink","获取独占锁总体流程"],["heading","获取独占锁总体流程"],["body","\n\n"],["body","调用自定义同步器的tryAcquire()尝试直接去获取资源，如果成功则直接返回；"],["body","\n"],["body","没成功，则addWaiter()将该线程加入等待队列的尾部，并标记为独占模式；"],["body","\n"],["body","acquireQueued()使线程在等待队列中休息，有机会时（轮到自己，会被unpark()）会去尝试获取资源。获取到资源后才返回。"],["body","\n"],["body","如果在整个等待过程中被中断过，它是不响应的。只是获取资源后才再进行自我中断selfInterrupt()，将中断补上。"],["body","\n\n"],["body","流程图"],["body","\n"],["body","\n"],["headingLink","释放独占锁"],["heading","释放独占锁"],["body","\n"],["body","\n"],["body","此方法是独占模式下线程释放共享资源的顶层入口。它会释放指定量的资源，如果彻底释放了（即state=0）,它会唤醒等待队列里的其他线程来获取资源。"],["body","\n"],["body","\n"],["body","public final boolean release(int arg) {\n    if (tryRelease(arg)) {\n        Node h = head;//找到头结点\n        if (h != null && h.waitStatus != 0)\n            unparkSuccessor(h);//唤醒等待队列里的下一个线程\n        return true;\n    }\n    return false;\n}\n"],["body","\n"],["headingLink","unparksuccessor"],["heading","unparkSuccessor"],["body","\n"],["body","\n"],["body","此方法用于唤醒等待队列中下一个线程,用unpark()唤醒等待队列中最前边的那个未放弃线程"],["body","\n"],["body","\n"],["body","private void unparkSuccessor(Node node) {\n    //这里，node一般为当前线程所在的结点。\n    int ws = node.waitStatus;\n    if (ws < 0)//置零当前线程所在的结点状态，允许失败。\n        compareAndSetWaitStatus(node, ws, 0);\n\n    Node s = node.next;//找到下一个需要唤醒的结点s\n    if (s == null || s.waitStatus > 0) {//如果为空或已取消\n        s = null;\n        for (Node t = tail; t != null && t != node; t = t.prev) // 从后向前找。\n            if (t.waitStatus <= 0)//从这里可以看出，<=0的结点，都是还有效的结点。\n                s = t;\n    }\n    if (s != null)\n        LockSupport.unpark(s.thread);//唤醒\n}\n"],["body","\n"],["headingLink","取消结点"],["heading","取消结点"],["body","\n"],["body","\n"],["body","因为中断和超时导致的 结点取消"],["body","\n"],["body","\n"],["headingLink","code"],["heading","Code"],["body","\n"],["body","private void cancelAcquire(Node node) {\n    // Ignore if node doesn't exist\n    if (node == null)\n        return;\n\n    node.thread = null;\n\n    // Skip cancelled predecessors\n    Node pred = node.prev;\n    while (pred.waitStatus > 0)\n        node.prev = pred = pred.prev;\n\n    // predNext is the apparent node to unsplice. CASes below will\n    // fail if not, in which case, we lost race vs another cancel\n    // or signal, so no further action is necessary.\n    Node predNext = pred.next;\n\n    // Can use unconditional write instead of CAS here.\n    // After this atomic step, other Nodes can skip past us.\n    // Before, we are free of interference from other threads.\n    node.waitStatus = Node.CANCELLED;\n\n    // If we are the tail, remove ourselves.\n    if (node == tail && compareAndSetTail(node, pred)) {\n        compareAndSetNext(pred, predNext, null);\n    } else {\n        // If successor needs signal, try to set pred's next-link\n        // so it will get one. Otherwise wake it up to propagate.\n        int ws;\n        if (pred != head &&\n            ((ws = pred.waitStatus) == Node.SIGNAL ||\n             (ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &&\n            pred.thread != null) {\n            Node next = node.next;\n            if (next != null && next.waitStatus <= 0)\n                compareAndSetNext(pred, predNext, next);\n        } else {\n            unparkSuccessor(node);\n        }\n\n        node.next = node; // help GC\n    }\n}\n"],["body","\n"],["headingLink","流程图"],["heading","流程图"],["body","\n"],["body","\n"],["headingLink","无效结点的移除逻辑"],["heading","无效结点的移除逻辑"],["body","\n"],["body","分两步"],["body","\n\n"],["body","第一步 将 当前结点 前驱的 后继 指向 当前结点的后继"],["body","\n\n"],["body","伪代码"],["body","\n"],["body","Node prev = current.prev;\nNode next = current.next;\nprev.next = next;\n"],["body","\n"],["body","这一步可能会产生冲突"],["body","\n"],["body","如果前驱被取消，则唤醒后继"],["body","\n"],["body","如果后继被取消，不做任何处理"],["body","\n\n"],["body","第二步 每个结点各自 维护自己 的prev 指针"],["body","\n\n"],["body","伪代码"],["body","\n"],["body","在调用取消结点时"],["body","\n"],["body","private void cancelAcquire(Node node){\n    ...\n    Node pred = node.prev;\n\twhile (pred.waitStatus > 0)\n\t\tnode.prev = pred = pred.prev;\n    ...\n}\n\n"],["body","\n"],["body","结点入队列 结点被唤醒时，且没有获取到锁"],["body","\n"],["body","//判断是否应该阻塞\nshouldParkAfterFailedAcquire(){\n    ...\n    do {\n\tnode.prev = pred = pred.prev;\n\t} while (pred.waitStatus > 0);\n\tpred.next = node;\n    ...\n}\n//入队列\nacquireQueued(){\n    ...\n    for (;;) {\n        final Node p = node.predecessor();\n        if (p == head && tryAcquire(arg)) {\n            setHead(node);\n            p.next = null; // help GC\n            failed = false;\n            return interrupted;\n        }\n        if (shouldParkAfterFailedAcquire(p, node) &&\n            parkAndCheckInterrupt())\n            interrupted = true;\n        }\n    ...\n}\n\n"],["body","\n"],["headingLink","获取共享锁入口"],["heading","获取共享锁入口"],["body","\n"],["body","\n"],["body","它会获取指定量的资源，获取成功则直接返回，获取失败则进入等待队列，直到获取到资源为止.整个过程忽略中断"],["body","\n"],["body","\n"],["body","public final void acquireShared(int arg) {\n    if (tryAcquireShared(arg) < 0)\n        doAcquireShared(arg);\n}\n"],["body","\n"],["headingLink","tryacquireshared"],["heading","tryAcquireShared"],["body","\n\n"],["body","\n"],["body","该方法由子类实现"],["body","\n"],["body","\n"],["body","\n"],["body","获取指定量的共享锁"],["body","\n"],["body","\n"],["body","\n"],["body","返回值负值代表获取失败；0代表获取成功，但没有剩余资源；正数表示获取成功，还有剩余资源"],["body","\n"],["body","\n\n"],["headingLink","doacquireshared"],["heading","doAcquireShared"],["body","\n"],["body","private void doAcquireShared(int arg) {\n    final Node node = addWaiter(Node.SHARED); //加入队列尾部\n    boolean failed = true; //是否成功标志\n    try {\n        boolean interrupted = false; //等待过程中是否被中断过的标志\n        for (;;) {\n            final Node p = node.predecessor(); //前驱\n            if (p == head) { //如果到head的下一个，因为head是拿到资源的线程，此时node被唤醒，很可能是head用完资源来唤醒自己的\n                int r = tryAcquireShared(arg);  //尝试获取资源\n                if (r >= 0) { //获取资源成功\n                    setHeadAndPropagate(node, r);  //将head指向自己，还有剩余资源可以再唤醒之后的线程\n                    p.next = null; // help GC\n                    if (interrupted) //如果等待过程中被打断过，此时将中断补上。\n                        selfInterrupt();\n                    failed = false;\n                    return;\n                }\n            }\n            //判断状态，寻找安全点，进入waiting状态，等着被unpark()或interrupt()\n            if (shouldParkAfterFailedAcquire(p, node) &&\n                parkAndCheckInterrupt())\n                interrupted = true;\n        }\n    } finally {\n        if (failed)\n            cancelAcquire(node);\n    }\n}\n"],["body","\n"],["headingLink","setheadandpropagate"],["heading","setHeadAndPropagate"],["body","\n"],["body","private void setHeadAndPropagate(Node node, int propagate) {\n    Node h = head; // Record old head for check below,记录唤醒当前结点的前驱结点，也就是头结点\n    setHead(node);\n    /*\n     * Try to signal next queued node if:\n     *   Propagation was indicated by caller,\n     *     or was recorded (as h.waitStatus either before\n     *     or after setHead) by a previous operation\n     *     (note: this uses sign-check of waitStatus because\n     *      PROPAGATE status may transition to SIGNAL.)\n     * and\n     *   The next node is waiting in shared mode,\n     *     or we don't know, because it appears null\n     *\n     * The conservatism in both of these checks may cause\n     * unnecessary wake-ups, but only when there are multiple\n     * racing acquires/releases, so most need signals now or soon\n     * anyway.\n     */\n    if (propagate > 0 || h == null || h.waitStatus < 0 ||\n        (h = head) == null || h.waitStatus < 0) {\n        Node s = node.next;\n        if (s == null || s.isShared())\n            doReleaseShared();\n    }\n}\n"],["body","\n\n"],["body","\n"],["body","如果 propagate 大于0，说明资源仍有余量 可以唤醒"],["body","\n"],["body","\n"],["body","\n"],["body","如果 propagate = 0，但 头节点的状态 小于0，说明此时处于 PROPAGATE  状态 或者   SIGNAL 状态 也可以释放资源"],["body","\n"],["body","\n\n"],["headingLink","释放共享锁入口"],["heading","释放共享锁入口"],["body","\n"],["body","\n"],["body","它会释放指定量的资源，如果成功释放且允许唤醒等待线程，它会唤醒等待队列里的其他线程来获取资源"],["body","\n"],["body","\n"],["body","public final boolean releaseShared(int arg) {\n    if (tryReleaseShared(arg)) {//尝试释放资源\n        doReleaseShared();//唤醒后继结点\n        return true;\n    }\n    return false;\n}\n"],["body","\n\n"],["body","\n"],["body","一句话总结：释放掉资源后，唤醒后继。"],["body","\n"],["body","\n"],["body","\n"],["body","跟独占模式下的release()区别：独占模式下的tryRelease()在完全释放掉资源（state=0）后，才会返回true去唤醒其他线程，这主要是基于独占下可重入的考量；"],["body","\n"],["body","\n"],["body","\n"],["body","例如，资源总量是13，A（5）和B（7）分别获取到资源并发运行，C（4）来时只剩1个资源就需要等待。A在运行过程中释放掉2个资源量，然后tryReleaseShared(2)返回true唤醒C，C一看只有3个仍不够继续等待；随后B又释放2个，tryReleaseShared(2)返回true唤醒C，C一看有5个够自己用了，然后C就可以跟A和B一起运行。而ReentrantReadWriteLock读锁的tryReleaseShared()只有在完全释放掉资源（state=0）才返回true，所以自定义同步器可以根据需要决定tryReleaseShared()的返回值。"],["body","\n"],["body","\n\n"],["headingLink","doreleaseshared"],["heading","doReleaseShared"],["body","\n"],["body","分析"],["body","\n"],["body","每次循环中重新读取一次head，配合if(h == head) break;，循环检测到head没有变化时就会退出循环"],["body","\n"],["body","head变化一定是因为：acquire thread被唤醒，之后它成功获取锁，然后setHead设置了新head。"],["body","\n"],["body","所以设置这种中间状态的head的status为PROPAGATE，让其status又变成负数，这样可能被 被唤醒线程\n（因为正常来讲，被唤醒线程的前驱，也就是head会被设置为0的，所以被唤醒线程发现head不为0，就会知道自己应该去唤醒自己的后继了） 检测到。\n如果状态为PROPAGATE，直接判断head是否变化。\n两个continue保证了进入那两个分支后，只有当CAS操作成功后，才可能去执行if(h == head) break;，才可能退出循环。\nif(h == head) break;保证了，只要在某个循环的过程中有线程刚获取了锁且设置了新head，就会再次循环。目的当然是为了再次执行unparkSuccessor(h)，即唤醒队列中第一个等待的线程。\n"],["body","\n"],["body","代码"],["body","\n\n"],["body","如果头节点为 SIGNAL，说明后继结点在等候，则先将自身结点置为0，然后唤醒后继"],["body","\n"],["body","如果头结点为 0，说明h的后继所代表的线程已经被唤醒或即将被唤醒，这种状态是一个中间状态，"],["body","\n\n"],["body","private void doReleaseShared() {\n    for (;;) {\n        Node h = head; //循环中重新读取一次head\n        if (h != null && h != tail) { //判断队列是否至少有两个node，如果队列从来没有初始化过（head为null），或者head就是tail，那么中间逻辑直接不走\n            int ws = h.waitStatus;\n            if (ws == Node.SIGNAL) { //如果状态为SIGNAL,说明h的后继是需要被通知的\n                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))//只要head成功得从SIGNAL修改为0，那么head的后继的代表线程肯定会被唤醒了。\n                    continue;\n                unparkSuccessor(h);//唤醒后继\n            }\n            // 如果状态为0，说明h的后继所代表的线程已经被唤醒或即将被唤醒，并且这个中间状态即将消失,要么由于acquire thread获取锁失败再次设置head为 SIGNAL并再次阻塞,要么由于acquire thread获取锁成功而将自己（head后继）设置为新head并且只要head后继不是队尾，那么新head肯定为SIGNAL。\n            else if (ws == 0 &&\n                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))\n                continue;\n        }\n        if (h == head)// head发生变化\n           break;\n    }\n}\n"],["body","\n"],["h1","个人理解"],["body","\n"],["headingLink","aqs为什么要用双向队列"],["heading","AQS为什么要用双向队列？"],["body","\n\n"],["body","\n"],["body","如果 不需要支持 中断或超时，则可以使用 单向队列，所有线程入队列之后，只可能会被阻塞直到获取锁时被唤醒"],["body","\n"],["body","\n"],["body","\n"],["body","但如果需要支持中断或超时，则会造成链条中 出现许多 无效结点，如果使用单向链表，很难凭借无锁设计 实现原子的 结点的移除，而且被取消的结点 查找自己的前驱比较 麻烦"],["body","\n"],["body","\n"],["body","\n"],["body","AQS 使用双向队列 处理 无效结点的移除"],["body","\n"],["body","\n"],["body","\n"],["body","移除无效结点 重要原则：断开其他结点对当前结点的引用 ： 前驱的引用，断开后继的引用, 而 prev结点由各个结点各自维护"],["body","\n"],["body","\n\n"],["body","使用双向队列的优点"],["body","\n"],["body","减少数据竞争 取消结点时，在 维护 前驱的 next引用时，不影响 prev 引用的 使用，在决定下一个被唤醒者时， 只将 next结点作为一种优化路径，next为空或者 已取消 则使用prev结点查找 下一个候选者。"],["body","\n"],["headingLink","aqs的核心"],["heading","AQS的核心"],["body","\n"],["body","\n"],["body","AQS的核心在于 如何 原子的或者 保证队列结构安全的情况 下  将  取消的 结点 及时的 移出队列"],["body","\n"],["body","\n"],["headingLink","aqs共享锁工作机制"],["heading","AQS共享锁工作机制"],["body","\n\n"],["body","成功获取 共享锁 时候，会尝试 唤醒其他线程来 抢占资源"],["body","\n"],["body","释放共享锁的时候 尝试唤醒其他线程来抢占资源"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/基于AQS的同步工具/Semaphore.html"],["title","Semaphore.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","介绍"],["body","\n\n"],["body","\n"],["body","计数信号量，从概念上讲，信号量维护一组许可证。"],["body","\n"],["body","\n"],["body","\n"],["body","每一个acquire 消费一个许可，每一个release 增加一个许可"],["body","\n"],["body","\n"],["body","\n"],["body","当许可不够时，acquire 会被阻塞"],["body","\n"],["body","\n"],["body","\n"],["body","信号量一般使用于 限制 指定数量线程 能够访问某些资源"],["body","\n"],["body","\n\n"],["body","example"],["body","\n"],["body","class Pool {\n   private static final int MAX_AVAILABLE = 100;\n   private final Semaphore available = new Semaphore(MAX_AVAILABLE, true);\n\n   public Object getItem() throws InterruptedException {\n     available.acquire();\n     return getNextAvailableItem();\n   }\n\n   public void putItem(Object x) {\n     if (markAsUnused(x))\n       available.release();\n   }\n\n   // Not a particularly efficient data structure; just for demo\n\n   protected Object[] items = ... whatever kinds of items being managed\n   protected boolean[] used = new boolean[MAX_AVAILABLE];\n\n   protected synchronized Object getNextAvailableItem() {\n     for (int i = 0; i < MAX_AVAILABLE; ++i) {\n       if (!used[i]) {\n          used[i] = true;\n          return items[i];\n       }\n     }\n     return null; // not reached\n   }\n\n   protected synchronized boolean markAsUnused(Object item) {\n     for (int i = 0; i < MAX_AVAILABLE; ++i) {\n       if (item == items[i]) {\n          if (used[i]) {\n            used[i] = false;\n            return true;\n          } else\n            return false;\n       }\n     }\n     return false;\n   }\n }\n"],["body","\n\n"],["body","\n"],["body","信号量的获取可以保证公平与非公平"],["body","\n"],["body","\n"],["body","\n"],["body","untimed try 操作不保证公平"],["body","\n"],["body","\n"],["body","\n"],["body","一般 信号量 使用公平的方式 初始化，以确保不会造成 饥饿，当使用 信号量作为另类的 同步器，建议使用 非公平，以提升吞吐量"],["body","\n"],["body","\n"],["body","\n"],["body","同样 可以 获取 多个 或者释放多个资源"],["body","\n"],["body","\n\n"],["h1","构造"],["body","\n"],["body","\n"],["body","初始化，信号量 类似生产消费者模型"],["body","\n"],["body","\n"],["body","public Semaphore(int permits, boolean fair) {\n    sync = fair ? new FairSync(permits) : new NonfairSync(permits);\n}\n"],["body","\n"],["h1","Acquire操作"],["body","\n"],["body","\n"],["body","可中断，阻塞 获取"],["body","\n"],["body","\n\n"],["body","尝试获取指定量的信号量"],["body","\n"],["body","获取成功则返回 剩余量"],["body","\n"],["body","获取失败则 入队列"],["body","\n\n"],["body","// Semphre 信号量调用\npublic void acquire() throws InterruptedException {\nsync.acquireSharedInterruptibly(1);\n}\n// sync同步器调用\npublic final void acquireSharedInterruptibly(int arg)\n    throws InterruptedException {\n    if (Thread.interrupted())\n        throw new InterruptedException();\n    if (tryAcquireShared(arg) < 0)\n        doAcquireSharedInterruptibly(arg);\n}\n//NonfairSync 非公平的 资源获取\nprotected int tryAcquireShared(int acquires) {\n    return nonfairTryAcquireShared(acquires);\n}\n\nfinal int nonfairTryAcquireShared(int acquires) {\n    for (;;) {\n        int available = getState();\n        int remaining = available - acquires;\n        if (remaining < 0 ||\n            compareAndSetState(available, remaining))\n            return remaining;\n    }\n}\n"],["body","\n"],["h1","ReducePermists"],["body","\n"],["body","扣减可用的资源"],["body","\n"],["body","        final void reducePermits(int reductions) {\n            for (;;) {\n                int current = getState();\n                int next = current - reductions;\n                if (next > current) // underflow\n                    throw new Error(\"Permit count underflow\");\n                if (compareAndSetState(current, next))\n                    return;\n            }\n        }\n"],["body","\n"],["h1","Release"],["body","\n"],["body","释放一个许可证"],["body","\n"],["body","public void release() {\n    sync.releaseShared(1);\n}\n//通用 释放共享锁\npublic final boolean releaseShared(int arg) {\n    if (tryReleaseShared(arg)) {\n        doReleaseShared();\n        return true;\n    }\n    return false;\n}\n"],["body","\n"],["body","子类实现state更新"],["body","\n"],["body","\n"],["body","release既 给 增加 state，只要不超过 Integer.MaxVALUE 就能通过"],["body","\n"],["body","\n"],["body","protected final boolean tryReleaseShared(int releases) {\n    for (;;) {\n        int current = getState();\n        int next = current + releases;\n        if (next < current) // overflow\n            throw new Error(\"Maximum permit count exceeded\");\n        if (compareAndSetState(current, next))\n            return true;\n    }\n}\n"],["body","\n"],["h1","DrainPermits"],["body","\n"],["body","立即将许可证置为0"],["body","\n"],["body","final int drainPermits() {\n    for (;;) {\n        int current = getState();\n        if (current == 0 || compareAndSetState(current, 0))\n            return current;\n    }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/基于AQS的同步工具/ReentrantLock.html"],["title","ReentrantLock.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","介绍"],["body","\n"],["body","可重入互斥锁，实现了与 隐式锁 synchronized 同样的 行为 与 语义，但扩展了其功能"],["body","\n"],["headingLink","锁逻辑"],["heading","锁逻辑"],["body","\n\n"],["body","可重入锁  被上次成功上锁，但目前还未解锁 的线程拥有"],["body","\n"],["body","如果 锁还未被任何线程占有，则当线程上锁时能成功获取锁"],["body","\n"],["body","如果当前线程已经 占有改锁，重复加锁会记录加锁的次数，次数通过 *isHeldByCurrentThread, and getHoldCount.*获取"],["body","\n\n"],["headingLink","公平与非公平"],["heading","公平与非公平"],["body","\n"],["body","公平锁"],["body","\n"],["body","遵循先来先获取锁的原则，倾向于分配给等待时间最长的线程"],["body","\n"],["body","使用公平锁会降低系统整体吞吐量，但减少 饥饿锁的现象"],["body","\n"],["body","锁的公平获取不保证 线程的公平调度"],["body","\n"],["body","untimed tryLock() 不会遵循公平与非公平，当锁可用时则 立即获取锁"],["body","\n"],["headingLink","建议使用方式"],["heading","建议使用方式"],["body","\n"],["body","\n"],["body","使用 try finally 保证锁会被释放"],["body","\n"],["body","\n"],["body"," class X {\n   private final ReentrantLock lock = new ReentrantLock();\n   // ...\n\n   public void m() {\n     lock.lock();  // block until condition holds\n     try {\n       // ... method body\n     } finally {\n       lock.unlock()\n     }\n   }\n }\n"],["body","\n"],["h1","可重入锁"],["body","\n"],["body","\n"],["body","Lock接口方法 全部委托于 Sync 类来实现"],["body","\n"],["body","\n\n"],["body","主要有两个同步器 NonfairSync FairSync"],["body","\n\n"],["headingLink","nonfairsync"],["heading","NonfairSync"],["body","\n"],["body","\n"],["body","非公平锁同步器"],["body","\n"],["body","\n"],["headingLink","独占锁获取逻辑"],["heading","独占锁获取逻辑"],["body","\n"],["body","\n"],["body","先尝试获取锁，体现了非公平的方式，如果没有获取成功则 入队列等待"],["body","\n"],["body","\n"],["body","        final void lock() {\n            if (compareAndSetState(0, 1))\n                setExclusiveOwnerThread(Thread.currentThread());\n            else\n                acquire(1);\n        }\n"],["body","\n"],["headingLink","独占锁释放逻辑"],["heading","独占锁释放逻辑"],["body","\n"],["body","\n"],["body","直接以独占锁的方式释放锁"],["body","\n"],["body","\n"],["body","        protected final boolean tryRelease(int releases) {\n            int c = getState() - releases; //拥有锁的线程不是 当前线程则报错\n            if (Thread.currentThread() != getExclusiveOwnerThread())\n                throw new IllegalMonitorStateException();\n            boolean free = false;\n            if (c == 0) {\n                free = true;\n                setExclusiveOwnerThread(null);\n            }\n            setState(c);\n            return free;\n        }\n"],["body","\n"],["headingLink","尝试获取锁"],["heading","尝试获取锁"],["body","\n"],["body","\n"],["body","尝试获取锁，只能是非公平方式"],["body","\n"],["body","\n"],["body","    public boolean tryLock() {\n        return sync.nonfairTryAcquire(1);\n    }\n\n\n    final boolean nonfairTryAcquire(int acquires) {\n        \t//获取当前线程，获取当前线程状态\n            final Thread current = Thread.currentThread();\n            int c = getState();\n            if (c == 0) { //锁可用\n                if (compareAndSetState(0, acquires)) {  //尝试获取锁\n                    setExclusiveOwnerThread(current);\n                    return true;\n                }\n            }\n            else if (current == getExclusiveOwnerThread()) { //获取锁失败，判断是否是同一线程\n                int nextc = c + acquires;\n                if (nextc < 0) // overflow\n                    throw new Error(\"Maximum lock count exceeded\");\n                setState(nextc);\n                return true;\n            }\n            return false;\n        }\n"],["body","\n"],["headingLink","fairsync"],["heading","FairSync"],["body","\n"],["headingLink","公平方式获取独占锁"],["heading","公平方式获取独占锁"],["body","\n\n"],["body","一开始不尝试获取锁，直接进入队列排队"],["body","\n"],["body","如果没有继任者，尝试获取锁，如果获取锁成功，则返回true"],["body","\n\n"],["body","final void lock() {\n    acquire(1);\n}\n\nprotected final boolean tryAcquire(int acquires) {\n    final Thread current = Thread.currentThread();\n    int c = getState();\n    if (c == 0) {\n        if (!hasQueuedPredecessors() &&\n            compareAndSetState(0, acquires)) {\n            setExclusiveOwnerThread(current);\n            return true;\n        }\n    }\n    else if (current == getExclusiveOwnerThread()) {\n        int nextc = c + acquires;\n        if (nextc < 0)\n            throw new Error(\"Maximum lock count exceeded\");\n        setState(nextc);\n        return true;\n    }\n    return false;\n}\n"],["body","\n"],["headingLink","判断是否可以获取锁"],["heading","判断是否可以获取锁"],["body","\n"],["body","\n"],["body","查询是否有任何线程在等待获取比当前线程更长的时间"],["body","\n"],["body","\n\n"],["body","不存在排队队列"],["body","\n"],["body","或者 head的下一个结点 不是 自己 getFirstQueuedThread（）！= Thread.currentThread（）&& hasQueuedThreads（）"],["body","\n\n"],["body","请注意，由于中断和超时引起的取消可能随时发生，因此返回true不能保证某些其他线程将在当前线程之前获取。"],["body","\n"],["body","public final boolean hasQueuedPredecessors() {\n    // The correctness of this depends on head being initialized\n    // before tail and on head.next being accurate if the current\n    // thread is first in queue.\n    Node t = tail; // Read fields in reverse initialization order\n    Node h = head;\n    Node s;\n    return h != t &&\n        ((s = h.next) == null || s.thread != Thread.currentThread());\n}\n"],["body","\n"],["headingLink","释放锁"],["heading","释放锁"],["body","\n"],["body","同非公平锁一样"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/基于AQS的同步工具/CountDownLatch.html"],["title","CountDownLatch.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","介绍"],["body","\n\n"],["body","\n"],["body","一种同步工具类  旨在 允许一个或多个线程等待，直到在其他线程中执行的一组操作完成为止"],["body","\n"],["body","\n"],["body","\n"],["body","await 方法 会阻塞 直到 调用 countDown 使得 count 数量为0，所有线程 将会执行接下来的操作"],["body","\n"],["body","\n"],["body","\n"],["body","这是一次性的 现象，如果需要 重置 count 请使用 CyclicBarrier"],["body","\n"],["body","\n"],["body","\n"],["body","简单使用"],["body","\n"],["body","example1"],["body","\n"],["body","class Driver { // ...\n   void main() throws InterruptedException {\n       //启动信号量\n     CountDownLatch startSignal = new CountDownLatch(1);\n     CountDownLatch doneSignal = new CountDownLatch(N);\n\n     for (int i = 0; i < N; ++i) // create and start threads\n       new Thread(new Worker(startSignal, doneSignal)).start();\n\n     doSomethingElse();            // don't let run yet\n      //启动线程\n     startSignal.countDown();      // let all threads proceed\n     doSomethingElse();\n       //等待线程\n     doneSignal.await();           // wait for all to finish\n   }\n }\n\n class Worker implements Runnable {\n   private final CountDownLatch startSignal;\n   private final CountDownLatch doneSignal;\n   Worker(CountDownLatch startSignal, CountDownLatch doneSignal) {\n     this.startSignal = startSignal;\n     this.doneSignal = doneSignal;\n   }\n   public void run() {\n     try {\n         //所有线程等待启动\n       startSignal.await();\n       doWork();\n       doneSignal.countDown();\n     } catch (InterruptedException ex) {} // return;\n   }\n\n   void doWork() { ... }\n }\n"],["body","\n"],["body","example2"],["body","\n"],["body"," class Driver2 { // ...\n   void main() throws InterruptedException {\n     CountDownLatch doneSignal = new CountDownLatch(N);\n     Executor e = ...\n\n     for (int i = 0; i < N; ++i) // create and start threads\n       e.execute(new WorkerRunnable(doneSignal, i));\n\n     doneSignal.await();           // wait for all to finish\n   }\n }\n\n class WorkerRunnable implements Runnable {\n   private final CountDownLatch doneSignal;\n   private final int i;\n   WorkerRunnable(CountDownLatch doneSignal, int i) {\n     this.doneSignal = doneSignal;\n     this.i = i;\n   }\n   public void run() {\n     try {\n       doWork(i);\n       doneSignal.countDown();\n     } catch (InterruptedException ex) {} // return;\n   }\n\n   void doWork() { ... }\n }\n"],["body","\n"],["body","\n"],["body","\n"],["body","Memory consistency effects: Until the count reaches zero, actions in a thread prior to calling countDown() happen-before actions following a successful return from a corresponding await() in another thread."],["body","\n"],["body","\n\n"],["h1","AWAIT"],["body","\n"],["body","等待"],["body","\n"],["body","public void await() throws InterruptedException {\n    sync.acquireSharedInterruptibly(1);\n}\n//AQS尝试获取 锁，获取锁失败则阻塞在同步队列中等待\npublic final void acquireSharedInterruptibly(int arg)\n    throws InterruptedException {\n    if (Thread.interrupted())\n        throw new InterruptedException();\n    if (tryAcquireShared(arg) < 0)\n        doAcquireSharedInterruptibly(arg);\n}\n"],["body","\n"],["body","尝试获取锁资源"],["body","\n"],["body","只要 状态不为0，则一直等待"],["body","\n"],["body","protected int tryAcquireShared(int acquires) {\n    return (getState() == 0) ? 1 : -1;\n}\n"],["body","\n"],["h1","CountDown"],["body","\n\n"],["body","自旋释放"],["body","\n"],["body","如果 状态量为0 ，则 唤醒所有等待 在 该同步队列的 线程"],["body","\n\n"],["body","public void countDown() {\n    sync.releaseShared(1);\n}\n\nprotected boolean tryReleaseShared(int releases) {\n    // Decrement count; signal when transition to zero\n    for (;;) {\n        int c = getState();\n        if (c == 0)\n            return false;\n        int nextc = c-1;\n        if (compareAndSetState(c, nextc))\n            return nextc == 0;\n    }\n}\n"],["body","\n"],["h1","超时AWAIT"],["body","\n"],["body","    public boolean await(long timeout, TimeUnit unit)\n        throws InterruptedException {\n        return sync.tryAcquireSharedNanos(1, unit.toNanos(timeout));\n    }\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/基于AQS的同步工具/CyclicBarrier.html"],["title","CyclicBarrier.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","介绍"],["body","\n\n"],["body","\n"],["body","同步工具类 旨在 允许 所有线程 等待直到 他们 达到了 某个 障碍点"],["body","\n"],["body","\n"],["body","\n"],["body","CyclicBarriers在涉及固定大小的线程的程序中很有用，该线程方有时必须互相等待"],["body","\n"],["body","\n"],["body","\n"],["body","The barrier is called cyclic  是因为 它可以在释放等待线程后重新使用。"],["body","\n"],["body","\n"],["body","\n"],["body","CyclicBarrier 支持可选的Runnable命令，该命令在障碍中的最后一个线程到达之后 但在释放任何线程之前，每个障碍点运行一次。\nthis barrier action 对于在任何线程继续之前  更新共享状态很有用。"],["body","\n"],["body","\n\n"],["h1","AWAIT"],["body","\n"],["body","阻塞 直到 所有线程都 阻塞在 该 barrier "],["body","\n"],["body","从AWAIT唤醒"],["body","\n"],["body","如果当前线程 不是 最后一个 调用 AWAIT ，那么该线程会被 休眠，不回被调度。直到以下事情发生"],["body","\n\n"],["body","最后一个线程到达"],["body","\n"],["body","当前线程被打断了"],["body","\n"],["body","位于等待的  其他线程之一 被打断了"],["body","\n"],["body","等待中的 线程 超时了"],["body","\n"],["body","其他线程调用 reset"],["body","\n\n"],["body","中断异常抛出"],["body","\n\n"],["body","\n"],["body","如果当前线程 进入这个方法之前被 中断了"],["body","\n"],["body","\n"],["body","\n"],["body","或者在等待 的过程中  被中断了 则 先清除中断状态 抛出 InterruptedException"],["body","\n"],["body","\n\n"],["body","BrokenBarrierException抛出"],["body","\n\n"],["body","如果 调用 reset 时 有线程 在等待，"],["body","\n"],["body","或者 有线程调用 await 或者 barrier is broken "],["body","\n\n"],["body","BarrierAction"],["body","\n"],["body","如果一个线程 被中断了，则其他线程 将会 抛出 BrokenBarrierException"],["body","\n"],["body","如果一个线程是最后调用 await 而且 提供了 非空的  BarrierAction ，它会首先执行 BarrierAction 然后在唤醒其他线程"],["body","\n"],["body","如果执行 BarrierAction 抛异常，则异常会被 抛出到当前线程，barrier也被置位 broken"],["body","\n"],["body","非超时等待"],["body","\n"],["body","public int await() throws InterruptedException, BrokenBarrierException {\n    try {\n        return dowait(false, 0L);\n    } catch (TimeoutException toe) {\n        throw new Error(toe); // cannot happen\n    }\n}\n"],["body","\n"],["body","private int dowait(boolean timed, long nanos)\n    throws InterruptedException, BrokenBarrierException,\n           TimeoutException {\n    final ReentrantLock lock = this.lock;\n    lock.lock();\n    try {\n        //获取当前的 barrier代\n        final Generation g = generation;\n\n        //如果已经 破损，则抛出破损异常\n        if (g.broken)\n            throw new BrokenBarrierException();\n\n        //如果当前线程被中断了，则 将 barrier 置位 broken，并抛出中断异常\n        if (Thread.interrupted()) {\n            breakBarrier();\n            throw new InterruptedException();\n        }\n\t\t//对 count自减\n        int index = --count;\n        \n        //最后一个 arrive 则执行 BarrierAction\n        if (index == 0) {  // tripped\n            boolean ranAction = false;\n            try {\n                final Runnable command = barrierCommand;\n                if (command != null)\n                    command.run();\n                ranAction = true; //更新换代 barrier generation\n                nextGeneration();\n                return 0;\n            } finally { //如果抛异常了，则 将 barrier置位 broken\n                if (!ranAction)\n                    breakBarrier();\n            }\n        }\n\t\t//如果不是最后一个 arrive的线程，则 自选等待\n        // loop until tripped, broken, interrupted, or timed out\n        for (;;) {\n            try {\n                if (!timed)\n                    trip.await();\n                else if (nanos > 0L)\n                    nanos = trip.awaitNanos(nanos);\n            } catch (InterruptedException ie) {\n                //被中断了，且还没有 broken 则 broken\n                if (g == generation && ! g.broken) {\n                    breakBarrier();\n                    throw ie;\n                } else {\n                    //被中断了，但已经更新换代了，则可以认为 继续执行\n                    // We're about to finish waiting even if we had not\n                    // been interrupted, so this interrupt is deemed to\n                    // \"belong\" to subsequent execution.\n                    Thread.currentThread().interrupt();\n                }\n            }\n\n            if (g.broken)\n                throw new BrokenBarrierException();\n\t\t\t\n            //如果更新换代了，则说明是被最后一个 arriver 唤醒的，则返回index,到达的索引\n            if (g != generation)\n                return index;\n\n            //如果超时了，则 置 breakBarrier 为 broken\n            if (timed && nanos <= 0L) {\n                breakBarrier();\n                throw new TimeoutException();\n            }\n        }\n    } finally {\n        lock.unlock();\n    }\n}\n"],["body","\n"],["h1","重置"],["body","\n"],["body","    public void reset() {\n        final ReentrantLock lock = this.lock;\n        lock.lock();\n        try {\n            //将 barrier 置位 broken\n            breakBarrier();   // break the current generation\n            //开始下一个 generation\n            nextGeneration(); // start a new generation\n        } finally {\n            lock.unlock();\n        }\n    }\n"],["body","\n"],["h1","打破Barrier"],["body","\n\n"],["body","代数置位 true"],["body","\n"],["body","重置 count"],["body","\n"],["body","唤醒其他 阻塞线程"],["body","\n\n"],["body","private void breakBarrier() {\n    generation.broken = true;\n    count = parties;\n    trip.signalAll();\n}\n"],["body","\n"],["h1","更新换代"],["body","\n\n"],["body","通知其他 线程"],["body","\n"],["body","重置 count"],["body","\n"],["body","更新 generation 引用"],["body","\n\n"],["body","private void nextGeneration() {\n    // signal completion of last generation\n    trip.signalAll();\n    // set up next generation\n    count = parties;\n    generation = new Generation();\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/线程池.html"],["title","线程池.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","线程运行时间"],["body","\n"],["body","一个服务器完成一项任务所需时间为：T1 创建线程时间，T2 在线程中执行任务的时间，T3 销毁线程时间如果 T1+T3 远大于 T2 则可以采用线程池，以提高服务器性能"],["body","\n"],["h1","线程池技术"],["body","\n"],["body","\n"],["body","一个线程池包括以下四个基本组成部分"],["body","\n"],["body","\n\n"],["body","线程池管理器 用于创建线程，回收线程，销毁线程，添加任务"],["body","\n"],["body","工作线程 线程池中线程，在没有任务时，处于等待状态，可以循环执行任务"],["body","\n"],["body","任务接口 每个任务必须实现的接口，以供工作线程 任务的执行。它主要规定了任务的入口，任务执行完成后的收尾工作，任务的执行状态等"],["body","\n"],["body","任务队列 存放没有处理的任务。提供缓冲机制"],["body","\n\n"],["h1","ThreadPoolExecutor"],["body","\n"],["body","\n"],["body","java中的  ThreadPoolExecutor 正是线程池的一种实现"],["body","\n"],["body","\n"],["headingLink","初始化状态"],["heading","初始化状态"],["body","\n"],["body","可指定"],["body","\n\n"],["body","java.util.concurrent.BlockingQueue#workQueue 任务缓存队列"],["body","\n"],["body","corePoolSize 常驻线程大小"],["body","\n"],["body","maximumPoolSize 最大线程大小"],["body","\n"],["body","keepAliveTime  线程存活时间，表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于corePoolSize时，   keepAliveTime才会起作用，直到线程池中的线程数不大于corePoolSize：即当线程池中的线程数大于corePoolSize时，如果一个线程空闲的时间达到keepAliveTime，则会终止，直到线程池中的线程数不超过corePoolSize；但是如果调用了**allowCoreThreadTimeOut(boolean)**方法，在线程池中的线程数不大于corePoolSize时，keepAliveTime参数也会起作用，直到线程池中的线程数为0"],["body","\n"],["body","ThreadFactory 线程工厂 ，默认 java.util.concurrent.Executors.DefaultThreadFactory"],["body","\n"],["body","RejectedExecutionHandler  任务队列满了之后的策略，默认 java.util.concurrent.ThreadPoolExecutor.AbortPolicy"],["body","\n"],["body","AccessControlContext 访问控制上下文"],["body","\n\n"],["body","自动初始化"],["body","\n\n"],["body","ctl private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));"],["body","\n"],["body","java.util.concurrent.locks.ReentrantLock#mainLock  可重入锁"],["body","\n"],["body","java.util.concurrent.ThreadPoolExecutor#workers  工作线程的抽象"],["body","\n"],["body","java.util.concurrent.ThreadPoolExecutor#termination terminal锁"],["body","\n"],["body","java.util.concurrent.ThreadPoolExecutor#largestPoolSize 历史最大的线程数"],["body","\n"],["body","java.util.concurrent.ThreadPoolExecutor#completedTaskCount 用来记录已经执行完毕的任务个数"],["body","\n\n"],["headingLink","提交任务或执行任务"],["heading","提交任务或执行任务"],["body","\n"],["body","        int c = ctl.get();\n        if (workerCountOf(c) < corePoolSize) { //1.当前工作线程 小于 核心线程数，新增工作线程\n                return;\n            c = ctl.get();\n        }\n\t\t//2.工作线程新增失败，（可能是由于其他线程新增了常驻线程，并达到了阈值），则将任务放到缓存队列中\n        if (isRunning(c) && workQueue.offer(command)) { \n            int recheck = ctl.get();\t//2.1新增完之后，二次检查下，当前线程池 的状态，如果已经停止了，则回退操作，并拒绝\n            if (! isRunning(recheck) && remove(command))\n                reject(command);\n            else if (workerCountOf(recheck) == 0) //2.2如果工作线程个数为0，则添加一个工作线程\n                addWorker(null, false);\n        }\n        else if (!addWorker(command, false))//3.如果线程队列满了，或者线程池已经关闭了，则拒绝\n            reject(command);\n"],["body","\n"],["headingLink","新增工作线程"],["heading","新增工作线程"],["body","\n"],["body","        retry:\n        for (;;) {\n            int c = ctl.get();\n            int rs = runStateOf(c);\n            // Check if queue empty only if necessary. 1.当线程池已经结束，而且 线程池不能满足以下条件 （正处于SHUTDOWN状态，且workQueue不为空，且给定的 firstTask）\n            if (rs >= SHUTDOWN &&\n                ! (rs == SHUTDOWN &&\n                   firstTask == null &&\n                   ! workQueue.isEmpty()))\n                return false;\n\n            for (;;) {\n                int wc = workerCountOf(c);\n                //工作线程超过指定容量\n                if (wc >= CAPACITY ||\n                    wc >= (core ? corePoolSize : maximumPoolSize))\n                    return false;\n                //没有超过则 对 ctl中的 workCount 自增\n                //自增成功，则退出，\n                if (compareAndIncrementWorkerCount(c))\n                    break retry;\n                //自增失败，刷新 ctl\n                c = ctl.get();  // Re-read ctl\n                //如果 运行状态变了，则返回顶层循环，否则继续本层循环\n                if (runStateOf(c) != rs)\n                    continue retry;\n                // else CAS failed due to workerCount change; retry inner loop\n            }\n        }\n\n\t\t//自增成功，真正处理 worker\n        boolean workerStarted = false;\n        boolean workerAdded = false;\n        Worker w = null;\n        try {\n            w = new Worker(firstTask);\n            final Thread t = w.thread;\n            if (t != null) {\n                final ReentrantLock mainLock = this.mainLock;\n                mainLock.lock();\n                try {\n                    //以锁访问 ctl的值\n                    // Recheck while holding lock.\n                    // Back out on ThreadFactory failure or if\n                    // shut down before lock acquired.\n                    int rs = runStateOf(ctl.get());\n\n                    //正在运行，或者 关闭中\n                    if (rs < SHUTDOWN ||\n                        (rs == SHUTDOWN && firstTask == null)) {\n                        if (t.isAlive()) // precheck that t is startable 线程不是可启动的 报异常\n                            throw new IllegalThreadStateException();\n                        workers.add(w);\n                        int s = workers.size();\n                        //更新 历史 poolSize\n                        if (s > largestPoolSize)\n                            largestPoolSize = s;\n                        workerAdded = true;\n                    }\n                } finally {\n                    mainLock.unlock();\n                }\n                //启动线程\n                if (workerAdded) {\n                    t.start();\n                    workerStarted = true;\n                }\n            }\n        } finally {\n            if (! workerStarted)\n                addWorkerFailed(w);\n        }\n        return workerStarted;\n"],["body","\n"],["headingLink","判断线程池状态"],["heading","判断线程池状态"],["body","\n"],["body","//不处于运行状态\npublic boolean isShutdown() {\n        return ! isRunning(ctl.get());\n}\n//是否运行\nprivate static boolean isRunning(int c) {\n        return c < SHUTDOWN;\n}\n//完全terminated\npublic boolean isTerminated() {\n        return runStateAtLeast(ctl.get(), TERMINATED);\n}\nprivate static boolean runStateAtLeast(int c, int s) {\n        return c >= s;\n}\n//正在结束中，没有彻底结束\npublic boolean isTerminating() {\n        int c = ctl.get();\n        return ! isRunning(c) && runStateLessThan(c, TERMINATED);\n}\nprivate static boolean runStateLessThan(int c, int s) {\n        return c < s;\n}\n"],["body","\n"],["headingLink","运行线程"],["heading","运行线程"],["body","\n"],["body","\n"],["body","java.util.concurrent.ThreadPoolExecutor.Worker"],["body","\n"],["body","\n"],["headingLink","运行"],["heading","运行"],["body","\n"],["body","    final void runWorker(Worker w) {\n        //获取当前线程\n        Thread wt = Thread.currentThread();\n        Runnable task = w.firstTask;\n        w.firstTask = null;\n        w.unlock(); // allow interrupts\n        boolean completedAbruptly = true;\n        try {\n            //先取firstTask,如果为空，则从缓存队列来取\n            //当线程池 已经关闭，或者工作线程超时 时返回null\n            while (task != null || (task = getTask()) != null) {\n                //上锁\n                w.lock();\n                // If pool is stopping, ensure thread is interrupted;\n                // if not, ensure thread is not interrupted.  This\n                // requires a recheck in second case to deal with\n                // shutdownNow race while clearing interrupt\n                // 如果线程池正停止，\n                // 如果没有停止，已经被中断过，并二次检查是否状态是否为STOP\n                if (\n                     (\n\t\t\t\t\trunStateAtLeast(ctl.get(), STOP) ||\n                      (\n                         Thread.interrupted() && runStateAtLeast(ctl.get(), STOP)\n                      )\n                     )\n                    &&\n                    !wt.isInterrupted())\n                    wt.interrupt();\n                try {\n                    beforeExecute(wt, task);\n                    Throwable thrown = null;\n                    try {\n                        task.run(); //执行任务\n                    } catch (RuntimeException x) {\n                        thrown = x; throw x;\n                    } catch (Error x) {\n                        thrown = x; throw x;\n                    } catch (Throwable x) {\n                        thrown = x; throw new Error(x);\n                    } finally {\n                        afterExecute(task, thrown);\n                    }\n                } finally {\n                    task = null;\n                    w.completedTasks++;\n                    w.unlock();\n                }\n            }\n            completedAbruptly = false;\n        } finally {\n            ///当线程池 已经关闭，或者工作线程超时 时清理 工作线程\n            processWorkerExit(w, completedAbruptly);\n        }\n    }\n"],["body","\n"],["headingLink","取task"],["heading","取Task"],["body","\n\n"],["body","调用 shutdown() 线程池 状态变为 SHUTDOWN，此时当线程池没有其他任务时 工作线程退出"],["body","\n"],["body","调用  shutdownNow() 时，状态设置为 STOP，不会处理队列其他的任务，强行返回 NULL"],["body","\n\n"],["body","private Runnable getTask() {\n    boolean timedOut = false; // Did the last poll() time out?\n\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // Check if queue empty only if necessary. 线程池正在关闭 ，1.当为STOP 强行返回NULL，2.当工作线程为空了则强行返回NULL\n        if (rs >= SHUTDOWN && (rs >= STOP || workQueue.isEmpty())) {\n            decrementWorkerCount();\n            return null;\n        }\n\n        int wc = workerCountOf(c);\n\n        // Are workers subject to culling? 判断 是否超时，1.手动设置 allowCoreThreadTimeOut 2.当工作线程大于常驻线程则需要超时\n        boolean timed = allowCoreThreadTimeOut || wc > corePoolSize;\n\t\t//超过最大工作线程数，或者超时，\n        //工作线程数 大于1，或者 任务队列为空\n        if ((wc > maximumPoolSize || (timed && timedOut))\n            && (wc > 1 || workQueue.isEmpty())) {\n            if (compareAndDecrementWorkerCount(c))\n                return null;\n            continue;\n        }\n\n        try {\n            Runnable r = timed ?\n                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :\n                workQueue.take();\n            if (r != null)\n                return r;\n            timedOut = true;\n        } catch (InterruptedException retry) {\n            timedOut = false;\n        }\n    }\n}\n"],["body","\n"],["headingLink","回收工作线程"],["heading","回收工作线程"],["body","\n"],["body","\n"],["body","processWorkerExit"],["body","\n"],["body","\n"],["body","    private void processWorkerExit(Worker w, boolean completedAbruptly) {\n        if (completedAbruptly) // If abrupt, then workerCount wasn't adjusted\n            decrementWorkerCount();\n\n        final ReentrantLock mainLock = this.mainLock;\n        mainLock.lock();\n        try {\n            completedTaskCount += w.completedTasks;\n            workers.remove(w);\n        } finally {\n            mainLock.unlock();\n        }\n\n        tryTerminate();\n\n        int c = ctl.get();\n        if (runStateLessThan(c, STOP)) {\n            if (!completedAbruptly) {\n                int min = allowCoreThreadTimeOut ? 0 : corePoolSize;\n                if (min == 0 && ! workQueue.isEmpty())\n                    min = 1;\n                if (workerCountOf(c) >= min)\n                    return; // replacement not needed\n            }\n            addWorker(null, false);\n        }\n    }\n\n"],["body","\n"],["headingLink","关闭线程池"],["heading","关闭线程池"],["body","\n"],["headingLink","关闭线程池-1"],["heading","关闭线程池"],["body","\n"],["body","    public void shutdown() {\n        final ReentrantLock mainLock = this.mainLock;\n        mainLock.lock(); //上锁\n        try {\n            checkShutdownAccess(); //检查权限校验\n            advanceRunState(SHUTDOWN); //设置线程池 ctl 为 SHUTDOWN\n            interruptIdleWorkers(); //中断空闲线程\n            onShutdown(); // hook for ScheduledThreadPoolExecutor，中断后回调\n        } finally {\n            mainLock.unlock(); //释放锁\n        }\n        tryTerminate();//中断线程\n    }\n"],["body","\n"],["headingLink","立即关闭线程池"],["heading","立即关闭线程池"],["body","\n"],["body","    public List<Runnable> shutdownNow() {\n        List<Runnable> tasks;\n        final ReentrantLock mainLock = this.mainLock;\n        mainLock.lock();\n        try {\n            checkShutdownAccess(); //检查权限校验\n            advanceRunState(STOP); //设置线程池 ctl 为 CTL\n            interruptWorkers(); //中断工作中线程\n            tasks = drainQueue(); //获取工作线程工作结果\n        } finally {\n            mainLock.unlock();\n        }\n        tryTerminate();\t//中断线程\n        return tasks;\n    }\n"],["body","\n"],["headingLink","尝试关闭线程池"],["heading","尝试关闭线程池"],["body","\n"],["body","线程池 有以下四种状态"],["body","\n\n"],["body","运行中"],["body","\n"],["body","SHUTDOWN 等待所有任务完成后停止"],["body","\n"],["body","STOP  强行停止"],["body","\n"],["body","TINYTERMINTATOR 与 TERMINATED 停止状态"],["body","\n\n"],["body","当 状态 为 STOP 强行停止  或者  SHUTDOWN 且任务都 已经运行完毕时，才尝试 进一步停止 线程池"],["body","\n"],["body","final void tryTerminate() {\n        for (;;) {\n            int c = ctl.get();\n            //1.正在运行\n            //2.已经在关闭完成\n            //3.正在关闭，且队列不为空 则退出\n            if (isRunning(c) ||\n                runStateAtLeast(c, TIDYING) ||\n                (runStateOf(c) == SHUTDOWN && ! workQueue.isEmpty()))\n                return;\n            //工作线程不为0，中断空闲线程\n            if (workerCountOf(c) != 0) { // Eligible to terminate\n                interruptIdleWorkers(ONLY_ONE);\n                return;\n            }\n\n            final ReentrantLock mainLock = this.mainLock;\n            mainLock.lock();\n            try {\n                //已经位于关闭状态，且工作线程池为空，任务队列为空，则设置为 TIDYING,调用 termined()回调，设置为彻底关闭 TERMINATED,条件锁唤醒\n                if (ctl.compareAndSet(c, ctlOf(TIDYING, 0))) {\n                    try {\n                        terminated();\n                    } finally {\n                        ctl.set(ctlOf(TERMINATED, 0));\n                        termination.signalAll();\n                    }\n                    return;\n                }\n            } finally {\n                mainLock.unlock();\n            }\n            // else retry on failed CAS\n        }\n    }\n"],["body","\n"],["headingLink","设置线程池ctl"],["heading","设置线程池ctl"],["body","\n"],["body","   private void advanceRunState(int targetState) {\n        for (;;) {\n            int c = ctl.get();\n            //如果已经 处于 TERMINAL了，则退出\n            //没有位于 TERMINAl，通过CAS设置\n            //设置失败则，继续设置\n            if (runStateAtLeast(c, targetState) ||\n                ctl.compareAndSet(c, ctlOf(targetState, workerCountOf(c))))\n                break;\n        }\n    }\n"],["body","\n"],["headingLink","中断线程"],["heading","中断线程"],["body","\n"],["body","    private void interruptIdleWorkers(boolean onlyOne) {\n        final ReentrantLock mainLock = this.mainLock;\n        mainLock.lock();\n        try {\n            for (Worker w : workers) {\n                Thread t = w.thread;\n                if (!t.isInterrupted() && w.tryLock()) {\n                    try {\n                        t.interrupt();\n                    } catch (SecurityException ignore) {\n                    } finally {\n                        w.unlock();\n                    }\n                }\n                if (onlyOne)\n                    break;\n            }\n        } finally {\n            mainLock.unlock();\n        }\n    }\n"],["body","\n"],["headingLink","线程池缓冲区"],["heading","线程池缓冲区"],["body","\n"],["body","workQueue：一个阻塞队列，用来存储等待执行的任务，这个参数的选择会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择："],["body","\n\n"],["body","直接提交的队列\n\n"],["body","新任务提交给线程池时,如果线程数量<maximumPoolSize,则直接创建,否则拒绝"],["body","\n"],["body","SynchronousQueue"],["body","\n\n"],["body","\n"],["body","有界任务队列\n\n"],["body","ArrayBlockingQueue"],["body","\n"],["body","若已有线程数量 小于 corePoolSize ,则创建新的线程,直接运行"],["body","\n"],["body","若大于 corePoolSize ,则加入等待队列"],["body","\n"],["body","若等待队列已满,且当前线程数量小于maximumPoolSize则新建线程"],["body","\n"],["body","若当前线程数量已等于maximumPoolSize,则执行拒绝策略"],["body","\n\n"],["body","\n"],["body","无界任务队列\n\n"],["body","LinkedBlockingQueue"],["body","\n"],["body","若已有线程数量 小于 corePoolSize ,则创建新的线程,直接运行"],["body","\n"],["body","若大于 corePoolSize ,则加入等待队列"],["body","\n"],["body","无界队列会一直增长 直到内存耗尽"],["body","\n\n"],["body","\n"],["body","优先任务队列:特殊的无界队列\n\n"],["body","PriorityBlockingQueue:"],["body","\n\n"],["body","\n\n"],["headingLink","线程池状态"],["heading","线程池状态"],["body","\n"],["body","private static final int RUNNING = -1 << COUNT_BITS;\nprivate static final int SHUTDOWN = 0 << COUNT_BITS;\nprivate static final int STOP = 1 << COUNT_BITS;\nprivate static final int TIDYING = 2 << COUNT_BITS;\nprivate static final int TERMINATED = 3 << COUNT_BITS;\n"],["body","\n\n"],["body","SHUTDOWN 与STOP 状态 是平级状态，SHUTDOWN是等待所有任务全部完成后退出，STOP是强行停止所有任务并停止"],["body","\n\n"],["headingLink","拒绝策略"],["heading","拒绝策略"],["body","\n"],["body","内置四种拒绝策略"],["body","\n\n"],["body","AbortPolicy: 直接抛出异常"],["body","\n"],["body","CallerRunsPolicy:直接在调用者线程中运行当前被丢弃的任务"],["body","\n"],["body","DiscardOldestPolicy:丢弃最老的请求,也就是即将被执行的,并尝试再次提交当前任务"],["body","\n"],["body","DiscardPolicy:丢弃该任务"],["body","\n\n"],["headingLink","扩展线程池"],["heading","扩展线程池"],["body","\n\n"],["body","ThreadPoolExecutor 可扩展线程池"],["body","\n"],["body","code"],["body","\n\n"],["body","package com.weisanju;\n\nimport java.util.concurrent.ArrayBlockingQueue;\nimport java.util.concurrent.ThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\npublic class ThreadPoolTest {\n    public static void main(String[] args) {\n        ThreadPoolExecutor executor = new ThreadPoolExecutor(5, 10, 100, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(20)) {\n            protected void beforeExecute(Thread t, Runnable r) {\n                System.out.println(\"线程\" + t.getName() + \"开始运行\");\n            }\n            protected void afterExecute(Runnable r, Throwable t) {\n                System.out.println( r.toString()+ \"结束运行\");\n            }\n\n            protected void terminated() {\n                System.out.println(\"线程池退出\");\n            }\n        };\n        executor.execute(()->{\n            System.out.println(\"helloWorld\");\n        });\n        executor.shutdown();\n    }\n}\n\n"],["body","\n"],["h1","Executors 创建的线程池"],["body","\n"],["body","public static ExecutorService newFixedThreadPool(int nThreads){\n    return new ThreadPoolExecutor(nThreads,nThreads,0L,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());\n}\n"],["body","\n\n"],["body","它是一种固定大小的线程池；"],["body","\n"],["body","corePoolSize和maximunPoolSize都为用户设定的线程数量nThreads；"],["body","\n"],["body","keepAliveTime为0，意味着一旦有多余的空闲线程，就会被立即停止掉；但这里keepAliveTime无效；"],["body","\n"],["body","阻塞队列采用了LinkedBlockingQueue，它是一个无界队列；"],["body","\n"],["body","由于阻塞队列是一个无界队列，因此永远不可能拒绝任务；"],["body","\n"],["body","由于采用了无界队列，实际线程数量将永远维持在nThreads，因此maximumPoolSize和keepAliveTime将无效。"],["body","\n\n"],["body","public static ExecutorService newCachedThreadPool(){\n    return new ThreadPoolExecutor(0,Integer.MAX_VALUE,60L,TimeUnit.MILLISECONDS,new SynchronousQueue<Runnable>());\n}\n"],["body","\n\n"],["body","它是一个可以无限扩大的线程池；"],["body","\n"],["body","它比较适合处理执行时间比较小的任务；"],["body","\n"],["body","corePoolSize为0，maximumPoolSize为无限大，意味着线程数量可以无限大；"],["body","\n"],["body","keepAliveTime为60S，意味着线程空闲时间超过60S就会被杀死；"],["body","\n"],["body","采用SynchronousQueue装等待的任务，这个阻塞队列没有存储空间，这意味着只要有请求到来，就必须要找到一条工作线程处理他，如果当前没有空闲的线程，那么就会再创建一条新的线程。"],["body","\n\n"],["body","public static ExecutorService newSingleThreadExecutor(){\n    return new ThreadPoolExecutor(1,1,0L,TimeUnit.MILLISECONDS,new LinkedBlockingQueue<Runnable>());\n}\n"],["body","\n\n"],["body","它只会创建一条工作线程处理任务；"],["body","\n"],["body","采用的阻塞队列为LinkedBlockingQueue；"],["body","\n\n"],["h1","线程池监控"],["body","\n\n"],["body","long getTaskCount()，获取已经执行或正在执行的任务数"],["body","\n"],["body","long getCompletedTaskCount()，获取已经执行的任务数"],["body","\n"],["body","int getLargestPoolSize()，获取线程池曾经创建过的最大线程数，根据这个参数，我们可以知道线程池是否满过"],["body","\n"],["body","int getPoolSize()，获取线程池线程数"],["body","\n"],["body","int getActiveCount()，获取活跃线程数（正在执行任务的线程数）"],["body","\n\n"],["body","其次，ThreadPoolExecutor留给我们自行处理的方法有3个，它在ThreadPoolExecutor中为空实现（也就是什么都不做）。"],["body","\n\n"],["body","protected void beforeExecute(Thread t, Runnable r) // 任务执行前被调用"],["body","\n"],["body","protected void afterExecute(Runnable r, Throwable t) // 任务执行后被调用"],["body","\n"],["body","protected void terminated() // 线程池结束后被调用"],["body","\n\n"],["h1","线程池动态扩容"],["body","\n"],["body","ThreadPoolExecutor提供了动态调整线程池容量大小的方法：setCorePoolSize()和setMaximumPoolSize()，"],["body","\n\n"],["body","setCorePoolSize：设置核心池大小"],["body","\n"],["body","setMaximumPoolSize：设置线程池最大能创建的线程数目大小"],["body","\n\n"],["body","　　当上述参数从小变大时，ThreadPoolExecutor进行线程赋值，还可能立即创建新的线程来执行任务。"],["body","\n"],["h1","线程池中的线程初始化"],["body","\n\n"],["body","prestartCoreThread()：初始化一个核心线程；"],["body","\n"],["body","prestartAllCoreThreads()：初始化所有核心线程"],["body","\n\n"],["h1","java线程池的调优"],["body","\n\n"],["body","先从以下几个角度分析任务的特性："],["body","\n\n\n"],["body","任务的性质： CPU 密集型任务、IO 密集型任务和混合型任务。"],["body","\n"],["body","任务的优先级： 高、中、低。"],["body","\n"],["body","任务的执行时间： 长、中、短。"],["body","\n"],["body","任务的依赖性： 是否依赖其他系统资源，如数据库连接。"],["body","\n\n\n"],["body","任务性质不同的任务可以用不同规模的线程池分开处理。 可以通过 Runtime.getRuntime().availableProcessors() 方法获得当前设备的 CPU 个数。"],["body","\n\n\n"],["body","CPU 密集型任务配置尽可能小的线程，如配置 N c p u + 1 N_{cpu}+1Ncp**u+1 个线程的线程池。"],["body","\n"],["body","IO 密集型任务则由于线程并不是一直在执行任务，则配置尽可能多的线程，如2 ∗ N c p u 2N_{cpu}2∗Ncp**u*。"],["body","\n"],["body","混合型任务，如果可以拆分，则将其拆分成一个 CPU 密集型任务和一个 IO 密集型任务。只要这两个任务执行的时间相差不是太大，那么分解后执行的吞吐率要高于串行执行的吞吐率；如果这两个任务执行时间相差太大，则没必要进行分解。"],["body","\n\n\n"],["body","优先级不同的任务可以使用优先级队列 PriorityBlockingQueue 来处理，它可以让优先级高的任务先得到执行。但是，如果一直有高优先级的任务加入到阻塞队列中，那么低优先级的任务可能永远不能执行。"],["body","\n"],["body","执行时间不同的任务可以交给不同规模的线程池来处理，或者也可以使用优先级队列，让执行时间短的任务先执行。"],["body","\n"],["body","依赖数据库连接池的任务，因为线程提交 SQL 后需要等待数据库返回结果，线程数应该设置得较大，这样才能更好的利用 CPU。"],["body","\n"],["body","建议使用有界队列，有界队列能增加系统的稳定性和预警能力。可以根据需要设大一点，比如几千。使用无界队列，线程池的队列就会越来越大，有可能会撑满内存，导致整个系统不可用。"],["body","\n\n"],["h1","ScheduledThreadPool"],["body","\n\n"],["body","它接收SchduledFutureTask类型的任务，有两种提交任务的方式："],["body","\n\n\n"],["body","scheduledAtFixedRate"],["body","\n"],["body","scheduledWithFixedDelay"],["body","\n\n\n"],["body","SchduledFutureTask接收的参数："],["body","\n\n\n"],["body","time：任务开始的时间"],["body","\n"],["body","sequenceNumber：任务的序号"],["body","\n"],["body","period：任务执行的时间间隔"],["body","\n\n\n"],["body","它采用DelayQueue存储等待的任务"],["body","\n"],["body","DelayQueue内部封装了一个PriorityQueue，它会根据time的先后时间排序，若time相同则根据sequenceNumber排序；"],["body","\n"],["body","DelayQueue也是一个无界队列；"],["body","\n"],["body","工作线程的执行过程："],["body","\n"],["body","工作线程会从DelayQueue取已经到期的任务去执行；"],["body","\n"],["body","执行结束后重新设置任务的到期时间，再次放回DelayQueue"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/LockSupport.html"],["title","LockSupport.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","介绍"],["body","\n\n"],["body","\n"],["body","用来创建 工具锁，以及其他同步类的基本线程阻塞原语"],["body","\n"],["body","\n"],["body","\n"],["body","此类与使用它的每个线程关联一个许可"],["body","\n"],["body","\n"],["body","\n"],["body","如果许可 可用的化，调用 park立即返回，否则会阻塞"],["body","\n"],["body","\n"],["body","\n"],["body","unpark 会产生一个 许可，许可不会 积累，最多一个"],["body","\n"],["body","\n"],["body","\n"],["body","unpark 与 park 提供 了 比 Thread.suspend and Thread.resume 更 加有效的 线程 阻塞方式，支持可中断，可超时"],["body","\n"],["body","\n"],["body","\n"],["body","同时也支持 blocker object 参数，线程被阻塞时会记录该对象，以允许监视和诊断工具确定线程被阻塞的原因。（此类工具可以使用方法getBlocker（Thread）访问 blocker object）"],["body","\n"],["body","\n"],["body","\n"],["body","强烈建议使用 带 blocker 形式，而不要使用没有此参数的原始形式。"],["body","\n"],["body","\n"],["body","\n"],["body","这些方法旨在用作创建高级同步实用程序的工具,本身对大多数并发控制应用程序都不有用。"],["body","\n"],["body","\n"],["body","\n"],["body","一般使用以下形式"],["body","\n"],["body"," while (!canProceed()) { ... LockSupport.park(this); }\n"],["body","\n"],["body","任何中间对 park 或 unparkd的调用将会 影响 预期效果"],["body","\n"],["body","\n"],["body","\n"],["body","先进先出 不可重入的示意图"],["body","\n"],["body"," class FIFOMutex {\n   private final AtomicBoolean locked = new AtomicBoolean(false);\n   private final Queue<Thread> waiters\n     = new ConcurrentLinkedQueue<Thread>();\n\n   public void lock() {\n     boolean wasInterrupted = false;\n     Thread current = Thread.currentThread();\n     waiters.add(current);\n\n     // Block while not first in queue or cannot acquire lock\n     while (waiters.peek() != current ||\n            !locked.compareAndSet(false, true)) {\n       LockSupport.park(this);\n       if (Thread.interrupted()) // ignore interrupts while waiting\n         wasInterrupted = true;\n     }\n\n     waiters.remove();\n     if (wasInterrupted)          // reassert interrupt status on exit\n       current.interrupt();\n   }\n\n   public void unlock() {\n     locked.set(false);\n     LockSupport.unpark(waiters.peek());\n   }\n }\n"],["body","\n"],["body","\n\n"],["h1","Park"],["body","\n"],["body","方法声明"],["body","\n"],["body","    public static void park() {\n        UNSAFE.park(false, 0L);\n    }\n"],["body","\n"],["body","线程会阻塞在此方法，并且不会被调度，直到以下情况发生"],["body","\n\n"],["body","其他线程调用了 unPark "],["body","\n"],["body","线程被中断，不会抛异常"],["body","\n"],["body","虚假调用"],["body","\n\n"],["body","需要调用者自己检查 被唤醒原因，例如 是否被中断"],["body","\n"],["h1","超时Park"],["body","\n"],["body","public static void parkNanos(long nanos) {\n    if (nanos > 0)\n        UNSAFE.park(false, nanos);\n}\n"],["body","\n"],["h1","DeadLine Park"],["body","\n"],["body","\n"],["body","从公元 Epoch 开始的绝对时间"],["body","\n"],["body","\n"],["body","    public static void parkUntil(long deadline) {\n        UNSAFE.park(true, deadline);\n    }\n"],["body","\n"],["h1","Unpark"],["body","\n\n"],["body","调用之后 会对 信号量+1，那么下次 Park 将会 不阻塞，能够精确的 发送 可靠信号"],["body","\n\n"],["body","public static void unpark(Thread thread) {\n    if (thread != null)\n        UNSAFE.unpark(thread);\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/java内存模型.html"],["title","java内存模型.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Java内存模型"],["body","\n"],["body","​\t\tJava Memory Modle，简称 JMM，中文名称 Java内存模型，它是一个抽象的概念，用来描述或者规范访问内存变量的方式。因为各中计算机的操作系统和硬件不同，方式机制也可能不同，Java内存模型用于屏蔽（适配）各种差异，以此来达到访问各个平台的一致的效果。这也是Java夸平台的重要原因之一。"],["body","\n"],["body","主内存"],["body","\n\n"],["body","规定了所有变量都存储在主内存（Main Memory）中，各个线程又有自己的本地内存（工作内存）"],["body","\n"],["body","本地内存保存着主内存中部分变量"],["body","\n\n"],["body","JVM内存操作指令"],["body","\n\n"],["body","**lock加锁：**为了保证访问主内存变量的线程安全性，在访问前一般会加锁处理；"],["body","\n"],["body","**read读：**从主内存中读取一个变量到工作内存；"],["body","\n"],["body","**load加载：**把read读到的变量加载到工作内存的变量副本中；"],["body","\n"],["body","**use使用：**此时线程可以使用其工作内存中的变量了；"],["body","\n"],["body","**assign赋值：**将处理后的变量赋值给工作内存中的变量；"],["body","\n"],["body","**store存储：**将工作内存中的变量存储到主内存中，以新建new 一个新变量的方式存储；"],["body","\n"],["body","**write写：**将store存在的新变量的引用赋值给被处理的变量；"],["body","\n"],["body","**unload解锁：**所有的工作做完，最后解锁释放资源。"],["body","\n\n"],["h1","Java内存模型的三大特性"],["body","\n"],["body","原子性（Atomicity）"],["body","\n\n"],["body","\n"],["body","这里的原子性如同数据库事务中是原子性，一个或多个操作要么全执行成功要么全执行失败"],["body","\n"],["body","\n"],["body","\n"],["body","Java内存模型只保证单一的操作具有原子性"],["body","\n"],["body","\n\n"],["body","可见性（Visibility）"],["body","\n"],["body","如何解决内存的可见性的问题"],["body","\n\n"],["body","对进入临界区的线程做同步处理（比如 synchronized）,同一时刻仅有一个线程能够访问临界区的资源；"],["body","\n"],["body","使用 volatile 关键字保证内存可见性，它能保证访问临界区资源的所有线程总能看到共享资源的最新值；"],["body","\n"],["body","CAS无锁化。"],["body","\n\n"],["body","有序性（Ordering"],["body","\n"],["body","线程内的所有操作都是有序的，既程序执行的顺序按照代码的先后顺序执行"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/关于多线程与并发编码的心得.html"],["title","关于多线程与并发编码的心得.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","线程在参与竞争前会提前 检测竞争程度"],["body","\n\n"],["body","\n"],["body","如果其他线程啥都干完了"],["body","\n"],["body","则 当前线程只能 重开始下一轮"],["body","\n"],["body","\n"],["body","\n"],["body","如果其他线程 竞争到了，但还有扫尾工作没完成"],["body","\n"],["body","则帮忙 完成余下的工作"],["body","\n"],["body","\n"],["body","\n"],["body","如果参与竞争失败了，也尝试帮忙 完成 其他线程的扫尾工作"],["body","\n"],["body","\n"],["body","\n"],["body","如果参与竞争成功了，则开始自己的扫尾工作"],["body","\n"],["body","\n\n"],["body","关于此模式的分析详见"],["body","\n"],["body","SynchronousQueue"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/java线程状态.html"],["title","java线程状态.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","线程状态"],["body","\n"],["body","java中Thread有6种状态，分别是："],["body","\n\n"],["body","NEW - 新创建的Thread，还没有开始执行"],["body","\n"],["body","RUNNABLE - 可运行状态的Thread，包括准备运行和正在运行的。"],["body","\n"],["body","BLOCKED - 正在等待资源锁的线程"],["body","\n"],["body","WAITING - 正在无限期等待其他线程来执行某个特定操作"],["body","\n"],["body","TIMED_WAITING - 在一定的时间内等待其他线程来执行某个特定操作"],["body","\n"],["body","TERMINATED - 线程执行完毕"],["body","\n\n"],["h1","线程生命周期"],["body","\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/java锁.html"],["title","java锁.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","java-锁分类"],["heading","Java 锁分类"],["body","\n"],["body","\n"],["h1","JVM 锁优化"],["body","\n"],["headingLink","锁消除"],["heading","锁消除"],["body","\n"],["body","锁消除是在编译器级别的事情。虚拟机即时编译器在运行时，如果发现不可能存在共享数据竞争的锁，则可以消除这些对象的锁操作。"],["body","\n"],["headingLink","锁粗化"],["heading","锁粗化"],["body","\n"],["body","原则上，同步块的作用范围要尽量小。但是如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作出现在循环体内，频繁地进行互斥同步操作也会导致不必要的性能损耗。"],["body","\n"],["body","锁粗化就是增大锁的作用域,减少锁定的次数。"],["body","\n"],["h1","JVM 锁状态"],["body","\n"],["headingLink","锁的四种状态"],["heading","锁的四种状态"],["body","\n"],["body","锁主要存在四中状态，依次是："],["body","\n\n"],["body","\n"],["body","无锁状态"],["body","\n"],["body","\n"],["body","\n"],["body","偏向锁状态"],["body","\n"],["body","\n"],["body","\n"],["body","轻量级锁状态"],["body","\n"],["body","\n"],["body","\n"],["body","重量级锁状态"],["body","\n"],["body","\n\n"],["headingLink","轻量级锁"],["heading","轻量级锁"],["body","\n"],["body","引入轻量级锁的主要目的是在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。"],["body","\n"],["body","\n"],["body","当关闭偏向锁功能或者多个线程竞争偏向锁导致偏向锁升级为轻量级锁，则会尝试获取轻量级锁，其步骤如下："],["body","\n"],["body","\n"],["body","获取锁"],["body","\n\n"],["body","\n"],["body","无锁状态"],["body","\n"],["body","\n"],["body","\n"],["body","在线程私有栈帧 中建立 锁记录存储 markWord拷贝"],["body","\n"],["body","\n"],["body","\n"],["body","利用 CAS 操作尝试将对象的 MarkWord 更新为指向 LockRecord 的 指针,成功 表示竞争到锁"],["body","\n"],["body","\n\n"],["headingLink","偏向锁"],["heading","偏向锁"],["body","\n"],["headingLink","比较标识"],["heading","比较标识"],["body","\n"],["body","比较 是否为偏向锁 , 偏向锁所偏向的线程 id"],["body","\n"],["headingLink","偏向锁竞争"],["heading","偏向锁竞争"],["body","\n"],["body","CAS 竞争成功"],["body","\n"],["body","如果当前锁 偏向的线程 Id, 不为当前线程的 id, 则通过 CAS 竞争锁 竞争成功,则将线程 id 替换为当前线程 id,然后执行同步代码"],["body","\n"],["body","CAS 竞争失败"],["body","\n"],["body","CAS 竞争锁失败,证明当前存在多线程竞争情况，当到达全局安全点，获得偏向锁的线程被挂起，偏向锁升级为轻量级锁，然后被阻塞在安全点的线程继续往下执行同步代码块；"],["body","\n"],["headingLink","偏向锁释放"],["heading","偏向锁释放"],["body","\n"],["body","只有竞争才会释放锁"],["body","\n"],["body","\n"],["body","线程是不会主动去释放偏向锁，需要等待其他线程来竞争。 偏向锁的撤销需要等待全局安全点（这个时间点是上没有正在执行的代码）。"],["body","\n"],["body","\n"],["headingLink","自旋锁与自适应自旋锁"],["heading","自旋锁与自适应自旋锁"],["body","\n\n"],["body","线程如果自旋成功了，那么下次自旋的次数会更加多，因为虚拟机认为既然上次成功了，那么此次自旋也很有可能会再次成功，那么它就会允许自旋等待持续的次数更多"],["body","\n"],["body","反之,如果对于某个锁，很少有自旋能够成功的，那么在以后要或者这个锁的时候自旋的次数会减少甚至省略掉自旋过程，以免浪费处理器资源。"],["body","\n\n"],["body","自旋与非自旋"],["body","\n"],["body","\n"],["h1","JVM锁实现"],["body","\n"],["headingLink","synchronized的实现"],["heading","synchronized的实现"],["body","\n"],["body","每个锁关联一个线程持有者和一个计数器"],["body","\n\n"],["body","当计数器为0时表示该锁没有被任何线程持有，那么任何线程都都可能获得该锁"],["body","\n"],["body","当一个线程请求成功后，JVM会记下持有锁的线程id，并将计数器计为1"],["body","\n"],["body","此时其他线程请求该锁，则必须等待。"],["body","\n"],["body","而该持有锁的线程如果再次请求这个锁，就可以再次拿到这个锁，同时计数器会递增"],["body","\n\n"],["body","故 synchronized 是可重入锁"],["body","\n"],["body","java线程是基于“每线程（per-thread）”，而不是基于“每调用（per-invocation）”的"],["body","\n"],["body","参考"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/基于AQS的同步工具.html"],["title","基于AQS的同步工具 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/jvm线程模型.html"],["title","jvm线程模型.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","虚拟机运行时的java线程模型"],["body","\n"],["h1","线程创生纪"],["body","\n\n"],["body","线程模型描述了Java虚拟机中的执行单元，是所有虚拟机组件的最终使能的对象。"],["body","\n"],["body","了解Java线程模型有助于了解虚拟机运行的概况。"],["body","\n"],["body","Java程序可以轻松创建线程，虚拟机本身也需要创建线程。"],["body","\n"],["body","解释器、JIT编译器、GC是抽象出来执行某一具体任务的组件，这些组件执行任务时都需要依托线程。"],["body","\n\n"],["body","所以，为了管理这些五花八门的线程，虚拟机将它们的公有特性抽象出来构成一个线程模型，如图4-1所示。"],["body","\n"],["body","\n"],["body","1）Thread：线程基类，定义所有线程都具有的功能。"],["body","\n"],["body","2）JavaThread：Java线程在虚拟机层的实现。"],["body","\n"],["body","3）NonJavaThread：相比Thread只多了一个可以遍历所有NonJavaThread的能力。"],["body","\n"],["body","4）ServiceThread：服务线程，会处理一些杂项任务，如检查内存过低、JVMTI事件发生。"],["body","\n"],["body","5）JvmtiAgentThread：JVMTI的RunAgentThread()方法启动的线程。"],["body","\n"],["body","6）CompilerThread：JIT编译器线程。"],["body","\n"],["body","7）CodeCacheSweeperThread：清理Code Cache的线程。"],["body","\n"],["body","8）WatcherThread：计时器（Timer）线程。"],["body","\n"],["body","9）JfrThreadSampler：JFR数据采样线程。"],["body","\n"],["body","10）VMThread：虚拟机线程，会创建其他线程的线程，也会执行GC、退优化等。"],["body","\n"],["body","11）ConcurrentGCThread：与WorkerThread及其子类一样，都是为GC服务的线程。"],["body","\n"],["body","当使用命令行工具java启动应用程序时，操作系统会定位到java启动器的main函数，"],["body","\n"],["body","java启动器调用JavaMain完成一个程序的生命周期，如代码清单4-1所示，这其中涉及各种线程的创建与销毁："],["body","\n"],["body","......"],["body","\n"],["body","建议了解文章"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/线程操作.html"],["title","线程操作.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","新建线程:start"],["body","\n"],["body","Thread.start()"],["body","\n"],["h1","线程停止:stop"],["body","\n\n"],["body","Thread.stop() :线程放弃一切工作,马上退出,这样会导致很多隐患"],["body","\n"],["body","在线程内部设置停止标识:有线程自己决定在哪地方退出"],["body","\n\n"],["h1","线程中断:interrupt"],["body","\n\n"],["body","\n"],["body","java 已经实现中断标识,用于线程自行决定在哪里退出"],["body","\n\n"],["body","判断是否中断:Thread.isInterrupted()"],["body","\n"],["body","判断是否中断并清除中断标记:static Thread.interrupted()"],["body","\n"],["body","发出中断:Thread.interrupt()"],["body","\n\n"],["body","\n"],["body","\n"],["body","Thread.sleep() 捕捉到中断之后,会清除中断标记"],["body","\n"],["body","\n"],["body","\n"],["body","code"],["body","\n"],["body","package com.weisanju;\npublic class InterruptedTest {\n    public static class AThread implements  Runnable{\n        @Override\n        public void run() {\n            while(true){\n                if(Thread.currentThread().isInterrupted()){\n                    System.out.println(\"已被中断\");\n                    break;\n                }\n                System.out.println(1);\n                try {\n                    Thread.sleep(1000);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    Thread.currentThread().interrupt();\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread thread = new Thread(new AThread());\n        thread.start();\n        Thread.sleep(1000);\n\n        thread.interrupt();\n    }\n}\n"],["body","\n"],["body","\n\n"],["h1","线程等待:wait,notify"],["body","\n"],["body","Notify与NotifyAll的区别"],["body","\n\n"],["body","\n"],["body","notify总是唤醒队列中的第一个线程,且当有多个 线程在 当前锁对象 wait时, 会导致阻塞"],["body","\n"],["body","\n"],["body","\n"],["body","notifyAll 唤醒所有等在该队列的 线程,  按最近 原则"],["body","\n"],["body","\n\n"],["body","示例"],["body","\n"],["body","**示例1**\npublic class NotifyDemo {\n\n    private static void sleep(long sleepVal){\n        try{\n            Thread.sleep(sleepVal);\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n    }\n\n    private static void log(String desc){\n        System.out.println(Thread.currentThread().getName() + \" : \" + desc);\n    }\n\n    final Object lock = new Object();\n\n    public void startThreadA(){\n        new Thread(() -> {\n            synchronized (lock){\n                log(\"get lock\");\n                startThreadB();\n                try {\n                    lock.wait();\n                }catch(InterruptedException e){\n                    e.printStackTrace();\n                }\n\n                log(\"get lock after wait\");\n                log(\"release lock\");\n            }\n        }, \"thread-A\").start();\n    }\n\n    public void startThreadB(){\n        new Thread(()->{\n            synchronized (lock){\n                log(\"get lock\");\n                startThreadC();\n                try {\n                    lock.wait();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                log(\"get lock after wait\");\n                log(\"release lock\");\n            }\n        },\"thread-B\").start();\n    }\n\n    public void startThreadC(){\n        new Thread(() -> {\n            synchronized (lock){\n                log(\"get lock\");\n                sleep(100);\n                log(\"start notify\");\n                lock.notifyAll();\n                log(\"release lock\");\n            }\n        }, \"thread-C\").start();\n    }\n\n    public static void main(String[] args){\n        new NotifyDemo().startThreadA();\n    }\n}\n"],["body","\n"],["h1","挂起与继续执行:suspend,resume"],["body","\n"],["body","挂起,与恢复, 建议使用wait notify 替换,容易死锁"],["body","\n"],["body","import java.util.Objects;\n\npublic class DeadLock {\n    static final Object object = new Object();\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            NotifyDemo.log(\"线程启动\");\n            synchronized (object) {\n                Thread.currentThread().suspend();\n                NotifyDemo.log(\"线程复原\");\n            }\n        });\n        t1.start();\n        NotifyDemo.sleep(2000);\n        synchronized (object){\n            t1.resume();\n        }\n    }\n}\n\n"],["body","\n"],["h1","等待线程结束:join"],["body","\n"],["body","\n"],["body","利用 wait 特性  等待"],["body","\n"],["body","\n"],["body","join 的实现"],["body","\n\n"],["body","使用 Thread对象作为锁，当线程结束时 会调用 this.notifyAll"],["body","\n"],["body","不要使用 线程实例的  wait, notify, or notifyAll"],["body","\n\n"],["body","\npublic final synchronized void join(long millis)\n    throws InterruptedException {\n        long base = System.currentTimeMillis();\n        long now = 0;\n        if (millis < 0) {\n            throw new IllegalArgumentException(\"timeout value is negative\");\n        }\n\n        if (millis == 0) {\n            while (isAlive()) {\n                wait(0);\n            }\n        } else {\n            while (isAlive()) {\n                long delay = millis - now;\n                if (delay <= 0) {\n                    break;\n                }\n                wait(delay);\n                now = System.currentTimeMillis() - base;\n            }\n        }\n    }\n"],["body","\n"],["h1","让出CPU时间片:yeild"],["body","\n"],["body","让出CPU时间片 重新参与等待"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/JUC线程同步工具.html"],["title","JUC线程同步工具.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","可重入锁"],["heading","可重入锁"],["body","\n\n"],["body","\n"],["body","重入锁可以完全替代 synchronized 关键字, jdk1.5 之间重入锁性能远远好于 synchronized 从 1.6 开始,jdk 在 synchronized 做了大量优化,使得两者性能差距并不大"],["body","\n"],["body","\n"],["body","\n"],["body","特性"],["body","\n\n"],["body","可重入性质: 一个线程可以连续两次获得锁, 但相应的得释放两次锁"],["body","\n\n"],["body","ReentryantLock lock1 = new ReentryantLock();\nlock1.lock()\nlock1.lock()\nlock1.unlock()\nlock1.unlock()\n"],["body","\n\n"],["body","可中断性质\n\n"],["body","线程在尝试获取锁时,可被打断,并被打断后,释放相应的锁,让其他线程获取锁"],["body","\n"],["body","案例 : 线程 a, 线程 b ,a 先得到锁 1,然后请求锁 2,b 先得到锁 2,然后请求锁 1"],["body","\n"],["body","代码"],["body","\n\n"],["body","\n\n"],["body","package com.weisanju;\n\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class DeadLock {\n    private static ReentrantLock lock1= new ReentrantLock();\n    private static ReentrantLock lock2= new ReentrantLock();\n\n    public static class  ThreadTest implements  Runnable{\n        private char name;\n\n        public ThreadTest(char name) {\n            this.name = name;\n        }\n\n        @Override\n        public void run() {\n            if(name == 'A'){\n                try {\n                    lock1.lockInterruptibly();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                try {\n                    Thread.sleep(1000);\n                    lock2.lockInterruptibly();\n                    System.out.println(\"A 得到锁了\");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }finally {\n                    if(lock1.isHeldByCurrentThread()){\n                        lock1.unlock();\n                    }\n                    if(lock2.isHeldByCurrentThread()){\n                        lock2.unlock();\n                    }\n                }\n\n            }else{\n                try {\n                    lock2.lockInterruptibly();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n                try {\n                    Thread.sleep(1000);\n                    lock1.lockInterruptibly();\n                    System.out.println(\"B 得到锁了\");\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }finally {\n                    if(lock1.isHeldByCurrentThread()){\n                        lock1.unlock();\n                    }\n                    if(lock2.isHeldByCurrentThread()){\n                        lock2.unlock();\n                    }\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread ta = new Thread(new ThreadTest('A'));\n        Thread tb = new Thread(new ThreadTest('B'));\n\n        ta.start();\n        tb.start();\n\n        try {\n            Thread.sleep(4000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n\n        tb.interrupt();\n\n    }\n}\n\n"],["body","\n\n"],["body","超时性质\n\n"],["body","tryLock():尝试获取锁,获取不成功则马上返回"],["body","\n"],["body","tryLock(long mili):尝试获取锁,并等待指定时间段"],["body","\n\n"],["body","\n"],["body","公平锁\n\n"],["body","锁的申请遵循 先到先到,支持排队"],["body","\n"],["body","public ReentrantLock(boolean fair)"],["body","\n"],["body","实现公平锁,系统需要维护一个有序队列,实现成本较高,性能太低"],["body","\n"],["body","根据系统的调度,一个线程会倾向于再次获取已经持有的锁,这种锁分配是高效的"],["body","\n\n"],["body","\n\n"],["body","\n\n"],["headingLink","conditional-条件等待"],["heading","Conditional 条件等待"],["body","\n\n"],["body","与 synchronized 配合 wait,notify 使用类似 , condition 配合与 Reentryant 锁使用实现线程间通信"],["body","\n"],["body","代码"],["body","\n\n"],["body","package com.weisanju;\n\nimport java.util.concurrent.locks.Condition;\nimport java.util.concurrent.locks.ReentrantLock;\n\npublic class ConditionalTest {\n    private  static  int flag =0;\n    private static ReentrantLock lock = new ReentrantLock();\n    private static Condition condition= lock.newCondition();\n    private  static class  AThread implements Runnable{\n        @Override\n        public void run() {\n            lock.lock();\n            System.out.println(\"正等待条件发生\");\n            try {\n                condition.await();\n                System.out.println(flag);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }finally {\n                lock.unlock();\n            }\n\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        new Thread(new AThread()).start();\n        flag = 666;\n        Thread.sleep(200);\n        lock.lock();\n        System.out.println(\"已经获取锁\");\n        Thread.sleep(1000);\n\n        condition.signal();\n        lock.unlock();\n    }\n}\n"],["body","\n"],["headingLink","信号量"],["heading","信号量"],["body","\n\n"],["body","API\n\n"],["body","构造函数:public Semaphore(int premits)"],["body","\n"],["body","逻辑方法\n\n"],["body","acquire|acquireUninterruptible()|tryAcquire()"],["body","\n"],["body","release"],["body","\n\n"],["body","\n\n"],["body","\n"],["body","例子:省略"],["body","\n\n"],["headingLink","读写锁"],["heading","读写锁"],["body","\n\n"],["body","\n"],["body","读写操作互斥表"],["body","\n"],["body","|      | 读     | 写   |\n| ---- | ------ | ---- |\n| 读   | 不阻塞 | 阻塞 |\n| 写   | 阻塞   | 阻塞 |"],["body","\n"],["body","\n"],["body","\n"],["body","API"],["body","\n\n"],["body","ReentrantReadWriteLock"],["body","\n"],["body","lock.readLock(),lock.writeLock()"],["body","\n\n"],["body","\n\n"],["headingLink","倒计时"],["heading","倒计时"],["body","\n\n"],["body","API\n\n"],["body","构造函数:public CountDownLatch(int count)"],["body","\n"],["body","逻辑操作\n\n"],["body","计时器减 1:CountDownLatch.countDown()"],["body","\n"],["body","等待计时器归 0:``CountDownLatch.await();`"],["body","\n"],["body","获取计数器:CountDownLatch.getCount()"],["body","\n\n"],["body","\n\n"],["body","\n\n"],["headingLink","cyclicbarrier-循环栅栏"],["heading","CyclicBarrier 循环栅栏"],["body","\n\n"],["body","\n"],["body","每当有 parties 个 到达 wait 点时, 则执行 barrierAction"],["body","\n"],["body","\n"],["body","\n"],["body","APi"],["body","\n\n"],["body","\n"],["body","构造函数:public CyclicBarrier(int parties, Runnable barrierAction)"],["body","\n"],["body","\n"],["body","\n"],["body","await:等待"],["body","\n"],["body","\n"],["body","\n"],["body","一个线程在等待时被打断, 则其他线程抛出BrokenBarrierException,该线程抛出:InterruptedException"],["body","\n"],["body","\n"],["body","\n"],["body","code"],["body","\n"],["body","package com.weisanju;\n\nimport java.util.concurrent.BrokenBarrierException;\nimport java.util.concurrent.CyclicBarrier;\n\npublic class CyclicBarrierTest {\n    private static CyclicBarrier barrier = new CyclicBarrier(5,new BarrierRun(false));\n    public  static  class Solider implements  Runnable{\n        private int i;\n\n        public Solider(int i) {\n            this.i = i;\n        }\n\n        @Override\n        public void run() {\n            try {\n                barrier.await();\n\n                Thread.sleep(1000);\n                System.out.println(\"士兵\"+i+\"完成任务\");\n                barrier.await();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            } catch (BrokenBarrierException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    public  static  class BarrierRun implements  Runnable{\n        private boolean flag ;\n\n        public BarrierRun(boolean flag) {\n            this.flag = flag;\n        }\n\n        @Override\n        public void run() {\n            if (flag) {\n                System.out.println(\"任务完成\");\n            }else{\n                System.out.println(\"集合完毕\");\n                flag = true;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int n = 5;\n\n        for (int i = 0; i < n; i++) {\n            System.out.println(\"士兵报数:\"+i);\n            new  Thread(new Solider(i)).start();\n        }\n    }\n}\n\n"],["body","\n"],["body","\n\n"],["body","\n\n"],["headingLink","线程阻塞工具类"],["heading","线程阻塞工具类"],["body","\n"],["body","API"],["body","\n\n"],["body","LockSupport.unpack(Object),LockSupport.pack(Thread)"],["body","\n"],["body","类似于 值为 1 的信号量 操作"],["body","\n"],["body","unpack 操作发生在 pack 操作之前,unpack 使得许可可用,pack 消耗许可"],["body","\n"],["body","不需要获取锁"],["body","\n"],["body","为每一个线程都拥有一个许可证"],["body","\n"],["body","被打断之后正常返回,可以通过 Thread.isInterrputed"],["body","\n"],["body","unpack(Object):object 为日志打印时的对象"],["body","\n\n"],["body","code"],["body","\n"],["body","package com.weisanju;\n\nimport java.util.concurrent.locks.LockSupport;\n\npublic class LockSupportTest {\n    public static  class AThread implements Runnable{\n        @Override\n        public void run() {\n            LockSupport.park();\n            if(Thread.currentThread().isInterrupted()){\n                System.out.println(\"被打断了\");\n                return;\n            }\n            System.out.println(\"正常运行\");\n        }\n    }\n\n    public static void main(String[] args) {\n        Thread t1 = new Thread(new AThread());\n        Thread t2 = new Thread(new AThread());\n\n        t1.start();\n        t2.start();\n        t1.interrupt();\n        LockSupport.unpark(t2);\n    }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","05.java基础_多线程与锁/readme.html"],["title","多线程与锁 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","并发相关知识"],["heading","并发相关知识"],["body","\n"],["headingLink","并发concurrency并行parallelism"],["heading","并发(Concurrency),并行(Parallelism)"],["body","\n"],["body","并发:多项任务,交替执行"],["body","\n"],["body","并行:多项任务,同时执行"],["body","\n"],["headingLink","同步synchronous异步asynchronous"],["heading","同步(Synchronous),异步(Asynchronous)"],["body","\n"],["body","描述的是针对某个调用 获取返回结果的方式:是同步等待,还是异步通知"],["body","\n"],["body","同步:调用某项方法时,等待方法返回结果"],["body","\n"],["body","异步:调用后马上返回,结果计算完后,通知调用者"],["body","\n"],["headingLink","阻塞blocking非阻塞non-blocking"],["heading","阻塞(blocking),非阻塞(non-blocking)"],["body","\n"],["body","描述的是多线程之间的相互影响"],["body","\n"],["body","阻塞:一个线程占用了临界资源,其他线程必须等待这个线程释放资源"],["body","\n"],["body","非阻塞:访问被其他线程占用的临界资源时, 不会阻塞等待,而立即返回"],["body","\n"],["headingLink","临界区"],["heading","临界区"],["body","\n"],["body","表示公共资源,多个线程访问或修改同一个资源"],["body","\n"],["headingLink","多线程竞争锁导致会问题"],["heading","多线程竞争锁导致会问题"],["body","\n"],["body","死锁:所有线程都不能动"],["body","\n"],["body","饥饿锁:某个线程一直无法获取所需的资源"],["body","\n"],["body","活锁:线程秉承谦让的原则,主动释放给他人使用,这样可能会导致资源在两个线程中跳动,而没有一个线程正常执行"],["body","\n"],["headingLink","并发级别"],["heading","并发级别"],["body","\n"],["headingLink","阻塞"],["heading","阻塞"],["body","\n"],["body","一个线程会阻塞在 获取资源的步骤中,直到其他线程释放该资源,synchronized 的锁为阻塞级别"],["body","\n"],["headingLink","无饥饿"],["heading","无饥饿"],["body","\n"],["body","如果获取锁是公平的,各个线程排队获取锁,则该锁是无饥饿的"],["body","\n"],["headingLink","无障碍"],["heading","无障碍"],["body","\n"],["body","最弱的非阻塞调度"],["body","\n"],["body","两个线程访问同一个临界区,都不会被对方所阻塞,一旦检测到某一方把数据改动了,则所有线程操作全部回滚"],["body","\n"],["body","阻塞的控制方式是 悲观策略,假定两个线程之间很可能发生冲突,而非阻塞的调度是乐观的策略,认为多个线程不会发生冲突,或者概率不大,一旦发生冲突,就应该回滚"],["body","\n"],["headingLink","无锁"],["heading","无锁"],["body","\n"],["body","要求有一个线程可以在有限步内完成操作"],["body","\n"],["body","当所有线程都能尝试对临界区访问,但只有一个线程能 进入临界区,其他的线程会不断尝试"],["body","\n"],["headingLink","无等待"],["heading","无等待"],["body","\n\n"],["body","要求所有线程必须在有限步内完成"],["body","\n"],["body","典型的无等待结构是 RCU(read-copy-update),读无等待,更新时,先取得副本更新,然后适时写回"],["body","\n\n"],["headingLink","并行的两个重要定律"],["heading","并行的两个重要定律"],["body","\n"],["headingLink","amdahl-定律"],["heading","Amdahl 定律"],["body","\n\n"],["body","定义了串行系统并行化的加速比的计算公式,和理论上限"],["body","\n\n"],["body","$$\n加速比 = 优化前系统耗时 / 优化后系统耗时\\F:为系统串行比例\\T_1:为一个处理器的耗时\\T_n:为n个处理器优化后的耗时\\T_n = T_1(F+\\frac{1}{n}(1-F))\\加速比 = \\frac{T_1}{T_n} = \\frac{1}{F+\\frac{1}{n}(1-F)}\n$$"],["body","\n\n"],["body","由公式可分析出\n\n"],["body","CPU 处理器数量趋近于无穷,那么加速比与系统串行率成反比"],["body","\n"],["body","如果系统串行率为 50%,则系统最大加速比为 2"],["body","\n\n"],["body","\n\n"],["headingLink","gustafson-定律"],["heading","Gustafson 定律"],["body","\n"],["body","$$\na:串行时间,b:并行时间,n处理器个数\\\n实际执行时间 = a+b\\\n总执行时间 = a+nb\\\n加速比= \\frac{a+nb}{a+b}\\\n串行比例 = F = \\frac{a}{a+b}\\\n加速比 = \\frac{a+nb}{a+b} = \\frac{a}{a+b}+\\frac{n(a+b-a)}{a+b}=F+n*(1-F)=n-F*(n-1)\n$$"],["body","\n\n"],["body","\n"],["body","两个定律的不同点"],["body","\n\n"],["body","Amdahl 定律侧重于 当 总任务一定时, 当串行比例一定时,加速比是有上线的"],["body","\n"],["body","Gustafson 定律侧重于 不管 F 的值有多高,只要 n 足够大,有足够的时间和 工作量,就能达到某个加速比"],["body","\n\n"],["body","\n\n"],["headingLink","java-多线程并发原则"],["heading","java 多线程并发原则"],["body","\n"],["headingLink","原子性-atomicity"],["heading","原子性 Atomicity"],["body","\n"],["body","函数调用过程中 不可被其他线程打断,要么成功,要么失败"],["body","\n"],["headingLink","可见性-visibility"],["heading","可见性 visibility"],["body","\n"],["body","对某一线程修改了某一个共享变量,其他线程能够立刻知道"],["body","\n"],["headingLink","有序性-ordering"],["heading","有序性 ordering"],["body","\n\n"],["body","在程序编译时可能 有指令重排:通过指令重排 减少 CPU 流水线指令的停顿"],["body","\n"],["body","线程重排原则\n\n"],["body","程序顺序原则:一个线程内保证语义的串行性,不保证并行性"],["body","\n"],["body","volatile 变量的写 先发生于读"],["body","\n"],["body","锁规则:解锁必然发生在 加锁前"],["body","\n"],["body","传递性: a 先于 b,b 先于 c,a 必然先于 c"],["body","\n"],["body","线程 start 方法优先于它的每一个动作"],["body","\n"],["body","所有操作先于 线程的终结"],["body","\n"],["body","中断先于 被中断线程的代码"],["body","\n"],["body","对象的构造函数执行,结束先于 finalize 方法"],["body","\n\n"],["body","\n\n"],["headingLink","java-并行程序基础"],["heading","java 并行程序基础"],["body","\n"],["headingLink","线程状态变更图"],["heading","线程状态变更图"],["body","\n"],["body","\n"],["headingLink","线程基本操作"],["heading","线程基本操作"],["body","\n"],["body","线程操作链接"],["body","\n"],["headingLink","volatile-关键字"],["heading","volatile 关键字"],["body","\n"],["body","修饰变量"],["body","\n"],["body","告知各个线程,取变量值时,从主内存中取,不要从副本取"],["body","\n"],["headingLink","线程组"],["heading","线程组"],["body","\n"],["body","package com.weisanju;\n\npublic class ThreadGroupTest {\n    public static class AThread implements  Runnable{\n        @Override\n        public void run() {\n            System.out.println(Thread.currentThread().getName());\n        }\n    }\n\n    public static void main(String[] args) {\n        ThreadGroup threadGroup = new ThreadGroup(\"xjq\");\n        Thread t1 = new Thread(threadGroup,new AThread(),\"t1\");\n        Thread t2 = new Thread(threadGroup,new AThread(),\"t2\");\n        t1.start();\n        t2.start();\n        threadGroup.list();\n        System.out.println(threadGroup.activeCount());\n        System.out.println(threadGroup.activeGroupCount());\n    }\n}\n\n"],["body","\n"],["headingLink","守护线程"],["heading","守护线程"],["body","\n\n"],["body","\n"],["body","线程分为用户线程 ,守护线程"],["body","\n"],["body","\n"],["body","\n"],["body","当用户线程执行完毕之后, 守护线程会自行退出"],["body","\n"],["body","\n"],["body","\n"],["body","守护线程一般完成系统性服务,例如垃圾回收,JIT 线程"],["body","\n"],["body","\n"],["body","\n"],["body","代码"],["body","\n"],["body","package com.weisanju;\n\npublic class DeamonTest {\n    public static class  Athread implements  Runnable{\n\n        @Override\n        public void run() {\n            while(true){\n                System.out.println(1);\n                try {\n                    Thread.sleep(500);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Thread t = new Thread(new Athread());\n        t.setDaemon(true);\n        t.start();\n        Thread.sleep(2000);\n    }\n}\n\n"],["body","\n"],["body","\n\n"],["headingLink","线程优先级"],["heading","线程优先级"],["body","\n\n"],["body","Thread.MAX_PRIORITY = 10"],["body","\n"],["body","Thread.NORM_PRIORITY = 5"],["body","\n"],["body","Thread.MIN_PRIORITY = 1"],["body","\n\n"],["headingLink","java-锁"],["heading","Java 锁"],["body","\n"],["body","java 锁"],["body","\n"],["headingLink","jdk-并发包"],["heading","jdk 并发包"],["body","\n"],["body","JUC线程同步工具"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","09.jvm_Arthas/4.ArthasTunnel.html"],["title","ArthasTunnel.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","arthas-tunnel"],["heading","Arthas Tunnel"],["body","\n"],["body","通过Arthas Tunnel Server/Client 来远程管理/连接多个Agent。"],["body","\n"],["body","比如，在流式计算里，Java进程可以是在不同的机器启动的，想要使用Arthas去诊断会比较麻烦，因为用户通常没有机器的权限，即使登陆机器也分不清是哪个Java进程。"],["body","\n"],["body","在这种情况下，可以使用Arthas Tunnel Server/Client。"],["body","\n"],["headingLink","下载部署arthas-tunnel-server"],["heading","下载部署arthas tunnel server"],["body","\n"],["body","https://github.com/alibaba/arthas/releases"],["body","\n\n"],["body","从Maven仓库下载："],["body","\n"],["body","从Github Releases页下载： https://github.com/alibaba/arthas/releases"],["body","\n\n"],["body","Arthas tunnel server是一个spring boot fat jar应用，直接java -jar启动："],["body","\n"],["body","java -jar  arthas-tunnel-server.jar\n"],["body","\n"],["body","默认情况下，arthas tunnel server的web端口是8080，arthas agent连接的端口是7777。"],["body","\n"],["body","启动之后，可以访问 http://127.0.0.1:8080/ ，再通过agentId连接到已注册的arthas agent上。"],["body","\n"],["body","通过Spring Boot的Endpoint，可以查看到具体的连接信息： http://127.0.0.1:8080/actuator/arthas ，登陆用户名是arthas，密码在arthas tunnel server的日志里可以找到，比如："],["body","\n"],["body","32851 [main] INFO  o.s.b.a.s.s.UserDetailsServiceAutoConfiguration\n\nUsing generated security password: f1dca050-3777-48f4-a577-6367e55a78a2\n"],["body","\n"],["headingLink","启动arthas时连接到tunnel-server"],["heading","启动arthas时连接到tunnel server"],["body","\n"],["body","在启动arthas，可以传递--tunnel-server参数，比如："],["body","\n"],["body","as.sh --tunnel-server 'ws://127.0.0.1:7777/ws'\n"],["body","\n"],["body","as.sh --tunnel-server 'ws://47.75.156.201:80/ws'\n"],["body","\n\n"],["body","如果有特殊需求，可以通过--agent-id参数里指定agentId。默认情况下，会生成随机ID。"],["body","\n\n"],["body","attach成功之后，会打印出agentId，比如："],["body","\n"],["body","如果是启动时没有连接到 tunnel server，也可以在后续自动重连成功之后，通过 session命令来获取 agentId："],["body","\n"],["body","以上面的为例，在浏览器里访问 http://47.75.156.201/arthas/?port=80 ，输入 agentId，就可以连接到本机上的arthas了。"],["body","\n"],["headingLink","最佳实践"],["heading","最佳实践"],["body","\n"],["body","\n"],["body","注意，agentId要保持唯一，否则会在tunnel server上冲突，不能正常工作。"],["body","\n"],["body","\n"],["body","如果 arthas agent配置了 appName，则生成的agentId会带上appName的前缀。"],["body","\n"],["body","比如在加上启动参数：as.sh --tunnel-server 'ws://127.0.0.1:7777/ws' --app-name demoapp ，则生成的agentId可能是demoapp_URJZ5L48RPBR2ALI5K4V。"],["body","\n"],["body","Tunnel server会以_做分隔符，提取出appName，方便按应用进行管理。"],["body","\n"],["body","\n"],["body","另外，也可以在解压的arthas目录下的 arthas.properties，或者在spring boot应用的application.properties里配置appName。"],["body","\n"],["body","\n"],["headingLink","tunnel-server的管理页面"],["heading","Tunnel Server的管理页面"],["body","\n"],["body","在本地启动tunnel-server，然后使用as.sh attach，并且指定应用名--app-name test："],["body","\n"],["body","http://localhost:8080/apps.html"],["body","\n"],["headingLink","权限管理"],["heading","权限管理"],["body","\n"],["body","目前tunnel server没有专门的权限管理，用户需要自行开发，对app name鉴权。"],["body","\n"],["headingLink","集群方式管理"],["heading","集群方式管理"],["body","\n"],["body","如果希望部署多台 tunnel server，可以通过nginx做转发，redis来保存agent信息。"],["body","\n\n"],["body","nginx需要配置sticky session，保证用户web socket连接到同一个后端tunnel server上。简单的配置方式是用ip_hash。"],["body","\n\n"],["headingLink","arthas-tunnel-server的工作原理"],["heading","Arthas tunnel server的工作原理"],["body","\n"],["body","browser <-> arthas tunnel server <-> arthas tunnel client <-> arthas agent\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","09.jvm_Arthas/8.thread命令.html"],["title","thread命令.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","thread"],["heading","thread"],["body","\n"],["body","\n"],["body","查看当前线程信息，查看线程的堆栈"],["body","\n"],["body","\n"],["headingLink","参数说明"],["heading","参数说明"],["body","\n"],["body","参数名称"],["body","参数说明"],["body","\n"],["body","id"],["body","线程id"],["body","\n"],["body","[n:]"],["body","指定最忙的前N个线程并打印堆栈"],["body","\n"],["body","[b]"],["body","找出当前阻塞其他线程的线程"],["body","\n"],["body","[i <value>]"],["body","指定cpu使用率统计的采样间隔，单位为毫秒，默认值为200"],["body","\n"],["body","[--all]"],["body","显示所有匹配的线程"],["body","\n\n\n"],["headingLink","cpu使用率是如何统计出来的"],["heading","cpu使用率是如何统计出来的？"],["body","\n"],["body","这里的cpu使用率与linux 命令top -H -p <pid> 的线程%CPU类似，一段采样间隔时间内，当前JVM里各个线程的增量cpu时间与采样间隔时间的比例。"],["body","\n"],["headingLink","工作原理说明"],["heading","工作原理说明："],["body","\n\n"],["body","首先第一次采样，获取所有线程的CPU时间(调用的是java.lang.management.ThreadMXBean#getThreadCpuTime()及sun.management.HotspotThreadMBean.getInternalThreadCpuTimes()接口)"],["body","\n"],["body","然后睡眠等待一个间隔时间（默认为200ms，可以通过-i指定间隔时间）"],["body","\n"],["body","再次第二次采样，获取所有线程的CPU时间，对比两次采样数据，计算出每个线程的增量CPU时间"],["body","\n"],["body","线程CPU使用率 = 线程增量CPU时间 / 采样间隔时间 * 100%"],["body","\n\n"],["body","\n"],["body","注意： 这个统计也会产生一定的开销（JDK这个接口本身开销比较大），因此会看到as的线程占用一定的百分比，为了降低统计自身的开销带来的影响，可以把采样间隔拉长一些，比如5000毫秒。"],["body","\n"],["body","\n"],["body","\n"],["body","另外一种查看Java进程的线程cpu使用率方法：可以使用show-busy-java-threads这个脚本"],["body","\n"],["body","\n\n"],["body","没有线程ID，包含[Internal]表示为JVM内部线程，参考dashboard命令的介绍。"],["body","\n"],["body","cpuUsage为采样间隔时间内线程的CPU使用率，与dashboard命令的数据一致。"],["body","\n"],["body","deltaTime为采样间隔时间内线程的增量CPU时间，小于1ms时被取整显示为0ms。"],["body","\n"],["body","time 线程运行总CPU时间。"],["body","\n\n"],["body","注意：线程栈为第二采样结束时获取，不能表明采样间隔时间内该线程都是在处理相同的任务。建议间隔时间不要太长，可能间隔时间越大越不准确。 可以根据具体情况尝试指定不同的间隔时间，观察输出结果。"],["body","\n"],["headingLink","当没有参数时显示第一页线程的信息"],["heading","当没有参数时，显示第一页线程的信息"],["body","\n"],["body","默认按照CPU增量时间降序排列，只显示第一页数据。"],["body","\n"],["body","$ thread\nThreads Total: 33, NEW: 0, RUNNABLE: 9, BLOCKED: 0, WAITING: 3, TIMED_WAITING: 4, TERMINATED: 0, Internal threads: 17\nID   NAME                           GROUP          PRIORITY  STATE     %CPU      DELTA_TIME TIME      INTERRUPT DAEMON\n-1   C2 CompilerThread0             -              -1        -         5.06      0.010      0:0.973   false     true\n-1   C1 CompilerThread0             -              -1        -         0.95      0.001      0:0.603   false     true\n23   arthas-command-execute         system         5         RUNNABLE  0.17      0.000      0:0.226   false     true\n-1   VM Periodic Task Thread        -              -1        -         0.05      0.000      0:0.094   false     true\n-1   Sweeper thread                 -              -1        -         0.04      0.000      0:0.011   false     true\n-1   G1 Young RemSet Sampling       -              -1        -         0.02      0.000      0:0.025   false     true\n12   Attach Listener                system         9         RUNNABLE  0.0       0.000      0:0.022   false     true\n11   Common-Cleaner                 InnocuousThrea 8         TIMED_WAI 0.0       0.000      0:0.000   false     true\n3    Finalizer                      system         8         WAITING   0.0       0.000      0:0.000   false     true\n2    Reference Handler              system         10        RUNNABLE  0.0       0.000      0:0.000   false     true\n4    Signal Dispatcher              system         9         RUNNABLE  0.0       0.000      0:0.000   false     true\n15   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.029   false     true\n22   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.196   false     true\n24   arthas-NettyHttpTelnetBootstra system         5         RUNNABLE  0.0       0.000      0:0.038   false     true\n16   arthas-NettyWebsocketTtyBootst system         5         RUNNABLE  0.0       0.000      0:0.001   false     true\n17   arthas-NettyWebsocketTtyBootst system         5         RUNNABLE  0.0       0.000      0:0.001   false     true\n"],["body","\n"],["headingLink","thread-all-显示所有匹配的线程"],["heading","thread –all, 显示所有匹配的线程"],["body","\n"],["body","显示所有匹配线程信息，有时需要获取全部JVM的线程数据进行分析。"],["body","\n"],["headingLink","thread-id-显示指定线程的运行堆栈"],["heading","thread id, 显示指定线程的运行堆栈"],["body","\n"],["body","$ thread 1\n\"main\" Id=1 WAITING on java.util.concurrent.CountDownLatch$Sync@29fafb28\n    at sun.misc.Unsafe.park(Native Method)\n    -  waiting on java.util.concurrent.CountDownLatch$Sync@29fafb28\n    at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireSharedInterruptibly(AbstractQueuedSynchronizer.java:997)\n    at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireSharedInterruptibly(AbstractQueuedSynchronizer.java:1304)\n    at java.util.concurrent.CountDownLatch.await(CountDownLatch.java:231)\n"],["body","\n"],["headingLink","thread--b-找出当前阻塞其他线程的线程"],["heading","thread -b, 找出当前阻塞其他线程的线程"],["body","\n"],["body","有时候我们发现应用卡住了， 通常是由于某个线程拿住了某个锁， 并且其他线程都在等待这把锁造成的。 为了排查这类问题， arthas提供了thread -b， 一键找出那个罪魁祸首。"],["body","\n"],["body","\n"],["body","注意， 目前只支持找出synchronized关键字阻塞住的线程， 如果是java.util.concurrent.Lock， 目前还不支持。"],["body","\n"],["body","\n"],["headingLink","thread--i-指定采样时间间隔"],["heading","thread -i, 指定采样时间间隔"],["body","\n\n"],["body","thread -i 1000 : 统计最近1000ms内的线程CPU时间。"],["body","\n"],["body","thread -n 3 -i 1000 : 列出1000ms内最忙的3个线程栈"],["body","\n\n"],["headingLink","thread-state-查看指定状态的线程"],["heading","thread –state ，查看指定状态的线程"],["body","\n"],["body","[\tarthas@28114]$ thread --state WAITING\n\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","09.jvm_Arthas/2.快速入门.html"],["title","快速入门.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","启动game"],["heading","启动Game"],["body","\n"],["body","curl -O https://arthas.aliyun.com/math-game.jar\njava -jar math-game.jar\n"],["body","\n"],["headingLink","启动arthas"],["heading","启动arthas"],["body","\n"],["body","curl -O https://arthas.aliyun.com/arthas-boot.jar\njava -jar arthas-boot.jar\n"],["body","\n\n"],["body","执行该程序的用户需要和目标进程具有相同的权限。比如以admin用户来执行：sudo su admin && java -jar arthas-boot.jar 或 sudo -u admin -EH java -jar arthas-boot.jar。"],["body","\n"],["body","如果attach不上目标进程，可以查看~/logs/arthas/ 目录下的日志。"],["body","\n"],["body","如果下载速度比较慢，可以使用aliyun的镜像：java -jar arthas-boot.jar --repo-mirror aliyun --use-http"],["body","\n"],["body","java -jar arthas-boot.jar -h 打印更多参数信息。"],["body","\n\n"],["body","选择java进程"],["body","\n"],["headingLink","查看dashboard"],["heading","查看dashboard"],["body","\n"],["body","输入dashboard，按回车/enter，会展示当前进程的信息，按ctrl+c可以中断执行。"],["body","\n"],["headingLink","线程mainclass"],["heading","线程MainClass"],["body","\n"],["body","thread 1会打印线程ID 1的栈，通常是main函数的线程。"],["body","\n"],["body","\n$ thread 1 | grep 'main('\n    at demo.MathGame.main(MathGame.java:17)\n"],["body","\n"],["headingLink","通过jad来反编译main-class"],["heading","通过jad来反编译Main Class"],["body","\n"],["body","jad demo.MathGame\n"],["body","\n"],["headingLink","watch"],["heading","watch"],["body","\n"],["body","通过watch命令来查看demo.MathGame#primeFactors函数的返回值：\n"],["body","\n"],["body","更多的功能可以查看进阶使用。"],["body","\n"],["headingLink","退出arthas"],["heading","退出arthas"],["body","\n"],["body","如果只是退出当前的连接，可以用quit或者exit命令。Attach到目标进程上的arthas还会继续运行，端口会保持开放，下次连接时可以直接连接上。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","09.jvm_Arthas/6.JavaAgent启动.html"],["title","JavaAgent启动.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","以Java Agent的方式启动"],["body","\n"],["body","通常Arthas是以动态attach的方式来诊断应用，但从3.2.0版本起，Arthas支持直接以 java agent的方式启动。"],["body","\n"],["body","比如下载全量的arthas zip包，解压之后以 -javaagent 的参数指定arthas-agent.jar来启动："],["body","\n"],["headingLink","全量包下载"],["heading","全量包下载"],["body","\n"],["body","https://archiva-maven-storage-prod.oss-cn-beijing.aliyuncs.com/repository/central/com/taobao/arthas/arthas-packaging/3.6.1/arthas-packaging-3.6.1-bin.zip?Expires=1652839996&OSSAccessKeyId=LTAIfU51SusnnfCC&Signature=DrOrNOwZArUvnI5ljtI14IJfE6c%3D\n"],["body","\n"],["headingLink","目录结构"],["heading","目录结构"],["body","\n"],["body","lib               \nasync-profiler  :\nas-service.bat  \narthas-spy.jar     \narthas-core.jar    \narthas-boot.jar   \narthas-tunnel-server.jar\nlogback.xml    \ninstall-local.sh  \nas.sh           \nas.bat          \narthas.properties  \narthas-client.jar  \narthas-agent.jar\n"],["body","\n"],["headingLink","idea-remote-target以javaagent启动"],["heading","IDEA remote target以JavaAgent启动"],["body","\n"],["body","JVM参数配置如下"],["body","\n"],["body","-javaagent:\"/Users/weisanju/IdeaProjects/QualityCheckServiceCustomerPrivate/extralib/arthas-agent.jar=/root/arthas/arthas-core.jar;\" -Darthas.httpPort=8563 -Darthas.ip=127.0.0.1  -Darthas.appName=xjq -Darthas.tunnelServer=ws://t227:7777/ws\n"],["body","\n"],["body","其中"],["body","\n\n"],["body","/Users/weisanju/IdeaProjects/QualityCheckServiceCustomerPrivate/extralib/arthas-agent.jar 表示本机的 arthas-agent jar地址"],["body","\n"],["body","=/root/arthas/arthas-core.jar; 表示远程地址core 包地址。注意 arthas-spy.jar     包 也必须要在 此目录"],["body","\n"],["body","-Darthas.httpPort=8563 -Darthas.ip=127.0.0.1  -Darthas.appName=xjq 配置基本属性"],["body","\n"],["body","-Darthas.appName=xjq -Darthas.tunnelServer=ws://t227:7777/ws 表示 tunnel server的配置、"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","09.jvm_Arthas/3.命令.html"],["title","命令.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","基础命令"],["heading","基础命令"],["body","\n\n"],["body","help——查看命令帮助信息"],["body","\n"],["body","cat——打印文件内容，和linux里的cat命令类似"],["body","\n"],["body","echo–打印参数，和linux里的echo命令类似"],["body","\n"],["body","grep——匹配查找，和linux里的grep命令类似"],["body","\n"],["body","base64——base64编码转换，和linux里的base64命令类似"],["body","\n"],["body","tee——复制标准输入到标准输出和指定的文件，和linux里的tee命令类似"],["body","\n"],["body","pwd——返回当前的工作目录，和linux命令类似"],["body","\n"],["body","cls——清空当前屏幕区域"],["body","\n"],["body","session——查看当前会话的信息"],["body","\n"],["body","reset——重置增强类，将被 Arthas 增强过的类全部还原，Arthas 服务端关闭时会重置所有增强过的类"],["body","\n"],["body","version——输出当前目标 Java 进程所加载的 Arthas 版本号"],["body","\n"],["body","history——打印命令历史"],["body","\n"],["body","quit——退出当前 Arthas 客户端，其他 Arthas 客户端不受影响"],["body","\n"],["body","stop——关闭 Arthas 服务端，所有 Arthas 客户端全部退出"],["body","\n"],["body","keymap——Arthas快捷键列表及自定义快捷键"],["body","\n\n"],["headingLink","jvm相关"],["heading","jvm相关"],["body","\n\n"],["body","dashboard——当前系统的实时数据面板"],["body","\n"],["body","thread——查看当前 JVM 的线程堆栈信息"],["body","\n"],["body","jvm——查看当前 JVM 的信息"],["body","\n"],["body","sysprop——查看和修改JVM的系统属性"],["body","\n"],["body","sysenv——查看JVM的环境变量"],["body","\n"],["body","vmoption——查看和修改JVM里诊断相关的option"],["body","\n"],["body","perfcounter——查看当前 JVM 的Perf Counter信息"],["body","\n"],["body","logger——查看和修改logger"],["body","\n"],["body","getstatic——查看类的静态属性"],["body","\n"],["body","ognl——执行ognl表达式"],["body","\n"],["body","mbean——查看 Mbean 的信息"],["body","\n"],["body","heapdump——dump java heap, 类似jmap命令的heap dump功能"],["body","\n"],["body","vmtool——从jvm里查询对象，执行forceGc"],["body","\n\n"],["headingLink","classclassloader相关"],["heading","class/classloader相关"],["body","\n\n"],["body","sc——查看JVM已加载的类信息"],["body","\n"],["body","sm——查看已加载类的方法信息"],["body","\n"],["body","jad——反编译指定已加载类的源码"],["body","\n"],["body","mc——内存编译器，内存编译.java文件为.class文件"],["body","\n"],["body","retransform——加载外部的.class文件，retransform到JVM里"],["body","\n"],["body","redefine——加载外部的.class文件，redefine到JVM里"],["body","\n"],["body","dump——dump 已加载类的 byte code 到特定目录"],["body","\n"],["body","classloader——查看classloader的继承树，urls，类加载信息，使用classloader去getResource"],["body","\n\n"],["headingLink","monitorwatchtrace相关"],["heading","monitor/watch/trace相关"],["body","\n"],["body","\n"],["body","请注意，这些命令，都通过字节码增强技术来实现的，会在指定类的方法中插入一些切面来实现数据统计和观测，因此在线上、预发使用时，请尽量明确需要观测的类、方法以及条件，诊断结束要执行 stop 或将增强过的类执行 reset 命令。"],["body","\n"],["body","\n\n"],["body","monitor——方法执行监控"],["body","\n"],["body","watch——方法执行数据观测"],["body","\n"],["body","trace——方法内部调用路径，并输出方法路径上的每个节点上耗时"],["body","\n"],["body","stack——输出当前方法被调用的调用路径"],["body","\n"],["body","tt——方法执行数据的时空隧道，记录下指定方法每次调用的入参和返回信息，并能对这些不同的时间下调用进行观测"],["body","\n\n"],["headingLink","profiler火焰图"],["heading","profiler/火焰图"],["body","\n\n"],["body","profiler–使用async-profiler对应用采样，生成火焰图"],["body","\n\n"],["headingLink","鉴权"],["heading","鉴权"],["body","\n\n"],["body","auth–鉴权"],["body","\n\n"],["headingLink","options"],["heading","options"],["body","\n\n"],["body","options——查看或设置Arthas全局开关"],["body","\n\n"],["headingLink","管道"],["heading","管道"],["body","\n"],["body","Arthas支持使用管道对上述命令的结果进行进一步的处理，如sm java.lang.String * | grep 'index'"],["body","\n\n"],["body","grep——搜索满足条件的结果"],["body","\n"],["body","plaintext——将命令的结果去除ANSI颜色"],["body","\n"],["body","wc——按行统计输出结果"],["body","\n\n"],["headingLink","后台异步任务"],["heading","后台异步任务"],["body","\n"],["body","当线上出现偶发的问题，比如需要watch某个条件，而这个条件一天可能才会出现一次时，异步后台任务就派上用场了，详情请参考这里"],["body","\n\n"],["body","使用 > 将结果重写向到日志文件，使用 & 指定命令是后台运行，session断开不影响任务执行（生命周期默认为1天）"],["body","\n"],["body","jobs——列出所有job"],["body","\n"],["body","kill——强制终止任务"],["body","\n"],["body","fg——将暂停的任务拉到前台执行"],["body","\n"],["body","bg——将暂停的任务放到后台执行"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","09.jvm_Arthas/9.trace.html"],["title","trace.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","trace"],["heading","trace"],["body","\n"],["body","\n"],["body","方法内部调用路径，并输出方法路径上的每个节点上耗时"],["body","\n"],["body","\n"],["body","trace 命令能主动搜索 class-pattern／method-pattern 对应的方法调用路径，渲染和统计整个调用链路上的所有性能开销和追踪调用链路。"],["body","\n"],["body","参数名称"],["body","参数说明"],["body","\n"],["body","class-pattern"],["body","类名表达式匹配"],["body","\n"],["body","method-pattern"],["body","方法名表达式匹配"],["body","\n"],["body","condition-express"],["body","条件表达式"],["body","\n"],["body","[E]"],["body","开启正则表达式匹配，默认为通配符匹配"],["body","\n"],["body","[n:]"],["body","命令执行次数"],["body","\n"],["body","#cost"],["body","方法执行耗时"],["body","\n\n\n"],["body","这里重点要说明的是观察表达式，观察表达式的构成主要由 ognl 表达式组成，所以你可以这样写\"{params,returnObj}\"，只要是一个合法的 ognl 表达式，都能被正常支持。"],["body","\n"],["body","观察的维度也比较多，主要体现在参数 advice 的数据结构上。Advice 参数最主要是封装了通知节点的所有信息。"],["body","\n"],["body","请参考表达式核心变量中关于该节点的描述。"],["body","\n\n"],["body","特殊用法请参考：https://github.com/alibaba/arthas/issues/71"],["body","\n"],["body","OGNL表达式官网：https://commons.apache.org/proper/commons-ognl/language-guide.html"],["body","\n\n"],["body","很多时候我们只想看到某个方法的rt大于某个时间之后的trace结果，现在Arthas可以按照方法执行的耗时来进行过滤了，例如trace *StringUtils isBlank '#cost>100'表示当执行时间超过100ms的时候，才会输出trace的结果。"],["body","\n"],["body","\n"],["body","watch/stack/trace这个三个命令都支持#cost"],["body","\n"],["body","\n"],["headingLink","注意事项"],["heading","注意事项"],["body","\n"],["body","trace 能方便的帮助你定位和发现因 RT 高而导致的性能问题缺陷，但其每次只能跟踪一级方法的调用链路。"],["body","\n\n"],["body","参考：Trace命令的实现原理"],["body","\n"],["body","3.3.0 版本后，可以使用动态Trace功能，不断增加新的匹配类，参考下面的示例。"],["body","\n"],["body","目前不支持 trace java.lang.Thread getName，参考issue: #1610 ，考虑到不是非常必要场景，且修复有一定难度，因此当前暂不修复"],["body","\n\n"],["headingLink","使用参考"],["heading","使用参考"],["body","\n"],["body","$ trace demo.MathGame run\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 28 ms.\n`---ts=2019-12-04 00:45:08;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    `---[0.617465ms] demo.MathGame:run()\n        `---[0.078946ms] demo.MathGame:primeFactors() #24 [throws Exception]\n \n`---ts=2019-12-04 00:45:09;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    `---[1.276874ms] demo.MathGame:run()\n        `---[0.03752ms] demo.MathGame:primeFactors() #24 [throws Exception]\n"],["body","\n"],["headingLink","trace次数限制"],["heading","trace次数限制"],["body","\n"],["body","$ trace demo.MathGame run -n 1\nPress Q or Ctrl+C to abort.\nAffect(class-cnt:1 , method-cnt:1) cost in 20 ms.\n`---ts=2019-12-04 00:45:53;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    `---[0.549379ms] demo.MathGame:run()\n        +---[0.059839ms] demo.MathGame:primeFactors() #24\n        `---[0.232887ms] demo.MathGame:print() #25\n \nCommand execution times exceed limit: 1, so command will exit. You can set it with -n option.\n"],["body","\n"],["headingLink","包含jdk的函数"],["heading","包含jdk的函数"],["body","\n\n"],["body","--skipJDKMethod <value>  skip jdk method trace, default value true."],["body","\n\n"],["headingLink","据调用耗时过滤"],["heading","据调用耗时过滤"],["body","\n"],["body","$ trace demo.MathGame run '#cost > 10'\n"],["body","\n"],["body","\n"],["body","只会展示耗时大于10ms的调用路径，有助于在排查问题的时候，只关注异常情况"],["body","\n"],["body","\n\n"],["body","是不是很眼熟，没错，在 JProfiler 等收费软件中你曾经见识类似的功能，这里你将可以通过命令就能打印出指定调用路径。 友情提醒下，trace 在执行的过程中本身是会有一定的性能开销，在统计的报告中并未像 JProfiler 一样预先减去其自身的统计开销。所以这统计出来有些许的不准，渲染路径上调用的类、方法越多，性能偏差越大。但还是能让你看清一些事情的。"],["body","\n"],["body","[12.033735ms] 的含义，12.033735 的含义是：当前节点在当前步骤的耗时，单位为毫秒"],["body","\n"],["body","[0,0,0ms,11]xxx:yyy() [throws Exception]，对该方法中相同的方法调用进行了合并，0,0,0ms,11 表示方法调用耗时，min,max,total,count；throws Exception 表明该方法调用中存在异常返回"],["body","\n"],["body","这里存在一个统计不准确的问题，就是所有方法耗时加起来可能会小于该监测方法的总耗时，这个是由于 Arthas 本身的逻辑会有一定的耗时"],["body","\n\n"],["headingLink","trace多个类或者多个函数"],["heading","trace多个类或者多个函数"],["body","\n"],["body","trace命令只会trace匹配到的函数里的子调用，并不会向下trace多层。因为trace是代价比较贵的，多层trace可能会导致最终要trace的类和函数非常多。"],["body","\n"],["body","可以用正则表匹配路径上的多个类和函数，一定程度上达到多层trace的效果。"],["body","\n"],["body","trace -E com.test.ClassA|org.test.ClassB method1|method2|method3\n"],["body","\n"],["headingLink","排除掉指定的类"],["heading","排除掉指定的类"],["body","\n"],["body","trace javax.servlet.Filter * --exclude-class-pattern com.demo.TestFilter\n"],["body","\n"],["headingLink","动态trace"],["heading","动态trace"],["body","\n"],["body","打开终端1，trace上面demo里的run函数，可以看到打印出 listenerId: 1："],["body","\n"],["body","[arthas@59161]$ trace demo.MathGame run\nPress Q or Ctrl+C to abort.\nAffect(class count: 1 , method count: 1) cost in 112 ms, listenerId: 1\n`---ts=2020-07-09 16:48:11;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    `---[1.389634ms] demo.MathGame:run()\n        `---[0.123934ms] demo.MathGame:primeFactors() #24 [throws Exception]\n \n`---ts=2020-07-09 16:48:12;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    `---[3.716391ms] demo.MathGame:run()\n        +---[3.182813ms] demo.MathGame:primeFactors() #24\n        `---[0.167786ms] demo.MathGame:print() #25\n"],["body","\n"],["body","现在想要深入子函数primeFactors，可以打开一个新终端2，使用telnet localhost 3658连接上arthas，再trace primeFactors时，指定listenerId。"],["body","\n"],["body","[arthas@59161]$ trace demo.MathGame primeFactors --listenerId 1\nPress Q or Ctrl+C to abort.\nAffect(class count: 1 , method count: 1) cost in 34 ms, listenerId: 1\n"],["body","\n"],["body","这时终端2打印的结果，说明已经增强了一个函数：Affect(class count: 1 , method count: 1)，但不再打印更多的结果。"],["body","\n"],["body","再查看终端1，可以发现trace的结果增加了一层，打印了primeFactors函数里的内容："],["body","\n"],["body","`---ts=2020-07-09 16:49:29;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    `---[0.492551ms] demo.MathGame:run()\n        `---[0.113929ms] demo.MathGame:primeFactors() #24 [throws Exception]\n            `---[0.061462ms] demo.MathGame:primeFactors()\n                `---[0.001018ms] throw:java.lang.IllegalArgumentException() #46\n \n`---ts=2020-07-09 16:49:30;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@3d4eac69\n    `---[0.409446ms] demo.MathGame:run()\n        +---[0.232606ms] demo.MathGame:primeFactors() #24\n        |   `---[0.1294ms] demo.MathGame:primeFactors()\n        `---[0.084025ms] demo.MathGame:print() #25\n"],["body","\n"],["body","通过指定listenerId的方式动态trace，可以不断深入。另外 watch/tt/monitor等命令也支持类似的功能。"],["body","\n"],["headingLink","trace结果时间不准确问题"],["heading","trace结果时间不准确问题"],["body","\n"],["body","比如下面的结果里：0.705196 > (0.152743 + 0.145825)"],["body","\n"],["body","$ trace demo.MathGame run -n 1\nPress Q or Ctrl+C to abort.\nAffect(class count: 1 , method count: 1) cost in 66 ms, listenerId: 1\n`---ts=2021-02-08 11:27:36;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@232204a1\n    `---[0.705196ms] demo.MathGame:run()\n        +---[0.152743ms] demo.MathGame:primeFactors() #24\n        `---[0.145825ms] demo.MathGame:print() #25\n"],["body","\n"],["body","那么其它的时间消耗在哪些地方？"],["body","\n\n"],["body","\n"],["body","没有被trace到的函数。比如java.* 下的函数调用默认会忽略掉。通过增加--skipJDKMethod false参数可以打印出来。"],["body","\n"],["body","$ trace demo.MathGame run --skipJDKMethod false\nPress Q or Ctrl+C to abort.\nAffect(class count: 1 , method count: 1) cost in 35 ms, listenerId: 2\n`---ts=2021-02-08 11:27:48;thread_name=main;id=1;is_daemon=false;priority=5;TCCL=sun.misc.Launcher$AppClassLoader@232204a1\n    `---[0.810591ms] demo.MathGame:run()\n        +---[0.034568ms] java.util.Random:nextInt() #23\n        +---[0.119367ms] demo.MathGame:primeFactors() #24 [throws Exception]\n        +---[0.017407ms] java.lang.StringBuilder:<init>() #28\n        +---[0.127922ms] java.lang.String:format() #57\n        +---[min=0.01419ms,max=0.020221ms,total=0.034411ms,count=2] java.lang.StringBuilder:append() #57\n        +---[0.021911ms] java.lang.Exception:getMessage() #57\n        +---[0.015643ms] java.lang.StringBuilder:toString() #57\n        `---[0.086622ms] java.io.PrintStream:println() #57\n"],["body","\n"],["body","\n"],["body","\n"],["body","非函数调用的指令消耗。比如 i++, getfield等指令。"],["body","\n"],["body","\n"],["body","\n"],["body","在代码执行过程中，JVM可能出现停顿，比如GC，进入同步块等。"],["body","\n"],["body","\n\n"],["headingLink","使用--v-参数打印更多信息"],["heading","使用 -v 参数打印更多信息"],["body","\n"],["body","\n"],["body","watch/trace/monitor/stack/tt 命令都支持 -v 参数"],["body","\n"],["body","\n"],["body","当命令执行之后，没有输出结果。有两种可能："],["body","\n\n"],["body","匹配到的函数没有被执行"],["body","\n"],["body","条件表达式结果是 false"],["body","\n\n"],["body","但用户区分不出是哪种情况。"],["body","\n"],["body","使用 -v选项，则会打印Condition express的具体值和执行结果，方便确认。"],["body","\n"],["body","参考链接"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","09.jvm_Arthas/1.安装.html"],["title","安装.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","快速安装"],["heading","快速安装"],["body","\n"],["body","curl -O https://arthas.aliyun.com/arthas-boot.jar\njava -jar arthas-boot.jar\n"],["body","\n"],["headingLink","一键安装"],["heading","一键安装"],["body","\n"],["body","curl -L https://arthas.aliyun.com/install.sh | sh\n"],["body","\n"],["headingLink","全量安装"],["heading","全量安装"],["body","\n"],["body","https://archiva-maven-storage-prod.oss-cn-beijing.aliyuncs.com/repository/central/com/taobao/arthas/arthas-packaging/3.6.1/arthas-packaging-3.6.1-bin.zip?Expires=1652839996&OSSAccessKeyId=LTAIfU51SusnnfCC&Signature=DrOrNOwZArUvnI5ljtI14IJfE6c%3D\n"],["body","\n"],["body","解压后，在文件夹里有arthas-boot.jar，直接用java -jar的方式启动："],["body","\n"],["headingLink","打印帮助信息"],["heading","打印帮助信息"],["body","\n"],["body","java -jar arthas-boot.jar -h\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","09.jvm_Arthas/5.Idea插件.html"],["title","Idea插件.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","IDEA Plugin"],["body","\n"],["headingLink","arthas-idea部分命令可视化"],["heading","Arthas-idea（部分命令可视化）"],["body","\n\n"],["body","Jetbrains 插件获取地址： https://plugins.jetbrains.com/plugin/13581-arthas-idea"],["body","\n"],["body","使用文档：https://www.yuque.com/arthas-idea-plugin"],["body","\n"],["body","源码地址： https://github.com/WangJi92/arthas-idea-plugin"],["body","\n\n"],["headingLink","alibaba-cloud-toolkit-热部署组件一键retransform"],["heading","Alibaba Cloud Toolkit 热部署组件（一键retransform）"],["body","\n"],["body","\n"],["body","热部署组件支持一键将编辑器中修改的 Java 源码快速编译，并更新到远端应用服务中，免去手动 dump、mc 的过程。此外，也可以一键还原 retransform 的类文件。"],["body","\n"],["body","\n\n"],["body","Jetbrains 插件获取地址： https://plugins.jetbrains.com/plugin/11386-alibaba-cloud-toolkit"],["body","\n"],["body","使用文档：https://help.aliyun.com/document_detail/381077.html"],["body","\n"],["body","联系我们：请加Alibaba Cloud Toolkit (应用观测器) 钉钉用户交流群（群号：34965379）"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","09.jvm_Arthas/7.火焰图.html"],["title","火焰图.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","火焰图"],["heading","火焰图"],["body","\n"],["body","软件的性能分析，往往需要查看 CPU 耗时，了解瓶颈在哪里。"],["body","\n"],["body","火焰图（flame graph）是性能分析的利器。本文介绍它的基本用法。"],["body","\n"],["headingLink","一perf-命令"],["heading","一、perf 命令"],["body","\n"],["body","让我们从 perf 命令（performance 的缩写）讲起，它是 Linux 系统原生提供的性能分析工具，会返回 CPU 正在执行的函数名以及调用栈（stack）。"],["body","\n"],["body","通常，它的执行频率是 99Hz（每秒99次），如果99次都返回同一个函数名，那就说明 CPU 这一秒钟都在执行同一个函数，可能存在性能问题。"],["body","\n"],["body","\n"],["body","$ sudo perf record -F 99 -p 13204 -g -- sleep 30\n"],["body","\n"],["body","\n"],["body","上面的代码中，perf record表示记录，-F 99表示每秒99次，-p 13204是进程号，即对哪个进程进行分析，-g表示记录调用栈，sleep 30则是持续30秒。"],["body","\n"],["body","运行后会产生一个庞大的文本文件。如果一台服务器有16个 CPU，每秒抽样99次，持续30秒，就得到 47,520 个调用栈，长达几十万甚至上百万行。"],["body","\n"],["body","为了便于阅读，perf record命令可以统计每个调用栈出现的百分比，然后从高到低排列。"],["body","\n"],["body","\n"],["body","$ sudo perf report -n --stdio\n"],["body","\n"],["body","\n"],["body","这个结果还是不易读，所以才有了火焰图。"],["body","\n"],["body","火焰图是基于 perf 结果产生的 SVG 图片，用来展示 CPU 的调用栈。"],["body","\n"],["body","y 轴表示调用栈，每一层都是一个函数。调用栈越深，火焰就越高，顶部就是正在执行的函数，下方都是它的父函数。"],["body","\n"],["body","x 轴表示抽样数，如果一个函数在 x 轴占据的宽度越宽，就表示它被抽到的次数多，即执行的时间长。注意，x 轴不代表时间，而是所有的调用栈合并后，按字母顺序排列的。"],["body","\n"],["body","火焰图就是看顶层的哪个函数占据的宽度最大。只要有\"平顶\"（plateaus），就表示该函数可能存在性能问题。"],["body","\n"],["body","颜色没有特殊含义，因为火焰图表示的是 CPU 的繁忙程度，所以一般选择暖色调。"],["body","\n"],["headingLink","三互动性"],["heading","三、互动性"],["body","\n"],["body","火焰的每一层都会标注函数名，鼠标悬浮时会显示完整的函数名、抽样抽中的次数、占据总抽样次数的百分比。下面是一个例子。"],["body","\n"],["body","\n"],["body","mysqld'JOIN::exec (272,959 samples, 78.34 percent)\n"],["body","\n"],["body","\n"],["body","按下 Ctrl + F 会显示一个搜索框，用户可以输入关键词或正则表达式，所有符合条件的函数名会高亮显示。"],["body","\n"],["headingLink","火焰图示例"],["heading","火焰图示例"],["body","\n"],["body","func_c \nfunc_b \nfunc_a \nstart_thread \n\nfunc_d \nfunc_a \nstart_thread \n\nfunc_d \nfunc_a \nstart_thread\n"],["body","\n"],["body","上面代码中，start_thread是启动线程，调用了func_a。后者又调用了func_b和func_d，而func_b又调用了func_c。"],["body","\n"],["body","经过合并处理后，得到了下面的结果，即存在两个调用栈，第一个调用栈抽中1次，第二个抽中2次。"],["body","\n"],["body","\n"],["body","start_thread;func_a;func_b;func_c 1 \nstart_thread;func_a;func_d 2\n"],["body","\n"],["body","\n"],["body","\n"],["body","上面图片中，最顶层的函数`g()`占用 CPU 时间最多。`d()`的宽度最大，但是它直接耗用 CPU 的部分很少。\n\n`b()`和`c()`没有直接消耗 CPU。因此，如果要调查性能问题，首先应该调查`g()`，其次是`i()`。\n\n另外，从图中可知a()有两个分支b()和h()，这表明a()里面可能有一个条件语句，而b()分支消耗的 CPU 大大高于h()。\n\n"],["body","\n"],["headingLink","局限"],["heading","局限"],["body","\n"],["body","两种情况下，无法画出火焰图，需要修正系统行为。"],["body","\n"],["body","（1）调用栈不完整"],["body","\n"],["body","当调用栈过深时，某些系统只返回前面的一部分（比如前10层）。"],["body","\n"],["body","（2）函数名缺失"],["body","\n"],["body","有些函数没有名字，编译器只用内存地址来表示（比如匿名函数）。"],["body","\n"],["headingLink","node-应用的火焰图"],["heading","Node 应用的火焰图"],["body","\n"],["body","Node 应用的火焰图就是对 Node 进程进行性能抽样，与其他应用的操作是一样的。"],["body","\n"],["body","\n"],["body","$ perf record -F 99 -p `pgrep -n node` -g -- sleep 30\n"],["body","\n"],["body","\n"],["headingLink","浏览器的火焰图"],["heading","浏览器的火焰图"],["body","\n"],["body","Chrome 浏览器可以生成页面脚本的火焰图，用来进行 CPU 分析。"],["body","\n"],["body","打开开发者工具，切换到 Performance 面板。然后，点击\"录制\"按钮，开始记录数据。这时，可以在页面进行各种操作，然后停止\"录制\"。"],["body","\n"],["body","这时，开发者工具会显示一个时间轴。它的下方就是火焰图。"],["body","\n"],["body","浏览器的火焰图与标准火焰图有两点差异：它是倒置的（即调用栈最顶端的函数在最下方）；x 轴是时间轴，而不是抽样次数。"],["body","\n"],["headingLink","arthas生成火焰图"],["heading","Arthas生成火焰图"],["body","\n"],["body","profiler 命令支持生成应用热点的火焰图。本质上是通过不断的采样，然后把收集到的采样结果生成火焰图。"],["body","\n"],["headingLink","命令"],["heading","命令"],["body","\n"],["body","profiler` 命令基本运行结构是 `profiler action [actionArg]\n"],["body","\n"],["body","参数名称"],["body","参数说明"],["body","\n"],["body","action"],["body","要执行的操作"],["body","\n"],["body","actionArg"],["body","属性名模式"],["body","\n"],["body","[i:]"],["body","采样间隔（单位：ns）（默认值：10'000'000，即10 ms）"],["body","\n"],["body","[f:]"],["body","将输出转储到指定路径"],["body","\n"],["body","[d:]"],["body","运行评测指定秒"],["body","\n"],["body","[e:]"],["body","要跟踪哪个事件（cpu, alloc, lock, cache-misses等），默认是cpu"],["body","\n\n\n"],["headingLink","启动profiler"],["heading","启动profiler"],["body","\n"],["body","$ profiler start\nStarted [cpu] profiling\n"],["body","\n"],["headingLink","获取已采集的sample的数量"],["heading","获取已采集的sample的数量"],["body","\n"],["body","$ profiler getSamples\n23\n"],["body","\n"],["headingLink","查看profiler状态"],["heading","查看profiler状态"],["body","\n"],["body","$ profiler status\n[cpu] profiling is running for 4 seconds\n"],["body","\n"],["body","可以查看当前profiler在采样哪种event和采样时间。"],["body","\n"],["headingLink","停止profiler"],["heading","停止profiler"],["body","\n"],["headingLink","生成html格式结果"],["heading","生成html格式结果"],["body","\n"],["body","默认情况下，结果文件是html格式，也可以用--format参数指定："],["body","\n"],["body","$ profiler stop --format html\nprofiler output file: /tmp/test/arthas-output/20211207-111550.html\nOK\n"],["body","\n"],["body","或者在--file参数里用文件名指名格式。比如--file /tmp/result.html 。"],["body","\n"],["headingLink","通过浏览器查看arthas-output下面的profiler结果"],["heading","通过浏览器查看arthas-output下面的profiler结果"],["body","\n"],["body","默认情况下，arthas使用3658端口，则可以打开： http://localhost:3658/arthas-output/ 查看到arthas-output目录下面的profiler结果："],["body","\n"],["headingLink","profiler支持的events"],["heading","profiler支持的events"],["body","\n"],["body","在不同的平台，不同的OS下面，支持的events各有不同。比如在macos下面："],["body","\n"],["body","$ profiler list\nBasic events:\n  cpu\n  alloc\n  lock\n  wall\n  itimer\n"],["body","\n"],["body","在linux下面"],["body","\n"],["body","$ profiler list\nBasic events:\n  cpu\n  alloc\n  lock\n  wall\n  itimer\nPerf events:\n  page-faults\n  context-switches\n  cycles\n  instructions\n  cache-references\n  cache-misses\n  branches\n  branch-misses\n  bus-cycles\n  L1-dcache-load-misses\n  LLC-load-misses\n  dTLB-load-misses\n  mem:breakpoint\n  trace:tracepoint\n"],["body","\n"],["body","如果遇到OS本身的权限/配置问题，然后缺少部分event，可以参考async-profiler本身文档：async-profiler"],["body","\n"],["body","可以用--event参数指定要采样的事件，比如对alloc事件进入采样："],["body","\n"],["body","$ profiler start --event alloc\n"],["body","\n"],["headingLink","恢复采样"],["heading","恢复采样"],["body","\n"],["body","$ profiler resume\nStarted [cpu] profiling\n"],["body","\n"],["body","start和resume的区别是：start是新开始采样，resume会保留上次stop时的数据。"],["body","\n"],["body","通过执行profiler getSamples可以查看samples的数量来验证。"],["body","\n"],["headingLink","使用execute来执行复杂的命令"],["heading","使用execute来执行复杂的命令"],["body","\n"],["body","比如开始采样："],["body","\n"],["body","profiler execute 'start,framebuf=5000000'\n"],["body","\n"],["body","停止采样，并保存到指定文件里："],["body","\n"],["body","profiler execute 'stop,file=/tmp/result.html'\n"],["body","\n"],["body","具体的格式参考： arguments.cpp"],["body","\n"],["headingLink","查看所有支持的action"],["heading","查看所有支持的action"],["body","\n"],["body","$ profiler actions\nSupported Actions: [resume, dumpCollapsed, getSamples, start, list, execute, version, stop, load, dumpFlat, actions, dumpTraces, status]\n"],["body","\n"],["headingLink","查看版本"],["heading","查看版本"],["body","\n"],["body","$ profiler version\nAsync-profiler 1.6 built on Sep  9 2019\nCopyright 2019 Andrei Pangin\n"],["body","\n"],["headingLink","配置-framebuf-参数"],["heading","配置 framebuf 参数"],["body","\n"],["body","\n"],["body","如果遇到生成的火焰图有 [frame_buffer_overflow]，则需要增大 framebuf（默认值是 1’000’000），可以显式配置，比如："],["body","\n"],["body","\n"],["body","profiler start --framebuf 5000000\n"],["body","\n"],["headingLink","配置-includeexclude-来过滤数据"],["heading","配置 include/exclude 来过滤数据"],["body","\n"],["body","如果应用比较复杂，生成的内容很多，想只关注部分数据，可以通过 include/exclude 来过滤。比如"],["body","\n"],["body","profiler start --include 'java/*' --include 'demo/*' --exclude '*Unsafe.park*'\n"],["body","\n"],["headingLink","指定执行时间"],["heading","指定执行时间"],["body","\n"],["body","比如，希望profiler执行 300 秒自动结束，可以用 -d/--duration 参数指定："],["body","\n"],["body","profiler start --duration 300\n"],["body","\n"],["headingLink","生成-jfr格式结果"],["heading","生成 jfr格式结果"],["body","\n"],["body","\n"],["body","注意，jfr只支持在 start时配置。如果是在stop时指定，则不会生效。"],["body","\n"],["body","\n"],["body","profiler start --file /tmp/test.jfr\n"],["body","\n"],["body","file参数支持一些变量："],["body","\n\n"],["body","时间戳： --file /tmp/test-%t.jfr"],["body","\n"],["body","进程ID： --file /tmp/test-%p.jfr"],["body","\n\n"],["body","生成的结果可以用支持jfr格式的工具来查看。比如："],["body","\n\n"],["body","JDK Mission Control ： https://github.com/openjdk/jmc"],["body","\n"],["body","JProfiler ： https://github.com/alibaba/arthas/issues/1416"],["body","\n\n"],["headingLink","生成的火焰图里的-unknown"],["heading","生成的火焰图里的 unknown"],["body","\n\n"],["body","https://github.com/jvm-profiling-tools/async-profiler/discussions/409"],["body","\n\n"],["body","GITHUB"],["body","\n"],["headingLink","参考链接"],["heading","参考链接"],["body","\n"],["body","https://arthas.aliyun.com/doc/profiler.html#profiler"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/Selector（选择器）.html"],["title","Selector（选择器）.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Selector（选择器）介绍"],["body","\n"],["body","Selector 一般称 为选择器 ，当然你也可以翻译为 多路复用器 。它是Java NIO核心组件中的一个，用于检查一个或多个NIO Channel（通道）的状态是否处于可读、可写。如此可以实现单线程管理多个channels,也就是可以管理多个网络链接。"],["body","\n"],["body","使用Selector的好处在于： 使用更少的线程来就可以来处理通道了， 相比使用多个线程，避免了线程上下文切换带来的开销。"],["body","\n"],["h1","Selector（选择器）的使用方法介绍"],["body","\n"],["headingLink","通过调用selectoropen方法创建一个selector对象"],["heading","通过调用Selector.open()方法创建一个Selector对象"],["body","\n"],["body","如下："],["body","\n"],["body","Selector selector = Selector.open();\n"],["body","\n"],["headingLink","注册channel到selector"],["heading","注册Channel到Selector"],["body","\n"],["body","Channel必须是非阻塞的。"],["body","\n"],["body","所以FileChannel不适用Selector，因为FileChannel不能切换为非阻塞模式，更准确的来说是因为FileChannel没有继承SelectableChannel。Socket channel可以正常使用。"],["body","\n"],["body","SelectableChannel抽象类 有一个 configureBlocking（） 方法用于使通道处于阻塞模式或非阻塞模式。"],["body","\n"],["body","channel.configureBlocking(false);\nSelectionKey key = channel.register(selector, Selectionkey.OP_READ);\n"],["body","\n"],["h1","对IO事件分类"],["body","\n"],["body","register() 方法的第二个参数。这是一个“ interest集合 ”，意思是在通过Selector监听Channel时对什么事件感兴趣。可以监听四种不同类型的事件："],["body","\n\n"],["body","Connect"],["body","\n"],["body","Accept"],["body","\n"],["body","Read"],["body","\n"],["body","Write"],["body","\n\n"],["body","通道触发了一个事件意思是该事件已经就绪。比如某个Channel成功连接到另一个服务器称为“ 连接就绪 ”。一个Server Socket Channel准备好接收新进入的连接称为“ 接收就绪 ”。一个有数据可读的通道可以说是“ 读就绪 ”。等待写数据的通道可以说是“ 写就绪 ”。"],["body","\n"],["body","这四种事件用SelectionKey的四个常量来表示："],["body","\n"],["body","SelectionKey.OP_CONNECT\nSelectionKey.OP_ACCEPT\nSelectionKey.OP_READ\nSelectionKey.OP_WRITE\n"],["body","\n"],["body","如果你对不止一种事件感兴趣，使用或运算符即可，如下："],["body","\n"],["body","int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE;\n"],["body","\n"],["h1","SelectionKey介绍"],["body","\n"],["body","一个SelectionKey键表示了一个特定的通道对象和一个特定的选择器对象之间的注册关系。"],["body","\n"],["body","key.attachment(); //返回SelectionKey的attachment，attachment可以在注册channel的时候指定。\nkey.channel(); // 返回该SelectionKey对应的channel。\nkey.selector(); // 返回该SelectionKey对应的Selector。\nkey.interestOps(); //返回代表需要Selector监控的IO操作的bit mask\nkey.readyOps(); // 返回一个bit mask，代表在相应channel上可以进行的IO操作。\n"],["body","\n"],["body","key.interestOps():"],["body","\n"],["body","我们可以通过以下方法来判断Selector是否对Channel的某种事件感兴趣"],["body","\n"],["body","int interestSet = selectionKey.interestOps(); \nboolean isInterestedInAccept = (interestSet & SelectionKey.OP_ACCEPT) == SelectionKey.OP_ACCEPT；\nboolean isInterestedInConnect = interestSet & SelectionKey.OP_CONNECT;\nboolean isInterestedInRead = interestSet & SelectionKey.OP_READ;\nboolean isInterestedInWrite = interestSet & SelectionKey.OP_WRITE;\n"],["body","\n"],["body","key.readyOps()"],["body","\n"],["body","ready 集合是通道已经准备就绪的操作的集合。JAVA中定义以下几个方法用来检查这些操作是否就绪."],["body","\n"],["body","//创建ready集合的方法\nint readySet = selectionKey.readyOps();\n//检查这些操作是否就绪的方法\nkey.isAcceptable();//是否可读，是返回 true\nboolean isWritable()：//是否可写，是返回 true\nboolean isConnectable()：//是否可连接，是返回 true\nboolean isAcceptable()：//是否可接收，是返回 true\n"],["body","\n"],["body","Channel channel = key.channel();\nSelector selector = key.selector();\nkey.attachment();\n"],["body","\n"],["body","还可以在用register()方法向Selector注册Channel的时候附加对象。如："],["body","\n"],["body","SelectionKey key = channel.register(selector, SelectionKey.OP_READ, theObject);\n\n"],["body","\n"],["h1","从Selector中选择channel(Selecting Channels via a Selector)"],["body","\n"],["body","Selector维护的三种类型SelectionKey集合："],["body","\n\n"],["body","\n"],["body","已注册的键的集合(Registered key set)"],["body","\n"],["body","所有与选择器关联的通道所生成的键的集合称为已经注册的键的集合。并不是所有注册过的键都仍然有效。这个集合通过 keys() 方法返回，并且可能是空的。这个已注册的键的集合不是可以直接修改的；试图这么做的话将引发java.lang.UnsupportedOperationException。"],["body","\n"],["body","\n"],["body","\n"],["body","已选择的键的集合(Selected key set)"],["body","\n"],["body","所有与选择器关联的通道所生成的键的集合称为已经注册的键的集合。并不是所有注册过的键都仍然有效。这个集合通过 keys() 方法返回，并且可能是空的。这个已注册的键的集合不是可以直接修改的；试图这么做的话将引发java.lang.UnsupportedOperationException。"],["body","\n"],["body","\n"],["body","\n"],["body","已取消的键的集合(Cancelled key set)"],["body","\n"],["body","已注册的键的集合的子集，这个集合包含了 cancel() 方法被调用过的键(这个键已经被无效化)，但它们还没有被注销。这个集合是选择器对象的私有成员，因而无法直接访问。"],["body","\n"],["body","注意："],["body","\n\n"],["body","\n"],["body","当键被取消（ 可以通过isValid( ) 方法来判断）时，它将被放在相关的选择器的已取消的键的集合里。"],["body","\n"],["body","\n"],["body","\n"],["body","注册不会立即被取消，但键会立即失效。"],["body","\n"],["body","\n"],["body","\n"],["body","当再次调用 select( ) 方法时（或者一个正在进行的select()调用结束时），已取消的键的集合中的被取消的键将被清理掉，并且相应的注销也将完成。通道会被注销，而新的SelectionKey将被返回。"],["body","\n"],["body","\n"],["body","\n"],["body","当通道关闭时，所有相关的键会自动取消（记住，一个通道可以被注册到多个选择器上）。"],["body","\n"],["body","\n"],["body","\n"],["body","当选择器关闭时，所有被注册到该选择器的通道都将被注销，并且相关的键将立即被无效化（取消）。一旦键被无效化，调用它的与选择相关的方法就将抛出CancelledKeyException。"],["body","\n"],["body","\n\n"],["body","\n\n"],["h1","select()方法介绍："],["body","\n"],["body","在刚初始化的Selector对象中，这三个集合都是空的。 通过Selector的select（）方法可以选择已经准备就绪的通道 （这些通道包含你感兴趣的的事件）。比如你对读就绪的通道感兴趣，那么select（）方法就会返回读事件已经就绪的那些通道。下面是Selector几个重载的select()方法："],["body","\n\n"],["body","int select()：阻塞到至少有一个通道在你注册的事件上就绪了。"],["body","\n"],["body","int select(long timeout)：和select()一样，但最长阻塞时间为timeout毫秒。"],["body","\n"],["body","int selectNow()：非阻塞，只要有通道就绪就立刻返回。"],["body","\n\n"],["headingLink","返回值解析"],["heading","返回值解析"],["body","\n"],["body","select()方法返回的int值表示有多少通道已经就绪,"],["body","\n\n"],["body","\n"],["body","是自上次调用select()方法后有多少通道变成就绪状态"],["body","\n"],["body","\n"],["body","\n"],["body","之前在select（）调用时进入就绪的通道不会在本次调用中被记入，"],["body","\n"],["body","\n"],["body","\n"],["body","而在前一次select（）调用进入就绪但现在已经不再处于就绪的通道也不会被记入"],["body","\n"],["body","\n\n"],["body","example"],["body","\n"],["body","例如：首次调用select()方法，如果有一个通道变成就绪状态，返回了1，若再次调用select()方法，如果另一个通道就绪了，它会再次返回1。如果对第一个就绪的channel没有做任何操作，现在就有两个就绪的通道，但在每次select()方法调用之间，只有一个通道就绪了。"],["body","\n"],["body","一旦调用select()方法，并且返回值不为0时，则 可以通过调用Selector的selectedKeys()方法来访问已选择键集合 。如下："],["body","\n"],["body","Set selectedKeys = selector.selectedKeys();\nIterator keyIterator = selectedKeys.iterator();\nwhile(keyIterator.hasNext()) {\n    SelectionKey key = keyIterator.next();\n    if(key.isAcceptable()) {\n        // a connection was accepted by a ServerSocketChannel.\n    } else if (key.isConnectable()) {\n        // a connection was established with a remote server.\n    } else if (key.isReadable()) {\n        // a channel is ready for reading\n    } else if (key.isWritable()) {\n        // a channel is ready for writing\n    }\n    keyIterator.remove();\n}\n"],["body","\n"],["h1","停止选择的方法"],["body","\n"],["body","选择器执行选择的过程，系统底层会依次询问每个通道是否已经就绪，这个过程可能会造成调用线程进入阻塞状态,那么我们有以下三种方式可以唤醒在select"],["body","\n\n"],["body","wakeup()方法 ：通过调用Selector对象的wakeup（）方法让处在阻塞状态的select()方法立刻返回\n该方法使得选择器上的第一个还没有返回的选择操作立即返回。如果当前没有进行中的选择操作，那么下一次对select()方法的一次调用将立即返回。"],["body","\n"],["body","close()方法 ：通过close（）方法关闭Selector，\n该方法使得任何一个在选择操作中阻塞的线程都被唤醒（类似wakeup（）），同时使得注册到该Selector的所有Channel被注销，所有的键将被取消，但是Channel本身并不会关闭。"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/从IO到NIO个人理解.html"],["title","从IO到NIO个人理解.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","阻塞IO有什么弊端"],["body","\n\n"],["body","建立连接与 读取连接输入 这两个过程 需要时间"],["body","\n"],["body","在单线程情况下：连接需要一个个处理，效率低下"],["body","\n"],["body","在多线程情况 下：如果海量连接 来到 会严重消耗 服务器线程"],["body","\n"],["body","在多线程情况下，海量连接，中只有一小部分是活跃连接，大部分是无效连接，为每个连接维护一个 线程浪费服务器性能"],["body","\n\n"],["h1","非阻塞IO如何改变上述情况的？"],["body","\n"],["body","实现思路"],["body","\n\n"],["body","首先所有的读写都是异步的"],["body","\n"],["body","然后 把所有连接统一管理，并轮询操作系统内核 某一个 连接 是否可读可写"],["body","\n\n"],["body","好处"],["body","\n\n"],["body","使用单一线程 就能管理 海量 连接"],["body","\n"],["body","还可针对指定连接 指定读或写事件"],["body","\n\n"],["body","不足之处"],["body","\n\n"],["body","\n"],["body","当连接数过多时 在用户态 轮询 会造成 过多的系统调用而 响应延时提高"],["body","\n"],["body","解决办法：让系统自己轮询：然后通知 上层用户。这就是 Selector模式 在Linux 中 select poll"],["body","\n"],["body","\n"],["body","\n"],["body","每次传送海量 连接FD给 内核  数据复制 也会造成延时"],["body","\n"],["body","解决办法：在内核中开辟一段空间，使得所有连接FD存放至此 ：省去了 COPY FD的时间"],["body","\n"],["body","\n"],["body","\n"],["body","每次连接可读之后：仍 需要把 数据从 网卡 到 内核内存，到用户内存 ，copy仍需要时间"],["body","\n"],["body","\n\n"],["h1","客户端"],["body","\n"],["body","package com.weisanju.ioStudy;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.StandardCharsets;\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\npublic class SelfNioTimeClient {\n    public static void main(String[] args) throws IOException {\n        SocketChannel open = SocketChannel.open();\n        open.connect(new InetSocketAddress(8080));\n        ByteBuffer allocate = ByteBuffer.allocate(1024);\n\n        while (true) {\n            Scanner scanner = new Scanner(System.in);\n            String yourName = scanner.next();\n            if (\"quit\".equals(yourName)) {\n                open.close();\n                System.out.println(\"client exit\");\n                return;\n            }\n            open.write(ByteBuffer.wrap(yourName.getBytes(StandardCharsets.UTF_8)));\n            int read = open.read(allocate);\n            allocate.flip();\n            System.out.println(StandardCharsets.UTF_8.decode(allocate));\n            allocate.clear();\n        }\n    }\n}\n"],["body","\n"],["h1","普通IO复用实现思路"],["body","\n"],["body","package com.weisanju.ioStudy;\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.channels.ServerSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.time.LocalDateTime;\nimport java.util.ArrayList;\nimport java.util.LinkedList;\nimport java.util.List;\n\npublic class SelfNioTimeServer {\n    public static void main(String[] args) throws IOException, InterruptedException {\n        List<SocketChannel> objects = new LinkedList<>();\n        ByteBuffer allocate = ByteBuffer.allocate(1024);\n\n        ServerSocketChannel open = ServerSocketChannel.open();\n\n        open.bind(new InetSocketAddress(8080));\n        open.configureBlocking(false);\n\n\n        //设置为阻塞\n        while (true) {\n            SocketChannel accept = open.accept();\n\n            System.out.println(String.format(\"currentConnections:%d\",objects.size()));\n\n            if (accept!=null) {\n                accept.configureBlocking(false);\n                objects.add(accept);\n            }else{\n                Thread.sleep(2000);\n            }\n\n            for (SocketChannel object : objects) {\n                if (object.isConnected()) {\n                    int read = 0;\n                    try {\n                        read = object.read(allocate);\n                    } catch (IOException e) {\n                        System.out.println(\"client exception exits\");\n                        objects.remove(object);\n                    }\n                    System.out.println(\"already read：\"+read);\n                    if (read>0) {\n                        allocate.flip();\n                        String name = Charset.defaultCharset().decode(allocate).toString();\n                        String format = String.format(\"hello:%s,now time is  %s\", name, LocalDateTime.now());\n                        object.write(StandardCharsets.UTF_8.encode(format));\n                        allocate.clear();\n                    }else if(read < 0){\n                        System.out.println(\"client normal exits\");\n                        objects.remove(object);\n                    }\n                }else{\n                    System.out.println(\"client normal exits\");\n                    objects.remove(object);\n                }\n            }\n        }\n\n    }\n}\n"],["body","\n"],["h1","NIOSelector实现思路"],["body","\n"],["body","package com.weisanju.ioStudy;\n\n\nimport java.io.IOException;\nimport java.net.InetSocketAddress;\nimport java.nio.ByteBuffer;\nimport java.nio.channels.*;\nimport java.nio.charset.Charset;\nimport java.nio.charset.StandardCharsets;\nimport java.time.LocalDateTime;\nimport java.util.LinkedList;\nimport java.util.List;\nimport java.util.Set;\n\npublic class NioTimeServer {\n    public static void main(String[] args) throws IOException, InterruptedException {\n        ByteBuffer allocate = ByteBuffer.allocate(1024);\n        Selector selector = Selector.open();\n        ServerSocketChannel open = ServerSocketChannel.open();\n        open.bind(new InetSocketAddress(8080));\n        open.configureBlocking(false);\n\n        open.register(selector, SelectionKey.OP_ACCEPT);\n        //设置为阻塞\n        while (selector.select() >= 0) {\n            System.out.println(String.format(\"currentConnections:%d\", selector.keys().size() - 1));\n            Set<SelectionKey> selectionKeys = selector.selectedKeys();\n            for (SelectionKey selectedKey : selectionKeys) {\n                if (selectedKey.isAcceptable()) {\n                    SocketChannel accept = ((ServerSocketChannel)selectedKey.channel()).accept();\n                    accept.configureBlocking(false);\n                    accept.register(selector, SelectionKey.OP_READ);\n                } else {\n                    SocketChannel channel = (SocketChannel) selectedKey.channel();\n                    int read = 0;\n                    try {\n                        read = channel.read(allocate);\n                    } catch (IOException e) {\n                        System.out.println(\"client exception exits\");\n                        read = -1;\n                        selectedKey.cancel();\n                    }\n                    System.out.println(\"already read：\" + read);\n                    if (read > 0) {\n                        allocate.flip();\n                        String name = Charset.defaultCharset().decode(allocate).toString();\n                        String format = String.format(\"hello:%s,now time is  %s\", name, LocalDateTime.now());\n                        channel.write(StandardCharsets.UTF_8.encode(format));\n                        allocate.clear();\n                    } else if (read < 0) {\n                        System.out.println(\"client normal exits\");\n                        selectedKey.cancel();\n                    }\n                }\n            }\n            selectionKeys.clear();\n        }\n\n    }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/遍历目录树.html"],["title","遍历目录树.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Walking the File Tree"],["body","\n"],["body","您是否需要创建一个应用程序来递归访问文件树中的所有文件？"],["body","\n"],["body","也许您需要删除树中的每个 .class 文件，或者查找去年未访问过的每个文件。"],["body","\n"],["body","您可以使用 FileVisitor 接口执行此操作。"],["body","\n"],["body","This section covers the following:"],["body","\n\n"],["body","The FileVisitor Interface"],["body","\n"],["body","Kickstarting the Process"],["body","\n"],["body","Considerations When Creating a FileVisitor"],["body","\n"],["body","Controlling the Flow"],["body","\n"],["body","Examples"],["body","\n\n"],["h1","The FileVisitor Interface"],["body","\n"],["body","要遍历文件树，首先需要实现一个 FileVisitor"],["body","\n"],["body","FileVisitor 指定了遍历过程中关键点所需的行为："],["body","\n\n"],["body","访问文件时"],["body","\n"],["body","在访问目录之前"],["body","\n"],["body","访问目录后"],["body","\n"],["body","当发生故障时"],["body","\n\n"],["body","该接口有四种方法对应于这些情况：-"],["body","\n\n"],["body","preVisitDirectory – 在访问目录条目之前调用."],["body","\n"],["body","postVisitDirectory – 在访问目录中的所有条目后调用。如果遇到任何错误，则将特定异常传递给方法."],["body","\n"],["body","visitFile –  在被访问的文件上调用。文件的BasicFileAttributes 传递给方法，或者您可以使用文件属性 包读取特定的一组属性。例如，您可以选择读取文件的DosFileAttributeView 来确定文件是否设置了“隐藏”位。"],["body","\n"],["body","visitFileFailed – 当无法访问文件时调用。特定的异常被传递给方法。您可以选择是否抛出异常、将其打印到控制台或日志文件等。"],["body","\n\n"],["body","如果您不需要实现所有四个 FileVisitor 方法，而不是实现 FileVisitor 接口，您可以扩展 [SimpleFileVisitor](https://docs.oracle.com/javase/8/ docs/api/java/nio/file/SimpleFileVisitor.html) 类 "],["body","\n"],["body","该类实现了FileVisitor 接口，访问树中的所有文件，并在遇到错误时抛出IOError。"],["body","\n"],["body","您可以扩展此类并仅覆盖您需要的方法。"],["body","\n"],["body","这是一个扩展 SimpleFileVisitor 以打印文件树中所有条目的示例。"],["body","\n"],["body","无论条目是常规文件、符号链接、目录还是其他“未指定”类型的文件，它都会打印条目。"],["body","\n"],["body","它还打印每个文件的大小（以字节为单位）。"],["body","\n"],["body","遇到的任何异常都会打印到控制台。"],["body","\n"],["body","The FileVisitor methods are shown in bold:"],["body","\n"],["body","import static java.nio.file.FileVisitResult.*;\n\npublic static class PrintFiles\n    extends SimpleFileVisitor<Path> {\n\n    // Print information about\n    // each type of file.\n    @Override\n    public FileVisitResult visitFile(Path file,\n                                   BasicFileAttributes attr) {\n        if (attr.isSymbolicLink()) {\n            System.out.format(\"Symbolic link: %s \", file);\n        } else if (attr.isRegularFile()) {\n            System.out.format(\"Regular file: %s \", file);\n        } else {\n            System.out.format(\"Other: %s \", file);\n        }\n        System.out.println(\"(\" + attr.size() + \"bytes)\");\n        return CONTINUE;\n    }\n\n    // Print each directory visited.\n    @Override\n    public FileVisitResult postVisitDirectory(Path dir,\n                                          IOException exc) {\n        System.out.format(\"Directory: %s%n\", dir);\n        return CONTINUE;\n    }\n\n    // If there is some error accessing\n    // the file, let the user know.\n    // If you don't override this method\n    // and an error occurs, an IOException \n    // is thrown.\n    @Override\n    public FileVisitResult visitFileFailed(Path file,\n                                       IOException exc) {\n        System.err.println(exc);\n        return CONTINUE;\n    }\n}\n"],["body","\n"],["h1","Kickstarting the Process"],["body","\n"],["body","一旦你实现了你的FileVisitor，你如何启动文件遍历？ Files 类中有两个 walkFileTree 方法。"],["body","\n\n"],["body","walkFileTree(Path, FileVisitor)"],["body","\n"],["body","walkFileTree(Path, Set, int, FileVisitor)"],["body","\n\n"],["body","第一种方法只需要一个起点和一个“FileVisitor”的实例。"],["body","\n"],["body","您可以调用 PrintFiles 文件访问器，如下所示："],["body","\n"],["body","Path startingDir = ...;\nPrintFiles pf = new PrintFiles();\nFiles.walkFileTree(startingDir, pf);\n"],["body","\n"],["body","第二个 walkFileTree 方法使您可以额外指定访问级别数的限制和一组 [FileVisitOption](https://docs.oracle.com/javase/8/docs/api/java/nio /file/FileVisitOption.html) 枚举。"],["body","\n"],["body","如果你想确保这个方法遍历整个文件树，你可以为最大深度参数指定Integer.MAX_VALUE。您可以指定 FileVisitOption 枚举，FOLLOW_LINKS，表示应该遵循符号链接。"],["body","\n"],["body","This code snippet shows how the four-argument method can be invoked:"],["body","\n"],["body","import static java.nio.file.FileVisitResult.*;\n\nPath startingDir = ...;\n\nEnumSet<FileVisitOption> opts = EnumSet.of(FOLLOW_LINKS);\n\nFinder finder = new Finder(pattern);\nFiles.walkFileTree(startingDir, opts, Integer.MAX_VALUE, finder);\n"],["body","\n"],["h1","Considerations When Creating a FileVisitor"],["body","\n"],["body","文件树深度优先遍历，但您不能对访问子目录的迭代顺序做出任何假设。"],["body","\n"],["body","如果您的程序将更改文件系统，则需要仔细考虑如何实现“FileVisitor”。"],["body","\n"],["body","例如，如果您正在编写递归删除，则在删除目录本身之前首先删除目录中的文件。"],["body","\n"],["body","如果您正在编写递归copy，则在尝试将文件复制到其中（在“visitFiles”中）之前，您可以在“preVisitDirectory”中创建新目录。"],["body","\n"],["body","如果要保留源目录的属性（类似于UNIX的cp -p命令）"],["body","\n"],["body","你需要在文件被复制之后，在postVisitDirectory中这样做。 "],["body","\n"],["body","Copy 示例展示了如何执行此操作。"],["body","\n"],["body","如果您正在编写文件搜索，则在 visitFile 方法中执行比较。"],["body","\n"],["body","此方法会找到所有符合条件的文件，但不会找到目录。"],["body","\n"],["body","如果要同时查找文件和目录，还必须在preVisitDirectory 或postVisitDirectory 方法中执行比较。 "],["body","\n"],["body","Find 示例展示了如何执行此操作。"],["body","\n"],["body","您需要决定是否要遵循符号链接。"],["body","\n"],["body","例如，如果您要删除文件，则可能不建议使用符号链接。"],["body","\n"],["body","如果您正在复制文件树，您可能希望允许它。"],["body","\n"],["body","默认情况下，walkFileTree 不遵循符号链接。"],["body","\n"],["body","为文件调用visitFile 方法。"],["body","\n"],["body","如果你已经指定了 FOLLOW_LINKS 选项并且你的文件树有一个到父目录的循环链接，循环目录会在 visitFileFailed 方法中报告为 FileSystemLoopException。"],["body","\n"],["body","以下代码片段显示了如何捕获循环链接，并且来自 Copy 示例："],["body","\n"],["body","@Override\npublic FileVisitResult\n    visitFileFailed(Path file,\n        IOException exc) {\n    if (exc instanceof FileSystemLoopException) {\n        System.err.println(\"cycle detected: \" + file);\n    } else {\n        System.err.format(\"Unable to copy:\" + \" %s: %s%n\", file, exc);\n    }\n    return CONTINUE;\n}\n"],["body","\n"],["h1","Controlling the Flow"],["body","\n"],["body","也许您想遍历文件树以查找特定目录，并且在找到时希望进程终止。"],["body","\n"],["body","也许您想跳过特定目录。"],["body","\n"],["body","FileVisitor 方法返回一个 FileVisitResult 值。"],["body","\n"],["body","您可以中止文件遍历过程或控制您在 FileVisitor 方法中返回的值是否访问目录："],["body","\n\n"],["body","\n"],["body","CONTINUE – 表示文件遍历应该继续。如果preVisitDirectory 方法返回CONTINUE，则访问该目录。"],["body","\n"],["body","\n"],["body","\n"],["body","TERMINATE – 立即中止文件遍历。返回此值后，不再调用进一步的文件遍历方法。"],["body","\n"],["body","\n"],["body","\n"],["body","SKIP_SUBTREE – 当preVisitDirectory 返回这个值时，指定的目录及其子目录将被跳过。这个分支是从树上“剪掉”的。."],["body","\n"],["body","\n"],["body","\n"],["body","SKIP_SIBLINGS – 当preVisitDirectory 返回这个值时，指定的目录不会被访问，postVisitDirectory 不会被调用，并且没有进一步的未访问的兄弟节点被访问。"],["body","\n"],["body","如果从postVisitDirectory 方法返回，则不会访问其他兄弟节点。"],["body","\n"],["body","本质上，在指定的目录中不会再发生任何事情。"],["body","\n"],["body","\n\n"],["body","In this code snippet, any directory named SCCS is skipped:"],["body","\n"],["body","import static java.nio.file.FileVisitResult.*;\n\npublic FileVisitResult\n     preVisitDirectory(Path dir,\n         BasicFileAttributes attrs) {\n    (if (dir.getFileName().toString().equals(\"SCCS\")) {\n         return SKIP_SUBTREE;\n    }\n    return CONTINUE;\n}\n"],["body","\n"],["body","在这个代码片段中，一旦找到特定文件，文件名就会打印到标准输出，文件遍历终止"],["body","\n"],["body","import static java.nio.file.FileVisitResult.*;\n\n// The file we are looking for.\nPath lookingFor = ...;\n\npublic FileVisitResult\n    visitFile(Path file,\n        BasicFileAttributes attr) {\n    if (file.getFileName().equals(lookingFor)) {\n        System.out.println(\"Located file: \" + file);\n        return TERMINATE;\n    }\n    return CONTINUE;\n}\n"],["body","\n"],["headingLink","examples"],["heading","Examples"],["body","\n"],["body","The following examples demonstrate the file walking mechanism:"],["body","\n\n"],["body","Find – Recurses a file tree looking for files and directories that match a particular glob pattern. This example is discussed in Finding Files."],["body","\n"],["body","Chmod – Recursively changes permissions on a file tree (for POSIX systems only)."],["body","\n"],["body","Copy – Recursively copies a file tree."],["body","\n"],["body","WatchDir – Demonstrates the mechanism that watches a directory for files that have been created, deleted or modified. Calling this program with the -r option watches an entire tree for changes. For more information about the file notification service, see Watching a Directory for Changes."],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/开发自定义文件系统.html"],["title","开发自定义文件系统.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Introduction"],["body","\n"],["body","Java SE 7 版本中引入的 NIO.2 API 提供了开发可用于管理文件系统对象的自定义文件系统提供程序的能力"],["body","\n"],["body","文件系统本质上是一个容器，其中包含被称为文件系统对象的有组织的同质元素"],["body","\n"],["body","文件系统提供对文件系统对象的访问。 "],["body","\n"],["body","文件系统对象可以是文件存储、文件或目录。 "],["body","\n"],["body","文件存储是存储文件的卷或分区。"],["body","\n"],["body","例如，在 Windows 平台等本机文件系统中，众所周知的驱动器如 c: 或 d: 是文件存储"],["body","\n"],["body","在 Solaris 操作系统上，/（根）和挂载目录被视为文件存储。"],["body","\n"],["body","java.nio.file.spi.FileSystemProvider 类允许您开发"],["body","\n"],["body","自定义文件系统提供程序。"],["body","\n"],["body","自定义文件系统提供程序在以下情况下很有用："],["body","\n\n"],["body","\n"],["body","开发基于内存或基于 zip 文件的文件系统"],["body","\n"],["body","\n"],["body","\n"],["body","开发容错分布式文件系统"],["body","\n"],["body","\n"],["body","\n"],["body","替换或补充默认文件系统提供程序。"],["body","\n"],["body","自定义提供程序可以通过执行特定操作来扩充默认提供程序，例如记录所有系统操作，并将其他例行操作委托给默认提供程序。"],["body","\n"],["body","\n\n"],["h1","Overview of the java.nio.file.spi.FileSystemProvider Class"],["body","\n"],["body","自定义文件系统提供程序必须实现 java.nio.file.spi.FileSystemProvider 类。"],["body","\n"],["body","文件系统提供程序由 URI schema 标识，例如 file、jar、memory、cd。"],["body","\n"],["body","java.nio.file.spi.FileSystemProvider 类的实现是 java.nio.file.FileSystem 类的 工厂类"],["body","\n"],["body","文件系统的 URI 具有与创建它的文件系统提供程序的 URI 方案相匹配的 URI 方案。"],["body","\n"],["body","[newFileSystem](https://docs.oracle.com/javase/8/docs/api/java/nio/file/spi/FileSystemProvider.html#newFileSystem-java.net.URI-java.util.Map -) 方法用于创建文件系统和 [getFileSystem](https://docs.oracle.com/javase/8/docs/api/java/nio/file/spi/FileSystemProvider.html#getFileSystem- java.net.URI-) 方法用于检索对现有文件系统的引用。"],["body","\n"],["h1","Implementing a Custom File System Provider"],["body","\n"],["body","本节描述使用 java.nio.file.spi.FileSystemProvider API 创建自定义文件系统提供程序所需的高级步骤"],["body","\n"],["body","DK 安装的 demo/nio/zipfs 中附带的 ZipFileSystemProvider 类是自定义文件系统提供程序的一个示例。"],["body","\n"],["body","有关 zip 文件系统提供程序的信息，请参阅 资源。"],["body","\n"],["headingLink","implementing-the-custom-file-system-provider-class"],["heading","Implementing the Custom File System Provider Class"],["body","\n"],["body","实现自定义文件系统提供程序类涉及以下操作："],["body","\n\n"],["body","\n"],["body","创建一个自定义文件系统提供程序类，例如“MyFileSystemProvider”，它扩展了“java.nio.file.spi.FileSystemProvider”类。."],["body","\n"],["body","\n"],["body","\n"],["body","为文件系统提供者定义一个 URI schema，例如 jar。 getScheme 方法应该返回这个提供者的 URI schema"],["body","\n"],["body","\n"],["body","\n"],["body","创建内部缓存以跟踪此提供程序创建的文件系统"],["body","\n"],["body","\n"],["body","\n"],["body","实现 newFileSystem 方法。该方法将在指定路径创建一个新的自定义文件系统，并将该文件系统添加到缓存中。如果文件系统，此方法应该抛出 java.nio.file.FileSystemAlreadyExistsException 异常已存在于指定路径。"],["body","\n"],["body","\n"],["body","\n"],["body","实现getFileSystem 方法。此方法应搜索缓存并返回对应于给定 URI 的文件系统的先前创建的实例。 "],["body","\n"],["body","\n"],["body","\n"],["body","根据文件系统提供者的要求，实现 newFileChannel 方法或 newAsynchronousFileChannel 方法。"],["body","\n"],["body","此方法应返回一个 FileChannel 对象，该对象允许在文件系统中读取或写入文件"],["body","\n"],["body","\n\n"],["headingLink","implementing-the-custom-file-system-class"],["heading","Implementing the Custom File System Class"],["body","\n"],["body","实现自定义文件系统类涉及以下操作"],["body","\n\n"],["body","创建一个扩展 java.nio.file.FileSystem 类的类，例如 MyFileSystem."],["body","\n"],["body","根据所需文件系统的特性实现文件系统类的方法。文件系统的一些特征如下:\n\n"],["body","Number of roots – 文件系统可以有一个文件的单一层次结构，一个根目录，或多个层次结构"],["body","\n"],["body","Read and write access – 文件系统可以是只读的或读/写的."],["body","\n"],["body","File store – 文件系统需要底层文件存储。可以为文件设置的属性将因底层文件存储而异."],["body","\n\n"],["body","\n\n"],["headingLink","resources"],["heading","Resources"],["body","\n\n"],["body","Zip File System Provider"],["body","\n"],["body","Zip File System Properties"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/文件查找.html"],["title","文件查找.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Finding Files"],["body","\n"],["body","如果您曾经使用过 shell 脚本，那么您很可能使用过模式匹配来定位文件。"],["body","\n"],["body","事实上，您可能已经广泛使用它。"],["body","\n"],["body","如果您没有使用过，模式匹配会使用特殊字符来创建模式，然后可以将文件名与该模式进行比较"],["body","\n"],["body","例如，在大多数 shell 脚本中，星号 * 可以匹配任意数量的字符。"],["body","\n"],["body","例如，以下命令列出当前目录中所有以 .html 结尾的文件："],["body","\n"],["body","% ls *.html\n"],["body","\n"],["body","java.nio.file 包为这个有用的特性提供了编程支持。"],["body","\n"],["body","每个文件系统实现都提供了一个 PathMatcher。"],["body","\n"],["body","您可以使用 [getPathMatcher(String)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystem.html#getPathMatcher FileSystem 类中的 -java.lang.String-) 方法。"],["body","\n"],["body","以下代码片段获取默认文件系统的路径匹配器："],["body","\n"],["body","String pattern = ...;\nPathMatcher matcher =\n    FileSystems.getDefault().getPathMatcher(\"glob:\" + pattern);\n"],["body","\n"],["body","传递给getPathMatcher 的字符串参数指定要匹配的语法风格和模式。"],["body","\n"],["body","此示例指定 glob 语法。"],["body","\n"],["body","如果您不熟悉 glob 语法，请参阅 什么是 Glob。"],["body","\n"],["body","Glob 语法易于使用且灵活，但如果您愿意，也可以使用正则表达式或 regex 语法。"],["body","\n"],["body","有关正则表达式的更多信息，请参阅 正则表达式 课程。"],["body","\n"],["body","某些文件系统实现可能支持其他语法。"],["body","\n"],["body","如果你想使用其他形式的基于字符串的模式匹配，你可以创建你自己的 PathMatcher 类。"],["body","\n"],["body","本页中的示例使用 glob 语法。"],["body","\n"],["body","一旦你创建了你的“PathMatcher”实例，你就可以将文件与之匹配。 "],["body","\n"],["body","PathMatcher 接口有一个方法，[matches](https://docs.oracle.com/javase/8/docs/api/java/nio/file/PathMatcher.html#matches-java.nio。 "],["body","\n"],["body","file.Path-)，它接受一个 Path 参数并返回一个布尔值：它要么匹配模式，要么不匹配。"],["body","\n"],["body","以下代码片段查找以 .java 或 .class 结尾的文件，并将这些文件打印到标准输出："],["body","\n"],["body","PathMatcher matcher =\n    FileSystems.getDefault().getPathMatcher(\"glob:*.{java,class}\");\n\nPath filename = ...;\nif (matcher.matches(filename)) {\n    System.out.println(filename);\n}\n"],["body","\n"],["h1","Recursive Pattern Matching"],["body","\n"],["body","搜索与特定模式匹配的文件与遍历文件树密切相关。"],["body","\n"],["body","多少次您知道文件在文件系统的某处，但在哪里？"],["body","\n"],["body","或者，您可能需要在文件树中查找具有特定文件扩展名的所有文件。"],["body","\n"],["body","Find 示例正是这样做的。 "],["body","\n"],["body","Find 类似于 UNIX 的 find 实用程序，但在功能上有所缩减。"],["body","\n"],["body","您可以扩展此示例以包含其他功能。"],["body","\n"],["body","例如，find 实用程序支持-prune 标志从搜索中排除整个子树。"],["body","\n"],["body","您可以通过在 preVisitDirectory 方法中返回 SKIP_SUBTREE 来实现该功能。"],["body","\n"],["body","要实现跟随符号链接的 -L 选项，您可以使用四参数 walkFileTree 方法并传入 FOLLOW_LINKS 枚举（但请确保在 visitFile 方法中测试循环链接） "],["body","\n"],["body","."],["body","\n"],["body","要运行 Find 应用程序，请使用以下格式："],["body","\n"],["body","% java Find <path> -name \"<glob_pattern>\"\n"],["body","\n"],["body","该模式放在引号内，因此外壳不会解释任何通配符。例如："],["body","\n"],["body","% java Find . -name \"*.html\"\n"],["body","\n"],["body","Here is the source code for the Find example:"],["body","\n"],["body","/**\n * Sample code that finds files that match the specified glob pattern.\n * For more information on what constitutes a glob pattern, see\n * https://docs.oracle.com/javase/tutorial/essential/io/fileOps.html#glob\n *\n * The file or directories that match the pattern are printed to\n * standard out.  The number of matches is also printed.\n *\n * When executing this application, you must put the glob pattern\n * in quotes, so the shell will not expand any wild cards:\n *              java Find . -name \"*.java\"\n */\n\nimport java.io.*;\nimport java.nio.file.*;\nimport java.nio.file.attribute.*;\nimport static java.nio.file.FileVisitResult.*;\nimport static java.nio.file.FileVisitOption.*;\nimport java.util.*;\n\n\npublic class Find {\n\n    public static class Finder\n        extends SimpleFileVisitor<Path> {\n\n        private final PathMatcher matcher;\n        private int numMatches = 0;\n\n        Finder(String pattern) {\n            matcher = FileSystems.getDefault()\n                    .getPathMatcher(\"glob:\" + pattern);\n        }\n\n        // Compares the glob pattern against\n        // the file or directory name.\n        void find(Path file) {\n            Path name = file.getFileName();\n            if (name != null && matcher.matches(name)) {\n                numMatches++;\n                System.out.println(file);\n            }\n        }\n\n        // Prints the total number of\n        // matches to standard out.\n        void done() {\n            System.out.println(\"Matched: \"\n                + numMatches);\n        }\n\n        // Invoke the pattern matching\n        // method on each file.\n        @Override\n        public FileVisitResult visitFile(Path file,\n                BasicFileAttributes attrs) {\n            find(file);\n            return CONTINUE;\n        }\n\n        // Invoke the pattern matching\n        // method on each directory.\n        @Override\n        public FileVisitResult preVisitDirectory(Path dir,\n                BasicFileAttributes attrs) {\n            find(dir);\n            return CONTINUE;\n        }\n\n        @Override\n        public FileVisitResult visitFileFailed(Path file,\n                IOException exc) {\n            System.err.println(exc);\n            return CONTINUE;\n        }\n    }\n\n    static void usage() {\n        System.err.println(\"java Find <path>\" +\n            \" -name \\\"<glob_pattern>\\\"\");\n        System.exit(-1);\n    }\n\n    public static void main(String[] args)\n        throws IOException {\n\n        if (args.length < 3 || !args[1].equals(\"-name\"))\n            usage();\n\n        Path startingDir = Paths.get(args[0]);\n        String pattern = args[2];\n\n        Finder finder = new Finder(pattern);\n        Files.walkFileTree(startingDir, finder);\n        finder.done();\n    }\n}\n"],["body","\n"],["body","Recursively walking a file tree is covered in Walking the File Tree."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/传统IO与NIO的API迁移.html"],["title","传统IO与NIO的API迁移.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Legacy File I/O Code"],["body","\n"],["body","与遗留代码的互操作性"],["body","\n"],["body","在 Java SE 7 版本之前，java.io.File 类是用于文件 I/O 的机制，但它有几个缺点。"],["body","\n\n"],["body","\n"],["body","许多方法在失败时不会抛出异常，因此无法获得有用的错误消息。"],["body","\n"],["body","例如，如果文件删除失败，程序会收到“删除失败”，但不知道是因为文件不存在、用户没有权限还是存在其他问题。 ."],["body","\n"],["body","\n"],["body","\n"],["body","rename 方法在跨平台上无法一致地工作。."],["body","\n"],["body","\n"],["body","\n"],["body","没有对符号链接的真正支持。."],["body","\n"],["body","\n"],["body","\n"],["body","需要对元数据提供更多支持，例如文件权限、文件所有者和其他安全属性。."],["body","\n"],["body","\n"],["body","\n"],["body","访问文件元数据效率低下。."],["body","\n"],["body","\n"],["body","\n"],["body","许多 File 方法没有扩展。"],["body","\n"],["body","通过服务器请求大型目录列表可能会导致挂起。"],["body","\n"],["body","大目录还可能导致内存资源问题，从而导致拒绝服务。."],["body","\n"],["body","\n"],["body","\n"],["body","如果存在循环符号链接，则无法编写可靠的代码来递归遍历文件树并做出适当的响应"],["body","\n"],["body","\n\n"],["body","也许您有使用 java.io.File 的遗留代码，并希望利用 java.nio.file.Path 功能对您的代码影响最小。"],["body","\n"],["body","java.io.File 类提供了 toPath 方法，它"],["body","\n"],["body","将旧式 File 实例转换为 java.nio.file.Path 实例，如下所示："],["body","\n"],["body","Path input = file.toPath();\n"],["body","\n"],["body","然后，您可以利用“Path”类可用的丰富功能集。"],["body","\n"],["body","例如，假设您有一些删除文件的代码："],["body","\n"],["body","file.delete();\n"],["body","\n"],["body","您可以修改此代码以使用 Files.delete 方法:"],["body","\n"],["body","Path fp = file.toPath();\nFiles.delete(fp);\n"],["body","\n"],["body","Conversely, the Path.toFile method constructs a java.io.File object for a Path object."],["body","\n"],["h1","Mapping java.io.File Functionality to java.nio.file"],["body","\n"],["body","由于文件 I/O 的 Java 实现已在 Java SE 7 版本中完全重新架构，因此您无法将一种方法替换为另一种方法。"],["body","\n"],["body","如果您想使用 java.nio.file 包提供的丰富功能，最简单的解决方案是使用 File.toPath 方法，如上一节中建议的那样。"],["body","\n"],["body","但是，如果您不想使用该方法或它不足以满足您的需要，则必须重写文件 I/O 代码。"],["body","\n"],["body","两个 API 之间没有一一对应关系，但下表让您大致了解 java.io.File API 中的哪些功能映射到 java.nio.file API 中的功能，并告诉您可以在哪里"],["body","\n"],["body","java.io.File Functionality"],["body","java.nio.file Functionality"],["body","Tutorial Coverage"],["body","\n"],["body","java.io.File"],["body","java.nio.file.Path"],["body","The Path Class"],["body","\n"],["body","java.io.RandomAccessFile"],["body","The SeekableByteChannel functionality."],["body","Random Access Files"],["body","\n"],["body","File.canRead, canWrite, canExecute"],["body","Files.isReadable, Files.isWritable, and Files.isExecutable. On UNIX file systems, the Managing Metadata (File and File Store Attributes) package is used to check the nine file permissions."],["body","Checking a File or Directory Managing Metadata"],["body","\n"],["body","File.isDirectory(), File.isFile(), and File.length()"],["body","Files.isDirectory(Path, LinkOption...), Files.isRegularFile(Path, LinkOption...), and Files.size(Path)"],["body","Managing Metadata"],["body","\n"],["body","File.lastModified() and File.setLastModified(long)"],["body","Files.getLastModifiedTime(Path, LinkOption...) and Files.setLastMOdifiedTime(Path, FileTime)"],["body","Managing Metadata"],["body","\n"],["body","The File methods that set various attributes: setExecutable, setReadable, setReadOnly, setWritable"],["body","These methods are replaced by the Files method setAttribute(Path, String, Object, LinkOption...)."],["body","Managing Metadata"],["body","\n"],["body","new File(parent, \"newfile\")"],["body","parent.resolve(\"newfile\")"],["body","Path Operations"],["body","\n"],["body","File.renameTo"],["body","Files.move"],["body","Moving a File or Directory"],["body","\n"],["body","File.delete"],["body","Files.delete"],["body","Deleting a File or Directory"],["body","\n"],["body","File.createNewFile"],["body","Files.createFile"],["body","Creating Files"],["body","\n"],["body","File.deleteOnExit"],["body","Replaced by the DELETE_ON_CLOSE option specified in the createFile method."],["body","Creating Files"],["body","\n"],["body","File.createTempFile"],["body","Files.createTempFile(Path, String, FileAttributes<?>), Files.createTempFile(Path, String, String, FileAttributes<?>)"],["body","Creating Files Creating and Writing a File by Using Stream I/O Reading and Writing Files by Using Channel I/O"],["body","\n"],["body","File.exists"],["body","Files.exists and Files.notExists"],["body","Verifying the Existence of a File or Directory"],["body","\n"],["body","File.compareTo and equals"],["body","Path.compareTo and equals"],["body","Comparing Two Paths"],["body","\n"],["body","File.getAbsolutePath and getAbsoluteFile"],["body","Path.toAbsolutePath"],["body","Converting a Path"],["body","\n"],["body","File.getCanonicalPath and getCanonicalFile"],["body","Path.toRealPath or normalize"],["body","Converting a Path (toRealPath) Removing Redundancies From a Path (normalize)"],["body","\n"],["body","File.toURI"],["body","Path.toURI"],["body","Converting a Path"],["body","\n"],["body","File.isHidden"],["body","Files.isHidden"],["body","Retrieving Information About the Path"],["body","\n"],["body","File.list and listFiles"],["body","Path.newDirectoryStream"],["body","Listing a Directory's Contents"],["body","\n"],["body","File.mkdir and mkdirs"],["body","Files.createDirectory"],["body","Creating a Directory"],["body","\n"],["body","File.listRoots"],["body","FileSystem.getRootDirectories"],["body","Listing a File System's Root Directories"],["body","\n"],["body","File.getTotalSpace, File.getFreeSpace, File.getUsableSpace"],["body","FileStore.getTotalSpace, FileStore.getUnallocatedSpace, FileStore.getUsableSpace, FileStore.getTotalSpace"],["body","File Store Attributes"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/文件管理.html"],["title","文件管理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n"],["body","Files 类是 java.nio.file 包的另一个主要入口点。"],["body","\n"],["body","此类提供了一组丰富的静态方法，用于读取、写入和操作文件和目录。 "],["body","\n"],["body","Files 方法适用于 Path 对象的实例。"],["body","\n"],["body","在继续其余部分之前，您应该熟悉以下常见概念："],["body","\n\n"],["body","Releasing System Resources"],["body","\n"],["body","Catching Exceptions"],["body","\n"],["body","Varargs"],["body","\n"],["body","Atomic Operations"],["body","\n"],["body","Method Chaining"],["body","\n"],["body","What Is a Glob?"],["body","\n"],["body","Link Awareness"],["body","\n\n"],["headingLink","releasing-system-resources"],["heading","Releasing System Resources"],["body","\n"],["body","此 API 中使用的许多资源（例如流或通道）实现或扩展了 [java.io.Closeable](https://docs.oracle.com/javase/8/docs/api/java /io/Closeable.html)接口。 "],["body","\n"],["body","Closeable 资源的一个要求是，当不再需要时，必须调用 close 方法来释放资源。"],["body","\n"],["body","忽略关闭资源会对应用程序的性能产生负面影响。"],["body","\n"],["body","下一节中描述的 try-with-resources 语句会为您处理这一步。"],["body","\n"],["headingLink","catching-exceptions"],["heading","Catching Exceptions"],["body","\n"],["body","对于文件 I/O，意外情况是生活中的事实：文件在预期时存在（或不存在），程序无权访问文件系统，默认文件系统实现不支持特定功能 等等。可能会遇到许多错误。"],["body","\n"],["body","所有访问文件系统的方法都可以抛出IOException。"],["body","\n"],["body","最好的做法是通过将这些方法嵌入 Java SE 7 版本中引入的 try-with-resources 语句来捕获这些异常。 "],["body","\n"],["body","try-with-resources 语句的优点是编译器会自动生成代码以在不再需要时关闭资源。"],["body","\n"],["body","Charset charset = Charset.forName(\"US-ASCII\");\nString s = ...;\ntry (BufferedWriter writer = Files.newBufferedWriter(file, charset)) {\n    writer.write(s, 0, s.length());\n} catch (IOException x) {\n    System.err.format(\"IOException: %s%n\", x);\n}\n"],["body","\n"],["body","For more information, see The try-with-resources Statement."],["body","\n"],["body","或者，您可以将文件 I/O 方法嵌入到“try”块中，然后在“catch”块中捕获任何异常。如果您的代码打开了任何流或通道，您应该在“finally”块中关闭它们。"],["body","\n"],["body","Charset charset = Charset.forName(\"US-ASCII\");\nString s = ...;\nBufferedWriter writer = null;\ntry {\n    writer = Files.newBufferedWriter(file, charset);\n    writer.write(s, 0, s.length());\n} catch (IOException x) {\n    System.err.format(\"IOException: %s%n\", x);\n} finally {\n    if (writer != null) writer.close();\n}\n"],["body","\n"],["body","For more information, see Catching and Handling Exceptions."],["body","\n"],["body","除了IOException，许多特定的异常扩展了FileSystemException。"],["body","\n"],["body","这个类有一些有用的方法返回涉及的文件 (getFile)，详细消息字符串(getMessage)，原因"],["body","\n"],["body","文件系统操作失败 (getReason)，以及“其他\" 涉及的文件，如果有的话 (getOtherFile)。"],["body","\n"],["body","The following code snippet shows how the getFile ethod might be used:"],["body","\n"],["body","try (...) {\n    ...    \n} catch (NoSuchFileException x) {\n    System.err.format(\"%s does not exist\\n\", x.getFile());\n}\n"],["body","\n"],["headingLink","varargs"],["heading","Varargs"],["body","\n"],["body","当指定标志时，几个“文件”方法接受任意数量的参数。"],["body","\n"],["body","例如，在下面的方法签名中，CopyOption 参数后面的省略号表示该方法接受可变数量的参数或 varargs，因为它们通常被调用："],["body","\n"],["body","Path Files.move(Path, Path, CopyOption...)\n"],["body","\n"],["body","当一个方法接受一个 varargs 参数时，你可以向它传递一个逗号分隔的值列表或一个值数组 (CopyOption[])。"],["body","\n"],["body","在 move 示例中，可以按如下方式调用该方法："],["body","\n"],["body","import static java.nio.file.StandardCopyOption.*;\n\nPath source = ...;\nPath target = ...;\nFiles.move(source,\n           target,\n           REPLACE_EXISTING,\n           ATOMIC_MOVE);\n"],["body","\n"],["body","For more information about varargs syntax, see Arbitrary Number of Arguments."],["body","\n"],["headingLink","atomic-operations"],["heading","Atomic Operations"],["body","\n"],["body","一些 Files 方法，例如 move，可以在某些文件系统中原子地执行某些操作。"],["body","\n"],["body","原子文件操作是不能被中断或“部分”执行的操作。"],["body","\n"],["body","要么执行整个操作，要么操作失败。"],["body","\n"],["headingLink","method-chaining"],["heading","Method Chaining"],["body","\n"],["body","许多文件 I/O 方法都支持方法链的概念。"],["body","\n"],["body","首先调用一个返回对象的方法。"],["body","\n"],["body","然后立即调用该对象上的一个方法，该方法返回另一个对象，依此类推。"],["body","\n"],["body","许多 I/O 示例使用以下技术： "],["body","\n"],["body","String value = Charset.defaultCharset().decode(buf).toString();\nUserPrincipal group =\n    file.getFileSystem().getUserPrincipalLookupService().\n         lookupPrincipalByName(\"me\");\n"],["body","\n"],["body","此技术生成紧凑的代码，并使您能够避免声明不需要的临时变量。"],["body","\n"],["headingLink","what-is-a-glob"],["heading","What Is a Glob?"],["body","\n"],["body","Files 类中的两个方法接受一个 glob 参数，但什么是 glob？"],["body","\n"],["body","您可以使用 glob 语法来指定模式匹配行为。"],["body","\n"],["body","glob 模式被指定为一个字符串，并与其他字符串匹配，例如目录或文件名。 "],["body","\n"],["body","Glob 语法遵循几个简单的规则："],["body","\n\n"],["body","\n"],["body","An asterisk, *"],["body","\n"],["body","匹配任意数量的字符（包括无）。"],["body","\n"],["body","\n"],["body","\n"],["body","Two asterisks, **,"],["body","\n"],["body","像 * 一样工作，但跨越目录边界。此语法通常用于匹配完整路径。"],["body","\n"],["body","\n"],["body","\n"],["body","A question mark, ?"],["body","\n"],["body","matches exactly one character."],["body","\n"],["body","\n"],["body","\n"],["body","Braces specify a collection of subpatterns. For example:"],["body","\n\n"],["body","{sun,moon,stars} matches \"sun\", \"moon\", or \"stars\"."],["body","\n"],["body","{temp*,tmp*} matches all strings beginning with \"temp\" or \"tmp\"."],["body","\n\n"],["body","\n"],["body","\n"],["body","方括号表示一组单个字符，或者当使用连字符 (-) 时，表示一系列字符。"],["body","\n\n"],["body","[aeiou] matches any lowercase vowel."],["body","\n"],["body","[0-9] matches any digit."],["body","\n"],["body","[A-Z] matches any uppercase letter."],["body","\n"],["body","[a-z,A-Z] matches any uppercase or lowercase letter."],["body","\n\n"],["body","在方括号内，*、? 和 \\ 匹配本身"],["body","\n"],["body","\n"],["body","\n"],["body","所有其他字符匹配自己。 ."],["body","\n"],["body","\n"],["body","\n"],["body","要匹配 *、? 或其他特殊字符，您可以使用反斜杠字符 \\ 对它们进行转义。"],["body","\n"],["body","例如：\\\\ 匹配单个反斜杠，而\\? 匹配问号。"],["body","\n"],["body","\n\n"],["body","以下是 glob 语法的一些示例："],["body","\n\n"],["body","*.html – Matches all strings that end in .html"],["body","\n"],["body","??? – Matches all strings with exactly three letters or digits"],["body","\n"],["body","*[0-9]* – Matches all strings containing a numeric value"],["body","\n"],["body","*.{htm,html,pdf} – Matches any string ending with .htm, .html or .pdf"],["body","\n"],["body","a?*.java – Matches any string beginning with a, followed by at least one letter or digit, and ending with .java"],["body","\n"],["body","{foo*,*[0-9]*} – Matches any string beginning with foo or any string containing a numeric value"],["body","\n\n"],["body","\n"],["body","Note: If you are typing the glob pattern at the keyboard and it contains one of the special characters, you must put the pattern in quotes (\"*\"), use the backslash (\\*), or use whatever escape mechanism is supported at the command line."],["body","\n"],["body","\n"],["body","glob 语法功能强大且易于使用。但是，如果它不能满足您的需求，您也可以使用正则表达式。. For more information, see the Regular Expressions lesson."],["body","\n"],["body","For more information about the glob syntax, see the API specification for the getPathMatcher method in the FileSystem class."],["body","\n"],["headingLink","link-awareness"],["heading","Link Awareness"],["body","\n"],["body","Files 类是“链接感知的”。"],["body","\n"],["body","每个 Files 方法要么检测遇到符号链接时要做什么，要么提供一个选项，使您可以配置遇到符号链接时的行为。"],["body","\n"],["h1","Checking a File or Directory"],["body","\n"],["body","您有一个表示文件或目录的 Path 实例，但该文件是否存在于文件系统中？"],["body","\n"],["body","它可读吗？可写？可执行？"],["body","\n"],["headingLink","验证文件或目录是否存在"],["heading","验证文件或目录是否存在"],["body","\n"],["body","Path 类中的方法是语法上的，这意味着它们对 Path 实例进行操作。"],["body","\n"],["body","但最终您必须访问文件系统以验证特定的“Path”是否存在。"],["body","\n"],["body","您可以使用 [exists(Path, LinkOption...)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#exists- java.nio.file.Path-java.nio.file.LinkOption...-) 和 [notExists(Path, LinkOption...)](https://docs.oracle.com/javase/8/ docs/api/java/nio/file/Files.html#notExists-java.nio.file.Path-java.nio.file.LinkOption...-) 方法。"],["body","\n"],["body","请注意，!Files.exists(path) 不等同于 Files.notExists(path)。"],["body","\n"],["body","您可以使用 [exists(Path, LinkOption...)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#exists- java.nio.file.Path-java.nio.file.LinkOption...-) 和 [notExists(Path, LinkOption...)](https://docs.oracle.com/javase/8/ docs/api/java/nio/file/Files.html#notExists-java.nio.file.Path-java.nio.file.LinkOption...-) 方法。"],["body","\n"],["body","请注意，!Files.exists(path) 不等同于 Files.notExists(path)。"],["body","\n"],["body","当您测试文件是否存在时，可能会出现三种结果：-"],["body","\n\n"],["body","该文件已被验证存在。"],["body","\n"],["body","该文件经验证不存在"],["body","\n"],["body","该文件的状态未知。当程序无权访问该文件时，可能会出现此结果。"],["body","\n\n"],["body","如果 exists 和 notExists 都返回 false，则无法验证文件是否存在。"],["body","\n"],["headingLink","检查文件可访问性"],["heading","检查文件可访问性"],["body","\n"],["body","要验证程序是否可以根据需要访问文件，您可以使用 [isReadable(Path)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files .html#isReadable-java.nio.file.Path-), [isWritable(Path)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files. html#isWritable-java.nio.file.Path-) 和 [isExecutable(Path)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files. html#isExecutable-java.nio.file.Path-) 方法。"],["body","\n"],["body","以下代码片段验证特定文件是否存在以及程序是否能够执行该文件。"],["body","\n"],["body","Path file = ...;\nboolean isRegularExecutableFile = Files.isRegularFile(file) &\n         Files.isReadable(file) & Files.isExecutable(file);\n"],["body","\n"],["body","\n"],["body","Note: 这些方法中的任何一个完成，但不能保证可以访问该文件。"],["body","\n"],["body","许多应用程序中的一个常见安全漏洞是执行检查然后访问文件。"],["body","\n"],["body","有关更多信息，请使用您最喜欢的搜索引擎查找“TOCTTOU”（发音为 TOCK-too）。"],["body","\n"],["body","关于 TOCTTOU攻击的简介"],["body","\n"],["body","\n"],["headingLink","检查两个路径是否定位到同一个文件"],["heading","检查两个路径是否定位到同一个文件"],["body","\n"],["body","当您有一个使用符号链接的文件系统时，可能有两个不同的路径来定位同一个文件。 "],["body","\n"],["body","[isSameFile(Path, Path)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#isSameFile-java.nio.file.Path- java.nio.file.Path-) 方法比较两个路径以确定它们是否在文件系统上定位相同的文件。"],["body","\n"],["body","Path p1 = ...;\nPath p2 = ...;\n\nif (Files.isSameFile(p1, p2)) {\n    // Logic when the paths locate the same file\n}\n"],["body","\n"],["h1","Deleting a File or Directory"],["body","\n"],["body","您可以删除文件、目录或链接。"],["body","\n"],["body","对于符号链接，将删除链接而不是链接的目标。"],["body","\n"],["body","对于目录，目录必须为空，否则删除失败。"],["body","\n"],["body","Files 类提供了两种删除方法。 "],["body","\n"],["body","delete(Path) 方法"],["body","\n"],["body","删除文件或在删除失败时抛出异常。"],["body","\n"],["body","例如，如果文件不存在，则会抛出“NoSuchFileException”。"],["body","\n"],["body","您可以捕获异常以确定删除失败的原因，如下所示："],["body","\n"],["body","try {\n    Files.delete(path);\n} catch (NoSuchFileException x) {\n    System.err.format(\"%s: no such\" + \" file or directory%n\", path);\n} catch (DirectoryNotEmptyException x) {\n    System.err.format(\"%s not empty%n\", path);\n} catch (IOException x) {\n    // File permission problems are caught here.\n    System.err.println(x);\n}\n"],["body","\n"],["body","deleteIfExists(Path) 方法"],["body","\n"],["body","也删除文件，但如果文件不存在，则不会抛出异常。"],["body","\n"],["body","当您有多个线程删除文件并且您不想仅仅因为一个线程首先这样做而抛出异常时，静默失败很有用。"],["body","\n"],["h1","Copying a File or Directory"],["body","\n"],["body","您可以使用 [copy(Path, Path, CopyOption...)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/ Files.html#copy-java.nio.file.Path-java.nio.file.Path-java.nio.file.CopyOption...-) 方法。"],["body","\n"],["body","如果目标文件存在，复制将失败，除非指定了REPLACE_EXISTING 选项。"],["body","\n"],["body","可以复制目录。"],["body","\n"],["body","但是，目录中的文件不会被复制，因此即使原始目录包含文件，新目录也是空的。"],["body","\n"],["body","复制符号链接时，会复制链接的目标。"],["body","\n"],["body","如果您想复制链接本身，而不是链接的内容，请指定NOFOLLOW_LINKS或REPLACE_EXISTING选项。"],["body","\n"],["body","此方法采用 varargs 参数。"],["body","\n"],["body","支持以下 StandardCopyOption 和 LinkOption 枚举："],["body","\n\n"],["body","REPLACE_EXISTING \n\n"],["body","即使目标文件已经存在，也执行复制。"],["body","\n"],["body","如果目标是符号链接，则复制链接本身（而不是链接的目标）。"],["body","\n"],["body","如果目标是非空目录，则复制失败，并出现“DirectoryNotEmptyException”异常。"],["body","\n\n"],["body","\n"],["body","COPY_ATTRIBUTES\n\n"],["body","将与文件关联的文件属性复制到目标文件。"],["body","\n"],["body","跨平台支持  last-modified-time "],["body","\n\n"],["body","\n"],["body","NOFOLLOW_LINKS\n\n"],["body","表示不应遵循符号链接。如果要复制的文件是符号链接，则复制链接（而不是链接的目标）。"],["body","\n\n"],["body","\n\n"],["body","如果您不熟悉 enums，请参阅 Enum 类型。"],["body","\n"],["body","import static java.nio.file.StandardCopyOption.*;\n...\nFiles.copy(source, target, REPLACE_EXISTING);\n"],["body","\n"],["body","除了文件复制之外，“Files”类还定义了可用于在文件和流之间进行复制的方法。 "],["body","\n"],["body","[copy(InputStream, Path, CopyOptions...)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#copy-java.io .InputStream-java.nio.file.Path-java.nio.file.CopyOption...-) 方法可用于将所有字节从输入流复制到文件。 "],["body","\n"],["body","[copy(Path, OutputStream)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#copy-java.nio.file.Path- java.io.OutputStream-) 方法可用于将文件中的所有字节复制到输出流。"],["body","\n"],["body","Copy 示例使用 copy 和 Files.walkFileTree 方法来支持递归复制。"],["body","\n"],["body","有关详细信息，请参阅 遍历文件树。"],["body","\n"],["h1","Moving a File or Directory"],["body","\n"],["body","您可以使用 move(Path, Path, CopyOption...) 方法。"],["body","\n"],["body","如果目标文件存在，则移动失败，除非指定了REPLACE_EXISTING 选项。"],["body","\n"],["body","可以移动空目录。"],["body","\n"],["body","如果目录不为空，则当目录可以移动而不移动该目录的内容时，则允许移动。"],["body","\n"],["body","在 UNIX 系统上，在同一分区内移动目录通常包括重命名目录。"],["body","\n"],["body","在这种情况下，即使目录包含文件，此方法也能工作。"],["body","\n"],["body","此方法采用 varargs 参数 - 支持以下 StandardCopyOption 枚举："],["body","\n\n"],["body","\n"],["body","REPLACE_EXISTING"],["body","\n\n"],["body","即使目标文件已经存在，也执行移动。"],["body","\n"],["body","如果目标是符号链接，则符号链接会被替换，但它指向的内容不受影响。"],["body","\n\n"],["body","\n"],["body","\n"],["body","ATOMIC_MOVE"],["body","\n\n"],["body","\n"],["body","将移动作为原子文件操作执行。"],["body","\n"],["body","\n"],["body","\n"],["body","如果文件系统不支持原子移动，则会抛出异常。"],["body","\n"],["body","\n"],["body","\n"],["body","使用“ATOMIC_MOVE”，您可以将文件移动到目录中，并确保任何观察该目录的进程都访问一个完整的文件。"],["body","\n"],["body","\n\n"],["body","\n\n"],["body","import static java.nio.file.StandardCopyOption.*;\n...\nFiles.move(source, target, REPLACE_EXISTING);\n"],["body","\n"],["body","尽管您可以如图所示在单个目录上实现 move 方法，但该方法最常与文件树递归机制一起使用。"],["body","\n"],["body","有关详细信息，请参阅 遍历文件树。"],["body","\n"],["body","2"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/元数据管理.html"],["title","元数据管理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Managing Metadata"],["body","\n"],["body","File and File Store Attributes"],["body","\n"],["body","元数据的定义是“关于其他数据的数据”。"],["body","\n"],["body","对于文件系统，数据包含在其文件和目录中，元数据跟踪有关每个对象的信息"],["body","\n"],["body","它是常规文件、目录还是链接？"],["body","\n"],["body","它的大小、创建日期、上次修改日期、文件所有者、组所有者和访问权限是多少？"],["body","\n"],["body","文件系统的元数据通常称为其文件属性。 "],["body","\n"],["body","Files 类包括可用于获取文件的单个属性或设置属性的方法。"],["body","\n"],["body","Methods"],["body","Comment"],["body","\n"],["body","size(Path)"],["body","以字节为单位返回指定文件的大小。"],["body","\n"],["body","isDirectory(Path, LinkOption)"],["body","如果指定的 Path 定位的文件是目录，则返回 true。"],["body","\n"],["body","isRegularFile(Path, LinkOption...)"],["body","如果指定的 Path 定位到一个普通文件，则返回 true。"],["body","\n"],["body","isSymbolicLink(Path)"],["body","如果指定的 Path 定位到一个符号链接文件，则返回 true。"],["body","\n"],["body","isHidden(Path)"],["body","如果指定的 Path 找到被文件系统视为隐藏的文件，则返回 true。"],["body","\n"],["body","getLastModifiedTime(Path, LinkOption...) setLastModifiedTime(Path, FileTime)"],["body","返回或设置指定文件的最后修改时间"],["body","\n"],["body","getOwner(Path, LinkOption...) setOwner(Path, UserPrincipal)"],["body","Returns or sets the owner of the file."],["body","\n"],["body","getPosixFilePermissions(Path, LinkOption...) setPosixFilePermissions(Path, Set)"],["body","Returns or sets a file's POSIX file permissions."],["body","\n"],["body","getAttribute(Path, String, LinkOption...) setAttribute(Path, String, Object, LinkOption...)"],["body","Returns or sets the value of a file attribute."],["body","\n\n\n"],["body","如果程序大约同时需要多个文件属性，则使用检索单个属性的方法可能效率低下"],["body","\n"],["body","重复访问文件系统以检索单个属性会对性能产生不利影响。"],["body","\n"],["body","出于这个原因，Files 类提供了两个 readAttributes 方法来在一次批量操作中获取文件的属性。"],["body","\n"],["body","Method"],["body","Comment"],["body","\n"],["body","readAttributes(Path, String, LinkOption...)"],["body","Reads a file's attributes as a bulk operation. The String parameter identifies the attributes to be read."],["body","\n"],["body","readAttributes(Path, Class, LinkOption...)"],["body","Reads a file's attributes as a bulk operation. The Class<A> parameter is the type of attributes requested and the method returns an object of that class."],["body","\n\n\n"],["body","在展示 readAttributes 方法的示例之前，应该提到不同的文件系统对于应该跟踪哪些属性有不同的概念。"],["body","\n"],["body","出于这个原因，相关的文件属性被组合到视图中。"],["body","\n"],["body","视图映射到特定的文件系统实现，例如 POSIX 或 DOS，或者映射到公共功能，例如文件所有权。"],["body","\n"],["body","The supported views are as follows:"],["body","\n\n"],["body","\n"],["body","BasicFileAttributeView "],["body","\n\n"],["body","提供所有文件系统实现需要支持的基本属性的视图。"],["body","\n\n"],["body","\n"],["body","\n"],["body","DosFileAttributeView "],["body","\n\n"],["body","使用支持 DOS 属性的文件系统支持的标准四位扩展基本属性视图。"],["body","\n\n"],["body","\n"],["body","\n"],["body","PosixFileAttributeView"],["body","\n\n"],["body","\n"],["body","使用支持 POSIX 系列标准的文件系统（如 UNIX）支持的属性扩展基本属性视图。"],["body","\n"],["body","这些属性包括文件所有者、组所有者和九个相关的访问权限。"],["body","\n"],["body","\n\n"],["body","\n"],["body","\n"],["body","FileOwnerAttributeView"],["body","\n\n"],["body","任何支持文件所有者概念的文件系统实现都支持。"],["body","\n\n"],["body","\n"],["body","\n"],["body","AclFileAttributeView "],["body","\n\n"],["body","支持读取或更新文件的访问控制列表 (ACL)。"],["body","\n"],["body","支持 NFSv4 ACL 模型。"],["body","\n"],["body","也可能支持具有到 NFSv4 模型的明确定义的映射的任何 ACL 模型，例如 Windows ACL 模型。"],["body","\n\n"],["body","\n"],["body","\n"],["body","UserDefinedFileAttributeView "],["body","\n\n"],["body","启用对用户定义的元数据的支持。"],["body","\n"],["body","该视图可以映射到系统支持的任何扩展机制。"],["body","\n"],["body","例如，在 Solaris OS 中，您可以使用此视图来存储文件的 MIME 类型。"],["body","\n\n"],["body","\n\n"],["body","一个特定的文件系统实现可能只支持基本的文件属性视图，或者它可能支持这些文件属性视图中的几个。"],["body","\n"],["body","文件系统实现可能支持未包含在此 API 中的其他属性视图。"],["body","\n"],["body","在大多数情况下，您不必直接处理任何 FileAttributeView 接口。 "],["body","\n"],["body","（如果您确实需要直接使用 FileAttributeView，则可以通过 getFileAttributeView(Path, Class, LinkOption...) 方法访问它。）"],["body","\n"],["body","readAttributes 方法使用泛型，可用于读取任何文件属性视图的属性。"],["body","\n"],["body","本页其余部分的示例使用 readAttributes 方法。"],["body","\n"],["body","The remainder of this section covers the following topics:"],["body","\n\n"],["body","Basic File Attributes"],["body","\n"],["body","Setting Time Stamps"],["body","\n"],["body","DOS File Attributes"],["body","\n"],["body","POSIX File Permissions"],["body","\n"],["body","Setting a File or Group Owner"],["body","\n"],["body","User-Defined File Attributes"],["body","\n"],["body","File Store Attributes"],["body","\n\n"],["h1","Basic File Attributes"],["body","\n"],["body","如前所述，要读取文件的基本属性，您可以使用“Files.readAttributes”方法之一，该方法在一次批量操作中读取所有基本属性。"],["body","\n"],["body","这比单独访问文件系统以读取每个单独的属性要高效得多。 "],["body","\n"],["body","varargs 参数当前支持 LinkOption 枚举，NOFOLLOW_LINKS。"],["body","\n"],["body","当您不希望遵循符号链接时，请使用此选项。"],["body","\n"],["body","\n"],["body","关于时间戳的一句话： 基本属性集包括三个时间戳：creationTime、lastModifiedTime 和lastAccessTime。"],["body","\n"],["body","在特定实现中可能不支持这些时间戳中的任何一个，在这种情况下，相应的访问器方法返回特定于实现的值。"],["body","\n"],["body","如果支持，时间戳将作为 FileTime 对象返回。"],["body","\n"],["body","\n"],["body","以下代码片段读取并打印给定文件的基本文件属性，并使用 [BasicFileAttributes](https://docs.oracle.com/javase/8/docs/api/java/nio/file /attribute/BasicFileAttributes.html) 类。"],["body","\n"],["body","Path file = ...;\nBasicFileAttributes attr = Files.readAttributes(file, BasicFileAttributes.class);\n\nSystem.out.println(\"creationTime: \" + attr.creationTime());\nSystem.out.println(\"lastAccessTime: \" + attr.lastAccessTime());\nSystem.out.println(\"lastModifiedTime: \" + attr.lastModifiedTime());\n\nSystem.out.println(\"isDirectory: \" + attr.isDirectory());\nSystem.out.println(\"isOther: \" + attr.isOther());\nSystem.out.println(\"isRegularFile: \" + attr.isRegularFile());\nSystem.out.println(\"isSymbolicLink: \" + attr.isSymbolicLink());\nSystem.out.println(\"size: \" + attr.size());\n"],["body","\n"],["body","除了此示例中显示的访问器方法之外，还有一个 fileKey 方法，该方法返回唯一标识文件的对象，或者如果没有文件键可用则返回 null。 "],["body","\n"],["headingLink","setting-time-stamps"],["heading","Setting Time Stamps"],["body","\n"],["body","The following code snippet sets the last modified time in milliseconds:"],["body","\n"],["body","Path file = ...;\nBasicFileAttributes attr =\n    Files.readAttributes(file, BasicFileAttributes.class);\nlong currentTime = System.currentTimeMillis();\nFileTime ft = FileTime.fromMillis(currentTime);\nFiles.setLastModifiedTime(file, ft);\n}\n"],["body","\n"],["h1","DOS File Attributes"],["body","\n"],["body","DOS 文件属性也受 DOS 以外的文件系统支持，例如 Samba。"],["body","\n"],["body","以下代码段使用 DosFileAttributes 类的方法。 "],["body","\n"],["body","Path file = ...;\ntry {\n    DosFileAttributes attr =\n        Files.readAttributes(file, DosFileAttributes.class);\n    System.out.println(\"isReadOnly is \" + attr.isReadOnly());\n    System.out.println(\"isHidden is \" + attr.isHidden());\n    System.out.println(\"isArchive is \" + attr.isArchive());\n    System.out.println(\"isSystem is \" + attr.isSystem());\n} catch (UnsupportedOperationException x) {\n    System.err.println(\"DOS file\" +\n        \" attributes not supported:\" + x);\n}\n"],["body","\n"],["body","但是，您可以使用 [setAttribute(Path, String, Object, LinkOption...)](https://docs.oracle.com/javase/8/docs/api/java/nio/ file/Files.html#setAttribute-java.nio.file.Path-java.lang.String-java.lang.Object-java.nio.file.LinkOption...-) 方法，如下："],["body","\n"],["body","Path file = ...;\nFiles.setAttribute(file, \"dos:hidden\", true);\n"],["body","\n"],["h1","POSIX File Permissions"],["body","\n"],["body","POSIX 是 Portable Operating System Interface for UNIX 的首字母缩写，是一组 IEEE 和 ISO 标准，旨在确保不同风格的 UNIX 之间的互操作性。"],["body","\n"],["body","如果程序符合这些 POSIX 标准，它应该很容易移植到其他符合 POSIX 的操作系统。"],["body","\n"],["body","除了文件所有者和组所有者之外，POSIX 还支持九种文件权限：文件所有者、同一组成员和“其他人”的读、写和执行权限。"],["body","\n"],["body","以下代码片段读取给定文件的 POSIX 文件属性并将它们打印到标准输出。"],["body","\n"],["body","该代码使用 PosixFileAttributes 类中的方法。"],["body","\n"],["body","Path file = ...;\nPosixFileAttributes attr =\n    Files.readAttributes(file, PosixFileAttributes.class);\nSystem.out.format(\"%s %s %s%n\",\n    attr.owner().getName(),\n    attr.group().getName(),\n    PosixFilePermissions.toString(attr.permissions()));\n"],["body","\n"],["body","PosixFilePermissions helper 类提供了几个有用的方法，如下："],["body","\n\n"],["body","toString 方法，在前面的代码片段中使用，将文件权限转换为字符串（例如，rw-r--r--）。"],["body","\n"],["body","fromString 方法接受一个表示文件权限的字符串并构造一个文件权限的 Set。"],["body","\n"],["body","asFileAttribute 方法接受文件权限的 Set 并构造一个可以传递给 Path.createFile 或 Path.createDirectory 方法的文件属性。"],["body","\n\n"],["body","以下代码片段从一个文件中读取属性并创建一个新文件，将原始文件中的属性分配给新文件："],["body","\n"],["body","Path sourceFile = ...;\nPath newFile = ...;\nPosixFileAttributes attrs =\n    Files.readAttributes(sourceFile, PosixFileAttributes.class);\nFileAttribute<Set<PosixFilePermission>> attr =\n    PosixFilePermissions.asFileAttribute(attrs.permissions());\nFiles.createFile(file, attr);\n"],["body","\n"],["body","asFileAttribute 方法将权限包装为一个 FileAttribute。"],["body","\n"],["body","然后代码尝试创建一个具有这些权限的新文件。"],["body","\n"],["body","请注意，umask 也适用，因此新文件可能比请求的权限更安全。"],["body","\n"],["body","要将文件的权限设置为表示为硬编码字符串的值，您可以使用以下代码："],["body","\n"],["body","Path file = ...;\nSet<PosixFilePermission> perms =\n    PosixFilePermissions.fromString(\"rw-------\");\nFileAttribute<Set<PosixFilePermission>> attr =\n    PosixFilePermissions.asFileAttribute(perms);\nFiles.setPosixFilePermissions(file, perms);\n"],["body","\n"],["body","Chmod 示例以类似于 chmod 实用程序的方式递归更改文件的权限。"],["body","\n"],["headingLink","setting-a-file-or-group-owner"],["heading","Setting a File or Group Owner"],["body","\n"],["body","要将名称转换为对象，您可以将其存储为文件所有者或组所有者"],["body","\n"],["body","您可以使用 UserPrincipalLookupService 服务。"],["body","\n"],["body","此服务将名称或组名称作为字符串查找，并返回表示该字符串的“UserPrincipal”对象。"],["body","\n"],["body","您可以通过使用 [FileSystem.getUserPrincipalLookupService](https://docs.oracle.com/javase/8/docs/api/java/nio/file/ FileSystem.html#getUserPrincipalLookupService--) 方法。"],["body","\n"],["body","以下代码片段显示了如何使用setOwner 方法设置文件所有者： "],["body","\n"],["body","Path file = ...;\nUserPrincipal owner = file.GetFileSystem().getUserPrincipalLookupService()\n        .lookupPrincipalByName(\"sally\");\nFiles.setOwner(file, owner);\n"],["body","\n"],["body","Files 类中没有用于设置组所有者的特殊用途方法。"],["body","\n"],["body","但是，直接这样做的安全方法是通过 POSIX 文件属性查看"],["body","\n"],["body","Path file = ...;\nGroupPrincipal group =\n    file.getFileSystem().getUserPrincipalLookupService()\n        .lookupPrincipalByGroupName(\"green\");\nFiles.getFileAttributeView(file, PosixFileAttributeView.class)\n     .setGroup(group);\n"],["body","\n"],["headingLink","user-defined-file-attributes"],["heading","User-Defined File Attributes"],["body","\n"],["body","如果您的文件系统实现支持的文件属性不足以满足您的需求，您可以使用“UserDefinedAttributeView”来创建和跟踪您自己的文件属性。"],["body","\n"],["body","一些实现将此概念映射到诸如 NTFS 替代数据流之类的功能以及文件系统（如 ext3 和 ZFS）上的扩展属性。"],["body","\n"],["body","大多数实现都对值的大小施加了限制，例如，ext3 将大小限制为 4 KB。"],["body","\n"],["body","可以使用以下代码片段将文件的 MIME 类型存储为用户定义的属性:"],["body","\n"],["body","Path file = ...;\nUserDefinedFileAttributeView view = Files\n    .getFileAttributeView(file, UserDefinedFileAttributeView.class);\nview.write(\"user.mimetype\",\n           Charset.defaultCharset().encode(\"text/html\");\n"],["body","\n"],["body","To read the MIME type attribute, you would use this code snippet:"],["body","\n"],["body","Path file = ...;\nUserDefinedFileAttributeView view = Files\n.getFileAttributeView(file,UserDefinedFileAttributeView.class);\nString name = \"user.mimetype\";\nByteBuffer buf = ByteBuffer.allocate(view.size(name));\nview.read(name, buf);\nbuf.flip();\nString value = Charset.defaultCharset().decode(buf).toString();\n"],["body","\n"],["body","Xdd 示例展示了如何获取、设置和删除用户定义的属性。 "],["body","\n"],["body","注意： 在 Linux 中，您可能必须启用扩展属性才能使用户定义的属性起作用。"],["body","\n"],["body","如果在尝试访问用户定义的属性视图时收到 UnsupportedOperationException，则需要重新挂载文件系统。"],["body","\n"],["body","以下命令为 ext3 文件系统重新挂载具有扩展属性的根分区。"],["body","\n"],["body","如果此命令不适用于您的 Linux 风格，请查阅文档。"],["body","\n"],["body","$ sudo mount -o remount,user_xattr /\n"],["body","\n"],["body","如果您想让更改永久生效，请在 /etc/fstab 中添加一个条目。"],["body","\n"],["headingLink","file-store-attributes"],["heading","File Store Attributes"],["body","\n"],["body","您可以使用 FileStore 类来了解有关文件存储的信息，例如如何有很多空间可用。 "],["body","\n"],["body","getFileStore(Path) 方法"],["body","\n"],["body","获取指定文件的文件存储。"],["body","\n"],["body","以下代码片段打印特定文件所在的文件存储的空间使用情况"],["body","\n"],["body","Path file = ...;\nFileStore store = Files.getFileStore(file);\n\nlong total = store.getTotalSpace() / 1024;\nlong used = (store.getTotalSpace() -\n             store.getUnallocatedSpace()) / 1024;\nlong avail = store.getUsableSpace() / 1024;\n"],["body","\n"],["body","DiskUsage 示例使用此 API 打印默认文件系统中所有存储的磁盘空间信息。"],["body","\n"],["body","此示例使用 FileSystem 类中的 getFileStores 方法来"],["body","\n"],["body","获取文件系统的所有文件存储。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/文件读写.html"],["title","文件读写.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Reading, Writing, and Creating Files"],["body","\n"],["body","此页面讨论读取、写入、创建和打开文件的详细信息。"],["body","\n"],["body","有多种文件 I/O 方法可供选择。"],["body","\n"],["body","为了帮助理解 API，下图按复杂性排列了文件 I/O 方法。"],["body","\n"],["body","文件 I/O 方法从不太复杂到更复杂排列"],["body","\n"],["body","方法名"],["body","使用场景"],["body","\n"],["body","ReadAllBytes readAllLines"],["body","小文件读取"],["body","\n"],["body","newBufferedReader newBufferedWriter"],["body","text中等文件"],["body","\n"],["body","newInputSream newOutputStream"],["body","streams、unbuffered  use   with existing APIS"],["body","\n"],["body","newByteChannel"],["body","channels and bytebuffers"],["body","\n"],["body","FileChannel"],["body","advanced features file-locking memory-mapped io"],["body","\n\n\n"],["body","注意：创建新文件的方法使您能够为文件指定一组可选的初始属性。"],["body","\n"],["body","例如，在支持 POSIX 标准集的文件系统（如 UNIX）上，您可以在创建文件时指定文件所有者、组所有者或文件权限。"],["body","\n"],["body","管理元数据页面解释了文件属性，以及如何访问和设置它们。"],["body","\n"],["body","This page has the following topics:"],["body","\n\n"],["body","The OpenOptions Parameter"],["body","\n"],["body","Commonly Used Methods for Small Files"],["body","\n"],["body","Buffered I/O Methods for Text Files"],["body","\n"],["body","Methods for Unbuffered Streams and Interoperable with java.io APIs"],["body","\n"],["body","Methods for Channels and ByteBuffers"],["body","\n"],["body","Methods for Creating Regular and Temporary Files"],["body","\n\n"],["headingLink","the-openoptions-parameter"],["heading","The OpenOptions Parameter"],["body","\n"],["body","本节中的一些方法采用可选的 OpenOptions 参数。"],["body","\n"],["body","此参数是可选的，API 会告诉您在未指定任何方法时该方法的默认行为是什么。"],["body","\n"],["body","The following StandardOpenOptions enums are supported:"],["body","\n\n"],["body","WRITE – 写访问"],["body","\n"],["body","APPEND – 将新数据附加到文件末尾。此选项与 WRITE 或 CREATE 选项一起使用。"],["body","\n"],["body","TRUNCATE_EXISTING – 将文件截断为零字节。此选项与WRITE 选项一起使用。"],["body","\n"],["body","CREATE_NEW – 创建一个新文件并在文件已存在时抛出异常。"],["body","\n"],["body","CREATE – 如果文件存在则打开文件，如果不存在则创建新文件。"],["body","\n"],["body","DELETE_ON_CLOSE – 当流关闭时删除文件。此选项对临时文件很有用。"],["body","\n"],["body","SPARSE – 提示新创建的文件将是稀疏的。在某些文件系统（例如 NTFS）上使用此高级选项，在这些系统中，可以以更有效的方式存储具有数据“间隙”的大文件，而这些空白间隙不会占用磁盘空间。"],["body","\n"],["body","SYNC – 保持文件（内容和元数据）与底层存储设备同步。"],["body","\n"],["body","DSYNC – 保持文件内容与底层存储设备同步。"],["body","\n\n"],["h1","Commonly Used Methods for Small Files"],["body","\n"],["headingLink","reading-all-bytes-or-lines-from-a-file"],["heading","Reading All Bytes or Lines from a File"],["body","\n"],["body","如果您有一个小文件，并且希望一次性读取其全部内容，则可以使用 readAllBytes(Path) 或 readAllLines(Path, Charset) 方法。"],["body","\n"],["body","这些方法会为您处理大部分工作，例如打开和关闭流，但不适用于处理大文件。"],["body","\n"],["body","Path file = ...;\nbyte[] fileArray;\nfileArray = Files.readAllBytes(file);\n"],["body","\n"],["headingLink","writing-all-bytes-or-lines-to-a-file"],["heading","Writing All Bytes or Lines to a File"],["body","\n"],["body","您可以使用其中一种写入方法将字节或行写入文件"],["body","\n\n"],["body","write(Path, byte[\\], OpenOption...)"],["body","\n"],["body","write(Path, Iterable< extends CharSequence>, Charset, OpenOption...)"],["body","\n\n"],["body","Path file = ...;\nbyte[] buf = ...;\nFiles.write(file, buf);\n"],["body","\n"],["h1","文本文件的缓冲 I/O 方法"],["body","\n"],["body","The java.nio.file package supports channel I/O, which moves data in buffers,绕过一些可能成为流 I/O 瓶颈的层。"],["body","\n"],["headingLink","reading-a-file-by-using-buffered-stream-io"],["heading","Reading a File by Using Buffered Stream I/O"],["body","\n"],["body","newBufferedReader(Path, Charset) 方法打开一个文件进行读取，返回一个 BufferedReader，可用于以高效的方式从文件中读取文本。"],["body","\n"],["body","以下代码片段展示了如何使用 newBufferedReader 方法从文件中读取数据。该文件以“US-ASCII”编码。"],["body","\n"],["body","Charset charset = Charset.forName(\"US-ASCII\");\ntry (BufferedReader reader = Files.newBufferedReader(file, charset)) {\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n        System.out.println(line);\n    }\n} catch (IOException x) {\n    System.err.format(\"IOException: %s%n\", x);\n}\n"],["body","\n"],["headingLink","writing-a-file-by-using-buffered-stream-io"],["heading","Writing a File by Using Buffered Stream I/O"],["body","\n"],["body","您可以使用 [newBufferedWriter(Path, Charset, OpenOption...)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#newBufferedWriter- java.nio.file.Path-java.nio.charset.Charset-java.nio.file.OpenOption...-) 使用 BufferedWriter 写入文件的方法。"],["body","\n"],["body","Charset charset = Charset.forName(\"US-ASCII\");\nString s = ...;\ntry (BufferedWriter writer = Files.newBufferedWriter(file, charset)) {\n    writer.write(s, 0, s.length());\n} catch (IOException x) {\n    System.err.format(\"IOException: %s%n\", x);\n}\n"],["body","\n"],["h1","无缓冲流和可与 java.io API 互操作的方法"],["body","\n"],["headingLink","reading-a-file-by-using-stream-io"],["heading","Reading a File by Using Stream I/O"],["body","\n"],["body","要打开文件进行读取，您可以使用 newInputStream(Path, OpenOption...) 方法。"],["body","\n"],["body","此方法返回一个无缓冲的输入流，用于从文件中读取字节。"],["body","\n"],["body","Path file = ...;\ntry (InputStream in = Files.newInputStream(file);\n    BufferedReader reader =\n      new BufferedReader(new InputStreamReader(in))) {\n    String line = null;\n    while ((line = reader.readLine()) != null) {\n        System.out.println(line);\n    }\n} catch (IOException x) {\n    System.err.println(x);\n}\n"],["body","\n"],["headingLink","creating-and-writing-a-file-by-using-stream-io"],["heading","Creating and Writing a File by Using Stream I/O"],["body","\n"],["body","您可以使用 newOutputStream(Path, OpenOption...) 方法创建文件、附加到文件或写入文件。"],["body","\n"],["body","此方法打开或创建用于写入字节的文件并返回无缓冲的输出流。"],["body","\n"],["body","该方法采用可选的 OpenOption 参数。"],["body","\n"],["body","如果未指定打开选项，并且文件不存在，则会创建一个新文件。"],["body","\n"],["body","如果文件存在，则将其截断。"],["body","\n"],["body","此选项等效于使用 CREATE 和 TRUNCATE_EXISTING 选项调用方法。"],["body","\n"],["body","以下示例打开一个日志文件。"],["body","\n"],["body","如果文件不存在，则创建它。"],["body","\n"],["body","如果文件存在，则将其打开以进行追加。"],["body","\n"],["body","import static java.nio.file.StandardOpenOption.*;\nimport java.nio.file.*;\nimport java.io.*;\n\npublic class LogFileTest {\n\n  public static void main(String[] args) {\n\n    // Convert the string to a\n    // byte array.\n    String s = \"Hello World! \";\n    byte data[] = s.getBytes();\n    Path p = Paths.get(\"./logfile.txt\");\n\n    try (OutputStream out = new BufferedOutputStream(\n      Files.newOutputStream(p, CREATE, APPEND))) {\n      out.write(data, 0, data.length);\n    } catch (IOException x) {\n      System.err.println(x);\n    }\n  }\n}\n"],["body","\n"],["h1","Methods for Channels and ByteBuffers"],["body","\n"],["headingLink","reading-and-writing-files-by-using-channel-io"],["heading","Reading and Writing Files by Using Channel I/O"],["body","\n"],["body","流 I/O 一次读取一个字符，而通道 I/O 一次读取一个缓冲区。 "],["body","\n"],["body","ByteChannel 接口提供基本的读写功能。 "],["body","\n"],["body","SeekableByteChannel 是一个 ByteChannel，它能够在通道中保持位置并更改该位置。 "],["body","\n"],["body","SeekableByteChannel 还支持截断与通道关联的文件并查询文件的大小。"],["body","\n"],["body","移动到文件中的不同点然后从该位置读取或写入该位置的能力使得随机访问文件成为可能。"],["body","\n"],["body","There are two methods for reading and writing channel I/O."],["body","\n\n"],["body","newByteChannel(Path, OpenOption...)"],["body","\n"],["body","newByteChannel(Path, Set, FileAttribute...)"],["body","\n\n"],["body","注意：newByteChannel 方法返回 SeekableByteChannel 的一个实例。"],["body","\n"],["body","使用默认文件系统，您可以将此可查找字节通道转换为 FileChannel 以提供对更高级功能的访问，例如将文件区域直接映射到内存以加快访问速度、锁定文件区域以便其他进程无法访问它，或者"],["body","\n"],["body","从绝对位置读取和写入字节而不影响通道的当前位置。"],["body","\n"],["body","两个 newByteChannel 方法都允许您指定一个 OpenOption 选项列表。"],["body","\n"],["body","支持newOutputStream 方法使用的相同打开选项，"],["body","\n"],["body","此外还有一个选项：READ 是必需的，因为 SeekableByteChannel 支持读取和写入。"],["body","\n"],["body","指定 READ 打开读取通道。"],["body","\n"],["body","指定 WRITE 或 APPEND 打开写入通道。"],["body","\n"],["body","如果没有指定这些选项，则打开通道进行读取。"],["body","\n"],["body","public static void readFile(Path path) throws IOException {\n\n    // Files.newByteChannel() defaults to StandardOpenOption.READ\n    try (SeekableByteChannel sbc = Files.newByteChannel(path)) {\n        final int BUFFER_CAPACITY = 10;\n        ByteBuffer buf = ByteBuffer.allocate(BUFFER_CAPACITY);\n\n        // Read the bytes with the proper encoding for this platform. If\n        // you skip this step, you might see foreign or illegible\n        // characters.\n        String encoding = System.getProperty(\"file.encoding\");\n        while (sbc.read(buf) > 0) {\n            buf.flip();\n            System.out.print(Charset.forName(encoding).decode(buf));\n            buf.clear();\n        }\n    }    \n}\n"],["body","\n"],["body","以下示例是为 UNIX 和其他 POSIX 文件系统编写的，它创建一个具有特定文件权限集的日志文件。"],["body","\n"],["body","此代码创建一个日志文件或附加到日志文件（如果它已经存在）。"],["body","\n"],["body","创建的日志文件具有所有者的读/写权限和组的只读权限。"],["body","\n"],["body","import static java.nio.file.StandardOpenOption.*;\nimport java.nio.*;\nimport java.nio.channels.*;\nimport java.nio.file.*;\nimport java.nio.file.attribute.*;\nimport java.io.*;\nimport java.util.*;\n\npublic class LogFilePermissionsTest {\n\n  public static void main(String[] args) {\n  \n    // Create the set of options for appending to the file.\n    Set<OpenOption> options = new HashSet<OpenOption>();\n    options.add(APPEND);\n    options.add(CREATE);\n\n    // Create the custom permissions attribute.\n    Set<PosixFilePermission> perms =\n      PosixFilePermissions.fromString(\"rw-r-----\");\n    FileAttribute<Set<PosixFilePermission>> attr =\n      PosixFilePermissions.asFileAttribute(perms);\n\n    // Convert the string to a ByteBuffer.\n    String s = \"Hello World! \";\n    byte data[] = s.getBytes();\n    ByteBuffer bb = ByteBuffer.wrap(data);\n    \n    Path file = Paths.get(\"./permissions.log\");\n\n    try (SeekableByteChannel sbc =\n      Files.newByteChannel(file, options, attr)) {\n      sbc.write(bb);\n    } catch (IOException x) {\n      System.out.println(\"Exception thrown: \" + x);\n    }\n  }\n}\n"],["body","\n"],["h1","Methods for Creating Regular and Temporary Files"],["body","\n"],["headingLink","creating-files"],["heading","Creating Files"],["body","\n"],["body","您可以使用 [createFile(Path, FileAttribute)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/ Files.html#createFile-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-) 方法。"],["body","\n"],["body","例如，如果在创建时，您希望文件具有一组特定的文件权限，请使用 createFile 方法来实现。"],["body","\n"],["body","如果未指定任何属性，则使用默认属性创建文件。"],["body","\n"],["body","如果文件已经存在，createFile 会抛出异常。"],["body","\n"],["body","createFile 方法检查文件的存在并创建具有指定属性的文件在单个原子操作中，这使得该过程更安全地抵御恶意代码。"],["body","\n"],["body","以下代码片段创建了一个具有默认属性的文件"],["body","\n"],["body","Path file = ...;\ntry {\n    // Create the empty file with default permissions, etc.\n    Files.createFile(file);\n} catch (FileAlreadyExistsException x) {\n    System.err.format(\"file named %s\" +\n        \" already exists%n\", file);\n} catch (IOException x) {\n    // Some other sort of failure, such as permissions.\n    System.err.format(\"createFile error: %s%n\", x);\n}\n"],["body","\n"],["body","POSIX 文件权限 有一个使用 createFile(Path, FileAttribute) 创建文件的例子"],["body","\n"],["body","具有预设权限。"],["body","\n"],["body","您还可以使用 newOutputStream 方法创建新文件，如使用流 I/O 创建和写入文件。"],["body","\n"],["body","如果您打开一个新的输出流并立即关闭它，则会创建一个空文件。"],["body","\n"],["headingLink","creating-temporary-files"],["heading","Creating Temporary Files"],["body","\n"],["body","您可以使用以下 createTempFile 方法之一创建临时文件："],["body","\n\n"],["body","createTempFile(Path, String, String, FileAttribute)"],["body","\n"],["body","createTempFile(String, String, FileAttribute)"],["body","\n\n"],["body","第一种方法允许代码为临时文件指定一个目录，"],["body","\n"],["body","第二种方法在默认临时文件目录中创建一个新文件。"],["body","\n"],["body","这两种方法都允许您为文件名指定后缀，第一种方法还允许您指定前缀。"],["body","\n"],["body","以下代码片段给出了第二种方法的示例："],["body","\n"],["body","try {\n    Path tempFile = Files.createTempFile(null, \".myapp\");\n    System.out.format(\"The temporary file\" +\n        \" has been created: %s%n\", tempFile)\n;\n} catch (IOException x) {\n    System.err.format(\"IOException: %s%n\", x);\n}\n"],["body","\n"],["body","The result of running this file would be something like the following:"],["body","\n"],["body","The temporary file has been created: /tmp/509668702974537184.myapp\n"],["body","\n"],["body","临时文件名的具体格式是平台特定的。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/RandomAccessFiles.html"],["title","RandomAccessFiles.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Random Access Files"],["body","\n"],["body","随机访问文件允许对文件内容进行非顺序或随机访问。"],["body","\n"],["body","要随机访问文件，您可以打开文件，查找特定位置，然后读取或写入该文件。"],["body","\n"],["body","此功能可通过 SeekableByteChannel 接口实现。 SeekableByteChannel 接口使用当前位置的概念扩展了通道 I/O。"],["body","\n"],["body","方法使您能够设置或查询位置，然后您可以从该位置读取数据或将数据写入该位置。 "],["body","\n"],["body","API 由几个易于使用的方法组成："],["body","\n\n"],["body","position – 返回channel的当前位置 "],["body","\n"],["body","position(long) – 设置channel位置"],["body","\n"],["body","read(ByteBuffer) – Reads bytes into the buffer from the channel"],["body","\n"],["body","write(ByteBuffer) – Writes bytes from the buffer to the channel"],["body","\n"],["body","truncate(long) – 截断连接到通道的文件（或其他实体）"],["body","\n\n"],["body","使用通道 I/O 读取和写入文件 显示 Path.newByteChannel 方法返回一个"],["body","\n"],["body","SeekableByteChannel。"],["body","\n"],["body","在默认文件系统上，您可以按原样使用该通道，也可以将其转换为 [FileChannel](https://docs.oracle.com/javase/8/docs/api/java/nio/channels /FileChannel.html) 让您可以访问更高级的功能，例如将文件区域直接映射到内存以加快访问速度、锁定文件区域或从绝对位置读取和写入字节而不影响通道的当前位置"],["body","\n"],["body","The following code snippet opens a file for both reading and writing by using one of the newByteChannel methods."],["body","\n"],["body","以下代码片段使用“newByteChannel”方法之一打开一个文件以供读取和写入。"],["body","\n"],["body","返回的 SeekableByteChannel 被转换为 FileChannel。"],["body","\n"],["body","然后，从文件的开头读取 12 个字节，以及字符串“我在这里！” 写在那个位置。"],["body","\n"],["body","将文件中的当前位置移到末尾，并附加从开头开始的 12 个字节。"],["body","\n"],["body","最后附加字符串：“我在这里！”"],["body","\n"],["body","String s = \"I was here!\\n\";\nbyte data[] = s.getBytes();\nByteBuffer out = ByteBuffer.wrap(data);\n\nByteBuffer copy = ByteBuffer.allocate(12);\n\ntry (FileChannel fc = (FileChannel.open(file, READ, WRITE))) {\n    // Read the first 12\n    // bytes of the file.\n    int nread;\n    do {\n        nread = fc.read(copy);\n    } while (nread != -1 && copy.hasRemaining());\n\n    // Write \"I was here!\" at the beginning of the file.\n    fc.position(0);\n    while (out.hasRemaining())\n        fc.write(out);\n    out.rewind();\n\n    // Move to the end of the file.  Copy the first 12 bytes to\n    // the end of the file.  Then write \"I was here!\" again.\n    long length = fc.size();\n    fc.position(length-1);\n    copy.flip();\n    while (copy.hasRemaining())\n        fc.write(copy);\n    while (out.hasRemaining())\n        fc.write(out);\n} catch (IOException x) {\n    System.out.println(\"I/O Exception: \" + x);\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/LinksSymbolicOtherwise.html"],["title","LinksSymbolicOtherwise.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Links, Symbolic or Otherwise"],["body","\n"],["body","如前所述，java.nio.file 包，特别是 Path 类，是“链接感知的”。"],["body","\n"],["body","每个“Path”方法要么检测遇到符号链接时要做什么，要么提供一个选项，使您可以配置遇到符号链接时的行为。"],["body","\n"],["body","到目前为止的讨论是关于 符号或 软 链接，但一些文件系统也支持硬链接。 "],["body","\n"],["body","硬链接比符号链接更具限制性，如下所示：-"],["body","\n\n"],["body","\n"],["body","链接的目标必须存在。 "],["body","\n"],["body","\n"],["body","\n"],["body","目录上通常不允许使用硬链接。."],["body","\n"],["body","\n"],["body","\n"],["body","硬链接不允许跨分区或卷。因此，它们不能跨文件系统存在。"],["body","\n"],["body","\n"],["body","\n"],["body","硬链接的外观和行为都与普通文件相似，因此很难找到它们。"],["body","\n"],["body","\n"],["body","\n"],["body","就所有意图和目的而言，硬链接是与原始文件相同的实体。它们具有相同的文件权限、时间戳等。"],["body","\n"],["body","所有属性都相同。"],["body","\n"],["body","\n\n"],["body","由于这些限制，硬链接不像符号链接那样经常使用，但是Path 方法可以与硬链接无缝协作。"],["body","\n"],["body","几种方法专门处理链接，并在以下部分中介绍：:"],["body","\n\n"],["body","Creating a Symbolic Link"],["body","\n"],["body","Creating a Hard Link"],["body","\n"],["body","Detecting a Symbolic Link"],["body","\n"],["body","Finding the Target of a Link"],["body","\n\n"],["h1","Creating a Symbolic Link"],["body","\n"],["body","如果您的文件系统支持它，您可以使用 [createSymbolicLink(Path, Path, FileAttribute)](https://docs.oracle.com/javase/8/docs/api/java/nio /file/Files.html#createSymbolicLink-java.nio.file.Path-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-) 方法。"],["body","\n"],["body","第二个“Path”参数代表目标文件或目录，可能存在也可能不存在。"],["body","\n"],["body","以下代码片段创建了一个具有默认权限的符号链接"],["body","\n"],["body","Path newLink = ...;\nPath target = ...;\ntry {\n    Files.createSymbolicLink(newLink, target);\n} catch (IOException x) {\n    System.err.println(x);\n} catch (UnsupportedOperationException x) {\n    // Some file systems do not support symbolic links.\n    System.err.println(x);\n}\n"],["body","\n"],["body","FileAttributes 可变参数使您能够指定在创建链接时自动设置的初始文件属性。"],["body","\n"],["body","但是，此参数旨在供将来使用，目前尚未实现。 "],["body","\n"],["h1","Creating a Hard Link"],["body","\n"],["body","您可以使用 [createLink(Path, Path)](https://docs.oracle.com/javase/8/docs/api/java/ nio/file/Files.html#createLink-java.nio.file.Path-java.nio.file.Path-) 方法。"],["body","\n"],["body","第二个 Path 参数定位现有文件，它必须存在，否则会抛出 NoSuchFileException。"],["body","\n"],["body","以下代码片段显示了如何创建链接："],["body","\n"],["body","Path newLink = ...;\nPath existingFile = ...;\ntry {\n    Files.createLink(newLink, existingFile);\n} catch (IOException x) {\n    System.err.println(x);\n} catch (UnsupportedOperationException x) {\n    // Some file systems do not\n    // support adding an existing\n    // file to a directory.\n    System.err.println(x);\n}\n"],["body","\n"],["h1","Detecting a Symbolic Link"],["body","\n"],["body","要确定一个 Path 实例是否是符号链接，可以使用 [isSymbolicLink(Path)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/ Files.html#isSymbolicLink-java.nio.file.Path-) 方法。"],["body","\n"],["body","以下代码片段显示了如何："],["body","\n"],["body","Path file = ...;\nboolean isSymbolicLink =\n    Files.isSymbolicLink(file);\n"],["body","\n"],["body","For more information, see Managing Metadata."],["body","\n"],["h1","Finding the Target of a Link"],["body","\n"],["body","您可以使用 readSymbolicLink(Path) 获取符号链接的目标方法，如下"],["body","\n"],["body","\nPath link = ...;\ntry {\n    System.out.format(\"Target of link\" +\n        \" '%s' is '%s'%n\", link,\n        Files.readSymbolicLink(link));\n} catch (IOException x) {\n    System.err.println(x);\n}\n"],["body","\n"],["body","如果 Path 不是符号链接，则此方法会抛出一个 NotLinkException。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/其他有用方法.html"],["title","其他有用方法.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Other Useful Methods"],["body","\n"],["body","一些有用的方法在本课的其他地方不适用，在此处进行了介绍。"],["body","\n"],["body","本节涵盖以下内容：:"],["body","\n\n"],["body","Determining MIME Type"],["body","\n"],["body","Default File System"],["body","\n"],["body","Path String Separator"],["body","\n"],["body","File System's File Stores"],["body","\n\n"],["h1","Determining MIME Type"],["body","\n"],["body","要确定文件的 MIME 类型，您可能会找到 [probeContentType(Path)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html# probeContentType-java.nio.file.Path-) 方法很有用。"],["body","\n"],["body","try {\n    String type = Files.probeContentType(filename);\n    if (type == null) {\n        System.err.format(\"'%s' has an\" + \" unknown filetype.%n\", filename);\n    } else if (!type.equals(\"text/plain\") {\n        System.err.format(\"'%s' is not\" + \" a plain text file.%n\", filename);\n        continue;\n    }\n} catch (IOException x) {\n    System.err.println(x);\n}\n"],["body","\n"],["body","请注意，如果无法确定内容类型，probeContentType 将返回 null。"],["body","\n"],["body","这种方法的实现是高度特定于平台的，并且不是绝对可靠的。"],["body","\n"],["body","内容类型由平台的默认文件类型检测器确定。"],["body","\n"],["body","例如，如果检测器根据.class 扩展名确定文件的内容类型为application/x-java，它可能会被愚弄。"],["body","\n"],["body","如果默认值不足以满足您的需求，您可以提供自定义 FileTypeDetector "],["body","\n"],["body","Email 示例使用了 probeContentType 方法。"],["body","\n"],["h1","Default File System"],["body","\n"],["body","要检索默认文件系统，请使用 getDefault 方法。"],["body","\n"],["body","通常，这个 FileSystems 方法（注意复数）被链接到 FileSystem 方法之一（注意单数），如下所示："],["body","\n"],["body","PathMatcher matcher =\n    FileSystems.getDefault().getPathMatcher(\"glob:*.*\");\n"],["body","\n"],["h1","Path String Separator"],["body","\n"],["body","POSIX 文件系统的路径分隔符是正斜杠/，而对于Microsoft Windows 是反斜杠\\。"],["body","\n"],["body","其他文件系统可能使用其他分隔符。"],["body","\n"],["body","要检索默认文件系统的 Path 分隔符，您可以使用以下方法之一："],["body","\n"],["body","String separator = File.separator;\nString separator = FileSystems.getDefault().getSeparator();\n"],["body","\n"],["body","getSeparator 方法也用于检索可用的文件系统的路径分隔符"],["body","\n"],["h1","File System's File Stores"],["body","\n"],["body","一个文件系统有一个或多个文件存储来保存它的文件和目录。 "],["body","\n"],["body","file store 代表底层存储设备。"],["body","\n"],["body","在 UNIX 操作系统中，每个挂载的文件系统都由一个文件存储区表示。"],["body","\n"],["body","在 Microsoft Windows 中，每个卷都由一个文件存储区表示：C:、D: 等等。."],["body","\n"],["body","要检索文件系统的所有文件存储列表，您可以使用 getFileStores 方法。"],["body","\n"],["body","此方法返回一个 Iterable，它允许您使用 enhanced for 语句遍历所有根目录。"],["body","\n"],["body","for (FileStore store: FileSystems.getDefault().getFileStores()) {\n   ...\n}\n"],["body","\n"],["body","如果要检索特定文件所在的文件存储，请使用 getFileStore"],["body","\n"],["body","Files 类中的 方法"],["body","\n"],["body","Path file = ...;\nFileStore store= Files.getFileStore(file);\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/监控目录变化.html"],["title","监控目录变化.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Watching a Directory for Changes"],["body","\n"],["body","您是否曾经发现自己在使用 IDE 或其他编辑器编辑文件时会出现一个对话框，通知您其中一个打开的文件在文件系统上已更改并需要重新加载？"],["body","\n"],["body","或者，像 NetBeans IDE 一样，应用程序只是悄悄地更新文件而不通知您。"],["body","\n"],["body","要实现此功能，称为文件更改通知，程序必须能够检测文件系统上相关目录中发生的情况。"],["body","\n"],["body","一种方法是轮询文件系统以查找更改，但这种方法效率低下。"],["body","\n"],["body","它不能扩展到有数百个打开的文件或目录需要监控的应用程序。"],["body","\n"],["body","java.nio.file 包提供了一个文件更改通知 API，称为 Watch Service API。"],["body","\n"],["body","此 API 使您能够向监视服务注册一个（或多个）目录。"],["body","\n"],["body","注册时，您告诉服务您对哪些类型的事件感兴趣：文件创建、文件删除或文件修改。"],["body","\n"],["body","当服务检测到感兴趣的事件时，会将其转发到注册进程。"],["body","\n"],["body","已注册的进程有一个线程（或线程池），专门用于监视它已注册的任何事件。"],["body","\n"],["body","当一个事件进入时，它会根据需要进行处理。"],["body","\n"],["body","This section covers the following:"],["body","\n\n"],["body","Watch Service Overview"],["body","\n"],["body","Try It Out"],["body","\n"],["body","Creating a Watch Service and Registering for Events"],["body","\n"],["body","Processing Events"],["body","\n"],["body","Retrieving the File Name"],["body","\n"],["body","When to Use and Not Use This API"],["body","\n\n"],["h1","Watch Service Overview"],["body","\n"],["body","WatchService API 是相当低级的，允许您对其进行自定义。"],["body","\n"],["body","您可以按原样使用它，也可以选择在此机制之上创建一个高级 API，以便它适合您的特定需求。"],["body","\n"],["body","以下是实施监控服务所需的基本步骤：-:"],["body","\n\n"],["body","\n"],["body","为文件系统创建一个WatchService“观察者”。."],["body","\n"],["body","\n"],["body","\n"],["body","对于您要监视的每个目录，将其注册到观察者。"],["body","\n"],["body","注册目录时，您可以指定要通知的事件类型。"],["body","\n"],["body","对于您注册的每个目录，您都会收到一个“WatchKey”实例。."],["body","\n"],["body","\n"],["body","\n"],["body","实现无限循环以等待传入事件。"],["body","\n"],["body","当一个事件发生时，密钥被发出信号并放入观察者的队列中。."],["body","\n"],["body","\n"],["body","\n"],["body","从观察者的队列中检索密钥。"],["body","\n"],["body","您可以从密钥中获取文件名。."],["body","\n"],["body","\n"],["body","\n"],["body","检索密钥的每个待处理事件（可能有多个事件）并根据需要进行处理。."],["body","\n"],["body","\n"],["body","\n"],["body","重置密钥，并继续等待事件。."],["body","\n"],["body","\n"],["body","\n"],["body","关闭服务：当线程退出或关闭时（通过调用它的 closed 方法），watch 服务就会退出。"],["body","\n"],["body","\n\n"],["body","WatchKeys 是线程安全的，可以与 java.nio.concurrent 包一起使用。"],["body","\n"],["body","您可以将 线程池 用于这项工作。"],["body","\n"],["h1","Try It Out"],["body","\n"],["body","因为这个 API 更高级，所以在继续之前尝试一下。"],["body","\n"],["body","将 WatchDir 示例保存到您的计算机，并编译它。"],["body","\n"],["body","创建一个将传递给示例的 test 目录。 "],["body","\n"],["body","WatchDir 使用单个线程来处理所有事件，因此它在等待事件时会阻止键盘输入。"],["body","\n"],["body","在单独的窗口中或在后台运行程序，如下所示："],["body","\n"],["body","java WatchDir test &\n"],["body","\n"],["body","在 test 目录中创建、删除和编辑文件。"],["body","\n"],["body","当这些事件中的任何一个发生时，都会向控制台打印一条消息。"],["body","\n"],["body","完成后，删除 test 目录，WatchDir 退出。"],["body","\n"],["body","或者，如果您愿意，可以手动终止该进程。"],["body","\n"],["body","您还可以通过指定 -r 选项来查看整个文件树。"],["body","\n"],["body","当您指定 -r 时，WatchDir walks "],["body","\n"],["h1","Creating a Watch Service and Registering for Events"],["body","\n"],["body","第一步是使用创建一个新的 WatchService    newWatchService"],["body","\n"],["body","FileSystem类中的方法，如下："],["body","\n"],["body","WatchService watcher = FileSystems.getDefault().newWatchService();\n"],["body","\n"],["body","接下来，向监视服务注册一个或多个对象。"],["body","\n"],["body","任何实现 Watchable 接口的对象都可以注册。 "],["body","\n"],["body","Path 类实现了 Watchable 接口，因此每个要监控的目录都注册为一个 Path 对象。"],["body","\n"],["body","与任何 Watchable 一样，Path 类实现了两个 register 方法。"],["body","\n"],["body","该页面使用了两个参数的版本，[register(WatchService, WatchEvent.Kind...)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Path .html#register-java.nio.file.WatchService-java.nio.file.WatchEvent.Kind...-)。 "],["body","\n"],["body","（三参数版本采用“WatchEvent.Modifier”，目前尚未实现。）"],["body","\n"],["body","向监视服务注册对象时，指定要监视的事件类型。"],["body","\n"],["body","支持的 StandardWatchEventKinds 事件类型如下： -"],["body","\n\n"],["body","\n"],["body","ENTRY_CREATE – A directory entry is created."],["body","\n"],["body","\n"],["body","\n"],["body","ENTRY_DELETE – A directory entry is deleted."],["body","\n"],["body","\n"],["body","\n"],["body","ENTRY_MODIFY – A directory entry is modified."],["body","\n"],["body","\n"],["body","\n"],["body","OVERFLOW –表示事件可能已丢失或丢弃。"],["body","\n"],["body","您不必注册“OVERFLOW”事件即可接收它。"],["body","\n"],["body","\n\n"],["body","The following code snippet shows how to register a Path instance for all three event types:"],["body","\n"],["body","import static java.nio.file.StandardWatchEventKinds.*;\n\nPath dir = ...;\ntry {\n    WatchKey key = dir.register(watcher,\n                           ENTRY_CREATE,\n                           ENTRY_DELETE,\n                           ENTRY_MODIFY);\n} catch (IOException x) {\n    System.err.println(x);\n}\n"],["body","\n"],["h1","Processing Events"],["body","\n"],["body","事件处理循环中的事件顺序如下：:"],["body","\n\n"],["body","\n"],["body","Get a watch key. Three methods are provided:"],["body","\n\n"],["body","\n"],["body","poll – 如果可用，返回排队的键。如果不可用，立即返回一个 null 值."],["body","\n"],["body","\n"],["body","\n"],["body","poll(long, TimeUnit) – 返回一个排队的键，如果有的话。"],["body","\n"],["body","如果排队的密钥不是立即可用的，程序将等待指定的时间。 "],["body","\n"],["body","TimeUnit 参数确定指定的时间是纳秒、毫秒还是其他时间单位."],["body","\n"],["body","\n"],["body","\n"],["body","take – 返回一个排队的键。"],["body","\n"],["body","如果没有可用的排队键，则此方法等待."],["body","\n"],["body","\n\n"],["body","\n"],["body","\n"],["body","Process the pending events for the key. You fetch the List of WatchEventsfrom the pollEvents method."],["body","\n"],["body","\n"],["body","\n"],["body","使用 kind 方法检索事件类型。"],["body","\n"],["body","无论密钥注册了什么事件，都有可能收到“OVERFLOW”事件。"],["body","\n"],["body","您可以选择处理溢出或忽略它，但您应该对其进行测试。"],["body","\n"],["body","\n"],["body","\n"],["body","检索与事件关联的文件名。"],["body","\n"],["body","文件名存储为事件的上下文，因此 [context](https://docs.oracle.com/javase/8/docs/api/java/nio/file/WatchEvent.html#context- -) 方法用于检索它。"],["body","\n"],["body","\n"],["body","\n"],["body","After the events for the key have been processed, you need to put the key back into a ready state by invoking reset. If this method returns false, the key is no longer valid and the loop can exit. This step is very important. If you fail to invoke reset, this key will not receive any further events."],["body","\n"],["body","\n\n"],["body","A watch key has a state. 在任何给定时间，它的状态可能是以下之一:"],["body","\n\n"],["body","\n"],["body","Ready 已准备好接受事件。首次创建时，key处于就绪状态."],["body","\n"],["body","\n"],["body","\n"],["body","Signaled 表示一个或多个事件正在排队。"],["body","\n"],["body","一旦密钥发出信号，它就不再处于就绪状态，直到 [reset](https://docs.oracle.com/javase/8/docs/api/java/nio/file/WatchKey.html #reset--) 方法被调用。 "],["body","\n"],["body","\n"],["body","\n"],["body","Invalid"],["body","\n"],["body","表示该键不再处于活动状态。"],["body","\n"],["body","当发生以下事件之一时会发生此状态"],["body","\n\n"],["body","The process explicitly cancels the key by using the cancel method."],["body","\n"],["body","The directory becomes inaccessible."],["body","\n"],["body","The watch service is closed."],["body","\n\n"],["body","\n\n"],["body","这是事件处理循环的示例。"],["body","\n"],["body","它取自 Email 示例，该示例监视目录，等待新文件出现。"],["body","\n"],["body","当一个新文件可用时，通过使用 [probeContentType(Path)](https://docs.oracle.com/javase/8/docs/ api/java/nio/file/Files.html#probeContentType-java.nio.file.Path-) 方法。"],["body","\n"],["body","其目的是将 text/plain 文件通过电子邮件发送到别名，但实现细节留给读者。"],["body","\n"],["body","The methods specific to the watch service API are shown in bold:"],["body","\n"],["body","for (;;) {\n\n    // wait for key to be signaled\n    WatchKey key;\n    try {\n        key = watcher.take();\n    } catch (InterruptedException x) {\n        return;\n    }\n\n    for (WatchEvent<?> event: key.pollEvents()) {\n        WatchEvent.Kind<?> kind = event.kind();\n\n        // This key is registered only\n        // for ENTRY_CREATE events,\n        // but an OVERFLOW event can\n        // occur regardless if events\n        // are lost or discarded.\n        if (kind == OVERFLOW) {\n            continue;\n        }\n\n        // The filename is the\n        // context of the event.\n        WatchEvent<Path> ev = (WatchEvent<Path>)event;\n        Path filename = ev.context();\n\n        // Verify that the new\n        //  file is a text file.\n        try {\n            // Resolve the filename against the directory.\n            // If the filename is \"test\" and the directory is \"foo\",\n            // the resolved name is \"test/foo\".\n            Path child = dir.resolve(filename);\n            if (!Files.probeContentType(child).equals(\"text/plain\")) {\n                System.err.format(\"New file '%s'\" +\n                    \" is not a plain text file.%n\", filename);\n                continue;\n            }\n        } catch (IOException x) {\n            System.err.println(x);\n            continue;\n        }\n\n        // Email the file to the\n        //  specified email alias.\n        System.out.format(\"Emailing file %s%n\", filename);\n        //Details left to reader....\n    }\n\n    // Reset the key -- this step is critical if you want to\n    // receive further watch events.  If the key is no longer valid,\n    // the directory is inaccessible so exit the loop.\n    boolean valid = key.reset();\n    if (!valid) {\n        break;\n    }\n}\n"],["body","\n"],["h1","Retrieving the File Name"],["body","\n"],["body","从事件上下文中检索文件名。 "],["body","\n"],["body","Email 示例使用以下代码检索文件名："],["body","\n"],["body","WatchEvent<Path> ev = (WatchEvent<Path>)event;\nPath filename = ev.context();\n"],["body","\n"],["body","当您编译 Email 示例时，它会生成以下错误："],["body","\n"],["body","Note: Email.java uses unchecked or unsafe operations.\nNote: Recompile with -Xlint:unchecked for details.\n"],["body","\n"],["body","此错误是将 WatchEvent 转换为 WatchEvent 的代码行造成的。 "],["body","\n"],["body","WatchDir 示例通过创建一个实用程序 cast 方法来抑制未经检查的警告，从而避免了这个错误，如"],["body","\n"],["body","如下："],["body","\n"],["body","@SuppressWarnings(\"unchecked\")\nstatic <T> WatchEvent<T> cast(WatchEvent<?> event) {\n    return (WatchEvent<Path>)event;\n}\n"],["body","\n"],["h1","When to Use and Not Use This API"],["body","\n"],["body","Watch Service API 是为需要收到文件更改事件通知的应用程序设计的。"],["body","\n"],["body","它非常适合任何应用程序，如编辑器或 IDE，可能有许多打开的文件并需要确保文件与文件系统同步。"],["body","\n"],["body","它也非常适合监视目录的应用程序服务器，可能等待.jsp 或.jar 文件删除，以便部署它们。"],["body","\n"],["body","此 API 不是设计用于索引硬盘驱动器。"],["body","\n"],["body","大多数文件系统实现都具有对文件更改通知的本机支持。 "],["body","\n"],["body","Watch Service API 在可用的情况下利用此支持。"],["body","\n"],["body","但是，当文件系统不支持此机制时，Watch Service 将轮询文件系统，等待事件。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/路径操作.html"],["title","路径操作.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","What Is a Path? (And Other File System Facts)"],["body","\n"],["body","文件系统在某种形式的媒体（通常是一个或多个硬盘驱动器）上存储和组织文件，以便可以轻松检索这些文件。"],["body","\n"],["body","今天使用的大多数文件系统将文件存储在树（或分层）结构中。"],["body","\n"],["body","树的顶部是一个（或多个）根节点。"],["body","\n"],["body","在根节点下，有文件和目录（Microsoft Windows 中的文件夹）。"],["body","\n"],["body","每个目录可以包含文件和子目录，而这些文件和子目录又可以包含文件和子目录等等，其深度可能几乎是无限的。"],["body","\n"],["headingLink","what-is-a-path"],["heading","What Is a Path?"],["body","\n"],["body","Microsoft Windows 支持多个根节点。"],["body","\n"],["body","每个根节点映射到一个卷，例如 C:\\ 或 D:\\。 "],["body","\n"],["body","Solaris OS 支持单个根节点，用斜杠字符 / 表示。"],["body","\n"],["body","文件由其在文件系统中的路径标识，从根节点开始。"],["body","\n"],["body","用于分隔目录名称的字符（也称为定界符）特定于文件系统：Solaris OS 使用正斜杠 (/)，而 Microsoft Windows 使用反斜杠 ()。"],["body","\n"],["headingLink","relative-or-absolute"],["heading","Relative or Absolute?"],["body","\n"],["body","路径要么是相对的，要么是绝对的。"],["body","\n"],["body","绝对路径始终包含根元素和定位文件所需的完整目录列表。"],["body","\n"],["body","例如，/home/sally/statusReport 是绝对路径。"],["body","\n"],["body","定位文件所需的所有信息都包含在路径字符串中。"],["body","\n"],["body","相对路径需要与另一个路径结合才能访问文件。"],["body","\n"],["body","例如，joe/foo 是一个相对路径。"],["body","\n"],["body","如果没有更多信息，程序就无法可靠地定位文件系统中的 joe/foo 目录。"],["body","\n"],["headingLink","symbolic-links"],["heading","Symbolic Links"],["body","\n"],["body","文件系统对象通常是目录或文件。"],["body","\n"],["body","每个人都熟悉这些对象。"],["body","\n"],["body","但是一些文件系统也支持符号链接的概念。"],["body","\n"],["body","符号链接也称为符号链接或软链接。符号链接是一种特殊文件，用作对另一个文件的引用。"],["body","\n"],["body","大多数情况下，符号链接对应用程序是透明的，对符号链接的操作会自动重定向到链接的目标。 "],["body","\n"],["body","（被指向的文件或目录称为链接的目标。）例外情况是符号链接被删除或重命名，在这种情况下，链接本身被删除，或重命名而不是链接的目标。"],["body","\n"],["body","符号链接通常对用户是透明的。"],["body","\n"],["body","读取或写入符号链接与读取或写入任何其他文件或目录相同。"],["body","\n"],["body","在实际场景中，大多数文件系统自由使用符号链接。"],["body","\n"],["body","偶尔，一个不小心创建的符号链接会导致循环引用。"],["body","\n"],["body","当链接的目标指向原始链接时，就会发生循环引用。"],["body","\n"],["body","循环引用可能是间接的：目录 a 指向目录 b，目录 b 指向目录 c，其中包含一个指向目录 a 的子目录。"],["body","\n"],["body","当程序递归遍历目录结构时，循环引用可能会造成严重破坏。"],["body","\n"],["body","但是，这种情况已被考虑在内，不会导致您的程序无限循环。"],["body","\n"],["h1","The Path Class"],["body","\n"],["body","As its name implies,"],["body","\n"],["body","顾名思义，Path 类是文件系统中路径的编程表示。 "],["body","\n"],["body","Path 对象包含用于构造路径的文件名和目录列表，用于检查、定位和操作文件。"],["body","\n"],["body","Path 实例反映了底层平台"],["body","\n"],["body","在 Solaris OS 中，Path 使用 Solaris 语法（/home/joe/foo），而在 Microsoft Windows 中，Path 使用 Windows 语法（C:\\home\\joe\\foo）。 "],["body","\n"],["body","与“Path”对应的文件或目录可能不存在。"],["body","\n"],["body","您可以创建一个 Path 实例并以各种方式操作它"],["body","\n"],["body","append to it"],["body","\n"],["body","extract pieces of it"],["body","\n"],["body","compare it to another path"],["body","\n"],["body","在适当的时候，您可以使用 Files 类中的方法来"],["body","\n\n"],["body","检查Path 对应的文件是否存在"],["body","\n"],["body","create the file"],["body","\n"],["body","open it"],["body","\n"],["body","delete it"],["body","\n"],["body","change its permissions"],["body","\n\n"],["h1","Path Operations"],["body","\n"],["body","Path 类包括各种方法获取有关路径的信息、访问路径的元素、将路径转换为其他形式或提取路径的一部分"],["body","\n"],["body","还有匹配路径字符串的方法和删除路径中冗余的方法。"],["body","\n"],["body","本课讨论这些 Path 方法，有时称为句法操作，因为它们对路径本身进行操作并且不访问文件系统。"],["body","\n"],["headingLink","creating-a-path"],["heading","Creating a Path"],["body","\n"],["body","在定义时，路径被提供了一系列一个或多个名称。"],["body","\n"],["body","可能包含根元素或文件名，但两者都不是必需的。"],["body","\n"],["body","路径可能只包含一个目录或文件名。"],["body","\n"],["body","Path p1 = Paths.get(\"/tmp/foo\");\nPath p2 = Paths.get(args[0]);\nPath p3 = Paths.get(URI.create(\"file:///Users/joe/FileTest.java\"));\n"],["body","\n"],["body","Paths.get 方法是以下代码的简写："],["body","\n"],["body","Path p4 = FileSystems.getDefault().getPath(\"/users/sally\");\n"],["body","\n"],["body","以下示例创建 /u/joe/logs/foo.log 假设您的主目录是 /u/joe，或者 C:\\joe\\logs\\foo.log（如果您使用的是 Windows）。"],["body","\n"],["body","Path p5 = Paths.get(System.getProperty(\"user.home\"),\"logs\", \"foo.log\");\n"],["body","\n"],["headingLink","retrieving-information-about-a-path"],["heading","Retrieving Information about a Path"],["body","\n"],["body","您可以将 Path 视为将这些名称元素存储为序列。"],["body","\n"],["body","目录结构中的最高元素将位于索引 0。目录结构中的最低元素将位于索引 [n-1]，其中 n 是路径中名称元素的数量。"],["body","\n"],["body","可以使用这些索引检索单个元素或 Path 的子序列的方法。"],["body","\n"],["body","// None of these methods requires that the file corresponding\n// to the Path exists.\n// Microsoft Windows syntax\nPath path = Paths.get(\"C:\\\\home\\\\joe\\\\foo\");\n\n// Solaris syntax\nPath path = Paths.get(\"/home/joe/foo\");\n\nSystem.out.format(\"toString: %s%n\", path.toString());\nSystem.out.format(\"getFileName: %s%n\", path.getFileName());\nSystem.out.format(\"getName(0): %s%n\", path.getName(0));\nSystem.out.format(\"getNameCount: %d%n\", path.getNameCount());\nSystem.out.format(\"subpath(0,2): %s%n\", path.subpath(0,2));\nSystem.out.format(\"getParent: %s%n\", path.getParent());\nSystem.out.format(\"getRoot: %s%n\", path.getRoot());\n"],["body","\n"],["body","方法表"],["body","\n"],["body","Method Invoked"],["body","Returns in the Solaris OS"],["body","Returns in Microsoft Windows"],["body","Comment"],["body","\n"],["body","toString"],["body","/home/joe/foo"],["body","C:\\home\\joe\\foo"],["body","返回 Path 的字符串表示形式。 "],["body","如果路径是使用 Filesystems.getDefault().getPath(String) 或 Paths.get（后者是 getPath 的一种便捷方法）创建的，则该方法会执行轻微的语法清理。"],["body","例如，在 UNIX 操作系统中，它会将输入字符串 //home/joe/foo 更正为 /home/joe/foo。"],["body","\n"],["body","getFileName"],["body","foo"],["body","foo"],["body","返回文件名或名称元素序列的最后一个元素。"],["body","\n"],["body","getName(0)"],["body","home"],["body","home"],["body","返回与指定索引对应的路径元素。"],["body","第 0 个元素是最接近根的路径元素。"],["body","\n"],["body","getNameCount"],["body","3"],["body","3"],["body","返回路径中的元素数。"],["body","\n"],["body","subpath(0,2)"],["body","home/joe"],["body","home\\joe"],["body","返回由开始和结束索引指定的 Path 的子序列（不包括根元素）。"],["body","\n"],["body","getParent"],["body","/home/joe"],["body","\\home\\joe"],["body","返回父目录的路径"],["body","\n"],["body","getRoot"],["body","/"],["body","C:\\"],["body","Returns the root of the path."],["body","\n\n\n"],["body","前面的示例显示了绝对路径的输出。在以下示例中，指定了相对路径："],["body","\n"],["body","// Solaris syntax\nPath path = Paths.get(\"sally/bar\");\nor\n// Microsoft Windows syntax\nPath path = Paths.get(\"sally\\\\bar\");\n"],["body","\n"],["body","Here is the output for Windows and the Solaris OS:"],["body","\n"],["body","Method Invoked"],["body","Returns in the Solaris OS"],["body","Returns in Microsoft Windows"],["body","\n"],["body","toString"],["body","sally/bar"],["body","sally\\bar"],["body","\n"],["body","getFileName"],["body","bar"],["body","bar"],["body","\n"],["body","getName(0)"],["body","sally"],["body","sally"],["body","\n"],["body","getNameCount"],["body","2"],["body","2"],["body","\n"],["body","subpath(0,1)"],["body","sally"],["body","sally"],["body","\n"],["body","getParent"],["body","sally"],["body","sally"],["body","\n"],["body","getRoot"],["body","null"],["body","null"],["body","\n\n\n"],["headingLink","removing-redundancies-from-a-path"],["heading","Removing Redundancies From a Path"],["body","\n"],["body","许多文件系统使用“.” 符号表示当前目录，“..”表示父目录。"],["body","\n"],["body","您可能会遇到路径包含冗余目录信息的情况。"],["body","\n"],["body","也许服务器被配置为将其日志文件保存在\"/dir/logs/.\"中。"],["body","\n"],["body","您想从路径中删除尾随的 \"/.\" "],["body","\n"],["body","The following examples both include redundancies:"],["body","\n"],["body","/home/./joe/foo\n/home/sally/../joe/foo\n"],["body","\n"],["body","重要的是要注意，normalize 在清理路径时不会检查文件系统。这是一个纯粹的语法操作。"],["body","\n"],["body","在第二个例子中，如果 sally 是一个符号链接，删除 sally/.. 可能会导致一个 Path 不再定位目标文件。"],["body","\n"],["body","要清理路径同时确保结果找到正确的文件，您可以使用 toRealPath 方法。"],["body","\n"],["body","This method is described in the next section, Converting a Path."],["body","\n"],["headingLink","converting-a-path"],["heading","Converting a Path"],["body","\n"],["body","您可以使用三种方法来转换路径。"],["body","\n"],["headingLink","touri"],["heading","toURI"],["body","\n"],["body","如果需要将路径转换为可以从浏览器打开的字符串，可以使用 toUri。"],["body","\n"],["body","Path p1 = Paths.get(\"/home/logfile\");\n// Result is file:///home/logfile\nSystem.out.format(\"%s%n\", p1.toUri());\n"],["body","\n"],["headingLink","toabsolutepath"],["heading","toAbsolutePath"],["body","\n"],["body","toAbsolutePath 方法将路径转换为绝对路径。"],["body","\n"],["body","如果传入的路径已经是绝对路径，则返回相同的 Path 对象。 "],["body","\n"],["body","toAbsolutePath 方法在处理用户输入的文件名时非常有用。"],["body","\n"],["body","public class FileTest {\n    public static void main(String[] args) {\n\n        if (args.length < 1) {\n            System.out.println(\"usage: FileTest file\");\n            System.exit(-1);\n        }\n\n        // Converts the input string to a Path object.\n        Path inputPath = Paths.get(args[0]);\n\n        // Converts the input Path\n        // to an absolute path.\n        // Generally, this means prepending\n        // the current working\n        // directory.  If this example\n        // were called like this:\n        //     java FileTest foo\n        // the getRoot and getParent methods\n        // would return null\n        // on the original \"inputPath\"\n        // instance.  Invoking getRoot and\n        // getParent on the \"fullPath\"\n        // instance returns expected values.\n        Path fullPath = inputPath.toAbsolutePath();\n    }\n}\n"],["body","\n"],["body","toAbsolutePath 方法转换用户输入并返回一个 Path，该 Path 在查询时返回有用的值。"],["body","\n"],["body","该文件不需要存在即可使用此方法。"],["body","\n"],["headingLink","torealpath"],["heading","toRealPath"],["body","\n"],["body","toRealPath 方法返回现有文件的真实路径。"],["body","\n"],["body","此方法将多个操作合二为一："],["body","\n\n"],["body","\n"],["body","如果 true 传递给此方法并且文件系统支持符号链接，则此方法解析路径中的任何符号链接。"],["body","\n"],["body","\n"],["body","\n"],["body","如果 Path 是相对的，则返回绝对路径。"],["body","\n"],["body","\n"],["body","\n"],["body","如果 Path 包含任何冗余元素，则返回删除了这些元素的路径。"],["body","\n"],["body","\n\n"],["body","如果文件不存在或无法访问，此方法将引发异常。"],["body","\n"],["body","当您想要处理任何这些情况时，您可以捕获异常。"],["body","\n"],["body","try {\n    Path fp = path.toRealPath();\n} catch (NoSuchFileException x) {\n    System.err.format(\"%s: no such\" + \" file or directory%n\", path);\n    // Logic for case when file doesn't exist.\n} catch (IOException x) {\n    System.err.format(\"%s%n\", x);\n    // Logic for other sort of file error.\n}\n"],["body","\n"],["headingLink","joining-two-paths"],["heading","Joining Two Paths"],["body","\n"],["body","您可以使用 resolve 方法组合路径。"],["body","\n"],["body","您传入一个 partial path ，这是一个不包含根元素的路径，并且该部分路径被附加到原始路径。"],["body","\n"],["body","For example, consider the following code snippet:"],["body","\n"],["body","// Solaris\nPath p1 = Paths.get(\"/home/joe/foo\");\n// Result is /home/joe/foo/bar\nSystem.out.format(\"%s%n\", p1.resolve(\"bar\"));\n\nor\n\n// Microsoft Windows\nPath p1 = Paths.get(\"C:\\\\home\\\\joe\\\\foo\");\n// Result is C:\\home\\joe\\foo\\bar\nSystem.out.format(\"%s%n\", p1.resolve(\"bar\"));\n"],["body","\n"],["body","将绝对路径传递给 resolve 方法返回传入的路径：``` // 结果是 /home/joe Paths.get(\"foo\").resolve(\"/home/joe\"); "],["body","\n"],["body","// Result is /home/joe\nPaths.get(\"foo\").resolve(\"/home/joe\");\n"],["body","\n"],["headingLink","creating-a-path-between-two-paths"],["heading","Creating a Path Between Two Paths"],["body","\n"],["body","The Path class supports equals, enabling you to test two paths for equality."],["body","\n"],["body","Path 类支持 equals，使您能够测试两条路径是否相等。 "],["body","\n"],["body","startsWith 和 endsWith  方法使您能够测试路径是否"],["body","\n"],["body","以特定字符串开头或结尾。"],["body","\n"],["body","这些方法很容易使用。"],["body","\n"],["body","For example:"],["body","\n"],["body","Path path = ...;\nPath otherPath = ...;\nPath beginning = Paths.get(\"/home\");\nPath ending = Paths.get(\"foo\");\n\nif (path.equals(otherPath)) {\n    // equality logic here\n} else if (path.startsWith(beginning)) {\n    // path begins with \"/home\"\n} else if (path.endsWith(ending)) {\n    // path ends with \"foo\"\n}\n"],["body","\n"],["headingLink","iterablecompareable"],["heading","Iterable、Compareable"],["body","\n"],["body","Path 类实现了 Iterable 接口。 iterator 方法返回一个对象，该对象使您能够迭代路径中的名称元素。"],["body","\n"],["body","返回的第一个元素是最接近目录树中根的元素。"],["body","\n"],["body","Path path = ...;\nfor (Path name: path) {\n    System.out.println(name);\n}\n"],["body","\n"],["body","Path 类还实现了 Comparable 接口。"],["body","\n"],["body","您可以使用对排序很有用的 compareTo 来比较 Path 对象。"],["body","\n"],["body","您还可以将 Path 对象放入 Collection。"],["body","\n"],["body","有关此强大功能的更多信息，请参阅 Collections 跟踪。"],["body","\n"],["body","当你想验证两个 Path 对象是否定位到同一个文件时，你可以使用 isSameFile 方法，如检查两个路径是否定位到同一个文件。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/README.html"],["title","FileIO(NIO-2.0) - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","简介"],["body","\n"],["body","Java I/O 支持包含在 java.io 和 java.nio 包中。"],["body","\n"],["body","这些软件包包括以下功能："],["body","\n\n"],["body","Input and output through data streams, serialization and the file system."],["body","\n"],["body","Charsets, decoders, and encoders, for translating between bytes and Unicode characters."],["body","\n"],["body","Access to file, file attributes and file systems."],["body","\n"],["body","APIs for building scalable servers using asynchronous or multiplexed, non-blocking I/O."],["body","\n\n"],["h1","FileI/O NIO2.0 feature"],["body","\n"],["body","前言"],["body","\n"],["body","java.nio.file 包及其相关包 java.nio.file.attribute 为文件 I/O 和访问默认文件系统提供全面支持。"],["body","\n"],["body","尽管 API 有很多类，但您只需关注几个入口点。"],["body","\n"],["body","Path"],["body","\n"],["body","本教程首先询问  what is a path?  然后，"],["body","\n"],["body","引入了 java.nio.file 包中的主要入口点 Path 类。"],["body","\n"],["body","Path 类中与句法操作相关的方法。"],["body","\n"],["body","Files"],["body","\n"],["body","然后，本教程转到包中的另一个主要类 Files 类，其中包含处理文件操作的方法。"],["body","\n"],["body","首先，介绍了许多文件操作共有的一些概念,本教程随后介绍了checking, deleting, copying, and moving files."],["body","\n"],["body","元数据管理"],["body","\n"],["body","本教程展示了如何管理元数据，然后再介绍文件 I/O 和目录 I/O。"],["body","\n"],["body","解释了随机访问文件，issues specific to symbolic and hard links are examined."],["body","\n"],["body","遍历目录树"],["body","\n"],["body","接下来，将介绍一些非常强大但更高级的主题。"],["body","\n"],["body","首先，演示了递归遍历文件树的能力，然后是有关如何使用通配符搜索文件的信息。"],["body","\n"],["body","接下来，将解释和演示如何观察目录的变化。"],["body","\n"],["h1","总结"],["body","\n"],["body","java.io 包包含许多类，您的程序可以使用这些类来读取和写入数据。"],["body","\n"],["body","大多数类实现顺序访问流，顺序访问流可以分为两组 读写字节的和读写 Unicode 字符的"],["body","\n"],["body","每个顺序访问流都有其特殊性，例如读取或写入文件、在读取或写入数据时过滤数据或序列化对象。"],["body","\n"],["body","java.nio.file 包为文件和文件系统 I/O 提供了广泛的支持。"],["body","\n"],["body","这是一个非常全面的API，但关键的入口点如下："],["body","\n\n"],["body","Path 类具有操作路径的方法."],["body","\n"],["body","Files 类具有文件操作的方法，例如移动、复制、删除，以及检索和设置文件属性的方法。."],["body","\n"],["body","FileSystem 类有多种获取文件系统信息的方法."],["body","\n\n"],["body","更多关于 NIO.2 的信息可以在 OpenJDK: NIO 项目网站上找到。"],["body","\n"],["body","该站点包含 NIO.2 提供的特性的资源，这些特性超出了本教程的范围，例如多播、异步 I/O 和创建您自己的文件系统实现。"],["body","\n"],["h1","参考链接"],["body","\n"],["body","Oracle官方教程"],["body","\n"],["body","Enhancements in Java I/O"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/FileIO(NIO-2.0)/目录管理.html"],["title","目录管理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Creating and Reading Directories"],["body","\n"],["body","前面讨论的一些方法，例如删除、处理文件、链接和目录。"],["body","\n"],["body","但是如何列出文件系统 root的所有目录呢？"],["body","\n"],["body","如何列出目录的内容或创建目录？"],["body","\n"],["body","本节涵盖以下特定于目录的功能："],["body","\n\n"],["body","Listing a File System's Root Directories"],["body","\n"],["body","Creating a Directory"],["body","\n"],["body","Creating a Temporary Directory"],["body","\n"],["body","Listing a Directory's Contents"],["body","\n"],["body","Filtering a Directory Listing By Using Globbing"],["body","\n"],["body","Writing Your Own Directory Filter"],["body","\n\n"],["h1","Listing a File System's Root Directories"],["body","\n"],["body","您可以使用 FileSystem.getRootDirectories 列出文件系统的所有根目录"],["body","\n"],["body","此方法返回一个 Iterable，它使您能够使用 enhanced for 语句遍历所有根目录。"],["body","\n"],["body","以下代码片段打印默认文件系统的根目录"],["body","\n"],["body","Iterable<Path> dirs = FileSystems.getDefault().getRootDirectories();\nfor (Path name: dirs) {\n    System.err.println(name);\n}\n"],["body","\n"],["h1","Creating a Directory"],["body","\n"],["body","您可以使用 [createDirectory(Path, FileAttribute)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#createDirectory- java.nio.file.Path-java.nio.file.attribute.FileAttribute...-) 方法。"],["body","\n"],["body","如果您不指定任何 FileAttributes，新目录将具有默认属性。"],["body","\n"],["body","Path dir = ...;\nFiles.createDirectory(path);\n"],["body","\n"],["body","以下代码片段在具有特定权限的 POSIX 文件系统上创建一个新目录："],["body","\n"],["body","Set<PosixFilePermission> perms =\n    PosixFilePermissions.fromString(\"rwxr-x---\");\nFileAttribute<Set<PosixFilePermission>> attr =\n    PosixFilePermissions.asFileAttribute(perms);\nFiles.createDirectory(file, attr);\n"],["body","\n"],["body","要在一个或多个父目录可能尚不存在时创建一个多级目录，您可以使用便捷方法 [createDirectories(Path, FileAttribute)](https://docs.oracle.com/javase/ 8/docs/api/java/nio/file/Files.html#createDirectories-java.nio.file.Path-java.nio.file.attribute.FileAttribute...-)。"],["body","\n"],["body","与 createDirectory(Path, FileAttribute) 方法一样，您可以指定一组可选的初始文件属性。"],["body","\n"],["body","以下代码片段使用默认属性："],["body","\n"],["body","Files.createDirectories(Paths.get(\"foo/bar/test\"));\n"],["body","\n"],["body","根据需要从上到下创建目录。"],["body","\n"],["body","在 foo/bar/test 示例中，如果 foo 目录不存在，则会创建它。"],["body","\n"],["body","接下来，如果需要，创建 bar 目录，最后创建 test 目录。"],["body","\n"],["body","在创建一些（但不是全部）父目录后，此方法可能会失败。"],["body","\n"],["h1","Creating a Temporary Directory"],["body","\n"],["body","You can create a temporary directory using one of createTempDirectory methods:"],["body","\n\n"],["body","createTempDirectory(Path, String, FileAttribute...)"],["body","\n"],["body","createTempDirectory(String, FileAttribute...)"],["body","\n\n"],["body","第一种方法允许代码指定临时目录的位置，第二种方法在默认临时文件目录中创建一个新目录。"],["body","\n"],["h1","Listing a Directory's Contents"],["body","\n"],["body","您可以使用 [newDirectoryStream(Path)](https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#newDirectoryStream -java.nio.file.Path-) 方法。"],["body","\n"],["body","此方法返回一个实现 DirectoryStream 接口的对象。"],["body","\n"],["body","实现DirectoryStream 接口的类也实现了Iterable，因此您可以遍历目录流，读取所有对象。"],["body","\n"],["body","这种方法可以很好地扩展到非常大的目录。"],["body","\n"],["body","\n"],["body","记住： 返回的 DirectoryStream 是一个 stream。"],["body","\n"],["body","如果你没有使用 try-with-resources 语句，不要忘记在 finally 块中关闭流。 "],["body","\n"],["body","try-with-resources 语句会为您处理这个问题。"],["body","\n"],["body","\n"],["body","Path dir = ...;\ntry (DirectoryStream<Path> stream = Files.newDirectoryStream(dir)) {\n    for (Path file: stream) {\n        System.out.println(file.getFileName());\n    }\n} catch (IOException | DirectoryIteratorException x) {\n    // IOException can never be thrown by the iteration.\n    // In this snippet, it can only be thrown by newDirectoryStream.\n    System.err.println(x);\n}\n"],["body","\n"],["body","迭代器返回的“Path”对象是针对目录解析的条目的名称。"],["body","\n"],["body","因此，如果您要列出 /tmp 目录的内容，则条目将以 /tmp/a、/tmp/b 等形式返回。"],["body","\n"],["body","此方法返回目录的全部内容：文件、链接、子目录和隐藏文件。"],["body","\n"],["body","如果您想对检索的内容更有选择性，您可以使用其他 newDirectoryStream 方法之一，如本页稍后所述。"],["body","\n"],["body","请注意，如果在目录迭代过程中出现异常，则会抛出“DirectoryIteratorException”，并将“IOException”作为原因。"],["body","\n"],["body","迭代器方法不能抛出异常异常。"],["body","\n"],["h1","Filtering a Directory Listing By Using Globbing"],["body","\n"],["body","如果您只想获取每个名称与特定模式匹配的文件和子目录，您可以使用 [newDirectoryStream(Path, String)](https://docs.oracle.com/javase/8/docs /api/java/nio/file/Files.html#newDirectoryStream-java.nio.file.Path-java.lang.String-) 方法，它提供了一个内置的 glob 过滤器。"],["body","\n"],["body","For example, the following code snippet lists files relating to Java: .class, .java, and .jar files.:"],["body","\n"],["body","Path dir = ...;\ntry (DirectoryStream<Path> stream =\n     Files.newDirectoryStream(dir, \"*.{java,class,jar}\")) {\n    for (Path entry: stream) {\n        System.out.println(entry.getFileName());\n    }\n} catch (IOException x) {\n    // IOException can never be thrown by the iteration.\n    // In this snippet, it can // only be thrown by newDirectoryStream.\n    System.err.println(x);\n}\n"],["body","\n"],["h1","Writing Your Own Directory Filter"],["body","\n"],["body","也许您想根据模式匹配以外的某些条件过滤目录的内容。"],["body","\n"],["body","您可以通过实现 DirectoryStream.Filter 接口来创建自己的过滤器。"],["body","\n"],["body","这个接口包含一个方法，accept，它确定一个文件是否满足搜索要求。"],["body","\n"],["body","例如，以下代码片段实现了一个仅检索目录的过滤器："],["body","\n"],["body","DirectoryStream.Filter<Path> filter =\n    newDirectoryStream.Filter<Path>() {\n    public boolean accept(Path file) throws IOException {\n        try {\n            return (Files.isDirectory(path));\n        } catch (IOException x) {\n            // Failed to determine if it's a directory.\n            System.err.println(x);\n            return false;\n        }\n    }\n};\n"],["body","\n"],["body","创建过滤器后，可以使用 [newDirectoryStream(Path, DirectoryStream.Filter)](https://docs.oracle.com/javase/8/docs/api/java/nio/file /Files.html#newDirectoryStream-java.nio.file.Path-java.nio.file.DirectoryStream.Filter-) 方法。"],["body","\n"],["body","以下代码片段使用 isDirectory 过滤器仅将目录的子目录打印到标准输出："],["body","\n"],["body","Path dir = ...;\ntry (DirectoryStream<Path>\n                       stream = Files.newDirectoryStream(dir, filter)) {\n    for (Path entry: stream) {\n        System.out.println(entry.getFileName());\n    }\n} catch (IOException x) {\n    System.err.println(x);\n}\n"],["body","\n"],["body","此方法仅用于过滤单个目录。"],["body","\n"],["body","但是，如果要查找文件树中的所有子目录，则可以使用 Walking the File Tree 机制"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/主流IO模型.html"],["title","主流IO模型.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/Buffer.html"],["title","Buffer.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Buffer"],["body","\n"],["body","缓冲区，用于数据读写"],["body","\n"],["headingLink","buffer的基本实现类"],["heading","buffer的基本实现类"],["body","\n\n"],["body","ByteBuffer"],["body","\n"],["body","CharBuffer"],["body","\n"],["body","DoubleBuffer"],["body","\n"],["body","FloatBuffer"],["body","\n"],["body","IntBuffer"],["body","\n"],["body","LongBuffer"],["body","\n"],["body","ShortBuffer"],["body","\n"],["body","MappedByteBuffer"],["body","\n\n"],["h1","三大核心属性"],["body","\n"],["body","capacity: 容量，缓冲区最大存储数据的容量。一旦声明不能改变"],["body","\n"],["body","limit:  界限，缓冲区 可以 操作数据的 大小"],["body","\n"],["body","postion: 位置，表示缓冲区 正在 操作数据 的位置"],["body","\n"],["body","mark：标记上次的位置"],["body","\n"],["body","mark<=position <= limit <=  capacity"],["body","\n"],["headingLink","基本操作"],["heading","基本操作"],["body","\n"],["body","put：存入数据到缓冲区中"],["body","\n"],["body","get：读取缓存区的数据"],["body","\n"],["body","flip：缓冲区读写翻转"],["body","\n"],["body","rewind:  将position设回0,limit保持不变"],["body","\n"],["body","clear: position将被设回0，limit被设置成 capacity的值"],["body","\n"],["body","compact:将所有未读的数据拷贝到Buffer起始处然后,将position设到最后一个未读元素正后面"],["body","\n"],["body","mark/reset:标记一个position ，恢复 position"],["body","\n"],["body","equals:buffer的类型相同，个数相同，每个byte相同"],["body","\n"],["h1","基本操作解析"],["body","\n"],["headingLink","当进行读写混合操作之后-position指针时如何-运转的"],["heading","当进行读写混合操作之后 position指针时如何 运转的"],["body","\n"],["body","问题描述"],["body","\n"],["body","capacity 是10 put 5个字符串、get 1个字符串、put1个字符串 切换到读模式 此时的 position 与limit是多少"],["body","\n"],["body","猜想"],["body","\n"],["body","读写模式切换时 "],["body","\n"],["body","position = limit+1"],["body","\n"],["body","limit =  position"],["body","\n"],["body","结论"],["body","\n"],["body","读写翻转时：默认只继承上次模式可用的数据，并不会识别缓冲区本身的所有大小"],["body","\n"],["body","例如：10个字节的缓冲区：写了5个字节，切读模式，那么只有5个字节可用，"],["body","\n"],["body","这五个字节 在切换到 写模式时，由于未读0个：则没有写入空间"],["body","\n"],["headingLink","缓冲区满了或空了之后发生什么情况"],["heading","缓冲区满了或空了之后发生什么情况"],["body","\n"],["headingLink","现象"],["heading","现象"],["body","\n"],["body","从满的缓冲区PUT"],["body","\n"],["body","会报 BufferOverflowException"],["body","\n"],["body","从空的缓冲区GET"],["body","\n"],["body","指针往前"],["body","\n"],["body","从满的缓存区GET"],["body","\n"],["body","会报 BufferOverflowException"],["body","\n"],["headingLink","结论"],["heading","结论"],["body","\n\n"],["body","Buffer内部 不会 特定 区分读写模式"],["body","\n"],["body","只要 指针越过 Limit 就会 报 BufferOverflowException"],["body","\n"],["body","而 GET PUT 都会 把 指针往前移"],["body","\n\n"],["headingLink","buffer-flip"],["heading","Buffer Flip"],["body","\n"],["body","\n"],["body","将 position设置成 0，limit设置成 position"],["body","\n"],["body","\n\n"],["body","flip 没有任何 涉及到读写相关的逻辑"],["body","\n"],["body","我们可以把 position ~ limit设置成 当前 工作窗口"],["body","\n"],["body","0~position的位置就是 当前操作的 产出段，翻转的就是 当前操作的产出"],["body","\n"],["body","而对于 写入 读取操作：写入的产出就是 一个个数据、读取的产出就是 为写入腾空间"],["body","\n\n"],["body","public final Buffer flip() {\n    limit = position;\n    position = 0;\n    mark = -1;\n    return this;\n}\n"],["body","\n"],["headingLink","rewind"],["heading","Rewind"],["body","\n"],["body","\n"],["body","将position 设置成 0 ，mark重置"],["body","\n"],["body","\n"],["body","将当前操作的产出 重置为0"],["body","\n"],["body","public final Buffer rewind() {\n    position = 0;\n    mark = -1;\n    return this;\n}\n"],["body","\n"],["headingLink","remaining"],["heading","remaining"],["body","\n"],["body","\n"],["body","剩余多少可供消费的空间  limit - position"],["body","\n"],["body","\n"],["headingLink","clear"],["heading","clear"],["body","\n"],["body","\n"],["body","清空产出，"],["body","\n"],["body","\n"],["body","    public final Buffer clear() {\n        position = 0;\n        limit = capacity;\n        mark = -1;\n        return this;\n    }\n"],["body","\n"],["headingLink","markreset"],["heading","mark/reset"],["body","\n"],["body","public final Buffer mark() {\n        mark = position;\n        return this;\n}\npublic final Buffer reset() {\n    int m = mark;\n    if (m < 0)\n        throw new InvalidMarkException();\n    position = m;\n    return this;\n}\n"],["body","\n"],["headingLink","positionint-newposition"],["heading","position(int newPosition)"],["body","\n"],["body","\n"],["body","修改新的position"],["body","\n"],["body","\n"],["body","新的position不能大于  工作窗口"],["body","\n"],["body","public final Buffer position(int newPosition) {\n    if ((newPosition > limit) || (newPosition < 0))\n        throw new IllegalArgumentException();\n    position = newPosition;\n    if (mark > position) mark = -1;\n    return this;\n}\n"],["body","\n"],["h1","直接缓冲区与非直接缓冲区"],["body","\n"],["headingLink","解释"],["heading","解释"],["body","\n"],["body","非直接缓冲区：allocate 分配缓冲区，将缓冲建立在JVM内存中"],["body","\n"],["body","直接缓冲区：及那个 缓冲区建立在 操作系统的物理内存中"],["body","\n"],["headingLink","为什么出现直接缓冲区的需求"],["heading","为什么出现直接缓冲区的需求"],["body","\n"],["body","传统方式 读取文件 "],["body","\n"],["body","需要经历  物理磁盘 -> 内核缓存 -> JVM缓存 -> 应用程序空间"],["body","\n"],["body","直接缓冲区"],["body","\n"],["body","需要经历  物理磁盘 -> 直接缓冲区 -> 应用程序空间"],["body","\n"],["headingLink","建立直接缓冲区的办法"],["heading","建立直接缓冲区的办法"],["body","\n\n"],["body","allocateDirect"],["body","\n"],["body","FileChannel.map()"],["body","\n\n"],["headingLink","example"],["heading","example"],["body","\n"],["body","//20.002、16.028、16.879、 一次系统调用\n@Test\npublic void main() throws IOException {\n    long l = System.currentTimeMillis();\n\n    FileChannel file = FileChannel.open(Paths.get(\"D:\\\\\", \"myimage.tar\"), StandardOpenOption.READ);\n    //直接映射的缓冲区\n    MappedByteBuffer map = file.map(FileChannel.MapMode.READ_ONLY, 0, file.size());\n\n    //copy到C:\n    FileChannel open = FileChannel.open(Paths.get(\"Z:\\\\\", \"myimage.tar\"), StandardOpenOption.WRITE,StandardOpenOption.CREATE);\n    open.write(map);\n    System.out.println((System.currentTimeMillis() - l)/1000D);\n}\n// 482s、18.717\n@Test\npublic void testNormal() throws IOException {\n    long l = System.currentTimeMillis();\n    FileChannel file = FileChannel.open(Paths.get(\"D:\\\\\", \"myimage.tar\"), StandardOpenOption.READ);\n    FileChannel open = FileChannel.open(Paths.get(\"Z:\\\\\", \"myimage.tar\"), StandardOpenOption.WRITE,StandardOpenOption.CREATE);\n    ByteBuffer allocate = ByteBuffer.allocate((int) file.size());\n    while (file.read(allocate)>0) {\n        allocate.flip();\n        open.write(allocate);\n        allocate.clear();\n    }\n\n    System.out.println((System.currentTimeMillis() - l)/1000D);\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/Channel.html"],["title","Channel.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n"],["body","用于 源节点 与目标节点 的连接"],["body","\n"],["body","在JAVA NIO 中负责 缓冲区 中数据的传输"],["body","\n"],["body","Channel本身不存储数据、需要配合缓冲区进行传输"],["body","\n"],["h1","Channel实现类"],["body","\n"],["body","Channel的实现：覆盖了TCP，UDP，文件IO"],["body","\n\n"],["body","文件通道：FileChannel"],["body","\n"],["body","数据包通道：DatagramChannel"],["body","\n"],["body","客户端socket：SocketChannel"],["body","\n"],["body","服务端socket：ServerSocketChannel"],["body","\n\n"],["h1","获取通道"],["body","\n"],["headingLink","针对通道的类提供了-getchannel-方法"],["heading","针对通道的类提供了 getChannel() 方法"],["body","\n"],["headingLink","本地io"],["heading","本地IO"],["body","\n"],["body","FileInputSream/FileOutputStream/RandomAccessFile"],["body","\n"],["headingLink","网络-io"],["heading","网络 IO"],["body","\n"],["body","Socket/ServerSocket/DatagramSocket"],["body","\n"],["headingLink","jdk17-nio2的改进"],["heading","jdk1.7 NIO2的改进"],["body","\n\n"],["body","针对各个通道提供了 静态 open 方法"],["body","\n"],["body","Files工具类 有一个 newByteChannel()"],["body","\n\n"],["h1","通道之间的数据传输"],["body","\n"],["headingLink","transferto"],["heading","transferTo"],["body","\n"],["body","\n"],["body","将此通道在中的数据 传输到 目标通道 中"],["body","\n"],["body","\n"],["body","public abstract long transferTo(long position, long count,\n                                WritableByteChannel target)\n"],["body","\n"],["body","\n"],["body","将目标通道的数据 写入到此通道中"],["body","\n"],["body","\n"],["body","public abstract long transferFrom(ReadableByteChannel src,\n                                  long position, long count)\n"],["body","\n"],["h1","分散（Scatter）与聚集（Gather）"],["body","\n"],["headingLink","分散读取"],["heading","分散读取"],["body","\n"],["body","分散读取（Scattering Reads）是指将缓冲区的数据 按顺序读取 到各个 缓冲区去"],["body","\n"],["headingLink","聚集写入"],["heading","聚集写入"],["body","\n"],["body","gathering writer  是指将各个 缓冲区的数据  按顺序写入到 Chaanel中"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/LinuxIO模型演变.html"],["title","LinuxIO模型演变.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","在互联网中提起网络，我们都会避免不了讨论高并发、百万连接。而此处的百万连接的实现，脱离不了网络 IO 的选择，因此本文作为一篇个人学习的笔记，特此进行记录一下整个网络 IO 的发展演变过程。以及目前广泛使用的网络模型。"],["body","\n"],["headingLink","1网络-io-的发展"],["heading","1.网络 IO 的发展"],["body","\n"],["body","在本节内容中，我们将一步一步介绍网络 IO 的演变发展过程。介绍完发展过程后，再对网络 IO 中几组容易混淆的概念进行对比、分析。"],["body","\n"],["body","\n"],["headingLink","11-网络-io-的各个发展阶段"],["heading","1.1 网络 IO 的各个发展阶段"],["body","\n"],["body","通常，我们在此讨论的网络 IO 一般都是针对 linux 操作系统而言。网络 IO 的发展过程是随着 linux 的内核演变而变化，因此网络 IO 大致可以分为如下几个阶段："],["body","\n"],["body","1. 阻塞 IO(BIO)\n2. 非阻塞 IO(NIO)\n3. IO 多路复用第一版(select/poll)\n4. IO 多路复用第二版(epoll)\n5. 异步 IO(AIO)"],["body","\n"],["body","而每一个阶段，都是因为当前的网络有一些缺陷，因此又在不断改进该缺陷。这是网络 IO 一直演变过程中的本质。下面将对上述几个阶段进行介绍，并对每个阶段的网络 IO 解决了哪些问题、优点、缺点进行剖析。"],["body","\n"],["body","1.2 网络的两个阶段"],["body","\n"],["body","在网络中，我们通常可以将其广义上划分为以下两个阶段："],["body","\n"],["body","第一阶段：硬件接口到内核态\n第二阶段：内核态到用户态"],["body","\n"],["body","本人理解：我们通常上网，大部分数据都是通过网线传递的。因此对于两台计算机而言，要进行网络通信，其数据都是先从应用程序传递到传输层(TCP/UDP)到达内核态，然后再到网络层、数据链路层、物理层，接着数据传递到硬件网卡，最后通过网络传输介质传递到对端机器的网卡，然后再一步一步数据从网卡传递到内核态，最后再拷贝到用户态。"],["body","\n"],["body","\n"],["headingLink","13-阻塞-io-和非阻塞-io-的区别"],["heading","1.3 阻塞 IO 和非阻塞 IO 的区别"],["body","\n"],["body","根据 1.2 节的内容，我们可以知道，网络中的数据传输从网络传输介质到达目的机器，需要如上两个阶段。此处我们把从硬件到内核态这一阶段，是否发生阻塞等待，可以将网络分为阻塞 IO和非阻塞 IO。如果用户发起了读写请求，但内核态数据还未准备就绪，该阶段不会阻塞用户操作，内核立马返回，则称为非阻塞 IO。如果该阶段一直阻塞用户操作。直到内核态数据准备就绪，才返回。这种方式称为阻塞 IO。"],["body","\n"],["body","因此，区分阻塞 IO 和非阻塞 IO 主要看第一阶段是否阻塞用户操作。"],["body","\n"],["headingLink","14-同步-io-和异步-io-的区别"],["heading","1.4 同步 IO 和异步 IO 的区别"],["body","\n"],["body","从前面我们知道了，数据的传递需要两个阶段，在此处只要任何一个阶段会阻塞用户请求，都将其称为同步 IO，两个阶段都不阻塞，则称为异步 IO。"],["body","\n"],["body","在目前所有的操作系统中，linux 中的 epoll、mac 的 kqueue 都属于同步 IO，因为其在第二阶段(数据从内核态到用户态)都会发生拷贝阻塞。而只有 windows 中的 IOCP 才真正属于异步 IO，即 AIO。"],["body","\n"],["headingLink","2阻塞-io"],["heading","2.阻塞 IO"],["body","\n"],["body","在本节，我们将介绍最初的阻塞 IO，阻塞 IO 英文为 blocking IO，又称为 BIO。根据前面的介绍，阻塞 IO 主要指的是第一阶段(硬件网卡到内核态)。"],["body","\n"],["headingLink","21-阻塞-io-的概念"],["heading","2.1 阻塞 IO 的概念"],["body","\n"],["body","阻塞 IO，顾名思义当用户发生了系统调用后，如果数据未从网卡到达内核态，内核态数据未准备好，此时会一直阻塞。直到数据就绪，然后从内核态拷贝到用户态再返回。具体过程可以参考 2.2 的图示。"],["body","\n"],["headingLink","22-阻塞-io-的过程"],["heading","2.2 阻塞 IO 的过程"],["body","\n"],["body","\n"],["headingLink","23-阻塞-io-的缺点"],["heading","2.3 阻塞 IO 的缺点"],["body","\n"],["body","在一般使用阻塞 IO 时，都需要配置多线程来使用，最常见的模型是阻塞 IO+多线程，每个连接一个单独的线程进行处理。"],["body","\n"],["body","我们知道，一般一个程序可以开辟的线程是有限的，而且开辟线程的开销也是比较大的。也正是这种方式，会导致一个应用程序可以处理的客户端请求受限。面对百万连接的情况，是无法处理。"],["body","\n"],["body","既然发现了问题，分析了问题，那就得解决问题。既然阻塞 IO 有问题，本质是由于其阻塞导致的，因此自然而然引出了下面即将介绍的主角：非阻塞 IO"],["body","\n"],["headingLink","3非阻塞-io"],["heading","3.非阻塞 IO"],["body","\n"],["body","非阻塞 IO 是为了解决前面提到的阻塞 IO 的缺陷而引出的，下面我们将介绍非阻塞 IO 的过程。"],["body","\n"],["headingLink","31-非阻塞-io-的概念"],["heading","3.1 非阻塞 IO 的概念"],["body","\n"],["body","非阻塞 IO：见名知意，就是在第一阶段(网卡-内核态)数据未到达时不等待，然后直接返回。因此非阻塞 IO 需要不断的用户发起请求，询问内核数据好了没，好了没。"],["body","\n"],["headingLink","32-非阻塞-io-的过程"],["heading","3.2 非阻塞 IO 的过程"],["body","\n"],["body","\n"],["body","非阻塞 IO 是需要系统内核支持的，在创建了连接后，可以调用 setsockop 设置 noblocking"],["body","\n"],["headingLink","33-非阻塞-io-的优点"],["heading","3.3 非阻塞 IO 的优点"],["body","\n"],["body","正如前面提到的，非阻塞 IO 解决了阻塞 IO每个连接一个线程处理的问题，所以其最大的优点就是 一个线程可以处理多个连接，这也是其非阻塞决定的。"],["body","\n"],["headingLink","34-非阻塞-io-的缺点"],["heading","3.4 非阻塞 IO 的缺点"],["body","\n"],["body","但这种模式，也有一个问题，就是需要用户多次发起系统调用。频繁的系统调用是比较消耗系统资源的。"],["body","\n"],["body","因此，既然存在这样的问题，那么自然而然我们就需要解决该问题：保留非阻塞 IO 的优点的前提下，减少系统调用"],["body","\n"],["headingLink","4io-多路复用第一版"],["heading","4.IO 多路复用第一版"],["body","\n"],["body","为了解决非阻塞 IO 存在的频繁的系统调用这个问题，随着内核的发展，出现了 IO 多路复用模型。那么我们就需要搞懂几个问题："],["body","\n\n"],["body","IO 多路复用到底复用什么？"],["body","\n"],["body","IO 多路复用如何复用？"],["body","\n\n"],["body","IO 多路复用： 很多人都说，IO 多路复用是用一个线程来管理多个网络连接，但本人不太认可，因为在非阻塞 IO 时，就已经可以实现一个线程处理多个网络连接了，这个是由于其非阻塞而决定的。"],["body","\n"],["body","在此处，个人观点，多路复用主要复用的是通过有限次的系统调用来实现管理多个网络连接。最简单来说，我目前有 10 个连接，我可以通过一次系统调用将这 10 个连接都丢给内核，让内核告诉我，哪些连接上面数据准备好了，然后我再去读取每个就绪的连接上的数据。因此，IO 多路复用，复用的是系统调用。通过有限次系统调用判断海量连接是否数据准备好了"],["body","\n"],["body","无论下面的 select、poll、epoll，其都是这种思想实现的，不过在实现上，select/poll 可以看做是第一版，而 epoll 是第二版"],["body","\n"],["headingLink","41io-多路复用第一版的概念"],["heading","4.1IO 多路复用第一版的概念"],["body","\n"],["body","IO 多路复用第一版，这个概念是本人想出来的，主要是方便将 select/poll 和 epoll 进行区分"],["body","\n"],["body","所以此处 IO 多路复用第一版，主要特指 select 和 poll 这两个。"],["body","\n"],["body","select 的 api"],["body","\n"],["body","// readfds:关心读的fd集合；writefds：关心写的fd集合；excepttfds：异常的fd集合\nint select (int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);\n"],["body","\n"],["body","\n"],["body","select 函数监视的文件描述符分 3 类，分别是 writefds、readfds、和 exceptfds。调用后 select 函数会阻塞，直到有描述副就绪（有数据 可读、可写、或者有 except），或者超时（timeout 指定等待时间，如果立即返回设为 null 即可），函数返回。当 select 函数返回后，可以 通过遍历 fdset，来找到就绪的描述符。"],["body","\n"],["body","\n"],["body","\n"],["body","select 目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select 的一 个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在 Linux 上一般为 1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但 是这样也会造成效率的降低。"],["body","\n"],["body","\n"],["body","poll 的 api"],["body","\n"],["body","int poll (struct pollfd *fds, unsigned int nfds, int timeout);\n\nstruct pollfd {\n    int fd; /* file descriptor */\n    short events; /* requested events to watch */\n    short revents; /* returned events witnessed */\n};\n"],["body","\n"],["body","\n"],["body","pollfd 结构包含了要监视的 event 和发生的 event，不再使用 select“参数-值”传递的方式。同时，pollfd 并没有最大数量限制（但是数量过大后性能也是会下降）。和 select 函数一样，poll 返回后，需要轮询 pollfd 来获取就绪的描述符。"],["body","\n"],["body","\n"],["body","\n"],["body","从上面看，select 和 poll 都需要在返回后，通过遍历文件描述符来获取已经就绪的 socket。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。"],["body","\n"],["body","\n"],["body","从本质来说：IO 多路复用中，select()/poll()/epoll_wait()这几个函数对应第一阶段；read()/recvfrom()对应第二阶段"],["body","\n"],["headingLink","42io-多路复用第一版的过程"],["heading","4.2IO 多路复用第一版的过程"],["body","\n"],["body","\n"],["headingLink","43io-多路复用第一版的优点"],["heading","4.3IO 多路复用第一版的优点"],["body","\n"],["body","IO 多路复用，主要在于复用，通过 select()或者 poll()将多个 socket fds 批量通过系统调用传递给内核，由内核进行循环遍历判断哪些 fd 上数据就绪了，然后将就绪的 readyfds 返回给用户。再由用户进行挨个遍历就绪好的 fd，读取或者写入数据。"],["body","\n"],["body","所以通过 IO 多路复用+非阻塞 IO，一方面降低了系统调用次数，另一方面可以用极少的线程来处理多个网络连接。"],["body","\n"],["headingLink","44io-多路复用第一版的缺点"],["heading","4.4IO 多路复用第一版的缺点"],["body","\n"],["body","虽然第一版 IO 多路复用解决了之前提到的频繁的系统调用次数，但同时引入了新的问题：用户需要每次将海量的 socket fds 集合从用户态传递到内核态，让内核态去检测哪些网络连接数据就绪了"],["body","\n"],["body","但这个地方会出现频繁的将海量 fd 集合从用户态传递到内核态，再从内核态拷贝到用户态。所以，这个地方开销也挺大。"],["body","\n"],["body","既然还有这个问题，那我们继续开始解决这个问题，因此就引出了第二版的 IO 多路复用。"],["body","\n"],["body","其实思路也挺简单，既然需要拷贝，那就想办法，不拷贝。既然不拷贝，那就在内核开辟一段区域咯"],["body","\n"],["headingLink","45io-多路复用第一版的区别"],["heading","4.5IO 多路复用第一版的区别"],["body","\n"],["body","select 和 poll 的区别"],["body","\n\n"],["body","select 能处理的最大连接，默认是 1024 个，可以通过修改配置来改变，但终究是有限个；而 poll 理论上可以支持无限个"],["body","\n"],["body","select 和 poll 在管理海量的连接时，会频繁的从用户态拷贝到内核态，比较消耗资源。"],["body","\n\n"],["headingLink","5io-多路复用第二版"],["heading","5.IO 多路复用第二版"],["body","\n"],["body","IO 多路复用第二版主要指 epoll，epoll 的出现也是随着内核版本迭代才诞生的，在网上到处看到，epoll 是内核 2.6 以后开始支持的"],["body","\n"],["body","epoll 的出现是为了解决前面提到的 IO 多路复用第一版的问题"],["body","\n"],["headingLink","51io-多路复用第二版的概念"],["heading","5.1IO 多路复用第二版的概念"],["body","\n"],["body","epoll 提供的 api"],["body","\n"],["body","//创建epollFd，底层是在内核态分配一段区域，底层数据结构红黑树+双向链表\nint epoll_create(int size)；//创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大\n\n//往红黑树中增加、删除、更新管理的socket fd\nint epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；\n\n//这个api是用来在第一阶段阻塞，等待就绪的fd。\nint epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);\n1. int epoll_create(int size);\n创建一个epoll的句柄，size用来告诉内核这个监听的数目一共有多大，这个参数不同于select()中的第一个参数，给出最大监听的fd+1的值，参数size并不是限制了epoll所能监听的描述符最大个数，只是对内核初始分配内部数据结构的一个建议。\n当创建好epoll句柄后，它就会占用一个fd值，在linux下如果查看/proc/进程id/fd/，是能够看到这个fd的，所以在使用完epoll后，必须调用close()关闭，否则可能导致fd被耗尽。\n\n2. int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)；\n函数是对指定描述符fd执行op操作。\n- epfd：是epoll_create()的返回值。\n- op：表示op操作，用三个宏来表示：添加EPOLL_CTL_ADD，删除EPOLL_CTL_DEL，修改EPOLL_CTL_MOD。分别添加、删除和修改对fd的监听事件。\n- fd：是需要监听的fd（文件描述符）\n- epoll_event：是告诉内核需要监听什么事，struct epoll_event结构如下：\n\nstruct epoll_event {\n  __uint32_t events;  /* Epoll events */\n  epoll_data_t data;  /* User data variable */\n};\n\n//events可以是以下几个宏的集合：\nEPOLLIN ：表示对应的文件描述符可以读（包括对端SOCKET正常关闭）；\nEPOLLOUT：表示对应的文件描述符可以写；\nEPOLLPRI：表示对应的文件描述符有紧急的数据可读（这里应该表示有带外数据到来）；\nEPOLLERR：表示对应的文件描述符发生错误；\nEPOLLHUP：表示对应的文件描述符被挂断；\nEPOLLET： 将EPOLL设为边缘触发(Edge Triggered)模式，这是相对于水平触发(Level Triggered)来说的。\nEPOLLONESHOT：只监听一次事件，当监听完这次事件之后，如果还需要继续监听这个socket的话，需要再次把这个socket加入到EPOLL队列里\n\n3. int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);\n等待epfd上的io事件，最多返回maxevents个事件。\n参数events用来从内核得到事件的集合，maxevents告之内核这个events有多大，这个maxevents的值不能大于创建epoll_create()时的size，参数timeout是超时时间（毫秒，0会立即返回，-1将不确定，也有说法说是永久阻塞）。该函数返回需要处理的事件数目，如返回0表示已超时。\n"],["body","\n"],["body","二 工作模式"],["body","\n"],["body","epoll 对文件描述符的操作有两种模式：LT（level trigger）和 ET（edge trigger）。LT 模式是默认模式，LT 模式与 ET 模式的区别如下：　　 LT 模式：当 epoll_wait 检测到描述符事件发生并将此事件通知应用程序，应用程序可以不立即处理该事件。下次调用 epoll_wait 时，会再次响应应用程序并通知此事件。　　 ET 模式：当 epoll_wait 检测到描述符事件发生并将此事件通知应用程序，应用程序必须立即处理该事件。如果不处理，下次调用 epoll_wait 时，不会再次响应应用程序并通知此事件。"],["body","\n\n"],["body","LT 模式"],["body","\n\n"],["body","LT(level triggered)是缺省的工作方式，并且同时支持 block 和 no-block socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的 fd 进行 IO 操作。如果你不作任何操作，内核还是会继续通知你的。"],["body","\n\n"],["body","ET 模式"],["body","\n\n"],["body","ET(edge-triggered)是高速工作方式，只支持 no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过 epoll 告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，直到你做了某些操作导致那个文件描述符不再为就绪状态了(比如，你在发送，接收或者接收请求，或者发送接收的数据少于一定量时导致了一个 EWOULDBLOCK 错误）。但是请注意，如果一直不对这个 fd 作 IO 操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once)"],["body","\n"],["body","ET 模式在很大程度上减少了 epoll 事件被重复触发的次数，因此效率要比 LT 模式高。epoll 工作在 ET 模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。"],["body","\n"],["headingLink","52io-多路复用第二版的过程"],["heading","5.2IO 多路复用第二版的过程"],["body","\n"],["body","\n"],["body","当 epoll_wait()调用后会阻塞，然后完了当返回时，会返回了哪些 fd 的数据就绪了，用户只需要遍历就绪的 fd 进行读写即可。"],["body","\n"],["headingLink","53io-多路复用第二版的优点"],["heading","5.3IO 多路复用第二版的优点"],["body","\n"],["body","IO 多路复用第二版 epoll 的优点在于："],["body","\n"],["body","一开始就在内核态分配了一段空间，来存放管理的 fd,所以在每次连接建立后，交给 epoll 管理时，需要将其添加到原先分配的空间中，后面再管理时就不需要频繁的从用户态拷贝管理的 fd 集合。通通过这种方式大大的提升了性能。"],["body","\n"],["body","所以现在的 IO 多路复用主要指 epoll"],["body","\n"],["headingLink","54io-多路复用第二版的缺点"],["heading","5.4IO 多路复用第二版的缺点"],["body","\n"],["body","个人猜想： 如何降低占用的空间"],["body","\n"],["headingLink","6异步-io"],["heading","6.异步 IO"],["body","\n"],["headingLink","61-异步-io-的过程"],["heading","6.1 异步 IO 的过程"],["body","\n"],["body","\n"],["body","前面介绍的所有网络 IO 都是同步 IO，因为当数据在内核态就绪时，在内核态拷贝用用户态的过程中，仍然会有短暂时间的阻塞等待。而异步 IO 指：内核态拷贝数据到用户态这种方式也是交给系统线程来实现，不由用户线程完成，目前只有 windows 系统的 IOCP 是属于异步 IO。"],["body","\n"],["headingLink","7网络-io-各种模型"],["heading","7.网络 IO 各种模型"],["body","\n"],["headingLink","71-reactor-模型"],["heading","7.1 reactor 模型"],["body","\n"],["body","目前 reactor 模型有以下几种实现方案："],["body","\n"],["body","1. 单 reactor 单线程模型\n2. 单 reactor 多线程模型\n3. multi-reactor 多进程模型"],["body","\n"],["body","\n"],["body","下文网络模型的图，均摘自这篇文章"],["body","\n"],["body","\n"],["headingLink","711-单-reactor-单线程模型"],["heading","7.1.1 单 reactor 单线程模型"],["body","\n"],["body","此种模型，通常是只有一个 epoll 对象，所有的接收客户端连接、客户端读取、客户端写入操作都包含在一个线程内。该种模型也有一些中间件在用，比如 redis"],["body","\n"],["body","\n"],["body","\n"],["body","但在目前的单线程 Reactor 模式中，不仅 I/O 操作在该 Reactor 线程上，连非 I/O 的业务操作也在该线程上进行处理了，这可能会大大延迟 I/O 请求的响应。所以我们应该将非 I/O 的业务逻辑操作从 Reactor 线程上卸载，以此来加速 Reactor 线程对 I/O 请求的响应。"],["body","\n"],["body","\n"],["headingLink","712-单-reactor-多线程模型"],["heading","7.1.2 单 reactor 多线程模型"],["body","\n"],["body","该模型主要是通过将，前面的模型进行改造，将读写的业务逻辑交给具体的线程池来实现，这样可以显示 reactor 线程对 IO 的响应，以此提升系统性能"],["body","\n"],["body","\n"],["body","在工作者线程池模式中，虽然非 I/O 操作交给了线程池来处理，但是所有的 I/O 操作依然由 Reactor 单线程执行，在高负载、高并发或大数据量的应用场景，依然较容易成为瓶颈。所以，对于 Reactor 的优化，又产生出下面的多线程模式。"],["body","\n"],["body","\n"],["headingLink","713-multi-reactor-多线程模型"],["heading","7.1.3 multi-reactor 多线程模型"],["body","\n"],["body","在这种模型中，主要分为两个部分：mainReactor、subReactors。mainReactor 主要负责接收客户端的连接，然后将建立的客户端连接通过负载均衡的方式分发给 subReactors，"],["body","\n"],["body","subReactors 来负责具体的每个连接的读写"],["body","\n"],["body","对于非 IO 的操作，依然交给工作线程池去做，对逻辑进行解耦"],["body","\n"],["body","\n"],["body","\n"],["body","mainReactor 对应 Netty 中配置的 BossGroup 线程组，主要负责接受客户端连接的建立。一般只暴露一个服务端口，BossGroup 线程组一般一个线程工作即可 subReactor 对应 Netty 中配置的 WorkerGroup 线程组，BossGroup 线程组接受并建立完客户端的连接后，将网络 socket 转交给 WorkerGroup 线程组，然后在 WorkerGroup 线程组内选择一个线程，进行 I/O 的处理。WorkerGroup 线程组主要处理 I/O，一般设置 2*CPU 核数个线程"],["body","\n"],["body","\n"],["headingLink","72-proactor-模型"],["heading","7.2 proactor 模型"],["body","\n"],["body","proactor 主要是通过对异步 IO 的封装的一种模型，它需要底层操作系统的支持，目前只有 windows 的 IOCP 支持的比较好。详细的介绍可以参考这篇文章"],["body","\n"],["headingLink","73-主流的中间件所采用的网络模型"],["heading","7.3 主流的中间件所采用的网络模型"],["body","\n"],["body","\n"],["headingLink","74-主流网络框架"],["heading","7.4 主流网络框架"],["body","\n\n"],["body","netty"],["body","\n"],["body","gnet"],["body","\n"],["body","libevent"],["body","\n"],["body","evio(golang)"],["body","\n"],["body","ACE(c++)"],["body","\n"],["body","boost::asio(c++)"],["body","\n"],["body","muduo （linux only)"],["body","\n\n"],["body","关于c++和c的上述几个库对比，感兴趣的话大家可以自行搜索资料或者阅读这篇文章。"],["body","\n"],["body","原文"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/README.html"],["title","IO - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","NIO"],["body","\n\n"],["body","JavaNIO（NewIO，或者Non-Block IO）是从 java1.4版本引入的 新的IOAPI 可以替代标准JavaIOAPI的"],["body","\n"],["body","NIO 与原来的IO有同样的作用和目的，但是使用方式完全不同"],["body","\n"],["body","NIO 是 面向缓冲区、基于Channel 的IO操作"],["body","\n"],["body","NIO 以更高效的方式进行 流的读写操作"],["body","\n\n"],["h1","核心对象"],["body","\n"],["headingLink","buffer"],["heading","Buffer"],["body","\n"],["body","缓冲区，用于数据读写"],["body","\n"],["headingLink","channel"],["heading","Channel"],["body","\n"],["body","用于缓冲区数据的传递"],["body","\n"],["headingLink","selector"],["heading","Selector"],["body","\n"],["body","用于 单线程管理 多个 Channel 连接"],["body","\n"],["h1","各种IO模型"],["body","\n"],["body","BIO"],["body","NIO"],["body","AIO"],["body","\n"],["body","Socket"],["body","SocketChannel"],["body","AsynchronousSocketChannel"],["body","\n"],["body","ServerSocket"],["body","ServerSocketChannel"],["body","AsynchronousServerSocketChannel"],["body","\n\n\n"],["h1","JavaAIO(NIO2.0)"],["body","\n\n"],["body","\n"],["body","真正的 异步非阻塞"],["body","\n"],["body","\n"],["body","\n"],["body","服务器实现模式为一个有效请求一个线程"],["body","\n"],["body","\n"],["body","\n"],["body","客户端的IO请求 都是由 os完成 在通知服务器应用 去启动先线程 处理"],["body","\n"],["body","\n\n"],["body","java.nio.channels 包下增加了 下面四个异步通道"],["body","\n"],["body","AsynchronousSocketChannel\nAsynchronousSerrverSocketChannel\nAsynchronousFileChannel\nAsynchronousDatagramChannel\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","23.IO/字符集.html"],["title","字符集.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n"],["body","编码 -> 将 字符串转换 成 字节数组"],["body","\n"],["body","解码 -> 将字节数组转换成 字符串"],["body","\n"],["h1","获取所有支持的字符集"],["body","\n"],["body","Charset.availableCharsets();\n"],["body","\n"],["h1","编码与解码"],["body","\n"],["body","\n"],["body","编码与解码：可以手动获取一个 Decoder"],["body","\n"],["body","\n"],["body","ByteBuffer sdfsfdds士大夫但是 = StandardCharsets.UTF_8.encode(\"sdfsfdds士大夫但是\");\n\nCharBuffer decode = StandardCharsets.UTF_8.decode(sdfsfdds士大夫但是);\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.html"],["title","SpringFramework - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","02.java基础_对象拷贝/mapstruct.html"],["title","mapstruct.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","MapStruct介绍"],["body","\n\n"],["body","\n"],["body","mapStructut是一个基于注解的,用来生成类型安全的bean映射类"],["body","\n"],["body","\n"],["body","\n"],["body","在编译时期Mapstruct会生成接口的实现,基于普通的方法调用,没有反射"],["body","\n"],["body","\n"],["body","\n"],["body","主要包含了两个组件"],["body","\n\n"],["body","org.mapstruct:mapstruct: 注解"],["body","\n"],["body","org.mapstruct:mapstruct-processor: 生成实现类的处理器"],["body","\n\n"],["body","\n\n"],["h1","使用方式"],["body","\n"],["headingLink","maven-configuration"],["heading","Maven configuration"],["body","\n"],["body","<properties>\n    <org.mapstruct.version>1.3.1.Final</org.mapstruct.version>\n</properties>\n...\n<dependencies>\n    <dependency>\n        <groupId>org.mapstruct</groupId>\n        <artifactId>mapstruct</artifactId>\n        <version>${org.mapstruct.version}</version>\n    </dependency>\n</dependencies>\n\n<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-compiler-plugin</artifactId>\n    <version>3.8.1</version>\n<configuration>\n        <source>1.8</source>\n        <target>1.8</target>\n        <annotationProcessorPaths>\n            <path>\n                <groupId>org.mapstruct</groupId>\n                <artifactId>mapstruct-processor</artifactId>\n                <version>${org.mapstruct.version}</version>\n            </path>\n        </annotationProcessorPaths>\n    </configuration>\n</plugin>\n"],["body","\n"],["h1","入门"],["body","\n"],["headingLink","案例"],["heading","案例"],["body","\n"],["body","源类型"],["body","\n\n"],["body","转换的类要符合JavaBean定义"],["body","\n"],["body","同名会自动转换"],["body","\n"],["body","@BeanMapping(ignoreByDefault = true) 不会自动匹配,只能显示指定名字字段的对应关系"],["body","\n\n"],["body","public class Car {\n \n    private String make;\n    private int numberOfSeats;\n    private CarType type;\n}\npublic enum  CarType {\n    BAIDU,\n    ALI,\n    TENXUN\n}\n"],["body","\n"],["body","目标类型"],["body","\n"],["body","public class CarDto {\n \n    private String make;\n    private int seatCount;\n    private String type;\n }\n"],["body","\n"],["body","中间转换类"],["body","\n"],["body","@Mapper\npublic interface CarMapper {\n \n    CarMapper INSTANCE = Mappers.getMapper( CarMapper.class );\n \n    @Mapping(source = \"numberOfSeats\", target = \"seatCount\") // 可以有多个 @Repeatable(Mappings.class)\n    @Mapping(source = \"numberOfSeats\", target = \"seatCount\")\n    CarDto carToCarDto(Car car);\n}\n"],["body","\n"],["body","测试类"],["body","\n"],["body","{\n    //given\n    Car car = new Car( \"Morris\", 5, CarType.ALI );\n\n    //when\n    CarDto carDto = CarMapper.INSTANCE.carToCarDto( car );\n\n    //then\n    assertThat(carDto, notNullValue());\n    assertThat(carDto.getSeatCount(),is(5));\n    assertThat(carDto.getType(),is(\"ALI\"));\n}\n"],["body","\n"],["h1","类型转换"],["body","\n"],["headingLink","基本数据类型转换"],["heading","基本数据类型转换"],["body","\n"],["body","如果源类型与 目标类型 不同,会进行隐式转换,或者调用或者创建另一个映射方法"],["body","\n"],["headingLink","包装类型转基本类型"],["heading","包装类型转基本类型"],["body","\n\n"],["body","所有Java的数值类型会自动转换"],["body","\n"],["body","long 转 int会造成精度丢失,MapperConfig 注解 的 typeConversionPolicy 方法控制 警告与错误由于向后兼容,默认ReportingPolicy.IGNORE"],["body","\n\n"],["headingLink","所有基本数据类型-转string"],["heading","所有基本数据类型 转string"],["body","\n\n"],["body","自动调用相应包装类型的 parse与valueOf"],["body","\n\n"],["body","int to  string string to int\n会自动调用 如下方法\nString#valueOf(int) and Integer#parseInt(String)\n"],["body","\n\n"],["body","\n"],["body","可以识别 java.text.DecimalFormat 的"],["body","\n"],["body","@Mapper\npublic interface CarMapper {\n\n    @Mapping(source = \"price\", numberFormat = \"$#.00\")\n    CarDto carToCarDto(Car car);\n\n    @IterableMapping(numberFormat = \"$#.00\")\n    List<String> prices(List<Integer> prices);\n}\n"],["body","\n"],["body","\n\n"],["headingLink","枚举转string"],["heading","枚举转string"],["body","\n"],["body","默认取 枚举方法名"],["body","\n"],["headingLink","日期类型转换"],["heading","日期类型转换"],["body","\n"],["body","各种日期之间的转换"],["body","\n"],["body","@Mapper\npublic interface CarMapper {\n\n    @Mapping(source = \"manufacturingDate\", dateFormat = \"dd.MM.yyyy\")\n    CarDto carToCarDto(Car car);\n\n    @IterableMapping(dateFormat = \"dd.MM.yyyy\")\n    List<String> stringListToDateList(List<Date> dates);\n}\n"],["body","\n"],["headingLink","货币与string"],["heading","货币与string"],["body","\n"],["body","java.util.Currency and String."],["body","\n"],["headingLink","引用数据类型转换"],["heading","引用数据类型转换"],["body","\n"],["body","@Mapper\npublic interface CarMapper {\n\n    CarDto carToCarDto(Car car);\n\n    PersonDto personToPersonDto(Person person);\n}\n"],["body","\n"],["body","遵循原则"],["body","\n\n"],["body","如果源和目标 有同样的类型, 值只会简单的从源copy到目的"],["body","\n"],["body","如果类型不一致,查看是否还有另一个映射方法, 参数与源类型相同,返回值与目标类型相同,则会自动调用这个方法"],["body","\n"],["body","如果没有上述类型方法,则查找内置的转换器,如果有则应用"],["body","\n"],["body","如果没有则 尝试自动生成 转换器"],["body","\n"],["body","如果无法生成转换器 则编译时报错"],["body","\n\n"],["body","扩展"],["body","\n"],["body","@Mapper( disableSubMappingMethodsGeneration = true ). 禁止自动生成 子映射"],["body","\n"],["headingLink","嵌套bean的映射"],["heading","嵌套bean的映射"],["body","\n"],["body","//使用 . 可以指定嵌套的映射\n@Mapper\npublic interface FishTankMapper {\n\n    @Mapping(target = \"fish.kind\", source = \"fish.type\")\n    @Mapping(target = \"fish.name\", ignore = true) //忽略\n    @Mapping(target = \"ornament\", source = \"interior.ornament\")\n    @Mapping(target = \"material.materialType\", source = \"material\")\n    @Mapping(target = \"quality.report.organisation.name\", source = \"quality.report.organisationName\")\n    FishTankDto map( FishTank source );\n}\n"],["body","\n"],["body","@Mapper\npublic interface FishTankMapperWithDocument {\n\n    @Mapping(target = \"fish.kind\", source = \"fish.type\")\n    @Mapping(target = \"fish.name\", expression = \"java(\\\"Jaws\\\")\")\n    @Mapping(target = \"plant\", ignore = true )\n    @Mapping(target = \"ornament\", ignore = true )\n    @Mapping(target = \"material\", ignore = true)\n    @Mapping(target = \"quality.document\", source = \"quality.report\")\n    @Mapping(target = \"quality.document.organisation.name\", constant = \"NoIdeaInc\" )\n    FishTankWithNestedDocumentDto map( FishTank source );\n\n}\n"],["body","\n"],["headingLink","mapping-composition-experimental"],["heading","Mapping Composition (experimental)"],["body","\n"],["body","组合注解:用来处理 多个不同种类的bean可能存在 相同的字段"],["body","\n"],["body","定义在注解上\n@Retention(RetentionPolicy.CLASS)\n@Mapping(target = \"id\", ignore = true)\n@Mapping(target = \"creationDate\", expression = \"java(new java.util.Date())\")\n@Mapping(target = \"name\", source = \"groupName\")\npublic @interface ToEntity { }\n\n使用定义的注解\n@Mapper\npublic interface StorageMapper {\n\n    StorageMapper INSTANCE = Mappers.getMapper( StorageMapper.class );\n\n    @ToEntity\n    @Mapping( target = \"weightLimit\", source = \"maxWeight\")\n    ShelveEntity map(ShelveDto source);\n\n    @ToEntity\n    @Mapping( target = \"label\", source = \"designation\")\n    BoxEntity map(BoxDto source);\n}\n\n"],["body","\n"],["headingLink","增加自定义方法"],["heading","增加自定义方法"],["body","\n"],["headingLink","使用接口默认方法"],["heading","使用接口默认方法"],["body","\n"],["body","@Mapper\npublic interface CarMapper {\n\n    @Mapping(...)\n    ...\n    CarDto carToCarDto(Car car);\n\n    default PersonDto personToPersonDto(Person person) {\n        //hand-written mapping logic\n    }\n}\n"],["body","\n"],["headingLink","使用抽象类继承"],["heading","使用抽象类继承"],["body","\n"],["body","@Mapper\npublic abstract class CarMapper {\n\n    @Mapping(...)\n    ...\n    public abstract CarDto carToCarDto(Car car);\n\n    public PersonDto personToPersonDto(Person person) {\n        //hand-written mapping logic\n    }\n}\n"],["body","\n"],["headingLink","来自多源"],["heading","来自多源"],["body","\n"],["body","如果多源中字段名有歧义就会报错"],["body","\n"],["body","@Mapper\npublic interface AddressMapper {\n\n    @Mapping(source = \"person.description\", target = \"description\")\n    @Mapping(source = \"address.houseNo\", target = \"houseNumber\")\n    DeliveryAddressDto personAndAddressToDeliveryAddressDto(Person person, Address address);\n}\n"],["body","\n"],["headingLink","嵌套的bean属性处理"],["heading","嵌套的bean属性处理"],["body","\n"],["body","使用. 表明 将 record对象中所有的属性映射到target"],["body","\n"],["body","@Mapper\n public interface CustomerMapper {\n\n     @Mapping( target = \"name\", source = \"record.name\" )\n     @Mapping( target = \".\", source = \"record\" )\n     @Mapping( target = \".\", source = \"account\" )\n     Customer customerDtoToCustomer(CustomerDto customerDto);\n }\n"],["body","\n"],["headingLink","更新使用-源类型-更新目标类型"],["heading","更新使用 源类型 更新目标类型"],["body","\n"],["body","@Mapper\npublic interface CarMapper {\n\n    void updateCarFromDto(CarDto carDto, @MappingTarget Car car);\n}\n"],["body","\n"],["headingLink","直接字段访问映射"],["heading","直接字段访问映射"],["body","\n"],["body","支持 public的 字段,没有getter,setter"],["body","\n"],["body","    @InheritInverseConfiguration\n    CustomerDto fromCustomer(Customer customer);\n"],["body","\n"],["headingLink","使用构建器"],["heading","使用构建器"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","31.html"],["title","JavaCommandLine - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","17.spring_SpringDataRedis/readme.html"],["title","SpringDataRedis - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","SpringDataRedis"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","30.html"],["title","JMH - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","03.java基础_函数式编程/java函数式编程.html"],["title","java函数式编程.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","函数式接口"],["body","\n\n"],["body","只有一个抽象方法的接口"],["body","\n"],["body","可以通过 @FunctionalInterface 来注明这是一个函数式接口"],["body","\n\n"],["h1","lambda 表达式"],["body","\n"],["body","lambda 表达式的语法由参数列表、箭头符号 -> 和函数体组成"],["body","\n"],["h1","目标类型"],["body","\n"],["body","lambda表达式的类型是由其上下文推导而来"],["body","\n"],["headingLink","目标类型的上下文"],["heading","目标类型的上下文"],["body","\n\n"],["body","\n"],["body","变量声明"],["body","\n"],["body","\n"],["body","\n"],["body","赋值"],["body","\n"],["body","\n"],["body","\n"],["body","返回语句"],["body","\n"],["body","\n"],["body","\n"],["body","数组初始化器"],["body","\n"],["body","new FileFilter[] {\n    f -> f.exists(), f -> f.canRead(), f -> f.getName().startsWith(\"q\")\n  });\n"],["body","\n"],["body","\n"],["body","\n"],["body","方法和构造方法的参数"],["body","\n"],["body","\n"],["body","\n"],["body","lambda 表达式函数体"],["body","\n"],["body","\n"],["body","\n"],["body","条件表达式（? :）"],["body","\n"],["body","\n"],["body","\n"],["body","转型（Cast）表达式"],["body","\n"],["body","\n\n"],["h1","词法作用域"],["body","\n\n"],["body","\n"],["body","内部类与 lambda表达式作用域"],["body","\n"],["body","内部类的作用域在 类内部"],["body","\n"],["body","lambda表达式的作用域是在 类外部,类似于代码块的作用域"],["body","\n"],["body","\n\n"],["h1","变量捕获"],["body","\n"],["body","lambda 表达式对 值 封闭，对 变量 开放"],["body","\n"],["body","lambda表达式 对局部变量 引用的原则是 effective final"],["body","\n"],["body","lambda不支持 捕获变量的修改,因为容易在多线程环境下引起竞争"],["body","\n"],["body","int sum = 0;\nlist.forEach(e -> { sum += e.size(); }); // Illegal, close over values\n\nList<Integer> aList = new List<>();\nlist.forEach(e -> { aList.add(e); }); // Legal, open over variables\n"],["body","\n"],["h1","方法引用"],["body","\n\n"],["body","方法引用时 lambda表达式的缩写"],["body","\n"],["body","Person::getName 等价于 p -> p.getName()"],["body","\n\n"],["headingLink","方法引用的种类"],["heading","方法引用的种类"],["body","\n\n"],["body","静态方法引用：ClassName::methodName"],["body","\n"],["body","实例上的实例方法引用：instanceReference::methodName"],["body","\n"],["body","超类上的实例方法引用：super::methodName"],["body","\n"],["body","类型上的实例方法引用：ClassName::methodName"],["body","\n"],["body","构造方法引用：Class::new"],["body","\n"],["body","数组构造方法引用：TypeName[]::new"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","03.java基础_函数式编程/anyMatchAllMatch.html"],["title","anyMatchAllMatch.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","Stream中 anyMatch 跟 allMatch 对于空集合的 作用"],["body","\n"],["body","anyMatch：只要有一个满足即可退出"],["body","\n"],["body","等价代码"],["body","\n"],["body","    public static <T>boolean anyMatch(List<T> target, Predicate<T> predicate){\n        for (T t : target) {\n            if(predicate.test(t)){\n                return true;\n            }\n        }\n        return false;\n    }\n"],["body","\n"],["body","allMatch: 只要有一个不满足条件，则返回false"],["body","\n"],["body","等价代码"],["body","\n"],["body","    public static <T>boolean allMatch(List<T> target, Predicate<T> predicate){\n        for (T t : target) {\n            if(!predicate.test(t)){\n                return false;\n            }\n        }\n        return true;\n    }\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","03.java基础_函数式编程/方法引用.html"],["title","方法引用.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","方法引用"],["body","\n"],["body","方法引用 可以看作是 一个匿名内部类的实现,实质上是一个 匿名内部类的对象"],["body","\n"],["h1","方法引用有四种"],["body","\n"],["body","指向静态方法的引用"],["body","\n"],["body","指向某个对象的实例方法的引用"],["body","\n"],["body","指向某个类型的实例方法的引用"],["body","\n"],["body","指向构造方法的引用"],["body","\n"],["body","方法 引用"],["body","lambada表达式"],["body","\n"],["body","String::valueof  (静态方法)"],["body","x->String.valueof(x)"],["body","\n"],["body","Object::toString() (对象的实例方法的引用)"],["body","x->x.toString();"],["body","\n"],["body","x::toString() (类型的实例方法的引用)"],["body","x->x.toString();"],["body","\n"],["body","ArrayList::new (构造方法的引用)"],["body","()->new ArrayList()"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","03.java基础_函数式编程/lamba表达式原理.html"],["title","lamba表达式原理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","一创建测试样例"],["heading","一、创建测试样例"],["body","\n"],["body","public class App {\n    public static void main(String[] args) {\n        Lam lam = (msg) -> \"log:\" + msg;\n        String result = lam.print(\"Test\");\n        System.out.println(result);\n    }\n}\ninterface Lam {\n    String print(String msg);\n}\n"],["body","\n"],["headingLink","利用java命令编译分析"],["heading","利用Java命令编译分析"],["body","\n"],["body","javap -p Lam.class\n// 从返回值我们可以看到，因为Lam.class是App.class的内部类，所以提示我们它是App.java编译过来的，并且其内部只有一个abstract方法print()。\n  Compiled from \"App.java\"\ninterface Lam {\n  public abstract java.lang.String print(java.lang.String);\n}\n\n\njavap -p App.class\n//在APP中生成了一个静态方法：lambda$main$0\nCompiled from \"App.java\"\npublic class App {\n  public App();\n  public static void main(java.lang.String[]);\n  private static java.lang.String lambda$main$0(java.lang.String);\n}\n\n\n"],["body","\n"],["headingLink","静态方法如何实现的"],["heading","静态方法如何实现的"],["body","\n"],["body","//查看详细实现过程，这里只关注 lambda$main$0 方法\n➜  classes javap -c -p  App.class    \nCompiled from \"App.java\"\npublic class App {\n  public App();\n    Code:\n       0: aload_0\n       1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n       4: return\n\n  public static void main(java.lang.String[]);\n    Code:\n       0: invokedynamic #2,  0              // InvokeDynamic #0:print:()LLam;\n       5: astore_1\n       6: aload_1\n       7: ldc           #3                  // String Test\n       9: invokeinterface #4,  2            // InterfaceMethod Lam.print:(Ljava/lang/String;)Ljava/lang/String;\n      14: astore_2\n      15: getstatic     #5                  // Field java/lang/System.out:Ljava/io/PrintStream;\n      18: aload_2\n      19: invokevirtual #6                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V\n      22: return\n\n  private static java.lang.String lambda$main$0(java.lang.String);\n    Code:\n       0: new           #7                  // class java/lang/StringBuilder\n       3: dup\n       4: invokespecial #8                  // Method java/lang/StringBuilder.\"<init>\":()V\n       7: ldc           #9                  // String log:\n       9: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      12: aload_0\n      13: invokevirtual #10                 // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;\n      16: invokevirtual #11                 // Method java/lang/StringBuilder.toString:()Ljava/lang/String;\n      19: areturn\n}\n"],["body","\n"],["headingLink","如何调用生成的静态方法"],["heading","如何调用生成的静态方法"],["body","\n"],["body","这个*lambda$main$0(String)*方法是怎么被调用的呢？我们通过对java命令指定选项查看底层详细的编译过程："],["body","\n"],["body","调用 AppMain方法、并导出中途生成的代理类"],["body","\n"],["body","java -Djdk.internal.lambda.dumpProxyClasses App\n"],["body","\n"],["body","我们能够看到多出来一个App$$Lambda$1.class文件，打开文件："],["body","\n"],["body","javap -p App$$Lambda$1.class\n"],["body","\n"],["body","我们再通过javap -c查看一下它内部详细信息："],["body","\n"],["body","javap -c App$$Lambda$1.class\n"],["body","\n"],["body","final class App$$Lambda$1 implements Lam {\n  public java.lang.String print(java.lang.String);\n    Code:\n       0: aload_1\n       1: invokestatic  #18                 // Method App.lambda$main$0:(Ljava/lang/String;)Ljava/lang/String;\n       4: areturn\n}\n"],["body","\n"],["body","由此我们可以看出，App$$Lambda$1.class的print()方法执行了App.lambda$main$0()，因此，我们就可以得出结论："],["body","\n\n"],["body","Java在编译时，首先，在App内将Lambda表达式抽取出来作为一个static方法lambda$main$0(String)；"],["body","\n"],["body","然后，对Lam.class做了默认实现App$$Lambda$1.class，并在内部print()方法中调用了App内的static方法：lambda$main$0()；"],["body","\n"],["body","接下来，执行App的main()方法时，就会对lambda表达式利用实现类的print()方法运行；"],["body","\n"],["body","最后，将结果返回，并打印。"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","03.java基础_函数式编程/流操作.html"],["title","流操作.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","知识准备"],["body","\n"],["headingLink","命令式编程与声明式编程"],["heading","命令式编程与声明式编程"],["body","\n"],["body","在命令式编程中 不仅控制要做什么，还要如何做"],["body","\n"],["body","声明式编程只需要告诉该做什么 而怎么做 可以交给 jdk接口中的默认方法"],["body","\n"],["headingLink","流支持两种类型的操作"],["heading","流支持两种类型的操作"],["body","\n\n"],["body","中间操作与终端操作"],["body","\n"],["body","中间操作称为惰性操作"],["body","\n"],["body","终端操作也称为急切操作"],["body","\n"],["body","惰性操作不处理元素,直到流上调用急切操作"],["body","\n\n"],["headingLink","java可选类-optional"],["heading","java可选类 Optional"],["body","\n\n"],["body","获取值\n\n"],["body","get:可以获取 获取为空抛异常"],["body","\n"],["body","orElse:获取不到返回其他值"],["body","\n"],["body","orElseGet 获取不到返回 supplier提供器提供的值"],["body","\n"],["body","orElseThrow:获取不到抛出 supplier提供的异常"],["body","\n\n"],["body","\n"],["body","比较\n\n"],["body","equals:调用其他对象的 equals方法"],["body","\n\n"],["body","\n"],["body","操作\n\n"],["body","ifpresent 如果存在则执行操作"],["body","\n"],["body","ispresent 判断是否存在"],["body","\n"],["body","filter 判断成功则返回 非空, 否则为空"],["body","\n"],["body","map: 通过 Function<? super T,? extends U> 将 Option<T> 转化为 Optional<U>"],["body","\n"],["body","flatmap : Function<? super T, Optional> mapper "],["body","\n\n"],["body","\n\n"],["headingLink","流操作必备概念"],["heading","流操作必备概念"],["body","\n"],["headingLink","functiontr--一元函数"],["heading","Function<T,R>  一元函数"],["body","\n\n"],["body","\n"],["body","R apply(T t); 输入一个参数,返回一个结果"],["body","\n"],["body","\n"],["body","\n"],["body","<V> Function<V, R> compose(Function<? super V, ? extends T> before) "],["body","\n"],["body","​\t前一个函数的 输出 作为当前函数的 输入"],["body","\n"],["body","\n"],["body","\n"],["body","<V> Function<T, V> andThen(Function<? super R, ? extends V> after)"],["body","\n"],["body","当前函数的 输出 作为 下一个函数的 输入"],["body","\n"],["body","\n"],["body","\n"],["body","identity 返回值本身"],["body","\n"],["body","\n\n"],["headingLink","bifunctiont-u-r-二元函数"],["heading","BiFunction<T, U, R> 二元函数"],["body","\n\n"],["body","R apply(T t, U u); 比较"],["body","\n"],["body","子类 BinaryOperator 二元比较操作\n\n"],["body","minBy"],["body","\n"],["body","maxBy"],["body","\n\n"],["body","\n\n"],["headingLink","comparator-比较器"],["heading","Comparator 比较器"],["body","\n\n"],["body","\n"],["body","Comparator thenComparing(Comparator<? super T> other)"],["body","\n"],["body","\n"],["body","\n"],["body","如果比较相等 继续用下一个比较器比较"],["body","\n"],["body","\n"],["body","\n"],["body","<U> Comparator<T> thenComparing(\n        Function<? super T, ? extends U> keyExtractor,\n        Comparator<? super U> keyComparator)\n"],["body","\n\n"],["body","如果比较相等 , 继续用指定提取 后 的可比较的key"],["body","\n\n"],["body","\n"],["body","\n"],["body","thenComparingInt |long | double"],["body","\n\n"],["body","如果比较相等 , 继续用  指定提取后的 int类型比较"],["body","\n\n"],["body","\n"],["body","\n"],["body","reversed 获得一个方向比较的 比较器"],["body","\n"],["body","\n"],["body","\n"],["body","comparing 返回 指定 keyextractor 和 keyComparator的 比较器"],["body","\n"],["body","\n"],["body","\n"],["body","comparingInt..."],["body","\n"],["body","\n\n"],["headingLink","谓词判断"],["heading","谓词判断"],["body","\n\n"],["body","test(T t) 判断"],["body","\n"],["body","and(Predicate<? super T> other)"],["body","\n"],["body","negate() 取反"],["body","\n"],["body","or() "],["body","\n"],["body","Predicate isEqual(Object targetRef) 返回与目标引用相等的 谓词判断"],["body","\n\n"],["headingLink","提供器supplier"],["heading","提供器Supplier"],["body","\n\n"],["body","T get()"],["body","\n\n"],["headingLink","一元操作"],["heading","一元操作"],["body","\n"],["body","UnaryOperator extends Function<T,T> "],["body","\n"],["body","永远返回它本身"],["body","\n"],["headingLink","消费者"],["heading","消费者"],["body","\n"],["body","void accept(T t);"],["body","\n"],["body","Consumer<T> andThen(Consumer<? super T> after) 在当前消费完之后,接着消费"],["body","\n"],["h1","流的创建"],["body","\n"],["headingLink","从值创建流"],["heading","从值创建流"],["body","\n"],["body","1.值或者数组\n<T> Stream<T> of(T...values)\n2.流构建器\nStream<String> stream  = Stream.<String>builder()\n        .add(\"XML\")\n        .add(\"Java\")\n        .add(\"CSS\")\n        .add(\"SQL\")\n        .build();\nstream.forEach(System.out::println);\n3.IntStream范围\nIntStream oneToFive  = IntStream.range(1, 6);\nIntStream oneToFive  = IntStream.rangeClosed(1, 5);\n"],["body","\n"],["headingLink","从空流创建流"],["heading","从空流创建流"],["body","\n"],["body","Stream<String> stream  = Stream.empty();\n"],["body","\n"],["headingLink","从函数创建流"],["heading","从函数创建流"],["body","\n"],["body","1.顺序创建有序流\n<T> Stream<T> iterate(T  seed, UnaryOperator<T>  f)\n2.生成重复值的无限流\n<T> Stream<T> generate(Supplier<T> s)\n3.随机流\njava.util.Random类提供ints()，longs()和doubles()分别返回无限IntStream，LongStream和DoubleStream\n new Random().ints().limit(5).forEach(System.out::println);\n"],["body","\n\n"],["body","\n"],["body","从其他API创建流"],["body","\n\n"],["body","\n"],["body","可以从 各种集合创建流  集合.stream()"],["body","\n"],["body","\n"],["body","\n"],["body","可以从CharSequence 创建流"],["body","\n"],["body","\n"],["body","\n"],["body","从正则创建流"],["body","\n"],["body","Pattern.compile(\",\")\n    .splitAsStream(str)\n    .forEach(System.out::println);\n"],["body","\n"],["body","\n\n"],["body","\n\n"],["headingLink","从文件创建流"],["heading","从文件创建流"],["body","\n\n"],["body","\n"],["body","使用流从JarFile读取JarEntry"],["body","\n"],["body","1.读取文件\nPath path = Paths.get(\"D:\\\\smb.conf\");\n    try (Stream<String> lines = Files.lines(path)) {\n      lines.forEach(System.out::println);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n2.读取目录\npublic class Main {\n  public static void main(String[] args) {\n    Path dir = Paths.get(\".\");\n    System.out.printf(\"%nThe file tree for %s%n\", \n        dir.toAbsolutePath());\n    try (Stream<Path> fileTree = Files.walk(dir)) {\n      fileTree.forEach(System.out::println);\n    } catch (IOException e) {\n      e.printStackTrace();\n    }\n  }\n}\n"],["body","\n"],["body","\n\n"],["h1","中间操作"],["body","\n"],["headingLink","查找与匹配"],["heading","查找与匹配"],["body","\n"],["body","allMatch"],["body","\n"],["body","findAny"],["body","\n"],["body","findFirst"],["body","\n"],["body","noneMatch"],["body","\n"],["headingLink","过滤"],["heading","过滤"],["body","\n"],["body","filter "],["body","\n"],["body","使用谓词过滤"],["body","\n"],["headingLink","映射"],["heading","映射"],["body","\n\n"],["body","flatMap 支持一对多映射"],["body","\n"],["body","map 支持一对一映射"],["body","\n\n"],["headingLink","截取与跳过"],["heading","截取与跳过"],["body","\n"],["body","limit"],["body","\n"],["body","skip"],["body","\n"],["headingLink","排序与去重"],["heading","排序与去重"],["body","\n"],["body","distinct"],["body","\n\n"],["body","对流中的每个元素去重"],["body","\n\n"],["body","sorted"],["body","\n\n"],["body","对流中的每个元素排序"],["body","\n\n"],["h1","终止操作"],["body","\n"],["headingLink","遍历与查看"],["heading","遍历与查看"],["body","\n"],["body","forEach"],["body","\n\n"],["body","遍历流中的每个元素"],["body","\n\n"],["body","peek"],["body","\n"],["headingLink","组合"],["heading","组合"],["body","\n"],["body","reduce"],["body","\n\n"],["body","\n"],["body","需要一个种子与累加器"],["body","\n"],["body","\n"],["body","\n"],["body","sum()，max()，min()，count() 这些适合于数值流"],["body","\n"],["body","\n\n"],["headingLink","聚合"],["heading","聚合"],["body","\n"],["body","类似于组合,专门用于数值的聚合"],["body","\n"],["body","sum"],["body","\n"],["body","max"],["body","\n"],["body","min"],["body","\n"],["body","count"],["body","\n"],["headingLink","流收集-通用"],["heading","流收集-通用"],["body","\n"],["body","提供要如何收集的收集器"],["body","\n"],["body","collect"],["body","\n"],["body","针对提供自定义容器\n<R> R collect(Supplier<R> supplier, BiConsumer<R,? super T> accumulator, BiConsumer<R,R> combiner)\n\nSupplier<ArrayList<String>> supplier = () -> new ArrayList<>();\nSupplier<ArrayList<String>> supplier = ArrayList::new;\n\n提供容器收集的累加器\nBiConsumer<ArrayList<String>, String>  accumulator = ArrayList::add;\n\n组合器仅用于并行流。\nList<String> names = Employee.persons()\n        .stream()\n        .map(Employee::getName)\n        .collect(ArrayList::new,  ArrayList::add, ArrayList::addAll);\n    System.out.println(names);\n"],["body","\n"],["body","collector"],["body","\n\n"],["body","常见的 toList()，toSet()和toCollection()"],["body","\n\n"],["headingLink","流收集-摘要"],["heading","流收集-摘要"],["body","\n"],["body","类别"],["body","\n\n"],["body","\n"],["body","DoubleSummaryStatistics"],["body","\n"],["body","\n"],["body","\n"],["body","LongSummaryStatistics"],["body","\n"],["body","\n"],["body","\n"],["body","IntSummaryStatistics"],["body","\n"],["body","\n"],["body","\n"],["body","Collectors.summarizingDouble()返回DoubleSummaryStatistics。"],["body","\n"],["body","\n"],["body","\n"],["body","Collectors.summarizingLong()返回一个LongSummaryStatistics。"],["body","\n"],["body","\n"],["body","\n"],["body","Collectors.summarizingInt()返回一个IntSummaryStatistics。"],["body","\n"],["body","\n\n"],["body","案例"],["body","\n"],["body","    DoubleSummaryStatistics incomeStats = Employee.persons()\n        .stream()\n        .map(Employee::getIncome)\n        .collect(DoubleSummaryStatistics::new, \n                 DoubleSummaryStatistics::accept, \n                 DoubleSummaryStatistics::combine);\n     System.out.println(incomeStats);\n"],["body","\n"],["headingLink","流收集-映射"],["heading","流收集-映射"],["body","\n"],["body","toMap(Function<? super T,? extends K> keyMapper, Function<? super T,? extends U> valueMapper)\n\n\ntoMap(Function<? super T,? extends K> keyMapper, Function<? super T,? extends U> valueMapper, BinaryOperator<U> mergeFunction)\n\n\ntoMap(Function<? super T,? extends K> keyMapper, Function<? super T,? extends U> valueMapper, BinaryOperator<U> mergeFunction, Supplier<M>  mapSupplier)\n"],["body","\n"],["body","System.out.println(\n        Stream.of(\"aac\", \"bbb\", \"ccc\").\n        map(a -> a.split(\"\")).\n        flatMap(Arrays::stream).\n        collect(\n                Collectors.toMap(k->k, v -> 1, (k1, k2) -> k1 + 1)\n        )\n  );\n"],["body","\n"],["headingLink","流收集-连接"],["heading","流收集-连接"],["body","\n"],["body","joining()\njoining(CharSequence delimiter)\njoining(CharSequence delimiter, CharSequence prefix, CharSequence suffix)\n适用于string流\n     String  prefixedNames = persons.stream()\n        .map(Employee::getName)\n        .collect(Collectors.joining(\", \", \"Hello \",  \".  Goodbye.\"));\n"],["body","\n"],["headingLink","流收集-分组"],["heading","流收集-分组"],["body","\n"],["body","给定 分组器 和 分组后的 子组收集器"],["body","\n"],["body","groupingBy(Function<? super  T,?  extends K>  classifier)\n\ngroupingBy(Function<? super  T,?  extends K>  classifier,  Collector<? super T,A,D> downstream)\n\ngroupingBy(Function<? super  T,?  extends K>  classifier, Supplier<M>  mapFactory, Collector<? super T,A,D> downstream)\n"],["body","\n"],["body","示例1"],["body","\n"],["body"," Comparator<Person> byHeight = Comparator.comparing(Person::getHeight);\n   Map<String, Optional<Person>> tallestByCity = people.stream()\n             .collect(Collectors.groupingBy(Person::getCity, Collectors.reducing(BinaryOperator.maxBy(byHeight))));\n"],["body","\n"],["body","示例2"],["body","\n"],["body","Map<Employee.Gender, String>  namesByGender = Employee.persons()\n    .stream()\n    .collect(Collectors.groupingBy(Employee::getGender, \n                                   Collectors.mapping(Employee::getName, Collectors.joining(\", \"))));\n"],["body","\n"],["headingLink","流收集-分区"],["heading","流收集-分区"],["body","\n"],["body","只能分两个区,通过谓词划分"],["body","\n"],["body","partitioningBy(Predicate<? super T> predicate)\n\npartitioningBy(Predicate<? super T> predicate,  Collector<? super T,A,D> downstream)\n\nMap<Boolean,  List<Employee>>  partionedByMaleGender = \n    Employee.persons()\n            .stream()\n            .collect(Collectors.partitioningBy(Employee::isMale)); \n    System.out.println(partionedByMaleGender);\n \n"],["body","\n"],["headingLink","流收集-转换"],["heading","流收集-转换"],["body","\n"],["body","第一个参数是收集数据的收集器。 第二个参数是转换结果的转换器。"],["body","\n"],["body","A是累积的元素类型"],["body","\n"],["body","T是输入的类型"],["body","\n"],["body","R是 累积的结果"],["body","\n"],["body","RR是转换的结果"],["body","\n"],["body","collectingAndThen(Collector<T,A,R> downstream, Function<R,RR>  finisher)\n\n    List<String> names = Employee.persons()\n        .stream()\n        .map(Employee::getName)\n        .collect(Collectors.collectingAndThen(Collectors.toList(),\n             result ->  Collections.unmodifiableList(result)));  \n"],["body","\n"],["h1","并行流"],["body","\n"],["body","顺序流上的操作由一个线程串行处理。"],["body","\n"],["body","使用多个线程并行处理并行流上的操作。"],["body","\n"],["body","Stream.iterate(1L,i->i+1).limit(n).parllel().reduce(0L,Long::sum)\n"],["body","\n"],["h1","Collector接口"],["body","\n"],["body"," Supplier<A> supplier();\n BiConsumer<A, T> accumulator();\n BinaryOperator<A> combiner();\n Function<A, R> finisher();\n Set<Characteristics> characteristics();\n"],["body","\n"],["body","package com.weisanju.stream;\n\nimport java.util.*;\nimport java.util.function.BiConsumer;\nimport java.util.function.BinaryOperator;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport java.util.stream.Collector;\n\nclass GroupingWithKeys<T, K> implements Collector<T, Map<K, List<T>>, Map<K, List<T>>> {\n\n    private List<K> possibleKeys = Collections.emptyList();\n    private final Function<T, K> keyGenerator;\n\n    @SafeVarargs\n    public GroupingWithKeys(Function<T, K> keyGenerator, K... possibleKeys) {  //构造时传入 Key 生成器和可能的 Keys\n        if (possibleKeys != null) {\n            this.possibleKeys = Arrays.asList(possibleKeys);\n        }\n        this.keyGenerator = keyGenerator;\n    }\n\n    @Override\n    public Supplier<Map<K, List<T>>> supplier() {\n        return () -> {\n            Map<K, List<T>> map = new LinkedHashMap<>();\n            possibleKeys.forEach(s -> map.put(s, new ArrayList<T>())); //按 possibleKeys 依次用空列表填充 Map\n            return map;\n        };\n    }\n\n    @Override\n    public BiConsumer<Map<K, List<T>>, T> accumulator() {\n        return (map, t) -> {\n          List<T> ts = map.computeIfAbsent(keyGenerator.apply(t), (e) -> new ArrayList<>());\n          ts.add(t);\n        };\n    }\n\n    @Override\n    public BinaryOperator<Map<K, List<T>>> combiner() {\n        return (map1, map2) -> {\n            map1.putAll(map2);\n            return map1;\n        };\n    }\n\n    @Override\n    public Function<Map<K, List<T>>, Map<K, List<T>>> finisher() {\n        return Function.identity();\n    }\n\n    @Override\n    public Set<Characteristics> characteristics() {\n        return Collections.unmodifiableSet(EnumSet.of(Characteristics.IDENTITY_FINISH, Characteristics.CONCURRENT));\n    }\n}\n"],["body","\n"],["h1","Spliterator接口"],["body","\n"],["headingLink","接口方法"],["heading","接口方法"],["body","\n"],["body","方法名"],["body","解析"],["body","\n"],["body","boolean tryAdvance(Consumer<? super T> action)"],["body","如果元素存在，则对它进行处理，并返回true，否则返回false。"],["body","如果我们不想处理stream后续的元素，则在tryAdvance中返回false即可，利用这个特征，可以中断stream的处理。"],["body","\n"],["body","Spliterator trySplit()"],["body","trySplit尝试对现有的stream进行分拆，一般用在parallelStream的情况，因为在并发stream下，我们需要用多线程去处理stream的不同元素，trySplit就是对stream中元素进行分拆处理的方法。"],["body","理想情况下trySplit应该将stream拆分成数目相同的两部分才能最大提升性能。"],["body","\n"],["body","long estimateSize();"],["body","表示Spliterator中待处理的元素"],["body","\n"],["body","characteristics"],["body","Spliterator的特征"],["body","ORDERED    = 0x00000010;//表示元素是有序的（每一次遍历结果相同） "],["body","DISTINCT   = 0x00000001;//表示元素不重复 "],["body","SORTED     = 0x00000004;//表示元素是按一定规律进行排列（有指定比较器） "],["body","SIZED      = 0x00000040;// 表示大小是固定的 "],["body","NONNULL    = 0x00000100;//表示没有null元素 "],["body","IMMUTABLE  = 0x00000400;//表示元素不可变 "],["body"," CONCURRENT = 0x00001000;//表示迭代器可以多线程操作 "],["body"," SUBSIZED   = 0x00004000;//表示子Spliterators都具有SIZED特性"],["body","一个Spliterator可以有多个特征，多个特征进行or运算，最后得到最终的characteristics。"],["body","\n\n\n"],["body","​\t"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","04.java基础_Bean校验/javaValidated.html"],["title","javaValidated.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","校验框架介绍"],["body","\n"],["body","JSR303 是一套JavaBean参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们JavaBean的属性上面，就可以在需要校验的时候进行校验了。注解如下："],["body","\n"],["headingLink","jsr303注解"],["heading","JSR303注解"],["body","\n"],["headingLink","空检查"],["heading","空检查"],["body","\n"],["body","注解名"],["body","验证对象"],["body","说明"],["body","\n"],["body","@NotEmpty"],["body","集合类"],["body","；不能为null，而且长度必须大于0"],["body","\n"],["body","@NotBlank"],["body","String"],["body","只能作用在String上，不能为null，而且调用trim()后，长度必须大于0"],["body","\n"],["body","@NotNull"],["body","用在基本类型上"],["body","不能为null，但可以为empty。"],["body","\n"],["body","@Null"],["body","用在基本类型上"],["body","被注释的元素必须为null"],["body","\n\n\n"],["headingLink","长度检查"],["heading","长度检查"],["body","\n"],["body","注解名"],["body","验证对象"],["body","说明"],["body","\n"],["body","@Size(min=,max=)"],["body","Array,Collection,Map,String"],["body","长度是否在给定的范围之内"],["body","\n"],["body","@Length(min=, max=)"],["body","String 类型"],["body","长度是否在给定的范围之内"],["body","\n\n\n"],["headingLink","booelan检查"],["heading","Booelan检查"],["body","\n"],["body","注解名"],["body","验证对象"],["body","说明"],["body","\n"],["body","@AssertTrue"],["body","bool"],["body","验证 Boolean 对象是否为 true"],["body","\n"],["body","@AssertFalse"],["body","bool"],["body","验证 Boolean 对象是否为 false"],["body","\n\n\n"],["headingLink","日期检查"],["heading","日期检查"],["body","\n"],["body","注解名"],["body","验证对象"],["body","说明"],["body","\n"],["body","@Past"],["body","date,Calendar"],["body","验证是否在当前时间之前"],["body","\n"],["body","@Future"],["body","date,Calendar"],["body","验证 String 对象是否符合正则表达式的规则"],["body","\n"],["body","@Pattern"],["body","String 对象"],["body","是否符合正则表达式的规则"],["body","\n\n\n"],["headingLink","数值检查"],["heading","数值检查"],["body","\n"],["body","注解名"],["body","验证对象"],["body","说明"],["body","\n"],["body","@Min,@Max"],["body","Number 和 String 对象"],["body","是否大等于指定的值"],["body","\n"],["body","@DecimalMax,@DecimalMin"],["body","BigDecimal,数值类型"],["body","\n"],["body","@Digits"],["body","Number 和 String"],["body","验证 Number 和 String 的构成是否合法"],["body","\n"],["body","@Digits(integer=,fraction=)"],["body","字符串"],["body","验证字符串是否是符合指定格式的数字，interger指定整数精度，fraction指定小数精度。"],["body","\n\n\n"],["body","Hibernate validator 在JSR303的基础上对校验注解进行了扩展，扩展注解如下："],["body","\n"],["headingLink","hibernate扩展注解"],["heading","Hibernate扩展注解"],["body","\n"],["body","注解名"],["body","说明"],["body","\n"],["body","@Email"],["body","被注释的元素必须是电子邮箱"],["body","\n"],["body","@Length"],["body","字符串的长度"],["body","\n"],["body","@NotEmpty"],["body","字符串非空"],["body","\n"],["body","@Range"],["body","指定范围"],["body","\n\n\n"],["body","Spring validtor 同样扩展了jsr303,并实现了方法参数和返回值的校验"],["body","\n"],["body","Spring 提供了MethodValidationPostProcessor类，用于对方法的校验"],["body","\n"],["h1","声明 Java Bean 约束"],["body","\n"],["headingLink","字段级别约束"],["heading","字段级别约束"],["body","\n"],["body","@NotNull\nprivate String manufacturer;\n"],["body","\n"],["headingLink","属性级别约束"],["heading","属性级别约束"],["body","\n"],["body","@NotNull\npublic String getManufacturer(){\n  return manufacturer;\n}\n"],["body","\n"],["headingLink","容器级别约束"],["heading","容器级别约束"],["body","\n"],["body","private Map<@NotNull FuelConsumption, @MaxAllowedFuelConsumption Integer> fuelConsumption = new HashMap<>();\n"],["body","\n"],["headingLink","类级别约束"],["heading","类级别约束"],["body","\n"],["body","在这种情况下，验证的对象不是单个属性，而是完整的对象。如果验证依赖于对象的多个属性之间的相关性，则类级约束非常有用。\n如：汽车中，乘客数量不能大于座椅数量，否则超载"],["body","\n"],["body","@ValidPassengerCount\npublic class Car {\n\n    private int seatCount;\n\n    private List<Person> passengers;\n\n    //...\n}\n"],["body","\n"],["headingLink","约束继承"],["heading","约束继承"],["body","\n"],["body","当一个类继承/实现另一个类时，父类声明的所有约束也会应用在子类继承的对应属性上。\n如果方法重写，约束注解将会聚合，也就是此方法父类和子类声明的约束都会起作用。"],["body","\n"],["headingLink","级联验证"],["heading","级联验证"],["body","\n"],["body","Bean Validation API 不仅允许验证单个类实例，也支持级联验证。"],["body","\n"],["body","只需使用 @Valid 修饰对象属性的引用，则对象属性中声明的所有约束也会起作用。"],["body","\n"],["body","public class Car {\n    @NotNull\n    @Valid\n    private Person driver;\n    //...\n}\npublic class Person {\n    @NotNull\n    private String name;\n    //...\n}\n"],["body","\n"],["h1","声明方法约束"],["body","\n"],["headingLink","参数约束"],["heading","参数约束"],["body","\n"],["body","通过向方法或构造函数的参数添加约束注解来指定方法或构造函数的前置条件，官方示例如下："],["body","\n"],["body","public RentalStation(@NotNull String name){}\n\npublic void rentCar(@NotNull Customer customer,\n                          @NotNull @Future Date startDate,\n                          @Min(1) int durationInDays){}\n"],["body","\n"],["headingLink","返回值约束"],["heading","返回值约束"],["body","\n"],["body","通过在方法体上添加约束注解来给方法或构造函数指定后置条件，官方示例如下："],["body","\n"],["body","public class RentalStation {\n    @ValidRentalStation\n    public RentalStation() {\n        //...\n    }\n    @NotNull\n    @Size(min = 1)\n    public List<@NotNull Customer> getCustomers() {\n        //...\n        return null;\n    }\n}\n"],["body","\n"],["body","此示例指定了三个约束："],["body","\n\n"],["body","任何新创建的 RentalStation 对象都必须满足 @validRentalStation 约束"],["body","\n"],["body","getCustomers() 返回的客户列表不能为空，并且必须至少包含 1 个元素"],["body","\n"],["body","getCustomers() 返回的客户列表不能包含空对象"],["body","\n\n"],["headingLink","级联约束"],["heading","级联约束"],["body","\n"],["body","类似于 JavaBeans 属性的级联验证，@Valid 注解可用于标记方法参数和返回值的级联验证。"],["body","\n"],["body","类似于 javabeans 属性的级联验证（参见第 2.1.6 节“对象图”），@valid 注释可用于标记可执行参数和级联验证的返回值。当验证用@valid 注释的参数或返回值时，也会验证在参数或返回值对象上声明的约束。\n而且，也可用在容器元素中。"],["body","\n"],["body","public class Garage {\n    public boolean checkCars(@NotNull List<@Valid Car> cars) {\n        //...\n        return false;\n    }\n}\n"],["body","\n"],["headingLink","继承验证"],["heading","继承验证"],["body","\n"],["body","当在继承体系中声明方法约束时，必须了解两个规则："],["body","\n\n"],["body","方法调用方要满足前置条件不能在子类型中得到加强 参数"],["body","\n"],["body","方法调用方要保证后置条件不能再子类型中被削弱 返回值"],["body","\n\n"],["body","这些规则是由子类行为概念所决定的：在使用类型 T 的任何地方，也能在不改变程序行为的情况下使用 T 的子类。"],["body","\n"],["body","当两个类分别有一个同名且形参列表相同的方法，而另一个类用一个方法重写/实现上述两个类的同名方法时，这两个父类的同名方法上不能有任何参数约束，因为不管怎样都会与上述规则冲突。\n示例："],["body","\n"],["body","public interface Vehicle {\n  void drive(@Max(75) int speedInMph);\n}\npublic interface Car {\n  void drive(int speedInMph);\n}\n\npublic class RacingCar implements Car, Vehicle {\n  @Override\n  public void drive(int speedInMph) {\n      //...\n  }\n}\n"],["body","\n"],["h1","分组约束"],["body","\n"],["body","注意：上述的 22 个约束注解都有 groups 属性。当不指定 groups 时，默认为 Default 分组。"],["body","\n"],["body","JSR 规范支持手动校验，不直接支持使用注解校验，不过 spring 提供了分组校验注解扩展支持，即：@Validated，参数为 group 类集合"],["body","\n"],["headingLink","分组继承"],["heading","分组继承"],["body","\n"],["body","在某些场景下，需要定义一个组，它包含其它组的约束，可以用分组继承。\n如："],["body","\n"],["body","public class SuperCar extends Car {\n    @AssertTrue(\n            message = \"Race car must have a safety belt\",\n            groups = RaceCarChecks.class\n    )\n    private boolean safetyBelt;\n    // getters and setters ...\n}\npublic interface RaceCarChecks extends Default {}\n"],["body","\n"],["body","但因为此处，是想 Default 分组一直都要校验"],["body","\n"],["body","public interface DefaultInherGroup extends Default {}\n"],["body","\n"],["headingLink","定义分组序列"],["heading","定义分组序列"],["body","\n"],["body","默认情况下，不管约束是属于哪个分组，它们的计算是没有特定顺序的，而在某些场景下，控制约束的计算顺序是有用的。\n如：先检查汽车的默认约束，再检查汽车的性能约束，最后在开车前，检查驾驶员的实际约束。\n可以定义一个接口，并用 @GroupSequence 来定义需要验证的分组的序列。"],["body","\n"],["body","@GroupSequence({ Default.class, CarChecks.class, DriverChecks.class })\npublic interface OrderedChecks {}\n"],["body","\n"],["body","此分组用法与其它分组一样，只是此分组拥有按分组顺序校验的功能"],["body","\n"],["body","\n"],["body","定义序列的组和组成序列的组不能通过级联序列定义或组继承直接或间接地参与循环依赖关系。如果对包含此类循环的组计算，则会引发 GroupDefinitionException。"],["body","\n"],["body","\n"],["headingLink","重新定义默认分组序列"],["heading","重新定义默认分组序列"],["body","\n"],["headingLink","groupsequence"],["heading","@GroupSequence"],["body","\n"],["body","@GroupSequence 除了定义分组序列外，还允许重新定义指定类的默认分组。为此，只需将@GroupSequence 添加到类中，并在注解中用指定序列的分组替换 Default 默认分组。"],["body","\n"],["body","@GroupSequence({ RentalChecks.class, CarChecks.class, RentalCar.class })\npublic class RentalCar extends Car {}\n"],["body","\n"],["body","在验证约束时，直接把其当做默认分组方式来验证"],["body","\n"],["headingLink","groupsequenceprovider"],["heading","@GroupSequenceProvider"],["body","\n"],["body","注意：此为 hibernate-validator 提供，JSR 规范不支持"],["body","\n"],["body","可用于根据对象状态动态地重新定义默认分组序列。\n需要做两步："],["body","\n\n"],["body","实现接口：DefaultGroupSequenceProvider"],["body","\n"],["body","在指定类上使用 @GroupSequenceProvider，并指定 value 为上一步的类"],["body","\n\n"],["body","public class RentalCarGroupSequenceProvider\n        implements DefaultGroupSequenceProvider<RentalCar> {\n    @Override\n    public List<Class<?>> getValidationGroups(RentalCar car) {\n        List<Class<?>> defaultGroupSequence = new ArrayList<Class<?>>();\n        defaultGroupSequence.add( RentalCar.class );\n        if ( car != null && !car.isRented() ) {\n            defaultGroupSequence.add( CarChecks.class );\n        }\n        return defaultGroupSequence;\n    }\n}\n@GroupSequenceProvider(RentalCarGroupSequenceProvider.class)\npublic class RentalCar extends Car {\n    @AssertFalse(message = \"The car is currently rented out\", groups = RentalChecks.class)\n    private boolean rented;\n    public RentalCar(String manufacturer, String licencePlate, int seatCount) {\n        super( manufacturer, licencePlate, seatCount );\n    }\n    public boolean isRented() {\n        return rented;\n    }\n    public void setRented(boolean rented) {\n        this.rented = rented;\n    }\n}\n"],["body","\n"],["headingLink","分组转换"],["heading","分组转换"],["body","\n"],["body","如果你想把与汽车相关的检查和驾驶员检查一起验证呢？当然，您可以显式地指定验证多个组，但是如果您希望将这些验证作为默认组验证的一部分进行，该怎么办？这里@ConvertGroup 开始使用，它允许您在级联验证期间使用与最初请求的组不同的组。"],["body","\n"],["body","在可以使用 @Valid 的任何地方，都能定义分组转换，也可以在同一个元素上定义多个分组转换\n必须满足以下限制："],["body","\n\n"],["body","@ConvertGroup 只能与 @Valid 结合使用。如果不是，则抛出 ConstraintDeclarationException。"],["body","\n"],["body","在同一元素上有多个 from 值相同的转换规则是不合法的。在这种情况下，将抛出 ConstraintDeclarationException。"],["body","\n"],["body","from 属性不能引用分组序列。在这种情况下会抛出 ConstraintDeclarationException"],["body","\n\n"],["body","// 当 driver 为 null 时，不会级联验证，使用的是默认分组，当级联验证时，使用的是 DriverChecks 分组 @Valid @ConvertGroup(from = Default.class, to = DriverChecks.class) private Driver driver;\n"],["body","\n"],["h1","全局异常处理"],["body","\n"],["headingLink","引包"],["heading","引包"],["body","\n"],["body","    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-validation</artifactId>\n    </dependency>\n"],["body","\n"],["headingLink","全局异常处理-1"],["heading","全局异常处理"],["body","\n"],["body","@ControllerAdvice\npublic class WebExceptionHandler {\n　　 //处理Get请求中 使用@Valid 验证路径中请求实体校验失败后抛出的异常，详情继续往下看代码\n    @ExceptionHandler(BindException.class)\n    @ResponseBody\n    public ResponseVO BindExceptionHandler(BindException e) {\n        String message = e.getBindingResult().getAllErrors().stream().map(DefaultMessageSourceResolvable::getDefaultMessage).collect(Collectors.joining());\n        return new ResponseVO(message);\n    }\n\n    //处理请求参数格式错误 @RequestParam上validate失败后抛出的异常是javax.validation.ConstraintViolationException\n    @ExceptionHandler(ConstraintViolationException.class)\n    @ResponseBody\n    public ResponseVO ConstraintViolationExceptionHandler(ConstraintViolationException e) {\n        String message = e.getConstraintViolations().stream().map(ConstraintViolation::getMessage).collect(Collectors.joining());\n        return new ResponseVO(message);\n    }\n\n    //处理请求参数格式错误 @RequestBody上validate失败后抛出的异常是MethodArgumentNotValidException异常。\n    @ExceptionHandler(MethodArgumentNotValidException.class)\n    @ResponseBody\n    public ResponseVO MethodArgumentNotValidExceptionHandler(MethodArgumentNotValidException e) {\n        String message = e.getBindingResult().getAllErrors().stream().map(DefaultMessageSourceResolvable::getDefaultMessage).collect(Collectors.joining());\n        return new ResponseVO(message);\n    }\n}\n"],["body","\n"],["body","多异常统一处理"],["body","\n"],["body","// @RestControllerAdvice\n\n    /*  数据校验处理 */\n    @ExceptionHandler({BindException.class, ConstraintViolationException.class})\n    public String validatorExceptionHandler(Exception e) {\n        String msg = e instanceof BindException ? msgConvertor(((BindException) e).getBindingResult())\n            : msgConvertor(((ConstraintViolationException) e).getConstraintViolations());\n\n        return msg;\n    }\n\n    /**\n     * 校验消息转换拼接\n     *\n     * @param bindingResult\n     * @return\n     */\n    public static String msgConvertor(BindingResult bindingResult) {\n        List<FieldError> fieldErrors = bindingResult.getFieldErrors();\n        StringBuilder sb = new StringBuilder();\n        fieldErrors.forEach(fieldError -> sb.append(fieldError.getDefaultMessage()).append(\",\"));\n\n        return sb.deleteCharAt(sb.length() - 1).toString().toLowerCase();\n    }\n\n    private String msgConvertor(Set<ConstraintViolation<?>> constraintViolations) {\n        StringBuilder sb = new StringBuilder();\n        constraintViolations.forEach(violation -> sb.append(violation.getMessage()).append(\",\"));\n\n        return sb.deleteCharAt(sb.length() - 1).toString().toLowerCase();\n    }\n\n"],["body","\n"],["h1","嵌套对象的校验"],["body","\n"],["body","@Setter\n@Getter\npublic class BuyFlowerRequest {\n\n    @NotEmpty(field = \"花名\")\n    private String name;\n\n    @Min(field = \"价格\", value = 1)\n    private int price;\n\n    @NotNull\n    private List<PayType> payTypeList;\n\n} \n\n@Setter\n@Getter\npublic class PayType {\n\n    @Valid\n    @Min(value = 1)\n    private int payType;\n\n    @Valid\n    @Min(value = 1)\n    private int payAmount;\n\n}\n"],["body","\n"],["h1","三种校验方式"],["body","\n"],["headingLink","全局异常处理-2"],["heading","全局异常处理"],["body","\n"],["body","在Controller方法参数前加@Valid注解——校验不通过时直接抛异常"],["body","\n"],["headingLink","用户自行判断并处理"],["heading","用户自行判断并处理"],["body","\n"],["body","在Controller方法参数前加@Valid注解，参数后面定义一个BindingResult类型参数——执行时会将校验结果放进bindingResult里面，用户自行判断并处理"],["body","\n"],["body","@PostMapping(\"/test2\")\n\tpublic Object test2(@RequestBody @Valid User user, BindingResult bindingResult) {\n\t\t// 参数校验\n\t\tif (bindingResult.hasErrors()) {\n\t\t\tString messages = bindingResult.getAllErrors()\n\t\t\t\t.stream()\n\t\t\t\t.map(ObjectError::getDefaultMessage)\n\t\t\t\t.reduce((m1, m2) -> m1 + \"；\" + m2)\n\t\t\t\t.orElse(\"参数输入有误！\");\n\t\t\tthrow new IllegalArgumentException(messages);\n\t\t}\n\t\treturn \"操作成功！\";\n\n\n\t}\n"],["body","\n"],["headingLink","bindingresult-的使用"],["heading","BindingResult 的使用"],["body","\n"],["body","BindingResult必须跟在被校验参数之后,若被校验参数之后没有BindingResult对象，将会抛出BindException。"],["body","\n"],["headingLink","手动验证"],["heading","手动验证"],["body","\n"],["body","用户手动调用对应API执行校验——Validation.buildDefault ValidatorFactory().getValidator().validate(xxx)"],["body","\n"],["body","    /**\n * 用户手动调用对应API执行校验\n * @param user\n * @return\n */\n@PostMapping(\"/test3\")\npublic Object test3(@RequestBody User user) {\n\t// 参数校验\n\tvalidate(user);\n\t\n\treturn \"操作成功！\";\n}\n \nprivate void validate(@Valid User user) {\n\tSet<ConstraintViolation<@Valid User>> validateSet = Validation.buildDefaultValidatorFactory()\n\t\t\t.getValidator()\n\t\t\t.validate(user, new Class[0]);\n\t\tif (!CollectionUtils.isEmpty(validateSet)) {\n\t\t\tString messages = validateSet.stream()\n\t\t\t\t.map(ConstraintViolation::getMessage)\n\t\t\t\t.reduce((m1, m2) -> m1 + \"；\" + m2)\n\t\t\t\t.orElse(\"参数输入有误！\");\n\t\t\tthrow new IllegalArgumentException(messages);\n\t\t\t\n\t\t}\n}\n"],["body","\n"],["body","获取Validtor对象"],["body","\n"],["body","import org.hibernate.validator.HibernateValidator;\nimport org.springframework.util.ClassUtils;\nimport org.springframework.validation.BindException;\nimport org.springframework.validation.DataBinder;\nimport org.springframework.validation.SmartValidator;\nimport org.springframework.validation.beanvalidation.SpringValidatorAdapter;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.ConstraintViolationException;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\nimport java.util.Set;\n\n/**\n * hibernate-validator校验工具类\n */\npublic class ValidatorUtils {\n    private static Validator validator;\n    private static SmartValidator validatorAdapter;\n\n    static {\n        // 快速返回模式\n        validator = Validation.byProvider(HibernateValidator.class)\n            .configure()\n            .failFast(true)\n            .buildValidatorFactory()\n            .getValidator();\n    }\n\n    public static Validator getValidator() {\n        return validator;\n    }\n\n    private static SmartValidator getValidatorAdapter(Validator validator) {\n        if (validatorAdapter == null) {\n            validatorAdapter = new SpringValidatorAdapter(validator);\n        }\n        return validatorAdapter;\n    }\n\n    /**\n     * 校验参数，用于普通参数校验 [未测试！]\n     *\n     * @param\n     */\n    public static void validateParams(Object... params) {\n        Set<ConstraintViolation<Object>> constraintViolationSet = validator.validate(params);\n\n        if (!constraintViolationSet.isEmpty()) {\n            throw new ConstraintViolationException(constraintViolationSet);\n        }\n    }\n\n    /**\n     * 校验对象\n     *\n     * @param object\n     * @param groups\n     * @param <T>\n     */\n    public static <T> void validate(T object, Class<?>... groups) {\n        Set<ConstraintViolation<T>> constraintViolationSet = validator.validate(object, groups);\n\n        if (!constraintViolationSet.isEmpty()) {\n            throw new ConstraintViolationException(constraintViolationSet);\n        }\n    }\n\n    /**\n     * 校验对象\n     * 使用与 Spring 集成的校验方式。\n     * \n     * @param object 待校验对象\n     * @param groups 待校验的组\n     * @throws BindException\n     */\n    public static <T> void validateBySpring(T object, Class<?>... groups)\n        throws BindException {\n        DataBinder dataBinder = getBinder(object);\n        dataBinder.validate((Object[]) groups);\n\n        if (dataBinder.getBindingResult().hasErrors()) {\n            throw new BindException(dataBinder.getBindingResult());\n        }\n    }\n\n    private static <T> DataBinder getBinder(T object) {\n        DataBinder dataBinder = new DataBinder(object, ClassUtils.getShortName(object.getClass()));\n        dataBinder.setValidator(getValidatorAdapter(validator));\n        return dataBinder;\n    }\n\n}\n"],["body","\n"],["h1","快速失败"],["body","\n"],["body","校验完后不继续校验"],["body","\n"],["body","@Configuration\npublic class WebConfig {\n    @Bean\n    public Validator validator() {\n        ValidatorFactory validatorFactory = Validation.byProvider(HibernateValidator.class)\n                .configure()\n                //failFast的意思只要出现校验失败的情况，就立即结束校验，不再进行后续的校验。\n                .failFast(true)\n                .buildValidatorFactory();\n\n        return validatorFactory.getValidator();\n    }\n\n    @Bean\n    public MethodValidationPostProcessor methodValidationPostProcessor() {\n        MethodValidationPostProcessor methodValidationPostProcessor = new MethodValidationPostProcessor();\n        methodValidationPostProcessor.setValidator(validator());\n        return methodValidationPostProcessor;\n    }\n}\n"],["body","\n"],["h1","绑定多个校验对象"],["body","\n"],["body","@PostMapping(\"save\")\npublic void v1(@RequestBody @Valid AppUser appUser,BindingResult result,@RequestBody @Valid AppUser appUser2,BindingResult result2){\n      if(result.hasErrors()){\n            for (ObjectError error : result.getAllErrors()) {\n                System.out.println(error.getDefaultMessage());\n            }\n        }\n}\n"],["body","\n"],["h1","message属性国际化"],["body","\n"],["headingLink","指定properties"],["heading","指定properties"],["body","\n"],["body","message中填写国际化消息的code，在抛出异常时根据code处理一下就好了。"],["body","\n"],["body","    @GetMapping(\"/room\")\n    @Validated\n    public String validator(@NotNull(message = \"demo.message.notnull\") String name) {\n        if (result.hasErrors()) {\n            return result.getFieldError().getDefaultMessage();\n        }\n        return \"ok\";\n    }\n"],["body","\n"],["body","idea乱码 勾选 transparent native-to-ascii conversion"],["body","\n"],["body","在/resources的根目录下添加上ValidationMessages.properties文件"],["body","\n"],["body","​\t国际化配置文件必须放在classpath的根目录下，即src/java/resources的根目录下。\n国际化配置文件必须以ValidationMessages开头，比如ValidationMessages.properties 或者 ValidationMessages_en.properties。"],["body","\n"],["headingLink","自定义properties文件"],["heading","自定义properties文件"],["body","\n"],["body","重写LocalValidatorFactoryBean"],["body","\n"],["body","@Configuration\npublic class ValidatorConfiguration extends WebMvcConfigurationSupport {\n    @Autowired\n    private MessageSource messageSource;\n\n    @Override\n    public Validator getValidator() {\n        return validator();\n    }\n\n    @Bean\n    public Validator validator() {\n        LocalValidatorFactoryBean validator = new LocalValidatorFactoryBean();\n        validator.setValidationMessageSource(messageSource);\n        return validator;\n    }\n}\n"],["body","\n"],["h1","自定义validtor"],["body","\n"],["headingLink","bean-validation-注解规范"],["heading","Bean Validation 注解规范"],["body","\n"],["body","Bean Validation API 规范要求任何约束注解定义以下要求："],["body","\n"],["body","一个 message 属性：在违反约束的情况下返回一个默认 key 以用于创建错误消息"],["body","\n"],["body","一个 groups 属性：允许指定此约束所属的验证分组。必须默认是一个空 Class 数组"],["body","\n"],["body","一个 payload 属性：能被 Bean Validation API 客户端使用，以自定义一个注解的 payload 对象。API 本身不使用此属性。自定义 payload 可以是用来定义严重程度。如下："],["body","\n"],["body","public class Severity{\n  public interface Info extends Payload{}\n  public interface Error extends Payload{}\n}\npublic class ContactDetails{\n  @NotNull(message=\"名字必填\", payload=Severity.Error.class)\n  private String name;\n  \n  @NotNull(message=\"手机号没有指定，但不是必填项\", payload=Severity.Info.class)\n  private String phoneNumber;\n}\n"],["body","\n"],["body","然后客户端在 ContactDetails 实例验证之后，可以通过 ConstraintViolation.getConstraintDescriptor().getPayload() 获取 severity ，然后根据 severity 调整其行为。"],["body","\n"],["body","此外，约束注解上还修饰了一些元注解："],["body","\n\n"],["body","@Target：指定此注解支持的元素类型，比如：FIELD（属性）、METHOD（方法）等"],["body","\n"],["body","@Rentention(RUNTIME)：指定此类型的注解将在运行时通过反射方式可用"],["body","\n"],["body","@Constraint()：标记注解的类型为约束，指定注解所使用的验证器（写验证逻辑的类），如果约束可以用在多种数据类型中，则每种数据类型对应一个验证器。"],["body","\n"],["body","@Documented：用此注解会被包含在使用方的 JavaDoc 中"],["body","\n"],["body","@Repeatable(List.class)：指示注解可以在相同的位置重复多次，通常具有不同的配置。List 包含注解类型。"],["body","\n\n"],["headingLink","验证器"],["heading","验证器"],["body","\n"],["headingLink","示例"],["heading","示例"],["body","\n"],["body","public class CheckCaseValidator implements ConstraintValidator<CheckCase, String> {\n    private CaseMode caseMode;\n    @Override\n    public void initialize(CheckCase constraintAnnotation) {\n        this.caseMode = constraintAnnotation.value();\n    }\n    @Override\n    public boolean isValid(String object, ConstraintValidatorContext constraintContext) {\n        if ( object == null ) {\n            return true;\n        }\n        if ( caseMode == CaseMode.UPPER ) {\n            return object.equals( object.toUpperCase() );\n        }else {\n            return object.equals( object.toLowerCase() );\n        }\n    }\n}\n"],["body","\n"],["headingLink","constraintvalidator-指定了两个泛型类型"],["heading","ConstraintValidator 指定了两个泛型类型："],["body","\n\n"],["body","第一个是指定需要验证的注解类"],["body","\n"],["body","第二个是指定要验证的数据类型，当注解支持多种类型时，就要写多个实现类，并分别指定对应的类型"],["body","\n\n"],["headingLink","需要实现两个方法"],["heading","需要实现两个方法："],["body","\n\n"],["body","initialize() 让你可以获取到使用注解时所指定的参数（可以将它们保存起来以供下一步使用）"],["body","\n"],["body","isValid() 包含实际的校验逻辑。注意：Bean Validation 规范建议将 null 值视为有效值。如果一个元素 null 不是一个有效值，则应该显示的用 @NotNull 标注。"],["body","\n\n"],["headingLink","isvalid-方法中的-constraintvalidatorcontext-对象参数"],["heading","isValid() 方法中的 ConstraintValidatorContext 对象参数："],["body","\n"],["body","当应用指定约束验证器时，提供上下文数据和操作。"],["body","\n"],["body","此对象至少有一个 ConstraintViolation"],["body","\n"],["body","示例"],["body","\n"],["body","官方示例展示了禁用默认消息并自定义了一个错误消息提示。"],["body","\n"],["body","@Override\npublic boolean isValid(String object, ConstraintValidatorContext constraintContext) {\n    if ( object == null ) {\n        return true;\n    }\n\n    boolean isValid;\n    if ( caseMode == CaseMode.UPPER ) {\n        isValid = object.equals( object.toUpperCase() );\n    }\n    else {\n        isValid = object.equals( object.toLowerCase() );\n    }\n\n    if ( !isValid ) {\n    // 禁用默认 ConstraintViolation，并自定义一个\n        constraintContext.disableDefaultConstraintViolation();\n        constraintContext.buildConstraintViolationWithTemplate(\n                \"{org.hibernate.validator.referenceguide.chapter06.\" +\n                \"constraintvalidatorcontext.CheckCase.message}\"\n        )\n        .addConstraintViolation();\n    }\n\n    return isValid;\n}\n"],["body","\n"],["headingLink","传递-payload-参数给验证器"],["heading","传递 payload 参数给验证器"],["body","\n"],["body","官方示例"],["body","\n"],["body","HibernateValidatorFactory hibernateValidatorFactory = Validation.byDefaultProvider()\n        .configure()\n        .buildValidatorFactory()\n        .unwrap( HibernateValidatorFactory.class );\n\nValidator validator = hibernateValidatorFactory.usingContext()\n        .constraintValidatorPayload( \"US\" )\n        .getValidator();\n\n// [...] US specific validation checks\nvalidator = hibernateValidatorFactory.usingContext()\n        .constraintValidatorPayload( \"FR\" )\n        .getValidator();\n\n\npublic class ZipCodeValidator implements ConstraintValidator<ZipCode, String> {\n\n    public String countryCode;\n\n    @Override\n    public boolean isValid(String object, ConstraintValidatorContext constraintContext) {\n        if ( object == null ) {\n            return true;\n        }\n\n        boolean isValid = false;\n\n        String countryCode = constraintContext\n                .unwrap( HibernateConstraintValidatorContext.class )\n                .getConstraintValidatorPayload( String.class );\n\n        if ( \"US\".equals( countryCode ) ) {\n            // checks specific to the United States\n        }\n        else if ( \"FR\".equals( countryCode ) ) {\n            // checks specific to France\n        }\n        else {\n            // ...\n        }\n\n        return isValid;\n    }\n}\n"],["body","\n"],["headingLink","message"],["heading","message"],["body","\n"],["body","当违反约束时，应该用到的消息\n需要定义一个 ValidationMessages.properties文件，并记录以下内容："],["body","\n"],["body","# org.hibernate.validator.referenceguide.chapter06.CheckCase 是注解 CheckCase 的全类名\norg.hibernate.validator.referenceguide.chapter06.CheckCase.message=Case mode must be {value}.\n"],["body","\n"],["headingLink","类级别的约束"],["heading","类级别的约束"],["body","\n"],["body","public class ValidPassengerCountValidator\n        implements ConstraintValidator<ValidPassengerCount, Car> {\n\n    @Override\n    public void initialize(ValidPassengerCount constraintAnnotation) {}\n\n    @Override\n    public boolean isValid(Car car, ConstraintValidatorContext constraintValidatorContext) {\n        if ( car == null ) {\n            return true;\n        }\n        // 用来验证两个属性之间必须满足一种关系\n        // 验证乘客数量不能大于座椅数量\n        boolean isValid = car.getPassengers().size() <= car.getSeatCount();\n\n        if ( !isValid ) {\n            constraintValidatorContext.disableDefaultConstraintViolation();\n            constraintValidatorContext\n                    .buildConstraintViolationWithTemplate( \"{my.custom.template}\" )\n                    .addPropertyNode( \"passengers\" ).addConstraintViolation();\n        }\n\n        return isValid;\n    }\n}\n"],["body","\n"],["headingLink","组合约束"],["heading","组合约束"],["body","\n"],["headingLink","示例-1"],["heading","示例"],["body","\n"],["body","@NotNull\n@Size(min = 2, max = 14)\n@CheckCase(CaseMode.UPPER)\n@Target({ METHOD, FIELD, ANNOTATION_TYPE, TYPE_USE })\n@Retention(RUNTIME)\n@Constraint(validatedBy = { })\n@Documented\npublic @interface ValidLicensePlate {\n    String message() default \"{org.hibernate.validator.referenceguide.chapter06.\" +\n            \"constraintcomposition.ValidLicensePlate.message}\";\n\n    Class<?>[] groups() default { };\n\n    Class<? extends Payload>[] payload() default { };\n}\n"],["body","\n"],["headingLink","遇到违反一个约束即返回"],["heading","遇到违反一个约束即返回"],["body","\n"],["body","一个注解拥有多个注解的功能，而且此组合注解通常不需要再指定验证器。此注解验证之后会得到违反所有约束的集合，如果想违反其中一个约束之后就有对应的违约信息，可以使用 @ReportAsSingleViolation"],["body","\n"],["body","//...\n@ReportAsSingleViolation\npublic @interface ValidLicensePlate {\n\n    String message() default \"{org.hibernate.validator.referenceguide.chapter06.\" +\n            \"constraintcomposition.reportassingle.ValidLicensePlate.message}\";\n\n    Class<?>[] groups() default { };\n\n    Class<? extends Payload>[] payload() default { };\n}\n"],["body","\n"],["h1","示例"],["body","\n"],["headingLink","自定义简单约束"],["heading","自定义简单约束"],["body","\n"],["body","三个步骤："],["body","\n\n"],["body","创建一个约束注解"],["body","\n"],["body","实现一个验证器"],["body","\n"],["body","定义一个默认的错误消息"],["body","\n\n\n"],["body","\n"],["body","定义注解"],["body","\n"],["body","\n@Target( { ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER })\n@Constraint(validatedBy = { NotNullValidator.class })\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface NotNull {\n\n    String field() default \"\";\n\n    String message() default \"{field} can not be null\";\n\n    Class<?>[] groups() default {};\n\n    Class<? extends Payload>[] payload() default {};\n}\n\n"],["body","\n"],["body","\n"],["body","\n"],["body","定义注解处理类"],["body","\n"],["body","package com.weisanju.validtortest.common;\n\nimport javax.validation.ConstraintValidator;\nimport javax.validation.ConstraintValidatorContext;\n\npublic class NotNullValidator implements ConstraintValidator<NotNull, Object> {\n\n    @Override\n    public void initialize(NotNull annotation) {\n        System.out.println(annotation);\n    }\n\n    @Override\n    public boolean isValid(Object str, ConstraintValidatorContext constraintValidatorContext) {\n        System.out.println(str);\n        return str != null;\n    }\n\n}\n\n"],["body","\n"],["body","\n\n"],["h1","spring validation实现关键代码"],["body","\n"],["headingLink","requestbody"],["heading","@RequestBody"],["body","\n"],["body","public Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n    Object arg = this.readWithMessageConverters(webRequest, parameter, parameter.getGenericParameterType());\n    String name = Conventions.getVariableNameForParameter(parameter);\n    WebDataBinder binder = binderFactory.createBinder(webRequest, arg, name);\n    if (arg != null) {\n        this.validateIfApplicable(binder, parameter);\n        if (binder.getBindingResult().hasErrors() && this.isBindExceptionRequired(binder, parameter)) {\n            throw new MethodArgumentNotValidException(parameter, binder.getBindingResult());\n        }\n    }\n\n    mavContainer.addAttribute(BindingResult.MODEL_KEY_PREFIX + name, binder.getBindingResult());\n    return arg;\n}\n"],["body","\n"],["headingLink","modelattibute"],["heading","@ModelAttibute"],["body","\n"],["body","public final Object resolveArgument(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory) throws Exception {\n    String name = ModelFactory.getNameForParameter(parameter);\n    Object attribute = mavContainer.containsAttribute(name) ? mavContainer.getModel().get(name) : this.createAttribute(name, parameter, binderFactory, webRequest);\n    if (!mavContainer.isBindingDisabled(name)) {\n        ModelAttribute ann = (ModelAttribute)parameter.getParameterAnnotation(ModelAttribute.class);\n        if (ann != null && !ann.binding()) {\n            mavContainer.setBindingDisabled(name);\n        }\n    }\n\n    WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);\n    if (binder.getTarget() != null) {\n        if (!mavContainer.isBindingDisabled(name)) {\n            this.bindRequestParameters(binder, webRequest);\n        }\n\n        this.validateIfApplicable(binder, parameter);\n        if (binder.getBindingResult().hasErrors() && this.isBindExceptionRequired(binder, parameter)) {\n            throw new BindException(binder.getBindingResult());\n        }\n    }\n\n    Map<String, Object> bindingResultModel = binder.getBindingResult().getModel();\n    mavContainer.removeAttributes(bindingResultModel);\n    mavContainer.addAllAttributes(bindingResultModel);\n    return binder.convertIfNecessary(binder.getTarget(), parameter.getParameterType(), parameter);\n}\n"],["body","\n"],["headingLink","为什么-bindingresult-接收不到简单对象的校验信息"],["heading","为什么 BindingResult 接收不到简单对象的校验信息？"],["body","\n"],["body","注入实体对象时使用ModelAttributeMethodProcessor而注入 String 对象使用AbstractNamedValueMethodArgumentResolver"],["body","\n"],["body","而正是这个差异导致了BindingResult无法接受到简单对象(简单的入参参数类型)的校验信息。"],["body","\n"],["body","public final Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n            NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {\n            \n        // bean 参数绑定和校验\n        WebDataBinder binder = binderFactory.createBinder(webRequest, attribute, name);\n        \n        // 参数校验\n        validateIfApplicable(binder, parameter);\n        // 校验结果包含错误，并且该对象后不存在 BindingResult 对象，就抛出异常\n        if (binder.getBindingResult().hasErrors() && isBindExceptionRequired(binder, parameter)) {\n            throw new BindException(binder.getBindingResult());\n        }\n\n        // 在对象后注入 BindingResult 对象\n        Map<String, Object> bindingResultModel = bindingResult.getModel();\n        mavContainer.removeAttributes(bindingResultModel);\n        mavContainer.addAllAttributes(bindingResultModel);\n    }\n"],["body","\n"],["body","    // HandlerMethodArgumentResolverComposite.class\n    public Object resolveArgument(MethodParameter parameter, @Nullable ModelAndViewContainer mavContainer,\n            NativeWebRequest webRequest, @Nullable WebDataBinderFactory binderFactory) throws Exception {\n        // 获取 parameter 参数的解析器\n        HandlerMethodArgumentResolver resolver = getArgumentResolver(parameter);\n        // 调用解析器获取参数\n        return resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);\n    }\n    \n    // 获取 parameter 参数的解析器\n    private HandlerMethodArgumentResolver getArgumentResolver(MethodParameter parameter) {\n        // 从缓存中获取参数对应的解析器\n        HandlerMethodArgumentResolver result = this.argumentResolverCache.get(parameter);\n        for (HandlerMethodArgumentResolver methodArgumentResolver : this.argumentResolvers) {\n            // 解析器是否支持该参数类型\n            if (methodArgumentResolver.supportsParameter(parameter)) {\n                result = methodArgumentResolver;\n                this.argumentResolverCache.put(parameter, result);\n                break;\n            }\n        }\n        return result;\n    }\n"],["body","\n"],["body","简单参数类型检验"],["body","\n"],["body","// MethodValidationInterceptor.class\n\npublic Object invoke(MethodInvocation invocation) throws Throwable {\n        ExecutableValidator execVal = this.validator.forExecutables();\n        // 校验参数\n        try {\n            result = execVal.validateParameters(\n                    invocation.getThis(), methodToValidate, invocation.getArguments(), groups);\n        }\n        catch (IllegalArgumentException ex) {\n            // 解决参数错误异常、再次校验\n            methodToValidate = BridgeMethodResolver.findBridgedMethod(\n                    ClassUtils.getMostSpecificMethod(invocation.getMethod(), invocation.getThis().getClass()));\n            result = execVal.validateParameters(\n                    invocation.getThis(), methodToValidate, invocation.getArguments(), groups);\n        }\n        if (!result.isEmpty()) {\n            throw new ConstraintViolationException(result);\n        }\n        \n        // 执行结果\n        Object returnValue = invocation.proceed();\n        \n        // 校验返回值\n        result = execVal.validateReturnValue(invocation.getThis(), methodToValidate, returnValue, groups);\n        if (!result.isEmpty()) {\n            throw new ConstraintViolationException(result);\n        }\n\n        return returnValue;\n    }\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","08.jvm_jvm问题诊断与性能分析/java远程调试.html"],["title","java远程调试.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n"],["body","这篇文章将研究如何处理和调试那些只发生在生产环境（或其他远程环境）而本地开发环境可能没办法重现的“问题”。"],["body","\n"],["h1","Tomcat启用远程调试"],["body","\n"],["body","\n"],["body","传递特定的启动参数给 JVM，让它启用远程调试"],["body","\n"],["body","\n"],["body","JVM 激活远程调试的启动参数有 JPDA_OPTS, CATALINA_OPTS 和 JAVA_OPTS"],["body","\n"],["body","JAVA_OPTS 是通常不建议使用的， 因为基于 JAVA_OPTS 的参数设定会暴露给所有的 JVM 应用， 而 CATALINA_OPTS 定义的设定值限制在Tomcat 内"],["body","\n"],["headingLink","使用jpda_opts"],["heading","使用JPDA_OPTS"],["body","\n"],["headingLink","设置tomcat"],["heading","设置Tomcat"],["body","\n"],["body","在 CATALINA_HOME/bin 目录下创建可执行脚本文件 setenv.sh ( Windows 创建 setenv.bat ），加入内容："],["body","\n"],["body","export JPDA_OPTS=\"-agentlib:jdwp=transport=dt_socket,address=1043,server=y,suspend=n\"\nset JPDA_OPTS=\"-agentlib:jdwp=transport=dt_socket,address=1043,server=y,suspend=n\"\n"],["body","\n"],["body","这些参数要做的事情就是启用远程调试和配置有效的选项："],["body","\n\n"],["body","指定运行的被调试应用和调试者之间的通信协议，(ie: transport=dt_socket)"],["body","\n"],["body","远程被调试应用开通的端口，(ie: address=1043)， 可定义其他端口，比如9999"],["body","\n"],["body","server=y 表示这个 JVM 即将被调试"],["body","\n"],["body","suspend=n 用来告知 JVM 立即执行，不要等待未来将要附着上/连上（attached）的调试者。如果设成 y, 则应用将暂停不运行，直到有调试者连接上"],["body","\n\n"],["body","suspend=y的一个比较适用的场景是，当debug一个会阻止应用成功启动的问题时， 通过suspend=y可以确保调试者连上来之后再启动应用，否则应用已经启动报错了再调试也没意义了。"],["body","\n"],["headingLink","启动tomcat"],["heading","启动Tomcat"],["body","\n"],["body","$CATALINA_HOME/bin/catalina.sh jpda start\n"],["body","\n"],["headingLink","使用-java_opts--catalina_opts"],["heading","使用 JAVA_OPTS / CATALINA_OPTS"],["body","\n"],["body","setenv.sh 中写入"],["body","\n"],["body","set CATALINA_OPTS=\"-agentlib:jdwp=transport=dt_socket,address=1043,server=y,suspend=n\"\nexport CATALINA_OPTS=\"-agentlib:jdwp=transport=dt_socket,address=1043,server=y,suspend=n\"\n"],["body","\n"],["headingLink","启动方式"],["heading","启动方式"],["body","\n"],["body","./startup.sh\n或者\n./catalina.sh start\n"],["body","\n"],["headingLink","使用jpda启动"],["heading","使用JPDA启动"],["body","\n"],["body","是用 JPDA 切换， 用如下的启动命令将使用默认值自动启用远程调试，"],["body","\n"],["body","catalina jpda start\n"],["body","\n"],["body","该命令默认使用的设置是"],["body","\n"],["body","-agentlib:jdwp=transport=dt_socket,address=8000,server=y,suspend=n\n"],["body","\n"],["body","修改 Tomcat 需要的这些环境变量"],["body","\n"],["body","//JPDA_TRANSPORT: 指定 jpda 传输协议\n//JPDA_ADDRESS: 指定远程调试端口\n//JPDA_SUSPEND: 指定 jvm 启动暂缓\n\nexport JPDA_ADDRESS=0.0.0.0:8080\n"],["body","\n"],["h1","配置Intellj Idea"],["body","\n"],["headingLink","remote-tomcat-配置"],["heading","Remote Tomcat 配置"],["body","\n"],["body","//步骤1\nRun ➝ Edit Configurations ➝ **+ **按钮 ➝ Tomcat Server ➝ Remote\n//步骤2 填写 主机与IP\nremote connection settings\n//步骤3 Startup/Connection-> debug\nTransport Socket 8000\n"],["body","\n"],["headingLink","使用-remote-配置"],["heading","使用 Remote 配置"],["body","\n"],["body","第一个方法有个缺陷，你打开的工程源码必须是编译通过的工程，否则会启动会报错；\n而介绍的这第二种方法可以在你的工程目录乱七八糟，不是一个完整的可以部署的工程，甚至是一个解压缩的 war/ jar 的情况下都可以调试。"],["body","\n"],["body","案例1"],["body","\n"],["body","我手里有一个可部署的war包，没有源码，在远程已经部署完毕。这时我想调试那个远程应用，怎么做呢？"],["body","\n"],["body","解压缩war包到一个文件夹，然后用Intellij Idea打开这个文件夹，如图的结构，编译的Class都在 WEB-INF/classes 目录下"],["body","\n"],["body","找到我要debug的那个class, 这里示例Handler.class, 通过Idea反编译出来的类代码，拷贝到一个新的文件Handler.java"],["body","\n"],["body","虽然如图可以看到各种的编译错误，但是完全不影响你启动，代码中加断点和调试哦。"],["body","\n"],["body","remote JVM Debug -> attach to remote JVM ->  socket -> host -> port -> moduleClassPath\n"],["body","\n"],["h1","远程JVM调试怎么工作的"],["body","\n"],["body","一切源于被称作 Agents 的东西。"],["body","\n"],["body","运行着各种编译过的 .class 文件的JVM， 有一种特性，可以允许外部的库（Java或C++写的libraries）在运行时注入到 JVM 中。这些外部的库就称作 Agents, 他们有能力修改运行中 .class 文件的内容。"],["body","\n"],["body","这些 Agents 拥有的这些 JVM 的功能权限， 是在 JVM 内运行的 Java Code 所无法获取的， 他们能用来做一些有趣的事情，比如修改运行中的源码， 性能分析等。 像 JRebel 工具就是用了这些功能达到魔术般的效果。"],["body","\n"],["body","传递一个 Agent Lib 给 JVM, 通过添加 agentlib:libname[=options] 格式的启动参数即可办到。像上面的远程调试我们用的就是 **-agentlib:jdwp=... **来引入 jdwp 这个 Agent 的。"],["body","\n"],["body","jdwp 是一个 JVM 特定的 JDWP（Java Debug Wire Protocol） 可选实现，用来定义调试者与运行JVM之间的通讯，它的是通过 JVM 本地库的 jdwp.so 或者 jdwp.dll 支持实现的。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","08.jvm_jvm问题诊断与性能分析/javaCPU占用高的问题.html"],["title","javaCPU占用高的问题.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","背景"],["body","\n"],["body","线上系统，Java进程 如果出现 CPU 高负载运行，一直降不下来，导致 无法响应其他任何请求，可以按以下流程排查"],["body","\n"],["h1","定位办法"],["body","\n"],["headingLink","采用top命令定位进程"],["heading","采用top命令定位进程"],["body","\n"],["body","top\n"],["body","\n"],["body","默认CPU使用率排序，找出Java进程"],["body","\n"],["headingLink","使用top--hp命令定位线程"],["heading","使用top -Hp命令定位线程"],["body","\n"],["body","打印线程"],["body","\n"],["body"," top -Hp <pid>\n"],["body","\n"],["body","查看该Java进程内所有线程的资源占用情况"],["body","\n"],["body","转换成TID"],["body","\n"],["body","printf “%x\\n” 命令（tid指线程的id号）将以上10进制的线程号转换为16进制：\n"],["body","\n"],["headingLink","采用jstack命令导出线程快照"],["heading","采用jstack命令导出线程快照"],["body","\n"],["body","jstack -l 29706 > ./jstack_result.txt \n"],["body","\n"],["headingLink","根据线程号定位具体代码"],["heading","根据线程号定位具体代码"],["body","\n"],["body","jstack  3054|grep -A10 bef\n"],["body","\n"],["headingLink","使用命令直接查找"],["heading","使用命令直接查找"],["body","\n"],["body","ps -mp 3054 -o THREAD,tid,time | sort -rn\n"],["body","\n"],["h1","日志文件内容分析"],["body","\n"],["headingLink","线程状态"],["heading","线程状态"],["body","\n"],["headingLink","deadlock"],["heading","Deadlock"],["body","\n"],["body","\n"],["body","死锁线程，一般指多个线程调用间，进入相互资源占用，导致一直等待无法释放的情况。"],["body","\n"],["body","\n"],["body","案例"],["body","\n"],["body","Found one Java-level deadlock:\n=============================\n\"Thread-0\":\n  waiting to lock monitor 0x00000000266c1cd8 (object 0x0000000715b5f120, a java.lang.Class),\n  which is held by \"main\"\n\"main\":\n  waiting to lock monitor 0x00000000266c0838 (object 0x0000000715b63ca0, a java.lang.Object),\n  which is held by \"Thread-0\"\n\n"],["body","\n"],["headingLink","runnable"],["heading","Runnable"],["body","\n"],["body","执行中"],["body","\n"],["headingLink","waiting-on-condition"],["heading","Waiting on condition"],["body","\n"],["body","\n"],["body","WAITING，等待资源"],["body","\n"],["body","\n"],["body","\"main\" #1 prio=5 os_prio=0 tid=0x0000000002ba3800 nid=0x2ad0 waiting on condition [0x0000000002a9f000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)\n        at TestMain.park(TestMain.java:70)\n        at TestMain.main(TestMain.java:6)\n"],["body","\n"],["body","睡眠"],["body","\n"],["body","\"main\" #1 prio=5 os_prio=0 tid=0x0000000002db3800 nid=0x5068 waiting on condition [0x0000000002c3f000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(Native Method)\n        at TestMain.sleep(TestMain.java:10)\n        at TestMain.main(TestMain.java:6)\n\n"],["body","\n"],["headingLink","waiting-on-monitor-entry"],["heading","Waiting on monitor entry"],["body","\n"],["body","\n"],["body","BLOCKED，等待获取监视器"],["body","\n"],["body","\n"],["body","\"Thread-0\" #14 prio=5 os_prio=0 tid=0x0000000029d6f800 nid=0x43a0 waiting for monitor entry [0x000000002a53f000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n        at TestMain.lambda$deadLock$0(TestMain.java:16)\n        - waiting to lock <0x0000000715b5f120> (a java.lang.Class for TestMain)\n        - locked <0x0000000715b63ca0> (a java.lang.Object)\n        at TestMain$$Lambda$1/1879492184.run(Unknown Source)\n        at java.lang.Thread.run(Thread.java:748)\n\n"],["body","\n"],["headingLink","objectwait-或-timed_waiting"],["heading","Object.wait() 或 TIMED_WAITING"],["body","\n"],["body","\n"],["body","WAITING，条件等待，也可以认为是一种等待资源"],["body","\n"],["body","\n"],["body","\"main\" #1 prio=5 os_prio=0 tid=0x00000000028a3800 nid=0x40d0 in Object.wait() [0x000000000272f000]\n   java.lang.Thread.State: WAITING (on object monitor)\n        at java.lang.Object.wait(Native Method)\n        - waiting on <0x0000000715ad86d0> (a java.lang.Class for TestMain)\n        at java.lang.Object.wait(Object.java:502)\n        at TestMain.waitOnConditional(TestMain.java:42)\n        - locked <0x0000000715ad86d0> (a java.lang.Class for TestMain)\n        at TestMain.main(TestMain.java:6)\n\n"],["body","\n"],["headingLink","suspended"],["heading","Suspended"],["body","\n"],["body","已过时，推荐使用 LockSupport.park"],["body","\n"],["headingLink","waitset与-entryset的区别"],["heading","waitSet,与 entrySet的区别"],["body","\n"],["body","\n"],["h1","通过 Jvisualvm可视化"],["body","\n"],["headingLink","配置jvisualvm"],["heading","配置JvisualVM"],["body","\n"],["body","[root@localhost management]# pwd\n/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.282.b08-1.el7_9.x86_64/jre/lib/management\n[root@localhost management]# ls -l\ntotal 28\n-rw-r--r--. 1 root root  3998 Jan 22 10:41 jmxremote.access\n-r--r--r--. 1 root root  2856 Jan 22 10:41 jmxremote.password.template\n-rw-r--r--. 1 root root 14630 Jan 22 10:41 management.properties\n-r--r--r--. 1 root root  3376 Jan 22 10:41 snmp.acl.template\n"],["body","\n"],["body","首先利用jmxremote.password.template 文件创建jmxremote.password文件，并且设置相应的读写权限。"],["body","\n"],["body","//默认两个角色 monitorRole 密码为 QED，controlRole的密码是 R&D\n\nmonitorRole  QED\n\ncontrolRole   R&D\n"],["body","\n"],["body","接着可以运行本地的  jvisualvm.exe 运行"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","08.jvm_jvm问题诊断与性能分析/MAT.html"],["title","MAT.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","mat是什么"],["heading","MAT是什么？"],["body","\n"],["body","​\tMAT(Memory Analyzer Tool)，一个基于Eclipse的内存分析工具，是一个快速、功能丰富的JAVA heap分析工具，它可以帮助我们查找内存泄漏和减少内存消耗。"],["body","\n"],["body","​\t使用内存分析工具从众多的对象中进行分析，快速的计算出在内存中对象的占用大小，看看是谁阻止了垃圾收集器的回收工作，并可以通过报表直观的查看到可能造成这种结果的对象。"],["body","\n"],["headingLink","如何使用"],["heading","如何使用"],["body","\n"],["body","使用的方法将dump文件导入然后进行分析。"],["body","\n"],["body","1、通过JMX的MBean生成当前的Heap信息，大小为一个3G（整个堆的大小）的hprof文件，如果没有启动JMX可以通过Java的JMAP命令来生成该文件。"],["body","\n"],["body","2、 要考虑的是如何打开这个DUMP的堆信息文件，显然一般的Window系统没有这么大的内存，必须借助高配置的Linux。当然我们可以借助X-Window把Linux上的图形导入到Window。我们考虑用下面几种工具打开该文件："],["body","\n"],["body","Visual VM、IBM HeapAnalyzer、JDK 自带的Hprof工具。"],["body","\n"],["body","使用这些工具时为了确保加载速度，建议设置最大内存为6G。使用后发现，这些工具都无法直观地观察到内存泄漏，Visual VM虽能观察到对象大小，但看不到调用堆栈；HeapAnalyzer虽然能看到调用堆栈，却无法正确打开一个3G的文件。可以使用MAT工具直接导入文件，生成图表信息和疑似有问题的JAVA类\n"],["body","\n"],["headingLink","mat内存分析工具具体使用"],["heading","MAT内存分析工具具体使用"],["body","\n"],["headingLink","初识mat"],["heading","初识MAT"],["body","\n\n"],["body","\n"],["body","单击左上角的“File”菜单下的“Accquire Heap Dump”选项后，会弹出当前Java应用程序列表，选择要分析的应用程序即可，如图所示。"],["body","\n"],["body","\n"],["body","\n"],["body","除了直接在MAT中导出正在运行的应用程序堆快照外，也可以通过“Open Heap Dump”来打开一个既存的堆快照文件。"],["body","\n"],["body","\n\n"],["body","右侧界面中，显示了堆快照文件的大小、类、实例和ClassLoader的总数。"],["body","\n"],["body","在右侧的饼图中，显示了当前堆快照中最大的对象。"],["body","\n"],["body","将鼠标悬停在饼图中，可以在左侧的Inspector界面中，查看该对象的相应信息。在饼图中单击某对象，可以对选中的对象进行更多的操作。"],["body","\n"],["body","线程查看"],["body","\n"],["body","另外一个实用的功能是，可以通过MAT查看系统中的Java线程，如图所示。"],["body","\n"],["body","当然，这里查看Java层面的应用线程，对于虚拟机的系统线程是无法显示的。"],["body","\n"],["body","通过线程的堆栈，还可以查看局部变量的信息。如上图所示，带有<local>标记的，就为当前帧栈的局部变量，这部分信息可能存在缺失。"],["body","\n"],["body","引用穿梭"],["body","\n"],["body","MAT的另外一个常用功能，是在各个对象的引用列表中穿梭查看。"],["body","\n"],["body","对于给定一个对象，通过MAT可以找到引用当前对象的对象，即入引用（Incomming References），"],["body","\n"],["body","以及当前对象引用的对象，即出引用（Outgoing References），如图7.11所示。"],["body","\n"],["headingLink","浅堆和深堆"],["heading","浅堆和深堆"],["body","\n"],["body","浅堆（Shallow Heap）和深堆（Retained Heap）是两个非常重要的概念，它们分别表示一个对象结构所占用的内存大小和一个对象被GC回收后，可以真实释放的内存大小。"],["body","\n"],["body","浅堆（Shallow Heap）是指一个对象所消耗的内存。在32位系统中，一个对象引用会占据4个字节，一个int类型会占据4个字节，long型变量会占据8个字节，每个对象头需要占用8个字节。"],["body","\n"],["body","根据堆快照格式不同，对象的大小可能会向8字节进行对齐。以String对象为例，如下图所示，显示了String对象的几个属性。"],["body","\n"],["body","String"],["body","\n\n"],["body","value:char[]"],["body","\n"],["body","offset:int"],["body","\n"],["body","count:int"],["body","\n"],["body","hash:int"],["body","\n\n"],["body","3个int值共占12字节，对象引用占用4字节，对象头8字节，合计24字节。"],["body","\n"],["body","浅堆的大小只与对象的结构有关，与对象的实际内容无关。也就是说，无论字符串的长度有多少，内容是什么，浅堆的大小始终是24字节。"],["body","\n"],["body","深堆（Retained Heap）的概念略微复杂。要理解深堆，首先需要了解保留集（Retained Set）。"],["body","\n"],["body","对象A的保留集指当对象A被垃圾回收后，可以被释放的所有的对象集合（包括对象A本身），即对象A的保留集可以被认为是只能通过对象A被直接或间接访问到的所有对象的集合。"],["body","\n"],["body","通俗地说，就是指仅被对象A所持有的对象的集合。"],["body","\n"],["body","深堆是指对象的保留集中所有的对象的浅堆大小之和。"],["body","\n"],["body","\n"],["body","注意：浅堆指对象本身占用的内存，不包括其内部引用对象的大小。一个对象的深堆指只能通过该对象访问到的（直接或间接）所有对象的浅堆之和，即对象被回收后，可以释放的真实空间。"],["body","\n"],["body","\n"],["body","另外一个常用的概念是对象的实际大小。"],["body","\n"],["body","这里，对象的实际大小定义为一个对象所能触及的所有对象的浅堆大小之和，也就是通常意义上我们说的对象大小。"],["body","\n"],["body","与深堆相比，似乎这个在日常开发中更为直观和被人接受，但实际上，这个概念和垃圾回收无关。"],["body","\n"],["headingLink","支配树dominator-tree"],["heading","支配树（Dominator Tree）"],["body","\n"],["body","MAT提供了一个称为支配树（Dominator Tree）的对象图。"],["body","\n"],["body","支配树体现了对象实例间的支配关系。在对象引用图中，所有指向对象B的路径都经过对象A，则认为对象A支配对象B。"],["body","\n"],["body","可以理解为：B只被A引用"],["body","\n"],["body","如果对象A是离对象B最近的一个支配对象，则认为对象A为对象B的直接支配者。"],["body","\n"],["body","支配树是基于对象间的引用图所建立的，它有以下基本性质："],["body","\n\n"],["body","对象A的子树（所有被对象A支配的对象集合）表示对象A的保留集（retained set），即深堆。"],["body","\n"],["body","如果对象A支配对象B，那么对象A的直接支配者也支配对象B。"],["body","\n"],["body","支配树的边与对象引用图的边不直接对应。"],["body","\n\n"],["headingLink","垃圾回收根gc-root"],["heading","垃圾回收根（GC-ROOT）"],["body","\n"],["body","在Java系统中，作为垃圾回收的根节点可能是以下对象之一："],["body","\n\n"],["body","系统类：被 bootstrap/system ClassLoader加载的类。如在 rt.jar包中的所有类。"],["body","\n"],["body","JNI局部变量：本地代码中的局部变量。如用户自定义的JNI代码或者JVM内部代码。"],["body","\n"],["body","JNI全局变量：本地代码中的全局变量。"],["body","\n"],["body","线程：开始、并且没有停止的线程。"],["body","\n"],["body","正在使用的锁：作为锁的对象。比如，调用了 wait() 或者 notify() 方法的对象。或者调用了 synchronized(Object)操作的对象。"],["body","\n"],["body","Java局部变量：如函数的输入参数以及方法中的局部变量。"],["body","\n"],["body","本地栈：本地代码中的输入输出参数。比如用户自定义的JNI代码或者JVM内部代码。"],["body","\n"],["body","Finalizer：在等待队列中将要被执行析构函数的对象。"],["body","\n"],["body","Unfinalized：拥有析构函数，但是没有被析构，且不在析构队列中的对象。"],["body","\n"],["body","不可达对象：从任何一个根对象，都无法达到的对象。但为了能够在MAT中分析，被MAT标志位根。"],["body","\n"],["body","未知对象：未知的根类型。用于处理一些特殊的堆格式。"],["body","\n\n"],["body","通过MAT，可以列出所有的根对象"],["body","\n"],["headingLink","内存泄漏检测"],["heading","内存泄漏检测"],["body","\n"],["body","MAT 提供了自动检测内存泄漏，以及统计堆快照内对象分布情况的工具"],["body","\n"],["headingLink","最大对象报告"],["heading","最大对象报告"],["body","\n"],["body","系统中占有内存最大的几个对象，往往是解决系统性能问题的关键所在。如果应用程序发生内存泄漏，那么泄漏的对象通常会在堆快照中所占据很大的比重。因此，查看和分析堆快照中最大的对象，具有较高的价值。"],["body","\n"],["body","在MAT中，可以自动查找并显示消耗内存最多的几个对象，"],["body","\n"],["headingLink","查找支配者"],["heading","查找支配者"],["body","\n"],["body","通过MAT，开发人员还可以很方便地查找某一个对象或者类的支配者。"],["body","\n"],["body","在参数对话框中，务必正确填写 -skip 参数。查询结果会忽略所有定义在 -skip 参数中的类和实例。"],["body","\n"],["body","输出结果是不满足 -skip 所指定正则表达式的、所有选中对象或类的直接的支配者。"],["body","\n"],["headingLink","集合使用情况分析"],["heading","集合使用情况分析"],["body","\n"],["body","使用这些工具，可以查看数组、集合的填充率；可以观察集合内的数据；也可以分析哈希表的冲突率。"],["body","\n"],["headingLink","mat对oql的支持"],["heading","MAT对OQL的支持"],["body","\n"],["body","MAT的OQL语法与Visual VM支持的OQL有着很大不同。"],["body","\n"],["body","MAT支持一种类似于SQL的查询语言OQL（Object Query Language）。"],["body","\n"],["body","OQL使用类SQL语法，可以在堆中进行对象的查找和筛选。"],["body","\n"],["body","本节将主要介绍OQL的基本使用方法，帮助读者尽快掌握这种堆文件的查看方式。"],["body","\n"],["body","Select子句"],["body","\n"],["body","在MAT中，Select子句的格式与SQL基本一致，用于指定要显示的列。Select子句中可以使用“*”，"],["body","\n"],["body","查看结果对象的引用实例（相当于outgoing references）。"],["body","\n"],["body","select * from java.util.ArrayList A\n"],["body","\n"],["body","OQL还可以指定对象的属性进行输出，下例输出所有Vector对象的内部数组，输出结果如图7.31所示。"],["body","\n"],["body","使用“OBJECTS”关键字，可以将返回结果集中的项以对象的形式显示。"],["body","\n"],["body","SELECT OBJECTS v.elementData FROM java.util.Vector v \n"],["body","\n"],["body","在Select子句中，使用“AS RETAINED SET”关键字可以得到所得对象的保留集。"],["body","\n"],["body","下例得到geym.zbase.ch7.heap.Student对象的保留集。"],["body","\n"],["body","SELECT AS RETAINED SET * FROM geym.zbase.ch7.heap.Student \n"],["body","\n"],["body","“DISTINCT”关键字用于在结果集中去除重复对象。"],["body","\n"],["body","下例的输出结果中只有一条“class java.lang.String”记录。如果没有“DISTINCT”，那么查询将为每个String实例输出其对应的Class信息。"],["body","\n"],["body","SELECT DISTINCT OBJECTS classof(s) FROM java.lang.String s \n"],["body","\n"],["headingLink","from子句"],["heading","From子句"],["body","\n"],["body","From子句用于指定查询范围，它可以指定类名、正则表达式或者对象地址。"],["body","\n"],["body","SELECT * FROM java.lang.String s \n"],["body","\n"],["body","下例使用正则表达式，限定搜索范围，输出所有java.lang包下所有类的实例，如图所示。"],["body","\n"],["body","SELECT * FROM \"java\\.lang\\..*\" \n"],["body","\n"],["body","也可以直接使用类的地址进行搜索。使用类的地址的好处是可以区分被不同ClassLoader加载的同一种类型。下例中“0x37a014d8”为类的地址。"],["body","\n"],["body","select * from 0x37a014d8 \n"],["body","\n"],["body","有多种方法可以获得类的地址，在MAT中，一种最为简单的方法如图所示。"],["body","\n"],["body","INSTANCEOF"],["body","\n"],["body","在From子句中，还可以使用“INSTANCEOF”关键字，返回指定类的所有子类实例。"],["body","\n"],["body","下例的查询返回了当前堆快照中所有的抽象集合实例，包括java.util.Vector、java.util.ArrayList和java.util.HashSet等。"],["body","\n"],["body","SELECT * FROM INSTANCEOF java.util.AbstractCollection \n"],["body","\n"],["body","OBJECTS"],["body","\n"],["body","在From子句中，还可以使用“OBJECTS”关键字。使用“OBJECTS”关键字后，那么原本应该返回类的实例的查询，将返回类的信息。"],["body","\n"],["body","SELECT * FROM OBJECTS java.lang.String \n"],["body","\n"],["body","以上查询的返回结果如图所示。它仅返回一条记录，表示java.lang.String的类的信息。"],["body","\n"],["body","如果不使用“OBJECTS”关键字，这个查询将返回所有的java.lang.String实例。"],["body","\n"],["body","“OBJECTS”关键字也支持与正则表达式一起使用。下面的查询，返回了所有满足给定正则表达式的所有类，其结果如图所示。"],["body","\n"],["body","SELECT * FROM OBJECTS \"cn\\.zyzpp\\..*\" \n"],["body","\n"],["body","注意：在From子句中使用OBJECTS关键字，将返回符合条件的类信息，而非实例信息。这与Select子句中的OBJECTS关键字是完全不同的。"],["body","\n"],["headingLink","where子句"],["heading","Where子句"],["body","\n"],["body","Where子句用于指定OQL的查询条件。"],["body","\n"],["body","OQL查询将只返回满足Where子句指定条件的对象。"],["body","\n"],["body","Where子句的格式与传统SQL极为相似。"],["body","\n"],["body","下例返回长度大于10的char数组。"],["body","\n"],["body","SELECT * FROM char[] s WHERE s.@length>10 \n"],["body","\n"],["body","下例返回包含“java”子字符串的所有字符串，使用“LIKE”操作符，“LIKE”操作符的操作参数为正则表达式。"],["body","\n"],["body","SELECT * FROM java.lang.String s WHERE toString(s) LIKE \".*java.*\" \n"],["body","\n"],["body","下例返回所有value域不为null的字符串，使用“=”操作符。"],["body","\n"],["body","SELECT * FROM java.lang.String s where s.value!=null \n"],["body","\n"],["body","Where子句支持多个条件的AND、OR运算。下例返回数组长度大于15，并且深堆大于1000字节的所有Vector对象。"],["body","\n"],["body","SELECT * FROM java.util.Vector v WHERE v.elementData.@length>15 AND v.@retainedHeapSize>1000\n"],["body","\n"],["headingLink","内置对象与方法"],["heading","内置对象与方法"],["body","\n"],["body","OQL中可以访问堆内对象的属性，也可以访问堆内代理对象的属性。访问堆内对象的属性时，格式如下："],["body","\n"],["body","[ <alias>. ] <field> . <field>. <field> \n"],["body","\n"],["body","其中alias为对象名称。"],["body","\n"],["body","下例访问java.io.File对象的path属性，并进一步访问path的value属性。"],["body","\n"],["body","SELECT toString(f.path.value) FROM java.io.File f \n"],["body","\n"],["body","这些堆内对象的属性与Java对象一致，拥有与Java对象相同的结果。"],["body","\n"],["body","MAT为了能快捷地获取堆内对象的额外属性（比如对象占用的堆大小、对象地址等），为每种元类型的堆内对象建立了相对应的代理对象，以增强原有的对象功能。访问代理对象的属性时，使用如下格式："],["body","\n"],["body","[ <alias>. ] @<attribute> \n"],["body","\n"],["body","其中，alias为对象名称，attribute为属性名。"],["body","\n"],["body","下例显示了String对象的内容、objectid和objectAddress。"],["body","\n"],["body","SELECT s.toString(), s.@objectId, s.@objectAddress FROM java.lang.String s \n"],["body","\n"],["body","下例显示了File对象的对象ID、对象地址、代理对象的类型、类的类型、对象的浅堆大小以及对象的显示名称。"],["body","\n"],["body","SELECT f.@objectId, f.@objectAddress, f.@class, f.@clazz, f.@usedHeapSize, f.@displayName FROM java.io.File f \n"],["body","\n"],["body","下例显示java.util.Vector内部数组的长度。"],["body","\n"],["body","SELECT v.elementData.@length FROM java.util.Vector v \n"],["body","\n"],["body","下表整理了MAT代理对象的基本属性。"],["body","\n"],["body","对象类型"],["body","接口"],["body","属性"],["body","功能"],["body","\n"],["body","基对象"],["body","IObejct"],["body","objectId"],["body","对象ID"],["body","\n"],["body","objectAddress"],["body","对象地址"],["body","\n"],["body","class"],["body","代理对象类型"],["body","\n"],["body","clazz"],["body","对象类类型"],["body","\n"],["body","usedHeapSize"],["body","浅堆大小"],["body","\n"],["body","retainedHeapSize"],["body","深堆大小"],["body","\n"],["body","displayName"],["body","显示名称"],["body","\n"],["body","Class对象"],["body","IClass"],["body","classLoaderId"],["body","ClassLoad的ID"],["body","\n"],["body","数组"],["body","IArray"],["body","length"],["body","数组长度"],["body","\n"],["body","元类型数组"],["body","IPrimitiveArray"],["body","valueArray"],["body","数组内容"],["body","\n"],["body","对象数组"],["body","IObjectArray"],["body","referenceArray"],["body","数组内容"],["body","\n\n\n"],["body","除了使用代理对象的属性，OQL中还可以使用代理对象的方法，使用格式如下："],["body","\n"],["body","[ <alias> . ] @<method>( [ <expression>, <expression> ] ) \n"],["body","\n"],["body","下例显示int数组中索引下标为2的数据内容。"],["body","\n"],["body","SELECT s.getValueAt(2) FROM int[] s WHERE (s.@length > 2) \n"],["body","\n"],["body","下例显示对象数组中索引下标为2的对象。"],["body","\n"],["body","SELECT OBJECTS s.@referenceArray.get(2) FROM java.lang.Object[] s WHERE (s.@length > 2)\n"],["body","\n"],["body","下例显示了当前堆中所有的类型。"],["body","\n"],["body","select * from ${snapshot}.getClasses() \n"],["body","\n"],["body","下例显示了所有的java.util.Vector对象及其子类型，它的输出如图所示。"],["body","\n"],["body","select * from INSTANCEOF java.util.Vector \n"],["body","\n"],["body","下例显示当前对象是否是数组。"],["body","\n"],["body","SELECT c, classof(c).isArrayType() FROM ${snapshot}.getClasses() c \n\n"],["body","\n"],["body","代理对象的方法整理如表所示。"],["body","\n"],["body","表 MAT代理对象的方法"],["body","\n"],["body","对象说明"],["body","对象名"],["body","对象方法"],["body","对象方法说明"],["body","\n"],["body","全局快照"],["body","ISnapshot"],["body","getClasses()"],["body","所有实例的集合"],["body","\n"],["body","getClassesByName(String name, boolean includeSubClasses)"],["body","根据名称选取符合条件的实例"],["body","\n"],["body","类对象"],["body","IClass"],["body","hasSuperClass()"],["body","是否有超类"],["body","\n"],["body","isArrayType()"],["body","是否是数组"],["body","\n"],["body","基对象"],["body","IObject"],["body","getObjectAddress()"],["body","取得对象地址"],["body","\n"],["body","元类型数组"],["body","IPrimitiveArray"],["body","getValueAt(int index)"],["body","取得数组中给定索引的数据"],["body","\n"],["body","元类型数组，对象数组"],["body","[] or List"],["body","get(int index)"],["body","取得数组中给定索引的数据"],["body","\n\n\n"],["body","MAT的OQL中还内置一些有用的函数，如表所示。"],["body","\n"],["body","表 OQL中的内置函数"],["body","\n"],["body","函数"],["body","说明"],["body","\n"],["body","toHex( number )"],["body","转为16进制"],["body","\n"],["body","toString( object )"],["body","转为字符串"],["body","\n"],["body","dominators( object )"],["body","取得直接支配对象"],["body","\n"],["body","outbounds( object )"],["body","取得给定对象引用的对象"],["body","\n"],["body","inbounds( object )"],["body","取得引用给定对象的对象"],["body","\n"],["body","classof( object )"],["body","取得当前对象的类"],["body","\n"],["body","dominatorof( object )"],["body","取得给定对象的直接支配者"],["body","\n\n\n"],["body","下例显示所有长度为15的字符串内容"],["body","\n"],["body","SELECT toString(s) FROM java.lang.String s WHERE ((s.value.@length = 15) and (s.value != null)) \n"],["body","\n"],["body","下例显示所有cn.zyzpp.jConsole.HProfTest对象直接支配的 对象。即给定对象回收后，将释放的对象集合。"],["body","\n"],["body","SELECT objects dominators(s) FROM cn.zyzpp.jConsole.HProfTest s\n"],["body","\n"],["body","函数dominatorof()与dominators()的功能相反，它获取直接支配当前对象的对象。"],["body","\n"],["body","SELECT distinct objects dominatorof(s) FROM cn.zyzpp.jConsole.HProfTest s \n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","08.jvm_jvm问题诊断与性能分析/元空间溢出.html"],["title","元空间溢出.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","https://zhuanlan.zhihu.com/p/277541459"],["body","\n"],["body","https://blog.csdn.net/dkangel/article/details/121276741"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","08.jvm_jvm问题诊断与性能分析/排查内存溢出.html"],["title","排查内存溢出.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JVM内存区域概览"],["body","\n"],["body","JVM区域总体分两类，heap区和非heap区"],["body","\n"],["body","Heap区又分为：年轻代（Young Generation）和老年代（Old Generation）。"],["body","\n"],["body","年轻代是所有新对象产生的地方。当年轻代内存空间被用完时，就会触发垃圾回收。这个垃圾回收叫做Minor GC。"],["body","\n"],["body","年轻代被分为3个部分—Eden区和两个Survivor区。"],["body","\n"],["body","老年代内存里包含了长期存活的对象和经过多次Minor GC后依然存活下来的对象，通常会在老年代内存被占满时进行垃圾回收。老年代的垃圾收集叫做Major GC，Major GC通常是跟full GC是等价的，收集整个GC堆。"],["body","\n\n"],["body","Eden Space（伊甸园）；"],["body","\n"],["body","Survivor Space(2个幸存者区)；"],["body","\n"],["body","Old Gen（老年代）；"],["body","\n\n"],["body","非Heap区又分："],["body","\n\n"],["body","Code Cache(代码缓存区)；"],["body","\n"],["body","Perm Gen（永久代）；JDK1.8之后被元空间替代；Perm Gen全称是Permanent Generation space，称之为永久代，其实指的就是这个方法区。"],["body","\n"],["body","Jvm Stack(java虚拟机栈)；"],["body","\n"],["body","Local Method Statck(本地方法栈)；"],["body","\n\n"],["body","\n"],["h1","查看java堆的详细信息"],["body","\n"],["body","jmap是JDK自带的工具软件，主要用于打印指定Java进程(或核心文件、远程调试服务器)的共享对象内存映射或堆内存细节。"],["body","\n"],["body","jmap -heap <PID>\n"],["body","\n"],["body","输出"],["body","\n"],["body","Attaching to process ID 8126, please wait...\nDebugger attached successfully.\nServer compiler detected.\nJVM version is 25.282-b08\n\nusing thread-local object allocation.\nParallel GC with 8 thread(s) //GC 方式\n\nHeap Configuration:  //堆内存初始化配置\n   MinHeapFreeRatio         = 0   //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)\n   MaxHeapFreeRatio         = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)\n   MaxHeapSize              = 2030043136 (1936.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小\n   NewSize                  = 42467328 (40.5MB) //对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小\n   MaxNewSize               = 676331520 (645.0MB) //对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小\n   OldSize                  = 85458944 (81.5MB) //对应jvm启动参数-XX:OldSize=<value>:设置JVM堆的‘老生代’的大小\n   NewRatio                 = 2  //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率\n   SurvivorRatio            = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值\n   MetaspaceSize            = 21807104 (20.796875MB)  //对应jvm启动参数-XX:PermSize=<value>:设置JVM堆的‘永生代’的初始大小\n   CompressedClassSpaceSize = 1073741824 (1024.0MB) \n   MaxMetaspaceSize         = 17592186044415 MB\n   G1HeapRegionSize         = 0 (0.0MB)\n\nHeap Usage://堆内存使用情况\nPS Young Generation\nEden Space: //Eden区内存分布\n   capacity = 31981568 (30.5MB) //Eden区总容量\n   used     = 639640 (0.6100082397460938MB) //Eden区已使用\n   free     = 31341928 (29.889991760253906MB) //Eden区剩余容量\n   2.000027015560963% used  //Eden区使用比率\nFrom Space: //其中一个Survivor区的内存分布\n   capacity = 5242880 (5.0MB)\n   used     = 0 (0.0MB)\n   free     = 5242880 (5.0MB)\n   0.0% used\nTo Space:  //另一个Survivor区的内存分布\n   capacity = 5242880 (5.0MB)\n   used     = 0 (0.0MB)\n   free     = 5242880 (5.0MB)\n   0.0% used\nPS Old Generation //当前的Old区内存分布\n   capacity = 85458944 (81.5MB)\n   used     = 0 (0.0MB)\n   free     = 85458944 (81.5MB)\n   0.0% used\n\n710 interned Strings occupying 47296 bytes.\n*\n"],["body","\n"],["h1","查看堆内存(histogram)中的对象数量及大小"],["body","\n"],["body"," jmap -histo 3331\n"],["body","\n"],["body","num #instances #bytes class name"],["body","\n"],["body","编号 个数 字节 类名"],["body","\n"],["h1","将内存使用的详细情况输出到文件"],["body","\n"],["body","导出"],["body","\n"],["body"," jmap -dump:format=b,live,file=heapDump 6900\n"],["body","\n"],["body","live 只导出存活对象 会主动触发一次GC"],["body","\n"],["body","查看"],["body","\n"],["body"," jhat -port 5000 heapDump \n"],["body","\n"],["body","CompressedClassSpace详见"],["body","\n"],["h1","使用 MAT（MemoryAnalyzerTool）作为 堆中内存对象分析工具"],["body","\n"],["h1","后记"],["body","\n"],["body","可以使用 对象查询语言 对象进行分析"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","08.jvm_jvm问题诊断与性能分析/优雅停服.html"],["title","优雅停服.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","addShutdownHook钩子函数"],["body","\n"],["body","import java.util.concurrent.ScheduledThreadPoolExecutor;\nimport java.util.concurrent.TimeUnit;\n\n/**\n * 体验 Java 优雅停服\n *\n * @author 一猿小讲\n */\npublic class Application {\n\n    /**\n     * 监控服务\n     */\n    private ScheduledThreadPoolExecutor monitorService;\n\n    public Application() {\n        monitorService = new ScheduledThreadPoolExecutor(1);\n    }\n\n    /**\n     * 启动监控服务，监控一下内存信息\n     */\n    public void start() {\n        System.out.println(String.format(\"启动监控服务 %s\", Thread.currentThread().getId()));\n        monitorService.scheduleWithFixedDelay(new Runnable() {\n            @Override\n            public void run() {\n                System.out.println(String.format(\"最大内存: %dm  已分配内存: %dm  已分配内存中的剩余空间: %dm  最大可用内存: %dm\",\n                        Runtime.getRuntime().maxMemory() / 1024 / 1024,\n                        Runtime.getRuntime().totalMemory() / 1024 / 1024,\n                        Runtime.getRuntime().freeMemory() / 1024 / 1024,\n                        (Runtime.getRuntime().maxMemory() - Runtime.getRuntime().totalMemory() +\n                                Runtime.getRuntime().freeMemory()) / 1024 / 1024));\n            }\n        }, 2, 2, TimeUnit.SECONDS);\n    }\n\n    /**\n     * 释放资源（代码来源于 flume 源码）\n     * 主要用于关闭线程池（看不懂的同学莫纠结，当做黑盒去对待）\n     */\n    public void stop() {\n        System.out.println(String.format(\"开始关闭线程池 %s\", Thread.currentThread().getId()));\n        if (monitorService != null) {\n            monitorService.shutdown();\n            try {\n                monitorService.awaitTermination(10, TimeUnit.SECONDS);\n            } catch (InterruptedException e) {\n                System.err.println(\"Interrupted while waiting for monitor service to stop\");\n            }\n            if (!monitorService.isTerminated()) {\n                monitorService.shutdownNow();\n                try {\n                    while (!monitorService.isTerminated()) {\n                        monitorService.awaitTermination(10, TimeUnit.SECONDS);\n                    }\n                } catch (InterruptedException e) {\n                    System.err.println(\"Interrupted while waiting for monitor service to stop\");\n                }\n            }\n        }\n        System.out.println(String.format(\"线程池关闭完成 %s\", Thread.currentThread().getId()));\n    }\n\n    /**\n     * 应用入口\n     */\n    public static void main(String[] args) {\n        Application application = new Application();\n        // 启动服务（每隔一段时间监控输出一下内存信息）\n        application.start();\n\n        // 添加钩子，实现优雅停服（主要验证钩子的作用）\n        final Application appReference = application;\n        Runtime.getRuntime().addShutdownHook(new Thread(\"shutdown-hook\") {\n            @Override\n            public void run() {\n                System.out.println(\"接收到退出的讯号，开始打扫战场，释放资源，完成优雅停服\");\n                appReference.stop();\n            }\n        });\n        System.out.println(\"服务启动完成\");\n    }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","04.html"],["title","Bean校验 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/PO、VO、BO.html"],["title","PO、VO、BO.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","见图"],["body","\n"],["body","\n"],["body","PO（Persistant Object）-持久对象"],["body","\n"],["body","一个PO对应数据库表中的一条记录，等同于entity，一般PO仅用于表示数据，除了拥有get、set方法，没有操作数据的方法。"],["body","\n"],["body","BO（business object）-业务对象"],["body","\n"],["body","BO可以看成是PO的组合，例如：一个订单会有商品PO、购买人PO等，可以建立一个BO处理订单信息。这样处理业务逻辑时就可以针对BO来处理，对外就不会暴露数据表结构了。可以根据实际需要把业务处理方法放在BO里面。"],["body","\n"],["body","VO（value object /view object）-值对象/表现层对象"],["body","\n"],["body","主要对应前台页面显示的数据对象，例如常见的json。"],["body","\n"],["body","DTO（Data Transfer Object）-数据传输对象"],["body","\n"],["body","跨层级或者跨进程传输时用到的对象，例如微服务中服务于服务之间的调用传输的对象就是DTO。DTO和VO的比较相似但是还是有些差异，这些主要体现在设计上或对业务的解释上，例如：同一个gender属性，DTO中的值可能是“1”，VO为了更好理解则会转化为“男”。"],["body","\n"],["body","DAO（data access object）-数据访问对象"],["body","\n"],["body","用来访问数据库，封装对数据库的增删改查操作，PO一起使用。"],["body","\n"],["body","POJO（plain ordinary java object）-简单Java对象"],["body","\n"],["body","可以理解为最常用到的Java Bean，PO、VO、DTO都是典型的POJO，它是一个中间对象可以转化为PO、DTO、VO。"],["body","\n"],["body","不同类型的“O”在不同的架构层级中扮演不同的角色，每种“O”都有不同的用途，目的就是为了更好的封装自己的服务及有效的控制数据的传播。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/javaIdea调试.html"],["title","javaIdea调试.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n"],["body","\n"],["body","改变变量的值"],["body","\n"],["body","\n"],["body","\n"],["body","条件断点"],["body","\n"],["body","\n"],["body","\n"],["body","实时表达式计算(Evaluate)"],["body","\n"],["body","\n"],["body","\n"],["body","丢弃栈帧(drop frame)"],["body","\n"],["body","丢弃调用该方法的栈帧\n"],["body","\n"],["body","\n"],["body","\n"],["body","变量断点"],["body","\n"],["body","变量断点在变量初始化或者变量值改变的时候可以是程序停在变量值改变的那行代码上。\n"],["body","\n"],["body","\n"],["body","\n"],["body","方法断点"],["body","\n"],["body","方法上也是可以打断点的，比如有时候我们想进入到jdk内部的方法里，因为jdk的class在编译的时候为了节省空间，去掉了调试信息，用普通的step into可能进入不了方法内部，这个时候可以在相应的方法上打个断点，或者使用Force step into进入到方法体内部。\n"],["body","\n"],["body","\n"],["body","\n"],["body","多线程调试"],["body","\n"],["body","\n"],["body","\n"],["body","日志断点"],["body","\n"],["body","添加执行语句\n"],["body","\n"],["body","\n"],["body","\n"],["body","强制返回"],["body","\n"],["body","Force Return,默认给一个返回值\n"],["body","\n"],["body","\n\n"],["body","参考"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/java模块化.html"],["title","java模块化.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/Java泛型的协变与逆变.html"],["title","Java泛型的协变与逆变.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","类型变换"],["body","\n"],["body","类型变换指的是在一种类型的基础上构造 / 映射 / 变换出另一种新类型，是质的转变，即原类型与新类型不在一个抽象层面上。"],["body","\n"],["headingLink","具体公式"],["heading","具体公式"],["body","\n"],["body","有X、Y2种类型，而符号≤表示子类型关系（比如：X ≤ Y即类型X是类型Y的子类型），f表示类型变换，\n假设X ≤ Y，并且X和Y经过同一类型变换f后构造出对应更复杂的类型f(X)和f(Y)，那么就可以得出如下这些结论："],["body","\n\n"],["body","如果f(X) ≤ f(Y)，即保持X和Y的关系，那么类型变换f是协变的（covariant），或具有协变性；"],["body","\n"],["body","如果f(Y) ≤ f(X)，即逆转X和Y的关系，那么类型变换f是逆变的（contravariant），或具有逆变性；"],["body","\n"],["body","如果即是f(X) ≤ f(Y)也是f(Y) ≤ f(X)，那么类型变换f是双变的（bivariant），或具有双变性；"],["body","\n"],["body","如果既不是f(X) ≤ f(Y)也不是f(Y) ≤ f(X)，那么类型变换f是不可变的（invariant），或具有不可变"],["body","\n\n"],["h1","数组的协变"],["body","\n"],["body","如果一只猫是一只动物，那一群猫是一群动物吗？一群狗是一群动物吗？Java数组认为是的。于是你可以这样写："],["body","\n"],["body","Animal[] animals = new Cat[2];\n\nAnimal[] animals = new Cat[2];\nanimals[0] = new Cat();\n// 下面这行代码会抛运行时异常\nanimals[1] = new Dog();\nAnimal animal = animal[0];\n"],["body","\n"],["body","这种情况，编译器100%过，而运行时100%抛异常"],["body","\n"],["body","如果Cat是Animal的子类型，那么Cat[]也是Animal[]的子类型，我们称这种性质为协变（covariance）。Java中，数组是协变的。"],["body","\n"],["h1","泛型的不变性"],["body","\n"],["body","Java中的泛型是不变（invariance）"],["body","\n"],["body","也就是说，List<Cat>并不是List<Animal>的子类型"],["body","\n"],["h1","消费场景的协变"],["body","\n"],["body","比如，我希望有一个Animal的集合，我不用去管它里面存的具体类型是什么，但我每次从这个集合取出来的，一定是一个Animal或其子类。这是一种典型的消费场景，从集合中取出元素来消费。"],["body","\n"],["body","在消费场景，Java提供了通配符和extends关键字来支持泛型的协变。"],["body","\n"],["body","List<? extends Animal> animals = new LinkedList<Cat>();\n// 以下四行代码都不能编译通过\n// animals.add(new Dog());\n// animals.add(new Cat());\n// animals.add(new Animal());\n// animals.add(new Object());\n// 可以添加null，但没意义\nanimals.add(null);\n// 可以安全地取出来\nAnimal animal = animals.get(0);\n"],["body","\n"],["body","为什么协变下不能写入呢？因为协变下写入是不安全的，因为可以放入任意的子类型，但是 要求  列表里只能有一个类型。这是不能达到的，"],["body","\n"],["body","所以消费场景的 协变禁止 写入"],["body","\n"],["h1","生产场景的逆变"],["body","\n"],["body","我们希望有一个集合，可以往里面写入Animal及其子类。那可以通过super关键字来定义泛型集合："],["body","\n"],["body","// 下面这行代码编译不通过\n// List<? super Animal> animals = new LinkedList<Cat>();\n// 下面都是OK的写法\n// List<? super Animal> animals = new LinkedList<Object>();\n// List<? super Animal> animals = new LinkedList<Animal>();\n// 等价于上面一行的写法\nList<? super Animal> animals = new LinkedList<>();\nanimals.add(new Cat());\nanimals.add(new Dog());\n// 取出来一定是Object\nObject object = animals.get(0);\n\n// 这样写是OK的\nList<? super Cat> cats = new LinkedList<Animal>();\n\n"],["body","\n"],["body","逆变（contravariance），也称逆协变，从名字可以看出来，它与协变的性质是相反的。也就是说，List<Animal> 是List<? super Cat>的子类型。"],["body","\n"],["h1","任意类型通配符"],["body","\n"],["body","也就是说，它是“无界”的，对于任意类型X，List<X>都是List<?>的子类型。但List<?>不能add，get出来也是Object类型。它同时具有协变和逆变的两种性质，上界是Object，但不能调用add方法。"],["body","\n"],["body","那它与List有什么区别呢？根据前面的推断，有两个比较明显的区别："],["body","\n\n"],["body","List可以调用add方法，但List<?>不能。\n"],["body","List<?>可以协变，上界是Object，但List不能协变。\n\n"],["headingLink","何时限制通配符的上界或下界"],["heading","何时限制通配符的上界或下界？"],["body","\n"],["body","PECS表示producer-extends，consumer-super。"],["body","\n"],["body","更加通俗具体地理解就是参数化类型是只读的，那就用extends限制通配符的上界；参数化类型是只写的，那就用super限制通配符的下界。"],["body","\n"],["body","这里的生产 消费 是相当于 类型本身来说的"],["body","\n"],["h1","Java泛型中的协变"],["body","\n"],["body","(? extend Animal) 是 Animal的子类类型，但是不确定是哪种\n//泛型协变原则：子类类型\t\t\t\t父类类型\nCollection<? extend Animal>  <= Collection<Animal>\n//面向对象：子类类型可以转换成父类类型\n\n\n? super Animal 是 Animal的 父类类型：\n//逆变原则：如何匹配具体的类型\n\n? super Animal <= Animal\n\n//面向对象：子类类型可以转换成父类类型\n"],["body","\n\n\n\n"],["body","\n\n                    \n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/JavaSPI.html"],["title","JavaSPI.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","SPI是什么"],["body","\n"],["body","SPI全称Service Provider Interface，是Java提供的一套用来被第三方实现或者扩展的API，它可以用来启用框架扩展和替换组件。"],["body","\n"],["body","\n"],["h1","使用场景"],["body","\n\n"],["body","数据库驱动加载接口实现类的加载  JDBC加载不同类型数据库的驱动"],["body","\n"],["body","日志门面接口实现类加载  SLF4J加载不同提供商的日志实现类"],["body","\n"],["body","Spring ，Spring中大量使用了SPI,比如：对servlet3.0规范对ServletContainerInitializer的实现、自动类型转换Type Conversion SPI(Converter SPI、Formatter SPI)等"],["body","\n\n"],["h1","使用规范"],["body","\n"],["body","实现SPI，就需要按照SPI本身定义 的规范来进行配置，SPI规范如下："],["body","\n\n"],["body","需要在classpath下创建一个目录，该目录命名必须是：META-INF/services"],["body","\n"],["body","在该目录下创建一个文件，该文件需要满足以下几个条件\n\n"],["body","文件名必须是扩展的接口的全路径名称"],["body","\n"],["body","文件内部描述的是该扩展接口的所有实现类"],["body","\n"],["body","文件的编码格式是UTF-8"],["body","\n\n"],["body","\n"],["body","SPI的实现类必须携带一个不带参数的构造方法"],["body","\n\n"],["h1","示例"],["body","\n"],["body","\n"],["h1","总结"],["body","\n"],["headingLink","spi是如何进行类加载的"],["heading","SPI是如何进行类加载的"],["body","\n\n"],["body","通过规定 类的定义与 类的注册 方式来动态加载类"],["body","\n\n"],["body","public static <S> ServiceLoader<S> load(Class<S> service) {\n    ClassLoader cl = Thread.currentThread().getContextClassLoader();\n    return ServiceLoader.load(service, cl);\n}\n"],["body","\n"],["headingLink","spi为什么会破坏双亲委派机制"],["heading","SPI为什么会破坏双亲委派机制"],["body","\n"],["body","因为 Java核心库定义了一系列 核心SPI接口，这些接口类是由 系统类加载器加载的，而系统类加载器 无法加载 实现类，所以需要使用 线程上下文的类加载器"],["body","\n"],["headingLink","spi的优缺点"],["heading","SPI的优缺点"],["body","\n"],["body","优点"],["body","\n"],["body","相比使用提供接口jar包，供第三方服务模块实现接口的方式，SPI的方式使得源框架，不必关心接口的实现类的路径，可以不用通过下面的方式获取接口实现类："],["body","\n\n"],["body","代码硬编码import 导入实现类"],["body","\n"],["body","指定类全路径反射获取：例如在JDBC4.0之前，JDBC中获取数据库驱动类需要通过Class.forName(\"com.mysql.jdbc.Driver\")，类似语句先动态加载数据库相关的驱动，然后再进行获取连接等的操作"],["body","\n"],["body","第三方服务模块把接口实现类实例注册到指定地方，源框架从该处访问实例"],["body","\n\n"],["body","缺点："],["body","\n\n"],["body","虽然ServiceLoader也算是使用的延迟加载，但是基本只能通过遍历全部获取，也就是接口的实现类全部加载并实例化一遍。如果你并不想用某些实现类，它也被加载并实例化了，这就造成了浪费。获取某个实现类的方式不够灵活，只能通过Iterator形式获取，不能根据某个参数来获取对应的实现类。"],["body","\n"],["body","并发多线程使用ServiceLoader类的实例是不安全的。"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/java中常见的语法糖.html"],["title","java中常见的语法糖.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","语法糖"],["body","\n"],["body","语法糖（Syntactic Sugar），也称糖衣语法，是由英国计算机学家 Peter.J.Landin 发明的一个术语，指在计算机语言中添加的某种语法，这种语法对语言的功能并没有影响，但是更方便程序员使用。简而言之，语法糖让程序更加简洁，有更高的可读性。"],["body","\n"],["body","\n"],["body","有意思的是，在编程领域，除了语法糖，还有语法盐和语法糖精的说法"],["body","\n"],["body","\n"],["body","我们所熟知的编程语言中几乎都有语法糖。作者认为，语法糖的多少是评判一个语言够不够牛逼的标准之一。很多人说Java是一个“低糖语言”，其实从Java 7开始Java语言层面上一直在添加各种糖，主要是在“Project Coin”项目下研发。尽管现在Java有人还是认为现在的Java是低糖，未来还会持续向着“高糖”的方向发展。"],["body","\n"],["h1","解语法糖"],["body","\n"],["body","前面提到过，语法糖的存在主要是方便开发人员使用。但其实，Java虚拟机并不支持这些语法糖。这些语法糖在编译阶段就会被还原成简单的基础语法结构，这个过程就是解语法糖。"],["body","\n"],["body","说到编译，大家肯定都知道，Java语言中，javac命令可以将后缀名为.java的源文件编译为后缀名为.class的可以运行于Java虚拟机的字节码。如果你去看com.sun.tools.javac.main.JavaCompiler的源码，你会发现在compile()中有一个步骤就是调用desugar()，这个方法就是负责解语法糖的实现的。"],["body","\n"],["body","Java 中最常用的语法糖主要有泛型、变长参数、条件编译、自动拆装箱、内部类等。"],["body","\n"],["h1","switch 支持 String 与枚举"],["body","\n"],["body","//前\npublic class switchDemoString {\n    public static void main(String[] args) {\n        String str = \"world\";\n        switch (str) {\n        case \"hello\":\n            System.out.println(\"hello\");\n            break;\n        case \"world\":\n            System.out.println(\"world\");\n            break;\n        default:\n            break;\n        }\n    }\n}\n\n//后，进行switch的实际是哈希值，然后通过使用equals方法比较进行安全检查，这个检查是必要的，因为哈希可能会发生碰撞。因此它的性能是不如使用枚举进行switch或者使用纯整数常量，但这也不是很差。\npublic class switchDemoString\n{\n    public switchDemoString()\n    {\n    }\n    public static void main(String args[])\n    {\n        String str = \"world\";\n        String s;\n        switch((s = str).hashCode())\n        {\n        default:\n            break;\n        case 99162322:\n            if(s.equals(\"hello\"))\n                System.out.println(\"hello\");\n            break;\n        case 113318802:\n            if(s.equals(\"world\"))\n                System.out.println(\"world\");\n            break;\n        }\n    }\n}\n"],["body","\n"],["h1","泛型"],["body","\n"],["body","通常情况下，一个编译器处理泛型有两种方式：Code specialization和Code sharing。C++和C#是使用Code specialization的处理机制，而Java使用的是Code sharing的机制。"],["body","\n"],["body","\n"],["body","Code sharing方式为每个泛型类型创建唯一的字节码表示，并且将该泛型类型的实例都映射到这个唯一的字节码表示上。将多种泛型类形实例映射到唯一的字节码表示是通过类型擦除（type erasue）实现的。"],["body","\n"],["body","\n"],["body","对于Java虚拟机来说，他根本不认识Map<String, String> map这样的语法。需要在编译阶段通过类型擦除的方式进行解语法糖。"],["body","\n"],["body","Map<String, String> map = new HashMap<String, String>();  \nmap.put(\"name\", \"hollis\");  \nmap.put(\"wechat\", \"Hollis\");  \nmap.put(\"blog\", \"www.hollischuang.com\");\n\n\nMap map = new HashMap();  \nmap.put(\"name\", \"hollis\");  \nmap.put(\"wechat\", \"Hollis\");  \nmap.put(\"blog\", \"www.hollischuang.com\");  \n"],["body","\n"],["body","//擦除前\npublic static <A extends Comparable<A>> A max(Collection<A> xs) {\n    Iterator<A> xi = xs.iterator();\n    A w = xi.next();\n    while (xi.hasNext()) {\n        A x = xi.next();\n        if (w.compareTo(x) < 0)\n            w = x;\n    }\n    return w;\n}\n//擦除后\npublic static Comparable max(Collection xs){\n    Iterator xi = xs.iterator();\n    Comparable w = (Comparable)xi.next();\n    while(xi.hasNext())\n    {\n        Comparable x = (Comparable)xi.next();\n        if(w.compareTo(x) < 0)\n            w = x;\n    }\n    return w;\n}\n"],["body","\n"],["body","虚拟机中没有泛型，只有普通类和普通方法，所有泛型类的类型参数在编译时都会被擦除，泛型类并没有自己独有的Class类对象。比如并不存在List<String>.class或是List<Integer>.class，而只有List.class。"],["body","\n"],["h1","自动装箱与拆箱"],["body","\n"],["body","自动装箱"],["body","\n"],["body","public static void main(String[] args) {\n    int i = 10;\n    Integer n = i;\n}\n\n\npublic static void main(String args[])\n{\n    int i = 10;\n    Integer n = Integer.valueOf(i);\n}\n"],["body","\n"],["body","自动拆箱"],["body","\n"],["body","public static void main(String[] args) {\n \n    Integer i = 10;\n    int n = i;\n}\n\npublic static void main(String args[])\n{\n    Integer i = Integer.valueOf(10);\n    int n = i.intValue();\n}\n"],["body","\n"],["h1","方法变长参数"],["body","\n"],["body","//前\npublic static void main(String[] args)\n    {\n        print(\"Holis\", \"公众号:Hollis\", \"博客：www.hollischuang.com\", \"QQ：907607222\");\n    }\n \npublic static void print(String... strs)\n{\n    for (int i = 0; i < strs.length; i++)\n    {\n        System.out.println(strs[i]);\n    }\n}\n\n//后\npublic static void main(String args[])\n{\n    print(new String[] {\n        \"Holis\", \"\\u516C\\u4F17\\u53F7:Hollis\", \"\\u535A\\u5BA2\\uFF1Awww.hollischuang.com\", \"QQ\\uFF1A907607222\"\n    });\n}\n \npublic static transient void print(String strs[])\n{\n    for(int i = 0; i < strs.length; i++)\n        System.out.println(strs[i]);\n \n}\n"],["body","\n"],["h1","枚举"],["body","\n"],["body","枚举类既不能继承其他类 也不能被其他类继承"],["body","\n"],["body","//前\npublic enum t {\n    SPRING,SUMMER;\n}\n\n//后\npublic final class T extends Enum\n{\n    private T(String s, int i)\n    {\n        super(s, i);\n    }\n    public static T[] values()\n    {\n        T at[];\n        int i;\n        T at1[];\n        System.arraycopy(at = ENUM$VALUES, 0, at1 = new T[i = at.length], 0, i);\n        return at1;\n    }\n \n    public static T valueOf(String s)\n    {\n        return (T)Enum.valueOf(demo/T, s);\n    }\n \n    public static final T SPRING;\n    public static final T SUMMER;\n    private static final T ENUM$VALUES[];\n    static\n    {\n        SPRING = new T(\"SPRING\", 0);\n        SUMMER = new T(\"SUMMER\", 1);\n        ENUM$VALUES = (new T[] {\n            SPRING, SUMMER\n        });\n    }\n}\n\n"],["body","\n"],["h1","内部类"],["body","\n"],["body","内部类之所以也是语法糖，是因为它仅仅是一个编译时的概念，outer.java里面定义了一个内部类inner，一旦编译成功，就会生成两个完全不同的.class文件了，分别是outer.class和outer$inner.class。"],["body","\n"],["h1","条件编译"],["body","\n"],["body","\npublic class ConditionalCompilation {\n    public static void main(String[] args) {\n        final boolean DEBUG = true;\n        if(DEBUG) {\n            System.out.println(\"Hello, DEBUG!\");\n        }\n \n        final boolean ONLINE = false;\n \n        if(ONLINE){\n            System.out.println(\"Hello, ONLINE!\");\n        }\n    }\n}\n"],["body","\n"],["body","Java语法的条件编译，是通过判断条件为常量的if语句实现的。其原理也是Java语言的语法糖。根据if判断条件的真假，编译器直接把分支为false的代码块消除。通过该方式实现的条件编译，必须在方法体内实现，"],["body","\n"],["h1","断言"],["body","\n"],["body","\npublic class AssertTest {\n    public static void main(String args[]) {\n        int a = 1;\n        int b = 1;\n        assert a == b;\n        System.out.println(\"公众号：Hollis\");\n        assert a != b : \"Hollis\";\n        System.out.println(\"博客：www.hollischuang.com\");\n    }\n}\n"],["body","\n"],["body","public class AssertTest {\n   public AssertTest()\n    {\n    }\npublic static void main(String args[])\n{\n    int a = 1;\n    int b = 1;\n    if(!$assertionsDisabled && a != b)\n        throw new AssertionError();\n    System.out.println(\"\\u516C\\u4F17\\u53F7\\uFF1AHollis\");\n    if(!$assertionsDisabled && a == b)\n    {\n        throw new AssertionError(\"Hollis\");\n    } else\n    {\n        System.out.println(\"\\u535A\\u5BA2\\uFF1Awww.hollischuang.com\");\n        return;\n    }\n}\n \nstatic final boolean $assertionsDisabled = !com/hollis/suguar/AssertTest.desiredAssertionStatus();\n \n}\n"],["body","\n"],["body","很明显，反编译之后的代码要比我们自己的代码复杂的多。所以，使用了assert这个语法糖我们节省了很多代码。其实断言的底层实现就是if语言，如果断言结果为true，则什么都不做，程序继续执行，如果断言结果为false，则程序抛出AssertError来打断程序的执行。-enableassertions会设置$assertionsDisabled字段的值。"],["body","\n"],["h1","数值字面量"],["body","\n"],["body","在java 7中，数值字面量，不管是整数还是浮点数，都允许在数字之间插入任意多个下划线。这些下划线不会对字面量的数值产生影响，目的就是方便阅读。"],["body","\n"],["body","\npublic class Test {\n    public static void main(String... args) {\n        int i = 10_000;\n        System.out.println(i);\n    }\n}\n\n\npublic class Test\n{\n  public static void main(String[] args)\n  {\n    int i = 10000;\n    System.out.println(i);\n  }\n}\n"],["body","\n"],["h1","for-each"],["body","\n"],["body","\npublic static void main(String... args) {\n    String[] strs = {\"Hollis\", \"公众号：Hollis\", \"博客：www.hollischuang.com\"};\n    for (String s : strs) {\n        System.out.println(s);\n    }\n    List<String> strList = ImmutableList.of(\"Hollis\", \"公众号：Hollis\", \"博客：www.hollischuang.com\");\n    for (String s : strList) {\n        System.out.println(s);\n    }\n}\n\n\npublic static transient void main(String args[])\n{\n    String strs[] = {\n        \"Hollis\", \"\\u516C\\u4F17\\u53F7\\uFF1AHollis\", \"\\u535A\\u5BA2\\uFF1Awww.hollischuang.com\"\n    };\n    String args1[] = strs;\n    int i = args1.length;\n    for(int j = 0; j < i; j++)\n    {\n        String s = args1[j];\n        System.out.println(s);\n    }\n \n    List strList = ImmutableList.of(\"Hollis\", \"\\u516C\\u4F17\\u53F7\\uFF1AHollis\", \"\\u535A\\u5BA2\\uFF1Awww.hollischuang.com\");\n    String s;\n    for(Iterator iterator = strList.iterator(); iterator.hasNext(); System.out.println(s))\n        s = (String)iterator.next();\n \n}\n"],["body","\n"],["h1","try-with-resource"],["body","\n"],["body","\npublic static void main(String[] args) {\n    BufferedReader br = null;\n    try {\n        String line;\n        br = new BufferedReader(new FileReader(\"d:\\\\hollischuang.xml\"));\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        // handle exception\n    } finally {\n        try {\n            if (br != null) {\n                br.close();\n            }\n        } catch (IOException ex) {\n            // handle exception\n        }\n    }\n}\n\n//前\npublic static void main(String... args) {\n    try (BufferedReader br = new BufferedReader(new FileReader(\"d:\\\\ hollischuang.xml\"))) {\n        String line;\n        while ((line = br.readLine()) != null) {\n            System.out.println(line);\n        }\n    } catch (IOException e) {\n        // handle exception\n    }\n}\n//后\npublic static transient void main(String args[])\n    {\n        BufferedReader br;\n        Throwable throwable;\n        br = new BufferedReader(new FileReader(\"d:\\\\ hollischuang.xml\"));\n        throwable = null;\n        String line;\n        try\n        {\n            while((line = br.readLine()) != null)\n                System.out.println(line);\n        }\n        catch(Throwable throwable2)\n        {\n            throwable = throwable2;\n            throw throwable2;\n        }\n        if(br != null)\n            if(throwable != null)\n                try\n                {\n                    br.close();\n                }\n                catch(Throwable throwable1)\n                {\n                    throwable.addSuppressed(throwable1);\n                }\n            else\n                br.close();\n            break MISSING_BLOCK_LABEL_113;\n            Exception exception;\n            exception;\n            if(br != null)\n                if(throwable != null)\n                    try\n                    {\n                        br.close();\n                    }\n                    catch(Throwable throwable3)\n                      {\n                        throwable.addSuppressed(throwable3);\n                    }\n                else\n                    br.close();\n        throw exception;\n        IOException ioexception;\n        ioexception;\n    }\n}\n\n"],["body","\n"],["h1","Lambda表达式"],["body","\n"],["body","Labmda表达式不是匿名内部类的语法糖，但是他也是一个语法糖。实现方式其实是依赖了几个JVM底层提供的lambda相关api。"],["body","\n"],["body","\npublic static void main(String... args) {\n    List<String> strList = ImmutableList.of(\"Hollis\", \"公众号：Hollis\", \"博客：www.hollischuang.com\");\n \n    strList.forEach( s -> { System.out.println(s); } );\n}\n\n\n\npublic static /* varargs */ void main(String ... args) {\n    ImmutableList strList = ImmutableList.of((Object)\"Hollis\", (Object)\"\\u516c\\u4f17\\u53f7\\uff1aHollis\", (Object)\"\\u535a\\u5ba2\\uff1awww.hollischuang.com\");\n    strList.forEach((Consumer<String>)LambdaMetafactory.metafactory(null, null, null, (Ljava/lang/Object;)V, lambda$main$0(java.lang.String ), (Ljava/lang/String;)V)());\n}\n \nprivate static /* synthetic */ void lambda$main$0(String s) {\n    System.out.println(s);\n}\n"],["body","\n"],["body","在forEach方法中，其实是调用了java.lang.invoke.LambdaMetafactory#metafactory方法，该方法的第四个参数implMethod指定了方法实现。可以看到这里其实是调用了一个lambda$main$0方法进行了输出。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/fastJson.html"],["title","fastJson.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","fastjson反序列化方式"],["heading","FastJson反序列化方式"],["body","\n"],["body","语法"],["body","描述"],["body","\n"],["body","{“$ref”:”$”}"],["body","引用根对象"],["body","\n"],["body","{“$ref”:”@”}"],["body","引用自己"],["body","\n"],["body","{“$ref”:”..”}"],["body","引用父对象"],["body","\n"],["body","{“$ref”:”../..”}"],["body","引用父对象的父对象"],["body","\n"],["body","{“$ref”:$.members[0].reportTo”}"],["body","基于路径的引用"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/注解.html"],["title","注解.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","什么是注解?"],["body","\n"],["body","​\tJava 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。,和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中,Java 虚拟机可以保留标注内容，在运行时可以获取到标注内容 "],["body","\n"],["h1","内置注解"],["body","\n"],["headingLink","作用在代码上的注解"],["heading","作用在代码上的注解"],["body","\n"],["body","@Override"],["body","\n"],["body","​\t检查该方法是否是重写方法。如果发现其父类，或者是引用的接口中并没有该方法时，会报编译错误。"],["body","\n"],["body","@Deprecated"],["body","\n"],["body","​\t标记过时方法。如果使用该方法，会报编译警告。"],["body","\n"],["body","@SuppressWarnings"],["body","\n"],["body","​\t指示编译器去忽略注解中声明的警告。"],["body","\n"],["body","deprecation：使用了不赞成使用的类或方法时的警告；\nunchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型; \nfallthrough：当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;\npath：在类路径、源文件路径等中有不存在的路径时的警告; \nserial：当在可序列化的类上缺少 serialVersionUID 定义时的警告; \nfinally：任何 finally 子句不能正常完成时的警告; \nall：关于以上所有情况的警告。\n"],["body","\n"],["headingLink","元注解"],["heading","元注解"],["body","\n\n"],["body","@Retention - 标识这个注解怎么保存，是只在代码中，还是编入class文件中，或者是在运行时可以通过反射访问。"],["body","\n"],["body","@Documented - 类和方法的 Annotation 在缺省情况下是不出现在 javadoc 中的,标记这些注解是否包含在用户文档中。"],["body","\n"],["body","@Target - 标记这个注解应该是哪种 Java 成员。"],["body","\n"],["body","@Inherited - 可以让注解被继承，但这并不是真的继承，只是通过使用@Inherited，可以让子类Class对象使用getAnnotations()获取父类被@Inherited修饰的注解"],["body","\n\n"],["body","@Inherited\n@Documented\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface DocumentA {\n}\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface DocumentB {\n}\n\n@DocumentA\nclass A{ }\n\nclass B extends A{ }\n\n@DocumentB\nclass C{ }\n\nclass D extends C{ }\n\n//测试\npublic class DocumentDemo {\n\n    public static void main(String... args){\n        A instanceA=new B();\n        System.out.println(\"已使用的@Inherited注解:\"+Arrays.toString(instanceA.getClass().getAnnotations()));\n\n        C instanceC = new D();\n\n        System.out.println(\"没有使用的@Inherited注解:\"+Arrays.toString(instanceC.getClass().getAnnotations()));\n    }\n\n    /**\n     * 运行结果:\n     已使用的@Inherited注解:[@com.zejian.annotationdemo.DocumentA()]\n     没有使用的@Inherited注解:[]\n     */\n}\n"],["body","\n"],["headingLink","从-java-7-开始额外添加了-3-个注解"],["heading","从 Java 7 开始，额外添加了 3 个注解"],["body","\n\n"],["body","@SafeVarargs - Java 7 开始支持，忽略任何使用参数为泛型变量的方法或构造函数调用产生的警告。"],["body","\n"],["body","@FunctionalInterface - Java 8 开始支持，标识一个匿名函数或函数式接口。"],["body","\n"],["body","@Repeatable - Java 8 开始支持，标识某注解可以在同一个声明上使用多次。"],["body","\n\n"],["h1","Annotation的组成部分"],["body","\n"],["body","\n"],["body","java Annotation 的组成中，有 3 个非常重要的主干类。它们分别是："],["body","\n"],["body","\n"],["body","package java.lang.annotation;\npublic interface Annotation {\n\n    boolean equals(Object obj);\n\n    int hashCode();\n\n    String toString();\n\n    Class<? extends Annotation> annotationType();\n}\n"],["body","\n"],["body","public enum ElementType {\n    /**标明该注解可以用于类、接口（包括注解类型）或enum声明*/\n    TYPE,\n\n    /** 标明该注解可以用于字段(域)声明，包括enum实例 */\n    FIELD,\n\n    /** 标明该注解可以用于方法声明 */\n    METHOD,\n\n    /** 标明该注解可以用于参数声明 */\n    PARAMETER,\n\n    /** 标明注解可以用于构造函数声明 */\n    CONSTRUCTOR,\n\n    /** 标明注解可以用于局部变量声明 */\n    LOCAL_VARIABLE,\n\n    /** 标明注解可以用于注解声明(应用于另一个注解上)*/\n    ANNOTATION_TYPE,\n\n    /** 标明注解可以用于包声明 */\n    PACKAGE,\n\n    /**\n     * 标明注解可以用于类型参数声明（1.8新加入）\n     * @since 1.8\n     */\n    TYPE_PARAMETER,\n\n    /**\n     * 类型使用声明（1.8新加入)\n     * @since 1.8\n     */\n    TYPE_USE\n}\n"],["body","\n"],["body","package java.lang.annotation;\npublic enum RetentionPolicy {\n    SOURCE,            /* Annotation信息仅存在于编译器处理期间，编译器处理完之后就没有该Annotation信息了  */\n\n    CLASS,             /* 编译器将Annotation存储于类对应的.class文件中。默认行为  */\n\n    RUNTIME            /* 编译器将Annotation存储于class文件中，并且可由JVM读入 */\n}\n"],["body","\n"],["headingLink","annotation本身"],["heading","Annotation本身"],["body","\n\n"],["body","Annotation 就是个接口。"],["body","\n"],["body","每 1 个 Annotation对象都与1个RetentionPolicy,关联并且与 1～n 个 ElementType关联"],["body","\n\n"],["headingLink","elementtype"],["heading","ElementType"],["body","\n"],["body","当注解未指定Target值时，则此注解可以用于任何元素之上，多个值使用{}包含并用逗号隔开，如下"],["body","\n"],["body","@Target(value={CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE})\n"],["body","\n"],["headingLink","retentionpolicy"],["heading","RetentionPolicy"],["body","\n\n"],["body","SOURCE "],["body","\n\n"],["body","\n"],["body","Annotation 仅存在于编译器处理期间，编译器处理完之后，该 Annotation 就没用了"],["body","\n"],["body","\n\n"],["body","CLASS"],["body","\n\n"],["body","\n"],["body","编译器将 Annotation 存储于类对应的 .class 文件中，它是 Annotation 的默认行为。"],["body","\n"],["body","\n\n"],["body","RUNTIME"],["body","\n\n"],["body","\n"],["body","编译器将 Annotation 存储于 class 文件中，并且可由JVM读入"],["body","\n"],["body","\n"],["h1","自定义注解"],["body","\n"],["headingLink","注解元素及其数据类型"],["heading","注解元素及其数据类型"],["body","\n"],["headingLink","标记注解"],["heading","标记注解"],["body","\n"],["body","(marker annotation) 没有定义元素的注解"],["body","\n"],["headingLink","注解支持的数据类型"],["heading","注解支持的数据类型"],["body","\n\n"],["body","所有基本类型（int,float,boolean,byte,double,char,long,short）"],["body","\n"],["body","String"],["body","\n"],["body","Class"],["body","\n"],["body","enum"],["body","\n"],["body","Annotation"],["body","\n"],["body","上述类型的数组"],["body","\n\n"],["body","注意事项"],["body","\n\n"],["body","若使用了其他数据类型，编译器将会丢出一个编译错误"],["body","\n"],["body","声明注解元素时可以使用基本类型但不允许使用任何包装类型"],["body","\n"],["body","注解也可以作为元素的类型，也就是嵌套注解"],["body","\n\n"],["body","示例"],["body","\n"],["body","\n/**\n * Created by wuzejian on 2017/5/19.\n * 数据类型使用Demo\n */\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@interface Reference{\n    boolean next() default false;\n}\n\npublic @interface AnnotationElementDemo {\n    //枚举类型\n    enum Status {FIXED,NORMAL};\n\n    //声明枚举\n    Status status() default Status.FIXED;\n\n    //布尔类型\n    boolean showSupport() default false;\n\n    //String类型\n    String name()default \"\";\n\n    //class类型\n    Class<?> testCase() default Void.class;\n\n    //注解嵌套\n    Reference reference() default @Reference(next=true);\n\n    //数组类型\n    long[] value();\n}\n"],["body","\n"],["body","编译器对默认值的限制"],["body","\n"],["body","编译器对元素的默认值有些过分挑剔,"],["body","\n\n"],["body","首先，元素不能有不确定的值,元素必须要么具有默认值，要么在使用注解时提供元素的值"],["body","\n"],["body","对于非基本类型的元素，无论是在源代码中声明，还是在注解接口中定义默认值，都不能以null作为值"],["body","\n\n"],["headingLink","注解不支持继承"],["heading","注解不支持继承"],["body","\n"],["body","​\t注解是不支持继承的,因为编译器会自动继承java.lang.annotation.Annotation接口，Java的接口可以实现多继承，但定义注解时依然无法使用extends关键字继承@interface。"],["body","\n"],["body","//定义注解\n@Target(ElementType.TYPE)//只能应用于类上\n@Retention(RetentionPolicy.RUNTIME)//保存到运行时\npublic @interface DBTable {\n    String name() default \"\";\n}\n//反编译\npublic interface DBTable extends Annotation\n{\n    public abstract String name();\n}\n"],["body","\n"],["headingLink","快捷方式"],["heading","快捷方式"],["body","\n"],["body","​\t所谓的快捷方式就是注解中定义了名为value的元素，并且在使用该注解时，如果该元素是唯一需要赋值的一个元素，那么此时无需使用key=value的语法，而只需在括号内给出value元素所需的值即可。这可以应用于任何合法类型的元素"],["body","\n"],["h1","Java 8中注解增强"],["body","\n"],["headingLink","repeatable"],["heading","@Repeatable"],["body","\n"],["body","\n"],["body","元注解@Repeatable是JDK1.8新加入的，它表示在同一个位置重复相同的注解。在没有该注解前，一般是无法在同一个类型上使用相同的注解的"],["body","\n"],["body","\n"],["body","@FilterPath(\"/web/update\")\n@FilterPath(\"/web/add\")\npublic class A {}\n"],["body","\n"],["body","注解处理API"],["body","\n"],["body","getDeclaredAnnotationsByType()"],["body","\n"],["body","getAnnotationsByType()"],["body","\n"],["body","用于获取 repeatable的注解"],["body","\n"],["body","如果没有@Inherited 则不会往父类寻找"],["body","\n"],["body","使用方式"],["body","\n"],["body","@Target({ElementType.TYPE,ElementType.FIELD,ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Repeatable(FilterPaths.class)\npublic @interface FilterPath {\n    String  value();\n}\n\n\n@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@interface FilterPaths {\n    FilterPath[] value();\n}\n\n@FilterPath(\"/web/list\")\nclass CC { }\n\n//使用案例\n@FilterPath(\"/web/update\")\n@FilterPath(\"/web/add\")\n@FilterPath(\"/web/delete\")\nclass AA extends CC{\n    public static void main(String[] args) {\n\n        Class<?> clazz = AA.class;\n        //通过getAnnotationsByType方法获取所有重复注解\n        FilterPath[] annotationsByType = clazz.getAnnotationsByType(FilterPath.class);\n        FilterPath[] annotationsByType2 = clazz.getDeclaredAnnotationsByType(FilterPath.class);\n        if (annotationsByType != null) {\n            for (FilterPath filter : annotationsByType) {\n                System.out.println(\"1:\"+filter.value());\n            }\n        }\n\n        System.out.println(\"-----------------\");\n\n        if (annotationsByType2 != null) {\n            for (FilterPath filter : annotationsByType2) {\n                System.out.println(\"2:\"+filter.value());\n            }\n        }\n\n\n        System.out.println(\"使用getAnnotation的结果:\"+clazz.getAnnotation(FilterPath.class));\n\n\n        /**\n         * 执行结果(当前类拥有该注解FilterPath,则不会从CC父类寻找)\n         1:/web/update\n         1:/web/add\n         1:/web/delete\n         -----------------\n         2:/web/update\n         2:/web/add\n         2:/web/delete\n         使用getAnnotation的结果:null\n         */\n    }\n}\n"],["body","\n"],["headingLink","新增的两种elementtype"],["heading","新增的两种ElementType"],["body","\n"],["body","以前注解只能标注在一个声明(如字段、类、方法)上"],["body","\n"],["body","新增的TYPE_PARAMETER可以用于标注类型参数，而TYPE_USE则可以用于标注任意类型(不包括class)"],["body","\n"],["body","//TYPE_PARAMETER 标注在类型参数上\nclass D<@Parameter T> { }\n\n//TYPE_USE则可以用于标注任意类型(不包括class)\n//用于父类或者接口\nclass Image implements @Rectangular Shape { }\n\n//用于构造函数\nnew @Path String(\"/usr/bin\")\n\n//用于强制转换和instanceof检查,注意这些注解中用于外部工具，它们不会对类型转换或者instanceof的检查行为带来任何影响。\nString path=(@Path String)input;\nif(input instanceof @Path String)\n\n//用于指定异常\npublic Person read() throws @Localized IOException.\n\n//用于通配符绑定\nList<@ReadOnly ? extends Person>\nList<? extends @ReadOnly Person>\n\n@NotNull String.class //非法，不能标注class\nimport java.lang.@NotNull String //非法，不能标注import\n"],["body","\n"],["body","\n"],["body","这里主要说明一下TYPE_USE，类型注解用来支持在Java的程序中做强类型检查，配合第三方插件工具（如Checker Framework），可以在编译期检测出runtime error（如UnsupportedOperationException、NullPointerException异常），避免异常延续到运行期才发现，从而提高代码质量，这就是类型注解的主要作用。总之Java 8 新增加了两个注解的元素类型ElementType.TYPE_USE 和ElementType.TYPE_PARAMETER ，通过它们，我们可以把注解应用到各种新场合中。"],["body","\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/基于jdk1.8的Arrays.sort.html"],["title","基于jdk1.8的Arrays.sort.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n\n"],["body","本文基于 java1.8_251 版本的 Arrays.sort方法，关于整数数组排序的方法"],["body","\n"],["body","方法签名为 java.util.Arrays#sort(int[])"],["body","\n"],["body","其内部调用的 是 DualPivotQuicksort.sort 方法"],["body","\n"],["body","Arrays.sort 内部基于 多种排序算法\n\n"],["body","当数组中的元素 基本有序时， 采用 改进的归并排序"],["body","\n"],["body","当数组的个数 较少，且基本有序，采用 传统的插入排序 否则 采用 双元素插入排序"],["body","\n"],["body","当数组中的元素 无序时 采用 双枢纽 快速排序"],["body","\n\n"],["body","\n\n"],["h1","DualPivotQuicksort.sort"],["body","\n"],["headingLink","流程图"],["heading","流程图"],["body","\n"],["body","\n"],["headingLink","code"],["heading","code"],["body","\n"],["body","{\n        // Use Quicksort on small arrays\n        if (right - left < QUICKSORT_THRESHOLD) {\n            sort(a, left, right, true); //小数组 采用 插入排序\n            return;\n        }\n\n        /*\n         * Index run[i] is the start of i-th run\n         * (ascending or descending sequence).\n         */\n        int[] run = new int[MAX_RUN_COUNT + 1];\n        int count = 0; run[0] = left;\n\n        // Check if the array is nearly sorted\n\t\t......//判断数组是否是 基本有序的,如果基本有序 则直接 采用归并排序\n\n        // Check special cases\n        // Implementation note: variable \"right\" is increased by 1.\n        if (run[count] == right++) { // The last run contains one element\n            run[++count] = right;\n        } else if (count == 1) { // The array is already sorted，已经有序\n            return;\n        }\n\n...... //采用改进的归并排序\n"],["body","\n"],["h1","判断数组是否基本有序"],["body","\n"],["headingLink","如何判断"],["heading","如何判断"],["body","\n\n"],["body","任意数组都可以看作 由  正序数列+逆序数列的 组合，故使用 run[count]=k，记录 第 count个数列的 结束索引的位置为K"],["body","\n"],["body","当第 run数组的大小超过了 MAX_RUN_LENGTH 则认为 无序"],["body","\n"],["body","当 count 为1则认为数组 已经排序好"],["body","\n\n"],["headingLink","code-1"],["heading","code"],["body","\n"],["body","        for (int k = left; k < right; run[count] = k) {\n            if (a[k] < a[k + 1]) { // ascending\n                while (++k <= right && a[k - 1] <= a[k]);\n            } else if (a[k] > a[k + 1]) { // descending\n                while (++k <= right && a[k - 1] >= a[k]);\n                for (int lo = run[count] - 1, hi = k; ++lo < --hi; ) {\n                    int t = a[lo]; a[lo] = a[hi]; a[hi] = t;\n                }\n            } else { // equal\n                for (int m = MAX_RUN_LENGTH; ++k <= right && a[k - 1] == a[k]; ) {\n                    if (--m == 0) {\n                        sort(a, left, right, true);\n                        return;\n                    }\n                }\n            }\n\n            /*\n             * The array is not highly structured,\n             * use Quicksort instead of merge sort.\n             */\n            if (++count == MAX_RUN_COUNT) {\n                sort(a, left, right, true);\n                return;\n            }\n        }\n\n\n        // Check special cases\n        // Implementation note: variable \"right\" is increased by 1.\n        if (run[count] == right++) { // The last run contains one element\n            run[++count] = right;\n        } else if (count == 1) { // The array is already sorted，已经有序\n            return;\n        }\n"],["body","\n"],["h1","二路归并排序"],["body","\n"],["headingLink","原理"],["heading","原理"],["body","\n\n"],["body","循环的每一轮迭代都将数组a中的两个相邻的单调子序列“归并”为一个新的单调子序列，并存储在数组b中。"],["body","\n"],["body","循环中的每轮迭代将两个相邻的单调子序列进行归并，第一个子序列的范围是run[k-2] - run[k-1], 第二个子序列的范围是run[k-1] - run[k]，内层循环每次迭代都将k增加2。同时last变量记录了归并得到的新的子序列的个数，同时合并run 数组的内容。"],["body","\n\n"],["body","**PS：**这里需要注意，如果a数组中的子序列个数是奇数，那么最后一个子序列就无法进行配对、归并操作，此时，直接将这个子序列复制到b中。 "],["body","\n\n"],["body","每轮迭代以后，子序列的数目都会减少，因此，反复地进行迭代归并后，最终会使得整个数组只包含1个单调递增的子序列，此时整个数组排序完成。"],["body","\n"],["body","因此，每轮迭代后，交换a、b指针，继续执行下一轮迭代时，同样对a数组进行归并，存储在b数组中。就这样，利用a和b代表的存储空间反复的进行归并，就可以完成数组的排序。107-108行的代码完成了交换a和b指针的工作"],["body","\n\n"],["headingLink","code-2"],["heading","code"],["body","\n"],["body","        // Determine alternation base for merge\n        byte odd = 0;\n        for (int n = 1; (n <<= 1) < count; odd ^= 1);\n\n        // Use or create temporary array b for merging\n        int[] b;                 // temp array; alternates with a\n        int ao, bo;              // array offsets from 'left'\n        int blen = right - left; // space needed for b\n        if (work == null || workLen < blen || workBase + blen > work.length) {\n            work = new int[blen];\n            workBase = 0;\n        }\n        if (odd == 0) {\n            System.arraycopy(a, left, work, workBase, blen);\n            b = a;\n            bo = 0;\n            a = work;\n            ao = workBase - left;\n        } else {\n            b = work;\n            ao = 0;\n            bo = workBase - left;\n        }\n\t\t//以上是初始化的操作\n\n        // Merging\n        for (int last; count > 1; count = last) {\n            for (int k = (last = 0) + 2; k <= count; k += 2) {\n                int hi = run[k], mi = run[k - 1];\n                for (int i = run[k - 2], p = i, q = mi; i < hi; ++i) {\n                    if (q >= hi || p < mi && a[p + ao] <= a[q + ao]) {\n                        b[i + bo] = a[p++ + ao];\n                    } else {\n                        b[i + bo] = a[q++ + ao];\n                    }\n                }\n                run[++last] = hi;\n            }\n            if ((count & 1) != 0) {\n                for (int i = right, lo = run[count - 1]; --i >= lo;\n                    b[i + bo] = a[i + ao]\n                );\n                run[++last] = right;\n            }\n            int[] t = a; a = b; b = t;\n            int o = ao; ao = bo; bo = o;\n        }\n    }\n"],["body","\n"],["h1","改进的快速排序"],["body","\n"],["headingLink","改进的快速排序整体流程图"],["heading","改进的快速排序整体流程图"],["body","\n"],["body","\n"],["headingLink","代码"],["heading","代码"],["body","\n"],["body","{\n        int length = right - left + 1;\n\n        // Use insertion sort on tiny arrays\n        if (length < INSERTION_SORT_THRESHOLD) {\n            if (leftmost) {\n                ......//传统插入排序\n            } else {\n         \t\t......//双元素插入排序\n            }\n            return;\n        }\n\n        ...... //计算双枢纽位置\n            \n\t\t//五个点各不相等则 采用 双枢纽\n        if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {\n\t\t\t......//双枢纽划分\n            // Sort left and right parts recursively, excluding known pivots\n            sort(a, left, less - 2, leftmost);\n            sort(a, great + 2, right, false);\n\n            /*\n             * If center part is too large (comprises > 4/7 of the array),\n             * swap internal pivot values to ends.\n             */\n            if (less < e1 && e5 < great) {\n                ......//处理中间区间过长的问题\n            }\n\n            // Sort center part recursively\n            sort(a, less, great, false);\n\n        } else { // Partitioning with one pivot\n            ......//单枢纽划分\n            sort(a, left, less - 1, leftmost);\n            sort(a, great + 1, right, false);\n        }\n    }\n"],["body","\n"],["headingLink","双枢纽排序"],["heading","双枢纽排序"],["body","\n"],["headingLink","流程图-1"],["heading","流程图"],["body","\n"],["body","\n"],["headingLink","寻找双枢纽位置"],["heading","寻找双枢纽位置"],["body","\n"],["body","\n"],["body","java 279~312"],["body","\n"],["body","\n"],["body","        // Inexpensive approximation of length / 7 取差不多数组长度的1/7\n        int seventh = (length >> 3) + (length >> 6) + 1;\n        /*\n         * Sort five evenly spaced elements around (and including) the\n         * center element in the range. These elements will be used for\n         * pivot selection as described below. The choice for spacing\n         * these elements was empirically determined to work well on\n         * a wide variety of inputs.\n         * 从中间点 分别向 左右扩展 两个点，间距取大约数组长度的1/7，并将这五个点排序\n         */\n        int e3 = (left + right) >>> 1; // The midpoint\n        int e2 = e3 - seventh;\n        int e1 = e2 - seventh;\n        int e4 = e3 + seventh;\n        int e5 = e4 + seventh;\n\n        // Sort these elements using insertion sort\n        if (a[e2] < a[e1]) { int t = a[e2]; a[e2] = a[e1]; a[e1] = t; }\n\n        if (a[e3] < a[e2]) { int t = a[e3]; a[e3] = a[e2]; a[e2] = t;\n            if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n        }\n        if (a[e4] < a[e3]) { int t = a[e4]; a[e4] = a[e3]; a[e3] = t;\n            if (t < a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n            }\n        }\n        if (a[e5] < a[e4]) { int t = a[e5]; a[e5] = a[e4]; a[e4] = t;\n            if (t < a[e3]) { a[e4] = a[e3]; a[e3] = t;\n                if (t < a[e2]) { a[e3] = a[e2]; a[e2] = t;\n                    if (t < a[e1]) { a[e2] = a[e1]; a[e1] = t; }\n                }\n            }\n        }\n"],["body","\n"],["headingLink","双枢纽划分"],["heading","双枢纽划分"],["body","\n"],["body","// 判断五个点是否都 各不相同\nif (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {\n    /*\n     * Use the second and fourth of the five sorted elements as pivots.\n     * These values are inexpensive approximations of the first and\n     * second terciles of the array. Note that pivot1 <= pivot2.\n     */\n    int pivot1 = a[e2];\n    int pivot2 = a[e4];\n\n    /*\n     * The first and the last elements to be sorted are moved to the\n     * locations formerly occupied by the pivots. When partitioning\n     * is complete, the pivots are swapped back into their final\n     * positions, and excluded from subsequent sorting.\n     */\n    a[e2] = a[left];\n    a[e4] = a[right];\n\n    /*\n     * Skip elements, which are less or greater than pivot values.\n     */\n    while (a[++less] < pivot1);\n    while (a[--great] > pivot2);\n\n    /*\n     * Partitioning:\n     *\n     *   left part           center part                   right part\n     * +--------------------------------------------------------------+\n     * |  < pivot1  |  pivot1 <= && <= pivot2  |    ?    |  > pivot2  |\n     * +--------------------------------------------------------------+\n     *               ^                          ^       ^\n     *               |                          |       |\n     *              less                        k     great\n     *\n     * Invariants:\n     *\n     *              all in (left, less)   < pivot1\n     *    pivot1 <= all in [less, k)     <= pivot2\n     *              all in (great, right) > pivot2\n     *\n     * Pointer k is the first index of ?-part.\n     */\n    outer:\n    for (int k = less - 1; ++k <= great; ) {\n        int ak = a[k];\n        if (ak < pivot1) { // Move a[k] to left part\n            a[k] = a[less];\n            /*\n             * Here and below we use \"a[i] = b; i++;\" instead\n             * of \"a[i++] = b;\" due to performance issue.\n             */\n            a[less] = ak;\n            ++less;\n        } else if (ak > pivot2) { // Move a[k] to right part\n            while (a[great] > pivot2) {\n                if (great-- == k) {\n                    break outer;\n                }\n            }\n            if (a[great] < pivot1) { // a[great] <= pivot2\n                a[k] = a[less];\n                a[less] = a[great];\n                ++less;\n            } else { // pivot1 <= a[great] <= pivot2\n                a[k] = a[great];\n            }\n            /*\n             * Here and below we use \"a[i] = b; i--;\" instead\n             * of \"a[i--] = b;\" due to performance issue.\n             */\n            a[great] = ak;\n            --great;\n        }\n    }\n\n    // Swap pivots into their final positions\n    a[left]  = a[less  - 1]; a[less  - 1] = pivot1;\n    a[right] = a[great + 1]; a[great + 1] = pivot2;\n\n    // Sort left and right parts recursively, excluding known pivots\n    sort(a, left, less - 2, leftmost);\n    sort(a, great + 2, right, false);\n\n    /*\n     * If center part is too large (comprises > 4/7 of the array),\n     * swap internal pivot values to ends.\n     */\n    if (less < e1 && e5 < great) {\n       ...... //处理 中间区间过大的问题\n    }\n\n    // Sort center part recursively\n    sort(a, less, great, false);\n"],["body","\n"],["headingLink","单枢纽划分"],["heading","单枢纽划分"],["body","\n"],["body","{ // Partitioning with one pivot\n            /*\n             * Use the third of the five sorted elements as pivot.\n             * This value is inexpensive approximation of the median.\n             */\n            int pivot = a[e3];\n\n            /*\n             * Partitioning degenerates to the traditional 3-way\n             * (or \"Dutch National Flag\") schema:\n             *\n             *   left part    center part              right part\n             * +-------------------------------------------------+\n             * |  < pivot  |   == pivot   |     ?    |  > pivot  |\n             * +-------------------------------------------------+\n             *              ^              ^        ^\n             *              |              |        |\n             *             less            k      great\n             *\n             * Invariants:\n             *\n             *   all in (left, less)   < pivot\n             *   all in [less, k)     == pivot\n             *   all in (great, right) > pivot\n             *\n             * Pointer k is the first index of ?-part.\n             */\n            for (int k = less; k <= great; ++k) {\n                if (a[k] == pivot) {\n                    continue;\n                }\n                int ak = a[k];\n                if (ak < pivot) { // Move a[k] to left part\n                    a[k] = a[less];\n                    a[less] = ak;\n                    ++less;\n                } else { // a[k] > pivot - Move a[k] to right part\n                    while (a[great] > pivot) {\n                        --great;\n                    }\n                    if (a[great] < pivot) { // a[great] <= pivot\n                        a[k] = a[less];\n                        a[less] = a[great];\n                        ++less;\n                    } else { // a[great] == pivot\n                        /*\n                         * Even though a[great] equals to pivot, the\n                         * assignment a[k] = pivot may be incorrect,\n                         * if a[great] and pivot are floating-point\n                         * zeros of different signs. Therefore in float\n                         * and double sorting methods we have to use\n                         * more accurate assignment a[k] = a[great].\n                         */\n                        a[k] = pivot;\n                    }\n                    a[great] = ak;\n                    --great;\n                }\n            }\n\n            /*\n             * Sort left and right parts recursively.\n             * All elements from center part are equal\n             * and, therefore, already sorted.\n             */\n            sort(a, left, less - 1, leftmost);\n            sort(a, great + 1, right, false);\n        }\n"],["body","\n"],["headingLink","中间区间过大的问题"],["heading","中间区间过大的问题"],["body","\n\n"],["body","大于数组的 4/7 就认为 中间区间过大"],["body","\n"],["body","将其中 等于 pivot1 pivot2的数据放到 privot1的最右边 或者 privot2的最左边"],["body","\n\n"],["body","            /*\n             * If center part is too large (comprises > 4/7 of the array),\n             * swap internal pivot values to ends.\n             */\n            if (less < e1 && e5 < great) {\n                /*\n                 * Skip elements, which are equal to pivot values.\n                 */\n                while (a[less] == pivot1) {\n                    ++less;\n                }\n\n                while (a[great] == pivot2) {\n                    --great;\n                }\n\n                /*\n                 * Partitioning:\n                 *\n                 *   left part         center part                  right part\n                 * +----------------------------------------------------------+\n                 * | == pivot1 |  pivot1 < && < pivot2  |    ?    | == pivot2 |\n                 * +----------------------------------------------------------+\n                 *              ^                        ^       ^\n                 *              |                        |       |\n                 *             less                      k     great\n                 *\n                 * Invariants:\n                 *\n                 *              all in (*,  less) == pivot1\n                 *     pivot1 < all in [less,  k)  < pivot2\n                 *              all in (great, *) == pivot2\n                 *\n                 * Pointer k is the first index of ?-part.\n                 */\n                outer:\n                for (int k = less - 1; ++k <= great; ) {\n                    int ak = a[k];\n                    if (ak == pivot1) { // Move a[k] to left part\n                        a[k] = a[less];\n                        a[less] = ak;\n                        ++less;\n                    } else if (ak == pivot2) { // Move a[k] to right part\n                        while (a[great] == pivot2) {\n                            if (great-- == k) {\n                                break outer;\n                            }\n                        }\n                        if (a[great] == pivot1) { // a[great] < pivot2\n                            a[k] = a[less];\n                            /*\n                             * Even though a[great] equals to pivot1, the\n                             * assignment a[less] = pivot1 may be incorrect,\n                             * if a[great] and pivot1 are floating-point zeros\n                             * of different signs. Therefore in float and\n                             * double sorting methods we have to use more\n                             * accurate assignment a[less] = a[great].\n                             */\n                            a[less] = pivot1;\n                            ++less;\n                        } else { // pivot1 < a[great] < pivot2\n                            a[k] = a[great];\n                        }\n                        a[great] = ak;\n                        --great;\n                    }\n                }\n            }\n"],["body","\n"],["headingLink","传统插入排序"],["heading","传统插入排序"],["body","\n"],["body","                /*\n                 * Traditional (without sentinel) insertion sort,\n                 * optimized for server VM, is used in case of\n                 * the leftmost part.\n                 */\n                for (int i = left, j = i; i < right; j = ++i) {\n                    int ai = a[i + 1];\n                    while (ai < a[j]) {\n                        a[j + 1] = a[j];\n                        if (j-- == left) {\n                            break;\n                        }\n                    }\n                    a[j + 1] = ai;\n                }\n"],["body","\n"],["headingLink","双元素插入排序"],["heading","双元素插入排序"],["body","\n"],["body","       /*\n                 * Skip the longest ascending sequence.\n                 */\n                do {\n                    if (left >= right) {\n                        return;\n                    }\n                } while (a[++left] >= a[left - 1]);\n\n                /*\n                 * Every element from adjoining part plays the role\n                 * of sentinel, therefore this allows us to avoid the\n                 * left range check on each iteration. Moreover, we use\n                 * the more optimized algorithm, so called pair insertion\n                 * sort, which is faster (in the context of Quicksort)\n                 * than traditional implementation of insertion sort.\n                 */\n                for (int k = left; ++left <= right; k = ++left) {\n                    int a1 = a[k], a2 = a[left];\n\n                    if (a1 < a2) {\n                        a2 = a1; a1 = a[left];\n                    }\n                    while (a1 < a[--k]) {\n                        a[k + 2] = a[k];\n                    }\n                    a[++k + 1] = a1;\n\n                    while (a2 < a[--k]) {\n                        a[k + 1] = a[k];\n                    }\n                    a[k + 1] = a2;\n                }\n                int last = a[right];\n\n                while (last < a[--right]) {\n                    a[right + 1] = a[right];\n                }\n                a[right + 1] = last;\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/foreach语法糖.html"],["title","foreach语法糖.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","foreach是 Java中的 语法糖"],["body","\n"],["h1","数组"],["body","\n"],["body","如果遇到数组，则将 其 编译成普通 for循环"],["body","\n"],["body","编译前"],["body","\n"],["body","        String[] a = new String[]{\"1\",\"2\"};\n\n        for (String s : a) {\n            System.out.println(s);\n        }\n"],["body","\n"],["body","编译后"],["body","\n"],["body","        String[] a = new String[]{\"1\", \"2\"};\n        String[] var8 = a;\n        int var4 = a.length;\n\n        for(int var5 = 0; var5 < var4; ++var5) {\n            String s = var8[var5];\n            System.out.println(s);\n        }\n"],["body","\n"],["h1","迭代器"],["body","\n"],["body","如果遇到集合等其他实现了迭代器的接口，则编译成 迭代器 迭代"],["body","\n"],["body","        List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8);\n        for (Integer integer : integers) {\n            System.out.println(integer);\n        }\n"],["body","\n"],["body","        List<Integer> integers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8);\n        Iterator var2 = integers.iterator();\n\n        while(var2.hasNext()) {\n            Integer integer = (Integer)var2.next();\n            System.out.println(integer);\n   s     }\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/代码异味.html"],["title","代码异味.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","参考链接"],["body","\n"],["body","名称项"],["body","英文"],["body","表现场景"],["body","解决办法"],["body","\n"],["body","重复代码"],["body","Duplicated Code"],["body","同一个 class 内的两个函数含有相同的表达式"],["body","两个互为兄弟的 subclass 内含相同的表达式"],["body","两个毫不相干的 classes 内出现 Duplicate Code"],["body","提出公共代码"],["body","\n"],["body","过长方法"],["body","Long Method"],["body","方法过长"],["body","提出模块"],["body","\n"],["body","大类"],["body","Large Class"],["body","把太多的责任交给了一个类"],["body","一个方法一个职责"],["body","\n"],["body","过长参数列表"],["body","Long Parameter List"],["body","抽象成类"],["body","\n"],["body","发散式变动"],["body","Divergent Change"],["body","不同的变化作用于单个类"],["body","重构，保持类功能单一,把相对不变的和相对变化相隔离"],["body","\n"],["body","霰弹式变动"],["body","Shotgun Surgery"],["body","对系统一个地方的改变涉及到其他许多地方的相关改变"],["body","提取变化部分为公共的类"],["body","\n"],["body","依恋情结"],["body","Feature Envy"],["body","一个类的方法频繁用 get 方法存取其他类的状态进行计算"],["body","将总是一起变化的东西放在一块儿。［数据］和[引用这些数据]的行为总是一起变化的"],["body","\n"],["body","数据泥团"],["body","Data Clumps"],["body","可以在很多地方看到相同的三或四笔数据项"],["body","[总是绑在一起出现的数据]真应该放进属于它们自己的对象中"],["body","\n"],["body","基本型别偏执"],["body","Primitive Obsession"],["body","基本数据类型 对象化"],["body","反复出现的一组参数，抽象成类 "],["body","有关联的多个数组，抽象成类"],["body","\n"],["body","switch 语句"],["body","Switch Statements"],["body","state/strategy/多态"],["body","\n"],["body","平等继承体系"],["body","Parallel Inheritance Hierarchies"],["body","每当你为某个class增加一个subclass，必须也为另一个class相应增加一个subclass"],["body","将这 两个继承体系合并优化,有一个类是可以去掉继承关系"],["body","\n"],["body","冗赘类"],["body","Lazy Class"],["body","删除"],["body","\n"],["body","夸夸其谈未来性"],["body","Speculative Generality"],["body","多余的未来的设计"],["body","不要过多设计"],["body","\n"],["body","临时字段"],["body","Temporary Field"],["body","临时变量命名"],["body","抽象成类"],["body","\n"],["body","过度耦合的消息链"],["body","MessageChains"],["body","用户向一个对象索求另一个对象，然后再向后者索求另一个对象"],["body","获取对象一步到位"],["body","\n"],["body","中间转手人"],["body","Middle Man"],["body","某个类接口有一半的方法都委托给其它类,委托的过度使用"],["body","继承代替委托"],["body","\n"],["body","太亲密"],["body","Inappropriate Intimacy"],["body","两个类彼此使用对方私有的成员或方法"],["body","划清界限拆散／合并／单向联系"],["body","\n"],["body","不同接口的相似类"],["body","Alternative Classes with Different Interfaces"],["body","合并"],["body","\n"],["body","不完善的类库"],["body","Incomplete Library Class"],["body","包一层函数或包装成新的类"],["body","\n"],["body","纯稚的数据类"],["body","Data Class"],["body","将相关操作封装进去，减少 public 成员变量"],["body","\n"],["body","被拒绝的遗赠"],["body","父类里面方法很多，子类只用有限几个,继承体系设计错误"],["body","用代理替代继承关系"],["body","\n"],["body","过多注释"],["body","Comments"],["body","避免用注释解释代码，而是说明代码的目的，背景等，好代码自己会说话"],["body","\n\n\n"],["body","Bloaters(膨胀)"],["body","\n"],["body","\n"],["body","代码,方法,类 随着时间 增长到了难以使用的巨大比例"],["body","\n"],["body","\n"],["h1","重构技巧"],["body","\n"],["headingLink","重构条件表达式"],["heading","重构条件表达式"],["body","\n"],["body","简化条件表达式"],["body","\n"],["body","//重构前\nif (date.before(SUMMER_START) || date.after(SUMMER_END)) {\n  charge = quantity * winterRate + winterServiceCharge;\n}\nelse {\n  charge = quantity * summerRate;\n}\n\n//重构后\nif (isSummer(date)) {\n  charge = summerCharge(quantity);\n}\nelse {\n  charge = winterCharge(quantity);\n}\n"],["body","\n"],["body","合并条件表达式"],["body","\n"],["body","//重构前\ndouble disabilityAmount() {\n  if (seniority < 2) {\n    return 0;\n  }\n  if (monthsDisabled > 12) {\n    return 0;\n  }\n  if (isPartTime) {\n    return 0;\n  }\n  // Compute the disability amount.\n  // ...\n}\n//重构后\ndouble disabilityAmount() {\n  if (isNotEligibleForDisability()) {\n    return 0;\n  }\n  // Compute the disability amount.\n  // ...\n}\n"],["body","\n"],["body","重复代码提取"],["body","\n"],["body","//重构前\nif (isSpecialDeal()) {\n  total = price * 0.95;\n  send();\n}\nelse {\n  total = price * 0.98;\n  send();\n}\n//重构后\nif (isSpecialDeal()) {\n  total = price * 0.95;\n}\nelse {\n  total = price * 0.98;\n}\nsend();\n"],["body","\n"],["body","嵌套条件判断完毕后,立即返回"],["body","\n"],["body","//重构前\npublic double getPayAmount() {\n  double result;\n  if (isDead){\n    result = deadAmount();\n  }\n  else {\n    if (isSeparated){\n      result = separatedAmount();\n    }\n    else {\n      if (isRetired){\n        result = retiredAmount();\n      }\n      else{\n        result = normalPayAmount();\n      }\n    }\n  }\n  return result;\n}\n//重构后\npublic double getPayAmount() {\n  if (isDead){\n    return deadAmount();\n  }\n  if (isSeparated){\n    return separatedAmount();\n  }\n  if (isRetired){\n    return retiredAmount();\n  }\n  return normalPayAmount();\n}\n"],["body","\n"],["body","条件处理逻辑过多时使用多态"],["body","\n"],["body","//重构前\nclass Bird {\n  // ...\n  double getSpeed() {\n    switch (type) {\n      case EUROPEAN:\n        return getBaseSpeed();\n      case AFRICAN:\n        return getBaseSpeed() - getLoadFactor() * numberOfCoconuts;\n      case NORWEGIAN_BLUE:\n        return (isNailed) ? 0 : getBaseSpeed(voltage);\n    }\n    throw new RuntimeException(\"Should be unreachable\");\n  }\n}\n\n//重构后\nabstract class Bird {\n  // ...\n  abstract double getSpeed();\n}\n\nclass European extends Bird {\n  double getSpeed() {\n    return getBaseSpeed();\n  }\n}\nclass African extends Bird {\n  double getSpeed() {\n    return getBaseSpeed() - getLoadFactor() * numberOfCoconuts;\n  }\n}\nclass NorwegianBlue extends Bird {\n  double getSpeed() {\n    return (isNailed) ? 0 : getBaseSpeed(voltage);\n  }\n}\n\n// Somewhere in client code\nspeed = bird.getSpeed();\n"],["body","\n"],["body","给空值以默认值,默认行为"],["body","\n"],["body","//重构前\nif (customer == null) {\n  plan = BillingPlan.basic();\n}\nelse {\n  plan = customer.getPlan();\n}\nclass NullCustomer extends Customer {\n  boolean isNull() {\n    return true;\n  }\n  Plan getPlan() {\n    return new NullPlan();\n  }\n  // Some other NULL functionality.\n}\n//重构后\n// Replace null values with Null-object.\ncustomer = (order.customer != null) ?\n  order.customer : new NullCustomer();\n\n// Use Null-object as if it's normal subclass.\nplan = customer.getPlan();\n"],["body","\n"],["body","前置 assert 检查\n士大夫"],["body","\n"],["body","double getExpenseLimit() {\n  Assert.isTrue(expenseLimit != NULL_EXPENSE || primaryProject != null);\n\n  return (expenseLimit != NULL_EXPENSE) ?\n    expenseLimit:\n    primaryProject.getMemberExpenseLimit();\n}\n"],["body","\n"],["headingLink","方法组合"],["heading","方法组合"],["body","\n"],["body","抽取方法"],["body","\n"],["body","//重构前\nvoid printOwing() {\n  printBanner();\n\n  // Print details.\n  System.out.println(\"name: \" + name);\n  System.out.println(\"amount: \" + getOutstanding());\n}\nvoid printOwing() {\n  printBanner();\n  printDetails(getOutstanding());\n}\n//重构后\nvoid printDetails(double outstanding) {\n  System.out.println(\"name: \" + name);\n  System.out.println(\"amount: \" + outstanding);\n}\n"],["body","\n"],["body","合并方法"],["body","\n"],["body","//重构前\nclass PizzaDelivery {\n  // ...\n  int getRating() {\n    return moreThanFiveLateDeliveries() ? 2 : 1;\n  }\n  boolean moreThanFiveLateDeliveries() {\n    return numberOfLateDeliveries > 5;\n  }\n}\n//重构后\nclass PizzaDelivery {\n  // ...\n  int getRating() {\n    return numberOfLateDeliveries > 5 ? 2 : 1;\n  }\n}\n"],["body","\n"],["body","抽取变量"],["body","\n"],["body","变量名尽量保持 自注释"],["body","\n"],["body","//重构前\nvoid renderBanner() {\n  if ((platform.toUpperCase().indexOf(\"MAC\") > -1) &&\n       (browser.toUpperCase().indexOf(\"IE\") > -1) &&\n        wasInitialized() && resize > 0 )\n  {\n    // do something\n  }\n}\n//重构后\nvoid renderBanner() {\n  final boolean isMacOs = platform.toUpperCase().indexOf(\"MAC\") > -1;\n  final boolean isIE = browser.toUpperCase().indexOf(\"IE\") > -1;\n  final boolean wasResized = resize > 0;\n\n  if (isMacOs && isIE && wasInitialized() && wasResized) {\n    // do something\n  }\n}\n"],["body","\n"],["body","合并简单临时变量"],["body","\n"],["body","//重构前\nboolean hasDiscount(Order order) {\n  double basePrice = order.basePrice();\n  return basePrice > 1000;\n}\n//重构后\nboolean hasDiscount(Order order) {\n  return order.basePrice() > 1000;\n}\n"],["body","\n"],["body","使用查询替换临时变量"],["body","\n"],["body","//重构前\ndouble calculateTotal() {\n  double basePrice = quantity * itemPrice;\n  if (basePrice > 1000) {\n    return basePrice * 0.95;\n  }\n  else {\n    return basePrice * 0.98;\n  }\n}\n//重构后\ndouble calculateTotal() {\n  if (basePrice() > 1000) {\n    return basePrice() * 0.95;\n  }\n  else {\n    return basePrice() * 0.98;\n  }\n}\ndouble basePrice() {\n  return quantity * itemPrice;\n}\n"],["body","\n"],["body","分离临时变量"],["body","\n"],["body","double temp = 2 * (height + width);\nSystem.out.println(temp);\ntemp = height * width;\nSystem.out.println(temp);\nfinal double perimeter = 2 * (height + width);\nSystem.out.println(perimeter);\nfinal double area = height * width;\nSystem.out.println(area);\n"],["body","\n"],["body","不要对入参进行修改"],["body","\n"],["body","//重构前\nint discount(int inputVal, int quantity) {\n  if (inputVal > 50) {\n    inputVal -= 2;\n  }\n  // ...\n}\n//重构后\nint discount(int inputVal, int quantity) {\n  int result = inputVal;\n  if (inputVal > 50) {\n    result -= 2;\n  }\n  // ...\n}\n"],["body","\n"],["body","多条件计算使用对象"],["body","\n"],["body","//重构前\nclass Order {\n  // ...\n  public double price() {\n    double primaryBasePrice;\n    double secondaryBasePrice;\n    double tertiaryBasePrice;\n    // Perform long computation.\n  }\n}\nclass Order {\n  // ...\n  public double price() {\n    return new PriceCalculator(this).compute();\n  }\n}\n//重构后\nclass PriceCalculator {\n  private double primaryBasePrice;\n  private double secondaryBasePrice;\n  private double tertiaryBasePrice;\n\n  public PriceCalculator(Order order) {\n    // Copy relevant information from the\n    // order object.\n  }\n\n  public double compute() {\n    // Perform long computation.\n  }\n}\n"],["body","\n"],["body","使用算法替换代码段"],["body","\n"],["body","//重构前\nString foundPerson(String[] people){\n  for (int i = 0; i < people.length; i++) {\n    if (people[i].equals(\"Don\")){\n      return \"Don\";\n    }\n    if (people[i].equals(\"John\")){\n      return \"John\";\n    }\n    if (people[i].equals(\"Kent\")){\n      return \"Kent\";\n    }\n  }\n  return \"\";\n}\n//重构后\nString foundPerson(String[] people){\n  List candidates =\n    Arrays.asList(new String[] {\"Don\", \"John\", \"Kent\"});\n  for (int i=0; i < people.length; i++) {\n    if (candidates.contains(people[i])) {\n      return people[i];\n    }\n  }\n  return \"\";\n}\n"],["body","\n"],["headingLink","组织数据"],["heading","组织数据"],["body","\n"],["body","使用对象替换数据类型"],["body","\n"],["body","Order\n\tCustomer String\n\nOrder\n\tCustomer Object\n\t\tname String\n"],["body","\n"],["headingLink","在对象之间移动功能"],["heading","在对象之间移动功能"],["body","\n"],["body","代理隐藏"],["body","\n"],["body","a获取b的对象 调用b的方法,\n\n//重构\n在 a中建一个方法 去调用b的方法\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/threadLocal.html"],["title","threadLocal.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JDK 中 ThreadLocal 的实现"],["body","\n"],["headingLink","threadlocal-是如何存储变量的"],["heading","ThreadLocal 是如何存储变量的"],["body","\n\n"],["body","\n"],["body","绑定在本地线程变量 中 Thread.ThreadLocal.ThreadLocalMap"],["body","\n"],["body","\n"],["body","\n"],["body","每个线程可能有多个 ThreadLocal\n"],["body","\n"],["body","\n\n"],["headingLink","threadlocalmap为什么要继承-weakreference"],["heading","ThreadLocalMap为什么要继承 WeakReference"],["body","\n\n"],["body","\n"],["body","ThreadLocalMap是与线程绑定在一起的, 而ThreadLocal 又与 ThreadLocalMap存在引用 ,但两者生命周期 可能会不一致,会导致内存泄漏的风险"],["body","\n"],["body","\n"],["body","\n"],["body","设置为 弱引用 可以在GC时 被回收"],["body","\n"],["body","\n\n"],["headingLink","threadlocalmap是如何避免内存泄漏的"],["heading","ThreadLocalMap是如何避免内存泄漏的"],["body","\n\n"],["body","\n"],["body","Entry是一个弱引用对象, 持有对ThreadLocal 的 弱引用"],["body","\n"],["body","\n"],["body","\n"],["body","在 调用"],["body","\n"],["body","get,set,remove 的方法时 ,都会清空 key为null 相应的 value\n"],["body","\n"],["body","\n"],["body","\n"],["body","只能保证 key 的弱引用,  value无法保证, 所以在不需要 LocalThread 之后  应调用一次清理"],["body","\n"],["body","\n\n"],["h1","ThreadLocalMap源码分析"],["body","\n"],["body","\n"],["body","每个线程都会有一个 ThreadLocalMap，用来存放当前线程 所有的 本地线程变量，key为 ThreadLocal对象，value为存放的值"],["body","\n"],["body","\n\n"],["body","ThreadLocalMap 内部是由 数组 hash实现"],["body","\n"],["body","hash冲突解决 使用 开放地址法中的 线性查找，往前寻找第一个空闲区域"],["body","\n\n"],["headingLink","初始化"],["heading","初始化"],["body","\n"],["body","使用ThreadLocal初始化"],["body","\n\n"],["body","初始化容量为16"],["body","\n"],["body","使用 ThreadLocal的 hashCode作为 目标散列对象"],["body","\n"],["body","默认扩容阈值是 2/3"],["body","\n\n"],["body","ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) {\n    table = new Entry[INITIAL_CAPACITY];\n    int i = firstKey.threadLocalHashCode & (INITIAL_CAPACITY - 1);\n    table[i] = new Entry(firstKey, firstValue);\n    size = 1;\n    setThreshold(INITIAL_CAPACITY);\n}\n"],["body","\n"],["body","使用ThreadLocalMap初始化"],["body","\n\n"],["body","循环取数据 放入到新的Map中"],["body","\n"],["body","如果产生冲突，则 索引下放到下一个"],["body","\n\n"],["body","private ThreadLocalMap(ThreadLocalMap parentMap) {\n    Entry[] parentTable = parentMap.table;\n    int len = parentTable.length;\n    setThreshold(len);\n    table = new Entry[len];\n\n    for (int j = 0; j < len; j++) {\n        Entry e = parentTable[j];\n        if (e != null) {\n            @SuppressWarnings(\"unchecked\")\n            ThreadLocal<Object> key = (ThreadLocal<Object>) e.get();\n            if (key != null) {\n                Object value = key.childValue(e.value);\n                Entry c = new Entry(key, value);\n                int h = key.threadLocalHashCode & (len - 1);\n                while (table[h] != null)\n                    h = nextIndex(h, len);\n                table[h] = c;\n                size++;\n            }\n        }\n    }\n}\n"],["body","\n"],["headingLink","放入元素"],["heading","放入元素"],["body","\n\n"],["body","\n"],["body","根据 hashCode计算 数组中的索引"],["body","\n"],["body","\n"],["body","\n"],["body","如果 entry是空闲的，则直接放入空闲地区"],["body","\n"],["body","\n"],["body","\n"],["body","如果 entry不是空闲的，则说明发生hash冲突"],["body","\n\n"],["body","如果在冲突过程中 遇到 失效的 key，则调用 replaceStaleEntry"],["body","\n"],["body","如果在冲突过程中 遇到 key本身，则直接替换value"],["body","\n\n"],["body","\n"],["body","\n"],["body","如果在冲突过程中 既没遇到 失效得key，也没遇到 key本身，且遇到 空闲 slot，"],["body","\n"],["body","则先调用一遍 启发式清理，如果没有清理出数据，且超过了阈值则扩容"],["body","\n"],["body","\n\n"],["body","private void set(ThreadLocal<?> key, Object value) {\n\n    // We don't use a fast path as with get() because it is at\n    // least as common to use set() to create new entries as\n    // it is to replace existing ones, in which case, a fast\n    // path would fail more often than not.\n\n    Entry[] tab = table;\n    int len = tab.length;\n    int i = key.threadLocalHashCode & (len-1);\n\n    for (Entry e = tab[i];\n         e != null;\n         e = tab[i = nextIndex(i, len)]) {\n        ThreadLocal<?> k = e.get();\n\n        if (k == key) {\n            e.value = value;\n            return;\n        }\n\n        if (k == null) {\n            replaceStaleEntry(key, value, i); //替换 当前无效引用\n            return;\n        }\n    }\n\n    tab[i] = new Entry(key, value);\n    int sz = ++size;\n    if (!cleanSomeSlots(i, sz) && sz >= threshold)\n        rehash();\n}\n"],["body","\n"],["headingLink","获取元素"],["heading","获取元素"],["body","\n"],["body","快慢路径"],["body","\n\n"],["body","如果第一个命中了则 直接返回"],["body","\n"],["body","如果没有命中，则线性探测"],["body","\n\n"],["body","private Entry getEntry(ThreadLocal<?> key) {\n    int i = key.threadLocalHashCode & (table.length - 1);\n    Entry e = table[i];\n    if (e != null && e.get() == key)\n        return e;\n    else\n        return getEntryAfterMiss(key, i, e);\n}\n\nprivate Entry getEntryAfterMiss(ThreadLocal<?> key, int i, Entry e) {\n    Entry[] tab = table;\n    int len = tab.length;\n    while (e != null) {\n        ThreadLocal<?> k = e.get();\n        if (k == key)\n        return e;\n        if (k == null)\n        expungeStaleEntry(i);\n        else\n            i = nextIndex(i, len);\n        e = tab[i];\n        }\n    return null;\n}\n"],["body","\n"],["headingLink","在哈希冲突过程中遇到-无效引用"],["heading","在哈希冲突过程中遇到 无效引用"],["body","\n\n"],["body","记录 当前无效引用的 连续非NULL 区间 上一个无效引用\n\n"],["body","如果 后向区间 存在 key本身，则交换 key 与 staleSlot的 位置，并调用一次 线性探测清理，与 启发式清理"],["body","\n"],["body","如果 后向区间 不存在 key本身，则直接取代staleSlot的位置，如果在当前区间内还探测到其他 无效Key则 进行 线性探测清理，与 启发式清理"],["body","\n\n"],["body","\n\n"],["body","private void replaceStaleEntry(ThreadLocal<?> key, Object value,\n                               int staleSlot) {\n    Entry[] tab = table;\n    int len = tab.length;\n    Entry e;\n\n    // Back up to check for prior stale entry in current run.\n    // We clean out whole runs at a time to avoid continual\n    // incremental rehashing due to garbage collector freeing\n    // up refs in \n    \n    (i.e., whenever the collector runs).\n    int slotToExpunge = staleSlot;\n    for (int i = prevIndex(staleSlot, len);\n         (e = tab[i]) != null;\n         i = prevIndex(i, len))\n        if (e.get() == null)\n            slotToExpunge = i;\n\n    // Find either the key or trailing null slot of run, whichever\n    // occurs first\n    for (int i = nextIndex(staleSlot, len);\n         (e = tab[i]) != null;\n         i = nextIndex(i, len)) {\n        ThreadLocal<?> k = e.get();\n\n        // If we find key, then we need to swap it\n        // with the stale entry to maintain hash table order.\n        // The newly stale slot, or any other stale slot\n        // encountered above it, can then be sent to expungeStaleEntry\n        // to remove or rehash all of the other entries in run.\n        if (k == key) {\n            e.value = value;\n\n            tab[i] = tab[staleSlot];\n            tab[staleSlot] = e;\n\n            // Start expunge at preceding stale entry if it exists\n            if (slotToExpunge == staleSlot)\n                slotToExpunge = i;\n            cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);\n            return;\n        }\n\n        // If we didn't find stale entry on backward scan, the\n        // first stale entry seen while scanning for key is the\n        // first still present in the run.\n        if (k == null && slotToExpunge == staleSlot)\n            slotToExpunge = i;\n    }\n\n    // If key not found, put new entry in stale slot\n    tab[staleSlot].value = null;\n    tab[staleSlot] = new Entry(key, value);\n\n    // If there are any other stale entries in run, expunge them\n    if (slotToExpunge != staleSlot)\n        cleanSomeSlots(expungeStaleEntry(slotToExpunge), len);\n}\n"],["body","\n"],["headingLink","线性清理"],["heading","线性清理"],["body","\n"],["body","输入与输出"],["body","\n"],["body","传入失效的key的索引，返回邻近的下一个 空闲 slot"],["body","\n"],["body","步骤"],["body","\n\n"],["body","清空当前 失效 slot"],["body","\n"],["body","清空 非NULL 区间的 失效 slot"],["body","\n"],["body","将冲突的 slot 尽量 往正确的索引移动"],["body","\n\n"],["body","private int expungeStaleEntry(int staleSlot) {\n    Entry[] tab = table;\n    int len = tab.length;\n\n    // expunge entry at staleSlot\n    tab[staleSlot].value = null;\n    tab[staleSlot] = null;\n    size--;\n\n    // Rehash until we encounter null\n    Entry e;\n    int i;\n    for (i = nextIndex(staleSlot, len);\n         (e = tab[i]) != null;\n         i = nextIndex(i, len)) {\n        ThreadLocal<?> k = e.get();\n        if (k == null) {\n            e.value = null;\n            tab[i] = null;\n            size--;\n        } else {\n            int h = k.threadLocalHashCode & (len - 1);\n            if (h != i) {\n                tab[i] = null;\n\n                // Unlike Knuth 6.4 Algorithm R, we must scan until\n                // null because multiple entries could have been stale.\n                while (tab[h] != null)\n                    h = nextIndex(h, len);\n                tab[h] = e;\n            }\n        }\n    }\n    return i;\n}\n"],["body","\n"],["headingLink","启发式清理"],["heading","启发式清理"],["body","\n"],["body","输入输出"],["body","\n"],["body","i不是 失效的key的索引即可"],["body","\n"],["body","n为扫描的 轮数，log2(n)"],["body","\n"],["body","逻辑"],["body","\n\n"],["body","按 连续的 非NULL段清理，故 n的元素 最多有 n/2段"],["body","\n\n"],["body","private boolean cleanSomeSlots(int i, int n) {\n    boolean removed = false;\n    Entry[] tab = table;\n    int len = tab.length;\n    do {\n        i = nextIndex(i, len);\n        Entry e = tab[i];\n        if (e != null && e.get() == null) {\n            n = len;\n            removed = true;\n            i = expungeStaleEntry(i);\n        }\n    } while ( (n >>>= 1) != 0);\n    return removed;\n}\n"],["body","\n"],["headingLink","全量清理"],["heading","全量清理"],["body","\n"],["body","\n"],["body","循环调用线性清理"],["body","\n"],["body","\n"],["body","private void expungeStaleEntries() {\n    Entry[] tab = table;\n    int len = tab.length;\n    for (int j = 0; j < len; j++) {\n        Entry e = tab[j];\n        if (e != null && e.get() == null)\n            expungeStaleEntry(j);\n    }\n}\n"],["body","\n"],["headingLink","扩容逻辑"],["heading","扩容逻辑"],["body","\n\n"],["body","3/4的阈值 扩容"],["body","\n"],["body","扩容是 2倍率"],["body","\n\n"],["body","private void rehash() {\n    expungeStaleEntries();\n\n    // Use lower threshold for doubling to avoid hysteresis\n    if (size >= threshold - threshold / 4)\n        resize();\n}\n\nprivate void resize() {\n    Entry[] oldTab = table;\n    int oldLen = oldTab.length;\n    int newLen = oldLen * 2;\n    Entry[] newTab = new Entry[newLen];\n    int count = 0;\n\n    for (int j = 0; j < oldLen; ++j) {\n        Entry e = oldTab[j];\n        if (e != null) {\n            ThreadLocal<?> k = e.get();\n            if (k == null) {\n                e.value = null; // Help the GC\n            } else {\n                int h = k.threadLocalHashCode & (newLen - 1);\n                while (newTab[h] != null)\n                    h = nextIndex(h, newLen);\n                newTab[h] = e;\n                count++;\n            }\n        }\n    }\n\n    setThreshold(newLen);\n    size = count;\n    table = newTab;\n}\n"],["body","\n"],["h1","ThreadLocal扩展"],["body","\n"],["headingLink","可继承的threadlocal"],["heading","可继承的ThreadLocal"],["body","\n"],["body","ThreadLocal.ThreadLocalMap inheritableThreadLocals = null;\n"],["body","\n"],["body","在本线程 创建子线程 会把 inheritableThreadLocals 传递 给子线程"],["body","\n"],["body","InheritableThreadLocal\n"],["body","\n"],["body","源码"],["body","\n"],["body","if (inheritThreadLocals && parent.inheritableThreadLocals != null)\n    this.inheritableThreadLocals =\n        ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);\n/* Stash the specified stack size in case the VM cares */\n"],["body","\n"],["body","示例"],["body","\n"],["body","public static void main(String[] args) {\n    ThreadLocal<String> a = new ThreadLocal<>();\n    a.set(\"xjq\");\n\n    InheritableThreadLocal<String> b = new InheritableThreadLocal<>();\n    b.set(\"xjq\");\n    new Thread(()->{\n        String s = b.get();\n        System.out.println(s);\n    }).start();\n\n}\n"],["body","\n"],["headingLink","transmittablethreadlocal"],["heading","TransmittableThreadLocal"],["body","\n"],["body","用于在异步调用间，线程池的 ThreadLocal传递"],["body","\n"],["h1","ThreadLocal 应用"],["body","\n"],["headingLink","spring-获取被代理的对象"],["heading","spring 获取被代理的对象"],["body","\n"],["body","spring aop"],["body","\n"],["body","Spring 的事务是基于 AOP 实现的，AOP 是基于动态代理实现的。"],["body","\n"],["body","所以 @Transactional 注解如果想要生效，那么其调用方，需要是被 Spring 动态代理后的类。"],["body","\n"],["body","因此如果在同一个类里面，使用 this 调用被 @Transactional 注解修饰的方法时，是不会生效的。"],["body","\n"],["body","为什么？"],["body","\n"],["body","因为 this 对象是未经动态代理后的对象。"],["body","\n"],["body","那么我们怎么获取动态代理后的对象呢？"],["body","\n"],["body","其中的一个方法就是通过 AopContext 来获取。"],["body","\n"],["body","对应代码位置"],["body","\n"],["body","org.springframework.aop.framework.CglibAopProxy.DynamicAdvisedInterceptor#intercept\n\n\t\t\t\tif (this.advised.exposeProxy) {\n\t\t\t\t\t// Make invocation available if necessary.\n\t\t\t\t\toldProxy = AopContext.setCurrentProxy(proxy);\n\t\t\t\t\tsetProxyContext = true;\n\t\t\t\t}\n"],["body","\n"],["body","对应开关"],["body","\n"],["body","@EnableAspectJAutpProxy(exposeProxy=true)\n或者\n<aop:aspectj-autoproxy expose-proxy='true'/>\n"],["body","\n"],["headingLink","mybatis-的分页插件pagehelper"],["heading","mybatis 的分页插件，PageHelper"],["body","\n"],["body","使用"],["body","\n"],["body","PageHelper.startPage(1,10);\nList<User> list = userMapper.selectInfo()\n"],["body","\n"],["body","为什么紧跟着的第一个 select 方法会被分页?"],["body","\n"],["body","PageHelper 方法使用了静态的 ThreadLocal 参数，分页参数和线程是绑定的："],["body","\n"],["h1","总结"],["body","\n"],["headingLink","threadlocal的实现原理是什么"],["heading","ThreadLocal的实现原理是什么？"],["body","\n\n"],["body","每一个线程绑定一个 ThreadLocalMap ，这个Map 以 ThreadLocal作为Key，存入的值作为 value，这样 每个线程都有作用于全局的 独立的内存空间"],["body","\n\n"],["headingLink","threadlocalmap的实现原理"],["heading","ThreadLocalMap的实现原理？"],["body","\n\n"],["body","\n"],["body","ThreadLocalMap维护了Entry环形数组，数组中元素Entry的逻辑上的key为某个ThreadLocal对象（实际上是指向该ThreadLocal对象的弱引用），value为代码中该线程往该ThreadLoacl变量实际塞入的值。"],["body","\n"],["body","\n"],["body","\n"],["body","是一个Map，底层使用 数组实现，通过hash散列 到 数组对应的索引"],["body","\n"],["body","\n"],["body","\n"],["body","通过线性 探测解决 hash冲突"],["body","\n"],["body","\n\n"],["headingLink","threadlocalmap-的key有什么特殊之处"],["heading","ThreadLocalMap 的key有什么特殊之处？"],["body","\n\n"],["body","继承了弱引用，当 内存不足时，会回收此处引用的空间"],["body","\n\n"],["body","为何要这样做"],["body","\n\n"],["body","因为 线程的生命周期 可能明显要大于 ThreadLocal的存活周期"],["body","\n"],["body","如果ThreadLocal 的外部引用消失了，但线程还在，就会出现 内存泄漏"],["body","\n"],["body","所以使用 弱引用，如果 ThreadLocal 不存在外部引用了，这个Key 就可能会被垃圾回收掉"],["body","\n"],["body","然后再下一次 对 这个 Map的 访问或修改中 entry 可能会就被移除"],["body","\n\n"],["body","但是重要的一点：value 还是会产生内存泄漏"],["body","\n"],["body","所以 key 的弱引用只是为了提醒 Map 尽快对 清理entry "],["body","\n"],["headingLink","threadlocalmap扩容机制"],["heading","ThreadLocalMap扩容机制？"],["body","\n"],["body","启发式清理 无效引用，如果没有清理任何数据，当前大小超过了阈值，则开始 扩容"],["body","\n"],["body","而开始扩容前，会进行一次全量的 无效引用的清理，如果此时超过了  3\\4阈值，则真正开始扩容"],["body","\n"],["headingLink","应用"],["heading","应用"],["body","\n\n"],["body","spring获取当前代理对象"],["body","\n"],["body","mybatis分页"],["body","\n"],["body","自己项目：租户Code"],["body","\n"],["body","org.slf4j.MDC ，链路追踪ID"],["body","\n\n"],["body","参考链接"],["body","\n"],["body","InternalThreadLocalMap"],["body","\n"],["body","transmittable-thread-local"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/EasyRules.html"],["title","EasyRules.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","上手"],["body","\n"],["headingLink","依赖"],["heading","依赖"],["body","\n"],["body","<dependency>\n    <groupId>org.jeasy</groupId>\n    <artifactId>easy-rules-core</artifactId>\n    <version>4.0.0</version>\n</dependency>\n"],["body","\n"],["headingLink","定义规则"],["heading","定义规则"],["body","\n"],["headingLink","注解定义"],["heading","注解定义"],["body","\n"],["body","@Rule(name = \"weather rule\", description = \"if it rains then take an umbrella\")\npublic class WeatherRule {\n\n    @Condition\n    public boolean itRains(@Fact(\"rain\") boolean rain) {\n        return rain;\n    }\n    \n    @Action\n    public void takeAnUmbrella() {\n        System.out.println(\"It rains, take an umbrella!\");\n    }\n}\n"],["body","\n"],["headingLink","fluent-api定义"],["heading","Fluent API定义"],["body","\n"],["body","Rule weatherRule = new RuleBuilder()\n        .name(\"weather rule\")\n        .description(\"if it rains then take an umbrella\")\n        .when(facts -> facts.get(\"rain\").equals(true))\n        .then(facts -> System.out.println(\"It rains, take an umbrella!\"))\n        .build();\n"],["body","\n"],["headingLink","表达式语言"],["heading","表达式语言"],["body","\n"],["body","Rule weatherRule = new MVELRule()\n        .name(\"weather rule\")\n        .description(\"if it rains then take an umbrella\")\n        .when(\"rain == true\")\n        .then(\"System.out.println(\\\"It rains, take an umbrella!\\\");\");\n"],["body","\n"],["headingLink","yaml的规则描述器"],["heading","YAML的规则描述器"],["body","\n"],["body","name: \"weather rule\"\ndescription: \"if it rains then take an umbrella\"\ncondition: \"rain == true\"\nactions:\n  - \"System.out.println(\\\"It rains, take an umbrella!\\\");\"\n"],["body","\n"],["body","MVELRuleFactory ruleFactory = new MVELRuleFactory(new YamlRuleDefinitionReader());\nRule weatherRule = ruleFactory.createRule(new FileReader(\"weather-rule.yml\"));\n"],["body","\n"],["headingLink","使用"],["heading","使用"],["body","\n"],["body","  // 定义事实\n        Facts facts = new Facts();\n        facts.put(\"rain\", true);\n\n        // 定义规则\n        Rule weatherRule = ...\n        Rules rules = new Rules();\n        rules.register(weatherRule);\n\n        // 使用规则引擎执行\n        RulesEngine rulesEngine = new DefaultRulesEngine();\n        rulesEngine.fire(rules, facts);\n"],["body","\n"],["h1","对规则的抽象"],["body","\n"],["headingLink","规则的定义"],["heading","规则的定义"],["body","\n"],["body","包括：名字、描述、优先级、事实集合、条件集合和行动集合"],["body","\n"],["headingLink","规则的比较"],["heading","规则的比较"],["body","\n"],["body","UnitRuleGroup"],["body","\n"],["body","要么应用所有规则,要么都不应用, 规则组里的规则 是一个整体"],["body","\n"],["body","ActivationRuleGroup"],["body","\n"],["body","第一个满足条件的会被触发,其他的会被忽略 ,规则首先会被以优先级排序"],["body","\n"],["body","ConditionalRuleGroup"],["body","\n"],["body","以优先级排序,当前规则返回true 则触发余下规则"],["body","\n"],["headingLink","规则引擎"],["heading","规则引擎"],["body","\n"],["body","DefaultRulesEngine"],["body","\n"],["body","（以规则的自然顺序执行）和"],["body","\n"],["body","InferenceRulesEngine"],["body","\n"],["body","（一直执行直到没有可用的规则），且接受包括优先级阈值等的参数。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/WeakCache.html"],["title","WeakCache.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n"],["body","WeakCache<K,P,V>中，K代表key值，P代表参数，V代表存储的值。"],["body","\n"],["body","此类用于缓存{（key，sub-key）-->value}键值对"],["body","\n"],["body","Keys and values are 弱引用 sub-keys are 强引用. 键直接传递给 get 方法，该方法也接受一个参数"],["body","\n"],["body","sub-keys 是使用 subKeyFactory  从键计算出来的，使用传递给构造函数的 valueFactory 函数从 keys and parameter 中计算 values，键可以为空并通过标识进行比较，而 subKeyFactory 返回的子键或 valueFactory 返回的值不能为空"],["body","\n"],["body","sub-keys使用它们的 equals 方法比较"],["body","\n"],["body","当 keys的 WeakReferences 被清除时,每次get、containsValue 、 size methods   调用时都会从缓存中懒惰地删除条目"],["body","\n"],["body","清除对单个值的 WeakReferences 不会导致删除，但这些条目在逻辑上被视为不存在，并根据请求对其键/子键触发重新评估 valueFactory。"],["body","\n"],["h1","实现"],["body","\n"],["body","//缓存Map\nprivate final ConcurrentMap<Object, ConcurrentMap<Object, Supplier<V>>> map = new ConcurrentHashMap<>();\n// 用于 size、containsValue，快速查找\nprivate final ConcurrentMap<Supplier<V>, Boolean> reverseMap = new ConcurrentHashMap<>();\n"],["body","\n"],["h1","构造方法"],["body","\n"],["body","public WeakCache(BiFunction<K, P, ?> subKeyFactory, BiFunction<K, P, V> valueFactory) {\n\tthis.subKeyFactory = Objects.requireNonNull(subKeyFactory);\n\tthis.valueFactory = Objects.requireNonNull(valueFactory);\n}\n"],["body","\n"],["body","这样我们就可以通过subKeyFactory ，valueFactory 获取对应的子键与值。"],["body","\n"],["h1","静态内部类"],["body","\n"],["headingLink","cachevalue"],["heading","CacheValue"],["body","\n"],["body","静态内部类，实际上就是用于存储一个值的对象"],["body","\n"],["body","private interface Value<V> extends Supplier<V> {}\n\n@FunctionalInterface\npublic interface Supplier<T> {\n    T get();\n}\n\n"],["body","\n"],["headingLink","hashcode与identityhashcode"],["heading","hashCode与identityHashCode"],["body","\n"],["body","在Object类中的hashCode可以获取相应对象的hashCode，而这个identityHashCode也是可以获取对象的hashCode，那么两这有什么不同吗？从源码看两者都是本地方法（native），实际上获取时的结果是与hashCode无异的，但是这里的hashCode指的是原有的Object中的hashCode的方法，如果进行了重写就可能会有不同了，所以为了得到原有的Object中的hashCode的值，identityHashCode会比较方便。"],["body","\n"],["headingLink","lookupvalue"],["heading","LookupValue"],["body","\n"],["body","静态内部类，为了便于对CacheValue中的值进行判断，建立了LookupValue，也实现了Value接口，是CacheValue运算时的替代，实现方式也很相似。"],["body","\n"],["body","    private static final class LookupValue<V> implements Value<V> {\n        private final V value;\n\n        LookupValue(V value) {\n            this.value = value;\n        }\n\n        @Override\n        public V get() {\n            return value;\n        }\n\n        @Override\n        public int hashCode() {\n            return System.identityHashCode(value); // compare by identity\n        }\n\n        @Override\n        public boolean equals(Object obj) {\n            return obj == this ||\n                   obj instanceof Value &&\n                   this.value == ((Value<?>) obj).get();  // compare by identity\n        }\n    }\t\t\t\t\t\n"],["body","\n"],["headingLink","cachekey"],["heading","CacheKey"],["body","\n"],["body","private static final class CacheKey<K> extends WeakReference<K> {\n\n    // a replacement for null keys\n    private static final Object NULL_KEY = new Object();\n\n    static <K> Object valueOf(K key, ReferenceQueue<K> refQueue) {\n        return key == null\n               // null key means we can't weakly reference it,\n               // so we use a NULL_KEY singleton as cache key\n               ? NULL_KEY\n               // non-null key requires wrapping with a WeakReference\n               : new CacheKey<>(key, refQueue);\n    }\n\n    private final int hash;\n\n    private CacheKey(K key, ReferenceQueue<K> refQueue) {\n        super(key, refQueue);\n        this.hash = System.identityHashCode(key);  // compare by identity\n    }\n\n    @Override\n    public int hashCode() {\n        return hash;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        K key;\n        return obj == this ||\n               obj != null &&\n               obj.getClass() == this.getClass() &&\n               // cleared CacheKey is only equal to itself\n               (key = this.get()) != null &&\n               // compare key by identity\n               key == ((CacheKey<K>) obj).get();\n    }\n\n    void expungeFrom(ConcurrentMap<?, ? extends ConcurrentMap<?, ?>> map,\n                     ConcurrentMap<?, Boolean> reverseMap) {\n        // removing just by key is always safe here because after a CacheKey\n        // is cleared and enqueue-ed it is only equal to itself\n        // (see equals method)...\n        ConcurrentMap<?, ?> valuesMap = map.remove(this);\n        // remove also from reverseMap if needed\n        if (valuesMap != null) {\n            for (Object cacheValue : valuesMap.values()) {\n                reverseMap.remove(cacheValue);\n            }\n        }\n    }\n}\n"],["body","\n"],["h1","GET方法"],["body","\n"],["body","public V get(K key, P parameter) {\n    Objects.requireNonNull(parameter);\n// 清除 引用队列 过期的 key\n    expungeStaleEntries();\n\n\n    Object cacheKey = CacheKey.valueOf(key, refQueue);\n\n    //来加载设置并获取一级缓存\n    // lazily install the 2nd level valuesMap for the particular cacheKey\n    ConcurrentMap<Object, Supplier<V>> valuesMap = map.get(cacheKey);\n    if (valuesMap == null) {\n        ConcurrentMap<Object, Supplier<V>> oldValuesMap\n            = map.putIfAbsent(cacheKey,\n                              valuesMap = new ConcurrentHashMap<>());\n        if (oldValuesMap != null) {\n            valuesMap = oldValuesMap;\n        }\n    }\n\n    // create subKey and retrieve the possible Supplier<V> stored by that\n    // subKey from valuesMap\n    Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter));\n    //计算二级key,获取二级缓存\n    Supplier<V> supplier = valuesMap.get(subKey);\n    Factory factory = null;\n\n    while (true) {\n        //二级缓存在\n        if (supplier != null) {\n            // supplier might be a Factory or a CacheValue<V> instance\n            //获取实际值\n            V value = supplier.get();\n            //二级缓存不为空，直接返回\n            if (value != null) {\n                return value;\n            }\n        }\n        //没有supplier、\n        //或者 value被回收了\n        // else no supplier in cache\n        // or a supplier that returned null (could be a cleared CacheValue\n        // or a Factory that wasn't successful in installing the CacheValue)\n\n        //没有factory新建一个 FactorySupplier\n        // lazily construct a Factory\n        if (factory == null) {\n            factory = new Factory(key, parameter, subKey, valuesMap);\n        }\n        \n        //没有supplier\n        if (supplier == null) {\n            //放入supplier\n            supplier = valuesMap.putIfAbsent(subKey, factory);\n            //返回空 则证明成功按爪那个\n            if (supplier == null) {\n                // successfully installed Factory\n                supplier = factory;\n            }\n            //不反回空，则说明同一时刻  有其他线程放入了 supplier,则继续下一轮循环\n            // else retry with winning supplier\n        } else {\n            //存在supplier，但是值没了：放入新值\n            if (valuesMap.replace(subKey, supplier, factory)) {\n                // successfully replaced\n                // cleared CacheEntry / unsuccessful Factory\n                // with our Factory\n                supplier = factory;\n            } else {\n                //放入失败:同一时刻有人在尝试操作此键：获取它并操作\n                // retry with current supplier\n                supplier = valuesMap.get(subKey);\n            }\n        }\n    }\n}\n"],["body","\n"],["h1","清除Key的无效引用"],["body","\n"],["body","将无效弱引用队列的值拿出来，一一从一级缓存中移除"],["body","\n"],["body","private void expungeStaleEntries() {\n    CacheKey<K> cacheKey;\n    while ((cacheKey = (CacheKey<K>)refQueue.poll()) != null) {\n        cacheKey.expungeFrom(map, reverseMap);\n    }\n}\n\n\nvoid expungeFrom(ConcurrentMap<?, ? extends ConcurrentMap<?, ?>> map,\n                 ConcurrentMap<?, Boolean> reverseMap) {\n    // removing just by key is always safe here because after a CacheKey\n    // is cleared and enqueue-ed it is only equal to itself\n    // (see equals method)...\n    ConcurrentMap<?, ?> valuesMap = map.remove(this);\n    // remove also from reverseMap if needed\n    if (valuesMap != null) {\n        for (Object cacheValue : valuesMap.values()) {\n            reverseMap.remove(cacheValue);\n        }\n    }\n}\n"],["body","\n"],["h1","计算Value"],["body","\n"],["body","java.lang.reflect.WeakCache.Factory#get"],["body","\n"],["body","public synchronized V get() { // serialize access\n    // re-check\n    Supplier<V> supplier = valuesMap.get(subKey);\n    if (supplier != this) {\n        //返回null表明：1.被CacheValue替代了  2. 值 被GC可能将其回收了,其他线程新了一个Supplier\n        // something changed while we were waiting:\n        // might be that we were replaced by a CacheValue\n        // or were removed because of failure ->\n        // return null to signal WeakCache.get() to retry\n        // the loop\n        return null;\n    }\n    // else still us (supplier == this)\n\n    // create new value\n    V value = null;\n    try {\n        //计算值\n        value = Objects.requireNonNull(valueFactory.apply(key, parameter));\n    } finally {\n        if (value == null) { // remove us on failure\n            valuesMap.remove(subKey, this);\n        }\n    }\n    // the only path to reach here is with non-null value\n    assert value != null;\n\n    // wrap value with CacheValue (WeakReference)\n    CacheValue<V> cacheValue = new CacheValue<>(value);\n\n    // put into reverseMap：放入索引Map\n    reverseMap.put(cacheValue, Boolean.TRUE);\n\n    //替换 当前factory为 CacheValue\n    // try replacing us with CacheValue (this should always succeed)\n    if (!valuesMap.replace(subKey, this, cacheValue)) {\n        throw new AssertionError(\"Should not reach here\");\n    }\n\n    // successfully replaced us with new CacheValue -> return the value\n    // wrapped by it\n    return value;\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/javaPererences工具.html"],["title","javaPererences工具.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","问题"],["body","\n"],["body","Properties提供的应用程序解决方案主要存在两个问题："],["body","\n\n"],["body","\n"],["body","配置文件不能放在主目录中，因为某些OS（如Win9X）没有主目录的概念；"],["body","\n"],["body","\n"],["body","\n"],["body","没有标准的文件命名规则，存在文件名冲突的可能性。"],["body","\n"],["body","\n"],["body","\n"],["body","Java中的Preferences类可以解决这些问题。Preferences提供一个存储配置信息的中心知识库，与平台无关。在Windows系统中，它存储在注册表中，在Linux中存储在本地文件系统中。它的实现是透明的，程序员无需深究它的底层是如何实现的。"],["body","\n"],["body","\n"],["body","\n"],["body","Preferences的中心知识库是树状结构，因此可以避免文件名冲突。每个用户都有一棵树，存放与本用户有关的配置；还有一个系统树，存放全体用户的公共信息。内部的配置信息仍然以key-value的结构进行存储。"],["body","\n"],["body","\n\n"],["h1","Preferences的使用步骤"],["body","\n"],["headingLink","获得根节点"],["heading","获得根节点"],["body","\n"],["body","//如果配置信息位于用户树，则获取用户树的根节点，否则获取系统树根节点；\nPreferences root = Preferences.userRoot();\nPreferences root = Preferences.systemRoot();\n"],["body","\n"],["headingLink","获取配置节点"],["heading","获取配置节点"],["body","\n"],["body","preferences = root.node(\"path\");\n"],["body","\n\n"],["body","\n"],["body","path是配置节点相对于根节点的路径；"],["body","\n"],["body","\n"],["body","\n"],["body","如果节点的路径名与类的包名相同，则可通过类的对象直接获得配置节点："],["body","\n"],["body","\n\n"],["body","Preferences node = Preferences.userNodeForPackage(this.getClass());\nPreferences node = Preferences.systemNodeForPackage(this.getClass());\n"],["body","\n"],["headingLink","读取配置项"],["heading","读取配置项"],["body","\n"],["body","String title =  preferences.get(\"title\", \"default title\");\n"],["body","\n"],["body","Preferences要求读取配置项时必须指定默认值。因为在实际环境中总会有各种不如意，比如系统中还没有中心知识库，或者网络暂时不可用等等。"],["body","\n"],["headingLink","设置配置项"],["heading","设置配置项"],["body","\n"],["body","preferences.put(key, value);\n"],["body","\n"],["headingLink","同步配置项"],["heading","同步配置项"],["body","\n"],["body","preferences.flush();\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/formatter.html"],["title","formatter.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","formatter"],["body","\n"],["headingLink","简介"],["heading","简介"],["body","\n"],["body","formatter是一个抽象的基类用于格式化 对 区域 敏感的 地区,主要包括三类"],["body","\n\n"],["body","日期"],["body","\n"],["body","数值"],["body","\n"],["body","消息(语言)"],["body","\n\n"],["headingLink","子类必须实现以下三个方法"],["heading","子类必须实现以下三个方法"],["body","\n\n"],["body","format(Object obj, StringBuffer toAppendTo, FieldPosition pos)"],["body","\n"],["body","formatToCharacterIterator(Object obj)"],["body","\n"],["body","parseObject(String source, ParsePosition pos)"],["body","\n\n"],["headingLink","子类一般要实现的-工厂方法"],["heading","子类一般要实现的 工厂方法"],["body","\n"],["body","getInstance //使用currentLocale"],["body","\n"],["body","getInstance(Locale)"],["body","\n"],["body","或者更具体的工厂方法"],["body","\n"],["body","getIntegerInstance, getCurrencyInstance"],["body","\n"],["headingLink","还应能获取-所有支持的locale"],["heading","还应能获取 所有支持的Locale"],["body","\n"],["body","public static Locale[] getAvailableLocales()"],["body","\n"],["body","子类应该以如下形式的定义 FieldPosition的字段"],["body","\n"],["body","item_FIELD 的形式"],["body","\n"],["h1","MessageFormat"],["body","\n"],["body","MessageFormat提供了以自然语言的形式,产生一系列组合的字符串"],["body","\n"],["headingLink","messageformat的语法定义"],["heading","messageFormat的语法定义"],["body","\n"],["body","定义: | 二者选一, [] 可选, \n\npattern = string | pattern formatElement string\n\nformatElemnt = {argumentindex\\[,FormatType]\\[,FormatType ]}\n\nformatType = number | date |time |choice\n\nstyle = short | medium | long | full| integer|currency|precent|SubformatPattern\n"],["body","\n"],["headingLink","一些规定"],["heading","一些规定"],["body","\n\n"],["body","\n"],["body","pattern用 Java中的 \"\" 包裹"],["body","\n"],["body","\n"],["body","\n"],["body","单引号 包裹的不会解析"],["body","\n"],["body","\n"],["body","\n"],["body","两个连续的单引号可以表示 一个单引号字符"],["body","\n"],["body","\n"],["body","\n"],["body","花括号必须成对"],["body","\n"],["body","\n"],["body","\n"],["body","没有结束的 单引号 默认在 pattern末尾加上单引号"],["body","\n"],["body","\n"],["body","\n"],["body","argumentIndex表示的是 非负的整数 0~9,之后解析传递进来的参数,按照这个顺序去解析"],["body","\n"],["body","\n"],["body","\n"],["body","formatType,formatStyle 是用来创建Format实例"],["body","\n"],["body","\n\n"],["headingLink","type与style对应的-java类"],["heading","type与style对应的 Java类"],["body","\n"],["body","FormatType"],["body","FormatStyle"],["body","Subformat Created"],["body","\n"],["body","(none)"],["body","(none)"],["body","null"],["body","\n"],["body","number"],["body","(none)"],["body","NumberFormat.getInstance(getLocale())"],["body","\n"],["body","integer"],["body","NumberFormat.getIntegerInstance(getLocale())"],["body","\n"],["body","currency"],["body","NumberFormat.getCurrencyInstance(getLocale())"],["body","\n"],["body","percent"],["body","NumberFormat.getPercentInstance(getLocale())"],["body","\n"],["body","SubformatPattern"],["body","new [DecimalFormat](https://docs.oracle.com/javase/7/docs/api/java/text/DecimalFormat.html#DecimalFormat(java.lang.String, java.text.DecimalFormatSymbols))(subformatPattern, DecimalFormatSymbols.getInstance(getLocale()))"],["body","\n"],["body","date"],["body","(none)"],["body","[DateFormat.getDateInstance](https://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#getDateInstance(int, java.util.Locale))(DateFormat.DEFAULT, getLocale())"],["body","\n"],["body","short"],["body","[DateFormat.getDateInstance](https://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#getDateInstance(int, java.util.Locale))(DateFormat.SHORT, getLocale())"],["body","\n"],["body","medium"],["body","[DateFormat.getDateInstance](https://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#getDateInstance(int, java.util.Locale))(DateFormat.DEFAULT, getLocale())"],["body","\n"],["body","long"],["body","[DateFormat.getDateInstance](https://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#getDateInstance(int, java.util.Locale))(DateFormat.LONG, getLocale())"],["body","\n"],["body","full"],["body","[DateFormat.getDateInstance](https://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#getDateInstance(int, java.util.Locale))(DateFormat.FULL, getLocale())"],["body","\n"],["body","SubformatPattern"],["body","new [SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html#SimpleDateFormat(java.lang.String, java.util.Locale))(subformatPattern, getLocale())"],["body","\n"],["body","time"],["body","(none)"],["body","[DateFormat.getTimeInstance](https://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#getTimeInstance(int, java.util.Locale))(DateFormat.DEFAULT, getLocale())"],["body","\n"],["body","short"],["body","[DateFormat.getTimeInstance](https://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#getTimeInstance(int, java.util.Locale))(DateFormat.SHORT, getLocale())"],["body","\n"],["body","medium"],["body","[DateFormat.getTimeInstance](https://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#getTimeInstance(int, java.util.Locale))(DateFormat.DEFAULT, getLocale())"],["body","\n"],["body","long"],["body","[DateFormat.getTimeInstance](https://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#getTimeInstance(int, java.util.Locale))(DateFormat.LONG, getLocale())"],["body","\n"],["body","full"],["body","[DateFormat.getTimeInstance](https://docs.oracle.com/javase/7/docs/api/java/text/DateFormat.html#getTimeInstance(int, java.util.Locale))(DateFormat.FULL, getLocale())"],["body","\n"],["body","SubformatPattern"],["body","new [SimpleDateFormat](https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html#SimpleDateFormat(java.lang.String, java.util.Locale))(subformatPattern, getLocale())"],["body","\n"],["body","choice"],["body","SubformatPattern"],["body","new ChoiceFormat(subformatPattern)"],["body","\n\n\n"],["headingLink","example"],["heading","example"],["body","\n"],["body","   String result = MessageFormat.format(\n       \"At {1,time} on {1,date}, there was {2} on planet {0,number,integer}.\",\n       planet, new Date(), event);\n"],["body","\n"],["body","可重用的"],["body","\n"],["body","   int fileCount = 1273;\n   String diskName = \"MyDisk\";\n   Object[] testArgs = {new Long(fileCount), diskName};\n  \n   MessageFormat form = new MessageFormat(\n       \"The disk \\\"{1}\\\" contains {0} file(s).\");\n  \n   System.out.println(form.format(testArgs));\n"],["body","\n"],["body","ChoiceFormat"],["body","\n"],["body","  MessageFormat form = new MessageFormat(\"The disk \\\"{1}\\\" contains {0}.\");\n   double[] filelimits = {0,1,2};\n   String[] filepart = {\"no files\",\"one file\",\"{0,number} files\"};\n   ChoiceFormat fileform = new ChoiceFormat(filelimits, filepart);\n   form.setFormatByArgumentIndex(0, fileform);\n  \n   int fileCount = 1273;\n   String diskName = \"MyDisk\";\n   Object[] testArgs = {new Long(fileCount), diskName};\n  \n   System.out.println(form.format(testArgs));\n"],["body","\n"],["body","语义化的创建 choice"],["body","\n"],["body"," form.applyPattern(\n    \"There {0,choice,0#are no files|1#is one file|1<are {0,number,integer} files}.\");\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/枚举.html"],["title","枚举.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概览"],["body","\n\n"],["body","enum关键字在 java5 中引入，表示一种特殊类型的类"],["body","\n"],["body","枚举类是一种“语法糖”，只有编译器知道“enum”关键字，jvm是不知道的，字节码文件中没有枚举这一概念"],["body","\n"],["body","其总是继承java.lang.Enum类，所以不能枚举不能继承其他类，但是可以实现接口"],["body","\n"],["body","枚举构造函数默认是私有的"],["body","\n\n"],["h1","自定义枚举方法"],["body","\n"],["body","可以在枚举的外面定义一个 类，用来实现关于枚举的各个API"],["body","\n"],["body","public class Pizza {\n    private PizzaStatus status;\n    public enum PizzaStatus {\n        ORDERED,\n        READY,\n        DELIVERED;\n    }\n \n    public boolean isDeliverable() {\n        if (getStatus() == PizzaStatus.READY) {\n            returntrue;\n        }\n        returnfalse;\n    }\n     \n    // Methods that set and get the status variable.\n}\t\n"],["body","\n"],["h1","在switch语句中使用枚举类型"],["body","\n"],["body","public int getDeliveryTimeInDays() {\n    switch (status) {\n        case ORDERED: return5;\n        case READY: return2;\n        case DELIVERED: return0;\n    }\n    return0;\n}\n"],["body","\n"],["h1","在枚举中定义方法"],["body","\n"],["body","publicclass Pizza {\n \n    private PizzaStatus status;\n    public enum PizzaStatus {\n        ORDERED (5){\n            @Override\n            public boolean isOrdered() {\n                returntrue;\n            }\n        },\n        READY (2){\n            @Override\n            public boolean isReady() {\n                returntrue;\n            }\n        },\n        DELIVERED (0){\n            @Override\n            public boolean isDelivered() {\n                returntrue;\n            }\n        };\n \n        private int timeToDelivery;\n \n        public boolean isOrdered() {returnfalse;}\n \n        public boolean isReady() {returnfalse;}\n \n        public boolean isDelivered(){returnfalse;}\n \n        public int getTimeToDelivery() {\n            return timeToDelivery;\n        }\n \n        PizzaStatus (int timeToDelivery) {\n            this.timeToDelivery = timeToDelivery;\n        }\n    }\n \n    public boolean isDeliverable() {\n        returnthis.status.isReady();\n    }\n \n    public void printTimeToDeliver() {\n        System.out.println(\"Time to delivery is \" +\n          this.getStatus().getTimeToDelivery());\n    }\n     \n    // Methods that set and get the status variable.\n}\n"],["body","\n"],["h1","枚举反编译"],["body","\n"],["headingLink","原始代码"],["heading","原始代码"],["body","\n"],["body","public enum Fruit {\n    APPLE, BANANA, WATERMELON;\n    private int value;\n\n    private Fruit() {\n        //默认构造器\n        this.value = 0;\n    }\n\n    private Fruit(int value) {\n        //带参数的构造器\n        this.value = value;\n    }\n}\n"],["body","\n"],["headingLink","jvm字节码"],["heading","JVM字节码"],["body","\n"],["body","\n"],["body","简单反编译：javap -p DateTypeEnum.class"],["body","\n"],["body","复杂编译：javap -c DateTypeEnum"],["body","\n"],["body","\n"],["body","public final class Fruit extends java.lang.Enum<Fruit> {\n  public static final Fruit APPLE;\n\n  public static final Fruit BANANA;\n\n  public static final Fruit WATERMELON;\n\n  public static Fruit[] values();\n    Code:\n       0: getstatic     #1                  // Field $VALUES:[LFruit;\n       3: invokevirtual #2                  // Method \"[LFruit;\".clone:()Ljava/lang/Object;\n       6: checkcast     #3                  // class \"[LFruit;\"\n       9: areturn\n\n  public static Fruit valueOf(java.lang.String);\n    Code:\n       0: ldc           #4                  // class Fruit\n       2: aload_0\n       3: invokestatic  #5                  // Method java/lang/Enum.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;\n       6: checkcast     #4                  // class Fruit\n       9: areturn\n\n  static {};\n    Code:\n       0: new           #4                  // class Fruit\n       3: dup\n       4: ldc           #8                  // String APPLE\n       6: iconst_0\n       7: invokespecial #9                  // Method \"<init>\":(Ljava/lang/String;I)V\n      10: putstatic     #10                 // Field APPLE:LFruit;\n      13: new           #4                  // class Fruit\n      16: dup\n      17: ldc           #11                 // String BANANA\n      19: iconst_1\n      20: invokespecial #9                  // Method \"<init>\":(Ljava/lang/String;I)V\n      23: putstatic     #12                 // Field BANANA:LFruit;\n      26: new           #4                  // class Fruit\n      29: dup\n      30: ldc           #13                 // String WATERMELON\n      32: iconst_2\n      33: invokespecial #9                  // Method \"<init>\":(Ljava/lang/String;I)V\n      36: putstatic     #14                 // Field WATERMELON:LFruit;\n      39: iconst_3\n      40: anewarray     #4                  // class Fruit\n      43: dup\n      44: iconst_0\n      45: getstatic     #10                 // Field APPLE:LFruit;\n      48: aastore\n      49: dup\n      50: iconst_1\n      51: getstatic     #12                 // Field BANANA:LFruit;\n      54: aastore\n      55: dup\n      56: iconst_2\n      57: getstatic     #14                 // Field WATERMELON:LFruit;\n      60: aastore\n      61: putstatic     #1                  // Field $VALUES:[LFruit;\n      64: return\n}\n"],["body","\n"],["headingLink","最终源码"],["heading","最终源码"],["body","\n"],["body","public final class Fruit extends Enum {   \n//3个枚举成员实例    \n    public static final Fruit APPLE;    \n    public static final Fruit BANANA;    \n    public static final Fruit WATERMELON;    \n    private int value;//普通变量    \n    private static final Fruit ENUM$VALUES[];//存储枚举常量的枚举数组    \n    static {\n    //静态域，初始化枚举常量，枚举数组        \n        APPLE = new Fruit(\"APPLE\", 0);        \n        BANANA = new Fruit(\"BANANA\", 1);        \n        WATERMELON = new Fruit(\"WATERMELON\", 2);        \n        ENUM$VALUES = (new Fruit[]{APPLE, BANANA, WATERMELON});    \n    }\n    private Fruit(String s, int i) {\n        //编译器改造了默认构造器        \n        super(s, i);        \n        value = 0;    \n    }    \n    private Fruit(String s, int i, int value) {\n        //编译器改造了带参数的构造器        \n        super(s, i);        \n        this.value = value;    \n    }    \n    public static Fruit[] values() {\n        //编译器添加了静态方法values()        \n        Fruit afruit[];        \n        int i;        \n        Fruit afruit1[];        \n        System.arraycopy(afruit = ENUM$VALUES, 0, afruit1 = new Fruit[i = afruit.length], 0, i);        \n        return afruit1;    \n    }    \n    public static Fruit valueOf(String s) {\n        //编译器添加了静态方法valueOf()        \n        return (Fruit) Enum.valueOf(Test_2018_1_16 / Fruit, s);    \n    }\n}\n"],["body","\n"],["headingLink","手动继承枚举"],["heading","手动继承枚举"],["body","\n"],["body","public class MyEnum extends Enum { // 这样写肯定是通不过编译的，因为编译器不允许我们的类显示的继承Enum类\n\n    private MyEnum() {}\n\n    public static final MyEnum e1 = new MyEnum(\"WHITE\", 0);\n    public static final MyEnum e2 = new MyEnum(\"BLACK\", 1);\n\n    public MyEnum[] values() {\n        return new MyEnum[]{e1, e2}; // 这个地方有问题，等下指出\n    }\n}\n"],["body","\n"],["h1","枚举可以定义抽象方法"],["body","\n"],["body","但是一定要在各自的示例中实现"],["body","\n"],["body","“不含抽象方法”的class反编译文件：public **final** class Weather extends Enum\n\n“含有抽象方法”的class反编译文件：public **abstract**class Weather extends Enum\n"],["body","\n"],["body","public  enum Fruit {\n    APPLE{\n        @Override\n        void doSomeThing() {\n            \n        }\n    }, BANANA {\n        @Override\n        void doSomeThing() {\n            \n        }\n    }, WATERMELON {\n        @Override\n        void doSomeThing() {\n            \n        }\n    };\n    private int value;\n\n    Fruit() {\n        //默认构造器\n        this.value = 0;\n    }\n\n    Fruit(int value) {\n        //带参数的构造器\n        this.value = value;\n    }\n\n    abstract void doSomeThing();\n}\n"],["body","\n"],["h1","进阶"],["body","\n"],["headingLink","enumset"],["heading","EnumSet"],["body","\n"],["headingLink","构造"],["heading","构造"],["body","\n"],["body","根据枚举类构造"],["body","\n"],["body","EnumSet<Fruit> fruits = EnumSet.allOf(Fruit.class);\n"],["body","\n"],["body","根据枚举实例构造"],["body","\n"],["body","EnumSet<Fruit> one = EnumSet.of(Fruit.APPLE);\nEnumSet<Fruit> two = EnumSet.of(Fruit.APPLE,Fruit.BANANA);\nEnumSet<Fruit> three = EnumSet.of(Fruit.APPLE,Fruit.BANANA,Fruit.WATERMELON);\n"],["body","\n"],["body","根据枚举集合的补集构造"],["body","\n"],["body","EnumSet<Fruit> oneComp = EnumSet.complementOf(one);\n"],["body","\n"],["body","构造空枚举集合"],["body","\n"],["body","EnumSet<Fruit> fruits1 = EnumSet.noneOf(Fruit.class);\nEnumSet<Fruit> fruits2 = EnumSet.complementOf(fruits1);\n"],["body","\n"],["body","根据ordinary范围构造"],["body","\n"],["body","EnumSet<Fruit> range = EnumSet.range(Fruit.APPLE, Fruit.WATERMELON);\n"],["body","\n"],["headingLink","使用"],["heading","使用"],["body","\n"],["body","与一般的 Set集合 使用无异"],["body","\n"],["headingLink","enummap"],["heading","EnumMap"],["body","\n\n"],["body","会事先在内部初始化 一些key的集合，因此大小是固定的，性能比 HashMap 要好很多"],["body","\n"],["body","会将 null值 映射成  为 null object"],["body","\n\n"],["headingLink","构造-1"],["heading","构造"],["body","\n"],["body","EnumMap<Fruit,String> enumMap = new EnumMap<>(Fruit.class);\n//此时出初始化了 指定枚举类型的key\n\nenumMap.put(Fruit.APPLE,\"xjq\");\nenumMap.put(Fruit.WATERMELON,null);\nenumMap.put(Fruit.BANANA,\"xjq\");\n"],["body","\n"],["body","使用"],["body","\n"],["body","与普通map 使用无异"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/类的关系.html"],["title","类的关系.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","类的关系"],["body","\n"],["body","在UML类图中，常见的有以下几种关系: 泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)"],["body","\n"],["headingLink","泛化generalization"],["heading","泛化（Generalization）"],["body","\n"],["body","泛化关系"],["body","\n"],["body","是一种继承关系，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。"],["body","\n"],["body","箭头指向"],["body","\n"],["body","带三角箭头的实线，箭头指向父类"],["body","\n"],["headingLink","实现realization"],["heading","实现（Realization）"],["body","\n"],["body","实现关系"],["body","\n"],["body","是一种类与接口的关系，表示类是接口所有特征和行为的实现."],["body","\n"],["body","箭头指向"],["body","\n"],["body","带三角箭头的虚线，箭头指向接口，指向接口"],["body","\n"],["headingLink","关联association"],["heading","关联（Association)"],["body","\n"],["body","关联关系"],["body","\n"],["body","是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。"],["body","\n"],["body","箭头指向"],["body","\n"],["body","带普通箭头的实心线，指向被拥有者，指向成员变量"],["body","\n"],["headingLink","聚合aggregation"],["heading","聚合（Aggregation）"],["body","\n"],["body","聚合关系"],["body","\n"],["body","是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。"],["body","\n"],["body","聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。"],["body","\n"],["body","箭头指向"],["body","\n"],["body","带空心菱形的实心线，菱形指向 整体，成员变量 指向拥有者"],["body","\n"],["headingLink","组合composition"],["heading","组合(Composition)"],["body","\n"],["body","组合关系"],["body","\n"],["body","是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。"],["body","\n"],["body","组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。"],["body","\n"],["body","箭头指向"],["body","\n"],["body","带实心菱形的实线，菱形指向整体"],["body","\n"],["headingLink","依赖dependency"],["heading","依赖(Dependency)"],["body","\n"],["body","依赖关系"],["body","\n"],["body","是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖."],["body","\n"],["body","箭头指向"],["body","\n"],["body","带箭头的虚线，指向被使用者，一般指 局部变量、方法的参数或者对静态方法的调用"],["body","\n"],["body","各种关系的强弱顺序："],["body","\n"],["body","泛化 = 实现 > 组合 > 聚合 > 关联 > 依赖"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/Java异常.html"],["title","Java异常.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Java异常类结构图"],["body","\n"],["body","\n"],["body","**错误：**Error类以及他的子类的实例，代表了JVM本身的错误。错误不能被程序员通过代码处理，Error很少出现。因此，程序员应该关注Exception为父类的分支下的各种异常类。"],["body","\n"],["body","**异常：**Exception以及他的子类，代表程序运行时发送的各种不期望发生的事件。可以被Java异常处理机制使用，是异常处理的核心。"],["body","\n"],["body","综上针对这些异常，可以分为两类：非检查异常、检查异常."],["body","\n"],["body","非检查异常：上图中的Error 和 RuntimeException 以及他们的子类都属于非检查异常。这类异常在javac在编译时，不会提示和发现这样的异常，不要求在程序处理这些异常。所以如果愿意，我们可以编写代码处理（使用try...catch...finally）这样的异常，也可以不处理。"],["body","\n"],["body","检查异常：除了Error 和 RuntimeException的其它异常都属于检查异常。这类异常是javac强制要求程序员为这样的异常做预备处理工作（使用try...catch...finally或者throws）。在方法中要么用try-catch语句捕获它并处理，要么用throws子句声明抛出它，否则编译不会通过。这样的异常一般是由程序的运行环境导致的"],["body","\n"],["body","finally块不管异常是否发生，只要对应的try执行了，则它一定也执行。只有一种方法让finally块不执行：System.exit()。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/jdk1.8新特性.html"],["title","jdk1.8新特性.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n"],["body","Lambda 表达式：Lambda 允许把函数作为一个方法的参数（函数作为参数传递到方法中）"],["body","\n"],["body","函数式接口：指的是一个有且仅有一个抽象方法，但是可以有多个非抽象方法的接口，这样的接口可以隐式转换为 Lambda 表达式"],["body","\n"],["body","方法引用：方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，方法引用可以使语言的构造更紧凑简洁，减少冗余代码"],["body","\n"],["body","默认方法：默认方法就是一个在接口里面有了一个实现的方法"],["body","\n"],["body","Stream API：新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。"],["body","\n"],["body","Optional 类：Optional 类已经成为 Java 8 类库的一部分，用来解决空指针异常。"],["body","\n"],["body","Date Time API：加强对日期与时间的处理。"],["body","\n"],["body","Nashorn, JavaScript 引擎：Java 8提供了一个新的Nashorn javascript引擎，它允许我们在JVM上运行特定的javascript应用"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/java各版本新特性.html"],["title","java各版本新特性.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","[TOC]"],["body","\n"],["h1","java5"],["body","\n"],["headingLink","泛型-generics"],["heading","泛型 (Generics)"],["body","\n"],["body"," List<Integer> list=new ArrayList<Integer>();\n"],["body","\n"],["headingLink","增强循环enhanced-for-loop"],["heading","增强循环（Enhanced for Loop）"],["body","\n"],["body"," int[] array = {1, 2, 3, 4, 5};\n for (int i : array) {\n    System.out.println(i);\n } \n"],["body","\n"],["headingLink","自动封箱拆箱autoboxingunboxing-"],["heading","自动封箱拆箱(Autoboxing/Unboxing )。"],["body","\n"],["body","八大基本类型和它们的包装类能够自动的相互转换。"],["body","\n"],["headingLink","枚举typesafe-enums"],["heading","枚举(Typesafe Enums)。"],["body","\n"],["body","ps:枚举是一种实现线程安全的单例模式的好方式。\n\n enum TestEnum{\n        one,\n        two;\n        TestEnum() {\n        }\n    }\n"],["body","\n"],["headingLink","可变参数-varargs"],["heading","可变参数 (Varargs)"],["body","\n"],["body","语法：(type... arguments)"],["body","\n"],["body","可变参数本质仍然是用一个数组存储参数，只是java隐藏了这一过程。需要注意的是如果一个方法声明中含有可变参数，那必须放在最后一个位置。"],["body","\n"],["body"," /**\n * 可变参数测试\n *\n * @param args\n */\npublic static void testVarargs(String... args) {\n    //本质就是个数组\n    System.out.println(args[1]);\n    for (String arg : args) {\n        System.out.println(arg);\n    }\n}\n"],["body","\n"],["headingLink","静态导入static-import"],["heading","静态导入（Static Import）。"],["body","\n"],["body","通过import类来使用类里的静态变量或方法（直接通过名字，不需要加上类名.）,简化了代码的书写。"],["body","\n"],["body","//单个导入\nimport static java.lang.Math.PI;\n//批量导入\nimport static java.lang.Math.*;11\nps:过去的版本中只能通过继承类或实现接口才能使用。\n"],["body","\n"],["headingLink","注解annotations"],["heading","注解（Annotations）。"],["body","\n"],["body","关键字@interface。"],["body","\n"],["body","//注释注解的注解又叫做元注解\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.METHOD)\npublic @interface MyAnnotations {\n    //注解内可以添加方法，也可以不添加\n    //注解方法的返回值只能是基本类型，String，Class类,枚举,注解,可以有默认值。\n    int id();\n    String name() default \"whh\";\n    Class classType();\n    TestEnum enumType();\n}\n"],["body","\n"],["headingLink","新的线程模型和并发库"],["heading","新的线程模型和并发库"],["body","\n"],["body","（java.util.concurrent)。"],["body","\n"],["h1","java6"],["body","\n"],["headingLink","集合框架增强"],["heading","集合框架增强。"],["body","\n"],["body","为了更好的支持双向访问集合。添加了许多新的类和接口。\n新的数组拷贝方法。Arrays.copyOf和Arrays.copyOfRange"],["body","\n"],["body","//以下为添加的新接口和类\nDeque,BlockingDeque,NavigableSet,NavigableMap,ConcurrentNavigableMap，ArrayDeque， ConcurrentSkipListSet ,ConcurrentSkipListMap,ConcurrentSkipListMap ,AbstractMap.SimpleEntry ,AbstractMap.SimpleImmutableEntry\n"],["body","\n"],["headingLink","scripting-可以让其他语言在java平台上运行"],["heading","Scripting. 可以让其他语言在java平台上运行。"],["body","\n"],["body","java6包含了一个基于Mozilla Rhino实现的javascript脚本引擎。"],["body","\n"],["headingLink","支持jdbc40规范"],["heading","支持JDBC4.0规范。"],["body","\n"],["h1","java7"],["body","\n"],["headingLink","二进制前缀0b或者0b"],["heading","二进制前缀0b或者0B。"],["body","\n"],["body","整型（byte, short, int, long）可以直接用二进制表示。"],["body","\n"],["body","//二进制字面值前缀0b 或0B\nint i = 0b010;//10进制值为2\nint j = 0B010;"],["body","\n"],["headingLink","字面常量数字的下划线"],["heading","字面常量数字的下划线。"],["body","\n"],["body","用下划线连接整数提升其可读性，自身无含义，不可用在数字的起始和末尾。"],["body","\n"],["body","//数字间的下划线不影响实际值\n int k = 1_1;//值为11\n"],["body","\n"],["headingLink","switch-支持string类型"],["heading","switch 支持String类型。"],["body","\n"],["headingLink","泛型实例化类型自动推断"],["heading","泛型实例化类型自动推断。"],["body","\n"],["body","Map<String, List<String>> myMap = new HashMap<String, List<String>>();    // 之前\nMap<String, List<String>> myMap = new HashMap<>();        // 现在\n"],["body","\n"],["headingLink","try-with-resources语句"],["heading","try-with-resources语句。"],["body","\n"],["body","   /*\n     * 声明在try括号中的对象称为资源，在方法执行完毕后会被自动关闭,相对与之前必须在finally关闭资源，这一特性大大提高了代码的简洁性。\n     * 所有实现java.lang.AutoCloseable接口的类都作为资源被自动关闭。\n    */\n   try (BufferedReader reader=new BufferedReader(new FileReader(\"d:1.txt\"))){\n      return reader.readLine();\n  }\n"],["body","\n"],["headingLink","单个catch中捕获多个异常类型"],["heading","单个catch中捕获多个异常类型"],["body","\n"],["body","（用| 分割）并通过改进的类型检查重新抛出异常。"],["body","\n"],["h1","java8"],["body","\n"],["headingLink","lambada表达式lambda-expressions"],["heading","lambada表达式(Lambda Expressions)。"],["body","\n"],["body","Lambda允许把函数作为一个方法的参数（函数作为参数传递进方法中)。"],["body","\n"],["headingLink","方法引用method-references"],["heading","方法引用（Method references）。"],["body","\n"],["body","方法引用提供了非常有用的语法，可以直接引用已有Java类或对象（实例）的方法或构造器。与lambda联合使用，可以使语言的构造更紧凑简洁，减少冗余代码。"],["body","\n"],["headingLink","默认方法default-methods"],["heading","默认方法（Default methods）。"],["body","\n"],["body","默认方法允许将新功能添加到库的接口中，并确保兼容实现老版本接口的旧有代码。"],["body","\n"],["headingLink","重复注解repeating-annotations"],["heading","重复注解（Repeating Annotations）。"],["body","\n"],["body","重复注解提供了在同一声明或类型中多次应用相同注解类型的能力。"],["body","\n"],["headingLink","类型注解type-annotation"],["heading","类型注解（Type Annotation）。"],["body","\n"],["body","在任何地方都能使用注解，而不是在声明的地方。"],["body","\n"],["headingLink","类型推断增强"],["heading","类型推断增强。"],["body","\n"],["body","方法参数反射（Method Parameter Reflection）。"],["body","\n"],["headingLink","stream-api-"],["heading","Stream API 。"],["body","\n"],["body","新添加的Stream API（java.util.stream） 把真正的函数式编程风格引入到Java中。Stream API集成到了Collections API里。"],["body","\n"],["headingLink","hashmap改进"],["heading","HashMap改进，"],["body","\n"],["body","在键值哈希冲突时能有更好表现。"],["body","\n"],["headingLink","date-time-api"],["heading","Date Time API。"],["body","\n"],["body","加强对日期和时间的处理。"],["body","\n"],["headingLink","javautil-包下的改进"],["heading","java.util 包下的改进，"],["body","\n"],["body","提供了几个实用的工具类。"],["body","\n\n"],["body","并行数组排序。"],["body","\n"],["body","标准的Base64编解码。"],["body","\n"],["body","支持无符号运算。"],["body","\n\n"],["headingLink","javautilconcurrent-包下增加了新的类和方法"],["heading","java.util.concurrent 包下增加了新的类和方法。"],["body","\n\n"],["body","java.util.concurrent.ConcurrentHashMap 类添加了新的方法以支持新的StreamApi和lambada表达式。"],["body","\n"],["body","java.util.concurrent.atomic 包下新增了类以支持可伸缩可更新的变量。"],["body","\n"],["body","java.util.concurrent.ForkJoinPool类新增了方法以支持 common pool。"],["body","\n"],["body","新增了java.util.concurrent.locks.StampedLock类，为控制读/写访问提供了一个基于性能的锁，且有三种模式可供选择。"],["body","\n\n"],["headingLink","hotspot"],["heading","HotSpot"],["body","\n\n"],["body","删除了 永久代（PermGen）."],["body","\n"],["body","方法调用的字节码指令支持默认方法。"],["body","\n\n"],["h1","java9"],["body","\n"],["headingLink","java模块系统"],["heading","java模块系统"],["body","\n"],["body","（Java Platform Module System）。"],["body","\n"],["headingLink","新的版本号格式"],["heading","新的版本号格式"],["body","\n"],["body","$MAJOR.$MINOR.$SECURITY.$PATCH\n"],["body","\n"],["headingLink","java-shell"],["heading","java shell"],["body","\n"],["body","交互式命令行控制台。"],["body","\n"],["headingLink","在private-instance-methods方法上可以使用safevarargs注解"],["heading","在private instance methods方法上可以使用@SafeVarargs注解。"],["body","\n"],["headingLink","diamond语法与匿名内部类结合使用"],["heading","diamond语法与匿名内部类结合使用。"],["body","\n"],["headingLink","下划线_不能单独作为变量名使用"],["heading","下划线_不能单独作为变量名使用。"],["body","\n"],["headingLink","支持私有接口方法您可以使用diamond语法与匿名内部类结合使用"],["heading","支持私有接口方法(您可以使用diamond语法与匿名内部类结合使用)。"],["body","\n"],["headingLink","javadoc"],["heading","Javadoc"],["body","\n\n"],["body","简化Doclet API。"],["body","\n"],["body","支持生成HTML5格式。"],["body","\n"],["body","加入了搜索框,使用这个搜索框可以查询程序元素、标记的单词和文档中的短语。"],["body","\n"],["body","支持新的模块系统。"],["body","\n\n"],["headingLink","jvm"],["heading","JVM"],["body","\n\n"],["body","增强了Garbage-First(G1)并用它替代Parallel GC成为默认的垃圾收集器。"],["body","\n"],["body","统一了JVM 日志，为所有组件引入了同一个日志系统。"],["body","\n"],["body","删除了JDK 8中弃用的GC组合。（DefNew + CMS，ParNew + SerialOld，Incremental CMS）。"],["body","\n\n"],["headingLink","properties文件支持utf-8编码"],["heading","properties文件支持UTF-8编码"],["body","\n"],["body","之前只支持ISO-8859-1。支持Unicode 8.0，在JDK8中是Unicode 6.2。"],["body","\n"],["headingLink","stream加强"],["heading","Stream加强"],["body","\n"],["headingLink","集合加强"],["heading","集合加强"],["body","\n"],["body","list.of()，map.of()，copyof等只读集合的快速创建"],["body","\n"],["h1","java10"],["body","\n"],["headingLink","局部变量类型推断"],["heading","局部变量类型推断"],["body","\n"],["body","（Local-Variable Type Inference）"],["body","\n"],["body","//之前的代码格式\nURL url = new URL(\"http://www.oracle.com/\"); \nURLConnection conn = url.openConnection(); \nReader reader = new BufferedReader(\n    new InputStreamReader(conn.getInputStream()))\n//java10中用var来声明变量\nvar url = new URL(\"http://www.oracle.com/\"); \nvar conn = url.openConnection(); \nvar reader = new BufferedReader(\n    new InputStreamReader(conn.getInputStream()));\n"],["body","\n"],["body","var是一个保留类型名称，而不是关键字。所以之前使用var作为变量、方法名、包名的都没问题，但是如果作为类或接口名，那么这个类和接口就必须重命名了。"],["body","\n"],["body","var的使用场景主要有以下四种："],["body","\n\n"],["body","本地变量初始化。"],["body","\n"],["body","增强for循环中。"],["body","\n"],["body","传统for循环中声明的索引变量。"],["body","\n"],["body","Try-with-resources 变量。​"],["body","\n\n"],["headingLink","optional类添加了新的方法"],["heading","Optional类添加了新的方法"],["body","\n"],["body","orElseThrow(无参数版)"],["body","\n"],["body","相比于已经存在的get方法，这个方法更推荐使用。"],["body","\n"],["h1","java11"],["body","\n"],["headingLink","直接运行"],["heading","直接运行"],["body","\n"],["body","java HelloWorld.java\n"],["body","\n"],["headingLink","string新增方法"],["heading","String新增方法"],["body","\n"],["body","trip方法，可以去除首尾空格，与之前的trim的区别是还可以去除unicode编码的空白字符，例如："],["body","\n"],["body","char c = '\\u2000';//Unicdoe空白字符\nString str = c + \"abc\" + c;\nSystem.out.println(str.strip());\nSystem.out.println(str.trim());\n\nSystem.out.println(str.stripLeading());//去除前面的空格\nSystem.out.println(str.stripTrailing());//去除后面的空格\n"],["body","\n"],["body","isBlank方法，判断字符串长度是否为0，或者是否是空格，制表符等其他空白字符"],["body","\n"],["body","String str = \" \";\nSystem.out.println(str.isBlank());\n"],["body","\n"],["body","repeat方法，字符串重复的次数"],["body","\n"],["body","String str = \"monkey\";\nSystem.out.println(str.repeat(4));\n"],["body","\n"],["headingLink","lambda表达式中的变量类型推断"],["heading","lambda表达式中的变量类型推断"],["body","\n"],["body","jdk11中允许在lambda表达式的参数中使用var修饰"],["body","\n"],["body","//支持lambda表达式参数中使用var\n   MyInterface mi = (var a,var b)->{\n       System.out.println(a);\n       System.out.println(b);\n   };\n\n   mi.m1(\"monkey\",1024);\n"],["body","\n"],["headingLink","支持unicode-100在jdk10中是80"],["heading","支持Unicode 10.0,在jdk10中是8.0"],["body","\n"],["headingLink","标准化http-client"],["heading","标准化HTTP Client"],["body","\n"],["headingLink","编译器线程的延迟分配"],["heading","编译器线程的延迟分配"],["body","\n"],["body","添加了新的命令-XX:+UseDynamicNumberOfCompilerThreads动态控制编译器线程的数量。"],["body","\n"],["headingLink","新的垃圾收集器zgc"],["heading","新的垃圾收集器—ZGC"],["body","\n"],["body","一种可伸缩的低延迟垃圾收集器(实验性)。"],["body","\n"],["headingLink","epsilon"],["heading","Epsilon"],["body","\n"],["body","一款新的实验性无操作垃圾收集器。Epsilon GC 只负责内存分配，不实现任何内存回收机制。这对于性能测试非常有用，可用于与其他GC对比成本和收益。"],["body","\n"],["headingLink","lambda参数的局部变量语法"],["heading","Lambda参数的局部变量语法"],["body","\n"],["body","java10中引入的var字段得到了增强，现在可以用在lambda表达式的声明中。如果lambda表达式的其中一个形式参数使用了var，那所有的参数都必须使用var。"],["body","\n"],["body","当然这个var的使用是有限制的，仅适用于局部变量，增强for循环的索引，以及普通for循环的本地变量；它不能使用于方法形参，构造方法形参，方法返回类型等。"],["body","\n"],["headingLink","optional加强"],["heading","Optional加强"],["body","\n"],["headingLink","inputstreamtransferto"],["heading","InputStream.transferTo"],["body","\n"],["h1","Java12"],["body","\n"],["headingLink","升级的switch语句"],["heading","升级的switch语句"],["body","\n"],["body","在jdk12之前的switch语句中，如果没有写break，则会出现case穿透现象，下面是对case穿透的一个应用，根据输入的月份打印相应的季节。"],["body","\n"],["body","在jdk12之后我们可以省略全部的break和部分case，这样使用"],["body","\n"],["body","int month = 3;\n    switch (month) {\n        case 3,4,5 -> System.out.println(\"spring\");\n        case 6,7,8 -> System.out.println(\"summer\");\n        case 9,10,11 -> System.out.println(\"autumn\");\n        case 12, 1,2 -> System.out.println(\"winter\");\n        default -> System.out.println(\"wrong\");\n    }\n"],["body","\n"],["body","这个是预览功能，如果需要编译和运行的话需要使用下面命令，预览功能在2个版本之后会成为正式版，"],["body","\n"],["body","编译:\n    javac --enable-preview -source 12 Test.java\n\n运行：\n    java --enable-preview Test\n"],["body","\n"],["h1","Java13"],["body","\n"],["headingLink","升级的switch语句-1"],["heading","升级的switch语句"],["body","\n"],["body","jdk13中对switch语句又进行了升级，可以switch的获取返回值"],["body","\n"],["body","int month = 3;\n   String result = switch (month) {\n        case 3,4,5 -> \"spring\";\n        case 6,7,8 -> \"summer\";\n        case 9,10,11 -> \"autumn\";\n        case 12, 1,2 -> \"winter\";\n        default -> \"wrong\";\n    };\n\n    System.out.println(result);\n"],["body","\n"],["body","对于jdk15之后的版本可以直接编译和运行，否则需要使用下面命令执行该预览功能"],["body","\n"],["body","编译:\n    javac --enable-preview -source 13 Test.java\n\n运行：\n    java --enable-preview Test\n"],["body","\n"],["headingLink","文本块的变化"],["heading","文本块的变化"],["body","\n"],["body","在jdk13之前的版本中如果输入的字符串中有换行的话，需要添加换行符"],["body","\n"],["body","String s = \"Hello\\nWorld\\nLearn\\nJava\";\n    System.out.println(s);\n"],["body","\n"],["body","jdk13之后可以直接这样写："],["body","\n"],["body","String s = \"\"\"\n            Hello\n            World\n            Learn\n            Java\n           \"\"\";\n  System.out.println(s);\n"],["body","\n"],["h1","Java14"],["body","\n"],["headingLink","instanceof模式匹配"],["heading","instanceof模式匹配"],["body","\n"],["body","该特性可以减少强制类型转换的操作，简化了代码，代码示例："],["body","\n"],["body","public class TestInstanceof{\n    public static void main(String[] args){\n\n        //jdk14之前的写法\n        Object obj = new Integer(1);\n        if(obj instanceof Integer){\n            Integer i = (Integer)obj;\n            int result = i + 10;\n            System.out.println(i);\n        }\n\n        //jdk14新特性  不用再强制转换了\n        //这里相当于是将obj强制为Integer之后赋值给i了\n        if(obj instanceof Integer i){\n            int result = i + 10;\n            System.out.println(i);\n        }else{\n            //作用域问题，这里是无法访问i的\n        }\n    }\n}\n"],["body","\n"],["body","编译:\n    javac --enable-preview -source 14 TestInstanceof.java\n\n运行：\n    java --enable-preview TestInstanceof\n"],["body","\n"],["headingLink","友好的空指针"],["heading","友好的空指针"],["body","\n"],["body","（NullPointerException）提示"],["body","\n"],["body","jdk14中添加了对于空指针异常友好的提示，便于开发者快速定位空指针的对象。示例代码："],["body","\n"],["body","class Machine{\n    public void start(){\n        System.out.println(\"启动\");\n    }\n}\n\nclass Engine{\n    public Machine machine;\n}\n\nclass Car{\n    public Engine engine;\n\n}\n\npublic class TestNull{\n    public static void main(String[] args){\n        //这里会报出空指针，但是哪个对象是null呢？\n        new Car().engine.machine.start();\n    }\n}\n"],["body","\n"],["body","我们在运行上面代码的时候，错误信息就可以明确的指出那个对象为null了。此外，还可以使用下面参数来查看:"],["body","\n"],["body","java -XX:+ShowCodeDetailsInExceptionMessages TestNull\n"],["body","\n"],["body","这样编译器会明确的告诉开发者哪个对象是null。"],["body","\n"],["headingLink","record类型"],["heading","record类型"],["body","\n"],["body","之前在编写javabean类的时候，需要编写成员变量，get方法，构造方法，toString方法，hashcode方法，equals方法。"],["body","\n"],["body","jdk14编写User"],["body","\n"],["body","public record User(String name,Integer age){}\n"],["body","\n"],["body","通过反编译命令可以看到该字节码文件中的内容，User类是继承了Record类型："],["body","\n"],["body","javap -p -private user\n"],["body","\n"],["body","public class TestUser{\n    public static void main(String[] args){\n        User u = new User(\"jack\",15);\n        System.out.println(u);\n        System.out.println(u.name());\n    }\n}\n"],["body","\n"],["body","编译:\n    javac --enable-preview -source 14 TestUser.java\n\n运行：\n    java --enable-preview TestUser\n"],["body","\n"],["headingLink","sealed-classes"],["heading","Sealed Classes"],["body","\n"],["body","密封类和接口，作用是限制一个类可以由哪些子类继承或者实现。"],["body","\n\n"],["body","如果指定模块的话，sealed class和其子类必须在同一个模块下。如果没有指定模块，则需要在同一个包下。"],["body","\n"],["body","sealed class指定的子类必须直接继承该sealed class。"],["body","\n"],["body","sealed class的子类要用final修饰。"],["body","\n"],["body","sealed class的子类如果不想用final修饰的话，可以将子类声明为sealed class。"],["body","\n\n"],["body","Animal类，在指定允许继承的子类时可以使用全限定名"],["body","\n"],["body","public sealed class Animal \n    permits Cat, Dog{//多个子类之间用,隔开\n\n        public void eat(){}\n}\n"],["body","\n"],["body","Cat类"],["body","\n"],["body","public final class Cat extends Animal{\n    public void eat(){\n        System.out.println(\"123\");\n    }\n}\n"],["body","\n"],["body","Dog类"],["body","\n"],["body","public sealed class Dog extends Animal\n    permits Husky {}\n"],["body","\n"],["body","Husky类"],["body","\n"],["body","public final class Husky extends Dog{\n}\n"],["body","\n"],["body","Test类"],["body","\n"],["body","public class Test{\n    public static void main(String[] args){\n        Cat c = new Cat();\n        c.eat();\n        Dog d = new Dog();\n    }\n}\n"],["body","\n"],["headingLink","charsequence新增的方法"],["heading","CharSequence新增的方法"],["body","\n"],["body","该接口中新增了default方法isEmpty()，作用是判断CharSequence是否为空。"],["body","\n"],["headingLink","treemap新增方法"],["heading","TreeMap新增方法"],["body","\n\n"],["body","putIfAbsent"],["body","\n"],["body","computeIfAbsent"],["body","\n"],["body","computeIfPresent"],["body","\n"],["body","compute"],["body","\n"],["body","merge"],["body","\n\n"],["headingLink","文本块"],["heading","文本块"],["body","\n"],["body","文本块由预览版变为正式版"],["body","\n"],["headingLink","无需配置环境变量"],["heading","无需配置环境变量"],["body","\n"],["body","win系统中安装完成之后会自动将java.exe, javaw.exe, javac.exe, jshell.exe这几个命令添加到环境变量中。这部分可以打开环境变量看下。不过还是建议配置环境变量，因为这几个命令不够用"],["body","\n"],["h1","java16"],["body","\n"],["body","这里只介绍一些跟开发关联度较大的特性，除此之外JDK16还更新了许多其他新特性，感兴趣的同学可以去Oracle官网查看"],["body","\n"],["headingLink","包装类构造方法的警告"],["heading","包装类构造方法的警告"],["body","\n"],["body","使用包装类的构造方法在编译的时候会出现警告，不建议再使用包装类的构造方法。下面代码在javac编译之后会出现警告。"],["body","\n"],["headingLink","新增日时段"],["heading","新增日时段"],["body","\n"],["body","在DateTimeFormatter.ofPattern传入B可以获取现在时间对应的日时段，上午，下午等"],["body","\n"],["body","System.out.println(DateTimeFormatter.ofPattern(\"B\").format(LocalDateTime.now()));\n"],["body","\n"],["headingLink","invocationhandler新增方法"],["heading","InvocationHandler新增方法"],["body","\n"],["body","public static Object invokeDefault(Object proxy, Method method, Object... args)\n"],["body","\n"],["body","该方法可以调用父接口中defalut方法，比如有下面接口"],["body","\n"],["body","interface Girl{\n    default void eat(){\n        System.out.println(\"cucumber\");\n    }\n\n}\n"],["body","\n"],["body","interface Girl{\n    default void eat(){\n        System.out.println(\"cucumber\");\n    }\n\n}\n"],["body","\n"],["body","实现类"],["body","\n"],["body","public class Lucy implements Girl{\n    public void eat(){\n        System.out.println(\"banana\");\n    }\n}\n"],["body","\n"],["body","测试类："],["body","\n"],["body","import java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\npublic class Test{\n    public static void main(String[] args) {\n        Girl girl = new Lucy();\n\n\n        //不使用invokeDefault会调用重写的eat方法\n        Girl proxy1 = (Girl)Proxy.newProxyInstance(girl.getClass().getClassLoader(),girl.getClass().getInterfaces(),\n            (obj,method,params)->{\n            Object invoke = method.invoke(girl);\n            return invoke;\n        });\n        proxy1.eat();\n\n        //使用invokeDefault会调用父接口中的default方法\n        Girl proxy2 = (Girl)Proxy.newProxyInstance(Girl.class.getClassLoader(),new Class<?>[]{Girl.class},\n            (obj,method,params)->{\n            if (method.isDefault()) {\n                return InvocationHandler.invokeDefault(obj, method, params);\n            }\n            return null;\n        });\n        proxy2.eat();\n\n    }\n\n}\n"],["body","\n"],["headingLink","streamtolist"],["heading","Stream().toList()"],["body","\n"],["headingLink","其他"],["heading","其他"],["body","\n"],["body","在之前jdk版本中作为预览功能的Record类，模式匹配的instanceof，打包工具jpackage，已成为正式版。jdk16对GC，jvm运行时内存等内容有一些变化，例如：ZGC并发栈处理，弹性meta space。"],["body","\n"],["h1","Java17"],["body","\n"],["body","java17是一个LTS（long term support）长期支持的版本，根据计划来看java17会支持到2029年（java8会支持到2030年，OMG），同时Oracle提议下一个LTS版本是java21，在2023年9月发布，这样讲LST版本的发布周期由之前的3年变为了2年。这里只介绍一些跟开发关联度较大的特性，除此之外JDK17还更新了一些其他新特性，感兴趣的同学可以从这里查看："],["body","\n"],["body","\n"],["headingLink","switch语法的变化预览"],["heading","switch语法的变化(预览)"],["body","\n"],["body","在之前版本中新增的instanceof模式匹配的特性在switch中也支持了，即我们可以在switch中减少强转的操作。比如下面的代码："],["body","\n"],["body","interface Animal{}\n\nclass Rabbit implements Animal{\n    //特有的方法\n    public void run(){\n        System.out.println(\"run\");\n    }\n}\n\nclass Bird implements Animal{\n    //特有的方法\n    public void fly(){\n        System.out.println(\"fly\");\n    }\n}\n"],["body","\n"],["body","新特性可以减少Animal强转操作代码的编写："],["body","\n"],["body","public class Switch01{\n    public static void main(String[] args) {\n        Animal a = new Rabbit();\n        animalEat(a);\n    }\n\n    public static void animalEat(Animal a){\n        switch(a){\n            //如果a是Rabbit类型，则在强转之后赋值给r，然后再调用其特有的run方法\n            case Rabbit r -> r.run();\n            //如果a是Bird类型，则在强转之后赋值给b，然后调用其特有的fly方法\n            case Bird b -> b.fly();\n            //支持null的判断\n            case null -> System.out.println(\"null\");\n            default -> System.out.println(\"no animal\");\n        }\n    }\n\n}\n"],["body","\n"],["body","该功能在java17中是预览的，编译和运行需要加上额外的参数:"],["body","\n"],["body","javac --enable-preview -source 17 Switch01.java\njava  --enable-preview Switch01\n"],["body","\n"],["headingLink","sealed-classes-1"],["heading","Sealed Classes"],["body","\n"],["body","在jdk15中已经添加了Sealed Classes，只不过当时是作为预览版，经历了2个版本之后，在jdk17中Sealed Classes已经成为正式版了。Sealed Classes的作用是可以限制一个类或者接口可以由哪些子类继承或者实现。"],["body","\n"],["headingLink","伪随机数的变化"],["heading","伪随机数的变化"],["body","\n"],["body","增加了伪随机数相关的类和接口来让开发者使用stream流进行操作"],["body","\n\n"],["body","RandomGenerator"],["body","\n"],["body","RandomGeneratorFactory"],["body","\n\n"],["body","之前的java.util.Random和java.util.concurrent.ThreadLocalRandom都是RandomGenerator接口的实现类。"],["body","\n"],["headingLink","去除了aot和jit"],["heading","去除了AOT和JIT"],["body","\n"],["body","AOT（Ahead-of-Time）是java9中新增的功能，可以先将应用中中的字节码编译成机器码。"],["body","\n"],["body","Graal编译器作为使用java开发的JIT（just-in-time ）即时编译器在java10中加入（注意这里的JIT不是之前java中的JIT，在JEP 317中有说明https://openjdk.java.net/jeps/317）。"],["body","\n"],["body","以上两项功能由于使用量较少，且需要花费很多精力来维护，因此在java17中被移除了。当然你可以通过Graal VM来继续使用这些功能。"],["body","\n"],["h1","参考链接："],["body","\n\n"],["body","JDK Release Notes"],["body","\n"],["body","What's New in JDK 8"],["body","\n"],["body","What’s New in JDK 9"],["body","\n"],["body","JDK 10 Release Notes"],["body","\n"],["body","JDK 11 Release Notes"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/web项目启动慢.html"],["title","web项目启动慢.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","注意这条日志"],["heading","注意这条日志："],["body","\n"],["body","org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom Creation of ``SecureRandom instance ``for` `session ID generation using [SHA1PRNG] took [``253``,``251``] milliseconds.\n"],["body","\n"],["body","根本原因是 SecureRandom 这个 jre 的工具类的问题。那为什么 SecureRandom generateSeed 这么慢，甚至挂在 Linux 操作系统呢？"],["body","\n"],["body","Tomcat 7/8 都使用 org.apache.catalina.util.SessionIdGeneratorBase.createSecureRandom 类产生安全随机类 SecureRandom 的实例作为会话 ID。"],["body","\n"],["body","Tomcat 使用 SHA1PRNG 算法是基于 SHA-1 算法实现且保密性较强的伪随机数生成器。"],["body","\n"],["body","在 SHA1PRNG 中，有一个种子产生器，它根据配置执行各种操作。"],["body","\n"],["body","Linux 中的随机数可以从两个特殊的文件中产生，一个是 /dev/urandom，另外一个是 /dev/random。他们产生随机数的原理是利用当前系统的熵池来计算出固定一定数量的随机比特，然后将这些比特作为字节流返回。熵池就是当前系统的环境噪音，熵指的是一个系统的混乱程度，系统噪音可以通过很多参数来评估，如内存的使用，文件的使用量，不同类型的进程数量等等。如果当前环境噪音变化的不是很剧烈或者当前环境噪音很小，比如刚开机的时候，而当前需要大量的随机比特，这时产生的随机数的随机效果就不是很好了。"],["body","\n"],["body","这就是为什么会有 /dev/urandom 和 /dev/random 这两种不同的文件，后者在不能产生新的随机数时会阻塞程序，而前者不会（ublock），当然产生的随机数效果就不太好了，这对加密解密这样的应用来说就不是一种很好的选择。/dev/random 会阻塞当前的程序，直到根据熵池产生新的随机字节之后才返回，所以使用 /dev/random 比使用 /dev/urandom 产生大量随机数的速度要慢。"],["body","\n"],["body","SecureRandom generateSeed 使用 /dev/random 生成种子。但是 /dev/random 是一个阻塞数字生成器，如果它没有足够的随机数据提供，它就一直等，这迫使 JVM 等待。键盘和鼠标输入以及磁盘活动可以产生所需的随机性或熵。但在一个服务器缺乏这样的活动，可能会出现问题。"],["body","\n"],["body","有2种解决方案："],["body","\n"],["body","1. 在Tomcat环境中解决："],["body","\n"],["body","可以通过配置 JRE 使用非阻塞的 Entropy Source："],["body","\n"],["body","在 catalina.sh 中加入这么一行：-Djava.security.egd=file:/dev/./urandom 即可。"],["body","\n"],["body","2. 在 JVM 环境中解决："],["body","\n"],["body","打开 $JAVA_PATH/jre/lib/security/java.security 这个文件，找到下面的内容："],["body","\n"],["body","securerandom.source=file:/dev/random\n"],["body","\n"],["body","替换成："],["body","\n"],["body","securerandom.source=file:/dev/./urandom\n"],["body","\n"],["body","这里值为何要在 dev 和 random 之间加一个点呢？是因为一个 JDK 的 bug，有人反馈即使对 securerandom.source 设置为 /dev/urandom 它也仍然使用的 /dev/random，有人提供了变通的解决方法，其中一个变通的做法是对 securerandom.source 设置为 /dev/./urandom 才行。也有人评论说这个不是 bug，是有意为之。"],["body","\n"],["body","在 JDK 7 的 java.security 文件里，配置里的是："],["body","\n"],["body","# Select the source of seed data ``for` `SecureRandom. By ``default` `an``# attempt is made to use the entropy gathering device specified by``# the securerandom.source property. If an exception occurs when``# accessing the URL then the traditional system/thread activity``# algorithm is used.``#``# On Solaris and Linux systems, ``if` `file:/dev/urandom is specified and it``# exists, a special SecureRandom implementation is activated by ``default``.``# This ``\"NativePRNG\"` `reads random bytes directly from /dev/urandom.``#``# On Windows systems, the URLs file:/dev/random and file:/dev/urandom``# enables use of the Microsoft CryptoAPI seed functionality.``#``securerandom.source=file:/dev/urandom\n"],["body","\n"],["body","但这个 /dev/urandom 也同那个 bug 报告里所说的等同于 /dev/random；要使用非阻塞的熵池，这里还是要修改为 /dev/./urandom。经测试，貌似 JDK 7 并没有同注释里的意思修复了这个问题。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/JavaLocalDate.html"],["title","JavaLocalDate.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","chrono"],["body","\n"],["body","chrono包提供历法相关的接口与实现。Java中默认使用的历法是ISO 8601日历系统，它是世界民用历法，也就是我们所说的公历。平年有365天，闰年是366天。闰年的定义是：非世纪年，能被4整除；世纪年能被400整除。为了计算的一致性，公元1年的前一年被当做公元0年，以此类推。此外chrono包提供了四种其他历法，每种历法有自己的纪元（Era）类、日历类和日期类，分别是："],["body","\n\n"],["body","泰国佛教历：ThaiBuddhistEra、ThaiBuddhistChronology和ThaiBuddhistDate；"],["body","\n"],["body","民国历：MinguoEra、MinguoChronology和MinguoDate；"],["body","\n"],["body","日本历：JapaneseEra、JapaneseChronology和JapaneseDate"],["body","\n"],["body","伊斯兰历：HijrahEra、HijrahChronology和HijrahDate："],["body","\n\n"],["h1","format"],["body","\n"],["body","format包提供了日期格式化的方法。format包中定义了时区名称、日期解析和格式化的各种枚举，以及最为重要的格式化类DateTimeFormatter。需要注意的是，format包类中的类都是final的，都提供了线程安全的访问。在DateTimeFormatter类中提供了ofPattern的静态方法来获得一个DateTimeFormatter，但细看其实现，其实还是调用的DateTimeFormatterBuilder的静态方法：DateTimeFormatterBuilder.appendPattern(pattern).toFormatter();所以我们在实际格式化日期和时间的时候，是两种方式都可以使用的。"],["body","\n"],["h1","temporal"],["body","\n"],["body","temporal包中定义了整个日期时间框架的基础：各种时间单位、时间调节器，以及在年月日时分秒中用到的各种属性。Java8中的日期时间类都是实现了temporal包中的时间单位（Temporal）、时间调节器（TemporalAdjuster）和各种属性的接口，所以在后面的日期的操作方法中都是以最基本的时间单位和各种属性为参数的。"],["body","\n"],["h1","zone"],["body","\n"],["body","定义了时区转换的各种方法。"],["body","\n"],["h1","Java 8日期/时间类"],["body","\n"],["headingLink","instant"],["heading","Instant"],["body","\n\n"],["body","\n"],["body","时间戳"],["body","\n"],["body","\n"],["body","\n"],["body","Instant可以精确到纳秒,这超过了long的最大表示范围,实现中是分成了两部分来表示，一部分是seconds，表示从1970-01-01 00:00:00开始到现在的秒数，另一个部分是nanos，表示纳秒部分"],["body","\n"],["body","\n"],["body","\n"],["body","创建方式"],["body","\n"],["body","Instant now = Instant.now(); \nInstant instant = Instant.ofEpochSecond(60, 100000);\n"],["body","\n"],["body","\n\n"],["headingLink","duration"],["heading","Duration"],["body","\n\n"],["body","\n"],["body","Duration是两个时间戳的差值"],["body","\n"],["body","\n"],["body","\n"],["body","包含两部分：seconds表示秒，nanos表示纳秒"],["body","\n"],["body","\n\n"],["body","LocalDateTime from = LocalDateTime.of(2020, Month.JANUARY, 22, 16, 6, 0);    // 2020-01-22 16:06:00\nLocalDateTime to = LocalDateTime.of(2020, Month.FEBRUARY, 22, 16, 6, 0);     // 2020-02-22 16:06:00\nDuration duration = Duration.between(from, to);     // 表示从 2020-01-22 16:06:00到 2020-02-22 16:06:00 这段时间\n"],["body","\n"],["body","Duration duration1 = Duration.of(5, ChronoUnit.DAYS);       // 5天\nDuration duration2 = Duration.of(1000, ChronoUnit.MILLIS);  // 1000毫秒\n"],["body","\n"],["headingLink","period"],["heading","Period"],["body","\n\n"],["body","\n"],["body","以年月日来衡量一个时间段 (比如1年2个月3天：Period period = Period.of(1, 2, 3); )"],["body","\n"],["body","Period period = Period.between(\n                LocalDate.of(2020, 1, 22),\n                LocalDate.of(2020, 2, 22));\n"],["body","\n"],["body","\n\n"],["headingLink","localdatelocaltimelocaldatetime"],["heading","LocalDate/LocalTime/LocalDateTime"],["body","\n"],["body","简单的日期操作"],["body","\n"],["body","\n"],["body","简单的日期操作，比如增加、减少一天、修改年月日等"],["body","\n"],["body","\n"],["body","LocalDate date = LocalDate.of(2020, 2, 22);          // 2020-02-22\nLocalDate date1 = date.withYear(2021);              // 修改为 2021-02-22\nLocalDate date2 = date.withMonth(3);                // 修改为 2020-03-22\nLocalDate date3 = date.withDayOfMonth(1);           // 修改为 2020-02-01\nLocalDate date4 = date.plusYears(1);                // 增加一年 2021-02-22\nLocalDate date5 = date.minusMonths(2);              // 减少两个月，到2019年的12月  2019-12-22\nLocalDate date6 = date.plus(5, ChronoUnit.DAYS);    // 增加5天 2020-02-27\n"],["body","\n"],["body","复杂的日期操作"],["body","\n"],["body","\n"],["body","比较复杂的日期操作，比如将时间调到下一个工作日，或者是下个月的最后一天，这时候我们可以使用with()方法的另一个重载方法，它接收一个TemporalAdjuster参数，可以使我们更加灵活的调整日期"],["body","\n"],["body","\n"],["body","LocalDate date7 = date.with(TemporalAdjusters.nextOrSame(DayOfWeek.SUNDAY));      // 返回下一个距离当前时间最近的星期日 2020-02-23\nLocalDate date9 = date.with(TemporalAdjusters.lastInMonth(DayOfWeek.SATURDAY));  // 返回本月最后一个周六 2020-02-29\n"],["body","\n"],["body","TemporalAdjusterAPI"],["body","\n"],["body","方法名"],["body","描述"],["body","\n"],["body","dayOfWeekInMonth"],["body","返回同一个月中每周的第几天"],["body","\n"],["body","firstDayOfMonth"],["body","返回当月的第一天"],["body","\n"],["body","firstDayOfNextMonth"],["body","返回下月的第一天"],["body","\n"],["body","firstDayOfNextYear"],["body","返回下一年的第一天"],["body","\n"],["body","firstDayOfYear"],["body","返回本年的第一天"],["body","\n"],["body","firstInMonth"],["body","返回同一个月中第一个星期几"],["body","\n"],["body","lastDayOfMonth"],["body","返回当月的最后一天"],["body","\n"],["body","lastDayOfNextMonth"],["body","返回下月的最后一天"],["body","\n"],["body","lastDayOfNextYear"],["body","返回下一年的最后一天"],["body","\n"],["body","lastDayOfYear"],["body","返回本年的最后一天"],["body","\n"],["body","lastInMonth"],["body","返回同一个月中最后一个星期几"],["body","\n"],["body","next / previous"],["body","返回后一个/前一个给定的星期几"],["body","\n"],["body","nextOrSame / previousOrSame"],["body","返回后一个/前一个给定的星期几，如果这个值满足条件，直接返回"],["body","\n\n\n"],["headingLink","时区"],["heading","时区"],["body","\n"],["body","//根据字符串获取时区\nZoneId shanghaiZoneId = ZoneId.of(\"Asia/Shanghai\");\n//获取系统默认时区\nZoneId systemZoneId = ZoneId.systemDefault();\n//获取时区字符串\nSet<String> zoneIds = ZoneId.getAvailableZoneIds();\n//新旧时区转换\nZoneId oldToNewZoneId = TimeZone.getDefault().toZoneId();\n\n//转换ZonedDateTime 对象\nLocalDateTime localDateTime = LocalDateTime.now();\nZonedDateTime zonedDateTime = ZonedDateTime.of(localDateTime, shanghaiZoneId);\n"],["body","\n"],["body","ZonedDateTime对象由两部分构成，LocalDateTime和ZoneId，其中2020-02-22T16:50:54.658部分为LocalDateTime，+08:00[Asia/Shanghai]部分为ZoneId。另一种表示时区的方式是使用ZoneOffset，它是以当前时间和世界标准时间（UTC）/格林威治时间（GMT）的偏差来计算，例如："],["body","\n"],["body","ZoneOffset zoneOffset = ZoneOffset.of(\"+09:00\"); \nLocalDateTime localDateTime = LocalDateTime.now(); \nOffsetDateTime offsetDateTime = OffsetDateTime.of(localDateTime, zoneOffset);\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/java优化指南.html"],["title","java优化指南.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","1、尽量指定类、方法的final修饰符"],["body","\n"],["body","Java编译器会寻找机会内联所有的final方法，内联对于提升Java运行效率作用重大，具体参见Java运行期优化。此举能够使性能平均提高50% 。"],["body","\n"],["body","2、尽量重用对象"],["body","\n"],["body","3、尽可能使用局部变量"],["body","\n"],["body","4、及时关闭流"],["body","\n"],["body","5、尽量减少对变量的重复计算"],["body","\n"],["body","**6、**尽量采用懒加载的策略，即在需要的时候才创建"],["body","\n"],["body","7、慎用异常"],["body","\n"],["body","8、不要在循环中使用try…catch…，应该把其放在最外层"],["body","\n"],["body","9、如果能估计到待添加的内容长度，为底层以数组方式实现的集合、工具类指定初始长度"],["body","\n"],["body","10、当复制大量数据时，使用System.arraycopy命令"],["body","\n"],["body","11、乘法和除法使用移位操作"],["body","\n"],["body","12、基于效率和类型检查的考虑，应该尽可能使用array，无法确定数组大小时才使用ArrayList"],["body","\n"],["body","13、 尽量在合适的场合使用单例"],["body","\n"],["body","14、使用同步代码块替代同步方法"],["body","\n"],["body","15、程序运行过程中避免使用反射"],["body","\n"],["body","16、使用带缓冲的输入输出流进行IO操作"],["body","\n"],["body","17、字符串变量和字符串常量equals的时候将字符串常量写在前面，避免空指针"],["body","\n"],["body","18、使用 try-with-resources 关闭流"],["body","\n"],["body","19、尽量避免使用split，"],["body","\n"],["body","除非是必须的，否则应该避免使用split，split由于支持正则表达式，所以效率比较低，如果是频繁的几十，几百万的调用将会耗费大量资源，如果确实需要频繁的调用split，可以考虑使用apache的StringUtils.split(string,char)，频繁split的可以缓存结果。"],["body","\n"],["body","rebase测试"],["body","\n"],["body","12"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/jdk与jre.html"],["title","jdk与jre.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","jdk中rtjartoolsjar和dtjar作用"],["heading","JDK中rt.jar、tools.jar和dt.jar作用"],["body","\n\n"],["body","dt.jar和tools.jar位于：{Java_Home}/lib/下，而rt.jar位于：{Java_Home}/jre/lib/下,其中："],["body","\n"],["body","rt.jar是JAVA基础类库，也就是你在java doc里面看到的所有的类的class文件"],["body","\n"],["body","dt.jar是关于运行环境的类库"],["body","\n"],["body","tools.jar是工具类库,编译和运行需要的都是toos.jar里面的类分别是sun.tools.java.; sun.tols.javac.;"],["body","\n"],["body","在Classpath设置这几个变量，是为了方便在程序中 import；Web系统都用到tool.jar。"],["body","\n\n"],["headingLink","rtjar"],["heading","rt.jar"],["body","\n"],["body","rt.jar 默认就在Root Classloader的加载路径里面的，而在Claspath配置该变量是不需要的；"],["body","\n"],["body","同时jre/lib目录下的 其他jar:jce.jar、jsse.jar、charsets.jar、resources.jar都在Root Classloader中"],["body","\n"],["headingLink","toolsjar"],["heading","tools.jar"],["body","\n\n"],["body","tools.jar 是系统用来编译一个类的时候用到的，即执行javac的时候用到"],["body","\n"],["body","javac XXX.java  实际上就是运行  java -Calsspath=%JAVA_HOME%\\lib\\tools.jar xx.xxx.Main XXX.java"],["body","\n"],["body","javac就是对上面命令的封装 所以tools.jar 也不用加到classpath里面"],["body","\n\n"],["headingLink","dtjar"],["heading","dt.jar"],["body","\n"],["body","dt.jar是关于运行环境的类库,主要是swing的包  在用到swing时最好加上。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/JavaUnsafe类.html"],["title","JavaUnsafe类.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JavaUnsafe类与CAS操作"],["body","\n"],["headingLink","前言"],["heading","前言"],["body","\n"],["body","最近看java源码发现有多处地方都使用到了Unsafe类,于是在网上查阅资料教程.以下是个人总结"],["body","\n"],["headingLink","unsafe简介"],["heading","Unsafe简介"],["body","\n"],["body","Unsafe两大功能:"],["body","\n\n"],["body","直接通过内存地址 修改对象,获取对象引用"],["body","\n"],["body","使用硬件指令 实现 原子操作 (CAS compare and swap)"],["body","\n\n"],["body","Unsafe的使用:"],["body","\n\n"],["body","\n"],["body","Unsafe是典型的单例模式,通过  public static Unsafe getUnsafe()获取实例"],["body","\n"],["body","\n"],["body","\n"],["body","且 该方法被 @CallerSensitive所注解, 表明只能由系统类加载器加载的类所调用"],["body","\n"],["body","\n"],["body","\n"],["body","为了在测试代码中使用Unsafe,可以通过反射获取该类的静态字段的实例"],["body","\n"],["body","Field f= Unsafe.class.getDeclaredField(\"theUnsafe\");\nf.setAccessible(true);\nUnsafe u = (Unsafe) f.get(null);\n"],["body","\n"],["body","\n\n"],["headingLink","unsafe-api"],["heading","Unsafe API"],["body","\n"],["headingLink","获取偏移"],["heading","获取偏移"],["body","\n\n"],["body","\n"],["body","获取成员变量在 对象中的偏移"],["body","\n"],["body","public native long objectFieldOffset(Field f);"],["body","\n"],["body","\n"],["body","\n"],["body","获取静态成员所在 的类,返回Class对象"],["body","\n"],["body","public native Object staticFieldBase(Field f);"],["body","\n"],["body","\n"],["body","\n"],["body","获取静态成员在 类中的偏移"],["body","\n"],["body","public native long staticFieldOffset(Field f);"],["body","\n"],["body","\n"],["body","\n"],["body","获取数组首个元素 在数组对象中的偏移"],["body","\n"],["body","public native int arrayBaseOffset(Class arrayClass);"],["body","\n"],["body","\n"],["body","\n"],["body","获取每个数组元素所占空间"],["body","\n"],["body","public native int arrayIndexScale(Class arrayClass);"],["body","\n"],["body","\n\n"],["headingLink","根据-对象偏移--获取或设置-对象中字段的引用或值"],["heading","根据 对象+偏移  获取或设置 对象中字段的引用或值"],["body","\n\n"],["body","\n"],["body","获取 对象var1内部中偏移为var2的 XXX类型字段的 值或引用"],["body","\n"],["body","public native byte getXxxx(Object var1, long var2);\n例如\n   public native byte getByte(Object var1, long var2);\n   public native int getInt(Object var1, long var2);\n   public native double getDouble(long var1);\n   public native boolean getBoolean(Object var1, long var2);\n   public native Object getObject(Object var1, long var2);\n......\n"],["body","\n"],["body","\n"],["body","\n"],["body","设置对象var1内部中偏移为var2的 XXX类型字段的值 为var4"],["body","\n"],["body"," public native void putBoolean(Object var1, long var2, boolean var4);\n public native void putByte(Object var1, long var2, byte var4);\n public native void putInt(Object var1, long var2, int var4);\n public native void putObject(Object var1, long var2, Object var4);\n......\n"],["body","\n"],["body","\n"],["body","\n"],["body","带volatile语义的get,put:表示多线程之间的变量可见,一个线程修改一个变量之后,另一个线程立刻能看到"],["body","\n"],["body","public native void putBooleanVolatile(Object var1, long var2, boolean var4);\npublic native int getIntVolatile(Object var1, long var2);\npublic native long getLongVolatile(Object var1, long var2);\n......\n"],["body","\n"],["body","\n\n"],["headingLink","本地内存操作"],["heading","本地内存操作"],["body","\n\n"],["body","\n"],["body","分配指定大小的一块本地内存 (同C语言中的 malloc)"],["body","\n"],["body","public native long allocateMemory(long bytes);"],["body","\n"],["body","\n"],["body","\n"],["body","重新分配内存(同C语言中的 realloc)"],["body","\n"],["body","public native long reallocateMemory(long address, long bytes);"],["body","\n"],["body","\n"],["body","\n"],["body","将给定的内存块  的所有字节 bytes 设置成固定的值 value (通过 object + offset 确定内存的基址)(同C语言中的 memset)"],["body","\n"],["body","public native void setMemory(Object o, long offset, long bytes, byte value);"],["body","\n"],["body","\n"],["body","\n"],["body","复制内存块,内存块 srcBasc+srcOffset + bytes - > destBase+destOffset + bytes  (同C语言中的 memcpy)"],["body","\n"],["body","public native void copyMemory(Object srcBase, long srcOffset, Object destBase, long destOffset,long bytes);"],["body","\n"],["body","\n"],["body","\n"],["body","释放通过Allocate分配的本地内存(同C语言中的 free)"],["body","\n"],["body"," public native void freeMemory(long address);"],["body","\n"],["body","\n"],["body","\n"],["body","获取和设置本地内存中的值,va1表示本地内存绝对地址,var3表示要设置的值"],["body","\n"],["body","public native short getShort(long var1);\npublic native int getInt(long var1);\npublic native void putShort(long var1, short var3);\npublic native void putInt(long var1, int var3);\n"],["body","\n"],["body","\n\n"],["headingLink","cas操作"],["heading","CAS操作"],["body","\n"],["body","java.util.concurrent 包中无锁化的实现就是调用了CAS以下原子操作"],["body","\n\n"],["body","\n"],["body","CAS语义"],["body","\n\n"],["body","将 由var1+var2确定的地址的值  从var4 修改成 var5 "],["body","\n"],["body","如果旧值不为 var4,则直接退出"],["body","\n"],["body","多个线程修改同一个变量时, 只会有一个线程修改成功,其他线程不会被挂起,而是告知失败"],["body","\n"],["body","这是一种 乐观锁的语义, 每个线程都假设自己的操作能成功,与之相对应的synchronized的悲观锁语义,每次修改操作必须 只能有一个线程独占资源"],["body","\n\n"],["body","\n"],["body","\n"],["body","设置 通过 var1+var2确定的内存基址的int类型变量,将值原子的从 var4 变成 var5,成功true,失败false"],["body","\n"],["body","替换int值:public final native boolean compareAndSwapInt(Object var1, long var2, int var4, int var5);\n替换引用:public final native boolean compareAndSwapObject(Object var1, long var2, Object var4, Object var5);\n"],["body","\n"],["body","\n"],["body","\n"],["body","基于上面操作的包装方法: 得到对象 中某个int字段的值 通过(var1+var2), 并给该值加上 var4,返回相加前的值"],["body","\n"],["body","典型实现\npublic final int getAndAddInt(Object var1, long var2, int var4) {\n        int var5;\n        do {\n            var5 = this.getIntVolatile(var1, var2);\n        } while(!this.compareAndSwapInt(var1, var2, var5, var5 + var4));\n        return var5;\n    }\n"],["body","\n"],["body","\n\n"],["headingLink","packunpack"],["heading","Pack/Unpack"],["body","\n\n"],["body","\n"],["body","阻塞和释放任一线程对象"],["body","\n"],["body","\n"],["body","\n"],["body","内部实现通过 信号量的方式,信号量值为1,pack 消耗值, unpack增加值"],["body","\n"],["body","\n"],["body","\n"],["body","在 LockSupport 类包装使用"],["body","\n"],["body","\n\n"],["headingLink","example"],["heading","Example"],["body","\n"],["body","//测试对象\npublic class UnsafeEntity {\n    private  int a;\n    private  int c;\n    private  int d;\n    private  static  int b = 1;\n    getter......\n    setter......\n}\n"],["body","\n"],["body","\n//测试代码\npackage com.weisanju;\nimport sun.misc.Unsafe;\nimport java.lang.reflect.Field;\n\npublic class UnsafeTest {\n    public static void main(String[] args) throws Exception {\n        Field f= Unsafe.class.getDeclaredField(\"theUnsafe\");\n        f.setAccessible(true);\n        Unsafe u = (Unsafe) f.get(null);\n        //获取成员变量 的偏移\n        long a = u.objectFieldOffset(UnsafeEntity.class.getDeclaredField(\"a\"));\n        long c = u.objectFieldOffset(UnsafeEntity.class.getDeclaredField(\"c\"));\n        long d = u.objectFieldOffset(UnsafeEntity.class.getDeclaredField(\"d\"));\n        System.out.println(\"成员字段a:\"+a);\n        System.out.println(\"成员字段c:\"+c);\n        System.out.println(\"成员字段d:\"+d);\n\n        //设置对象字段的值\n        UnsafeEntity testa = new UnsafeEntity();\n        testa.setA(666);\n        System.out.println(\"设置前:\"+u.getInt(testa, a));\n        u.putInt(testa,a,777);\n        System.out.println(\"设置后:\"+u.getInt(testa, a));\n\n        //获取静态字段所在的类的对象\n        System.out.println(u.staticFieldBase(UnsafeEntity.class.getDeclaredField(\"b\")));\n        //获取静态字段的偏移\n        long b = u.staticFieldOffset(UnsafeEntity.class.getDeclaredField(\"b\"));\n        System.out.println(\"静态字段b:\"+b);\n\n        //静态字段的设置, 注意由于静态字段,存储于方法区,所以起始对象为类的字节码\n        System.out.println(\"设置前:\"+u.getInt(UnsafeEntity.class, b));\n        u.putInt(UnsafeEntity.class,b,11);\n        System.out.println(\"设置后:\"+u.getInt(UnsafeEntity.class, b));\n\n\n        //普通 数组的使用\n        int arr[] = {1,2,3,4,5,6,7,8};\n        //head为头地址偏移\n        long head = u.arrayBaseOffset(int[].class);\n        //step为数组元素所占空间\n        long step = u.arrayIndexScale(int[].class);\n        // 获取 与设置 arr[7] 的值\n        int index = 7;\n        System.out.println(u.getInt(arr, head + step * index));\n        u.putInt(arr,head+step*index,666);\n        System.out.println(arr[index]);\n\n        //对象数组的使用\n        UnsafeEntity arrObj[] = new UnsafeEntity[10];\n        //head为头地址偏移\n        head = u.arrayBaseOffset(UnsafeEntity[].class);\n        //step为数组元素所占空间\n        step = u.arrayIndexScale(UnsafeEntity[].class);\n        // 获取 与设置 arr[7] 的值\n        index = 7;\n        arrObj[index] = new UnsafeEntity();\n        System.out.println(u.getObject(arrObj, head + step * index));\n        u.putObject(arrObj,head+step*index,new UnsafeEntity());\n        System.out.println(arrObj[index]);\n    }\n}\n"],["body","\n"],["body","输出结果\n成员字段a:12\n成员字段c:16\n成员字段d:20\n设置前:666\n设置后:777\nclass com.weisanju.UnsafeEntity\n静态字段b:104\n设置前:1\n设置后:11\n8\n666\ncom.weisanju.UnsafeEntity@1540e19d\ncom.weisanju.UnsafeEntity@677327b6\n"],["body","\n"],["headingLink","总结"],["heading","总结"],["body","\n\n"],["body","Unsafe为从cpu底层指令 层面 为多线程提供了无锁化设计,以及直接操作内存地址的能力,Java中 Atomic原子类,netty,concurrent包等底层都封装了 该对象"],["body","\n"],["body","当然 极大的效率,也必然意外着 极大的不安全, 如果错误给一块内存区赋值,程序不会有任何反应,这就给程序带来极大的安全隐患"],["body","\n"],["body","当然了解Unsafe类 能够便于我们更好的阅读 Java底层源码"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/java序列化接口.html"],["title","java序列化接口.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概述"],["body","\n"],["body","Java 序列化是 JDK 1.1 时引入的一组开创性的特性，用于将 Java 对象转换为字节数组，便于存储或传输。此后，仍然可以将字节数组转换回 Java 对象原有的状态。"],["body","\n"],["body","序列化的思想是“冻结”对象状态，然后写到磁盘或者在网络中传输；反序列化的思想是“解冻”对象状态，重新获得可用的 Java 对象。"],["body","\n"],["body","再来看看序列化 Serializbale 接口的定义："],["body","\n"],["body","public interface Serializable {\n}\n"],["body","\n"],["body","序列化接口本身没有任何作用，起作用的是 ObjectOutputStream，ObjectInputStream"],["body","\n"],["h1","OOS与OIS的序列化与反序列化"],["body","\n"],["body","以 ObjectOutputStream 为例，它在序列化的时候会依次调用 writeObject()→writeObject0()→writeOrdinaryObject()→writeSerialData()→invokeWriteObject()→defaultWriteFields()。"],["body","\n"],["body","核心代码"],["body","\n"],["body","if (obj instanceof String) {\n    writeString((String) obj, unshared);\n} else if (cl.isArray()) {\n    writeArray(obj, desc, unshared);\n} else if (obj instanceof Enum) {\n    writeEnum((Enum<?>) obj, desc, unshared);\n} else if (obj instanceof Serializable) {\n    writeOrdinaryObject(obj, desc, unshared);\n} else {\n    if (extendedDebugInfo) {\n        throw new NotSerializableException(\n            cl.getName() + \"\\n\" + debugInfoStack.toString());\n    } else {\n        throw new NotSerializableException(cl.getName());\n    }\n}\n"],["body","\n"],["body","也就是说，ObjectOutputStream 在序列化的时候，会判断被序列化的对象是哪一种类型，字符串？数组？枚举？还是 Serializable，如果全都不是的话，抛出 NotSerializableException。"],["body","\n"],["h1","字段选择"],["body","\n\n"],["body","过滤 STATIC，TRANSIENT"],["body","\n\n"],["body","private static ObjectStreamField[] getDefaultSerialFields(Class<?> cl) {\n    Field[] clFields = cl.getDeclaredFields();\n    ArrayList<ObjectStreamField> list = new ArrayList<>();\n    int mask = Modifier.STATIC | Modifier.TRANSIENT;\n\n    int size = list.size();\n    return (size == 0) ? NO_FIELDS :\n        list.toArray(new ObjectStreamField[size]);\n}\n"],["body","\n"],["h1","Externalizable"],["body","\n"],["body","除了 Serializable 之外，Java 还提供了一个序列化接口 Externalizable"],["body","\n"],["body","class Wanger implements Externalizable {\n    private String name;\n    private int age;\n\n    public Wanger() {\n\n    }\n\n    public String getName() {\n        return name;\n    }\n\n\n    @Override\n    public String toString() {\n        return \"Wanger{\" + \"name=\" + name + \",age=\" + age + \"}\";\n    }\n\n    @Override\n    public void writeExternal(ObjectOutput out) throws IOException {\n\n    }\n\n    @Override\n    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\n\n    }\n\n}\n"],["body","\n"],["body","新增了一个无参的构造方法。"],["body","\n\n"],["body","使用 Externalizable 进行反序列化的时候，会调用被序列化类的无参构造方法去创建一个新的对象，然后再将被保存对象的字段值复制过去"],["body","\n\n"],["body","新增了两个方法 writeExternal() 和 readExternal()"],["body","\n"],["body","1）调用 ObjectOutput 的 writeObject() 方法将字符串类型的 name 写入到输出流中；"],["body","\n"],["body","2）调用 ObjectOutput 的 writeInt() 方法将整型的 age 写入到输出流中；"],["body","\n"],["body","3）调用 ObjectInput 的 readObject() 方法将字符串类型的 name 读入到输入流中；"],["body","\n"],["body","4）调用 ObjectInput 的 readInt() 方法将字符串类型的 age 读入到输入流中；"],["body","\n"],["h1","serialVersionUID"],["body","\n"],["body","serialVersionUID 被称为序列化 ID，它是决定 Java 对象能否反序列化成功的重要因子。在反序列化时，Java 虚拟机会把字节流中的 serialVersionUID 与被序列化类中的 serialVersionUID 进行比较，如果相同则可以进行反序列化，否则就会抛出序列化版本不一致的异常。"],["body","\n"],["body","1）添加一个默认版本的序列化 ID："],["body","\n"],["body","private static final long serialVersionUID = 1L。\n"],["body","\n"],["body","2）添加一个随机生成的不重复的序列化 ID。"],["body","\n"],["body","private static final long serialVersionUID = -2095916884810199532L;\n"],["body","\n"],["body","3）添加 @SuppressWarnings 注解。"],["body","\n"],["body","@SuppressWarnings(\"serial\")\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/string常量池.html"],["title","string常量池.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","常量池"],["body","\n"],["body","通常来说，我们提到的常量池分为三种"],["body","\n\n"],["body","class文件中的常量池"],["body","\n"],["body","运行时常量池"],["body","\n"],["body","字符串常量池"],["body","\n\n"],["h1","class文件中的常量池"],["body","\n"],["body","\n"],["body","class文件中的常量池当然是位于class文件中，而class文件又是位于磁盘上。"],["body","\n"],["body","\n"],["body","\n"],["body","常量池可以理解为class文件中资源仓库，它是class文件结构中与其它项目关联最多的数据类型，主要用于存放编译器生成的各种字面量(Literal)和符号引用(Symbolic References)。"],["body","\n"],["body","字面量就是我们所说的常量概念，如文本字符串、被声明为final的常量值等。"],["body","\n"],["body","符号引用是一组符号来描述所引用的目标，符号可以是任何形式的字面量，只要使用时能无歧义地定位到目标即可（它与直接引用区分一下，直接引用一般是指向方法区的本地指针，相对偏移量或是一个能间接定位到目标的句柄）。一般包括下面三类常量："],["body","\n\n"],["body","类和接口的全限定名"],["body","\n"],["body","字段的名称和描述符"],["body","\n"],["body","方法的名称和描述符"],["body","\n\n"],["body","public class Main {\n    public static void main(String[] args) {\n        String name = \"dmz\";\n    }\n}\n\n//编译成以下字节码\npublic class com.dmz.jvm.Main\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\n// 这里就是常量池了\nConstant pool:\n   #1 = Methodref          #4.#20         // java/lang/Object.\"<init>\":()V\n   #2 = String             #21            // dmz\n   #3 = Class              #22            // com/dmz/jvm/Main\n   #4 = Class              #23            // java/lang/Object\n   #5 = Utf8               <init>\n   #6 = Utf8               ()V\n   #7 = Utf8               Code\n   #8 = Utf8               LineNumberTable\n   #9 = Utf8               LocalVariableTable\n  #10 = Utf8               this\n  #11 = Utf8               Lcom/dmz/jvm/Main;\n  #12 = Utf8               main\n  #13 = Utf8               ([Ljava/lang/String;)V\n  #14 = Utf8               args\n  #15 = Utf8               [Ljava/lang/String;\n  #16 = Utf8               name\n  #17 = Utf8               Ljava/lang/String;\n  #18 = Utf8               SourceFile\n  #19 = Utf8               Main.java\n  #20 = NameAndType        #5:#6          // \"<init>\":()V\n  #21 = Utf8               dmz\n  #22 = Utf8               com/dmz/jvm/Main\n  #23 = Utf8               java/lang/Object\n // 下面是方法表                           \n{\n  public com.dmz.jvm.Main();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 7: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/dmz/jvm/Main;\n\n  public static void main(java.lang.String[]);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=1, locals=2, args_size=1\n         // 可以看到方法表中的指令引用了常量池中的常量，这也是为什么说常量池是资源仓库的原因\n         // 因为它会被class文件中的其它结构引用         \n         0: ldc           #2                  // String dmz\n         2: astore_1\n         3: return\n      LineNumberTable:\n        line 9: 0\n        line 10: 3\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       4     0  args   [Ljava/lang/String;\n            3       1     1  name   Ljava/lang/String;\n}\nSourceFile: \"Main.java\"\n"],["body","\n"],["h1","字符串常量池"],["body","\n"],["body","字符串常量池比较特殊，在JDK1.7之前，其存在于永久代中，到JDK1.7及之后，已经中永久代移到了堆中。"],["body","\n"],["headingLink","方法区元空间永久代区别"],["heading","方法区，元空间，永久代区别"],["body","\n\n"],["body","方法区是JVM在内存分配时需要遵守的规范，是一个理论，具体的实现可以因人而异"],["body","\n"],["body","永久代是hotspot的jdk1.8以前对方法区的实现，使用jdk1.7的老司机肯定以前经常遇到过java.lang.OutOfMemoryError: PremGen space异常。这里的PermGen space其实指的就是方法区。"],["body","\n"],["body","元空间是jdk1.8对方法区的实现，jdk1.8彻底移除了永久代，其实，移除永久代的工作从JDK 1.7就开始了。JDK 1.7中，存储在永久代的部分数据就已经转移到Java Heap或者Native Heap。但永久代仍存在于JDK 1.7中，并没有完全移除，譬如符号引用(Symbols)转移到了native heap；字面量(interned strings)转移到了Java heap；类的静态变量(class statics)转移到了Java heap。到jdk1.8彻底移除了永久代，将JDK7中还剩余的永久代信息全部移到元空间，元空间相比对永久代最大的差别是，元空间使用的是本地内存（Native Memory）。"],["body","\n\n"],["headingLink","存储引用"],["heading","存储引用"],["body","\n"],["body","字符串常量池存储的是字符串实例对象的引用！"],["body","\n"],["body","简单来说，HotSpot VM里StringTable是个哈希表，里面存的是主流字符串的引用（而不是驻留字符串实例自身）。也就是说某些普通的字符串实例被这个StringTable引用之后就等同被赋予了“驻留字符串”的身份。这个StringTable在每个HotSpot VM的实例里只有一份，被所有的类共享。类的运行时常量池里的CONSTANT_String类型的常量，经过解析（resolve）之后，同样存的是字符串的引用；解析的过程会去查询StringTable，以保证运行时常量池所引用的字符串与StringTable所引用的是一致的。 \n​ ------R大博客\n"],["body","\n\n"],["body","字符串常量池本质就是一个哈希表"],["body","\n"],["body","字符串常量池中存储的是字符串实例的引用"],["body","\n"],["body","字符串常量池在被整个JVM共享"],["body","\n"],["body","在解析运行时常量池中的符号引用时，会去查询字符串常量池，确保运行时常量池中解析后的直接引用跟字符串常量池中的引用是一致的"],["body","\n\n"],["headingLink","intern方法分析"],["heading","intern方法分析"],["body","\n"],["body","/** \n * Returns a canonical representation for the string object. \n * <p> \n * A pool of strings, initially empty, is maintained privately by the \n * class <code>String</code>. \n * <p> \n * When the intern method is invoked, if the pool already contains a \n * string equal to this <code>String</code> object as determined by \n * the {@link #equals(Object)} method, then the string from the pool is \n * returned. Otherwise, this <code>String</code> object is added to the \n * pool and a reference to this <code>String</code> object is returned. \n * <p> \n * It follows that for any two strings <code>s</code> and <code>t</code>, \n * <code>s.intern() == t.intern()</code> is <code>true</code> \n * if and only if <code>s.equals(t)</code> is <code>true</code>. \n * <p> \n * All literal strings and string-valued constant expressions are \n * interned. String literals are defined in section 3.10.5 of the \n * <cite>The Java™ Language Specification</cite>. \n * \n * @return  a string that has the same contents as this string, but is \n *          guaranteed to be from a pool of unique strings. \n */  \npublic native String intern();  \n"],["body","\n"],["body","这是一个 native 方法，"],["body","\n"],["body","如果常量池中存在当前字符串（使用 hashCode判断）, 就会直接返回当前字符串. 如果常量池中没有此字符串, 会将此字符串放入常量池中后, 再返回”。"],["body","\n"],["body","public static void main(String[] args) {\n    String s = new String(\"1\");\n    s.intern();\n    String s2 = \"1\";\n    System.out.println(s == s2);\n\n    String s3 = new String(\"1\") + new String(\"1\");\n    s3.intern();\n    String s4 = \"11\";\n    System.out.println(s3 == s4);\n}\n"],["body","\n"],["body","打印结果是"],["body","\n\n"],["body","jdk6 下false false"],["body","\n"],["body","jdk7 下false true"],["body","\n\n"],["headingLink","jdk6与jdk7区别"],["heading","jdk6与Jdk7区别"],["body","\n\n"],["body","jdk6 遇到字面量时，会 判断字面量 是否存在常量池中，是的话，就直接返回 常量池引用，否的话 从 方法区也就是永久代中 生成一份 字符串实例，并将引用指向 常量池"],["body","\n"],["body","jdk7 遇到字面量时，会 判断字面量 是否存在常量池中，是的话，就直接返回 常量池引用，否的话 直接再堆中成一份 字符串实例，并将引用指向 常量池"],["body","\n\n"],["body","\n"],["body","\n"],["h1","运行时常量池"],["body","\n"],["headingLink","位置在哪"],["heading","位置在哪？"],["body","\n"],["body","位于方法区中，1.6在永久代，1.7在元空间中，永久代跟元空间都是对方法区的实现"],["body","\n"],["headingLink","用来干什么"],["heading","用来干什么？"],["body","\n"],["body","jvm在执行某个类的时候，必须经过加载、连接、初始化，而连接又包括验证、准备、解析三个阶段。而当类加载到内存中后，jvm就会将class常量池中的内容存放到运行时常量池中，由此可知，运行时常量池也是每个类都有一个。在上面我也说了，class常量池中存的是字面量和符号引用，也就是说他们存的并不是对象的实例，而是对象的符号引用值。而经过解析（resolve）之后，也就是把符号引用替换为直接引用，解析的过程会去查询全局字符串池，也就是我们上面所说的StringTable，以保证运行时常量池所引用的字符串与全局字符串池中所引用的是一致的。"],["body","\n"],["body","所以简单来说，运行时常量池就是用来存放class常量池中的内容的。"],["body","\n"],["body","\n"],["h1","测试"],["body","\n"],["body","// 环境1.7及以上\npublic class Clazz {\n    public static void main(String[] args) {\n        String s1 = new StringBuilder().append(\"ja\").append(\"va1\").toString();\n        String s2 = s1.intern();\n        System.out.println(s1==s2);\n        \n        String s5 = \"dmz\";\n        String s3 = new StringBuilder().append(\"d\").append(\"mz\").toString();\n        String s4 = s3.intern();\n        System.out.println(s3 == s4);\n\n        String s7 = new StringBuilder().append(\"s\").append(\"pring\").toString();\n        String s8 = s7.intern();\n        String s6 = \"spring\";\n        System.out.println(s7 == s8);\n    }\n}\n"],["body","\n"],["body","链接"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/apacheUtils类.html"],["title","apacheUtils类.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","IOUtils"],["body","\n"],["body","org.apache.commons.io.IOUtils"],["body","\n"],["body","closeQuietly：关闭一个IO流、socket、或者selector且不抛出异常，通常放在finally块"],["body","\n"],["body","toString：转换IO流、 Uri、 byte[]为String"],["body","\n"],["body","copy：IO流数据复制，从输入流写到输出流中，最大支持2GB"],["body","\n"],["body","toByteArray：从输入流、URI获取byte[]"],["body","\n"],["body","write：把字节. 字符等写入输出流"],["body","\n"],["body","toInputStream：把字符转换为输入流"],["body","\n"],["body","readLines：从输入流中读取多行数据，返回List"],["body","\n"],["body","copyLarge：同copy，支持2GB以上数据的复制"],["body","\n"],["body","lineIterator：从输入流返回一个迭代器，根据参数要求读取的数据量，全部读取，如果数据不够，则失败"],["body","\n"],["h1","FileUtils"],["body","\n"],["body","org.apache.commons.io.FileUtils"],["body","\n"],["body","deleteDirectory：删除文件夹"],["body","\n"],["body","readFileToString：以字符形式读取文件内容"],["body","\n"],["body","deleteQueitly：删除文件或文件夹且不会抛出异常"],["body","\n"],["body","copyFile：复制文件"],["body","\n"],["body","writeStringToFile：把字符写到目标文件，如果文件不存在，则创建"],["body","\n"],["body","forceMkdir：强制创建文件夹，如果该文件夹父级目录不存在，则创建父级"],["body","\n"],["body","write：把字符写到指定文件中"],["body","\n"],["body","listFiles：列举某个目录下的文件(根据过滤器)"],["body","\n"],["body","copyDirectory：复制文件夹"],["body","\n"],["body","forceDelete：强制删除文件"],["body","\n"],["h1","EntityUtils"],["body","\n"],["body","org.apache.http.util.EntityUtils"],["body","\n"],["body","toString：把Entity转换为字符串"],["body","\n"],["body","consume：确保Entity中的内容全部被消费。可以看到源码里又一次消费了Entity的内容，假如用户没有消费，那调用Entity时候将会把它消费掉"],["body","\n"],["body","toByteArray：把Entity转换为字节流"],["body","\n"],["body","consumeQuietly：和consume一样，但不抛异常"],["body","\n"],["body","getContentCharset：获取内容的编码"],["body","\n"],["h1","StringUtils"],["body","\n"],["body","org.apache.commons.lang3.StringUtils"],["body","\n"],["body","isBlank：字符串是否为空 (trim后判断)"],["body","\n"],["body","isEmpty：字符串是否为空 (不trim并判断)"],["body","\n"],["body","equals：字符串是否相等"],["body","\n"],["body","join：合并数组为单一字符串，可传分隔符"],["body","\n"],["body","split：分割字符串"],["body","\n"],["body","EMPTY：返回空字符串"],["body","\n"],["body","replace：替换字符串"],["body","\n"],["body","capitalize：首字符大写"],["body","\n"],["h1","FilenameUtils"],["body","\n"],["body","org.apache.commons.io.FilenameUtils"],["body","\n"],["body","getExtension：返回文件后缀名"],["body","\n"],["body","getBaseName：返回文件名，不包含后缀名"],["body","\n"],["body","getName：返回文件全名"],["body","\n"],["body","concat：按命令行风格组合文件路径(详见方法注释)"],["body","\n"],["body","removeExtension：删除后缀名"],["body","\n"],["body","normalize：使路径正常化"],["body","\n"],["body","wildcardMatch：匹配通配符"],["body","\n"],["body","seperatorToUnix：路径分隔符改成unix系统格式的，即/"],["body","\n"],["body","getFullPath：获取文件路径，不包括文件名"],["body","\n"],["body","isExtension：检查文件后缀名是不是传入参数(List)中的一个"],["body","\n"],["h1","StringUtils"],["body","\n"],["body","org.springframework.util.StringUtils"],["body","\n"],["body","hasText：检查字符串中是否包含文本"],["body","\n"],["body","hasLength：检测字符串是否长度大于0"],["body","\n"],["body","isEmpty：检测字符串是否为空（若传入为对象，则判断对象是否为null）"],["body","\n"],["body","commaDelimitedStringToArray：逗号分隔的String转换为数组"],["body","\n"],["body","collectionToDelimitedString：把集合转为CSV格式字符串"],["body","\n"],["body","replace 替换字符串"],["body","\n"],["body","delimitedListToStringArray：相当于split"],["body","\n"],["body","uncapitalize：首字母小写"],["body","\n"],["body","collectionToDelimitedCommaString：把集合转为CSV格式字符串"],["body","\n"],["body","tokenizeToStringArray：和split基本一样，但能自动去掉空白的单词"],["body","\n"],["h1","ArrayUtils"],["body","\n"],["body","org.apache.commons.lang.ArrayUtils"],["body","\n"],["body","contains：是否包含某字符串"],["body","\n"],["body","addAll：添加整个数组"],["body","\n"],["body","clone：克隆一个数组"],["body","\n"],["body","isEmpty：是否空数组"],["body","\n"],["body","add：向数组添加元素"],["body","\n"],["body","subarray：截取数组"],["body","\n"],["body","indexOf：查找某个元素的下标"],["body","\n"],["body","isEquals：比较数组是否相等"],["body","\n"],["body","toObject：基础类型数据数组转换为对应的Object数组"],["body","\n"],["h1","StringEscapeUtils"],["body","\n"],["body","org.apache.commons.lang3.StringEscapeUtils"],["body","\n"],["h1","URLEncodedUtils"],["body","\n"],["body","org.apache.http.client.utils.URLEncodedUtils"],["body","\n"],["body","format：格式化参数，返回一个HTTP POST或者HTTP PUT可用\napplication/x-www-form-urlencoded字符串"],["body","\n"],["body","parse：把String或者URI等转换为List"],["body","\n"],["h1","DigestUtils"],["body","\n"],["body","org.apache.commons.codec.digest.DigestUtils"],["body","\n"],["body","md5Hex：MD5加密，返回32位字符串"],["body","\n"],["body","sha1Hex：SHA-1加密"],["body","\n"],["body","sha256Hex：SHA-256加密"],["body","\n"],["body","sha512Hex：SHA-512加密"],["body","\n"],["body","md5：MD5加密，返回16位字符串"],["body","\n"],["h1","CollectionUtils"],["body","\n"],["body","org.apache.commons.collections.CollectionUtils"],["body","\n"],["body","isEmpty：是否为空"],["body","\n"],["body","select：根据条件筛选集合元素"],["body","\n"],["body","transform：根据指定方法处理集合元素，类似List的map()"],["body","\n"],["body","filter：过滤元素，雷瑟List的filter()"],["body","\n"],["body","find：基本和select一样"],["body","\n"],["body","collect：和transform 差不多一样，但是返回新数组"],["body","\n"],["body","forAllDo：调用每个元素的指定方法"],["body","\n"],["body","isEqualCollection：判断两个集合是否一致"],["body","\n"],["h1","ArrayUtils"],["body","\n"],["body","org.apache.commons.lang3.ArrayUtils"],["body","\n"],["body","contains：是否包含某个字符串"],["body","\n"],["body","addAll：添加整个数组"],["body","\n"],["body","clone：克隆一个数组"],["body","\n"],["body","isEmpty：是否空数组"],["body","\n"],["body","add：向数组添加元素"],["body","\n"],["body","subarray：截取数组"],["body","\n"],["body","indexOf：查找某个元素的下标"],["body","\n"],["body","isEquals：比较数组是否相等"],["body","\n"],["body","toObject：基础类型数据数组转换为对应的Object数组"],["body","\n"],["h1","PropertyUtils"],["body","\n"],["body","org.apache.commons.beanutils.PropertyUtils"],["body","\n"],["body","getProperty：获取对象属性值"],["body","\n"],["body","setProperty：设置对象属性值"],["body","\n"],["body","getPropertyDiscriptor：获取属性描述器"],["body","\n"],["body","isReadable：检查属性是否可访问"],["body","\n"],["body","copyProperties：复制属性值，从一个对象到另一个对象"],["body","\n"],["body","getPropertyDiscriptors：获取所有属性描述器"],["body","\n"],["body","isWriteable：检查属性是否可写"],["body","\n"],["body","getPropertyType：获取对象属性类型"],["body","\n"],["h1","StringEscapeUtils"],["body","\n"],["body","org.apache.commons.lang3.StringEscapeUtils"],["body","\n"],["body","unescapeHtml4：转义html"],["body","\n"],["body","escapeHtml4：反转义html"],["body","\n"],["body","escapeXml：转义xml"],["body","\n"],["body","unescapeXml：反转义xml"],["body","\n"],["body","escapeJava：转义unicode编码"],["body","\n"],["body","escapeEcmaScript：转义EcmaScript字符"],["body","\n"],["body","unescapeJava：反转义unicode编码"],["body","\n"],["body","escapeJson：转义json字符"],["body","\n"],["body","escapeXml10：转义Xml10"],["body","\n"],["body","这个现在已经废弃了，建议使用commons-text包里面的方法。"],["body","\n"],["h1","BeanUtils"],["body","\n"],["body","org.apache.commons.beanutils.BeanUtils"],["body","\n"],["body","copyPeoperties：复制属性值，从一个对象到另一个对象"],["body","\n"],["body","getProperty：获取对象属性值"],["body","\n"],["body","setProperty：设置对象属性值"],["body","\n"],["body","populate：根据Map给属性复制"],["body","\n"],["body","copyPeoperty：复制单个值，从一个对象到另一个对象"],["body","\n"],["body","cloneBean：克隆bean实例"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/Duration-Parse.html"],["title","Duration-Parse.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","durationparse"],["heading","Duration#Parse"],["body","\n\n"],["body","从文本中 转换 时间段例如：PnDTnHnMn.nS"],["body","\n"],["body","这将解析时间段的文本表示形式，包括由toString() 产生的字符串"],["body","\n"],["body","接受的格式基于ISO-8601时间段格式 pndnhnmn.nS，被认为是24小时的天数"],["body","\n"],["body","字符串以可选符号开头，由ASCII负或正符号表示\n\n"],["body","如果是负数，,整个周期都是负数"],["body","\n\n"],["body","\n"],["body","ASCII字母 “P” 是大写或小写的下一个"],["body","\n"],["body","然后有四个部分, 每个由一个数字和一个后缀组成\n\n"],["body","这些部分 ASCII字母是 \"D\", \"H\", \"M\" and \"S\" for days, hours, minutes and seconds, 接受大写或小写字母. "],["body","\n"],["body","后缀必须按顺序出现. ASCII字母 “T” 必须在小时、分钟或秒的第一次出现之前出现，如果有的话。"],["body","\n"],["body","必须在四个部分中至少有一个存在"],["body","\n"],["body","如果存在 “T”，则 “T” 之后必须至少有一个部分：标识时间部分"],["body","\n"],["body","每个部分的数字部分必须由一个或多个ASCII数字组成. "],["body","\n"],["body","该数字可能以ASCII负或正符号为前缀. 天数、小时和分钟数必须解析为long类型"],["body","\n"],["body","秒数必须解析为具有可选分数的long类型"],["body","\n"],["body","小数点可以是点，也可以是逗号 小数部分可能有从零到9位数.\nThe leading plus/minus sign, and negative values for other units are not part of the ISO-8601 standard.\nExamples:\n\"PT20.345S\" -- parses as \"20.345 seconds\"\n\"PT15M\"     -- parses as \"15 minutes\" (where a minute is 60 seconds)\n\"PT10H\"     -- parses as \"10 hours\" (where an hour is 3600 seconds)\n\"P2D\"       -- parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n\"P2DT3H4M\"  -- parses as \"2 days, 3 hours and 4 minutes\"\n\"P-6H3M\"    -- parses as \"-6 hours and +3 minutes\"\n\"-P6H3M\"    -- parses as \"-6 hours and -3 minutes\"\n\"-P-6H+3M\"  -- parses as \"+6 hours and -3 minutes\""],["body","\n\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","50.其他_未分类/integer的比较问题.html"],["title","integer的比较问题.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","测试题"],["body","\n"],["body","@Test\npublic void test2() {\n\tInteger i1 = 64;\n\tint i2 = 64;\n\n\tInteger i3 = Integer.valueOf(64);\n\tInteger i4 = new Integer(64);\n\n\tInteger i5 = 256;\n\tInteger i6 = Integer.valueOf(256);\n\n\tSystem.out.println(\"A：\" + (i1 == i2));\n\tSystem.out.println(\"B：\" + (i1 == i3));\n\tSystem.out.println(\"C：\" + (i3 == i4));\n\tSystem.out.println(\"D：\" + (i2 == i4));\n\tSystem.out.println(\"E：\" + (i3.equals(i4)));\n\tSystem.out.println(\"F：\" + (i5 == i6));\n}\n"],["body","\n"],["h1","答案"],["body","\n"],["body","A：true\nB：true\nC：false\nD：true\nE：true\nF：false\n"],["body","\n"],["h1","现象"],["body","\n\n"],["body","如果==两端有一个是基础类型(int)，则会发生自动拆箱操作，这时比较的是值。"],["body","\n"],["body","如果==两端都是包装类型(Integer)，则不会自动拆箱，首先会面临缓存问题\n\n"],["body","自动装箱与 Integer.valueOf(64) 会面临缓存问题, 缓存范围 在 -128~127"],["body","\n"],["body","new Integer 会生成一个新对象"],["body","\n\n"],["body","\n\n"],["h1","总结"],["body","\n"],["body","引用数据类型 使用 equals 比较"],["body","\n"],["h1","扩展"],["body","\n"],["body","不同数值类型比较"],["body","\n"],["body","public class MainTesat {\n    public static void main(String[] args) {\n       Long a = 2L;\n       Integer b = 2;\n\n       System.out.println(b.equals(a));\n    }\n}\n\n//false\n"],["body","\n"],["body","总结"],["body","\n"],["body","不同 数值类型 的equals 比较 会返回false"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","32.其他_分布式与微服务/分布式事务.html"],["title","分布式事务.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","分布式事务"],["body","\n"],["headingLink","分布式事务产生原因"],["heading","分布式事务产生原因"],["body","\n\n"],["body","数据库分库分表"],["body","\n"],["body","SOA 架构"],["body","\n\n"],["headingLink","应用场景与解决方案"],["heading","应用场景与解决方案"],["body","\n"],["body","银行开户场景:手动实现的二阶段提交的协议，统计权值"],["body","\n"],["body","消息中间件："],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","32.其他_分布式与微服务/接口幂等性.html"],["title","接口幂等性.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","设计方案"],["body","\n"],["headingLink","通用存储"],["heading","通用存储"],["body","\n"],["body","锁资源存放 可以是 本地内存，可以是 redis，可以是数据库，可以是 zookeeper"],["body","\n"],["headingLink","使用简单"],["heading","使用简单"],["body","\n"],["body","用户只应关注 key的生成策略，屏蔽加锁，记录判断等逻辑由 框架实现"],["body","\n"],["headingLink","支持注解"],["heading","支持注解"],["body","\n"],["body","注解，能够做到对代码 少侵入"],["body","\n"],["headingLink","多级存储"],["heading","多级存储"],["body","\n"],["body","比如一级存储可以用内存来实现 例如，本地内存或者 Redis 来实现，优点是性能高，适用于 90%的场景。"],["body","\n"],["body","二级存储可以支持 Mysql, Mongo 等数据库，适用于时间长或者永久存储的场景。"],["body","\n"],["body","二级存储可以做持久化"],["body","\n"],["h1","概述"],["body","\n"],["body","对同一个系统，使用同样的条件，一次请求和重复的多次请求对系统资源的影响是一致的"],["body","\n"],["body","幂等有两个维度：一是空间维度上的幂等，即幂等对象的范围，是个人还是机构，是某一次交易还是某种类型的交易..."],["body","\n"],["h1","幂等性适用领域"],["body","\n"],["body","电商支付，银行金融"],["body","\n"],["h1","解决办法"],["body","\n"],["headingLink","mvcc"],["heading","MVCC"],["body","\n"],["headingLink","多版本并发控制"],["heading","多版本并发控制"],["body","\n"],["body","multiversion  concurent control"],["body","\n"],["body","启用版本号"],["body","\n"],["headingLink","去重表"],["heading","去重表"],["body","\n"],["body","建立唯一性索引"],["body","\n"],["headingLink","token机制"],["heading","TOKEN机制"],["body","\n"],["body","为每一次操作生成一个唯一性凭证，"],["body","\n"],["body","一个token在操作的每一个阶段只有一次执行权，一旦执行成功则保存执行结果。对重复的请求，返回同一个结果"],["body","\n"],["body","服务端提供了发送token的接口。我们在分析业务的时候，哪些业务是存在幂等问题的"],["body","\n\n"],["body","\n"],["body","就必须在执行业务前，先去获取token，服务器会把token保存到redis中。"],["body","\n"],["body","\n"],["body","\n"],["body","然后调用业务接口请求时，把token携带过去，一般放在请求头部。"],["body","\n"],["body","\n"],["body","\n"],["body","服务器判断token是否存在redis中，存在表示第一次请求，可以继续执行业务，执行业务完成后，最后需要把redis中的token删除。"],["body","\n"],["body","\n"],["body","\n"],["body","如果判断token不存在redis中，就表示是重复操作，直接返回重复标记给client，这样就保证了业务代码，不被重复执行。"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","32.其他_分布式与微服务/分布式锁.html"],["title","分布式锁.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","分布式锁"],["body","\n"],["body","Java 提供了两种内置的锁的实现，一种是由 JVM 实现的 synchronized 和 JDK 提供的 Lock"],["body","\n"],["body","当你的应用是单机或者说单进程应用时，可以使用 synchronized 或 Lock 来实现锁"],["body","\n"],["headingLink","使用场景"],["heading","使用场景"],["body","\n"],["body","应用端 、web端同时进行操作"],["body","\n"],["headingLink","数据库分布式锁"],["heading","数据库分布式锁"],["body","\n\n"],["body","\n"],["body","基于mysql锁表"],["body","\n\n"],["body","依靠数据库唯一索引来实现"],["body","\n"],["body","没有失效时间，会导致死锁"],["body","\n"],["body","只能是非阻塞"],["body","\n"],["body","不可重入"],["body","\n\n"],["body","\n"],["body","\n"],["body","乐观锁增加版本号"],["body","\n"],["body","根据版本号来判断更新之前有没有其他线程更新过，如果被更新过，则获取锁失败。"],["body","\n"],["body","\n\n"],["headingLink","redis-分布式锁"],["heading","Redis 分布式锁"],["body","\n\n"],["body","\n"],["body","基于 SETNX、EXPIRE"],["body","\n\n"],["body","使用 SETNX（set if not exist）命令插入一个键值对时，如果 Key 已经存在，那么会返回 False，否则插入成功并返回 True"],["body","\n"],["body","EXPIRE 可以为一个键值对设置一个过期时间，从而避免了死锁的发生。"],["body","\n\n"],["body","\n"],["body","\n"],["body","RedLock 算法"],["body","\n\n"],["body","ReadLock 算法使用了多个 Redis 实例来实现分布式锁，这是为了保证在发生单点故障时还可用。"],["body","\n"],["body","尝试从 N 个相互独立 Redis 实例获取锁，如果一个实例不可用，应该尽快尝试下一个。"],["body","\n"],["body","计算获取锁消耗的时间，只有当这个时间小于锁的过期时间，并且从大多数（N/2+1）实例上获取了锁，那么就认为锁获取成功了。"],["body","\n"],["body","如果锁获取失败，会到每个实例上释放锁。"],["body","\n\n"],["body","\n"],["body","\n"],["body","Zookeeper 分布式锁"],["body","\n\n"],["body","\n"],["body","Zookeeper 提供了一种树形结构级的命名空间"],["body","\n"],["body","\n"],["body","\n"],["body","节点类型"],["body","\n\n"],["body","永久节点：不会因为会话结束或者超时而消失；"],["body","\n"],["body","临时节点：如果会话结束或者超时就会消失；"],["body","\n"],["body","有序节点：会在节点名的后面加一个数字后缀，并且是有序的，例如生成的有序节点为 /lock/node-0000000000，它的下一个有序节点则为 /lock/node-0000000001，依次类推。"],["body","\n\n"],["body","\n"],["body","\n"],["body","监听器"],["body","\n"],["body","为一个节点注册监听器，在节点状态发生改变时，会给客户端发送消息。"],["body","\n"],["body","\n"],["body","\n"],["body","分布式锁实现"],["body","\n\n"],["body","创建一个锁目录 /lock。"],["body","\n"],["body","在 /lock 下创建临时的且有序的子节点，第一个客户端对应的子节点为 /lock/lock-0000000000，第二个为 /lock/lock-0000000001，以此类推。"],["body","\n"],["body","客户端获取 /lock 下的子节点列表，判断自己创建的子节点是否为当前子节点列表中序号最小的子节点，如果是则认为获得锁，否则监听自己的前一个子节点，获得子节点的变更通知后重复此步骤直至获得锁；"],["body","\n"],["body","执行业务代码，完成后，删除对应的子节点。"],["body","\n\n"],["body","\n"],["body","\n"],["body","会话超时"],["body","\n\n"],["body","如果一个已经获得锁的会话超时了，因为创建的是临时节点，因此该会话对应的临时节点会被删除，其它会话就可以获得锁了"],["body","\n\n"],["body","\n"],["body","\n"],["body","羊群效应"],["body","\n\n"],["body","只需要监听前一个子节点"],["body","\n\n"],["body","\n\n"],["body","\n\n"],["h1","分布式锁应该具备哪些条件"],["body","\n\n"],["body","在分布式系统环境下，一个方法在同一时间只能被一个机器的一个线程执行； "],["body","\n"],["body","高可用的获取锁与释放锁； "],["body","\n"],["body","高性能的获取锁与释放锁； "],["body","\n"],["body","具备可重入特性； "],["body","\n"],["body","具备锁失效机制，防止死锁； "],["body","\n"],["body","具备非阻塞锁特性，即没有获取到锁将直接返回获取锁失败。"],["body","\n\n"],["h1","常见分布式锁方案对比"],["body","\n"],["headingLink","常见分布式锁方案对比-1"],["heading","常见分布式锁方案对比"],["body","\n"],["body","分类"],["body","方案"],["body","实现原理"],["body","优点"],["body","缺点"],["body","\n"],["body","基于数据库"],["body","基于mysql 表唯一索引"],["body","1.表增加唯一索引 2.加锁：执行insert语句，若报错，则表明加锁失败 3.解锁：执行delete语句"],["body","完全利用DB现有能力，实现简单"],["body","1.锁无超时自动失效机制，有死锁风险 2.不支持锁重入，不支持阻塞等待 3.操作数据库开销大，性能不高"],["body","\n"],["body","基于MongoDB findAndModify原子操作"],["body","1.加锁：执行findAndModify原子命令查找document，若不存在则新增 2.解锁：删除document"],["body","实现也很容易，较基于MySQL唯一索引的方案，性能要好很多"],["body","1.大部分公司数据库用MySQL，可能缺乏相应的MongoDB运维、开发人员 2.锁无超时自动失效机制"],["body","\n"],["body","基于分布式协调系统"],["body","基于ZooKeeper"],["body","1.加锁：在/lock目录下创建临时有序节点，判断创建的节点序号是否最小。若是，则表示获取到锁；否，则则watch /lock目录下序号比自身小的前一个节点 2.解锁：删除节点"],["body","1.由zk保障系统高可用 2.Curator框架已原生支持系列分布式锁命令，使用简单"],["body","需单独维护一套zk集群，维保成本高"],["body","\n"],["body","基于缓存"],["body","基于redis命令"],["body","1. 加锁：执行setnx，若成功再执行expire添加过期时间 2. 解锁：执行delete命令"],["body","实现简单，相比数据库和分布式系统的实现，该方案最轻，性能最好"],["body","1.setnx和expire分2步执行，非原子操作；若setnx执行成功，但expire执行失败，就可能出现死锁 2.delete命令存在误删除非当前线程持有的锁的可能 3.不支持阻塞等待、不可重入"],["body","\n"],["body","基于redis Lua脚本能力"],["body","1. 加锁：执行SET lock_name random_value EX seconds NX 命令  2. 解锁：执行Lua脚本，释放锁时验证random_value  -- ARGV[1]为random_value, KEYS[1]为lock_nameif redis.call(\"get\", KEYS[1]) == ARGV[1] then  return redis.call(\"del\",KEYS[1])else  return 0end"],["body","同上；实现逻辑上也更严谨，除了单点问题，生产环境采用用这种方案，问题也不大。"],["body","不支持锁重入，不支持阻塞等待"],["body","\n\n\n"],["h1","Redisson分布式锁的实现"],["body","\n"],["headingLink","example"],["heading","Example"],["body","\n"],["body","// 1.构造redisson实现分布式锁必要的Config\nConfig config = new Config();\nconfig.useSingleServer().setAddress(\"redis://127.0.0.1:5379\").setPassword(\"123456\").setDatabase(0);\n// 2.构造RedissonClient\nRedissonClient redissonClient = Redisson.create(config);\n// 3.获取锁对象实例（无法保证是按线程的顺序获取到）\nRLock rLock = redissonClient.getLock(lockKey);\ntry {\n    /**\n     * 4.尝试获取锁\n     * waitTimeout 尝试获取锁的最大等待时间，超过这个值，则认为获取锁失败\n     * leaseTime   锁的持有时间,超过这个时间锁会自动失效（值应设置为大于业务处理的时间，确保在锁有效期内业务能处理完）\n     */\n    boolean res = rLock.tryLock((long)waitTimeout, (long)leaseTime, TimeUnit.SECONDS);\n    if (res) {\n        //成功获得锁，在这里处理业务\n    }\n} catch (Exception e) {\n    throw new RuntimeException(\"aquire lock fail\");\n}finally{\n    //无论如何, 最后都要解锁\n    rLock.unlock();\n}\n"],["body","\n"],["headingLink","基于lua脚本的加锁解锁"],["heading","基于LUA脚本的加锁解锁"],["body","\n"],["body","介绍"],["body","\n"],["body","如果要手写一个分布式锁组件，肯定要定义2个接口：加锁、解锁；redisson 的作者就是在加锁和解锁的执行层面采用Lua脚本，有原子性保证。"],["body","\n\n"],["body","加锁和解锁过程中还巧妙地利用了redis的发布订阅功能"],["body","\n\n"],["headingLink","加锁lua脚本"],["heading","加锁Lua脚本"],["body","\n"],["body","脚本入参"],["body","\n"],["body","参数"],["body","示例值"],["body","含义"],["body","\n"],["body","KEY个数"],["body","1"],["body","KEY个数"],["body","\n"],["body","KEYS[1]"],["body","my_first_lock_name"],["body","锁名"],["body","\n"],["body","ARGV[1]"],["body","60000"],["body","持有锁的有效时间：毫秒"],["body","\n"],["body","ARGV[2]"],["body","58c62432-bb74-4d14-8a00-9908cc8b828f:1"],["body","唯一标识：获取锁时set的唯一值，实现上为redisson客户端ID(UUID)+线程ID"],["body","\n\n\n"],["body","-- 若锁不存在：则新增锁，并设置锁重入计数为1、设置锁过期时间\nif (redis.call('exists', KEYS[1]) == 0) then\n    redis.call('hset', KEYS[1], ARGV[2], 1);\n    redis.call('pexpire', KEYS[1], ARGV[1]);\n    return nil;\nend;\n \n-- 若锁存在，且唯一标识也匹配：则表明当前加锁请求为锁重入请求，故锁重入计数+1，并再次设置锁过期时间\nif (redis.call('hexists', KEYS[1], ARGV[2]) == 1) then\n    redis.call('hincrby', KEYS[1], ARGV[2], 1);\n    redis.call('pexpire', KEYS[1], ARGV[1]);\n    return nil;\nend;\n \n-- 若锁存在，但唯一标识不匹配：表明锁是被其他线程占用，当前线程无权解他人的锁，直接返回锁剩余过期时间\nreturn redis.call('pttl', KEYS[1]);\n"],["body","\n"],["body","当且仅当返回nil，才表示加锁成功，否则返回锁的超时时间"],["body","\n"],["body","流程图"],["body","\n"],["body","\n"],["headingLink","解锁lua脚本"],["heading","解锁Lua脚本"],["body","\n"],["body","脚本入参"],["body","\n"],["body","参数"],["body","示例值"],["body","含义"],["body","\n"],["body","KEY个数"],["body","2"],["body","KEY个数"],["body","\n"],["body","KEYS[1]"],["body","my_first_lock_name"],["body","锁名"],["body","\n"],["body","KEYS[2]"],["body","redisson_lock__channel:{my_first_lock_name}"],["body","解锁消息PubSub频道"],["body","\n"],["body","ARGV[1]"],["body","0"],["body","redisson定义0表示解锁消息"],["body","\n"],["body","ARGV[2]"],["body","30000"],["body","设置锁的过期时间；默认值30秒"],["body","\n"],["body","ARGV[3]"],["body","58c62432-bb74-4d14-8a00-9908cc8b828f:1"],["body","唯一标识；同加锁流程"],["body","\n\n\n"],["body","脚本内容"],["body","\n"],["body","-- 若锁不存在：则直接广播解锁消息，并返回1\nif (redis.call('exists', KEYS[1]) == 0) then\n    redis.call('publish', KEYS[2], ARGV[1]);\n    return 1; \nend;\n \n-- 若锁存在，但唯一标识不匹配：则表明锁被其他线程占用，当前线程不允许解锁其他线程持有的锁\nif (redis.call('hexists', KEYS[1], ARGV[3]) == 0) then\n    return nil;\nend; \n \n-- 若锁存在，且唯一标识匹配：则先将锁重入计数减1\nlocal counter = redis.call('hincrby', KEYS[1], ARGV[3], -1); \nif (counter > 0) then \n    -- 锁重入计数减1后还大于0：表明当前线程持有的锁还有重入，不能进行锁删除操作，但可以友好地帮忙设置下过期时期\n    redis.call('pexpire', KEYS[1], ARGV[2]); \n    return 0; \nelse \n    -- 锁重入计数已为0：间接表明锁已释放了。直接删除掉锁，并广播解锁消息，去唤醒那些争抢过锁但还处于阻塞中的线程\n    redis.call('del', KEYS[1]); \n    redis.call('publish', KEYS[2], ARGV[1]); \n    return 1;\nend;\n \nreturn nil;\n"],["body","\n"],["body","流程"],["body","\n"],["body","\n"],["body","广播解锁消息有什么用？ "],["body","\n\n"],["body","是为了通知其他争抢锁阻塞住的线程，从阻塞中解除，并再次去争抢锁。"],["body","\n\n"],["body","返回值0、1、nil有什么不一样？ "],["body","\n\n"],["body","当且仅当返回1，才表示当前请求真正触发了解锁Lua脚本；但客户端又并不关心解锁请求的返回值，好像没什么用"],["body","\n\n"],["headingLink","流程"],["heading","流程"],["body","\n"],["headingLink","用户操作时序图"],["heading","用户操作时序图"],["body","\n"],["body","sequenceDiagram\n\tparticipant a as 客户端\n    participant c as 服务端\n\tparticipant b as 分布式锁中心\n\ta->> c:带着资源id尝试操作资源\n\tc->> b:判断资源是否被锁定\nalt 未锁定，则锁定\n\tb->>c:获取锁成功\n\tc->>c:操作资源\n\tc->>a:返回操作结果\nelse 已被其他占用\n\tb->>c:获取锁失败\n\tc->>a:返回其他人已经在操作，请稍后重试\nend\n"],["body","\n"],["h1","代码实现"],["body","\n\n"],["body","\n"],["body","实现 JDK 锁接口"],["body","\n"],["body","\n"],["body","lock锁接口详见 Lock"],["body","\n"],["body","\n\n"],["body","\n无阻塞方式"],["body","\n"],["body","\n阻塞方式"],["body","\n"],["body","\n超时方式"],["body","\n"],["body","\n支持可配置锁定时长，超时自动续期"],["body","\n"],["body","\n锁资源管理界面 手动释放锁"],["body","\n"],["body","\n支持多底层切换\n\n"],["body","\n单机环境，支持使用 JDK各个锁实现"],["body","\n"],["body","\n集群环境，支持 redis，zookeeper"],["body","\n\n"],["body","\n\n"],["body","\n"],["body","\n"],["body","设计 JMH 基准比对测试"],["body","\n"],["body","\n"],["body","\n"],["body","设计Jmeter 测试场景"],["body","\n"],["body","\n"],["body","\n"],["body","基于注解的分布式锁支持"],["body","\n"],["body","\n"],["body","\n"],["body","支持基于Spring注解的动态代理支持"],["body","\n"],["body","\n"],["body","\n"],["body","支持 SpringEL 表达式"],["body","\n"],["body","\n"],["body","\n"],["body","SpringBootStarter 支持"],["body","\n"],["body","\n\n"],["h1","类设计"],["body","\n"],["headingLink","锁信息"],["heading","锁信息"],["body","\n\n"],["body","锁定 唯一资源 ID"],["body","\n"],["body","锁定人"],["body","\n"],["body","锁定过期时间"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","32.其他_分布式与微服务/分布式Session案.html"],["title","分布式Session案.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","分布式 Session"],["body","\n"],["headingLink","粘性-session"],["heading","粘性 Session"],["body","\n\n"],["body","\n"],["body","场景"],["body","\n"],["body","将用户锁定到某一个服务器上，用户第一次请求时，负载均衡器将用户的请求转发到了 A 服务器上，如果负载均衡器设置了粘性 Session 的话，那么用户以后的每次请求都会转发到 A 服务器上，相当于把用户和 A 服务器粘到了一块，这就是粘性 Session 机制。"],["body","\n"],["body","\n"],["body","\n"],["body","优点"],["body","\n"],["body","简单，不需要对 Session 做任何处理。"],["body","\n"],["body","\n"],["body","\n"],["body","缺点"],["body","\n"],["body","缺乏容错性，如果当前访问的服务器发生故障，用户被转移到第二个服务器上时，他的 Session 信息都将失效。"],["body","\n"],["body","\n"],["body","\n"],["body","适用场景"],["body","\n\n"],["body","发生故障对客户产生的影响较小；"],["body","\n"],["body","服务器发生故障是低概率事件。"],["body","\n\n"],["body","\n\n"],["headingLink","服务器-session-复制"],["heading","服务器 Session 复制"],["body","\n\n"],["body","\n"],["body","任何一个服务器上的 Session 发生改变，该节点会把这个 Session 的所有内容序列化，然后广播给所有其它节点，不管其他服务器需不需要 Session，以此来保证 Session 同步"],["body","\n"],["body","\n"],["body","\n"],["body","优点"],["body","\n\n"],["body","可容错，各个服务器间 Session 能够实时响应。"],["body","\n\n"],["body","\n"],["body","\n"],["body","缺点"],["body","\n"],["body","会对网络负荷造成一定压力，如果 Session 量大的话可能会造成网络堵塞，拖慢服务器性能"],["body","\n"],["body","\n"],["body","\n"],["body","实现方式"],["body","\n"],["body","\n\n\n"],["body","设置 Tomcat 的 server.xml 开启 tomcat 集群功能。"],["body","\n"],["body","在应用里增加信息：通知应用当前处于集群环境中，支持分布式，即在 web.xml 中添加<distributable/> 选项。"],["body","\n\n"],["headingLink","session-共享机制"],["heading","Session 共享机制"],["body","\n"],["body","使用分布式缓存方案比如 Memcached、Redis，但是要求 Memcached 或 Redis 必须是集群。"],["body","\n\n"],["body","\n"],["body","粘性 Session 共享机制"],["body","\n"],["body","一个用户的 Session 会绑定到一个 Tomcat 上。Memcached 只是起到备份作用。"],["body","\n"],["body","\n"],["body","\n"],["body","非粘性 Session 共享机制"],["body","\n"],["body","Tomcat 本身不存储 Session，而是存入 Memcached 中。Memcached 集群构建主从复制架构。"],["body","\n"],["body","\n"],["body","\n"],["body","实现方式"],["body","\n"],["body","用开源的 msm 插件解决 Tomcat 之间的 Session 共享：Memcached_Session_Manager（MSM）"],["body","\n"],["body","\n\n"],["headingLink","session-持久化到数据库"],["heading","Session 持久化到数据库"],["body","\n"],["body","拿出一个数据库，专门用来存储 Session 信息。保证 Session 的持久化。"],["body","\n\n"],["body","\n"],["body","优点"],["body","\n"],["body","服务器出现问题，Session 不会丢失"],["body","\n"],["body","\n"],["body","\n"],["body","缺点"],["body","\n"],["body","如果网站的访问量很大，把 Session 存储到数据库中，会对数据库造成很大压力，还需要增加额外的开销维护数据库。"],["body","\n"],["body","\n\n"],["headingLink","terracotta-实现-session-复制"],["heading","Terracotta 实现 Session 复制"],["body","\n"],["body","Terracotta 的基本原理是对于集群间共享的数据，当在一个节点发生变化的时候，Terracotta 只把变化的部分发送给 Terracotta 服务器，然后由服务器把它转发给真正需要这个数据的节点。它是服务器 Session 复制的优化。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","32.其他_分布式与微服务/分布式协调器-Zookeeper.html"],["title","分布式协调器-Zookeeper.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","描述"],["body","\n\n"],["body","\n"],["body","是一个开源的分布式的,为分布式应用提供协调服务的Apache项目"],["body","\n"],["body","\n"],["body","\n"],["body","基于观察者模式设计的分布式服务管理框架"],["body","\n"],["body","\n"],["body","\n"],["body","储存和管理大家关心的数据"],["body","\n"],["body","\n"],["body","\n"],["body","一个领导者,多个跟随者组成的集群"],["body","\n"],["body","\n\n"],["h1","特性"],["body","\n\n"],["body","集群中只要有半数以上节点存活,zookeeper 集群就能正常服务"],["body","\n"],["body","全局数据一致,每个节点 数据相同"],["body","\n"],["body","原子更新"],["body","\n"],["body","实时性"],["body","\n\n"],["h1","数据模型结构"],["body","\n\n"],["body","与文件系统类似,整体上可以看作是一颗树"],["body","\n"],["body","每个节点称作 znode,每个znode能存储1MB的数据"],["body","\n"],["body","每个znode可以通过路径唯一标识"],["body","\n\n"],["h1","应用场景"],["body","\n\n"],["body","统一命名服务"],["body","\n"],["body","统一配置管理"],["body","\n"],["body","统一集群管理"],["body","\n"],["body","服务节点动态上下线"],["body","\n"],["body","负载均衡"],["body","\n\n"],["h1","基本操作"],["body","\n"],["body","./zkServer.sh start|status|stop"],["body","\n"],["body","./zkCli.sh"],["body","\n"],["h1","配置解读"],["body","\n"],["body","配置名"],["body","解释"],["body","\n"],["body","tickTime"],["body","心跳帧发送的时长"],["body","\n"],["body","initLimit"],["body","启动时,最大延迟的 心跳帧的 个数"],["body","\n"],["body","syncLimit"],["body","启动后,最大延迟的心跳帧的个数"],["body","\n"],["body","dataDir"],["body","数据保存目录"],["body","\n"],["body","clientPort"],["body","监听客户端连接的  端口"],["body","\n\n\n"],["h1","内部原理"],["body","\n"],["body","选举机制"],["body","\n\n"],["body","\n"],["body","半数机制"],["body","\n"],["body","集群中半数以上机器存活,集群可用,所以zookeeper适合安装奇数台服务器"],["body","\n"],["body","\n"],["body","\n"],["body","选举机制"],["body","\n\n"],["body","zookeeper的master 和 slave 是通过选举产生的"],["body","\n"],["body","根据启动顺序 投最大的id的 服务,达到半数以上则选举成功"],["body","\n\n"],["body","\n\n"],["body","节点类型"],["body","\n\n"],["body","\n"],["body","持久 "],["body","\n"],["body","客户端和服务器断开的连接后,节点不删除"],["body","\n"],["body","分两类持久化节点"],["body","\n\n"],["body","持久化目录节点"],["body","\n"],["body","持久化顺序编号目录节点\n\n"],["body","按顺序编号"],["body","\n"],["body","可以用于所有事件进行全局排序"],["body","\n\n"],["body","\n\n"],["body","\n"],["body","\n"],["body","短暂 "],["body","\n"],["body","客户端和服务器断开的连接后,节点自己删除"],["body","\n"],["body","\n\n"],["h1","Zookeeper集群搭建"],["body","\n\n"],["body","\n"],["body","同步文件"],["body","\n"],["body","\n"],["body","\n"],["body","在zkData 创建 myid文件"],["body","\n"],["body","\n"],["body","\n"],["body","增加 服务器配置"],["body","\n"],["body","server.2=hadoop1:2888:3888\nserver.3=hadoop2:2888:3888\nserver.4=hadoop3:2888:3888\n2888:leader与follower 的交换信息的端口\n3888:选举端口\n"],["body","\n"],["body","\n"],["body","\n"],["body","systemctl stop firewalld && ./zookeeper/bin/zkServer.sh start && ./zookeeper/bin/zkServer.sh status\n"],["body","\n"],["body","\n\n"],["h1","客户端命令行操作"],["body","\n"],["body","操作"],["body","解析"],["body","\n"],["body","ziCli.sh"],["body","启动客户端"],["body","\n"],["body","help"],["body","帮助"],["body","\n"],["body","ls /"],["body","查看当前节点"],["body","\n"],["body","create /path  data_string"],["body","创建普通节点"],["body","\n"],["body","get /path"],["body","获取节点的值"],["body","\n"],["body","create -e /path data_string"],["body","短暂结点"],["body","\n"],["body","create -s /path data_string"],["body","序号节点"],["body","\n"],["body","set /path data_value"],["body","修改节点的值"],["body","\n"],["body","get /path watch"],["body","监听节点的值变化"],["body","\n"],["body","ls /path watch"],["body","监听目录节点"],["body","\n"],["body","delete /path"],["body","删除空节点或者非目录节点"],["body","\n"],["body","rmr"],["body","递归删除节点"],["body","\n"],["body","stat"],["body","查看节点状态"],["body","\n\n\n"],["h1","stat结构体解析"],["body","\n"],["body","名称"],["body","解析"],["body","\n"],["body","czxid"],["body","事务id,每次修改zookeeper都会收到zxid的时间戳"],["body","\n"],["body","ctime"],["body","znode被创建的毫秒数"],["body","\n"],["body","mzxid"],["body","最后更新的事务zxid"],["body","\n"],["body","mtime"],["body","最后被修改的毫秒数"],["body","\n"],["body","pzxid"],["body","最后更新的子节点的zxid"],["body","\n"],["body","cversion"],["body","子节点变化号,znode子节点修改次数"],["body","\n"],["body","dataversion"],["body","数据变化号"],["body","\n"],["body","aclVersion"],["body","访问控制列表变化号"],["body","\n"],["body","ephemeralOwner"],["body","临时节点的拥有者的 sessionID,不是临时节点为0"],["body","\n"],["body","dataLength"],["body","数据长度"],["body","\n"],["body","numChildren"],["body","子节点数量"],["body","\n\n\n"],["h1","C/S跨进程间监听器原理"],["body","\n\n"],["body","客户端在main线程中创建两个线程,一个connect负责 与zookeeper服务器网络通信,另一个listener负责监听"],["body","\n"],["body","通过connect将被监听的对象 发送到 服务器"],["body","\n"],["body","服务器检测到 监听事件发生,将消息发送给 listener线程"],["body","\n"],["body","listener线程调用 process方法"],["body","\n\n"],["h1","写数据流程"],["body","\n\n"],["body","如果server1不是leader ,将请求转发给leader"],["body","\n"],["body","leader会将写的数据广播给follower"],["body","\n"],["body","follower数据写成功了之后会通知leader"],["body","\n"],["body","当大多数写成功了,leader即可认为写成功,然后通知客户端"],["body","\n\n"],["h1","ACL访问权限与节点模式"],["body","\n"],["h1","服务器动态上下线功能"],["body","\n\n"],["body","往服务器注册监听,临时节点"],["body","\n"],["body","客户端监听getChildren,一旦有服务器下线,就会自动重新注册"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","32.其他_分布式与微服务/JWT无状态Session.html"],["title","JWT无状态Session.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","传统的session认证"],["body","\n"],["body","​\tHttp协议本身是一种无状态的协议,这就意味者,如果用户向我们的应用提供了用户和密码进行认证,那么下一次请求,用户还要再进行一次认证才行"],["body","\n"],["body","​\t所以为了让我们的应用能识别是哪个用户发出的请求,我们只能在服务存储一份用户登录信息,这份登录信息会在响应时传递给浏览器,告诉其保存为cookie,以便下次请求时发送给我们的应用,这个cookie也就是sessionId,这就是传统的基于session认证"],["body","\n"],["h1","基于session认证所显露的问题"],["body","\n\n"],["body","用户过多服务端内存开销变大"],["body","\n"],["body","在分布式的应用中,需要第三方组件同步session(例如 Redis)"],["body","\n"],["body","CSRF:如果cookie被截获,用户就会容易遭受跨站请求伪造"],["body","\n\n"],["h1","基于token的鉴权机制"],["body","\n"],["headingLink","什么是jwt"],["heading","什么是JWT"],["body","\n\n"],["body","\n"],["body","JWT是 存有用户及其登陆信息的 json字符串"],["body","\n"],["body","\n"],["body","\n"],["body","jwt将 以前 基于服务端的session认证  改成 基于jwt自身的认证( 即服务端接收到一个)"],["body","\n"],["body","\n"],["body","\n"],["body","jwt 使用摘要算法,保证 header,跟payload 没有被篡改,也就保证了该token的合法性"],["body","\n"],["body","\n"],["body","\n"],["body","但jwt没有保证 传输的 加密性, 在通信过程中可能被窃取"],["body","\n"],["body","\n\n"],["headingLink","token认证流程"],["heading","token认证流程"],["body","\n\n"],["body","用户使用用户名密码来请求服务器"],["body","\n"],["body","服务器进行验证用户的信息"],["body","\n"],["body","服务器通过验证发送给用户一个token"],["body","\n"],["body","客户端存储token，并在每次请求时附送上这个token值"],["body","\n"],["body","服务端验证token值，并返回数据"],["body","\n\n"],["body","这个token必须要在每次请求时传递给服务端，它应该保存在请求头里， 另外，服务端要支持CORS(跨来源资源共享)策略，一般我们在服务端这么做就可以了Access-Control-Allow-Origin: *。"],["body","\n"],["headingLink","token解析流程"],["heading","Token解析流程"],["body","\n\n"],["body","服务收到token之后 首先判断该token有没有被人篡改\n\n"],["body","取 header跟 payload 跟服务端保存的 secret ,使用header中的签名算法做一次签名"],["body","\n"],["body","然后与token中的  signature部分 对比,一致则认为没有被篡改"],["body","\n"],["body","取 payload 中的 到期日期,判断token是否过期"],["body","\n\n"],["body","\n\n"],["headingLink","jwt的构成"],["heading","JWT的构成"],["body","\n"],["headingLink","header"],["heading","header"],["body","\n"],["body","jwt的头部承载两部分信息："],["body","\n\n"],["body","声明类型，这里是jwt"],["body","\n"],["body","声明签名算法 通常直接使用 HMAC SHA256"],["body","\n"],["body","示例"],["body","\n\n"],["body","{\n  'typ': 'JWT',\n  'alg': 'HS256'\n}\n"],["body","\n"],["body","然后将头部进行base64加密（该加密是可以对称解密的),构成了第一部分."],["body","\n"],["headingLink","playload"],["heading","playload"],["body","\n"],["body","存放有效信息的地方"],["body","\n\n"],["body","标准中注册的声明"],["body","\n"],["body","公共的声明"],["body","\n"],["body","私有的声明"],["body","\n\n"],["body","标准中注册的声明 (建议但不强制使用) ："],["body","\n\n"],["body","iss: jwt签发者"],["body","\n"],["body","sub: jwt所面向的用户"],["body","\n"],["body","aud: 接收jwt的一方"],["body","\n"],["body","exp: jwt的过期时间，这个过期时间必须要大于签发时间"],["body","\n"],["body","nbf: 定义在什么时间之前，该jwt都是不可用的."],["body","\n"],["body","iat: jwt的签发时间"],["body","\n\n"],["body","公共的声明 ：\n公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密."],["body","\n"],["body","私有的声明 ：\n私有声明是提供者和消费者所共同定义的声明，不要存放敏感信息,因为token。"],["body","\n"],["body","{\n  \"sub\": \"1234567890\",\n  \"name\": \"John Doe\",\n  \"admin\": true\n}\n"],["body","\n"],["body","然后将其进行base64加密，得到Jwt的第二部分。"],["body","\n"],["headingLink","signature"],["heading","signature"],["body","\n"],["body","jwt的第三部分是一个签证信息，这个签证信息由三部分组成："],["body","\n\n"],["body","header (base64后的)"],["body","\n"],["body","payload (base64后的)"],["body","\n"],["body","secret"],["body","\n\n"],["body","这个部分需要base64编码的header和base64编码的payload使用.连接组成的字符串，然后通过header中声明的签名方式进行加盐secret，然后就构成了jwt的第三部分。"],["body","\n"],["body","// javascript\nvar encodedString = base64UrlEncode(header) + '.' + base64UrlEncode(payload);\n\nvar signature = HMACSHA256(encodedString, 'secret'); // TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ\n"],["body","\n"],["body","注意：secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。"],["body","\n"],["body","JWT的应用"],["body","\n"],["body","fetch('api/user/1', {\n  headers: {\n    'Authorization': 'Bearer ' + token\n  }\n})\n"],["body","\n"],["headingLink","base64url算法"],["heading","Base64URL算法"],["body","\n"],["body","如前所述，JWT头和有效载荷序列化的算法都用到了Base64URL。该算法和常见Base64算法类似，稍有差别。"],["body","\n"],["body","作为令牌的JWT可以放在URL中（例如api.example/?token=xxx）。 Base64中用的三个字符是\"+\"，\"/\"和\"=\"，由于在URL中有特殊含义，因此Base64URL中对他们做了替换：\"=\"去掉，\"+\"用\"-\"替换，\"/\"用\"_\"替换，这就是Base64URL算法，很简单把。"],["body","\n"],["h1","JWT的使用场景"],["body","\n"],["headingLink","一次性验证"],["heading","一次性验证"],["body","\n"],["body","比如用户注册后需要发一封邮件让其激活账户，通常邮件中需要有一个链接，这个链接需要具备以下的特性：能够标识用户，该链接具有时效性（通常只允许几小时之内激活），不能被篡改以激活其他可能的账户…这种场景就和 jwt 的特性非常贴近，jwt 的 payload 中固定的参数：iss 签发者和 exp 过期时间正是为其做准备的。"],["body","\n"],["headingLink","restful-api-的无状态认证"],["heading","restful api 的无状态认证"],["body","\n"],["body","​\t使用 jwt 来做 restful api 的身份认证也是值得推崇的一种使用方案。客户端和服务端共享 secret；过期时间由服务端校验，客户端定时刷新；签名信息不可被修改…spring security oauth jwt 提供了一套完整的 jwt 认证体系，以笔者的经验来看：使用 oauth2 或 jwt 来做 restful api 的认证都没有大问题，oauth2 功能更多，支持的场景更丰富，后者实现简单。"],["body","\n"],["h1","JWT的局限"],["body","\n"],["headingLink","注销"],["heading","注销"],["body","\n"],["body","传统的 session+cookie 方案用户点击注销，服务端清空 session 即可，因为状态保存在服务端。但 jwt 的方案就比较难办了，因为 jwt 是无状态的，服务端通过计算来校验有效性。没有存储起来，所以即使客户端删除了 jwt，但是该 jwt 还是在有效期内，只不过处于一个游离状态。分析下痛点：注销变得复杂的原因在于 jwt 的无状态。我提供几个方案，视具体的业务来决定能不能接受。"],["body","\n\n"],["body","仅仅清空客户端的 cookie，这样用户访问时就不会携带 jwt，服务端就认为用户需要重新登录。这是一个典型的假注销，对于用户表现出退出的行为，实际上这个时候携带对应的 jwt 依旧可以访问系统。"],["body","\n"],["body","清空或修改服务端的用户对应的 secret，这样在用户注销后，jwt 本身不变，但是由于 secret 不存在或改变，则无法完成校验。这也是为什么将 secret 设计成和用户相关的原因。"],["body","\n"],["body","借助第三方存储自己管理 jwt 的状态，可以以 jwt 为 key，实现去 redis 一类的缓存中间件中去校验存在性。方案设计并不难，但是引入 redis 之后，就把无状态的 jwt 硬生生变成了有状态了，违背了 jwt 的初衷。实际上这个方案和 session 都差不多了。"],["body","\n\n"],["headingLink","修改密码"],["heading","修改密码"],["body","\n"],["body","修改密码则略微有些不同，假设号被到了，修改密码（是用户密码，不是 jwt 的 secret）之后，盗号者在原 jwt 有效期之内依旧可以继续访问系统，所以仅仅清空 cookie 自然是不够的，这时，需要强制性的修改 secret。在我的实践中就是这样做的。"],["body","\n"],["headingLink","续签问题"],["heading","续签问题"],["body","\n"],["body","续签问题可以说是我抵制使用 jwt 来代替传统 session 的最大原因，因为 jwt 的设计中我就没有发现它将续签认为是自身的一个特性。传统的 cookie 续签方案一般都是框架自带的，session 有效期 30 分钟，30 分钟内如果有访问，session 有效期被刷新至 30 分钟。而 jwt 本身的 payload 之中也有一个 exp 过期时间参数，来代表一个 jwt 的时效性，而 jwt 想延期这个 exp 就有点身不由己了，因为 payload 是参与签名的，一旦过期时间被修改，整个 jwt 串就变了，jwt 的特性天然不支持续签！ 如果你一定要使用 jwt 做会话管理（payload 中存储会话信息），也不是没有解决方案，但个人认为都不是很令人满意"],["body","\n"],["headingLink","1每次请求刷新-jwt"],["heading","1.每次请求刷新 jwt"],["body","\n"],["body","jwt 修改 payload 中的 exp 后整个 jwt 串就会发生改变，那…就让它变好了，每次请求都返回一个新的 jwt 给客户端。太暴力了，不用我赘述这样做是多么的不优雅，以及带来的性能问题。但，至少这是最简单的解决方案。"],["body","\n"],["headingLink","2只要快要过期的时候刷新-jwt"],["heading","2.只要快要过期的时候刷新 jwt"],["body","\n"],["body","一个上述方案的改造点是，只在最后的几分钟返回给客户端一个新的 jwt。这样做，触发刷新 jwt 基本就要看运气了，如果用户恰巧在最后几分钟访问了服务器，触发了刷新，万事大吉；如果用户连续操作了 27 分钟，只有最后的 3 分钟没有操作，导致未刷新 jwt，无疑会令用户抓狂。"],["body","\n"],["headingLink","3完善-refreshtoken"],["heading","3.完善 refreshToken"],["body","\n"],["body","借鉴 oauth2 的设计，返回给客户端一个 refreshToken，允许客户端主动刷新 jwt。一般而言，jwt 的过期时间可以设置为数小时，而 refreshToken 的过期时间设置为数天。我认为该方案并可行性是存在的，但是为了解决 jwt 的续签把整个流程改变了，为什么不考虑下 oauth2 的 password 模式和 client 模式呢？"],["body","\n"],["headingLink","4使用-redis-记录独立的过期时间"],["heading","4.使用 redis 记录独立的过期时间"],["body","\n"],["body","实际上我的项目中由于历史遗留问题，就是使用 jwt 来做登录和会话管理的，为了解决续签问题，我们在 redis 中单独会每个 jwt 设置了过期时间，每次访问时刷新 jwt 的过期时间，若 jwt 不存在与 redis 中则认为过期。 同样改变了 jwt 的流程，不过嘛，世间安得两全法。我只能奉劝各位还未使用 jwt 做会话管理的朋友，尽量还是选用传统的 session+cookie 方案，有很多成熟的分布式 session 框架和安全框架供你开箱即用。"],["body","\n"],["h1","参考"],["body","\n"],["body","https://www.liqingbo.cn/docs/jwt/content/application.html"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","32.其他_分布式与微服务/分布式ID.html"],["title","分布式ID.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","数据库自增长序列或字段"],["body","\n"],["body","最常见的方式。利用数据库，全数据库唯一。"],["body","\n"],["body","优点："],["body","\n"],["body","1）简单，代码方便，性能可以接受。"],["body","\n"],["body","2）数字ID天然排序，对分页或者需要排序的结果很有帮助。"],["body","\n"],["body","缺点："],["body","\n"],["body","1）不同数据库语法和实现不同，数据库迁移的时候或多数据库版本支持的时候需要处理。"],["body","\n"],["body","2）在单个数据库或读写分离或一主多从的情况下，只有一个主库可以生成。有单点故障的风险。"],["body","\n"],["body","3）在性能达不到要求的情况下，比较难于扩展。"],["body","\n"],["body","4）如果遇见多个系统需要合并或者涉及到数据迁移会相当痛苦。"],["body","\n"],["body","5）分表分库的时候会有麻烦。"],["body","\n"],["body","优化方案："],["body","\n"],["body","1）针对主库单点，如果有多个Master库，则每个Master库设置的起始数字不一样，步长一样，可以是Master的个数。比如：Master1 生成的是 1，4，7，10，Master2生成的是2,5,8,11 Master3生成的是 3,6,9,12。这样就可以有效生成集群中的唯一ID，也可以大大降低ID生成数据库操作的负载。"],["body","\n"],["h1","UUID"],["body","\n"],["body","1）简单，代码方便。"],["body","\n"],["body","2）生成ID性能非常好，基本不会有性能问题。"],["body","\n"],["body","3）全球唯一，在遇见数据迁移，系统数据合并，或者数据库变更等情况下，可以从容应对。"],["body","\n"],["body","缺点："],["body","\n"],["body","1）没有排序，无法保证趋势递增。"],["body","\n"],["body","2）UUID往往是使用字符串存储，查询的效率比较低。"],["body","\n"],["body","3）存储空间比较大，如果是海量数据库，就需要考虑存储量的问题。"],["body","\n"],["body","4）传输数据量大"],["body","\n"],["body","5）不可读。"],["body","\n"],["h1","UUID的变种"],["body","\n"],["body","UUID不可读，可以使用UUID to Int64的方法"],["body","\n"],["body","/// <summary>\n/// 根据GUID获取唯一数字序列\n/// </summary>\npublic static long GuidToInt64()\n{\n    byte[] bytes = Guid.NewGuid().ToByteArray();\n    return BitConverter.ToInt64(bytes, 0);\n}\n"],["body","\n"],["body","为了解决UUID无序的问题，NHibernate在其主键生成方式中提供了Comb算法（combined guid/timestamp）。保留GUID的10个字节，用另6个字节表示GUID生成的时间（DateTime）。"],["body","\n"],["body","/// <summary> \n/// Generate a new <see cref=\"Guid\"/> using the comb algorithm. \n/// </summary> \nprivate Guid GenerateComb()\n{\n    byte[] guidArray = Guid.NewGuid().ToByteArray();\n \n    DateTime baseDate = new DateTime(1900, 1, 1);\n    DateTime now = DateTime.Now;\n \n    // Get the days and milliseconds which will be used to build    \n    //the byte string    \n    TimeSpan days = new TimeSpan(now.Ticks - baseDate.Ticks);\n    TimeSpan msecs = now.TimeOfDay;\n \n    // Convert to a byte array        \n    // Note that SQL Server is accurate to 1/300th of a    \n    // millisecond so we divide by 3.333333    \n    byte[] daysArray = BitConverter.GetBytes(days.Days);\n    byte[] msecsArray = BitConverter.GetBytes((long)\n      (msecs.TotalMilliseconds / 3.333333));\n \n    // Reverse the bytes to match SQL Servers ordering    \n    Array.Reverse(daysArray);\n    Array.Reverse(msecsArray);\n \n    // Copy the bytes into the guid    \n    Array.Copy(daysArray, daysArray.Length - 2, guidArray,\n      guidArray.Length - 6, 2);\n    Array.Copy(msecsArray, msecsArray.Length - 4, guidArray,\n      guidArray.Length - 4, 4);\n \n    return new Guid(guidArray);\n}\n"],["body","\n"],["h1","Redis生成ID"],["body","\n"],["body","当使用数据库来生成ID性能不够要求的时候，我们可以尝试使用Redis来生成ID。这主要依赖于Redis是单线程的，所以也可以用生成全局唯一的ID。可以用Redis的原子操作 INCR和INCRBY来实现。"],["body","\n"],["body","可以使用Redis集群来获取更高的吞吐量。假如一个集群中有5台Redis。可以初始化每台Redis的值分别是1,2,3,4,5，然后步长都是5。各个Redis生成的ID为："],["body","\n"],["body","\n"],["body","比较适合使用Redis来生成每天从0开始的流水号。比如订单号=日期+当日自增长号。可以每天在Redis中生成一个Key，使用INCR进行累加。"],["body","\n"],["body","\n"],["body","优点："],["body","\n"],["body","1）不依赖于数据库，灵活方便，且性能优于数据库。"],["body","\n"],["body","2）数字ID天然排序，对分页或者需要排序的结果很有帮助。"],["body","\n"],["h1","Twitter的snowflake算法"],["body","\n"],["body","snowflake是Twitter开源的分布式ID生成算法，结果是一个long型的ID。其核心思想是：使用41bit作为毫秒数，10bit作为机器的ID（5个bit是数据中心，5个bit的机器ID），12bit作为毫秒内的流水号（意味着每个节点在每毫秒可以产生 4096 个 ID），最后还有一个符号位，永远是0。具体实现的代码可以参看https://github.com/twitter/snowflake。"],["body","\n"],["body","snowflake算法可以根据自身项目的需要进行一定的修改。比如估算未来的数据中心个数，每个数据中心的机器数以及统一毫秒可以能的并发数来调整在算法中所需要的bit数。"],["body","\n"],["body","优点："],["body","\n"],["body","1）不依赖于数据库，灵活方便，且性能优于数据库。"],["body","\n"],["body","2）ID按照时间在单机上是递增的。"],["body","\n"],["body","缺点："],["body","\n"],["body","1）在单机上是递增的，但是由于涉及到分布式环境，每台机器上的时钟不可能完全同步，也许有时候也会出现不是全局递增的情况。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","32.其他_分布式与微服务/负载均衡.html"],["title","负载均衡.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","负载均衡的算法与实现"],["body","\n"],["headingLink","算法"],["heading","算法"],["body","\n"],["body","顺序、加权轮询"],["body","\n"],["body","最少连接算法（least Connections）：将请求发送给当前最少连接数的服务器"],["body","\n"],["body","加权最小连接：在最小连接的基础上，根据服务器的性能为每台服务器分配权重，根据权重计算出每台服务器能处理的连接数。"],["body","\n"],["body","随机算法（Random）：该算法比较适合服务器性能差不多的场景"],["body","\n"],["headingLink","实现"],["heading","实现"],["body","\n"],["body","DNS负载均衡"],["body","\n"],["body","链路层负载均衡器"],["body","\n"],["body","修改IP负载均衡"],["body","\n"],["body","HTTP 重定向"],["body","\n"],["body","反向代理"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","32.其他_分布式与微服务/一致性Hash.html"],["title","一致性Hash.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","一致性hash算法背景"],["heading","一致性Hash算法背景"],["body","\n"],["body","一致性哈希算法在1997年由麻省理工学院的Karger等人在解决分布式Cache中提出的，设计目标是为了解决因特网中的热点(Hot spot)问题，"],["body","\n"],["body","但现在一致性hash算法在分布式系统中也得到了广泛应用，研究过memcached缓存数据库的人都知道，memcached服务器端本身不提供分布式cache的一致性，而是由客户端来提供，具体在计算一致性hash时采用如下步骤："],["body","\n\n"],["body","首先求出memcached服务器（节点）的哈希值，并将其配置到0～232的圆（continuum）上。"],["body","\n"],["body","然后采用同样的方法求出存储数据的键的哈希值，并映射到相同的圆上。"],["body","\n"],["body","然后从数据映射到的位置开始顺时针查找，将数据保存到找到的第一个服务器上。如果超过2^32仍然找不到服务器，就会保存到第一台memcached服务器上。"],["body","\n\n"],["body","\n"],["body","余数分布式算法由于保存键的服务器会发生巨大变化而影响缓存的命中率"],["body","\n"],["body","但Consistent Hashing中，只有在园（continuum）上增加服务器的地点逆时针方向的第一台服务器上的键会受到影响"],["body","\n"],["headingLink","一致性hash性质"],["heading","一致性Hash性质"],["body","\n"],["body","考虑到分布式系统每个节点都有可能失效，并且新的节点很可能动态的增加进来，如何保证当系统的节点数目发生变化时仍然能够对外提供良好的服务，这是值得考虑的"],["body","\n"],["body","尤其实在设计分布式缓存系统时，如果某台服务器失效，对于整个系统来说如果不采用合适的算法来保证一致性，那么缓存于系统中的所有数据都可能会失效（即由于系统节点数目变少，客户端在请求某一对象时需要重新计算其hash值（通常与系统中的节点数目有关），由于hash值已经改变，所以很可能找不到保存该对象的服务器节点），因此一致性hash就显得至关重要，良好的分布式cahce系统中的一致性hash算法应该满足以下几个方面："],["body","\n\n"],["body","\n"],["body","平衡性(Balance)"],["body","\n"],["body","平衡性是指哈希的结果能够尽可能分布到所有的缓冲中去，这样可以使得所有的缓冲空间都得到利用。很多哈希算法都能够满足这一条件。"],["body","\n"],["body","\n"],["body","\n"],["body","单调性(Monotonicity)"],["body","\n"],["body","单调性是指如果已经有一些内容通过哈希分派到了相应的缓冲中，又有新的缓冲区加入到系统中，那么哈希的结果应能够保证原有已分配的内容可以被映射到新的缓冲区中去，而不会被映射到旧的缓冲集合中的其他缓冲区。简单的哈希算法往往不能满足单调性的要求，如最简单的线性哈希：x = (ax + b) mod (P)，在上式中，P表示全部缓冲的大小。不难看出，当缓冲大小发生变化时(从P1到P2)，原来所有的哈希结果均会发生变化，从而不满足单调性的要求。哈希结果的变化意味着当缓冲空间发生变化时，所有的映射关系需要在系统内全部更新。而在P2P系统内，缓冲的变化等价于Peer加入或退出系统，这一情况在P2P系统中会频繁发生，因此会带来极大计算和传输负荷。单调性就是要求哈希算法能够应对这种情况。"],["body","\n"],["body","\n"],["body","\n"],["body","分散性(Spread)"],["body","\n"],["body","在分布式环境中，终端有可能看不到所有的缓冲，而是只能看到其中的一部分。当终端希望通过哈希过程将内容映射到缓冲上时，由于不同终端所见的缓冲范围有可能不同，从而导致哈希的结果不一致，最终的结果是相同的内容被不同的终端映射到不同的缓冲区中。这种情况显然是应该避免的，因为它导致相同内容被存储到不同缓冲中去，降低了系统存储的效率。分散性的定义就是上述情况发生的严重程度。好的哈希算法应能够尽量避免不一致的情况发生，也就是尽量降低分散性。"],["body","\n"],["body","\n\n\n"],["body","负载(Load)"],["body","\n\n"],["body","​\t负载问题实际上是从另一个角度看待分散性问题。既然不同的终端可能将相同的内容映射到不同的缓冲区中，那么对于一个特定的缓冲区而言，也可能被不同的用户映射为不同的内容。与分散性一样，这种情况也是应当避免的，因此好的哈希算法应能够尽量降低缓冲的负荷。"],["body","\n\n"],["body","平滑性(Smoothness)"],["body","\n\n"],["body","平滑性是指缓存服务器的数目平滑改变和缓存对象的平滑改变是一致的。"],["body","\n"],["headingLink","原理"],["heading","原理"],["body","\n\n"],["body","确定环：整个空间按顺时针方向组织。0和232-1在零点中方向重合。"],["body","\n"],["body","确定服务器位置：下一步将各个服务器使用Hash进行一个哈希，具体可以选择服务器的ip或主机名作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置，这里假设将上文中四台服务器使用ip地址哈希后在环空间的位置如下："],["body","\n"],["body","使用hash算法定位数据到 环中的服务器位置\n\n"],["body","将数据key使用相同的函数Hash计算出哈希值，并确定此数据在环上的位置，从此位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器。"],["body","\n\n"],["body","\n\n"],["body","一致性哈希算法对于节点的增减都只需重定位环空间中的一小部分数据，具有较好的容错性和可扩展性。"],["body","\n"],["body","另外，一致性哈希算法在服务节点太少时，容易因为节点分部不均匀而造成数据倾斜问题。"],["body","\n"],["headingLink","虚拟节点机制"],["heading","虚拟节点机制"],["body","\n"],["body","为了解决这种数据倾斜问题，一致性哈希算法引入了虚拟节点机制，即对每一个服务节点计算多个哈希，每个计算结果位置都放置一个此服务节点，称为虚拟节点"],["body","\n"],["body","具体做法可以在服务器ip或主机名的后面增加编号来实现。例如上面的情况，可以为每台服务器计算三个虚拟节点，于是可以分别计算 “Node A#1”、“Node A#2”、“Node A#3”、“Node B#1”、“Node B#2”、“Node B#3”的哈希值，于是形成六个虚拟节点："],["body","\n"],["body","\n"],["body","同时数据定位算法不变，只是多了一步虚拟节点到实际节点的映射，例如定位到“Node A#1”、“Node A#2”、“Node A#3”三个虚拟节点的数据均定位到Node A上。这样就解决了服务节点少时数据倾斜的问题。在实际应用中，通常将虚拟节点数设置为32甚至更大，因此即使很少的服务节点也能做到相对均匀的数据分布。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/5.SpringSchedule.html"],["title","SpringSchedule.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","scheduledannotationbeanpostprocessor"],["heading","ScheduledAnnotationBeanPostProcessor"],["body","\n"],["headingLink","任务注册完毕后"],["heading","任务注册完毕后"],["body","\n"],["body","\tpublic void onApplicationEvent(ContextRefreshedEvent event) {\n\t\tif (event.getApplicationContext() == this.applicationContext) {\n\t\t\t// Running in an ApplicationContext -> register tasks this late...\n\t\t\t// giving other ContextRefreshedEvent listeners a chance to perform\n\t\t\t// their work at the same time (e.g. Spring Batch's job registration).\n\t\t\tfinishRegistration();\n\t\t}\n\t}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring解决循环依赖问题.html"],["title","spring解决循环依赖问题.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","循环依赖发生的时机"],["body","\n\n"],["body","createBeanInstance实例化"],["body","\n"],["body","populateBean 填充属性"],["body","\n"],["body","InitializeBean 初始化"],["body","\n\n"],["body","在1,2过程中会发生"],["body","\n"],["h1","如何解决"],["body","\n"],["body","Spring 为了解决单例的循环依赖问题，使用了 三级缓存"],["body","\n"],["body","/** 一级缓存：用于存放完全初始化好的 bean **/\nprivate final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);\n\n/** 二级缓存：存放原始的 bean 对象（尚未填充属性），用于解决循环依赖 */\nprivate final Map<String, Object> earlySingletonObjects = new HashMap<String, Object>(16);\n\n/** 三级级缓存：存放 bean 工厂对象，用于解决循环依赖 */\nprivate final Map<String, ObjectFactory<?>> singletonFactories = new HashMap<String, ObjectFactory<?>>(16);\n"],["body","\n"],["body","过程"],["body","\n\n"],["body","A 创建过程中需要 B，于是 A 将自己放到三级缓里面 ，去实例化 B"],["body","\n"],["body","B 实例化的时候发现需要 A，于是 B 先查一级缓存，没有，再查二级缓存，还是没有，再查三级缓存，找到了！"],["body","\n"],["body","然后把三级缓存里面的这个 A 放到二级缓存里面，并删除三级缓存里面的 A"],["body","\n"],["body","B 顺利初始化完毕，将自己放到一级缓存里面（此时B里面的A依然是创建中状态）"],["body","\n"],["body","然后回来接着创建 A，此时 B 已经创建结束，直接从一级缓存里面拿到 B ，然后完成创建，并将自己放到一级缓存里面"],["body","\n\n"],["h1","源码分析"],["body","\n"],["body","protected Object getSingleton(String beanName, boolean allowEarlyReference) {\n   // Quick check for existing instance without full singleton lock\n   Object singletonObject = this.singletonObjects.get(beanName); //从一级缓存中取对象\n   if (singletonObject == null && isSingletonCurrentlyInCreation(beanName)) { //没有取到，且当前对象正在创建中\n      singletonObject = this.earlySingletonObjects.get(beanName); //从二级缓存取\n      if (singletonObject == null && allowEarlyReference) { //从二级缓存没取到，且需要早期暴露\n         synchronized (this.singletonObjects) {\n            // Consistent creation of early reference within full singleton lock\n            singletonObject = this.singletonObjects.get(beanName);\n            if (singletonObject == null) {\n               singletonObject = this.earlySingletonObjects.get(beanName);\n               if (singletonObject == null) { //则从三级缓存中取 ObjectFactory 获取实例早期对象，并从三级缓存转移到二级缓存\n                  ObjectFactory<?> singletonFactory = this.singletonFactories.get(beanName);\n                  if (singletonFactory != null) {\n                     singletonObject = singletonFactory.getObject();\n                     this.earlySingletonObjects.put(beanName, singletonObject);\n                     this.singletonFactories.remove(beanName);\n                  }\n               }\n            }\n         }\n      }\n   }\n   return singletonObject;\n}\n"],["body","\n"],["h1","总结"],["body","\n"],["headingLink","为什么要设计三级缓存"],["heading","为什么要设计三级缓存"],["body","\n"],["body","一般来说，二级缓存就够用了，但是 Spring 提供了 InstantiationAwareBeanPostProcessor 与 SmartInstantiationAwareBeanPostProcessor 后处理器"],["body","\n"],["body","用于提前初始化，所以在 循环依赖过程中，如果提早暴露 引用给 其他人，则 需要对 先将 未 调用过InstantiationAwareBeanPostProcessor  的 bean放入 三缓"],["body","\n"],["body","调用过 InstantiationAwareBeanPostProcessor  的 bean 但正在创建中的 放入 二缓，创建完成的放入一缓"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/2.SpringBean实例化过程.html"],["title","SpringBean实例化过程.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","createBean"],["body","\n"],["body","\n"],["body","org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory#createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)"],["body","\n"],["body","\n"],["body","主要分以下几个步骤"],["body","\n\n"],["body","\n"],["headingLink","lookup-method检测"],["heading","lookup-method检测"],["body","\n"],["body","\n"],["body","\n"],["headingLink","instantiationawarebeanpostprocessor触发"],["heading","InstantiationAwareBeanPostProcessor触发"],["body","\n"],["body","此接口用于初始化自定义的bean，主要是在Spring内部使用"],["body","\n"],["body","如果InstantiationAwareBeanPostProcessor返回的不是空，那么将不会继续执行剩下的Spring初始化流程"],["body","\n"],["body","\n"],["body","\n"],["body","开始实例化"],["body","\n"],["body","\n\n"],["body","protected Object createBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)\n      throws BeanCreationException {\n\n   if (logger.isTraceEnabled()) {\n      logger.trace(\"Creating instance of bean '\" + beanName + \"'\");\n   }\n   RootBeanDefinition mbdToUse = mbd;\n\n   // Make sure bean class is actually resolved at this point, and\n   // clone the bean definition in case of a dynamically resolved Class\n   // which cannot be stored in the shared merged bean definition.\n   Class<?> resolvedClass = resolveBeanClass(mbd, beanName);\n   if (resolvedClass != null && !mbd.hasBeanClass() && mbd.getBeanClassName() != null) {\n      mbdToUse = new RootBeanDefinition(mbd);\n      mbdToUse.setBeanClass(resolvedClass);\n   }\n\n   // Prepare method overrides.\n   try {\n      mbdToUse.prepareMethodOverrides();\n   }\n   catch (BeanDefinitionValidationException ex) {\n      throw new BeanDefinitionStoreException(mbdToUse.getResourceDescription(),\n            beanName, \"Validation of method overrides failed\", ex);\n   }\n\n   try {\n      // Give BeanPostProcessors a chance to return a proxy instead of the target bean instance.\n      Object bean = resolveBeforeInstantiation(beanName, mbdToUse);\n      if (bean != null) {\n         return bean;\n      }\n   }\n   catch (Throwable ex) {\n      throw new BeanCreationException(mbdToUse.getResourceDescription(), beanName,\n            \"BeanPostProcessor before instantiation of bean failed\", ex);\n   }\n\n   try {\n      Object beanInstance = doCreateBean(beanName, mbdToUse, args);\n      if (logger.isTraceEnabled()) {\n         logger.trace(\"Finished creating instance of bean '\" + beanName + \"'\");\n      }\n      return beanInstance;\n   }\n   catch (BeanCreationException | ImplicitlyAppearedSingletonException ex) {\n      // A previously detected exception with proper bean creation context already,\n      // or illegal singleton state to be communicated up to DefaultSingletonBeanRegistry.\n      throw ex;\n   }\n   catch (Throwable ex) {\n      throw new BeanCreationException(\n            mbdToUse.getResourceDescription(), beanName, \"Unexpected exception during bean creation\", ex);\n   }\n}\n"],["body","\n"],["h1","doCreateBean"],["body","\n"],["body","\n"],["body","开始实例化"],["body","\n"],["body","\n"],["body","protected Object doCreateBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)\n      throws BeanCreationException {\n\n   // Instantiate the bean.\n   BeanWrapper instanceWrapper = null;\n   if (mbd.isSingleton()) {\n      instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);\n   }\n   if (instanceWrapper == null) {\n      instanceWrapper = createBeanInstance(beanName, mbd, args);\n   }\n   Object bean = instanceWrapper.getWrappedInstance();\n   Class<?> beanType = instanceWrapper.getWrappedClass();\n   if (beanType != NullBean.class) {\n      mbd.resolvedTargetType = beanType;\n   }\n\n   // Allow post-processors to modify the merged bean definition.\n   synchronized (mbd.postProcessingLock) {\n      if (!mbd.postProcessed) {\n         try {\n            applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);\n         }\n         catch (Throwable ex) {\n            throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                  \"Post-processing of merged bean definition failed\", ex);\n         }\n         mbd.postProcessed = true;\n      }\n   }\n\n   // Eagerly cache singletons to be able to resolve circular references\n   // even when triggered by lifecycle interfaces like BeanFactoryAware.\n   boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&\n         isSingletonCurrentlyInCreation(beanName));\n   if (earlySingletonExposure) {\n      if (logger.isTraceEnabled()) {\n         logger.trace(\"Eagerly caching bean '\" + beanName +\n               \"' to allow for resolving potential circular references\");\n      }\n      addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));\n   }\n\n   // Initialize the bean instance.\n   Object exposedObject = bean;\n   try {\n      populateBean(beanName, mbd, instanceWrapper);\n      exposedObject = initializeBean(beanName, exposedObject, mbd);\n   }\n   catch (Throwable ex) {\n      if (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {\n         throw (BeanCreationException) ex;\n      }\n      else {\n         throw new BeanCreationException(\n               mbd.getResourceDescription(), beanName, \"Initialization of bean failed\", ex);\n      }\n   }\n\n   if (earlySingletonExposure) {\n      Object earlySingletonReference = getSingleton(beanName, false);\n      if (earlySingletonReference != null) {\n         if (exposedObject == bean) {\n            exposedObject = earlySingletonReference;\n         }\n         else if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {\n            String[] dependentBeans = getDependentBeans(beanName);\n            Set<String> actualDependentBeans = new LinkedHashSet<>(dependentBeans.length);\n            for (String dependentBean : dependentBeans) {\n               if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {\n                  actualDependentBeans.add(dependentBean);\n               }\n            }\n            if (!actualDependentBeans.isEmpty()) {\n               throw new BeanCurrentlyInCreationException(beanName,\n                     \"Bean with name '\" + beanName + \"' has been injected into other beans [\" +\n                     StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +\n                     \"] in its raw version as part of a circular reference, but has eventually been \" +\n                     \"wrapped. This means that said other beans do not use the final version of the \" +\n                     \"bean. This is often the result of over-eager type matching - consider using \" +\n                     \"'getBeanNamesForType' with the 'allowEagerInit' flag turned off, for example.\");\n            }\n         }\n      }\n   }\n\n   // Register bean as disposable.\n   try {\n      registerDisposableBeanIfNecessary(beanName, bean, mbd);\n   }\n   catch (BeanDefinitionValidationException ex) {\n      throw new BeanCreationException(\n            mbd.getResourceDescription(), beanName, \"Invalid destruction signature\", ex);\n   }\n\n   return exposedObject;\n}\n"],["body","\n"],["h1","createBeanInstance"],["body","\n"],["body","\n"],["body","真正实例化"],["body","\n"],["body","\n"],["body","使用工厂方法或者 构造函数 或者 CGLIB 实例化"],["body","\n"],["body","protected BeanWrapper createBeanInstance(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) {\n   // Make sure bean class is actually resolved at this point.\n   Class<?> beanClass = resolveBeanClass(mbd, beanName); //获取Class字节码\n\n   if (beanClass != null && !Modifier.isPublic(beanClass.getModifiers()) && !mbd.isNonPublicAccessAllowed()) {\n      throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n            \"Bean class isn't public, and non-public access not allowed: \" + beanClass.getName());\n   }\n\n   Supplier<?> instanceSupplier = mbd.getInstanceSupplier();\n   if (instanceSupplier != null) {\n      return obtainFromSupplier(instanceSupplier, beanName);\n   }\n\n   if (mbd.getFactoryMethodName() != null) {\n      return instantiateUsingFactoryMethod(beanName, mbd, args);\n   }\n\n   // Shortcut when re-creating the same bean...\n   boolean resolved = false;\n   boolean autowireNecessary = false;\n   if (args == null) {\n      synchronized (mbd.constructorArgumentLock) {\n         if (mbd.resolvedConstructorOrFactoryMethod != null) {\n            resolved = true;\n            autowireNecessary = mbd.constructorArgumentsResolved;\n         }\n      }\n   }\n   if (resolved) {\n      if (autowireNecessary) {\n         return autowireConstructor(beanName, mbd, null, null);\n      }\n      else {\n         return instantiateBean(beanName, mbd);\n      }\n   }\n\n   // Candidate constructors for autowiring?\n   Constructor<?>[] ctors = determineConstructorsFromBeanPostProcessors(beanClass, beanName);\n   if (ctors != null || mbd.getResolvedAutowireMode() == AUTOWIRE_CONSTRUCTOR ||\n         mbd.hasConstructorArgumentValues() || !ObjectUtils.isEmpty(args)) {\n      return autowireConstructor(beanName, mbd, ctors, args);\n   }\n\n   // Preferred constructors for default construction?\n   ctors = mbd.getPreferredConstructors();\n   if (ctors != null) {\n      return autowireConstructor(beanName, mbd, ctors, null);\n   }\n\n   // No special handling: simply use no-arg constructor.\n   return instantiateBean(beanName, mbd);\n}\n"],["body","\n"],["headingLink","使用无参构造-工厂方法路径"],["heading","使用无参构造 工厂方法路径"],["body","\n"],["body","AbstractBeanFactory#doGetBean\n    AbstractAutowireCapableBeanFactory#createBean\n        AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation\n        AbstractAutowireCapableBeanFactory#doCreateBean\n            AbstractAutowireCapableBeanFactory#createBeanInstance\n                AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod\n                    ConstructorResolver#instantiateUsingFactoryMethod\n                        ConstructorResolver#instantiate\n                            InstantiationStrategy#instantiate\n"],["body","\n"],["headingLink","使用带参工厂方法-调用路径"],["heading","使用带参工厂方法 调用路径"],["body","\n"],["body","AbstractBeanFactory#doGetBean\n    AbstractAutowireCapableBeanFactory#createBean\n        AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation\n        AbstractAutowireCapableBeanFactory#doCreateBean\n            AbstractAutowireCapableBeanFactory#createBeanInstance\n                AbstractAutowireCapableBeanFactory#instantiateUsingFactoryMethod\n                    ConstructorResolver#instantiateUsingFactoryMethod\n                        ConstructorResolver#createArgumentArray\n                        ConstructorResolver#instantiate\n                            InstantiationStrategy#instantiate\n"],["body","\n"],["headingLink","带参构造函数调用路径"],["heading","带参构造函数调用路径"],["body","\n"],["body","AbstractBeanFactory#doGetBean\n    AbstractAutowireCapableBeanFactory#createBean\n        AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation\n        AbstractAutowireCapableBeanFactory#doCreateBean\n            AbstractAutowireCapableBeanFactory#createBeanInstance\n                AbstractAutowireCapableBeanFactory#determineConstructorsFromBeanPostProcessors\n                    AutowiredAnnotationBeanPostProcessor#determineCandidateConstructors\n                AbstractAutowireCapableBeanFactory#autowireConstructor\n                    ConstructorResolver#autowireConstructor\n                    ConstructorResolver#createArgumentArray\n                    ConstructorResolver#instantiate\n                        SimpleInstantiationStrategy#instantiate\n"],["body","\n"],["h1","总结"],["body","\n"],["headingLink","实例化过程每个方法完成的功能"],["heading","实例化过程每个方法完成的功能"],["body","\n\n"],["body","createBean 方法  可以提前初始化 带有 InstantiationAwareBeanPostProcessor 返回的bean"],["body","\n"],["body","doCreateBean 方法 在创建实例完成后 进行 依赖处理、初始化处理等"],["body","\n"],["body","createBeanInstance  使用 工厂方法或者 构造函数初始化 实例"],["body","\n"],["body","ConstructorResolver 进行 参数依赖获取，以及构造函数选择等"],["body","\n"],["body","InstantiationStrategy 负责实例化"],["body","\n\n"],["headingLink","实例化过程简述"],["heading","实例化过程简述"],["body","\n\n"],["body","在容器启动中，会初始化所有单例 非延迟bean "],["body","\n"],["body","通过 三种方式：FactoryBean 或者 工厂方法，或者 构造函数"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springBeanScope/spring自定义可刷新的上下文.html"],["title","spring自定义可刷新的上下文.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","步骤"],["body","\n"],["headingLink","自定义scope注解"],["heading","自定义Scope注解"],["body","\n"],["body","@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Scope(AutoRefreshScope.REFRESH_SCOPE) //指定scopename\n@Documented\npublic @interface RefreshScope {\n    // 设置proxyMode的值为ScopedProxyMode.TARGET_CLASS\n    // 目的是使用cglib生成一个代理对象，通过这个代理对象来访问目标bean对象\n    ScopedProxyMode proxyMode() default ScopedProxyMode.TARGET_CLASS;\n}\n"],["body","\n"],["headingLink","自定义springscope处理类"],["heading","自定义SpringScope处理类"],["body","\n"],["body","public class AutoRefreshScope implements Scope {\n    /**\n     * 单例模式，声明一个实例\n     */\n    private static final AutoRefreshScope instance = new AutoRefreshScope();\n    /**\n     * 来个map用来缓存bean\n     */\n    private Map<String, Object> beanMap = new ConcurrentHashMap<>();\n\n    private AutoRefreshScope() {\n    }\n\n    /**\n     * 获取实例\n     *\n     * @return\n     */\n    public static AutoRefreshScope getInstance() {\n        return instance;\n    }\n\n    /**\n     * 清理指定名称的key\n     */\n    public static void clean(String name) {\n        instance.beanMap.remove(name);\n    }\n\n    /**\n     * 定义作用域名称为：refresh\n     */\n    public static final String REFRESH_SCOPE = \"refresh\";\n\n    @Override\n    public Object get(String name, ObjectFactory<?> objectFactory) {\n        Object bean = beanMap.get(name);\n        if (bean == null) {\n            bean = objectFactory.getObject();\n            beanMap.put(name, bean);\n        }\n        return bean;\n    }\n\n    \n    @Override\n    public Object remove(String s) {\n        return null;\n    }\n\n    @Override\n    public void registerDestructionCallback(String s, Runnable runnable) {\n\n    }\n\n    @Override\n    public Object resolveContextualObject(String s) {\n        return null;\n    }\n\n    @Override\n    public String getConversationId() {\n        return null;\n    }\n}\n"],["body","\n"],["headingLink","注册scope"],["heading","注册Scope"],["body","\n"],["body","@Configuration\npublic class CommonConfig {\n    @Autowired\n    ConfigurableBeanFactory factory;\n    @Autowired\n    ConfigurableEnvironment environment;\n    @Autowired\n    PropertiesDataFactory propertiesDataFactory;\n\n    @PostConstruct\n    public void init(){\n        // 将自定义作用域注册到spring容器中\n        factory.registerScope(AutoRefreshScope.REFRESH_SCOPE, AutoRefreshScope.getInstance());\n\n        // 更新配置信息\n        propertiesDataFactory.UpdateUserConfig(environment);\n    }\n}\n"],["body","\n"],["headingLink","配置更新类"],["heading","配置更新类"],["body","\n"],["body","@Component\npublic class PropertiesDataFactory {\n    /**\n     * 获取用户配置信息\n     * 为了演示，就模拟一下，真实项目里可能是从数据库，或者其它方式取得配置信息\n     *\n     * @return map\n     */\n    public static Map<String, Object> getUserConfig() {\n        Map<String, Object> map = new HashMap<>(16);\n\n        // 注意：这里map的key必须要和@Value(\"${key}\")中的key相同\n        map.put(\"user.name\", UUID.randomUUID().toString().replaceAll(\"-\", \"\"));\n        map.put(\"user.sex\", \"18\");\n        map.put(\"user.phone\", \"180-0000-0000\");\n        map.put(\"user.address\", \"海底大世界\");\n\n        return map;\n    }\n\n    /**\n     * 更新配置信息\n     */\n    public void UpdateUserConfig(ConfigurableEnvironment environment) {\n        // 模拟从其它地方获取配置信息，可能是数据库，也可能是其它渠道\n        Map<String, Object> userConfig = PropertiesDataFactory.getUserConfig();\n        // 创建一个MapPropertySource,将配置信息放到其中，\n        // MapPropertySource可以理解为Map<String, PropertySource>\n        MapPropertySource propertySource = new MapPropertySource(\"user\", userConfig);\n        // 将propertySource放到MutablePropertySources里，后面Environment解析时会使用到\n        // addFirst是为了放到首位，解析速度更快\n        environment.getPropertySources().addFirst(propertySource);\n    }\n}\n"],["body","\n"],["headingLink","在配置类上使用"],["heading","在配置类上使用"],["body","\n"],["body","@Data\n@Component\n@RefreshScope\npublic class UserConfig {\n    @Value(\"${user.name}\")\n    private String name;\n\n    @Value(\"${user.sex}\")\n    private String sex;\n\n    @Value(\"${user.phone}\")\n    private String phone;\n\n    @Value(\"${user.address}\")\n    private String address;\n\n    @Override\n    public String toString() {\n        return \"UserConfig{\" +\n                \"name='\" + name + '\\'' +\n                \", sex='\" + sex + '\\'' +\n                \", phone='\" + phone + '\\'' +\n                \", address='\" + address + '\\'' +\n                '}';\n    }\n\n    public UserConfig() {\n        System.out.println(1);\n    }\n}\n"],["body","\n"],["headingLink","更新配置类"],["heading","更新配置类"],["body","\n"],["body","/**\n * 更新配置信息\n */\npublic void UpdateUserConfig(ConfigurableEnvironment environment) {\n    // 模拟从其它地方获取配置信息，可能是数据库，也可能是其它渠道\n    Map<String, Object> userConfig = PropertiesDataFactory.getUserConfig();\n    // 创建一个MapPropertySource,将配置信息放到其中，\n    // MapPropertySource可以理解为Map<String, PropertySource>\n    MapPropertySource propertySource = new MapPropertySource(\"user\", userConfig);\n    // 将propertySource放到MutablePropertySources里，后面Environment解析时会使用到\n    // addFirst是为了放到首位，解析速度更快\n    environment.getPropertySources().addFirst(propertySource);\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springBeanScope/README.html"],["title","springBeanScope - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","简述"],["body","\n\n"],["body","scope 用来限定 容器中bean对象的存活时间"],["body","\n"],["body","即对象在进入相应 scope时 容器会自动装配这些对象、在容器不再处于该scope后，容器通常会销毁这些对象"],["body","\n\n"],["h1","预定义的Scope"],["body","\n"],["headingLink","singleton"],["heading","singleton"],["body","\n\n"],["body","\n"],["body","singleton是容器默认的scope"],["body","\n"],["body","\n"],["body","\n"],["body","在Spring的IoC容器中只存在一个实例"],["body","\n"],["body","\n\n"],["headingLink","singleton的bean具有的特性"],["heading","singleton的bean具有的特性"],["body","\n\n"],["body","对象实例数量：singleton类型的bean定义，在一个容器中只存在一个共享实例，所有对该类型bean的依赖都引用这一单一实例"],["body","\n"],["body","对象存活时间：singleton类型bean定义，从容器启动，到它第一次被请求而实例化开始，只要容器不销毁或退出，该类型的单一实例就会一直存活"],["body","\n\n"],["headingLink","prototype"],["heading","prototype"],["body","\n"],["body","每次得到的对象都是重新装配的"],["body","\n"],["headingLink","requestsessionglobal-session"],["heading","request、session、global session"],["body","\n"],["body","这三个scope类型是Spring2.0之后新增加的，它们不像上面两个那么通用，它们只适用于Web应用程序，通常是与XmlWebApplicationContext共同使用"],["body","\n"],["headingLink","request"],["heading","request"],["body","\n\n"],["body","\n"],["body","在Spring容器中，即XmlWebApplicationContext会为每个HTTP请求创建一个全新的Request-Processor对象供当前请求使用，当请求结束后，该对象实生命周期就结束"],["body","\n"],["body","\n"],["body","\n"],["body","当同时有10个HTTP请求进来的时候，容器会分别针对这10个请求返回10个全新的RequestProcessor对象实例，且它们之间互不干扰。"],["body","\n"],["body","\n\n"],["headingLink","session"],["heading","session"],["body","\n"],["body","放到session中的最普遍的信息就是用户登录信息，Spring容器会为每个独立的session创建属于它们自己全新的UserPreferences对象实例。与request相比，除了拥有session scope的bean比request scope的bean可能更长的存活时间，其他没什么差别"],["body","\n"],["headingLink","global-session"],["heading","global session"],["body","\n"],["body","global session只有应用在基于portlet的Web应用程序中才有意义，它映射到portlet的global范围的session。"],["body","\n"],["body","如果在普通的基于servlet的Web应用中使了用这个类型的scope，容器会将其作为普通的session类型的scope来对待"],["body","\n"],["headingLink","什么是portlet"],["heading","什么是portlet"],["body","\n"],["body","Portlets是一种Web组件－就像servlets－是专为将合成页面里的内容聚集在一起而设计的。通常请求一个portal页面会引发多个portlets被调用。每个portlet都会生成标记段，并与别的portlets生成的标记段组合在一起嵌入到portal页面的标记内。"],["body","\n"],["h1","源码分析"],["body","\n"],["headingLink","scope接口"],["heading","Scope接口"],["body","\n"],["body","GET接口"],["body","\n"],["body","\n"],["body","从底层依赖 查找对象，如果查找不到则 使用 Spring自动装配Bean"],["body","\n"],["body","\n"],["body","Object get(String name, ObjectFactory<?> objectFactory);\n"],["body","\n"],["body","REMOVE接口"],["body","\n\n"],["body","从底层作用域中删除具有给定名称的对象。"],["body","\n"],["body","如果没有找到对象，则返回 null，否则返回移除的对象。"],["body","\n"],["body","实现者 还应  移除指定对象的注册销毁回调（如果有）。如果没有，它不需要执行注册的销毁回调，因为对象将被调用者销毁（如果合适）。"],["body","\n"],["body","这是一个可选的 实现操作 也可以抛出  UnsupportedOperationException"],["body","\n\n"],["body","Object remove(String name);\n"],["body","\n"],["body","注册回调接口"],["body","\n\n"],["body","\n"],["body","注册一个回调，以在销毁指定的 scope 内的对象时执行"],["body","\n"],["body","\n"],["body","\n"],["body","注意：这是一个可选操作。此方法只会为配置了 实际销毁动作的 作用域bean调用"],["body","\n"],["body","DisposableBean, destroy-method, DestructionAwareBeanPostProcessor\n"],["body","\n"],["body","\n"],["body","\n"],["body","实现应该尽最大努力在适当的时间执行给定的回调，如果底层运行时环境根本不支持这样的回调，则必须忽略回调并记录相应的警告"],["body","\n"],["body","\n\n"],["body","//bean的名称、销毁要执行的回调\nvoid registerDestructionCallback(String name, Runnable callback);\n"],["body","\n"],["body","解析给定key的上下文对象（如果有）。"],["body","\n"],["body","例如 key “request” 的 HttpServletRequest 对象。"],["body","\n"],["body","Object resolveContextualObject(String key);\n"],["body","\n"],["body","返回当前基础scope的对话 ID（如果有）。"],["body","\n\n"],["body","对话 ID 的确切含义取决于底层存储机制。"],["body","\n"],["body","在session scope 对象的情况下，对话ID 通常等于（或派生自）session ID；"],["body","\n"],["body","对于位于整个会话中的自定义对话，指定 当前对话的ID 将是合适的。"],["body","\n"],["body","如果底层存储机制没有明显的此类 ID 候选者，则 返回 null 是完全有效的。"],["body","\n\n"],["body","String getConversationId();\n"],["body","\n"],["headingLink","abstractrequestattributesscope"],["heading","AbstractRequestAttributesScope"],["body","\n\n"],["body","\n"],["body","scope抽象实现类，基于Web的 Request"],["body","\n"],["body","\n"],["body","\n"],["body","RequestScope 与 **SessionScope ** 都是依赖于 RequestAttributes 实现的Scope"],["body","\n"],["body","\n\n"],["headingLink","scope是如何生效的"],["heading","Scope是如何生效的"],["body","\n"],["body","\n"],["body","org.springframework.beans.factory.support.AbstractBeanFactory#doGetBean 核心方法"],["body","\n"],["body","\n"],["body","//单例\n// Create bean instance\nif (mbd.isSingleton()) {\n    //直接获取单例。具体实例化的方法没有实现\n   sharedInstance = getSingleton(beanName, () -> {\n      try {\n         return createBean(beanName, mbd, args);\n      }\n      catch (BeansException ex) {\n         // Explicitly remove instance from singleton cache: It might have been put there\n         // eagerly by the creation process, to allow for circular reference resolution.\n         // Also remove any beans that received a temporary reference to the bean.\n         destroySingleton(beanName);\n         throw ex;\n      }\n   });\n    //处理BeanFactory的情况\n   beanInstance = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n}\n//原型\nelse if (mbd.isPrototype()) {\n   // It's a prototype -> create a new instance.\n   Object prototypeInstance = null;\n   try {\n      beforePrototypeCreation(beanName);\n      prototypeInstance = createBean(beanName, mbd, args);\n   }\n   finally {\n      afterPrototypeCreation(beanName);\n   }\n   beanInstance = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n}\n//其他scope作用域\nelse {\n   String scopeName = mbd.getScope();\n   if (!StringUtils.hasLength(scopeName)) {\n      throw new IllegalStateException(\"No scope name defined for bean ´\" + beanName + \"'\");\n   }\n//获取Scope\n   Scope scope = this.scopes.get(scopeName);\n   if (scope == null) {\n      throw new IllegalStateException(\"No Scope registered for scope name '\" + scopeName + \"'\");\n   }\n   try {//得到beean实例\n      Object scopedInstance = scope.get(beanName, () -> {\n         beforePrototypeCreation(beanName);\n         try {\n            return createBean(beanName, mbd, args);\n         }\n         finally {\n            afterPrototypeCreation(beanName);\n         }\n      });\n       //处理BeanFactory实例\n      beanInstance = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);\n   }\n   catch (IllegalStateException ex) {\n      throw new ScopeNotActiveException(beanName, scopeName, ex);\n   }\n}\n"],["body","\n"],["headingLink","预定义的scope是在哪里注册的"],["heading","预定义的Scope是在哪里注册的"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/Spring总结.html"],["title","Spring总结.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","spring Bean初始化步骤总结"],["body","\n"],["h1","BeanFactory与ApplicationContext有什么区别"],["body","\n"],["h1","Spring是如何实例化单例"],["body","\n"],["h1","Spring是如何实例化原型"],["body","\n"],["h1","Spring是如何实例化其他作用域"],["body","\n"],["h1","Spring是如何处理Bean之间的依赖"],["body","\n"],["h1","typeCheckOnly 是什么作用"],["body","\n"],["h1","Spring是如何进行类型转换的"],["body","\n"],["h1","什么是合成Bean"],["body","\n"],["h1","Spring是如何处理DependsOn的"],["body","\n"],["h1","Spring组合注解的使用"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springframework.html"],["title","springframework - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/0.spring容器启动总览.html"],["title","spring容器启动总览.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","源码"],["body","\n"],["body","public void refresh() throws BeansException, IllegalStateException {\n   synchronized (this.startupShutdownMonitor) {\n      StartupStep contextRefresh = this.applicationStartup.start(\"spring.context.refresh\");\n\n      // Prepare this context for refreshing.//为容器初始化做准备\n      prepareRefresh();\n\n    // 这步比较重要(解析)，告诉子类去刷新bean工厂，这步完成后配置文件就解析成一个个bean定义，注册到BeanFactory（但是未被初始化，仅将信息写到了beanDefination的map中）\n      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();\n\n    // 设置beanFactory类加载器，添加多个beanPostProcesser\n      prepareBeanFactory(beanFactory);\n\n      try {\n        // 允许子类上下文中对beanFactory做后期处理\n         postProcessBeanFactory(beanFactory);\n\n         StartupStep beanPostProcess = this.applicationStartup.start(\"spring.context.beans.post-process\");\n         // Invoke factory processors registered as beans in the context.\n         /*\n\t\t\t\t* BeanDefinitionRegistryPostProcessor\n\t\t\t\t* BeanFactoryPostProcessor\n\t\t\t\t* 完成对这两个接口的调用\n\t\t* */\n         invokeBeanFactoryPostProcessors(beanFactory);\n\n// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别\n         // 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization\n         // 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化\n         registerBeanPostProcessors(beanFactory);\n         beanPostProcess.end();\n\n        //初始化ApplicationContext的MessageSource\n         initMessageSource();\n\n        //初始化ApplicationContext事件广播器\n         initApplicationEventMulticaster();\n\n        // 初始化子类特殊bean（钩子方法）\n         onRefresh();\n \n        // 注册事件监听器\n         registerListeners();\n\n         // Instantiate all remaining (non-lazy-init) singletons.\n          /*\n\t\t\t\t* 1、bean实例化过程\n\t\t\t\t* 2、依赖注入\n\t\t\t\t* 3、注解支持\n\t\t\t\t* 4、BeanPostProcessor的执行\n\t\t\t\t* 5、Aop的入口\n\t\t\t\t*\n\t\t* */\n         finishBeanFactoryInitialization(beanFactory);\n\n        // 广播事件，ApplicationContext初始化完成\n         finishRefresh();\n      }\n\n      catch (BeansException ex) {\n         if (logger.isWarnEnabled()) {\n            logger.warn(\"Exception encountered during context initialization - \" +\n                  \"cancelling refresh attempt: \" + ex);\n         }\n\n         // Destroy already created singletons to avoid dangling resources.\n         destroyBeans();\n\n         // Reset 'active' flag.\n         cancelRefresh(ex);\n\n         // Propagate exception to caller.\n         throw ex;\n      }\n\n      finally {\n         // Reset common introspection caches in Spring's core, since we\n         // might not ever need metadata for singleton beans anymore...\n         resetCommonCaches();\n         contextRefresh.end();\n      }\n   }\n}\n"],["body","\n"],["h1","总结"],["body","\n"],["headingLink","spring容器启动主要流程"],["heading","spring容器启动主要流程"],["body","\n\n"],["body","初始化容器环境：包括启动信息，properties资源，属性校验"],["body","\n"],["body","初始化 BeanFactory 完成 BeanDefinition 的解析"],["body","\n"],["body","注册与调用 BeanFactoryPostProcessor "],["body","\n"],["body","注册BeanFactoryPostProcessor "],["body","\n"],["body","初始化MessageSource"],["body","\n"],["body","初始化事件广播器组件，注册事件监听"],["body","\n"],["body","初始化Bean"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring杂项.html"],["title","spring杂项.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","spring#注解与$的区别"],["body","\n\n"],["body","#{} springEL表达式"],["body","\n"],["body","主要有以下作用\n\n"],["body","获取bean的某些属性 @Value(\"#dataSource.url\")"],["body","\n"],["body","调用bean的某个方法"],["body","\n"],["body","表示常量 @Value(\"#{1}\") @Value(\"#{'springEL'}\")"],["body","\n\n"],["body","\n"],["body","${} 可以获取对应属性文件的值"],["body","\n\n"],["h1","spring区分开发与生产配置文件"],["body","\n\n"],["body","在spring配置文件中配置"],["body","\n\n"],["body","<beans profile=\"local\">\n\t<context:property-placeholder location=\"classpath:/config/\" />\n</beans>\n\n<beans profile=\"test\">\n\t<context:property-placeholder location=\"classpath:/config/\" />\n</beans>\n"],["body","\n\n"],["body","在web.xml配置默认值"],["body","\n\n"],["body","<context-parm>\n\t<parm-name>spring.profiles.default</parm-name>\n    <parm-value>local</parm-value>\n</context-parm>\n"],["body","\n\n"],["body","启动时指定配置"],["body","\n\n"],["body","JAVA_OPTIONS=\"-Dspring.profiles.active=test\"\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/4.SpringBean的生命周期.html"],["title","SpringBean的生命周期.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","示意图"],["body","\n"],["body","\n"],["h1","生命周期的四个阶段"],["body","\n\n"],["body","实例化（Instantiation）"],["body","\n"],["body","属性赋值（Populate）"],["body","\n"],["body","初始化（Initialization）"],["body","\n"],["body","销毁（Destruction）"],["body","\n\n"],["body","\n\n"],["body","实例化：第 1 步，实例化一个 bean 对象；"],["body","\n"],["body","属性赋值：第 2 步，为 bean 设置相关属性和依赖；"],["body","\n"],["body","初始化：第 3~7 步，步骤较多，其中第 5、6 步为初始化操作，第 3、4 步为在初始化前执行，第 7 步在初始化后执行，该阶段结束，才能被用户使用；"],["body","\n"],["body","销毁：第 8~10步，第8步不是真正意义上的销毁（还没使用呢），而是先在使用前注册了销毁的相关调用接口，为了后面第9、10步真正销毁 bean 时再执行相应的方法。"],["body","\n\n"],["h1","Aware 接口"],["body","\n"],["body","若 Spring 检测到 bean 实现了 Aware 接口，则会为其注入相应的依赖。所以通过让bean 实现 Aware 接口，则能在 bean 中获得相应的 Spring 容器资源。"],["body","\n"],["body","Spring 中提供的 Aware 接口有："],["body","\n\n"],["body","BeanNameAware：注入当前 bean 对应 beanName；"],["body","\n"],["body","BeanClassLoaderAware：注入加载当前 bean 的 ClassLoader；"],["body","\n"],["body","BeanFactoryAware：注入 当前BeanFactory容器 的引用。"],["body","\n\n"],["h1","doCreateBean"],["body","\n"],["body","\n"],["body","生命周期方法"],["body","\n"],["body","\n\n"],["body","实例化Bean"],["body","\n"],["body","设置bean属性"],["body","\n"],["body","初始化bean"],["body","\n"],["body","销毁bean回调（注册回调）"],["body","\n\n"],["body","protected Object doCreateBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args)\n      throws BeanCreationException {\n\n   // Instantiate the bean.\n   BeanWrapper instanceWrapper = null;\n   if (mbd.isSingleton()) {\n      instanceWrapper = this.factoryBeanInstanceCache.remove(beanName);\n   }\n   //实例化bean\n   if (instanceWrapper == null) {\n      instanceWrapper = createBeanInstance(beanName, mbd, args);\n   }\n   Object bean = instanceWrapper.getWrappedInstance();\n   Class<?> beanType = instanceWrapper.getWrappedClass();\n   if (beanType != NullBean.class) {\n      mbd.resolvedTargetType = beanType;\n   }\n\n   // Allow post-processors to modify the merged bean definition.\n   synchronized (mbd.postProcessingLock) {\n      if (!mbd.postProcessed) {\n         try {\n            applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);\n         }\n         catch (Throwable ex) {\n            throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                  \"Post-processing of merged bean definition failed\", ex);\n         }\n         mbd.postProcessed = true;\n      }\n   }\n\n   // Eagerly cache singletons to be able to resolve circular references\n   // even when triggered by lifecycle interfaces like BeanFactoryAware.\n   boolean earlySingletonExposure = (mbd.isSingleton() && this.allowCircularReferences &&\n         isSingletonCurrentlyInCreation(beanName));\n   if (earlySingletonExposure) {\n      if (logger.isTraceEnabled()) {\n         logger.trace(\"Eagerly caching bean '\" + beanName +\n               \"' to allow for resolving potential circular references\");\n      }\n      addSingletonFactory(beanName, () -> getEarlyBeanReference(beanName, mbd, bean));\n   }\n\n   // Initialize the bean instance.\n   Object exposedObject = bean;\n   try {\n       //赋值属性，注入属性\n      populateBean(beanName, mbd, instanceWrapper);\n      // 初始化bean\n      exposedObject = initializeBean(beanName, exposedObject, mbd);\n   }\n   catch (Throwable ex) {\n      if (ex instanceof BeanCreationException && beanName.equals(((BeanCreationException) ex).getBeanName())) {\n         throw (BeanCreationException) ex;\n      }\n      else {\n         throw new BeanCreationException(\n               mbd.getResourceDescription(), beanName, \"Initialization of bean failed\", ex);\n      }\n   }\n\n   if (earlySingletonExposure) {\n      Object earlySingletonReference = getSingleton(beanName, false);\n      if (earlySingletonReference != null) {\n         if (exposedObject == bean) {\n            exposedObject = earlySingletonReference;\n         }\n         else if (!this.allowRawInjectionDespiteWrapping && hasDependentBean(beanName)) {\n            String[] dependentBeans = getDependentBeans(beanName);\n            Set<String> actualDependentBeans = new LinkedHashSet<>(dependentBeans.length);\n            for (String dependentBean : dependentBeans) {\n               if (!removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) {\n                  actualDependentBeans.add(dependentBean);\n               }\n            }\n            if (!actualDependentBeans.isEmpty()) {\n               throw new BeanCurrentlyInCreationException(beanName,\n                     \"Bean with name '\" + beanName + \"' has been injected into other beans [\" +\n                     StringUtils.collectionToCommaDelimitedString(actualDependentBeans) +\n                     \"] in its raw version as part of a circular reference, but has eventually been \" +\n                     \"wrapped. This means that said other beans do not use the final version of the \" +\n                     \"bean. This is often the result of over-eager type matching - consider using \" +\n                     \"'getBeanNamesForType' with the 'allowEagerInit' flag turned off, for example.\");\n            }\n         }\n      }\n   }\n\n   // Register bean as disposable.\n   try { //注册销毁bean的回调\n      registerDisposableBeanIfNecessary(beanName, bean, mbd);\n   }\n   catch (BeanDefinitionValidationException ex) {\n      throw new BeanCreationException(\n            mbd.getResourceDescription(), beanName, \"Invalid destruction signature\", ex);\n   }\n\n   return exposedObject;\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/编程式注入类/AOP代理相关.html"],["title","AOP代理相关.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n"],["body","基于代理的 自动注册类 都继承于 AdviceModeImportSelector 抽象类"],["body","\n"],["h1","源码"],["body","\n"],["body","public final String[] selectImports(AnnotationMetadata importingClassMetadata) {\n    //获取实际泛型类\n   Class<?> annType = GenericTypeResolver.resolveTypeArgument(getClass(), AdviceModeImportSelector.class);\n   Assert.state(annType != null, \"Unresolvable type argument for AdviceModeImportSelector\");\n\n    //获取泛型属性对象\n   AnnotationAttributes attributes = AnnotationConfigUtils.attributesFor(importingClassMetadata, annType);\n   if (attributes == null) {\n      throw new IllegalArgumentException(String.format(\n            \"@%s is not present on importing class '%s' as expected\",\n            annType.getSimpleName(), importingClassMetadata.getClassName()));\n   }\n\t//获取代理模式\n   AdviceMode adviceMode = attributes.getEnum(getAdviceModeAttributeName());\n    //子类根据不同代理模式：返回不同注入类\n   String[] imports = selectImports(adviceMode);\n   if (imports == null) {\n      throw new IllegalArgumentException(\"Unknown AdviceMode: \" + adviceMode);\n   }\n   return imports;\n}\n"],["body","\n"],["h1","启用异步调用"],["body","\n"],["body","类选中逻辑"],["body","\n"],["body","public String[] selectImports(AdviceMode adviceMode) {\n   switch (adviceMode) {\n      case PROXY:\n           //返回 异步配置Configuration类\n         return new String[] {ProxyAsyncConfiguration.class.getName()};\n      case ASPECTJ:\n           //返回AspectJ代理类\n         return new String[] {ASYNC_EXECUTION_ASPECT_CONFIGURATION_CLASS_NAME};\n      default:\n         return null;\n   }\n}\n"],["body","\n"],["body","类注入逻辑"],["body","\n"],["body","//ProxyAsyncConfiguration\n@Configuration\n@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\npublic class ProxyAsyncConfiguration extends AbstractAsyncConfiguration {\n\n\t@Bean(name = TaskManagementConfigUtils.ASYNC_ANNOTATION_PROCESSOR_BEAN_NAME)\n\t@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n    //注入 异步注解后置处理器\n\tpublic AsyncAnnotationBeanPostProcessor asyncAdvisor() {\n\t\tAssert.notNull(this.enableAsync, \"@EnableAsync annotation metadata was not injected\");\n\t\tAsyncAnnotationBeanPostProcessor bpp = new AsyncAnnotationBeanPostProcessor();\n\t\tbpp.configure(this.executor, this.exceptionHandler);\n\t\tClass<? extends Annotation> customAsyncAnnotation = this.enableAsync.getClass(\"annotation\");\n\t\tif (customAsyncAnnotation != AnnotationUtils.getDefaultValue(EnableAsync.class, \"annotation\")) {\n\t\t\tbpp.setAsyncAnnotationType(customAsyncAnnotation);\n\t\t}\n\t\tbpp.setProxyTargetClass(this.enableAsync.getBoolean(\"proxyTargetClass\"));\n\t\tbpp.setOrder(this.enableAsync.<Integer>getNumber(\"order\"));\n\t\treturn bpp;\n\t}\n}\n\n//抽象类：\n@Configuration\npublic abstract class AbstractAsyncConfiguration implements ImportAware {\n\n\t@Nullable\n\tprotected AnnotationAttributes enableAsync;\n\n\t@Nullable\n\tprotected Supplier<Executor> executor;\n\n\t@Nullable\n\tprotected Supplier<AsyncUncaughtExceptionHandler> exceptionHandler;\n\n\n\t@Override\n\tpublic void setImportMetadata(AnnotationMetadata importMetadata) {\n\t\tthis.enableAsync = AnnotationAttributes.fromMap(\n\t\t\t\timportMetadata.getAnnotationAttributes(EnableAsync.class.getName(), false));\n\t\tif (this.enableAsync == null) {\n\t\t\tthrow new IllegalArgumentException(\n\t\t\t\t\t\"@EnableAsync is not present on importing class \" + importMetadata.getClassName());\n\t\t}\n\t}\n\n\t/**\n\t * Collect any {@link AsyncConfigurer} beans through autowiring.\n\t */\n\t@Autowired(required = false)\n    //注入异步配置\n\tvoid setConfigurers(Collection<AsyncConfigurer> configurers) {\n\t\tif (CollectionUtils.isEmpty(configurers)) {\n\t\t\treturn;\n\t\t}\n\t\tif (configurers.size() > 1) {\n\t\t\tthrow new IllegalStateException(\"Only one AsyncConfigurer may exist\");\n\t\t}\n\t\tAsyncConfigurer configurer = configurers.iterator().next();\n\t\tthis.executor = configurer::getAsyncExecutor;\n\t\tthis.exceptionHandler = configurer::getAsyncUncaughtExceptionHandler;\n\t}\n}\n"],["body","\n"],["h1","启用缓存"],["body","\n"],["body","类选中逻辑"],["body","\n"],["body","//org.springframework.cache.annotation.CachingConfigurationSelector\n\n\t@Override\n\tpublic String[] selectImports(AdviceMode adviceMode) {\n\t\tswitch (adviceMode) {\n\t\t\tcase PROXY: //基于spring的代理\n\t\t\t\treturn getProxyImports();\n\t\t\tcase ASPECTJ://基于aspectj的代理\n\t\t\t\treturn getAspectJImports();\n\t\t\tdefault:\n\t\t\t\treturn null;\n\t\t}\n\t}\n\n//spring代理\n\tprivate String[] getProxyImports() {\n\t\tList<String> result = new ArrayList<>(3);\n        //注入 自动代理注册器：注册自动代理的类 org.springframework.aop.framework.autoproxy.InfrastructureAdvisorAutoProxyCreator\n\t\tresult.add(AutoProxyRegistrar.class.getName());\n        //注入缓存代理配置\n\t\tresult.add(ProxyCachingConfiguration.class.getName());\n\t\tif (jsr107Present && jcacheImplPresent) {\n\t\t\tresult.add(PROXY_JCACHE_CONFIGURATION_CLASS);\n\t\t}\n\t\treturn StringUtils.toStringArray(result);\n\t}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/编程式注入类/README.html"],["title","编程式注入类 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n"],["body","Enable注解原理 是通过 @Import 或者  ImportSelector 实现的自动注入相关类"],["body","\n"],["h1","@Import注解"],["body","\n\n"],["body","\n"],["body","@Import 是Spring基于 Java 注解配置的主要组成部分"],["body","\n"],["body","\n"],["body","\n"],["body","@Import注解提供了@Bean注解的功能，同时还有原来Spring基于 xml 配置文件里的 <import>  标签组织多个分散的xml文件的功能，当然在这里是组织多个分散的@Configuration的类"],["body","\n"],["body","\n\n"],["h1","@Import注解的功能"],["body","\n"],["headingLink","引入其他的configuration"],["heading","引入其他的@Configuration"],["body","\n"],["body","package com.test\n//载入ConfigB类：且ConfigB优先于  ConfigA\n@Import(ConfigB.class)\n@Configuration\nclass ConfigA {\n    @Bean\n    @ConditionalOnMissingBean\n    public ServiceInterface getServiceA() {\n        return new ServiceA();\n    }\n}\n\n@Configuration\nclass ConfigB {\n    @Bean\n    @ConditionalOnMissingBean\n    public ServiceInterface getServiceB() {\n        return new ServiceB();\n    }\n}\n"],["body","\n"],["headingLink","直接初始化其他类的bean"],["heading","直接初始化其他类的Bean"],["body","\n"],["body","@Import可以直接指定实体类，加载这个类定义到context中"],["body","\n"],["body","//就会生成ServiceB的Bean到容器上下文中\n@Import(ServiceB.class)\n@Configuration\nclass ConfigA {\n    @Bean\n    @ConditionalOnMissingBean\n    public ServiceInterface getServiceA() {\n        return new ServiceA();\n    }\n}\n"],["body","\n"],["headingLink","个性化加载"],["heading","个性化加载"],["body","\n"],["body","指定实现ImportSelector(以及DefferredServiceImportSelector)的类，用于个性化加载"],["body","\n"],["body","Enable就是利用如此 特性实现 的"],["body","\n"],["body","package com.test;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Target(ElementType.TYPE)\n@Import(ServiceImportSelector.class)\n@interface EnableService {\n    String name();\n}\n//返回类的全限定类名\nclass ServiceImportSelector implements ImportSelector {\n    @Override\n    public String[] selectImports(AnnotationMetadata importingClassMetadata) {\n        //这里的importingClassMetadata针对的是使用@EnableService的非注解类\n        //因为`AnnotationMetadata`是`Import`注解所在的类属性，如果所在类是注解类，则延伸至应用这个注解类的非注解类为止\n        Map<String , Object> map = importingClassMetadata.getAnnotationAttributes(EnableService.class.getName(), true);\n        String name = (String) map.get(\"name\");\n        if (Objects.equals(name, \"B\")) {\n            return new String[]{\"com.test.ConfigB\"};\n        }\n        return new String[0];\n    }\n}\n\npackage com.test;\n@EnableService(name = \"B\")\n@Configuration\nclass ConfigA {\n    @Bean\n    @ConditionalOnMissingBean\n    public ServiceInterface getServiceA() {\n        return new ServiceA();\n    }\n}\n"],["body","\n"],["body","DeferredImportSelector  与selector的区别就是 是否延迟于当前注解类加载"],["body","\n"],["headingLink","个性化定制bean"],["heading","个性化定制bean"],["body","\n"],["body","\n"],["body","手动构建bean定义"],["body","\n"],["body","\n"],["body","package com.test;\n\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Target(ElementType.TYPE)\n@Import(ServiceImportBeanDefinitionRegistrar.class)\n@interface EnableService {\n    String name();\n}\n\nclass ServiceImportBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar {\n    @Override\n    public void registerBeanDefinitions(AnnotationMetadata importingClassMetadata, BeanDefinitionRegistry registry) {\n        Map<String, Object> map = importingClassMetadata.getAnnotationAttributes(EnableService.class.getName(), true);\n        String name = (String) map.get(\"name\");\n        BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder.rootBeanDefinition(ServiceC.class)\n                //增加构造参数\n                .addConstructorArgValue(name);\n        //注册Bean\n        registry.registerBeanDefinition(\"serviceC\", beanDefinitionBuilder.getBeanDefinition());\n    }\n}\n"],["body","\n"],["h1","源码分析"],["body","\n"],["body","加载解析@Import注解位于BeanFactoryPostProcessor处理的时候："],["body","\n"],["body","调用链"],["body","\n"],["body","AbstractApplicationContext.refresh\n-->\ninvokeBeanFactoryPostProcessors(beanFactory)\n-->\nPostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(beanFactory, getBeanFactoryPostProcessors());\n-->\n(ConfigurationClassPostProcessor)registryProcessor.postProcessBeanDefinitionRegistry(registry);\n-->\nprocessConfigBeanDefinitions(registry)\n"],["body","\n"],["body","核心处理流程"],["body","\n"],["body","public void processConfigBeanDefinitions(BeanDefinitionRegistry registry) {\n   List<BeanDefinitionHolder> configCandidates = new ArrayList<>();\n   String[] candidateNames = registry.getBeanDefinitionNames();\n\n   for (String beanName : candidateNames) {\n      BeanDefinition beanDef = registry.getBeanDefinition(beanName);\n      if (beanDef.getAttribute(ConfigurationClassUtils.CONFIGURATION_CLASS_ATTRIBUTE) != null) {\n         if (logger.isDebugEnabled()) {\n            logger.debug(\"Bean definition has already been processed as a configuration class: \" + beanDef);\n         }\n      }\n      else if (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, this.metadataReaderFactory)) {\n         configCandidates.add(new BeanDefinitionHolder(beanDef, beanName));\n      }\n   }\n\n   // Return immediately if no @Configuration classes were found\n   if (configCandidates.isEmpty()) {\n      return;\n   }\n    //根据@Order注解，排序所有的@Configuration类\n   // Sort by previously determined @Order value, if applicable\n   configCandidates.sort((bd1, bd2) -> {\n      int i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());\n      int i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());\n      return Integer.compare(i1, i2);\n   });\n\n   // Detect any custom bean name generation strategy supplied through the enclosing application context\n   SingletonBeanRegistry sbr = null;\n   if (registry instanceof SingletonBeanRegistry) {\n      sbr = (SingletonBeanRegistry) registry;\n      if (!this.localBeanNameGeneratorSet) {\n         BeanNameGenerator generator = (BeanNameGenerator) sbr.getSingleton(\n               AnnotationConfigUtils.CONFIGURATION_BEAN_NAME_GENERATOR);\n         if (generator != null) {\n            this.componentScanBeanNameGenerator = generator;\n            this.importBeanNameGenerator = generator;\n         }\n      }\n   }\n\n   if (this.environment == null) {\n      this.environment = new StandardEnvironment();\n   }\n\n    //创建ConfigurationClassParser解析@Configuration类\n   // Parse each @Configuration class\n   ConfigurationClassParser parser = new ConfigurationClassParser(\n         this.metadataReaderFactory, this.problemReporter, this.environment,\n         this.resourceLoader, this.componentScanBeanNameGenerator, registry);\n\n   Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates);\n   Set<ConfigurationClass> alreadyParsed = new HashSet<>(configCandidates.size());\n   do {\n      parser.parse(candidates);\n      parser.validate();\n\n      Set<ConfigurationClass> configClasses = new LinkedHashSet<>(parser.getConfigurationClasses());\n      configClasses.removeAll(alreadyParsed);\n\n      // Read the model and create bean definitions based on its content\n      if (this.reader == null) {\n         this.reader = new ConfigurationClassBeanDefinitionReader(\n               registry, this.sourceExtractor, this.resourceLoader, this.environment,\n               this.importBeanNameGenerator, parser.getImportRegistry());\n      }\n      this.reader.loadBeanDefinitions(configClasses);\n      alreadyParsed.addAll(configClasses);\n\n      candidates.clear();\n      if (registry.getBeanDefinitionCount() > candidateNames.length) {\n         String[] newCandidateNames = registry.getBeanDefinitionNames();\n         Set<String> oldCandidateNames = new HashSet<>(Arrays.asList(candidateNames));\n         Set<String> alreadyParsedClasses = new HashSet<>();\n         for (ConfigurationClass configurationClass : alreadyParsed) {\n            alreadyParsedClasses.add(configurationClass.getMetadata().getClassName());\n         }\n         for (String candidateName : newCandidateNames) {\n            if (!oldCandidateNames.contains(candidateName)) {\n               BeanDefinition bd = registry.getBeanDefinition(candidateName);\n               if (ConfigurationClassUtils.checkConfigurationClassCandidate(bd, this.metadataReaderFactory) &&\n                     !alreadyParsedClasses.contains(bd.getBeanClassName())) {\n                  candidates.add(new BeanDefinitionHolder(bd, candidateName));\n               }\n            }\n         }\n         candidateNames = newCandidateNames;\n      }\n   }\n   while (!candidates.isEmpty());\n\n   // Register the ImportRegistry as a bean in order to support ImportAware @Configuration classes\n   if (sbr != null && !sbr.containsSingleton(IMPORT_REGISTRY_BEAN_NAME)) {\n      sbr.registerSingleton(IMPORT_REGISTRY_BEAN_NAME, parser.getImportRegistry());\n   }\n\n   if (this.metadataReaderFactory instanceof CachingMetadataReaderFactory) {\n      // Clear cache in externally provided MetadataReaderFactory; this is a no-op\n      // for a shared cache since it'll be cleared by the ApplicationContext.\n      ((CachingMetadataReaderFactory) this.metadataReaderFactory).clearCache();\n   }\n}\n"],["body","\n"],["h1","@ImportAware"],["body","\n\n"],["body","通过 Import 接口 注入的类 都可以接收到 注解的信息 AnnotationMetadata"],["body","\n"],["body","Import注入 的Configuration 后产生的类无法 注入ImportAware，只能是 一手类"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/ClassPathScanningCandidateComponentProvider.html"],["title","ClassPathScanningCandidateComponentProvider.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","扫描类路径"],["heading","扫描类路径"],["body","\n"],["body","ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\nprovider.addIncludeFilter(new AssignableTypeFilter(MyClass.class));\n\n// scan in org.example.package\nSet<BeanDefinition> components = provider.findCandidateComponents(\"org/example/package\");\nfor (BeanDefinition component : components)\n{\n    Class cls = Class.forName(component.getBeanClassName());\n    // use class cls found\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-aop/SpringAop-涉及到的类.html"],["title","SpringAop-涉及到的类.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","ProxyConfig"],["body","\n"],["body","一个代理对象的配置信息，包括代理的各种属性，如基于接口还是基于类构造代理。"],["body","\n"],["headingLink","optimize"],["heading","optimize"],["body","\n"],["body","设置代理 是否应该执行 积极的优化"],["body","\n"],["body","The exact meaning of \"aggressive optimizations\" will differ between proxies, but there is usually some tradeoff. Default is \"false\"."],["body","\n"],["body","“积极优化”的确切含义因代理而异，但通常会有一些权衡。默认为 false"],["body","\n"],["body","例如，优化通常意味着在创建代理后通知更改不会生效,因此，默认情况下禁用优化。"],["body","\n"],["body","如果其他设置阻止优化，则可以忽略“true”的优化值"],["body","\n"],["body","An optimize value of \"true\" may be ignored if other settings preclude optimization: for example, 如果“exposeProxy”设置为“true”与 optimize  不兼容。"],["body","\n"],["headingLink","opaque"],["heading","opaque"],["body","\n"],["body","设置是否应防止此配置创建的代理被强制转换为 Advised 以查询代理状态"],["body","\n"],["body","默认是false 意味着任何AOP 代理 能够被转换成 Advised"],["body","\n"],["headingLink","proxytargetclass"],["heading","proxyTargetClass"],["body","\n"],["body","设置是否直接代理目标类，而不是只代理特定的接口。默认为“false”。"],["body","\n"],["body","设置为“true”以强制代理 TargetSource 的公开目标类。"],["body","\n"],["body","如果该目标类是一个接口，则会为给定的接口创建一个 JDK 代理"],["body","\n"],["body","如果该目标类是任何其他类，则将为给定类创建 CGLIB 代理。"],["body","\n"],["body","根据具体代理工厂的配置，如果没有指定接口（并且没有激活接口自动检测），也将应用代理目标类行为。"],["body","\n"],["headingLink","exposeproxy"],["heading","exposeProxy"],["body","\n"],["body","Set whether the proxy should be exposed by the AOP framework as a ThreadLocal for retrieval via the AopContext class."],["body","\n"],["body","设置代理是否应由 AOP 框架公开为 ThreadLocal 以通过 AopContext 类进行检索。"],["body","\n"],["body","如果一个被通知的对象需要对自己调用另一个被通知的方法，这很有用。"],["body","\n"],["body","(If it uses this, the invocation will not be advised)."],["body","\n"],["body","默认为“false”，以避免不必要的额外拦截"],["body","\n"],["body","这意味着不保证 AopContext 访问将在建议对象的任何方法中一致地工作。"],["body","\n"],["headingLink","frozen"],["heading","frozen"],["body","\n"],["body","设置是否应冻结此配置。"],["body","\n"],["body","当配置被冻结时，不能进行任何建议更改"],["body","\n"],["body","这对于优化很有用，当我们不希望调用者在转换为 Advised 后能够操作配置时很有用。"],["body","\n"],["h1","ProxyProcessorSupport"],["body","\n"],["body","\n"],["body","继承于 ProxyConfig"],["body","\n"],["body","\n"],["body","具有代理处理器通用功能的基类 特别是 "],["body","\n\n"],["body","classLoader管理"],["body","\n"],["body","类的接口查找算法"],["body","\n\n"],["h1","AdvisorAdapter"],["body","\n"],["body","实现对象可以从自定义通知类型创建 AOP Alliance  拦截器，使这些通知类型能够在 Spring AOP 框架中使用，该框架在幕后使用拦截。"],["body","\n"],["body","大多数 Spring 用户不需要实现这个接口；仅当您需要向 Spring 引入更多 Advisor 或 Advice 类型时才这样做。"],["body","\n"],["body","// 是否支持Advice\nboolean supportsAdvice(Advice advice);\n// 返回一个 AOP Alliance MethodInterceptor，将给定建议的行为暴露给基于拦截的 AOP 框架。不要担心Advisor 中包含的任何切入点； AOP 框架将负责检查切入点。\nMethodInterceptor getInterceptor(Advisor advisor);\n"],["body","\n"],["h1","AdvisorAdapterRegistry"],["body","\n"],["body","\n"],["body","advisorAdapter 注册器接口"],["body","\n"],["body","\n"],["h1","AbstractAutoProxyCreator"],["body","\n"],["body","使用 AOP 代理包装每个符合条件的 bean，在调用 bean 本身之前委托给指定的拦截器。"],["body","\n"],["body","此类区分“通用”拦截器（为它创建的所有代理共享），以及“特定”拦截器（每个 bean 实例唯一）"],["body","\n"],["body","他们不需要任何通用的拦截器。如果有，则使用interceptorNames 属性设置它们"],["body","\n"],["body","与 org.springframework.aop.framework.ProxyFactoryBean 一样，使用当前工厂中的拦截器名称而不是 bean 引用来允许正确处理原型顾问和拦截器：例如，支持有状态的混合。"],["body","\n"],["body","interceptorNames条目支持任何advice类型。"],["body","\n"],["body","如果有大量 bean 需要用类似的代理包装，即委托给相同的拦截器，这种自动代理特别有用委托给相同的拦截器。"],["body","\n"],["body","代替 x 个目标 bean 的 x 个重复代理定义，您可以向 bean 工厂注册一个这样的后处理器以实现相同的效果。"],["body","\n"],["body","子类可以应用任何策略来决定是否要代理 bean，例如按类型、按名称、按定义详细信息等。"],["body","\n"],["body","它们还可以返回应仅应用于特定 bean 实例的其他拦截器"],["body","\n"],["body","一个简单的具体实现是 BeanNameAutoProxyCreator，它通过给定的名称识别要代理的 bean。"],["body","\n"],["body","可以使用任意数量的 TargetSourceCreator 实现来创建自定义目标源"],["body","\n"],["body","例如，池化原型对象。"],["body","\n"],["body","即使没有   advice，只要 TargetSourceCreator 指定自定义 TargetSource，就会发生自动代理。"],["body","\n"],["body","如果没有设置 TargetSourceCreators，或者没有匹配项，默认情况下将使用 SingletonTargetSource 来包装目标 bean 实例。"],["body","\n"],["h1","AopProxyFactory"],["body","\n"],["body","AopProxy代理工厂类，用于生成代理对象AopProxy"],["body","\n"],["h1","AopProxy"],["body","\n"],["body","代表一个AopProxy代理对象，可以通过这个对象构造代理对象实例。"],["body","\n"],["body","public interface AopProxy {\n Object getProxy();\n Object getProxy(ClassLoader classLoader);\n}\n"],["body","\n"],["h1","Advised接口"],["body","\n"],["body","代表被Advice增强的对象，包括添加advisor的方法、添加advice等的方法。"],["body","\n"],["h1","AdvisedSupport类"],["body","\n"],["body","对Advised的构建提供支持，Advised的实现类以及ProxyConfig的子类。"],["body","\n\n"],["body","\n"],["body","提供Advisor的 增删改查"],["body","\n"],["body","\n"],["body","\n"],["body","提供 AdvisorChainFactory 从 Advisor中获取所有 Advice"],["body","\n"],["body","\n\n"],["body","AdvisedSupport对象的作用"],["body","\n\n"],["body","\n"],["body","获取拦截器"],["body","\n"],["body","\n"],["body","\n"],["body","提供targetSource"],["body","\n"],["body","\n"],["body","\n"],["body","提供Advisor的憎删改查"],["body","\n"],["body","\n"],["body","\n"],["body","代理对象的配置"],["body","\n"],["body","\n"],["body","\n"],["body","透明与不透明"],["body","\n"],["body","\n"],["body","\n"],["body","暴露代理"],["body","\n"],["body","\n\n"],["h1","ProxyCreatorSupport"],["body","\n"],["body","AdvisedSupport的子类，创建代理对象的支持类，内部包含AopProxyFactory工厂成员，可直接使用工厂成员创建Proxy。"],["body","\n"],["h1","ProxyFactory类"],["body","\n"],["body","ProxyCreatorSupport的子类，用于生成代理对象实例的工厂类"],["body","\n"],["body","相比 ProxyCreatorSupport 提供了 getProxy 的方法"],["body","\n"],["h1","Advisor接口"],["body","\n"],["body","代表一个增强器提供者的对象，内部包含getAdvice方法获取增强器。"],["body","\n"],["h1","AdvisorChainFactory"],["body","\n"],["body","获取增强器链的工厂接口。提供方法返回所有增强器，以数组返回。"],["body","\n"],["h1","Pointcut接口"],["body","\n"],["body","切入点，用于匹配类与方法，满足切入点的条件是才插入advice。相关接口：ClassFilter、MethodMatcher。"],["body","\n"],["h1","AnnotationMatchingPointcut"],["body","\n"],["body","基于注解的PointCut"],["body","\n"],["body","有三个成员变量"],["body","\n\n"],["body","基于类的注解 Class：用于类匹配"],["body","\n"],["body","基于方法的注解 Class：用于方法匹配"],["body","\n"],["body","是由启用继承"],["body","\n\n"],["h1","AbstractBeanFactoryPointcutAdvisor"],["body","\n"],["body","基于Beanfactory 的 PointcutAdvisor,从 Beanfactory获取Advice"],["body","\n"],["body","成员变量"],["body","\n"],["body","adviceBeanName"],["body","\n"],["body","beanFactory"],["body","\n"],["body","advice"],["body","\n"],["body","public Advice getAdvice() {\n   Advice advice = this.advice;\n   if (advice != null) {\n      return advice;\n   }\n\n   Assert.state(this.adviceBeanName != null, \"'adviceBeanName' must be specified\");\n   Assert.state(this.beanFactory != null, \"BeanFactory must be set to resolve 'adviceBeanName'\");\n\t//单例的化从 Bean工厂获取后 缓存\n   if (this.beanFactory.isSingleton(this.adviceBeanName)) {\n      // Rely on singleton semantics provided by the factory.\n      advice = this.beanFactory.getBean(this.adviceBeanName, Advice.class);\n      this.advice = advice;\n      return advice;\n   }\n   else {\n      // No singleton guarantees from the factory -> let's lock locally but\n      // reuse the factory's singleton lock, just in case a lazy dependency\n      // of our advice bean happens to trigger the singleton lock implicitly...\n       //懒加载、加锁\n      synchronized (this.adviceMonitor) {\n         advice = this.advice;\n         if (advice == null) {\n            advice = this.beanFactory.getBean(this.adviceBeanName, Advice.class);\n            this.advice = advice;\n         }\n         return advice;\n      }\n   }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-aop/SpringAop-cglib动态代理.html"],["title","SpringAop-cglib动态代理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","创建代理"],["body","\n"],["headingLink","核心源代码"],["heading","核心源代码"],["body","\n"],["body","public Object getProxy(@Nullable ClassLoader classLoader) {\n\n   try {\n      Class<?> rootClass = this.advised.getTargetClass();\n      Assert.state(rootClass != null, \"Target class must be available for creating a CGLIB proxy\");\n\n      Class<?> proxySuperClass = rootClass;\n      //如果是代理类\n      if (rootClass.getName().contains(ClassUtils.CGLIB_CLASS_SEPARATOR)) {\n          //获取父类\n         proxySuperClass = rootClass.getSuperclass();\n         Class<?>[] additionalInterfaces = rootClass.getInterfaces();\n         for (Class<?> additionalInterface : additionalInterfaces) {\n            this.advised.addInterface(additionalInterface);\n         }\n      }\n\n      // Validate the class, writing log messages as necessary.\n      validateClassIfNecessary(proxySuperClass, classLoader);\n\n      // Configure CGLIB Enhancer...\n      Enhancer enhancer = createEnhancer();\n      if (classLoader != null) {\n         enhancer.setClassLoader(classLoader);\n         if (classLoader instanceof SmartClassLoader &&\n               ((SmartClassLoader) classLoader).isClassReloadable(proxySuperClass)) {\n            enhancer.setUseCache(false);\n         }\n      }\n      //设置代理目标类\n      enhancer.setSuperclass(proxySuperClass);\n      //设置接口\n      enhancer.setInterfaces(AopProxyUtils.completeProxiedInterfaces(this.advised));\n      enhancer.setNamingPolicy(SpringNamingPolicy.INSTANCE);\n      enhancer.setStrategy(new ClassLoaderAwareGeneratorStrategy(classLoader));\n       //获取回调\n      Callback[] callbacks = getCallbacks(rootClass);\n      Class<?>[] types = new Class<?>[callbacks.length];\n      //缓存回调类\n      for (int x = 0; x < types.length; x++) {\n         types[x] = callbacks[x].getClass();\n      }\n       //设置 callbackFilter\n      // fixedInterceptorMap only populated at this point, after getCallbacks call above\n      enhancer.setCallbackFilter(new ProxyCallbackFilter(\n            this.advised.getConfigurationOnlyCopy(), this.fixedInterceptorMap, this.fixedInterceptorOffset));\n       //设置回调的类型\n      enhancer.setCallbackTypes(types);\n       \n      // Generate the proxy class and create a proxy instance.\n      return createProxyClassAndInstance(enhancer, callbacks);\n   }\n   catch (CodeGenerationException | IllegalArgumentException ex) {\n      throw new AopConfigException(\"Could not generate CGLIB subclass of \" + this.advised.getTargetClass() +\n            \": Common causes of this problem include using a final class or a non-visible class\",\n            ex);\n   }\n   catch (Throwable ex) {\n      // TargetSource.getTarget() failed\n      throw new AopConfigException(\"Unexpected AOP exception\", ex);\n   }\n}\n"],["body","\n"],["headingLink","获取回调"],["heading","获取回调"],["body","\n"],["body","private Callback[] getCallbacks(Class<?> rootClass) throws Exception {\n   // Parameters used for optimization choices...\n    //是否暴露代理类\n   boolean exposeProxy = this.advised.isExposeProxy();\n    //是否冻结配置\n   boolean isFrozen = this.advised.isFrozen();\n    //对象是否是可变的\n   boolean isStatic = this.advised.getTargetSource().isStatic();\n\n    \n   // Choose an \"aop\" interceptor (used for AOP calls). aop链式调用\n   Callback aopInterceptor = new DynamicAdvisedInterceptor(this.advised);\n\n   // Choose a \"straight to target\" interceptor. (used for calls that are\n   // unadvised but can return this). May be required to expose the proxy.\n   Callback targetInterceptor; //直接调用目标方法\n   if (exposeProxy) {\n      targetInterceptor = (isStatic ?\n            new StaticUnadvisedExposedInterceptor(this.advised.getTargetSource().getTarget()) :\n            new DynamicUnadvisedExposedInterceptor(this.advised.getTargetSource()));\n   }\n   else {\n      targetInterceptor = (isStatic ?\n            new StaticUnadvisedInterceptor(this.advised.getTargetSource().getTarget()) :\n            new DynamicUnadvisedInterceptor(this.advised.getTargetSource()));\n   }\n\n   // Choose a \"direct to target\" dispatcher (used for\n   // unadvised calls to static targets that cannot return this). 直接调用实际 Target的方法\n   Callback targetDispatcher = (isStatic ?\n         new StaticDispatcher(this.advised.getTargetSource().getTarget()) : new SerializableNoOp());\n\n   Callback[] mainCallbacks = new Callback[] {\n         aopInterceptor,  // for normal advice  普通AOP调用  0\n         targetInterceptor,  // invoke target without considering advice, if optimized  调用  1\n         new SerializableNoOp(),  // no override for methods mapped to this 调用父类的方法   2\n         targetDispatcher,//直接 调用target的方法  3\n       this.advisedDispatcher, //调用 advised对象中的方法 4\n         new EqualsInterceptor(this.advised),  //equals  5\n         new HashCodeInterceptor(this.advised) //hashcode  6\n   };\n\n   Callback[] callbacks;\n\n   // If the target is a static one and the advice chain is frozen,\n   // then we can make some optimizations by sending the AOP calls\n   // direct to the target using the fixed chain for that method.\n   if (isStatic && isFrozen) {\n       //获取所有 公共方法，每个方法创建FixedChainStaticTargetInterceptor拦截器\n      Method[] methods = rootClass.getMethods();\n      Callback[] fixedCallbacks = new Callback[methods.length];\n      this.fixedInterceptorMap = CollectionUtils.newHashMap(methods.length);\n\n      // TODO: small memory optimization here (can skip creation for methods with no advice)\n      for (int x = 0; x < methods.length; x++) {\n         Method method = methods[x];\n         List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, rootClass);\n         fixedCallbacks[x] = new FixedChainStaticTargetInterceptor(\n               chain, this.advised.getTargetSource().getTarget(), this.advised.getTargetClass());\n         this.fixedInterceptorMap.put(method, x);\n      }\n\n      // Now copy both the callbacks from mainCallbacks\n      // and fixedCallbacks into the callbacks array.\n      callbacks = new Callback[mainCallbacks.length + fixedCallbacks.length];\n      System.arraycopy(mainCallbacks, 0, callbacks, 0, mainCallbacks.length);\n      System.arraycopy(fixedCallbacks, 0, callbacks, mainCallbacks.length, fixedCallbacks.length);\n      this.fixedInterceptorOffset = mainCallbacks.length;\n   }\n   else {\n      callbacks = mainCallbacks;\n   }\n   return callbacks;\n}\n"],["body","\n"],["headingLink","确定每个方法的拦截器"],["heading","确定每个方法的拦截器"],["body","\n"],["body","//org.springframework.aop.framework.CglibAopProxy.ProxyCallbackFilter#accept\n\t\tpublic int accept(Method method) {\n            //finanl方法 直接 调用父类的\n\t\t\tif (AopUtils.isFinalizeMethod(method)) {\n\t\t\t\tlogger.trace(\"Found finalize() method - using NO_OVERRIDE\");\n\t\t\t\treturn NO_OVERRIDE;\n\t\t\t}\n            //用户透明的、接口、而且是在 Advised类申明的方法\n\t\t\tif (!this.advised.isOpaque() && method.getDeclaringClass().isInterface() &&\n\t\t\t\t\tmethod.getDeclaringClass().isAssignableFrom(Advised.class)) {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(\"Method is declared on Advised interface: \" + method);\n\t\t\t\t}\n                //调用 Advised类中的方法\n\t\t\t\treturn DISPATCH_ADVISED;\n\t\t\t}\n\t\t\t// We must always proxy equals, to direct calls to this.调用 Equals方法\n\t\t\tif (AopUtils.isEqualsMethod(method)) {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(\"Found 'equals' method: \" + method);\n\t\t\t\t}\n\t\t\t\treturn INVOKE_EQUALS;\n\t\t\t}\n\t\t\t// We must always calculate hashCode based on the proxy.  基于proxy计算hashcode\n\t\t\tif (AopUtils.isHashCodeMethod(method)) {\n\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\tlogger.trace(\"Found 'hashCode' method: \" + method);\n\t\t\t\t}\n\t\t\t\treturn INVOKE_HASHCODE;\n\t\t\t}\n            //非增强方法的处理\n            \n\t\t\tClass<?> targetClass = this.advised.getTargetClass();\n\t\t\t// Proxy is not yet available, but that shouldn't matter.\n            //获取调用链条\n\t\t\tList<?> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);\n\t\t\tboolean haveAdvice = !chain.isEmpty();\n\t\t\tboolean exposeProxy = this.advised.isExposeProxy();\n\t\t\tboolean isStatic = this.advised.getTargetSource().isStatic();\n\t\t\tboolean isFrozen = this.advised.isFrozen();\n            //存在调用链、或者非冻结的配置使用 aopInterceptor(该配置在调用时  实时匹配调用)\n\t\t\tif (haveAdvice || !isFrozen) {\n\t\t\t\t// If exposing the proxy, then AOP_PROXY must be used.\n\t\t\t\tif (exposeProxy) { //如果需要暴露代理 \n\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\tlogger.trace(\"Must expose proxy on advised method: \" + method);\n\t\t\t\t\t}\n                    //\n\t\t\t\t\treturn AOP_PROXY;\n\t\t\t\t}\n\t\t\t\t// Check to see if we have fixed interceptor to serve this method.\n\t\t\t\t// Else use the AOP_PROXY. 如果是 静态的 、且 配置 冻结 了 而且包含了 此method\n\t\t\t\tif (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(method)) {\n\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\tlogger.trace(\"Method has advice and optimizations are enabled: \" + method);\n\t\t\t\t\t}  //则调用该出索引的Method\n\t\t\t\t\t// We know that we are optimizing so we can use the FixedStaticChainInterceptors.\n\t\t\t\t\tint index = this.fixedInterceptorMap.get(method);\n\t\t\t\t\treturn (index + this.fixedInterceptorOffset);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\tlogger.trace(\"Unable to apply any optimizations to advised method: \" + method);\n\t\t\t\t\t}\n                    //否则 还是使用 动态\n\t\t\t\t\treturn AOP_PROXY;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// See if the return type of the method is outside the class hierarchy of the target type.\n                // 查看方法的返回类型是否在目标类型的类层次结构之外。\n\t\t\t\t// 如果在之外，则不需要对返回值进行类型转换，直接静态dispatcher.\n\t\t\t\t// 如果 代理被暴露, 必须使用拦截器. \n                // 如果目标不是静态的，那么我们不能使用调度器，因为 目标需要在调用后显式释放。\n\t\t\t\tif (exposeProxy || !isStatic) {\n\t\t\t\t\treturn INVOKE_TARGET;\n\t\t\t\t}\n\t\t\t\tClass<?> returnType = method.getReturnType();\n\t\t\t\tif (targetClass != null && returnType.isAssignableFrom(targetClass)) {\n\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\tlogger.trace(\"Method return type is assignable from target type and \" +\n\t\t\t\t\t\t\t\t\"may therefore return 'this' - using INVOKE_TARGET: \" + method);\n\t\t\t\t\t}\n\t\t\t\t\treturn INVOKE_TARGET;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\tlogger.trace(\"Method return type ensures 'this' cannot be returned - \" +\n\t\t\t\t\t\t\t\t\"using DISPATCH_TARGET: \" + method);\n\t\t\t\t\t}\n\t\t\t\t\treturn DISPATCH_TARGET;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n"],["body","\n"],["h1","运行逻辑"],["body","\n"],["headingLink","final不覆盖"],["heading","final不覆盖"],["body","\n"],["body","如果是final方法则 NO_OVERRIDE，对应于 NoOp 即：不覆盖方法"],["body","\n"],["headingLink","如果是advised接口的方法"],["heading","如果是Advised接口的方法"],["body","\n"],["body","则直接转发到 this.advised对象上"],["body","\n"],["headingLink","equals-hashcode-调用代理类的方法"],["heading","Equals HashCode 调用代理类的方法"],["body","\n"],["headingLink","如果没有advice且-不需要暴露代理且是静态-而且不需要返回this"],["heading","如果没有Advice且 不需要暴露代理且是静态 而且不需要返回this"],["body","\n"],["body","直接转发到 target的 方法上"],["body","\n"],["headingLink","如果没有advice且-需要暴露代理或者非静态或者返回值为this"],["heading","如果没有Advice且 需要暴露代理或者非静态或者返回值为this"],["body","\n"],["body","则调用 INVOKE_TARGET"],["body","\n"],["headingLink","存在-advice且静态的冻结配置了的且存在拦截方法"],["heading","存在 Advice,且（静态的、冻结配置了的、且存在拦截方法）"],["body","\n"],["body","使用静态拦截器：在代理的时刻：已经确定好哪些拦截器"],["body","\n"],["headingLink","存在-advice且需要暴露代理或者非静态或者没有冻结配置或者还不存在拦截方法"],["heading","存在 Advice,且（需要暴露代理、或者非静态或者没有冻结配置、或者还不存在拦截方法）"],["body","\n"],["body","使用动态拦截器：在调用时匹配拦截方法"],["body","\n"],["body","动态拦截逻辑"],["body","\n"],["body","//DynamicAdvisedInterceptor#intercept\npublic Object intercept(Object proxy, Method method, Object[] args, MethodProxy methodProxy) throws Throwable {\n   Object oldProxy = null;\n   boolean setProxyContext = false;\n   Object target = null;\n    //获取目标类\n   TargetSource targetSource = this.advised.getTargetSource();\n   try {\n       //暴露代理类\n      if (this.advised.exposeProxy) {\n         // Make invocation available if necessary.\n         oldProxy = AopContext.setCurrentProxy(proxy);\n         setProxyContext = true;\n      }\n      // Get as late as possible to minimize the time we \"own\" the target, in case it comes from a pool...\n       //获取目标\n      target = targetSource.getTarget();\n       //获取目标class\n      Class<?> targetClass = (target != null ? target.getClass() : null);\n       //获取动态拦截器：从spring容器中获取所有Advisor对象并对 method,class一一匹配\n      List<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);\n      Object retVal;\n      // Check whether we only have one InvokerInterceptor: that is,\n      // no real advice, but just reflective invocation of the target.\n       //没有代理类，直接调用目标方法\n      if (chain.isEmpty() && Modifier.isPublic(method.getModifiers())) {\n         // We can skip creating a MethodInvocation: just invoke the target directly.\n         // Note that the final invoker must be an InvokerInterceptor, so we know\n         // it does nothing but a reflective operation on the target, and no hot\n         // swapping or fancy proxying.\n         Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);\n         retVal = methodProxy.invoke(target, argsToUse);\n      }\n      else {\n          //生成责任链调用类，进行链式调用\n         // We need to create a method invocation...\n         retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();\n      }\n       //处理返回值\n      retVal = processReturnType(proxy, target, method, retVal);\n      return retVal;\n   }\n   finally {\n       //释放target\n      if (target != null && !targetSource.isStatic()) {\n         targetSource.releaseTarget(target);\n      }\n       //还原代理对象\n      if (setProxyContext) {\n         // Restore old proxy.\n         AopContext.setCurrentProxy(oldProxy);\n      }\n   }\n}\n"],["body","\n"],["body","链式调用"],["body","\n"],["body","private static class CglibMethodInvocation extends ReflectiveMethodInvocation {\n\n   @Nullable\n   private final MethodProxy methodProxy;\n\n   public CglibMethodInvocation(Object proxy, @Nullable Object target, Method method,\n         Object[] arguments, @Nullable Class<?> targetClass,\n         List<Object> interceptorsAndDynamicMethodMatchers, MethodProxy methodProxy) {\n\n      super(proxy, target, method, arguments, targetClass, interceptorsAndDynamicMethodMatchers);\n\n      // Only use method proxy for public methods not derived from java.lang.Object\n      this.methodProxy = (Modifier.isPublic(method.getModifiers()) &&\n            method.getDeclaringClass() != Object.class && !AopUtils.isEqualsMethod(method) &&\n            !AopUtils.isHashCodeMethod(method) && !AopUtils.isToStringMethod(method) ?\n            methodProxy : null);\n   }\n\n   @Override\n   @Nullable\n   public Object proceed() throws Throwable {\n      try {\n         return super.proceed();\n      }\n      catch (RuntimeException ex) {\n         throw ex;\n      }\n      catch (Exception ex) {\n         if (ReflectionUtils.declaresException(getMethod(), ex.getClass()) ||\n               KotlinDetector.isKotlinType(getMethod().getDeclaringClass())) {\n            // Propagate original exception if declared on the target method\n            // (with callers expecting it). Always propagate it for Kotlin code\n            // since checked exceptions do not have to be explicitly declared there.\n            throw ex;\n         }\n         else {\n            // Checked exception thrown in the interceptor but not declared on the\n            // target method signature -> apply an UndeclaredThrowableException,\n            // aligned with standard JDK dynamic proxy behavior.\n            throw new UndeclaredThrowableException(ex);\n         }\n      }\n   }\n\n   /**\n    * 直接目标方法调用：通过 方法名称确定调用哪个方法：有略微的性能提升\n    * Gives a marginal performance improvement versus using reflection to\n    * invoke the target when invoking public methods.\n    */\n   @Override\n   protected Object invokeJoinpoint() throws Throwable {\n       //跳过Object的方法\n      if (this.methodProxy != null) {\n         return this.methodProxy.invoke(this.target, this.arguments);\n      }\n      else {\n\t\t//object方法使用反射调用\n         return super.invokeJoinpoint();\n      }\n   }\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-aop/aop包解析.html"],["title","aop包解析.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","org.aopalliance的拦截体系"],["body","\n\n"],["body","该包是AOP组织下的公用包，用于AOP中方法增强和调用。相当于一个jsr标准"],["body","\n"],["body","只有接口和异常，只有接口和异常"],["body","\n\n"],["h1","包结构图"],["body","\n"],["body","\n"],["h1","解析"],["body","\n"],["body","AOP主要有两大概念"],["body","\n\n"],["body","\n"],["body","Advice"],["body","\n"],["body","\n"],["body","\n"],["body","JointPoint"],["body","\n"],["body","\n\n"],["body","Advice 定义了如何 切面，没有定义相关行为"],["body","\n"],["body","JointPoint 定义了运行时 具体切面的位置"],["body","\n\n"],["body","在实际编程中 Advice 具象化为  Interceptor 拦截器 分为 ConstrutorInterceptor 与 MethodIntercceptor都是基于方法的拦截"],["body","\n"],["body","而JointPoint 具象为 Invocation，即每次方法的拦截，就会相应拦截的实例 ，这里将其抽象为 invocation 调用，调用也区分\n构造函数调用与 普通方法调用"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-aop/AOP应用解析.html"],["title","AOP应用解析 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-aop/SpringAop-jdk动态代理.html"],["title","SpringAop-jdk动态代理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","jdk动态代理"],["body","\n"],["headingLink","实例化"],["heading","实例化"],["body","\n"],["body","实例化 JdkDynamicAopProxy 时  获取所有需要代理的接口"],["body","\n"],["body","public JdkDynamicAopProxy(AdvisedSupport config) throws AopConfigException {\n   Assert.notNull(config, \"AdvisedSupport must not be null\");\n   if (config.getAdvisorCount() == 0 && config.getTargetSource() == AdvisedSupport.EMPTY_TARGET_SOURCE) {\n      throw new AopConfigException(\"No advisors and no TargetSource specified\");\n   }\n   this.advised = config;\n   this.proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(this.advised, true);\n   findDefinedEqualsAndHashCodeMethods(this.proxiedInterfaces);\n}\n"],["body","\n"],["headingLink","获取实例对象"],["heading","获取实例对象"],["body","\n"],["body","public Object getProxy(ClassLoader classLoader) {\n\tif (logger.isDebugEnabled()) {\n\t\tlogger.debug(\"Creating JDK dynamic proxy: target source is \" + this.advised.getTargetSource());\n\t}\n\t// 获取所有需要代理的接口\n\tClass<?>[] proxiedInterfaces = AopProxyUtils.completeProxiedInterfaces(this.advised, true);\n\tfindDefinedEqualsAndHashCodeMethods(proxiedInterfaces);\n\t// 返回代理对象的实例\n\treturn Proxy.newProxyInstance(classLoader, proxiedInterfaces, this);\n}\n"],["body","\n"],["headingLink","代理对象入口方法"],["heading","代理对象入口方法"],["body","\n"],["body","自己作为InvocationHandler注册，看他的invoke方法"],["body","\n"],["body","//org.springframework.aop.framework.JdkDynamicAopProxy#invokes\npublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n\t\tObject oldProxy = null;\n\t\tboolean setProxyContext = false;\n\n\t\tTargetSource targetSource = this.advised.targetSource;\n\t\tObject target = null;\n\n\t\ttry {\n\t//\t没有声明equals方法，调用equals方法时，委托调用。\n\t\t\tif (!this.equalsDefined && AopUtils.isEqualsMethod(method)) {\n\t\t\t\t// The target does not implement the equals(Object) method itself.\n\t\t\t\treturn equals(args[0]);\n\t\t\t}\n\t\t\t// 没有声明hashCode方法，调用hashCode方法时，委托调用。\n\t\t\telse if (!this.hashCodeDefined && AopUtils.isHashCodeMethod(method)) {\n\t\t\t\t// The target does not implement the hashCode() method itself.\n\t\t\t\treturn hashCode();\n\t\t\t}\n\t\t\t// 如果调用的方法是DecoratingProxy中的方法，因为其中只有一个getDecoratedClass方法，这里直接返回被装饰的Class即可\n\t\t\telse if (method.getDeclaringClass() == DecoratingProxy.class) {\n\t\t\t\t// There is only getDecoratedClass() declared -> dispatch to proxy config.\n\t\t\t\treturn AopProxyUtils.ultimateTargetClass(this.advised);\n\t\t\t}\n\t\t\t// 代理不是不透明的，且是接口中声明的方法，且是Advised或其父接口的方法，则直接调用构造时传入的advised对象的相应方法\n\t\t\telse if (!this.advised.opaque && method.getDeclaringClass().isInterface() &&\n\t\t\t\t\tmethod.getDeclaringClass().isAssignableFrom(Advised.class)) {\n\t\t\t\t// Service invocations on ProxyConfig with the proxy config...\n\t\t\t\treturn AopUtils.invokeJoinpointUsingReflection(this.advised, method, args);\n\t\t\t}\n\n\t\t\tObject retVal;\n // 如果暴露代理，则用AopContext保存当前代理对象。用于多级代理时获取当前的代理对象，一个有效应用是同类中调用方法，代理拦截器会无效。可以使用AopContext.currentProxy()获得代理对象并调用。\n\t\t\tif (this.advised.exposeProxy) {\n\t\t\t\t// Make invocation available if necessary.\n\t\t\t\toldProxy = AopContext.setCurrentProxy(proxy);\n\t\t\t\tsetProxyContext = true;\n\t\t\t}\n\n\t\t\t// Get as late as possible to minimize the time we \"own\" the target,\n\t\t\t// in case it comes from a pool.\n\t\t\ttarget = targetSource.getTarget();\n\t\t\tClass<?> targetClass = (target != null ? target.getClass() : null);\n\n\t\t// 这里是关键，获得拦截链chain，是通过advised对象，即config对象获得的。\n\t\t\tList<Object> chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass);\n\n\t\t\t// Check whether we have any advice. If we don't, we can fallback on direct\n\t\t\t// reflective invocation of the target, and avoid creating a MethodInvocation.\n\t\t\tif (chain.isEmpty()) {\n\t\t\t\t// We can skip creating a MethodInvocation: just invoke the target directly\n\t\t\t\t// Note that the final invoker must be an InvokerInterceptor so we know it does\n\t\t\t\t// nothing but a reflective operation on the target, and no hot swapping or fancy proxying.\n\t\t\t\tObject[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args);\t\t\t// 如果链是空，则直接调用被代理对象的方法\n\t\t\t\tretVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse);\n\t\t\t}\n\t\t\telse {\n\t\t\t// 否则创建一个MethodInvocation对象，用于链式调用拦截器链chain中的拦截器。\n\t\t\t\t// We need to create a method invocation...\n\t\t\t\tMethodInvocation invocation =\n\t\t\t\t\t\tnew ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain);\n\t\t\t\t// 开始执行链式调用，得到返回结果\n\t\t\t\tretVal = invocation.proceed();\n\t\t\t}\n\n\t\t\t// Massage return value if necessary.\n\t\t\tClass<?> returnType = method.getReturnType();\n\t\t\tif (retVal != null && retVal == target &&\n\t\t\t\t\treturnType != Object.class && returnType.isInstance(proxy) &&\n\t\t\t\t\t!RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) {\n\t\t\t\t// Special case: it returned \"this\" and the return type of the method\n\t\t\t\t// is type-compatible. Note that we can't help if the target sets\n\t\t\t\t// a reference to itself in another returned object.\n\t\t\t\t\t// 处理返回值\n\t\t\t// 如果返回结果是this，即原始对象，且方法所在类没有标记为RawTargetAccess(不是RawTargetAccess的实现类或者子接口)，则返回代理对象。\n\t\t\t\tretVal = proxy;\n\t\t\t}\n\t\t\telse if (retVal == null && returnType != Void.TYPE && returnType.isPrimitive()) {\n\t\t\t\tthrow new AopInvocationException(\n\t\t\t\t\t\t\"Null return value from advice does not match primitive return type for: \" + method);\n\t\t\t}\n\t\t\treturn retVal;\n\t\t}\n\t\tfinally {\n\t\t\tif (target != null && !targetSource.isStatic()) {\n\t\t\t\t// Must have come from TargetSource.\n\t\t\t\ttargetSource.releaseTarget(target);\n\t\t\t}\n\t\t\tif (setProxyContext) {\n\t\t\t\t// Restore old proxy.\n\t\t\t\tAopContext.setCurrentProxy(oldProxy);\n\t\t\t}\n\t\t}\n\t}\n"],["body","\n"],["headingLink","执行调用链"],["heading","执行调用链"],["body","\n"],["body","//org.springframework.aop.framework.ReflectiveMethodInvocation#proceed\n\tpublic Object proceed() throws Throwable {\n\t\t// We start with an index of -1 and increment early.\n\t\tif (this.currentInterceptorIndex == this.interceptorsAndDynamicMethodMatchers.size() - 1) {\n            // 链全部执行完，再次调用proceed时，返回原始对象方法调用执行结果。递归的终止。\n\t\t\treturn invokeJoinpoint();\n\t\t}\n// 用currentInterceptorIndex记录当前的interceptor位置，初值-1，先++再获取。当再拦截器中调用invocation.proceed()时，递归进入此方法，索引向下移位，获取下一个拦截器。\n\t\tObject interceptorOrInterceptionAdvice =\n\t\t\t\tthis.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex);\n         // 如果是InterceptorAndDynamicMethodMatcher则再执行一次动态匹配\n\t\tif (interceptorOrInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) {\n\t\t\t// Evaluate dynamic method matcher here: static part will already have\n\t\t\t// been evaluated and found to match.\n\t\t\tInterceptorAndDynamicMethodMatcher dm =\n\t\t\t\t\t(InterceptorAndDynamicMethodMatcher) interceptorOrInterceptionAdvice;\n\t\t\tClass<?> targetClass = (this.targetClass != null ? this.targetClass : this.method.getDeclaringClass());\n\t\t\tif (dm.methodMatcher.matches(this.method, targetClass, this.arguments)) {\n                 // 匹配成功，执行\n\t\t\t\treturn dm.interceptor.invoke(this);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Dynamic matching failed.\n\t\t\t\t// Skip this interceptor and invoke the next in the chain.\n                // 匹配失败，跳过该拦截器，递归调用本方法，执行下一个拦截器。\n\t\t\t\treturn proceed();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// It's an interceptor, so we just invoke it: The pointcut will have\n\t\t\t// been evaluated statically before this object was constructed.\n            // 如果是interceptor，则直接调用invoke。把自己作为invocation，以便在invoke方法中，调用invocation.proceed()来执行递归。或者invoke中也可以不执行invocation.proceed()，强制结束递归，返回指定对象作为结果。\n\t\t\treturn ((MethodInterceptor) interceptorOrInterceptionAdvice).invoke(this);\n\t\t}\n\t}\n"],["body","\n"],["headingLink","获取拦截器"],["heading","获取拦截器"],["body","\n"],["body","//org.springframework.aop.framework.DefaultAdvisorChainFactory#getInterceptorsAndDynamicInterceptionAdvice\n\tpublic List<Object> getInterceptorsAndDynamicInterceptionAdvice(\n\t\t\tAdvised config, Method method, @Nullable Class<?> targetClass) {\n\n\t\t// This is somewhat tricky... We have to process introductions first,\n\t\t// but we need to preserve order in the ultimate list.\n\t\tAdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance();\n        \n        //获取 Advised对象中的 advisors\n\t\tAdvisor[] advisors = config.getAdvisors();\n\t\tList<Object> interceptorList = new ArrayList<>(advisors.length);\n\t\tClass<?> actualClass = (targetClass != null ? targetClass : method.getDeclaringClass());\n\t\tBoolean hasIntroductions = null;\n\n     \t//从 advisor手上 获取 Advice\n\t\tfor (Advisor advisor : advisors) {\n            //如果是带有切面的，则执行切面条件匹配\n\t\t\tif (advisor instanceof PointcutAdvisor) {\n\t\t\t\t// Add it conditionally.\n\t\t\t\tPointcutAdvisor pointcutAdvisor = (PointcutAdvisor) advisor;\n                //如果 Class匹配则 继续进行方法匹配\n\t\t\t\tif (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) {\n\t\t\t\t\tMethodMatcher mm = pointcutAdvisor.getPointcut().getMethodMatcher();\n\t\t\t\t\tboolean match;\n\t\t\t\t\tif (mm instanceof IntroductionAwareMethodMatcher) {\n\t\t\t\t\t\tif (hasIntroductions == null) {\n\t\t\t\t\t\t\thasIntroductions = hasMatchingIntroductions(advisors, actualClass);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = ((IntroductionAwareMethodMatcher) mm).matches(method, actualClass, hasIntroductions);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmatch = mm.matches(method, actualClass);\n\t\t\t\t\t}\n\t\t\t\t\tif (match) {\n                        //匹配成功且 还包含运行时匹配的：则创建 运行时匹配对象\n                        //这里从 advisor中获取 advice,包含从spring的 interceptor转换为 aop的interceptor\n\t\t\t\t\t\tMethodInterceptor[] interceptors = registry.getInterceptors(advisor);\n\t\t\t\t\t\tif (mm.isRuntime()) {\n\t\t\t\t\t\t\t// Creating a new object instance in the getInterceptors() method\n\t\t\t\t\t\t\t// isn't a problem as we normally cache created chains.\n\t\t\t\t\t\t\tfor (MethodInterceptor interceptor : interceptors) {\n\t\t\t\t\t\t\t\tinterceptorList.add(new InterceptorAndDynamicMethodMatcher(interceptor, mm));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tinterceptorList.addAll(Arrays.asList(interceptors));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (advisor instanceof IntroductionAdvisor) {\n\t\t\t\tIntroductionAdvisor ia = (IntroductionAdvisor) advisor;\n\t\t\t\tif (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) {\n\t\t\t\t\tInterceptor[] interceptors = registry.getInterceptors(advisor);\n\t\t\t\t\tinterceptorList.addAll(Arrays.asList(interceptors));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tInterceptor[] interceptors = registry.getInterceptors(advisor);\n\t\t\t\tinterceptorList.addAll(Arrays.asList(interceptors));\n\t\t\t}\n\t\t}\n\n\t\treturn interceptorList;\n\t}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-aop/SpringAop-编程式代理.html"],["title","SpringAop-编程式代理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","总结"],["body","\n\n"],["body","所有 手动编程式代理 继承 AbstractBeanFactoryAwareAdvisingPostProcessor"],["body","\n"],["body","并在实现中 赋值  advisor "],["body","\n\n"],["h1","ProxyProcessorSupport"],["body","\n"],["body","继承自 ProxyConfig 在此基础上添加了 类加载器的管理"],["body","\n"],["h1","AbstractAdvisingBeanPostProcessor"],["body","\n"],["body","继承自ProxyProcessorSupport 的抽象类，主要完成以下功能"],["body","\n\n"],["body","如果是Advised对象则  把当前Advisor加入  到其中"],["body","\n"],["body","判断 目标bean是否 应该被代理"],["body","\n"],["body","应该代理的话，则 使用ProxyFactory 进行代理"],["body","\n\n"],["body","源码"],["body","\n"],["body","\tpublic Object postProcessAfterInitialization(Object bean, String beanName) {\n\t\tif (this.advisor == null || bean instanceof AopInfrastructureBean) {\n\t\t\t// Ignore AOP infrastructure such as scoped proxies.\n\t\t\treturn bean;\n\t\t}\n\t\t//如果是 advisedbean  将 其加入到 advised中\n\t\tif (bean instanceof Advised) {\n\t\t\tAdvised advised = (Advised) bean;\n\t\t\tif (!advised.isFrozen() && isEligible(AopUtils.getTargetClass(bean))) {\n\t\t\t\t// Add our local Advisor to the existing proxy's Advisor chain...\n\t\t\t\tif (this.beforeExistingAdvisors) {\n\t\t\t\t\tadvised.addAdvisor(0, this.advisor);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tadvised.addAdvisor(this.advisor);\n\t\t\t\t}\n\t\t\t\treturn bean;\n\t\t\t}\n\t\t}\n\t\t//bean是否应该进行代理\n\t\tif (isEligible(bean, beanName)) {\n\t\t\tProxyFactory proxyFactory = prepareProxyFactory(bean, beanName);\n            //如果是基于接口的代理 则解析接口\n\t\t\tif (!proxyFactory.isProxyTargetClass()) {\n\t\t\t\tevaluateProxyInterfaces(bean.getClass(), proxyFactory);\n\t\t\t}\n\t\t\tproxyFactory.addAdvisor(this.advisor);\n\t\t\tcustomizeProxyFactory(proxyFactory);\n\n\t\t\t// Use original ClassLoader if bean class not locally loaded in overriding class loader\n\t\t\tClassLoader classLoader = getProxyClassLoader();\n\t\t\tif (classLoader instanceof SmartClassLoader && classLoader != bean.getClass().getClassLoader()) {\n\t\t\t\tclassLoader = ((SmartClassLoader) classLoader).getOriginalClassLoader();\n\t\t\t}\n\t\t\treturn proxyFactory.getProxy(classLoader);\n\t\t}\n\n\t\t// No proxy needed.\n\t\treturn bean;\n\t}\n"],["body","\n"],["h1","AbstractBeanFactoryAwareAdvisingPostProcessor"],["body","\n"],["body","持有 BeanFactory 的引用，主要完成了以下功能"],["body","\n\n"],["body","将targetClass 存入相应Bean定义"],["body","\n"],["body","判断是否应该 对类进行 代理或者对接口进行代理"],["body","\n\n"],["body","\tprotected ProxyFactory prepareProxyFactory(Object bean, String beanName) {\n\t\tif (this.beanFactory != null) {\n\t\t\tAutoProxyUtils.exposeTargetClass(this.beanFactory, beanName, bean.getClass());\n\t\t}\n\n\t\tProxyFactory proxyFactory = super.prepareProxyFactory(bean, beanName);\n\t\tif (!proxyFactory.isProxyTargetClass() && this.beanFactory != null &&\n\t\t\t\tAutoProxyUtils.shouldProxyTargetClass(this.beanFactory, beanName)) {\n\t\t\tproxyFactory.setProxyTargetClass(true);\n\t\t}\n\t\treturn proxyFactory;\n\t}\n"],["body","\n"],["h1","示例"],["body","\n"],["headingLink","asyncannotationbeanpostprocessor"],["heading","AsyncAnnotationBeanPostProcessor"],["body","\n"],["body","Bean 后处理器，通过将相应的 AsyncAnnotationAdvisor 添加到公开的代理（现有的 AOP 代理或新生成的实现所有目标的代理接口）。"],["body","\n"],["body","可以提供负责异步执行的 TaskExecutor 以及指示应该异步调用方法的注释类型。如果未指定注释类型，则此后处理器将检测 Spring 的 @Async 注释以及 EJB 3.1 javax.ejb.Asynchronous 注释。"],["body","\n"],["body","对于具有 void 返回类型的方法，调用者无法访问异步方法调用期间抛出的任何异常。可以指定 AsyncUncaughtExceptionHandler 来处理这些情况。"],["body","\n"],["body","默认情况下，底层异步Advisor在现有 Advisor 之前应用, 以便在调用链中尽早切换到异步执行。"],["body","\n"],["body","该类主要完成 Advisor的构建"],["body","\n"],["body","构建 AsyncAnnotationAdvisor 所需的"],["body","\n\n"],["body","Executors"],["body","\n"],["body","BeanFactory"],["body","\n"],["body","exceptionHandler"],["body","\n"],["body","且默认是在所有Advisor之前执行"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-aop/AOP应用解析/依赖懒加载.html"],["title","依赖懒加载.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","依赖懒加载"],["body","\n\n"],["body","在注入依赖的 过程中,先使用过代理 类来注入依赖"],["body","\n"],["body","在实际运行时：才从bean工厂中 获取依赖的 bean"],["body","\n\n"],["h1","源码分析"],["body","\n"],["headingLink","依赖注入过程"],["heading","依赖注入过程"],["body","\n"],["body","//org.springframework.beans.factory.support.DefaultListableBeanFactory#resolveDependency\npublic Object resolveDependency(DependencyDescriptor descriptor, @Nullable String requestingBeanName,\n      @Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException {\n\n   descriptor.initParameterNameDiscovery(getParameterNameDiscoverer());\n   if (Optional.class == descriptor.getDependencyType()) {\n      return createOptionalDependency(descriptor, requestingBeanName);\n   }\n   else if (ObjectFactory.class == descriptor.getDependencyType() ||\n         ObjectProvider.class == descriptor.getDependencyType()) {\n      return new DependencyObjectProvider(descriptor, requestingBeanName);\n   }\n   else if (javaxInjectProviderClass == descriptor.getDependencyType()) {\n      return new Jsr330Factory().createDependencyProvider(descriptor, requestingBeanName);\n   }\n   else {\n       //尝试获取懒加载代理对象\n      Object result = getAutowireCandidateResolver().getLazyResolutionProxyIfNecessary(\n            descriptor, requestingBeanName);\n      if (result == null) {\n         result = doResolveDependency(descriptor, requestingBeanName, autowiredBeanNames, typeConverter);\n      }\n      return result;\n   }\n}\n"],["body","\n"],["headingLink","获取懒加载代理对象"],["heading","获取懒加载代理对象"],["body","\n"],["body","//org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver#buildLazyResolutionProxy\nprotected Object buildLazyResolutionProxy(final DependencyDescriptor descriptor, final @Nullable String beanName) {\n    BeanFactory beanFactory = getBeanFactory();\n    Assert.state(beanFactory instanceof DefaultListableBeanFactory,\n                 \"BeanFactory needs to be a DefaultListableBeanFactory\");\n    final DefaultListableBeanFactory dlbf = (DefaultListableBeanFactory) beanFactory;\n\n    //自定义targetSource\n    TargetSource ts = new TargetSource() {\n        @Override\n        public Class<?> getTargetClass() {\n            return descriptor.getDependencyType();\n        }\n        @Override\n        public boolean isStatic() {\n            return false;\n        }\n        \n        @Override\n        public Object getTarget() {\n            Set<String> autowiredBeanNames = (beanName != null ? new LinkedHashSet<>(1) : null);\n            //调用   org.springframework.beans.factory.support.DefaultListableBeanFactory#doResolveDependency  执行实际的依赖注入：返回依赖的对象\n            Object target = dlbf.doResolveDependency(descriptor, beanName, autowiredBeanNames, null);\n            if (target == null) {\n                Class<?> type = getTargetClass();\n                if (Map.class == type) {\n                    return Collections.emptyMap();\n                }\n                else if (List.class == type) {\n                    return Collections.emptyList();\n                }\n                else if (Set.class == type || Collection.class == type) {\n                    return Collections.emptySet();\n                }\n                throw new NoSuchBeanDefinitionException(descriptor.getResolvableType(),\n                                                        \"Optional dependency not present for lazy injection point\");\n            }\n            if (autowiredBeanNames != null) {\n                for (String autowiredBeanName : autowiredBeanNames) {\n                    if (dlbf.containsBean(autowiredBeanName)) {\n                        dlbf.registerDependentBean(autowiredBeanName, beanName);\n                    }\n                }\n            }\n            return target;\n        }\n        @Override\n        public void releaseTarget(Object target) {\n        }\n    };\n\n    ProxyFactory pf = new ProxyFactory();\n    pf.setTargetSource(ts);\n    Class<?> dependencyType = descriptor.getDependencyType();\n    if (dependencyType.isInterface()) {\n        pf.addInterface(dependencyType);\n    }\n    return pf.getProxy(dlbf.getBeanClassLoader());\n}\n"],["body","\n"],["h1","总结"],["body","\n\n"],["body","在依赖注入的过程中 如果 Bean定义中配置了懒加载，则会自动创建一个代理对象注入"],["body","\n"],["body","代理对象在每次调用方法时都会 去解析依赖对象"],["body","\n"],["body","懒加载会存在性能问题：因为使用 DynamicAdvisedInterceptor 以及每次 都需要重新解析依赖 耗费时间"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-aop/AOP应用解析/Async异步.html"],["title","Async异步.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","asyncannotationbeanpostprocessor"],["heading","AsyncAnnotationBeanPostProcessor"],["body","\n"],["body","Bean 后处理器，通过将相应的 AsyncAnnotationAdvisor 添加到公开的代理（现有的 AOP 代理或新生成的实现所有目标的代理接口）。"],["body","\n"],["body","可以提供负责异步执行的 TaskExecutor 以及指示应该异步调用方法的注释类型。如果未指定注释类型，则此后处理器将检测 Spring 的 @Async 注释以及 EJB 3.1 javax.ejb.Asynchronous 注释。"],["body","\n"],["body","对于具有 void 返回类型的方法，调用者无法访问异步方法调用期间抛出的任何异常。可以指定 AsyncUncaughtExceptionHandler 来处理这些情况。"],["body","\n"],["body","默认情况下，底层异步Advisor在现有 Advisor 之前应用, 以便在调用链中尽早切换到异步执行。"],["body","\n"],["body","该类主要完成 Advisor的构建"],["body","\n"],["body","构建 AsyncAnnotationAdvisor 所需的"],["body","\n\n"],["body","Executors"],["body","\n"],["body","BeanFactory"],["body","\n"],["body","exceptionHandler"],["body","\n"],["body","且默认是在所有Advisor之前执行"],["body","\n\n"],["headingLink","asyncannotationadvisor"],["heading","AsyncAnnotationAdvisor"],["body","\n"],["body","完成 PointCut的构建，与代理逻辑的异步核心Advisor类的构建"],["body","\n\n"],["body","PointCut 由 AnnotationMatchingPointcut 完成对注解的 匹配"],["body","\n"],["body","多个PointCut使用 ComposablePointcut 支持多注解组合"],["body","\n"],["body","Advice使用 AnnotationAsyncExecutionInterceptor 完成核心代理逻辑"],["body","\n\n"],["body","\tpublic AsyncAnnotationAdvisor(\n\t\t\t@Nullable Supplier<Executor> executor, @Nullable Supplier<AsyncUncaughtExceptionHandler> exceptionHandler) {\n\n\t\tSet<Class<? extends Annotation>> asyncAnnotationTypes = new LinkedHashSet<>(2);\n\t\tasyncAnnotationTypes.add(Async.class);\n\t\ttry {\n\t\t\tasyncAnnotationTypes.add((Class<? extends Annotation>)\n\t\t\t\t\tClassUtils.forName(\"javax.ejb.Asynchronous\", AsyncAnnotationAdvisor.class.getClassLoader()));\n\t\t}\n\t\tcatch (ClassNotFoundException ex) {\n\t\t\t// If EJB 3.1 API not present, simply ignore.\n\t\t}\n\t\tthis.advice = buildAdvice(executor, exceptionHandler);\n\t\tthis.pointcut = buildPointcut(asyncAnnotationTypes);\n\t}\n\n"],["body","\n"],["body","构建pointcut"],["body","\n"],["body","protected Pointcut buildPointcut(Set<Class<? extends Annotation>> asyncAnnotationTypes) {\n\tComposablePointcut result = null;\n\tfor (Class<? extends Annotation> asyncAnnotationType : asyncAnnotationTypes) {\n\t\tPointcut cpc = new AnnotationMatchingPointcut(asyncAnnotationType, true);\n\t\tPointcut mpc = new AnnotationMatchingPointcut(null, asyncAnnotationType, true);\n\t\tif (result == null) {\n\t\t\tresult = new ComposablePointcut(cpc);\n\t\t}\n\t\telse {\n\t\t\tresult.union(cpc);\n\t\t}\n\t\tresult = result.union(mpc);\n\t}\n\treturn (result != null ? result : Pointcut.TRUE);\n}\n"],["body","\n"],["body","构建Advice"],["body","\n"],["body","protected Advice buildAdvice(\n      @Nullable Supplier<Executor> executor, @Nullable Supplier<AsyncUncaughtExceptionHandler> exceptionHandler) {\n\n   AnnotationAsyncExecutionInterceptor interceptor = new AnnotationAsyncExecutionInterceptor(null);\n   interceptor.configure(executor, exceptionHandler);\n   return interceptor;\n}\n"],["body","\n"],["headingLink","asyncexecutionaspectsupport"],["heading","AsyncExecutionAspectSupport"],["body","\n\n"],["body","\n"],["body","AnnotationAsyncExecutionInterceptor的基类"],["body","\n"],["body","\n"],["body","\n"],["body","帮助 AnnotationAsyncExecutionInterceptor 进行"],["body","\n\n"],["body","线程池查找：默认线程池查找、缓存线程池对象"],["body","\n"],["body","任务提交"],["body","\n"],["body","错误处理"],["body","\n\n"],["body","获取线程池名称的方法没有线程，因为不通子类的获取线程池的名称 途径可能不一致"],["body","\n\n"],["body","基于注解的线程池 是通过 注解上获取线程池名称的"],["body","\n\n"],["body","\n\n"],["body","获取默认线程池逻辑"],["body","\n"],["body","\tprotected Executor getDefaultExecutor(@Nullable BeanFactory beanFactory) {\n\t\tif (beanFactory != null) {\n\t\t\ttry {\n\t\t\t\t// Search for TaskExecutor bean... not plain Executor since that would\n\t\t\t\t// match with ScheduledExecutorService as well, which is unusable for\n\t\t\t\t// our purposes here. TaskExecutor is more clearly designed for it.\n\t\t\t\treturn beanFactory.getBean(TaskExecutor.class);\n\t\t\t}\n\t\t\tcatch (NoUniqueBeanDefinitionException ex) {\n\t\t\t\tlogger.debug(\"Could not find unique TaskExecutor bean\", ex);\n\t\t\t\ttry {\n\t\t\t\t\treturn beanFactory.getBean(DEFAULT_TASK_EXECUTOR_BEAN_NAME, Executor.class);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchBeanDefinitionException ex2) {\n\t\t\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\t\t\tlogger.info(\"More than one TaskExecutor bean found within the context, and none is named \" +\n\t\t\t\t\t\t\t\t\"'taskExecutor'. Mark one of them as primary or name it 'taskExecutor' (possibly \" +\n\t\t\t\t\t\t\t\t\"as an alias) in order to use it for async processing: \" + ex.getBeanNamesFound());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (NoSuchBeanDefinitionException ex) {\n\t\t\t\tlogger.debug(\"Could not find default TaskExecutor bean\", ex);\n\t\t\t\ttry {\n\t\t\t\t\treturn beanFactory.getBean(DEFAULT_TASK_EXECUTOR_BEAN_NAME, Executor.class);\n\t\t\t\t}\n\t\t\t\tcatch (NoSuchBeanDefinitionException ex2) {\n\t\t\t\t\tlogger.info(\"No task executor bean found for async processing: \" +\n\t\t\t\t\t\t\t\"no bean of type TaskExecutor and no bean named 'taskExecutor' either\");\n\t\t\t\t}\n\t\t\t\t// Giving up -> either using local default executor or none at all...\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n"],["body","\n"],["body","任务提交逻辑"],["body","\n"],["body","protected Object doSubmit(Callable<Object> task, AsyncTaskExecutor executor, Class<?> returnType) {\n   if (CompletableFuture.class.isAssignableFrom(returnType)) {\n      return CompletableFuture.supplyAsync(() -> {\n         try {\n            return task.call();\n         }\n         catch (Throwable ex) {\n            throw new CompletionException(ex);\n         }\n      }, executor);\n   }\n   else if (ListenableFuture.class.isAssignableFrom(returnType)) {\n      return ((AsyncListenableTaskExecutor) executor).submitListenable(task);\n   }\n   else if (Future.class.isAssignableFrom(returnType)) {\n      return executor.submit(task);\n   }\n   else {\n      executor.submit(task);\n      return null;\n   }\n}\n"],["body","\n"],["body","错误处理逻辑"],["body","\n"],["body","protected void handleError(Throwable ex, Method method, Object... params) throws Exception {\n   if (Future.class.isAssignableFrom(method.getReturnType())) {\n      ReflectionUtils.rethrowException(ex);\n   }\n   else {\n      // Could not transmit the exception to the caller with default executor\n      try {\n         this.exceptionHandler.obtain().handleUncaughtException(ex, method, params);\n      }\n      catch (Throwable ex2) {\n         logger.warn(\"Exception handler for async method '\" + method.toGenericString() +\n               \"' threw unexpected exception itself\", ex2);\n      }\n   }\n}\n"],["body","\n"],["body","线程池对象缓存"],["body","\n"],["body","protected AsyncTaskExecutor determineAsyncExecutor(Method method) {\n   AsyncTaskExecutor executor = this.executors.get(method);\n   if (executor == null) {\n      Executor targetExecutor;\n      String qualifier = getExecutorQualifier(method);\n      if (StringUtils.hasLength(qualifier)) {\n         targetExecutor = findQualifiedExecutor(this.beanFactory, qualifier);\n      }\n      else {\n         targetExecutor = this.defaultExecutor.get();\n      }\n      if (targetExecutor == null) {\n         return null;\n      }\n      executor = (targetExecutor instanceof AsyncListenableTaskExecutor ?\n            (AsyncListenableTaskExecutor) targetExecutor : new TaskExecutorAdapter(targetExecutor));\n      this.executors.put(method, executor);\n   }\n   return executor;\n}\n"],["body","\n"],["headingLink","annotationasyncexecutioninterceptor"],["heading","AnnotationAsyncExecutionInterceptor"],["body","\n"],["body","继承 AsyncExecutionAspectSupport"],["body","\n"],["body","继承 MethodInterceptor 完成方法的拦截"],["body","\n"],["body","该类主要完成拦截逻辑"],["body","\n"],["body","拦截逻辑"],["body","\n"],["body","public Object invoke(final MethodInvocation invocation) throws Throwable {\n   Class<?> targetClass = (invocation.getThis() != null ? AopUtils.getTargetClass(invocation.getThis()) : null);\n   Method specificMethod = ClassUtils.getMostSpecificMethod(invocation.getMethod(), targetClass);\n   final Method userDeclaredMethod = BridgeMethodResolver.findBridgedMethod(specificMethod);\n\t//在运行时：确认要使用的线程池\n   AsyncTaskExecutor executor = determineAsyncExecutor(userDeclaredMethod);\n   if (executor == null) {\n      throw new IllegalStateException(\n            \"No executor specified and no default executor set on AsyncExecutionInterceptor either\");\n   }\n\n    //执行异步任务\n   Callable<Object> task = () -> {\n      try {\n         Object result = invocation.proceed();\n         if (result instanceof Future) {\n            return ((Future<?>) result).get();\n         }\n      }\n      catch (ExecutionException ex) {\n         handleError(ex.getCause(), userDeclaredMethod, invocation.getArguments());\n      }\n      catch (Throwable ex) {\n         handleError(ex, userDeclaredMethod, invocation.getArguments());\n      }\n      return null;\n   };\n\t//提交，根据不同的返回值，任务提交也会返回不同的返回值\n   return doSubmit(task, executor, invocation.getMethod().getReturnType());\n}\n"],["body","\n"],["headingLink","annotationasyncexecutioninterceptor-1"],["heading","AnnotationAsyncExecutionInterceptor"],["body","\n"],["body","继承 AsyncExecutionInterceptor"],["body","\n"],["body","该类主要完成线程池名称的解析"],["body","\n"],["body","protected String getExecutorQualifier(Method method) {\n\t// Maintainer's note: changes made here should also be made in\n\t// AnnotationAsyncExecutionAspect#getExecutorQualifier\n\tAsync async = AnnotatedElementUtils.findMergedAnnotation(method, Async.class);\n\tif (async == null) {\n\t\tasync = AnnotatedElementUtils.findMergedAnnotation(method.getDeclaringClass(), Async.class);\n\t}\n\treturn (async != null ? async.value() : null);\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-aop/AOP应用解析/缓存.html"],["title","缓存.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","注解"],["body","\n"],["headingLink","cacheable"],["heading","@Cacheable"],["body","\n"],["body","\n"],["body","配置 是否应该缓存，如何缓存的注解"],["body","\n"],["body","\n"],["headingLink","缓存名"],["heading","缓存名"],["body","\n"],["body","value or cacheNames"],["body","\n"],["body","缓存依赖存储，标识应该存在哪个缓存区"],["body","\n"],["headingLink","缓存key"],["heading","缓存key"],["body","\n"],["body","key"],["body","\n\n"],["body","在缓存区中唯一标识 缓存的数据"],["body","\n"],["body","支持SpringEL动态计算"],["body","\n"],["body","默认 为 \"\" 表示所有方法参数都被视为一个键，除非自定义 keygenerator"],["body","\n"],["body","springEL默认提供以下几个默认元数据\n\n"],["body","#root.method, #root.target, and #root.caches for references to the method, target object, and affected cache(s) respectively."],["body","\n"],["body","#root.methodName  方法名，#root.targetClass 目标类 "],["body","\n"],["body","方法参数可以通过索引访问  #root.args[1], #p1 or #a1   通用能通过参数名访问"],["body","\n\n"],["body","\n\n"],["headingLink","key生成策略"],["heading","key生成策略"],["body","\n"],["body","keyGenerator"],["body","\n\n"],["body","要使用的自定义 org.springframework.cache.interceptor.KeyGenerator 的 bean name。"],["body","\n"],["body","与 key 属性互斥"],["body","\n\n"],["headingLink","cachemanager"],["heading","cacheManager"],["body","\n"],["body","cacheManager"],["body","\n\n"],["body","自定义 org.springframework.cache.CacheManager 的 bean name"],["body","\n"],["body","用于创建默认 org.springframework.cache.interceptor.CacheResolver 如果尚未设置。"],["body","\n\n"],["headingLink","cacheresolver"],["heading","cacheResolver"],["body","\n"],["body","cacheResolver"],["body","\n\n"],["body","要使用的自定义 org.springframework.cache.interceptor.CacheResolver 的 bean name。"],["body","\n\n"],["headingLink","condition"],["heading","condition"],["body","\n"],["body","condition"],["body","\n\n"],["body","有条件的缓存方法返回值"],["body","\n"],["body","默认为“”，表示方法结果总是被缓存。"],["body","\n"],["body","支持访问springEL 提供的元数据"],["body","\n\n"],["headingLink","unless"],["heading","unless"],["body","\n"],["body","unless"],["body","\n\n"],["body","Spring 表达式语言 (SpEL) 表达式用于否决方法缓存。"],["body","\n"],["body","与条件不同，该表达式在方法被调用后计算，因此可以引用结果。"],["body","\n"],["body","默认为 \"\"，表示永远不会否决缓存。"],["body","\n"],["body","除了支持上述元数据访问之外，还支持 #result 访问，如果是Optional类则回自动解引用"],["body","\n\n"],["headingLink","sync"],["heading","sync"],["body","\n"],["body","sync"],["body","\n"],["body","如果多个线程试图加载同一个键的值，则同步底层方法的调用。"],["body","\n"],["body","同步会导致一些限制："],["body","\n\n"],["body","不支持unless"],["body","\n"],["body","只能指定一个缓存"],["body","\n"],["body","不能组合其他缓存相关的操作"],["body","\n\n"],["body","这实际上是一个提示，您使用的实际缓存提供程序可能不以同步方式支持它。"],["body","\n"],["headingLink","cacheput"],["heading","@CachePut"],["body","\n"],["body","\n"],["body","指示触发 PUT 操作 "],["body","\n"],["body","\n\n"],["body","与@Cacheable 相反，此 操作不会跳过 Advised方法 "],["body","\n"],["body","它会一直 调用目标方法，根据 condition 和 unless 相应地匹配，将结果缓存"],["body","\n"],["body","会自动  解包装 java8的Optional"],["body","\n"],["body","该注解 可以支持 组合注解"],["body","\n\n"],["body","参数同上"],["body","\n"],["headingLink","cacheevict"],["heading","@CacheEvict"],["body","\n"],["body","\n"],["body","指示 方法或类上 触发缓存驱逐操作"],["body","\n"],["body","\n"],["body","参数同上"],["body","\n"],["headingLink","allentries"],["heading","allEntries"],["body","\n\n"],["body","\n"],["body","是否删除缓存中的所有条目。"],["body","\n"],["body","\n"],["body","\n"],["body","默认情况下，仅删除关联键下的值。"],["body","\n"],["body","\n"],["body","\n"],["body","请注意，不允许将此参数设置为 true 并指定键。"],["body","\n"],["body","\n\n"],["headingLink","beforeinvocation"],["heading","beforeInvocation"],["body","\n"],["body","是否应该在调用方法之前发生驱逐"],["body","\n\n"],["body","将此属性设置为 true，会导致驱逐发生，而不管方法结果如何（即，是否抛出异常）。"],["body","\n"],["body","默认为 false，意味着缓存驱逐操作将在成功调用建议的方法后发生（即仅当调用没有抛出异常时）。"],["body","\n\n"],["headingLink","cacheconfig"],["heading","@CacheConfig"],["body","\n"],["body","提供了一种在类级别共享与缓存相关的公共设置的机制。"],["body","\n"],["body","当此注解出现在给定类上时，它为该类中定义的任何缓存操作提供一组默认设置。"],["body","\n"],["headingLink","cachenames"],["heading","cacheNames"],["body","\n"],["body","在被注解类中定义的缓存操作要考虑的默认缓存的名称。"],["body","\n"],["body","如果在操作级别没有设置，则使用这些而不是默认值。"],["body","\n"],["body","可用于确定目标缓存（或多个缓存），匹配特定 bean 定义的限定符值或 bean 名称。"],["body","\n"],["headingLink","keygenerator"],["heading","keyGenerator"],["body","\n"],["body","用于类的默认 org.springframework.cache.interceptor.KeyGenerator 的 bean name。"],["body","\n"],["body","如果在操作级别没有设置，则使用这个而不是默认值。"],["body","\n"],["body","key generator与 自定义 key  互斥"],["body","\n"],["body","定义了 key之后 则忽略该值"],["body","\n"],["headingLink","cachemanager-1"],["heading","cacheManager"],["body","\n\n"],["body","cacheManager的bean名 以用来创建默认 CacheResolver "],["body","\n"],["body","如果没有resolver 没有 cacheManager 设置，则使用这个"],["body","\n\n"],["headingLink","cacheresolver-1"],["heading","cacheResolver"],["body","\n\n"],["body","要使用的自定义 org.springframework.cache.interceptor.CacheResolver 的 bean name。"],["body","\n\n"],["headingLink","caching"],["heading","@Caching"],["body","\n"],["body","缓存注解 的组合形式"],["body","\n"],["body","public @interface Caching {\n\n   Cacheable[] cacheable() default {};\n\n   CachePut[] put() default {};\n\n   CacheEvict[] evict() default {};\n\n}\n"],["body","\n"],["h1","缓存流程源码解析"],["body","\n"],["body","\n"],["body","使用bean自动发现 完成代理"],["body","\n"],["body","\n"],["headingLink","注入advisor"],["heading","注入Advisor"],["body","\n\n"],["body","注入BeanFactoryCacheOperationSourceAdvisor"],["body","\n"],["body","CacheInterceptor  缓存拦截器"],["body","\n\n"],["body","@Configuration\n@Role(BeanDefinition.ROLE_INFRASTRUCTURE)\npublic class ProxyCachingConfiguration extends AbstractCachingConfiguration {\n\n   @Bean(name = CacheManagementConfigUtils.CACHE_ADVISOR_BEAN_NAME)\n   @Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n   public BeanFactoryCacheOperationSourceAdvisor cacheAdvisor() {\n      BeanFactoryCacheOperationSourceAdvisor advisor = new BeanFactoryCacheOperationSourceAdvisor();\n      advisor.setCacheOperationSource(cacheOperationSource());\n      advisor.setAdvice(cacheInterceptor());\n      if (this.enableCaching != null) {\n         advisor.setOrder(this.enableCaching.<Integer>getNumber(\"order\"));\n      }\n      return advisor;\n   }\n\n   @Bean\n   @Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n   public CacheOperationSource cacheOperationSource() {\n      return new AnnotationCacheOperationSource();\n   }\n\n   @Bean\n   @Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n   public CacheInterceptor cacheInterceptor() {\n      CacheInterceptor interceptor = new CacheInterceptor();\n      interceptor.configure(this.errorHandler, this.keyGenerator, this.cacheResolver, this.cacheManager);\n      interceptor.setCacheOperationSource(cacheOperationSource());\n      return interceptor;\n   }\n\n}\n"],["body","\n"],["headingLink","核心拦截器cacheinterceptor"],["heading","核心拦截器CacheInterceptor"],["body","\n"],["body","该拦截器的主要完成以下功能"],["body","\n\n"],["body","包装目标方法 为 CacheOperationInvoker ，为后续 缓存没有命中的情况下 执行目标方法"],["body","\n"],["body","调用父类 CacheAspectSupport 的execute方法 完成缓存逻辑 "],["body","\n\n"],["body","public Object invoke(final MethodInvocation invocation) throws Throwable {\n   Method method = invocation.getMethod();\n//包装目标方法的调用\n   CacheOperationInvoker aopAllianceInvoker = () -> {\n      try {\n         return invocation.proceed();\n      }\n      catch (Throwable ex) {\n         throw new CacheOperationInvoker.ThrowableWrapper(ex);\n      }\n   };\n// \n   Object target = invocation.getThis();\n   Assert.state(target != null, \"Target must not be null\");\n   try {\n      return execute(aopAllianceInvoker, target, method, invocation.getArguments());\n   }\n   catch (CacheOperationInvoker.ThrowableWrapper th) {\n      throw th.getOriginal();\n   }\n}\n"],["body","\n"],["headingLink","缓存逻辑类cacheaspectsupport"],["heading","缓存逻辑类：CacheAspectSupport"],["body","\n"],["headingLink","同步缓存"],["heading","同步缓存"],["body","\n"],["body","\n"],["body","同步的保证，主要是通过 Cache 缓冲区的同步操作保证的"],["body","\n"],["body","具体 ConcurrentMapCache 依赖于 ConcurrentMap computeIfAbsent 且就算调用了目标方法，目标方法的值也可能不被缓存"],["body","\n"],["body","\n"],["body","主要 完成 以下功能"],["body","\n\n"],["body","条件测试"],["body","\n"],["body","尝试缓存命中"],["body","\n"],["body","没有 命中则调用目标方法获取放回值"],["body","\n\n"],["headingLink","同步缓存逻辑"],["heading","同步缓存逻辑"],["body","\n"],["body","//org.springframework.cache.interceptor.CacheAspectSupport#execute\n//如果是同步缓存\nif (contexts.isSynchronized()) {\n    //则 只会有一个 缓存操作\n   CacheOperationContext context = contexts.get(CacheableOperation.class).iterator().next();\n    //判断 condition是否条件测试通过\n   if (isConditionPassing(context, CacheOperationExpressionEvaluator.NO_RESULT)) {\n       //通过：生成key\n      Object key = generateKey(context, CacheOperationExpressionEvaluator.NO_RESULT);\n       //同步操作也只能指定一个缓存区\n      Cache cache = context.getCaches().iterator().next();\n      try {\n          //如果缓存命中则 直接返回缓存对象，没有命中则调用目标方法\n         return wrapCacheValue(method, handleSynchronizedGet(invoker, key, cache));\n      }\n      catch (Cache.ValueRetrievalException ex) {\n         // Directly propagate ThrowableWrapper from the invoker,\n         // or potentially also an IllegalArgumentException etc.\n         ReflectionUtils.rethrowRuntimeException(ex.getCause());\n      }\n   }\n   else {\n      //没有缓存，则直接调用目标方法\n      // No caching required, only call the underlying method\n      return invokeOperation(invoker);\n   }\n}\n"],["body","\n"],["headingLink","如何判定同步"],["heading","如何判定同步"],["body","\n"],["body","//org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContexts#determineSyncFlag\n\t\tprivate boolean determineSyncFlag(Method method) {\n\t\t\tList<CacheOperationContext> cacheOperationContexts = this.contexts.get(CacheableOperation.class);\n\t\t\tif (cacheOperationContexts == null) {  // no @Cacheable operation at all\n\t\t\t\treturn false;\n\t\t\t}\n            //判定是否配置 sync属性为true\n\t\t\tboolean syncEnabled = false;\n\t\t\tfor (CacheOperationContext cacheOperationContext : cacheOperationContexts) {\n\t\t\t\tif (((CacheableOperation) cacheOperationContext.getOperation()).isSync()) {\n\t\t\t\t\tsyncEnabled = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n            //如果配置 了则启用校验\n\t\t\tif (syncEnabled) {\n                //不能组合注解\n\t\t\t\tif (this.contexts.size() > 1) {\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t\"@Cacheable(sync=true) cannot be combined with other cache operations on '\" + method + \"'\");\n\t\t\t\t}\n                //\n\t\t\t\tif (cacheOperationContexts.size() > 1) {\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t\"Only one @Cacheable(sync=true) entry is allowed on '\" + method + \"'\");\n\t\t\t\t}\n\t\t\t\tCacheOperationContext cacheOperationContext = cacheOperationContexts.iterator().next();\n\t\t\t\tCacheableOperation operation = (CacheableOperation) cacheOperationContext.getOperation();\n                //缓存区 只能 配置一个\n\t\t\t\tif (cacheOperationContext.getCaches().size() > 1) {\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t\"@Cacheable(sync=true) only allows a single cache on '\" + operation + \"'\");\n\t\t\t\t}\n                //不能 配置unless\n\t\t\t\tif (StringUtils.hasText(operation.getUnless())) {\n\t\t\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\t\t\"@Cacheable(sync=true) does not support unless attribute on '\" + operation + \"'\");\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n"],["body","\n"],["headingLink","非同步缓存"],["heading","非同步缓存"],["body","\n"],["headingLink","主流程"],["heading","主流程"],["body","\n"],["body","主要完成以下功能"],["body","\n\n"],["body","前处理缓存逐出"],["body","\n"],["body","尝试缓存命中\n\n"],["body","命中缓存，且CachePutOperation没有命中：直接使用 命中的值"],["body","\n"],["body","没有命中缓存：调用目标方法，更新缓存"],["body","\n\n"],["body","\n"],["body","后处理缓存逐出"],["body","\n\n"],["body","//org.springframework.cache.interceptor.CacheAspectSupport#execute\n......\n\n\t\t// Process any early evictions:前处理缓存逐出\n\t\tprocessCacheEvicts(contexts.get(CacheEvictOperation.class), true,\n\t\t\t\tCacheOperationExpressionEvaluator.NO_RESULT);\n\n\t\t// Check if we have a cached item matching the conditions,缓存命中\n\t\tCache.ValueWrapper cacheHit = findCachedItem(contexts.get(CacheableOperation.class));\n\n\t\t// Collect puts from any @Cacheable miss, if no cached item is found\n\t\t//没有命中则 收集 CacheableOperation的PUT操作\n\t\tList<CachePutRequest> cachePutRequests = new ArrayList<>();\n\t\tif (cacheHit == null) {\n\t\t\tcollectPutRequests(contexts.get(CacheableOperation.class),\n\t\t\t\t\tCacheOperationExpressionEvaluator.NO_RESULT, cachePutRequests);\n\t\t}\n\n\t\tObject cacheValue;\n\t\tObject returnValue;\n\t\t//命中了缓存：且没有命中 CachePutOperation：直接返回命中的缓存\n\t\tif (cacheHit != null && !hasCachePut(contexts)) {\n\t\t\t// If there are no put requests, just use the cache hit\n\t\t\tcacheValue = cacheHit.get();\n\t\t\treturnValue = wrapCacheValue(method, cacheValue);\n\t\t}\n\t\telse {\n\t\t\t// Invoke the method if we don't have a cache hit\n            //没有命中则直接调用目标方法获取返回值\n\t\t\treturnValue = invokeOperation(invoker);\n\t\t\tcacheValue = unwrapReturnValue(returnValue);\n\t\t}\n\n\t\t// Collect any explicit @CachePuts \n\t\t// 显式收集CachePutOperation,缓存命中的情况下：还要保证CachePutOperation没有命中\n\t\tcollectPutRequests(contexts.get(CachePutOperation.class), cacheValue, cachePutRequests);\n\n\t\t// Process any collected put requests, either from @CachePut or a @Cacheable miss\n\t\t//更新缓存\n\t\tfor (CachePutRequest cachePutRequest : cachePutRequests) {\n\t\t\tcachePutRequest.apply(cacheValue);\n\t\t}\n\n\t\t// Process any late evictions\n\t\t//后处理缓存逐出\n\t\tprocessCacheEvicts(contexts.get(CacheEvictOperation.class), false, cacheValue);\n\n\t\treturn returnValue;\n"],["body","\n"],["headingLink","如何命中缓存"],["heading","如何命中缓存"],["body","\n\n"],["body","从组合操作中顺序匹配 第一个 条件满足的缓存操作"],["body","\n"],["body","生成key"],["body","\n"],["body","根据key查找缓存"],["body","\n"],["body","命中了直接返回，没有命中继续下一循环"],["body","\n\n"],["body","//org.springframework.cache.interceptor.CacheAspectSupport#findCachedItem\nprivate Cache.ValueWrapper findCachedItem(Collection<CacheOperationContext> contexts) {\n   Object result = CacheOperationExpressionEvaluator.NO_RESULT;\n   for (CacheOperationContext context : contexts) {\n      if (isConditionPassing(context, result)) {\n         Object key = generateKey(context, result);\n         Cache.ValueWrapper cached = findInCaches(context, key);\n         if (cached != null) {\n            return cached;\n         }\n         else {\n            if (logger.isTraceEnabled()) {\n               logger.trace(\"No cache entry for key '\" + key + \"' in cache(s) \" + context.getCacheNames());\n            }\n         }\n      }\n   }\n   return null;\n}\n"],["body","\n"],["headingLink","如何处理缓存逐出"],["heading","如何处理缓存逐出"],["body","\n\n"],["body","判断是否应该进行缓存逐出"],["body","\n"],["body","执行缓存逐出"],["body","\n\n"],["body","//org.springframework.cache.interceptor.CacheAspectSupport#processCacheEvicts\nprivate void processCacheEvicts(\n      Collection<CacheOperationContext> contexts, boolean beforeInvocation, @Nullable Object result) {\n\n   for (CacheOperationContext context : contexts) {\n      CacheEvictOperation operation = (CacheEvictOperation) context.metadata.operation;\n      if (beforeInvocation == operation.isBeforeInvocation() && \n          //判断是否应该进行缓存逐出\n          isConditionPassing(context, result)) {\n          //\n         performCacheEvict(context, operation, result);\n      }\n   }\n}\n"],["body","\n"],["headingLink","具体缓存逐出策略"],["heading","具体缓存逐出策略"],["body","\n"],["body","//org.springframework.cache.interceptor.CacheAspectSupport#performCacheEvict\nprivate void performCacheEvict(\n      CacheOperationContext context, CacheEvictOperation operation, @Nullable Object result) {\n\n   Object key = null;\n   for (Cache cache : context.getCaches()) {\n       //是否全局逐出 allEntries属性\n      if (operation.isCacheWide()) {\n         logInvalidating(context, operation, null);\n         doClear(cache, operation.isBeforeInvocation());\n      }\n      else {\n          //懒加载key\n         if (key == null) {\n            key = generateKey(context, result);\n         }\n         logInvalidating(context, operation, key);\n          //执行逐出\n         doEvict(cache, key, operation.isBeforeInvocation());\n      }\n   }\n}\n\n\tprotected void doEvict(Cache cache, Object key, boolean immediate) {\n\t\ttry {\n            //立即逐出：如果是 方法调用前的逐出：应该立即逐出\n\t\t\tif (immediate) {\n\t\t\t\tcache.evictIfPresent(key);\n\t\t\t}\n\t\t\telse {\n                //延迟逐出：方法调用后的逐出延迟\n\t\t\t\tcache.evict(key);\n\t\t\t}\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\tgetErrorHandler().handleCacheEvictError(ex, cache, key);\n\t\t}\n\t}\n"],["body","\n"],["headingLink","如何生成key"],["heading","如何生成key"],["body","\n\n"],["body","如果存在 key 则使用 springEL 解析 key并返回"],["body","\n"],["body","如果不存在key，则使用 keyGenerator 生成"],["body","\n\n"],["body","//org.springframework.cache.interceptor.CacheAspectSupport.CacheOperationContext#generateKey\nprotected Object generateKey(@Nullable Object result) {\n   if (StringUtils.hasText(this.metadata.operation.getKey())) {\n      EvaluationContext evaluationContext = createEvaluationContext(result);\n      return evaluator.key(this.metadata.operation.getKey(), this.metadata.methodKey, evaluationContext);\n   }\n   return this.metadata.keyGenerator.generate(this.target, this.metadata.method, this.args);\n}\n"],["body","\n"],["headingLink","no_resultresult_unavailableresult_variable"],["heading","NO_RESULT/RESULT_UNAVAILABLE/RESULT_VARIABLE"],["body","\n"],["body","CacheOperationExpressionEvaluator 中的这三个 全局变量"],["body","\n"],["headingLink","no_result"],["heading","NO_RESULT"],["body","\n\n"],["body","没有返回值"],["body","\n"],["body","不会将result 放到 springEL "],["body","\n\n"],["headingLink","result_unavailable"],["heading","RESULT_UNAVAILABLE"],["body","\n\n"],["body","没有返回值"],["body","\n"],["body","springEL 会进行 表达式check"],["body","\n\n"],["headingLink","result_variable"],["heading","RESULT_VARIABLE"],["body","\n\n"],["body","会在springEL context 中 放置 result"],["body","\n\n"],["h1","核心类解析"],["body","\n"],["headingLink","cache"],["heading","Cache"],["body","\n"],["headingLink","缓存名-1"],["heading","缓存名"],["body","\n"],["body","String getName();\n"],["body","\n"],["headingLink","底层缓存"],["heading","底层缓存"],["body","\n"],["body","Object getNativeCache();\n"],["body","\n"],["headingLink","缓存命中"],["heading","缓存命中"],["body","\n"],["body","允许缓存空值"],["body","\n\n"],["body","如果没有命中则返回  null"],["body","\n"],["body","值本身可能为空"],["body","\n\n"],["body","@Nullable\nValueWrapper get(Object key);\n"],["body","\n"],["headingLink","缓存命中2"],["heading","缓存命中2"],["body","\n"],["body","不允许返回空值"],["body","\n\n"],["body","如果可能，实现应确保加载操作是同步的"],["body","\n"],["body","以便在对同一键进行并发访问的情况下只调用一次指定的 valueLoader。"],["body","\n\n"],["body","<T> T get(Object key, @Nullable Class<T> type);\n"],["body","\n"],["headingLink","缓存数据"],["heading","缓存数据"],["body","\n\n"],["body","如果缓存先前包含此键的映射，则旧值将替换为指定值。"],["body","\n"],["body","实际注册可能以异步或延迟方式执行，随后的查找可能还没有看到该条目。"],["body","\n"],["body","例如，事务缓存装饰器可能就是这种情况。 使用 putIfAbsent 保证立即注册。"],["body","\n\n"],["body","void put(Object key, @Nullable Object value);\n"],["body","\n"],["headingLink","立即缓存数据"],["heading","立即缓存数据"],["body","\n\n"],["body","\n"],["body","如果尚未设置，则以原子方式将指定值与此缓存中的指定键相关联。"],["body","\n"],["body","\n"],["body","\n"],["body","虽然所有开箱即用的 CacheManager 实现都能够以原子方式执行放置，但该操作也可以分两步实现，例如"],["body","\n"],["body","以非原子方式检查存在并随后放置。"],["body","\n"],["body","\n\n"],["body","default ValueWrapper putIfAbsent(Object key, @Nullable Object value) {\n   ValueWrapper existingValue = get(key);\n   if (existingValue == null) {\n      put(key, value);\n   }\n   return existingValue;\n}\n"],["body","\n"],["headingLink","缓存逐出"],["heading","缓存逐出"],["body","\n"],["body","实际驱逐可能以异步或延迟方式执行，随后的查找可能仍会看到条目。"],["body","\n"],["body","例如，事务缓存装饰器可能就是这种情况。"],["body","\n"],["body","void evict(Object key);\n"],["body","\n"],["headingLink","立即缓存逐出"],["heading","立即缓存逐出"],["body","\n"],["body","如果该键存在，则从该缓存中逐出该键的映射，期望该键在后续查找时立即不可见。"],["body","\n"],["body","default boolean evictIfPresent(Object key) {\n   evict(key);\n   return false;\n}\n"],["body","\n"],["headingLink","清空缓存"],["heading","清空缓存"],["body","\n\n"],["body","实际清除可能以异步或延迟方式执行，随后的查找可能仍会看到条目。"],["body","\n"],["body","例如，事务缓存装饰器可能就是这种情况。"],["body","\n\n"],["body","void clear();\n"],["body","\n"],["headingLink","立即清空缓存"],["heading","立即清空缓存"],["body","\n"],["body","default boolean invalidate() {\n   clear();\n   return false;\n}\n"],["body","\n"],["headingLink","serializationdelegate"],["heading","SerializationDelegate"],["body","\n"],["body","包装返回值"],["body","\n\n"],["body","如果允许空返回值：将NULL 解析成 NullValue.INSTANCE"],["body","\n\n"],["headingLink","concurrentmapcache"],["heading","ConcurrentMapCache"],["body","\n"],["body","主要实现类 "],["body","\n\n"],["body","使用 ConcurrentHashMap 作为底层缓存"],["body","\n"],["body","在存储值时，使用 SerializationDelegate改变值的存储以及取值方式 以 byte数组存取"],["body","\n\n"],["headingLink","basicoperation"],["heading","BasicOperation"],["body","\n"],["body","缓存操作定义类"],["body","\n"],["headingLink","cacheoperation"],["heading","CacheOperation"],["body","\n"],["body","定义了缓存操作需要的上下文"],["body","\n"],["body","cacheNames：缓存名集合"],["body","\n"],["body","key：操作的key"],["body","\n"],["body","keyGenerator：key生成策略"],["body","\n"],["body","cacheManager：缓存管理者"],["body","\n"],["body","cacheResolver：缓存解析器"],["body","\n"],["body","condition：条件"],["body","\n"],["body","三个子类"],["body","\n\n"],["body","CacheableOperation"],["body","\n"],["body","CacheEvictOperation"],["body","\n"],["body","CachePutOperation"],["body","\n\n"],["headingLink","cacheresolver-2"],["heading","CacheResolver"],["body","\n"],["body","\n"],["body","用于确定使用的 Cache 集合"],["body","\n"],["body","\n"],["body","public interface CacheResolver {\n\n   /**\n    * Return the cache(s) to use for the specified invocation.\n    * @param context the context of the particular invocation\n    * @return the cache(s) to use (never {@code null})\n    * @throws IllegalStateException if cache resolution failed\n    */\n   Collection<? extends Cache> resolveCaches(CacheOperationInvocationContext<?> context);\n\n}\n"],["body","\n"],["headingLink","abstractcacheresolver"],["heading","AbstractCacheResolver"],["body","\n"],["body","根据  缓存名 从CacheManager 中获取缓存"],["body","\n"],["body","@Override\npublic Collection<? extends Cache> resolveCaches(CacheOperationInvocationContext<?> context) {\n   Collection<String> cacheNames = getCacheNames(context);\n   if (cacheNames == null) {\n      return Collections.emptyList();\n   }\n   Collection<Cache> result = new ArrayList<>(cacheNames.size());\n   for (String cacheName : cacheNames) {\n      Cache cache = getCacheManager().getCache(cacheName);\n      if (cache == null) {\n         throw new IllegalArgumentException(\"Cannot find cache named '\" +\n               cacheName + \"' for \" + context.getOperation());\n      }\n      result.add(cache);\n   }\n   return result;\n}\n"],["body","\n"],["headingLink","simplecacheresolver"],["heading","SimpleCacheResolver"],["body","\n"],["body","从 CacheOperationInvocationContext 中获取 Operation上的缓存名"],["body","\n"],["body","protected Collection<String> getCacheNames(CacheOperationInvocationContext<?> context) {\n   return context.getOperation().getCacheNames();\n}\n"],["body","\n"],["headingLink","namedcacheresolver"],["heading","NamedCacheResolver"],["body","\n\n"],["body","默认指定缓存名"],["body","\n\n"],["body","public class NamedCacheResolver extends AbstractCacheResolver {\n\n\t@Nullable\n\tprivate Collection<String> cacheNames;\n\n\n\tpublic NamedCacheResolver() {\n\t}\n\n\tpublic NamedCacheResolver(CacheManager cacheManager, String... cacheNames) {\n\t\tsuper(cacheManager);\n\t\tthis.cacheNames = new ArrayList<>(Arrays.asList(cacheNames));\n\t}\n\n\n\t/**\n\t * Set the cache name(s) that this resolver should use.\n\t */\n\tpublic void setCacheNames(Collection<String> cacheNames) {\n\t\tthis.cacheNames = cacheNames;\n\t}\n\n\t@Override\n\tprotected Collection<String> getCacheNames(CacheOperationInvocationContext<?> context) {\n\t\treturn this.cacheNames;\n\t}\n\n}\n"],["body","\n"],["headingLink","cachemanager-2"],["heading","CacheManager"],["body","\n"],["body","管理缓存类"],["body","\n"],["headingLink","api"],["heading","API"],["body","\n"],["headingLink","根据缓存名获取缓存"],["heading","根据缓存名获取缓存"],["body","\n"],["body","Cache getCache(String name);\n"],["body","\n"],["headingLink","获取所有的缓存名"],["heading","获取所有的缓存名"],["body","\n"],["body","Collection<String> getCacheNames();\n"],["body","\n"],["headingLink","abstractcachemanager"],["heading","AbstractCacheManager"],["body","\n"],["body","主要完成以下功能："],["body","\n\n"],["body","在Spring启动时初始化缓存"],["body","\n"],["body","实现了 CacheManager 的 getCache  getCacheNames"],["body","\n"],["body","实现了缓存的增查改：缓存名称的复制使用的同步锁并采用 写时复制 策略"],["body","\n\n"],["body","其子类只要  实现 载入 缓存对象即可"],["body","\n"],["headingLink","simplecachemanager"],["heading","SimpleCacheManager"],["body","\n"],["body","手动维护Caches"],["body","\n"],["headingLink","concurrentmapcachemanager"],["heading","ConcurrentMapCacheManager"],["body","\n\n"],["body","基于ConcurrentCache的实现类"],["body","\n"],["body","自己 会 根据名称 新建 缓存区"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-aop/SpringAop总结.html"],["title","SpringAop总结.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Spring是如何选择底层字节码操作框架的？"],["body","\n"],["body","public class DefaultAopProxyFactory implements AopProxyFactory, Serializable {\n\t@Override\n\tpublic AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException {\n\t\tif (config.isOptimize() || config.isProxyTargetClass() || hasNoUserSuppliedProxyInterfaces(config)) {\n\t\t// 如果是需要优化的代理，或者标记代理目标类，或者代理配置中没有需要代理的接口\n\t\t\tClass<?> targetClass = config.getTargetClass();\n\t\t\tif (targetClass == null) {\n\t\t\t\tthrow new AopConfigException(\"TargetSource cannot determine target class: \" +\n\t\t\t\t\t\t\"Either an interface or a target is required for proxy creation.\");\n\t\t\t}\n\t\t\tif (targetClass.isInterface() || Proxy.isProxyClass(targetClass)) {\n\t\t\t // 如果目标类是接口，或者已经是Jdk的动态代理类，则创建jdk动态代理\n\t\t\t\treturn new JdkDynamicAopProxy(config);\n\t\t\t}\n\t\t\t// 否则创建Cglib动态代理\n\t\t\treturn new ObjenesisCglibAopProxy(config);\n\t\t}\n\t\telse {\n\t\t // 如果声明创建Jdk动态代理则返回Jdk动态代理\n\t\t return new JdkDynamicAopProxy(config);\n\t\t}\n\t}\n}\n"],["body","\n"],["h1","SpringAOP进行代理的两大类"],["body","\n"],["headingLink","继承abstractadvisingbeanpostprocessor"],["heading","继承AbstractAdvisingBeanPostProcessor"],["body","\n"],["body","编程式手动进行代理"],["body","\n"],["headingLink","继承-abstractautoproxycreator"],["heading","继承 AbstractAutoProxyCreator"],["body","\n"],["body","自动从容器中获取 Adviosr 进行代理"],["body","\n"],["h1","SpringTargetSource是如何工作的"],["body","\n"],["headingLink","介绍"],["heading","介绍"],["body","\n"],["body","TargetSource 用于获取 AOP invocation 的 当前“目标”"],["body","\n"],["body","如果 TargetSource 是“静态的”，它将始终返回相同的目标，从而允许在 AOP 框架中进行优化。"],["body","\n"],["body","动态目标源可以支持池化、热插拔等。"],["body","\n"],["body","//返回目标类\nClass<?> getTargetClass();\n//每次调用是否会返回同一个类，如果为false 则AOP不会进行缓存，为true,AOP会进行缓存\nboolean isStatic();\n//获取目标类\nObject getTarget() throws Exception;\n// Release the given target object obtained from the getTarget() method, if any.\nvoid releaseTarget(Object target) throws Exception;\t\n"],["body","\n"],["body","普通场景下 包装了 被代理对象"],["body","\n"],["body","Spring动态获取"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-aop/SpringAop-自动代理.html"],["title","SpringAop-自动代理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","总结"],["body","\n\n"],["body","自动代理只需要 往容器中 注入Advisor"],["body","\n"],["body","并且在Bean中 标注 @Role(BeanDefinition.ROLE_INFRASTRUCTURE) 即可自动代理\n3. 对于JDK 加入接口即可\n2. 对于CGLIB，会将之前生成的对象替换掉"],["body","\n\n"],["h1","自动代理"],["body","\n"],["headingLink","abstractautoproxycreator"],["heading","AbstractAutoProxyCreator"],["body","\n"],["body","继承 ProxyProcessorSupport"],["body","\n"],["body","该类主要实现了"],["body","\n\n"],["body","不代理 基础设施类"],["body","\n"],["body","代理类的缓存：不对代理类进行二次代理"],["body","\n"],["body","自定义TargetResource 的处理"],["body","\n"],["body","代理对象的创建"],["body","\n\n"],["body","如何判断Bean是否因该被代理，这个功能交给子类，"],["body","\n"],["headingLink","abstractadvisorautoproxycreator"],["heading","AbstractAdvisorAutoProxyCreator"],["body","\n\n"],["body","此类主要负责Advisor的查找"],["body","\n"],["body","如果没有合适的Advisor则  返回DO_NOT_PROXY"],["body","\n\n"],["headingLink","查找用于该bean的advisor"],["heading","查找用于该Bean的advisor"],["body","\n"],["body","protected Object[] getAdvicesAndAdvisorsForBean(\n      Class<?> beanClass, String beanName, @Nullable TargetSource targetSource) {\n\n   List<Advisor> advisors = findEligibleAdvisors(beanClass, beanName);\n   if (advisors.isEmpty()) {\n      return DO_NOT_PROXY;\n   }\n   return advisors.toArray();\n}\n"],["body","\n"],["headingLink","查找可用advisor"],["heading","查找可用Advisor"],["body","\n\n"],["body","查找候选者"],["body","\n"],["body","匹配可用的"],["body","\n"],["body","子类扩展Advisor"],["body","\n"],["body","对Advisor排序"],["body","\n\n"],["body","protected List<Advisor> findEligibleAdvisors(Class<?> beanClass, String beanName) {\n   List<Advisor> candidateAdvisors = findCandidateAdvisors();\n   List<Advisor> eligibleAdvisors = findAdvisorsThatCanApply(candidateAdvisors, beanClass, beanName);\n   extendAdvisors(eligibleAdvisors);\n   if (!eligibleAdvisors.isEmpty()) {\n      eligibleAdvisors = sortAdvisors(eligibleAdvisors);\n   }\n   return eligibleAdvisors;\n}\n"],["body","\n"],["headingLink","查找候选者advisor"],["heading","查找候选者Advisor"],["body","\n\n"],["body","取bean工厂查找所有Advisor class的 类对象"],["body","\n"],["body","如果Advisor 能够增强 目标bean 则加入到候选者集合"],["body","\n\n"],["body","//org.springframework.aop.framework.autoproxy.BeanFactoryAdvisorRetrievalHelper#findAdvisorBeans\n\tpublic List<Advisor> findAdvisorBeans() {\n\t\t// Determine list of advisor bean names, if not cached already.\n\t\tString[] advisorNames = this.cachedAdvisorBeanNames;\n\t\tif (advisorNames == null) {\n\t\t\t// Do not initialize FactoryBeans here: We need to leave all regular beans\n\t\t\t// uninitialized to let the auto-proxy creator apply to them!\n\t\t\tadvisorNames = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(\n\t\t\t\t\tthis.beanFactory, Advisor.class, true, false);\n\t\t\tthis.cachedAdvisorBeanNames = advisorNames;\n\t\t}\n\t\tif (advisorNames.length == 0) {\n\t\t\treturn new ArrayList<>();\n\t\t}\n\n\t\tList<Advisor> advisors = new ArrayList<>();\n\t\tfor (String name : advisorNames) {\n\t\t\tif (isEligibleBean(name)) {\n\t\t\t\tif (this.beanFactory.isCurrentlyInCreation(name)) {\n\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\tlogger.trace(\"Skipping currently created advisor '\" + name + \"'\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tadvisors.add(this.beanFactory.getBean(name, Advisor.class));\n\t\t\t\t\t}\n\t\t\t\t\tcatch (BeanCreationException ex) {\n\t\t\t\t\t\tThrowable rootCause = ex.getMostSpecificCause();\n\t\t\t\t\t\tif (rootCause instanceof BeanCurrentlyInCreationException) {\n\t\t\t\t\t\t\tBeanCreationException bce = (BeanCreationException) rootCause;\n\t\t\t\t\t\t\tString bceBeanName = bce.getBeanName();\n\t\t\t\t\t\t\tif (bceBeanName != null && this.beanFactory.isCurrentlyInCreation(bceBeanName)) {\n\t\t\t\t\t\t\t\tif (logger.isTraceEnabled()) {\n\t\t\t\t\t\t\t\t\tlogger.trace(\"Skipping advisor '\" + name +\n\t\t\t\t\t\t\t\t\t\t\t\"' with dependency on currently created bean: \" + ex.getMessage());\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Ignore: indicates a reference back to the bean we're trying to advise.\n\t\t\t\t\t\t\t\t// We want to find advisors other than the currently created bean itself.\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow ex;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn advisors;\n\t}\n"],["body","\n"],["headingLink","匹配可用advisor"],["heading","匹配可用Advisor"],["body","\n\n"],["body","调用 AopUtils.findAdvisorsThatCanApply 匹配 候选者 advisor与 目标类是否 应该增强"],["body","\n"],["body","将 IntroductionAdvisor 与其他Advisor 分开匹配"],["body","\n"],["body","IntroductionAdvisor 按类匹配，PointcutAdvisor 按 类匹配、方法匹配"],["body","\n\n"],["body","//调用AopUtils的静态方法进行匹配\nprotected List<Advisor> findAdvisorsThatCanApply(\n      List<Advisor> candidateAdvisors, Class<?> beanClass, String beanName) {\n\n   ProxyCreationContext.setCurrentProxiedBeanName(beanName);\n   try {\n      return AopUtils.findAdvisorsThatCanApply(candidateAdvisors, beanClass);\n   }\n   finally {\n      ProxyCreationContext.setCurrentProxiedBeanName(null);\n   }\n}\n//循环匹配\npublic static List<Advisor> findAdvisorsThatCanApply(List<Advisor> candidateAdvisors, Class<?> clazz) {\n\t\tif (candidateAdvisors.isEmpty()) {\n\t\t\treturn candidateAdvisors;\n\t\t}\n\t\tList<Advisor> eligibleAdvisors = new ArrayList<>();\n\t\tfor (Advisor candidate : candidateAdvisors) {\n\t\t\tif (candidate instanceof IntroductionAdvisor && canApply(candidate, clazz)) {\n\t\t\t\teligibleAdvisors.add(candidate);\n\t\t\t}\n\t\t}\n\t\tboolean hasIntroductions = !eligibleAdvisors.isEmpty();\n\t\tfor (Advisor candidate : candidateAdvisors) {\n\t\t\tif (candidate instanceof IntroductionAdvisor) {\n\t\t\t\t// already processed\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (canApply(candidate, clazz, hasIntroductions)) {\n\t\t\t\teligibleAdvisors.add(candidate);\n\t\t\t}\n\t\t}\n\t\treturn eligibleAdvisors;\n}\n//单个匹配\npublic static boolean canApply(Advisor advisor, Class<?> targetClass, boolean hasIntroductions) {\n    if (advisor instanceof IntroductionAdvisor) {\n        return ((IntroductionAdvisor) advisor).getClassFilter().matches(targetClass);\n    }\n    else if (advisor instanceof PointcutAdvisor) {\n        PointcutAdvisor pca = (PointcutAdvisor) advisor;\n        return canApply(pca.getPointcut(), targetClass, hasIntroductions);\n    }\n    else {\n        // It doesn't have a pointcut so we assume it applies.\n        return true;\n    }\n}\n"],["body","\n"],["body","执行类与方法的匹配"],["body","\n"],["body","public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) {\n   Assert.notNull(pc, \"Pointcut must not be null\");\n   if (!pc.getClassFilter().matches(targetClass)) {\n      return false;\n   }\n\n   MethodMatcher methodMatcher = pc.getMethodMatcher();\n   if (methodMatcher == MethodMatcher.TRUE) {\n      // No need to iterate the methods if we're matching any method anyway...\n      return true;\n   }\n//如果是MethodIntroduction \n   IntroductionAwareMethodMatcher introductionAwareMethodMatcher = null;\n   if (methodMatcher instanceof IntroductionAwareMethodMatcher) {\n      introductionAwareMethodMatcher = (IntroductionAwareMethodMatcher) methodMatcher;\n   }\n\n   Set<Class<?>> classes = new LinkedHashSet<>();\n   if (!Proxy.isProxyClass(targetClass)) {\n      classes.add(ClassUtils.getUserClass(targetClass));\n   }\n   classes.addAll(ClassUtils.getAllInterfacesForClassAsSet(targetClass));\n\n   for (Class<?> clazz : classes) {\n      Method[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);\n      for (Method method : methods) {\n         if (introductionAwareMethodMatcher != null ?\n               introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :\n               methodMatcher.matches(method, targetClass)) {\n            return true;\n         }\n      }\n   }\n\n   return false;\n}\n"],["body","\n"],["headingLink","从advisor组织调用链"],["heading","从Advisor组织调用链"],["body","\n"],["body","//org.springframework.aop.framework.DefaultAdvisorChainFactory#getInterceptorsAndDynamicInterceptionAdvice\n\tpublic List<Object> getInterceptorsAndDynamicInterceptionAdvice(\n\t\t\tAdvised config, Method method, @Nullable Class<?> targetClass) {\n\n\t\t// This is somewhat tricky... We have to process introductions first,\n\t\t// but we need to preserve order in the ultimate list.\n\t\tAdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance();\n\t\tAdvisor[] advisors = config.getAdvisors();\n\t\tList<Object> interceptorList = new ArrayList<>(advisors.length);\n\t\tClass<?> actualClass = (targetClass != null ? targetClass : method.getDeclaringClass());\n\t\tBoolean hasIntroductions = null;\n\n\t\tfor (Advisor advisor : advisors) {\n\t\t\tif (advisor instanceof PointcutAdvisor) {\n\t\t\t\t// Add it conditionally.\n\t\t\t\tPointcutAdvisor pointcutAdvisor = (PointcutAdvisor) advisor;\n\t\t\t\tif (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) {\n\t\t\t\t\tMethodMatcher mm = pointcutAdvisor.getPointcut().getMethodMatcher();\n\t\t\t\t\tboolean match;\n\t\t\t\t\tif (mm instanceof IntroductionAwareMethodMatcher) {\n\t\t\t\t\t\tif (hasIntroductions == null) {\n\t\t\t\t\t\t\thasIntroductions = hasMatchingIntroductions(advisors, actualClass);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tmatch = ((IntroductionAwareMethodMatcher) mm).matches(method, actualClass, hasIntroductions);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmatch = mm.matches(method, actualClass);\n\t\t\t\t\t}\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tMethodInterceptor[] interceptors = registry.getInterceptors(advisor);\n\t\t\t\t\t\tif (mm.isRuntime()) {\n\t\t\t\t\t\t\t// Creating a new object instance in the getInterceptors() method\n\t\t\t\t\t\t\t// isn't a problem as we normally cache created chains.\n\t\t\t\t\t\t\tfor (MethodInterceptor interceptor : interceptors) {\n\t\t\t\t\t\t\t\tinterceptorList.add(new InterceptorAndDynamicMethodMatcher(interceptor, mm));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tinterceptorList.addAll(Arrays.asList(interceptors));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (advisor instanceof IntroductionAdvisor) {\n\t\t\t\tIntroductionAdvisor ia = (IntroductionAdvisor) advisor;\n\t\t\t\tif (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) {\n\t\t\t\t\tInterceptor[] interceptors = registry.getInterceptors(advisor);\n\t\t\t\t\tinterceptorList.addAll(Arrays.asList(interceptors));\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tInterceptor[] interceptors = registry.getInterceptors(advisor);\n\t\t\t\tinterceptorList.addAll(Arrays.asList(interceptors));\n\t\t\t}\n\t\t}\n\n\t\treturn interceptorList;\n\t}\n\n\n\tprivate static boolean hasMatchingIntroductions(Advisor[] advisors, Class<?> actualClass) {\n\t\tfor (Advisor advisor : advisors) {\n\t\t\tif (advisor instanceof IntroductionAdvisor) {\n\t\t\t\tIntroductionAdvisor ia = (IntroductionAdvisor) advisor;\n\t\t\t\tif (ia.getClassFilter().matches(actualClass)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-aop/README.html"],["title","spring-aop - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","AOP 术语"],["body","\n"],["body","在我们开始使用 AOP 工作之前，让我们熟悉一下 AOP 概念和术语。这些术语并不特定于 Spring，而是与 AOP 有关的。"],["body","\n"],["headingLink","aop概念"],["heading","AOP概念"],["body","\n"],["body","项"],["body","描述"],["body","\n"],["body","Aspect"],["body","给切点分类（以业务逻辑  划分各个切点的 逻辑实体类,例如事务控制是一个切面, 日志打印也是一个切面）"],["body","\n"],["body","Join point"],["body","被拦截的方法"],["body","\n"],["body","Advice"],["body","告诉AOP 在什么时候调用 切入的方法"],["body","\n"],["body","Pointcut"],["body","被拦截的方法 以一个表达式定义"],["body","\n"],["body","Introduction"],["body","引用允许你添加新方法或属性到现有的类中。"],["body","\n"],["body","Target object"],["body","被拦截方法的对象"],["body","\n"],["body","Weaving"],["body","Weaving 把方面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时，类加载时和运行时完成。"],["body","\n\n\n"],["headingLink","通知类型"],["heading","通知类型"],["body","\n"],["body","通知"],["body","描述"],["body","\n"],["body","前置通知"],["body","在一个方法执行之前，执行通知。"],["body","\n"],["body","后置通知"],["body","在一个方法执行之后，不考虑其结果，执行通知。"],["body","\n"],["body","返回后通知"],["body","在一个方法执行之后，只有在方法成功完成时，才能执行通知。"],["body","\n"],["body","抛出异常后通知"],["body","在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。"],["body","\n"],["body","环绕通知"],["body","在建议方法调用之前和之后，执行通知。"],["body","\n\n\n"],["h1","spring AOP的目标"],["body","\n"],["body","springAOP的目的不是与AspectJ竞争，提供最全面的AOP实现,而是提供与SpringIOC的无缝集成"],["body","\n"],["h1","AOP代理方式"],["body","\n\n"],["body","默认使用 JDK动态代理,也提供了 基于 CGLIB的 动态代理"],["body","\n"],["body","JDK动态代理 是基于接口的 代理"],["body","\n"],["body","CGLIB 基于 继承的代理"],["body","\n\n"],["h1","基于注解的AOP的步骤"],["body","\n"],["headingLink","启用aop代理功能"],["heading","启用AOP代理功能"],["body","\n"],["body","@Configuration\n@EnableAspectJAutoProxy\npublic class AppConfig {\n}\n"],["body","\n"],["body","<aop:aspectj-autoproxy/>\n"],["body","\n"],["headingLink","申明一个切面"],["heading","申明一个切面"],["body","\n"],["body","package org.xyz;\nimport org.aspectj.lang.annotation.Aspect;\n\n@Aspect\npublic class NotVeryUsefulAspect {\n\n}\n"],["body","\n"],["body","<bean id=\"myAspect\" class=\"org.xyz.NotVeryUsefulAspect\">\n    <!-- configure properties of the aspect here -->\n</bean>\n"],["body","\n"],["body","注意事项"],["body","\n\n"],["body","可以在xml中申明 切面类,也可以通过 @Aspect与 @Component 申明切面类"],["body","\n"],["body","切面类本身不能称为代理的目标对象"],["body","\n\n"],["headingLink","申明切点"],["heading","申明切点"],["body","\n"],["body","@Pointcut(\"execution(* transfer(..))\") // the pointcut expression\nprivate void anyOldTransfer() {} // the pointcut signature\n"],["body","\n"],["body","切入点表达式详见: AspectJ Programming Guide "],["body","\n"],["h1","aspectJ语法"],["body","\n"],["headingLink","语法定义"],["heading","语法定义"],["body","\n"],["body","MethodPattern = \n  [ModifiersPattern] TypePattern \n        [TypePattern . ] IdPattern (TypePattern | \"..\" , ... ) \n        [ throws ThrowsPattern ]\nConstructorPattern = \n  [ModifiersPattern ] \n        [TypePattern . ] new (TypePattern | \"..\" , ...) \n        [ throws ThrowsPattern ]\nFieldPattern = \n  [ModifiersPattern] TypePattern [TypePattern . ] IdPattern\nThrowsPattern = \n  [ ! ] TypePattern , ...\nTypePattern = \n    IdPattern [ + ] [ [] ... ]\n    | ! TypePattern\n    | TypePattern && TypePattern\n    | TypePattern || TypePattern\n    | ( TypePattern )  \nIdPattern =\n  Sequence of characters, possibly with special * and .. wildcards\nModifiersPattern =\n  [ ! ] JavaModifier  ...\n"],["body","\n"],["body","指示符"],["body","说明"],["body","\n"],["body","execution(MethodPattern)"],["body","匹配 执行方法 的签名"],["body","\n"],["body","execution(ConstructorPattern)"],["body","匹配构造函数"],["body","\n"],["body","within(TypePattern)"],["body","Picks out each join point "],["body","where the executing code is defined in a type matched by TypePattern."],["body","\n"],["body","this(Type or Id)"],["body","生成的代理对象 是 Type 或者 id 的一个实例,无法从静态实例对象中匹配"],["body","\n"],["body","target(Type or Id)"],["body","被代理的对象"],["body","\n\n\n"],["headingLink","pattern说明"],["heading","pattern说明"],["body","\n"],["body","pattern"],["body","说明"],["body","\n"],["body","MethodPattern"],["body","方法表达式,匹配方法"],["body","\n"],["body","ConstructorPattern"],["body","构造器表达式,匹配构造器"],["body","\n"],["body","TypePattern"],["body","类型表达式, 匹配某个类"],["body","\n"],["body","Type"],["body","全限定类名"],["body","\n\n\n"],["headingLink","指示符定义"],["heading","指示符定义"],["body","\n"],["headingLink","withintypepattern"],["heading","within(TypePattern)"],["body","\n"],["body","匹配包路径,"],["body","\n"],["body","模式"],["body","描述"],["body","\n"],["body","within(com.learn.all..*)"],["body","com.learn.all包及子包下的任何方法执行"],["body","\n"],["body","within(com.learn.service..IHelloService+)"],["body","com.learn.service包或所有子包下IHelloService类型及子类型的任何方法"],["body","\n"],["body","within(@com.learn..Secure *)"],["body","持有com.learn..Secure注解的类的任何方法，注解必须是在目标对象上声明，对在接口上声明的不起作用"],["body","\n\n\n"],["headingLink","executionmethodpattern"],["heading","execution(MethodPattern)"],["body","\n\n"],["body","拦截一个方法 (spriingAOP中主要用到的)"],["body","\n"],["body","语法"],["body","\n\n"],["body","execution(modifiers-pattern? ret-type-pattern declaring-type-pattern?name-pattern(param-pattern)throws-pattern?)\n//说明\n访问修饰符 返回值类型 包路径 方法名( 参数名 ) 抛出异常的返回值\n//示例\nexecution(public Integer com.weisanju.xjq.MethodName(*,String)\n"],["body","\n\n"],["body","注意点\n\n"],["body","除了返回值类型, 方法名,参数名 这三者,必选 其他的都可选"],["body","\n"],["body","星号 表示一个或多个字符"],["body","\n"],["body","param-pattern 有以下几种模式\n\n"],["body","()  表示空参"],["body","\n"],["body","(*) 表示一个任意类型的参数 的方法"],["body","\n"],["body","(*,String) 表示两个参数 ,第一个是任意类型,第二个是 string类型"],["body","\n"],["body","(..) 表示任意多个参数"],["body","\n\n"],["body","\n"],["body","this,target的作用\n\n"],["body","对 前面被PCD选中的类 进一步的筛选"],["body","\n"],["body","取得该对象作为入参"],["body","\n\n"],["body","\n\n"],["body","\n\n"],["headingLink","argstypepattern"],["heading","args(typepattern)"],["body","\n"],["body","指定参数类型"],["body","\n"],["headingLink","thistype"],["heading","this(type)"],["body","\n"],["body","用于返回 当前代理对象的 当前类型或者 父类或接口实现"],["body","\n"],["headingLink","targettype"],["heading","target(type)"],["body","\n"],["body","返回 当前被代理的对象"],["body","\n"],["headingLink","beanbeanid"],["heading","bean(beanId)"],["body","\n"],["body","拦截指定bean的名称的方法"],["body","\n"],["headingLink","within"],["heading","@within"],["body","\n"],["body","拦截 带有特定注解的类  的方法"],["body","\n"],["headingLink","target"],["heading","@target"],["body","\n"],["body","拦截 目标对象持有指定注解的 方法"],["body","\n"],["headingLink","args"],["heading","@args"],["body","\n"],["body","拦截参数持有指定注解的 方法"],["body","\n"],["headingLink","annotation"],["heading","@annotation"],["body","\n"],["body","拦截方法持有指定注解的 方法"],["body","\n"],["headingLink","declareparent"],["heading","@declareParent"],["body","\n"],["body","为某一个类引入一个新的接口 以及接口的实现"],["body","\n"],["body","    @DeclareParents(value = \"com.weisanju.aop.test.TestClass\",defaultImpl = DoSomethingImpl.class )\n    private DoSomething doSomething;\n    \n    DoSomething 必须为接口\n    DoSomethingImpl 必须为 DoSomething的实现类\n    value为 类型匹配符\n"],["body","\n\n"],["body","在 AOP切面与 引入点 都作用于一个类 "],["body","\n"],["body","则 引入的实现 是在 代理的对象 上, 即 this 而非target"],["body","\n\n"],["headingLink","类型匹配的通配符"],["heading","类型匹配的通配符"],["body","\n\n"],["body","\n"],["body","*：匹配任何数量字符；"],["body","\n"],["body","\n"],["body","\n"],["body","..：匹配任何数量字符的重复，如在类型模式中匹配任何数量子包；而在方法参数模式中匹配任何数量参数。"],["body","\n"],["body","\n"],["body","\n"],["body","+：匹配指定类型的子类型；仅能作为后缀放在类型模式后边。"],["body","\n"],["body","\n\n"],["headingLink","切入点表达式组合"],["heading","切入点表达式组合"],["body","\n"],["body","AspectJ使用 且（&&）、或（||）、非（！）来组合切入点表达式。"],["body","\n"],["h1","通知参数"],["body","\n"],["headingLink","joinpoint"],["heading","JoinPoint"],["body","\n"],["body","package org.aspectj.lang;  \nimport org.aspectj.lang.reflect.SourceLocation;  \npublic interface JoinPoint {  \n    String toString();         //连接点所在位置的相关信息  \n    String toShortString();     //连接点所在位置的简短相关信息  \n    String toLongString();     //连接点所在位置的全部相关信息  \n    Object getThis();         //返回AOP代理对象  \n    Object getTarget();       //返回目标对象  \n    Object[] getArgs();       //返回被通知方法参数列表  \n    Signature getSignature();  //返回当前连接点签名  \n    SourceLocation getSourceLocation();//返回连接点方法所在类文件中的位置  \n    String getKind();        //连接点类型  \n    StaticPart getStaticPart(); //返回连接点静态部分  \n}  \t\n"],["body","\n"],["headingLink","proceedingjoinpoint"],["heading","ProceedingJoinPoint"],["body","\n"],["body","\n"],["body","用于环绕通知，使用proceed()方法来执行目标方法"],["body","\n"],["body","\n"],["body","public interface ProceedingJoinPoint extends JoinPoint {  \n    public Object proceed() throws Throwable;  \n    public Object proceed(Object[] args) throws Throwable;  \n}\n"],["body","\n"],["headingLink","joinpointstaticpart"],["heading","JoinPoint.StaticPart"],["body","\n"],["body","\n"],["body","提供访问连接点的静态部分，如被通知方法签名、连接点类型等"],["body","\n"],["body","\n"],["body","public interface StaticPart {  \nSignature getSignature();    //返回当前连接点签名  \nString getKind();          //连接点类型  \n    int getId();               //唯一标识  \nString toString();         //连接点所在位置的相关信息  \n    String toShortString();     //连接点所在位置的简短相关信息  \nString toLongString();     //连接点所在位置的全部相关信息  \n}  \n"],["body","\n"],["headingLink","参数传递"],["heading","参数传递"],["body","\n\n"],["body","在Spring AOP中，除了execution和bean指示符不能传递参数给通知方法，其他指示符都可以将匹配的相应参数或对象自动传递给通知方法。"],["body","\n"],["body","JoinPoint、ProceedingJoinPoint或JoinPoint.StaticPart类型,这些类型对象会自动传入的，但必须作为第一个参数；"],["body","\n\n"],["body","@Before(args(param) && target(bean) && @annotation(secure)\",   \n        argNames=\"jp,param,bean,secure\")  \npublic void before5(JoinPoint jp, String param,\n IPointcutService pointcutService, Secure secure) {  \n……  \n}  \n"],["body","\n"],["headingLink","参数传递的实例"],["heading","参数传递的实例"],["body","\n"],["body","package com.weisanju.aop.aspect;\n\nimport com.weisanju.aop.annotaion.TimeElapse;\nimport com.weisanju.aop.entity.Person;\nimport com.weisanju.aop.interfaces.DoSomething;\nimport com.weisanju.aop.interfaces.impl.DoSomethingImpl;\nimport com.weisanju.aop.test.TestClass;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.*;\nimport org.springframework.stereotype.Component;\n\nimport java.text.MessageFormat;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\n@Aspect\n@Component\npublic class MyAspect {\n    @DeclareParents(value = \"com.weisanju.aop.test.TestClass\",defaultImpl = DoSomethingImpl.class )\n    private DoSomething doSomething;\n    @Pointcut(\"execution(* *log(..))\")\n    public void log(){}\n\n    @Around(\"log()\")\n    public void doLog(ProceedingJoinPoint joinPoint){\n        MessageFormat messageFormat = new MessageFormat(\"方法名%s,方法参数%s\");\n        System.out.print(\"方法开始执行:\");\n        Object[] args = joinPoint.getArgs();\n        String format = messageFormat.format(joinPoint.getSignature().getName(), Stream.of(args).map(Object::toString).collect(Collectors.joining()));\n        System.out.println(format);\n\n        try {\n            //joinPoint.proceed();\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n        }\n        System.out.println(\"方法执行完毕\");\n    }\n\n    @Around(\" @annotation(unit)  &&  args(person) && this(proxied) && target(target)\")\n    public String timeCount(ProceedingJoinPoint joinPoint, TimeElapse unit, Person person, DoSomething proxied, TestClass target){\n        String result = \"这是默认值\";\n        long start =System.currentTimeMillis();\n\n        try {\n            target.runElapse();\n            System.out.println(\"哈哈原来是这样用的\");\n\n            proxied.doSomething();\n            result= (String) joinPoint.proceed();\n        } catch (Throwable throwable) {\n            throwable.printStackTrace();\n        }\n        System.out.println(\"总耗时:\"+(System.currentTimeMillis() - start)/unit.value());\n        return result+person.toString();\n    }\n}\n\n"],["body","\n"],["h1","基于XML的配置"],["body","\n\n"],["body","定义一个config"],["body","\n"],["body","定义一个 切面"],["body","\n"],["body","定义一个切入点"],["body","\n"],["body","定义拦截的方法"],["body","\n\n"],["body","<aop:config>\n   <aop:aspect id=\"myAspect\" ref=\"aBean\">\n      <aop:pointcut id=\"businessService\" expression=\"execution(* com.xyz.myapp.service.*.*(..))\"/>\n      <aop:before pointcut-ref=\"businessService\" \n         method=\"doRequiredTask\"/>\n      <!-- an after advice definition -->\n      <aop:after pointcut-ref=\"businessService\" \n         method=\"doRequiredTask\"/>\n      <!-- an after-returning advice definition -->\n      <!--The doRequiredTask method must have parameter named retVal -->\n      <aop:after-returning pointcut-ref=\"businessService\"\n         returning=\"retVal\"\n         method=\"doRequiredTask\"/>\n      <!-- an after-throwing advice definition -->\n      <!--The doRequiredTask method must have parameter named ex -->\n      <aop:after-throwing pointcut-ref=\"businessService\"\n         throwing=\"ex\"\n         method=\"doRequiredTask\"/>\n      <!-- an around advice definition -->\n      <aop:around pointcut-ref=\"businessService\" \n         method=\"doRequiredTask\"/>\n   ...\n   </aop:aspect>\n</aop:config>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/1.spring容器启动-bean实例化流程.html"],["title","spring容器启动-bean实例化流程.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","实例化流程"],["body","\n"],["body","\n"],["body","org.springframework.context.support.AbstractApplicationContext#finishBeanFactoryInitialization"],["body","\n"],["body","\n"],["headingLink","实例化-内置bean以及其他-单例非延迟-bean"],["heading","实例化 内置Bean，以及其他 单例非延迟 bean"],["body","\n"],["body","protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {\n\t// 往容器中注入 conversionService的bean\n   if (beanFactory.containsBean(CONVERSION_SERVICE_BEAN_NAME) &&\n         beanFactory.isTypeMatch(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class)) {\n      beanFactory.setConversionService(\n            beanFactory.getBean(CONVERSION_SERVICE_BEAN_NAME, ConversionService.class));\n   }\n\n   // Register a default embedded value resolver if no bean post-processor\n   // (such as a PropertyPlaceholderConfigurer bean) registered any before:\n   // at this point, primarily for resolution in annotation attribute values.\n   if (!beanFactory.hasEmbeddedValueResolver()) {\n      beanFactory.addEmbeddedValueResolver(strVal -> getEnvironment().resolvePlaceholders(strVal));\n   }\n\n   // Initialize LoadTimeWeaverAware beans early to allow for registering their transformers early.\n   String[] weaverAwareNames = beanFactory.getBeanNamesForType(LoadTimeWeaverAware.class, false, false);\n   for (String weaverAwareName : weaverAwareNames) {\n      getBean(weaverAwareName);\n   }\n\n    // 停止使用临时类加载器进行类型匹配，置null\n   beanFactory.setTempClassLoader(null);\n\n    // 冻结(this.configurationFrozen = true;)所有beanDefinition，不让bean继续注册\n   beanFactory.freezeConfiguration();\n\n    // 实例化所有剩余的(非延迟-init)单例\n   beanFactory.preInstantiateSingletons();\n}\n"],["body","\n"],["headingLink","实例化所有单例非延迟bean"],["heading","实例化所有单例非延迟bean"],["body","\n"],["body","public void preInstantiateSingletons() throws BeansException {\n   if (logger.isTraceEnabled()) {\n      logger.trace(\"Pre-instantiating singletons in \" + this);\n   }\n\n   // Iterate over a copy to allow for init methods which in turn register new bean definitions.\n   // While this may not be part of the regular factory bootstrap, it does otherwise work fine.\n\t// 拿到所有beanName 初始化\n   List<String> beanNames = new ArrayList<>(this.beanDefinitionNames);\n\n    // 触发所有非懒加载的singleton bean的初始化\n   for (String beanName : beanNames) {\n     //将非RootBeanDefinition转换为RootBeanDefinition以方便后续操作，\n     //因为Spring上下文包括实例化所有Bean用的AbstractBeanDefinition是RootBeanDefinition\n      RootBeanDefinition bd = getMergedLocalBeanDefinition(beanName);\n      if (!bd.isAbstract() && bd.isSingleton() && !bd.isLazyInit()) { //不是抽象类 && 是单例 && 不是延迟加载\n         if (isFactoryBean(beanName)) { //判断是否factoryBean\n            Object bean = getBean(FACTORY_BEAN_PREFIX + beanName);//返回一个共享或独立的实例\n            if (bean instanceof FactoryBean) {//如果是FactoryBean 且配置了 需要立即加载则立即加载\n               FactoryBean<?> factory = (FactoryBean<?>) bean;\n               boolean isEagerInit;\n               if (System.getSecurityManager() != null && factory instanceof SmartFactoryBean) {\n                  isEagerInit = AccessController.doPrivileged(\n                        (PrivilegedAction<Boolean>) ((SmartFactoryBean<?>) factory)::isEagerInit,\n                        getAccessControlContext());\n               }\n               else {\n                  isEagerInit = (factory instanceof SmartFactoryBean &&\n                        ((SmartFactoryBean<?>) factory).isEagerInit());\n               }\n               if (isEagerInit) {\n                  getBean(beanName);\n               }\n            }\n         }\n         else { //非FactoryBean，直接加载\n            getBean(beanName);\n         }\n      }\n   }\n\n    // 为所有实现了 SmartInitializingSingleton 的bean触发初始化后回调\n   for (String beanName : beanNames) {\n      Object singletonInstance = getSingleton(beanName);//从单例缓存池中 获取单例对象\n      if (singletonInstance instanceof SmartInitializingSingleton) {\n         StartupStep smartInitialize = this.getApplicationStartup().start(\"spring.beans.smart-initialize\")\n               .tag(\"beanName\", beanName);\n         SmartInitializingSingleton smartSingleton = (SmartInitializingSingleton) singletonInstance;\n         if (System.getSecurityManager() != null) {\n            AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n               smartSingleton.afterSingletonsInstantiated();\n               return null;\n            }, getAccessControlContext());\n         }\n         else {\n            smartSingleton.afterSingletonsInstantiated();\n         }\n         smartInitialize.end();\n      }\n   }\n}\n"],["body","\n"],["headingLink","dogetbean"],["heading","doGetBean"],["body","\n"],["body","整个方法 分为 三部分"],["body","\n\n"],["body","第一部分是获取bean"],["body","\n"],["body","第二部分是创建bean"],["body","\n"],["body","第三部分是 对bean进行类型转换"],["body","\n\n"],["body","protected <T> T doGetBean(\n      String name, @Nullable Class<T> requiredType, @Nullable Object[] args, boolean typeCheckOnly)\n      throws BeansException {\n\n   String beanName = transformedBeanName(name);\n   Object bean;\n\n   // Eagerly check singleton cache for manually registered singletons.\n    //检查是否已创建过\n   Object sharedInstance = getSingleton(beanName);\n    //args为空时是获取bean，不为空是创建bean\n   if (sharedInstance != null && args == null) {\n      if (logger.isTraceEnabled()) {\n         if (isSingletonCurrentlyInCreation(beanName)) {\n            logger.trace(\"Returning eagerly cached instance of singleton bean '\" + beanName +\n                  \"' that is not fully initialized yet - a consequence of a circular reference\");\n         }\n         else {\n            logger.trace(\"Returning cached instance of singleton bean '\" + beanName + \"'\");\n         }\n      }\n      //返回对象bean实例，如果是(beanInstance instanceof FactoryBean)，则调用工厂bean方法获取bean对象，如果 带有&前缀则获取工厂bean本身\n      bean = getObjectForBeanInstance(sharedInstance, name, beanName, null);\n   }\n\n   else {\n      // Fail if we're already creating this bean instance:\n      // We're assumably within a circular reference.\n       //检查当前bean是否已被创建，如果是则认为是 循环引用了\n      if (isPrototypeCurrentlyInCreation(beanName)) {\n         throw new BeanCurrentlyInCreationException(beanName);\n      }\n\n      // 检查bean definition是否在该工厂已创建，如果不在该工厂创建，则使用其父工厂查找\n      BeanFactory parentBeanFactory = getParentBeanFactory();\n      if (parentBeanFactory != null && !containsBeanDefinition(beanName)) {\n         // Not found -> check parent.\n         String nameToLookup = originalBeanName(name);\n         if (parentBeanFactory instanceof AbstractBeanFactory) {\n            return ((AbstractBeanFactory) parentBeanFactory).doGetBean(\n                  nameToLookup, requiredType, args, typeCheckOnly);\n         }\n         else if (args != null) {//参数不为空，根据带参查找\n            // Delegation to parent with explicit args.\n            return (T) parentBeanFactory.getBean(nameToLookup, args);\n         }\n         else if (requiredType != null) {//要求类型不为空，要求类型查找\n            // No args -> delegate to standard getBean method.\n            return parentBeanFactory.getBean(nameToLookup, requiredType);\n         }\n         else {//否则只能根据 name查找\n            return (T) parentBeanFactory.getBean(nameToLookup);\n         }\n      }\n\n      if (!typeCheckOnly) {\n         markBeanAsCreated(beanName);\n      }\n\n      StartupStep beanCreation = this.applicationStartup.start(\"spring.beans.instantiate\")\n            .tag(\"beanName\", name);\n      try {\n         if (requiredType != null) {\n            beanCreation.tag(\"beanType\", requiredType::toString);\n         }\n         RootBeanDefinition mbd = getMergedLocalBeanDefinition(beanName);\n        //检查是否Abstract，是则抛异常\n         checkMergedBeanDefinition(mbd, beanName, args);\n\n         // Guarantee initialization of beans that the current bean depends on.\n         // 获取依赖的所有bean，先加载依赖\n         String[] dependsOn = mbd.getDependsOn();\n         if (dependsOn != null) {\n            for (String dep : dependsOn) {\n               if (isDependent(beanName, dep)) {\n                  throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                        \"Circular depends-on relationship between '\" + beanName + \"' and '\" + dep + \"'\");\n               }\n               registerDependentBean(dep, beanName);\n               try {\n                  getBean(dep);\n               }\n               catch (NoSuchBeanDefinitionException ex) {\n                  throw new BeanCreationException(mbd.getResourceDescription(), beanName,\n                        \"'\" + beanName + \"' depends on missing bean '\" + dep + \"'\", ex);\n               }\n            }\n         }\n\n         // 接下来就到了创建一个bean实例的过程，创建单例/多例\n         if (mbd.isSingleton()) {\n            ......\n            bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n         }\n\t\t//原型\n         else if (mbd.isPrototype()) {\n          \t.....\n            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n         }\n\t\t//其他作用域\n         else {\n\t\t\t.....\n            bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n         }\n      }\n      catch (BeansException ex) {\n         beanCreation.tag(\"exception\", ex.getClass().toString());\n         beanCreation.tag(\"message\", String.valueOf(ex.getMessage()));\n         cleanupAfterBeanCreationFailure(beanName);\n         throw ex;\n      }\n      finally {\n         beanCreation.end();\n      }\n   }\n\n   // Check if required type matches the type of the actual bean instance.类型校验与转换\n    ...\n   return (T) bean;\n}\n"],["body","\n"],["headingLink","实例化单例bean"],["heading","实例化单例bean"],["body","\n"],["headingLink","总方法"],["heading","总方法"],["body","\n"],["body","     // 接下来就到了创建一个bean实例的过程，创建单例/多例\nif (mbd.isSingleton()) {\n    sharedInstance = getSingleton(beanName, () -> {\n        try {\n            return createBean(beanName, mbd, args);\n        }\n        catch (BeansException ex) {\n            // Explicitly remove instance from singleton cache: It might have been put there\n            // eagerly by the creation process, to allow for circular reference resolution.\n            // Also remove any beans that received a temporary reference to the bean.\n            destroySingleton(beanName);\n            throw ex;\n        }\n    });\n    bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);\n}\n\n\npublic Object getSingleton(String beanName, ObjectFactory<?> singletonFactory) {\n    Assert.notNull(beanName, \"Bean name must not be null\");\n    synchronized (this.singletonObjects) {\n        //尝试从单例池中取，取不到则创建\n        Object singletonObject = this.singletonObjects.get(beanName);\n        if (singletonObject == null) {\n            if (this.singletonsCurrentlyInDestruction) {\n                throw new BeanCreationNotAllowedException(beanName,\n                                                          \"Singleton bean creation not allowed while singletons of this factory are in destruction \" +\n                                                          \"(Do not request a bean from a BeanFactory in a destroy method implementation!)\");\n            }\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Creating shared instance of singleton bean '\" + beanName + \"'\");\n            }\n            //创建前 先 记录该bean正在创建\n            beforeSingletonCreation(beanName);\n            boolean newSingleton = false;\n            boolean recordSuppressedExceptions = (this.suppressedExceptions == null);\n            if (recordSuppressedExceptions) {\n                this.suppressedExceptions = new LinkedHashSet<>();\n            }\n            try {\n                //创建bean\n                singletonObject = singletonFactory.getObject();\n                newSingleton = true;\n            }\n            catch (IllegalStateException ex) {\n                // Has the singleton object implicitly appeared in the meantime ->\n                // if yes, proceed with it since the exception indicates that state.\n                singletonObject = this.singletonObjects.get(beanName);\n                if (singletonObject == null) {\n                    throw ex;\n                }\n            }\n            catch (BeanCreationException ex) {\n                if (recordSuppressedExceptions) {\n                    for (Exception suppressedException : this.suppressedExceptions) {\n                        ex.addRelatedCause(suppressedException);\n                    }\n                }\n                throw ex;\n            }\n            finally {\n                if (recordSuppressedExceptions) {\n                    this.suppressedExceptions = null;\n                }\n                 //创建方法结束后 移除该 bean的创建中状态\n                afterSingletonCreation(beanName);\n            }\n            if (newSingleton) {\n                //创建成功后加入到 单例缓冲池中，并从二缓三缓中移除\n                addSingleton(beanName, singletonObject);\n            }\n        }\n        return singletonObject;\n    }\n}\n"],["body","\n"],["headingLink","实例化原型bean"],["heading","实例化原型bean"],["body","\n\n"],["body","维护当前线程创建bean的状态"],["body","\n"],["body","创建原型"],["body","\n"],["body","返回实例"],["body","\n\n"],["body","else if (mbd.isPrototype()) {\n    // It's a prototype -> create a new instance.\n    Object prototypeInstance = null;\n    try {\n        beforePrototypeCreation(beanName);\n        prototypeInstance = createBean(beanName, mbd, args);\n    }\n    finally {\n        afterPrototypeCreation(beanName);\n    }\n    bean = getObjectForBeanInstance(prototypeInstance, name, beanName, mbd);\n}\n"],["body","\n"],["body","protected void beforePrototypeCreation(String beanName) {\n   Object curVal = this.prototypesCurrentlyInCreation.get();\n   if (curVal == null) {\n      this.prototypesCurrentlyInCreation.set(beanName);\n   }\n   else if (curVal instanceof String) {\n      Set<String> beanNameSet = new HashSet<>(2);\n      beanNameSet.add((String) curVal);\n      beanNameSet.add(beanName);\n      this.prototypesCurrentlyInCreation.set(beanNameSet);\n   }\n   else {\n      Set<String> beanNameSet = (Set<String>) curVal;\n      beanNameSet.add(beanName);\n   }\n}\n"],["body","\n"],["headingLink","其他作用域"],["heading","其他作用域"],["body","\n\n"],["body","创建前 标明 正在创建"],["body","\n"],["body","子类实现 创建bean逻辑"],["body","\n"],["body","创建后 标明 创建结束"],["body","\n\n"],["body","{\n   String scopeName = mbd.getScope();\n   if (!StringUtils.hasLength(scopeName)) {\n      throw new IllegalStateException(\"No scope name defined for bean ´\" + beanName + \"'\");\n   }\n   Scope scope = this.scopes.get(scopeName);\n   if (scope == null) {\n      throw new IllegalStateException(\"No Scope registered for scope name '\" + scopeName + \"'\");\n   }\n   try {\n      Object scopedInstance = scope.get(beanName, () -> {\n         beforePrototypeCreation(beanName);\n         try {\n            return createBean(beanName, mbd, args);\n         }\n         finally {\n            afterPrototypeCreation(beanName);\n         }\n      });\n      bean = getObjectForBeanInstance(scopedInstance, name, beanName, mbd);\n   }\n   catch (IllegalStateException ex) {\n      throw new ScopeNotActiveException(beanName, scopeName, ex);\n   }\n}\n"],["body","\n"],["headingLink","类型校验与转换"],["heading","类型校验与转换"],["body","\n\n"],["body","如果要求的类型与 bean实际的类型不符"],["body","\n"],["body","则尝试使用内置的 转换器 转换"],["body","\n\n"],["body","   if (requiredType != null && !requiredType.isInstance(bean)) {\n      try {\n         T convertedBean = getTypeConverter().convertIfNecessary(bean, requiredType);\n         if (convertedBean == null) {\n            throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n         }\n         return convertedBean;\n      }\n      catch (TypeMismatchException ex) {\n         if (logger.isTraceEnabled()) {\n            logger.trace(\"Failed to convert bean '\" + name + \"' to required type '\" +\n                  ClassUtils.getQualifiedName(requiredType) + \"'\", ex);\n         }\n         throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass());\n      }\n   }\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/applicationContext与BeanFactory的区别.html"],["title","applicationContext与BeanFactory的区别.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","beanfactory与applicationcontext的区别"],["heading","BeanFactory与ApplicationContext的区别"],["body","\n"],["headingLink","功能范围"],["heading","功能范围"],["body","\n"],["body","BeanFactory"],["body","\n"],["body","读取bean配置文档，管理bean的加载、实例化，控制bean的生命周期，维护bean之间的依赖关系"],["body","\n"],["body","ApplicationContext"],["body","\n\n"],["body","国际化（MessageSource）"],["body","\n"],["body","统一的资源文件访问方式，如URL和文件（ResourceLoader）"],["body","\n"],["body","事件机制（ApplicationEventPublisher）"],["body","\n"],["body","载入多个（有继承关系）上下文 ，使得每一个上下文都专注于一个特定的层次，比如应用的web层"],["body","\n"],["body","AOP（拦截器）"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/postprocessor/README.html"],["title","postprocessor - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","InstantiationAwareBeanPostProcessor"],["body","\n"],["body","InstantiationAwareBeanPostProcessor接口是BeanPostProcessor的子接口，通过接口字面意思翻译该接口的作用是感知Bean实例话的处理器"],["body","\n"],["body","方法"],["body","描述"],["body","\n"],["body","postProcessBeforeInitialization"],["body","BeanPostProcessor接口中的方法,在Bean的自定义初始化方法之前执行"],["body","\n"],["body","postProcessAfterInitialization"],["body","BeanPostProcessor接口中的方法 在Bean的自定义初始化方法执行完成之后执行"],["body","\n"],["body","postProcessBeforeInstantiation"],["body","自身方法，是最先执行的方法，它在目标对象实例化之前调用，该方法的返回值类型是Object，我们可以返回任何类型的值。由于这个时候目标对象还未实例化，所以这个返回值可以用来代替原本该生成的目标对象的实例(比如代理对象)。如果该方法的返回值代替原本该生成的目标对象，后续只有postProcessAfterInitialization方法会调用，其它方法不再调用；否则按照正常的流程走"],["body","\n"],["body","postProcessAfterInstantiation"],["body","在目标对象实例化之后调用，这个时候对象已经被实例化，但是该实例的属性还未被设置，都是null。因为它的返回值是决定要不要调用postProcessPropertyValues方法的其中一个因素（因为还有一个因素是mbd.getDependencyCheck()）；如果该方法返回false,并且不需要check，那么postProcessPropertyValues就会被忽略不执行；如果返回true，postProcessPropertyValues就会被执行"],["body","\n"],["body","postProcessPropertyValues"],["body","对属性值进行修改，如果postProcessAfterInstantiation方法返回false，该方法可能不会被调用。可以在该方法内对属性值进行修改"],["body","\n\n\n"],["h1","postProcessBeforeInstantiation"],["body","\n"],["body","在目标Bean实例化前执行此方法，返回的 Bean 对象可能是要使用的代理，而不是目标Bean"],["body","\n"],["body","有效抑制目标Bean的默认实例化"],["body","\n"],["body","如果通过此方法返回非空对象，则Bean创建过程 短路"],["body","\n"],["h1","postProcessAfterInstantiation"],["body","\n\n"],["body","在 bean通过构造器或工厂方法初始化后，执行指定的操作"],["body","\n"],["body","发生于Spring属性填充（依赖注入）（显示属性引用或 自动注入）"],["body","\n"],["body","对给定bean 执行自定义字段注入,这是一个理想的回调，"],["body","\n"],["body","在Spring自动注入依赖之前、"],["body","\n\n"],["body","返回值"],["body","\n\n"],["body","如果属性应该设置在豆上， 则返回true"],["body","\n"],["body","如果属性填充应该被跳过则返回 false"],["body","\n"],["body","返回false 会阻止后续的 InstantiationAwareBeanPostProcessor 实例调用"],["body","\n\n"],["h1","postProcessProperties"],["body","\n"],["body","pvs"],["body","\n"],["body","工厂即将应用的属性值"],["body","\n"],["body","bean"],["body","\n"],["body","已经实例化的bean，但是属性还未设置"],["body","\n"],["body","beanName "],["body","\n"],["body","bean名称"],["body","\n"],["body","返回"],["body","\n"],["body","应用与bean的实际属性值"],["body","\n"],["body","可以返回 PropertyValues 实例传递"],["body","\n"],["body","或者返回 null"],["body","\n"],["h1","SmartInstantiationAwareBeanPostProcessor"],["body","\n\n"],["body","Extension of the InstantiationAwareBeanPostProcessor interface"],["body","\n"],["body","预测 处理bean的 实际类型 回调"],["body","\n\n"],["headingLink","predictbeantype"],["heading","predictBeanType"],["body","\n"],["body","预测bean类型，这个类型最终从 postProcessBeforeInstantiation 返回"],["body","\n"],["body","Params:\nbeanClass – the raw class of the bean\nbeanName – the name of the bean"],["body","\n"],["body","Returns:\nthe type of the bean, or null if not predictable\nThrows:\nBeansException – in case of errors"],["body","\n"],["headingLink","determinecandidateconstructors"],["heading","determineCandidateConstructors"],["body","\n"],["body","Determine the candidate constructors to use for the given bean.\nThe default implementation returns null.\nParams:\nbeanClass – the raw class of the bean (never null)\nbeanName – the name of the bean\nReturns:\nthe candidate constructors, or null if none specified"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring组合注解.html"],["title","spring组合注解.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","java注解"],["body","\n"],["body","详见 java注解"],["body","\n"],["h1","spring组合注解"],["body","\n\n"],["body","@AliasFor是用于为注解属性声明别名的注解，从Spring Framework 4.2开始，核心Spring中的几个注释已更新为使用@AliasFor配置其内部属性别名。"],["body","\n"],["body","通过  @AliasFor 注解 实现了 Spring的组合注解功能"],["body","\n\n"],["h1","别名  @AliasFor"],["body","\n"],["body","在 Spring 中别名可以分为以下几类："],["body","\n\n"],["body","\n"],["body","显式别名（xplicit Aliases） "],["body","\n"],["body","如果一个注解中的两个成员通过 @AliasFor声明后互为别名，那么它们是显式别名"],["body","\n"],["body","\n"],["body","\n"],["body","\n"],["body","隐式别名（Implicit Aliases）"],["body","\n"],["body","如果一个注解中的两个或者更多成员通过@AliasFor声明去覆盖同一个元注解的成员值，它们就是隐式别名"],["body","\n"],["body","\n"],["body","\n"],["body","\n"],["body","传递隐式别名（Transitive Implicit Aliases）"],["body","\n"],["body","如果一个注解中的两个或者更多成员通过@AliasFor声明去覆盖元注解中的不同成员，但是实际上因为覆盖的传递性导致最终覆盖的是元注解中的同一个成员，那么它们就是传递隐式别名"],["body","\n"],["body","\n"],["body","\n\n"],["body","以上三类都需要满足以下条件："],["body","\n\n"],["body","\n"],["body","属性类型相同"],["body","\n"],["body","\n"],["body","\n"],["body","属性方法必须存在默认值"],["body","\n"],["body","\n"],["body","\n"],["body","属性默认值必须相同"],["body","\n"],["body","\n\n"],["h1","属性覆盖原理"],["body","\n"],["body","\n"],["body","java本身不会执行 @AliasFor语义，通过AnnotatedElementUtils 支持实现"],["body","\n"],["body","\n\n"],["body","\n"],["body","与Java中的任何注释一样，仅仅是@AliasFor本身的存在不会强制执行别名语义。要强制执行别名语义，必须通过AnnotationUtils等类 中的方法加载注解。"],["body","\n"],["body","\n"],["body","\n"],["body","在幕后，Spring将通过将注释包装在一个动态代理中来合成注解，该代理透明地为使用@AliasFor注解的注解属性强制执行属性别名语义。"],["body","\n"],["body","\n"],["body","\n"],["body","类似地，当在注解层次结构中使用@AliasFor时，AnnotatedElementUtils支持显式元注解属性重写。"],["body","\n"],["body","\n"],["body","\n"],["body","通常，您不需要自己手动合成注解，因为当在Spring管理的组件上查找注解时，Spring将透明地为您合成注解。到了Spring5.2则通过MergedAnnotations加载注解。"],["body","\n"],["body","\n\n"],["body","@Test\n@GetMapping(value = \"/GetMapping\", consumes = MediaType.APPLICATION_JSON_VALUE)\npublic void test() throws NoSuchMethodException {\n    Method method = ReflectUtils.findDeclaredMethod(\n            AliasForTest.class, \"test\", null);\n\n    // AnnotationUtils 不支持注解属性覆盖\n    RequestMapping requestMappingAnn1 = AnnotationUtils.getAnnotation(method, RequestMapping.class);\n    Assert.assertEquals(new String[]{}, requestMappingAnn1.value());\n    Assert.assertEquals(new String[]{}, requestMappingAnn1.consumes());\n\n    // AnnotatedElementUtils 支持注解属性覆盖\n    RequestMapping requestMappingAnn2 = AnnotatedElementUtils.getMergedAnnotation(method, RequestMapping.class);\n    Assert.assertEquals(new String[]{\"/GetMapping\"}, requestMappingAnn2.value());\n    Assert.assertEquals(new String[]{MediaType.APPLICATION_JSON_VALUE}, requestMappingAnn2.consumes());\n}\n"],["body","\n"],["h1","AnnotationUtils 源码分析"],["body","\n"],["body","AnnotationUtils 解决 注解别名，包括显式别名、隐式别名、传递的隐式别名，还可以查的指定注解的属性信息。AnnotationUtils 底层使用动态代理的方式处理注解别名的问题。"],["body","\n"],["headingLink","get-系列注解查找"],["heading","get* 系列注解查找"],["body","\n"],["body","\n"],["body","get 遵循 JDK 的注解查找语义，只是增加了一级元注解的查找。"],["body","\n"],["body","\n"],["body","public static <A extends Annotation> A getAnnotation(Annotation annotation, Class<A> annotationType) {\n    // 1. 直接查找本地注解\n    if (annotationType.isInstance(annotation)) {\n        return synthesizeAnnotation((A) annotation);\n    }\n    // 2. 元注解上查找，注意相对于 find* 而言，这里只查找一级元注解\n    Class<? extends Annotation> annotatedElement = annotation.annotationType();\n    try {\n        A metaAnn = annotatedElement.getAnnotation(annotationType);\n        return (metaAnn != null ? synthesizeAnnotation(metaAnn, annotatedElement) : null);\n    }\n    catch (Throwable ex) {\n        handleIntrospectionFailure(annotatedElement, ex);\n        return null;\n    }\n}\n"],["body","\n"],["headingLink","find-系列注解查找"],["heading","find* 系列注解查找"],["body","\n"],["body","\n"],["body","遵循 JDK 的注解查找语义，只是增加了多级元注解的查找。"],["body","\n"],["body","\n"],["body","// visited 表示已经查找的元素，Spring 的递归很多都用到了这个参数\nprivate static <A extends Annotation> A findAnnotation(\n        AnnotatedElement annotatedElement, Class<A> annotationType, Set<Annotation> visited) {\n    try {\n        // 1. 本地注解查找\n        A annotation = annotatedElement.getDeclaredAnnotation(annotationType);\n        if (annotation != null) {\n            return annotation;\n        }\n        // 2. 元注解上查找\n        for (Annotation declaredAnn : getDeclaredAnnotations(annotatedElement)) {\n            Class<? extends Annotation> declaredType = declaredAnn.annotationType();\n            if (!isInJavaLangAnnotationPackage(declaredType) && visited.add(declaredAnn)) {\n                // 3. 元注解上递归查找\n                annotation = findAnnotation((AnnotatedElement) declaredType, annotationType, visited);\n                if (annotation != null) {\n                    return annotation;\n                }\n            }\n        }\n    }\n    catch (Throwable ex) {\n        handleIntrospectionFailure(annotatedElement, ex);\n    }\n    return null;\n}\n"],["body","\n"],["headingLink","synthesizeannotation-动态代理解决别名问题"],["heading","synthesizeAnnotation 动态代理解决别名问题"],["body","\n"],["body","static <A extends Annotation> A synthesizeAnnotation(A annotation, @Nullable Object annotatedElement) {\n    // 1. SynthesizedAnnotation 为一个标记，表示已经动态代理过了\n    //    hasPlainJavaAnnotationsOnly 如果是 java 中的注解不可能有注解别名，直接返回\n    if (annotation instanceof SynthesizedAnnotation || hasPlainJavaAnnotationsOnly(annotatedElement)) {\n        return annotation;\n    }\n\n    // 2. 判断是否需要进行动态代理，即注解中存在别名，包括显示别名、隐式别名、传递的隐式别名\n    Class<? extends Annotation> annotationType = annotation.annotationType();\n    if (!isSynthesizable(annotationType)) {\n        return annotation;\n    }\n\n    // 3. AnnotationAttributeExtractor 用于从注解 annotation 中提取属性的值\n    DefaultAnnotationAttributeExtractor attributeExtractor =\n            new DefaultAnnotationAttributeExtractor(annotation, annotatedElement);\n    // 4. SynthesizedAnnotationInvocationHandler 动态代理的类\n    InvocationHandler handler = new SynthesizedAnnotationInvocationHandler(attributeExtractor);\n\n    // 5. 接口中有 SynthesizedAnnotation，并返回动态代理的对象\n    Class<?>[] exposedInterfaces = new Class<?>[] {annotationType, SynthesizedAnnotation.class};\n    return (A) Proxy.newProxyInstance(annotation.getClass().getClassLoader(), exposedInterfaces, handler);\n}\n"],["body","\n"],["body","public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n    if (ReflectionUtils.isEqualsMethod(method)) {\n        return annotationEquals(args[0]);\n    }\n    if (ReflectionUtils.isHashCodeMethod(method)) {\n        return annotationHashCode();\n    }\n    if (ReflectionUtils.isToStringMethod(method)) {\n        return annotationToString();\n    }\n    // 注解的 annotationType 返回注解的 Class 类型\n    if (AnnotationUtils.isAnnotationTypeMethod(method)) {\n        return annotationType();\n    }\n    if (!AnnotationUtils.isAttributeMethod(method)) {\n        throw new AnnotationConfigurationException(String.format(\n                \"Method [%s] is unsupported for synthesized annotation type [%s]\", method, annotationType()));\n    }\n    // 真正获取注解的属性值\n    return getAttributeValue(method);\n}\n"],["body","\n"],["h1","示例"],["body","\n"],["body","@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.ANNOTATION_TYPE,ElementType.TYPE})\npublic @interface DemoEnum01 {\n    String value() default \"111\";\n\n    String name() default \"\";\n}\n"],["body","\n"],["body","@Retention(RetentionPolicy.RUNTIME)\n@Target({ElementType.ANNOTATION_TYPE,ElementType.TYPE})\n@DemoEnum01()\npublic @interface Demo222 {\n    @AliasFor(annotation = DemoEnum01.class)\n    String value() default \"3333\";\n    @AliasFor(annotation = DemoEnum01.class)\n    String name();\n}\n"],["body","\n"],["body","public class MainTest {\n    public static void main(String[] args) {\n        Annotation annotation = AnnotatedElementUtils.getMergedAnnotation(PersonEntity.class, DemoEnum01.class);\n        System.out.println(annotation);\n    }\n}\n\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/3.Spring依赖注入与初始化.html"],["title","Spring依赖注入与初始化.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","依赖注入"],["body","\n"],["headingLink","调用栈"],["heading","调用栈"],["body","\n"],["body","AbstractBeanFactory#doGetBean\n    AbstractAutowireCapableBeanFactory#createBean\n        AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation\n        AbstractAutowireCapableBeanFactory#doCreateBean\n            AbstractAutowireCapableBeanFactory#createBeanInstance\n            AbstractAutowireCapableBeanFactory#populateBean\n"],["body","\n"],["headingLink","依赖注入-1"],["heading","依赖注入"],["body","\n"],["body","protected void populateBean(String beanName, RootBeanDefinition mbd, @Nullable BeanWrapper bw) {\n   if (bw == null) {\n      if (mbd.hasPropertyValues()) {\n         throw new BeanCreationException(\n               mbd.getResourceDescription(), beanName, \"Cannot apply property values to null instance\");\n      }\n      else {\n         // Skip property population phase for null instance.\n         return;\n      }\n   }\n\n   // Give any InstantiationAwareBeanPostProcessors the opportunity to modify the\n   // state of the bean before properties are set. This can be used, for example,\n   // to support styles of field injection.\n   if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {\n      for (InstantiationAwareBeanPostProcessor bp : getBeanPostProcessorCache().instantiationAware) {\n         if (!bp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) {\n            return;\n         }\n      }\n   }\n\n   PropertyValues pvs = (mbd.hasPropertyValues() ? mbd.getPropertyValues() : null);\n\n   int resolvedAutowireMode = mbd.getResolvedAutowireMode();\n   if (resolvedAutowireMode == AUTOWIRE_BY_NAME || resolvedAutowireMode == AUTOWIRE_BY_TYPE) {\n      MutablePropertyValues newPvs = new MutablePropertyValues(pvs);\n      // Add property values based on autowire by name if applicable.\n      if (resolvedAutowireMode == AUTOWIRE_BY_NAME) {\n         autowireByName(beanName, mbd, bw, newPvs);\n      }\n      // Add property values based on autowire by type if applicable.\n      if (resolvedAutowireMode == AUTOWIRE_BY_TYPE) {\n         autowireByType(beanName, mbd, bw, newPvs);\n      }\n      pvs = newPvs;\n   }\n\n   boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();\n   boolean needsDepCheck = (mbd.getDependencyCheck() != AbstractBeanDefinition.DEPENDENCY_CHECK_NONE);\n\n   PropertyDescriptor[] filteredPds = null;\n   if (hasInstAwareBpps) {\n      if (pvs == null) {\n         pvs = mbd.getPropertyValues();\n      }\n      for (InstantiationAwareBeanPostProcessor bp : getBeanPostProcessorCache().instantiationAware) {\n         PropertyValues pvsToUse = bp.postProcessProperties(pvs, bw.getWrappedInstance(), beanName);\n         if (pvsToUse == null) {\n            if (filteredPds == null) {\n               filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);\n            }\n            pvsToUse = bp.postProcessPropertyValues(pvs, filteredPds, bw.getWrappedInstance(), beanName);\n            if (pvsToUse == null) {\n               return;\n            }\n         }\n         pvs = pvsToUse;\n      }\n   }\n   if (needsDepCheck) {\n      if (filteredPds == null) {\n         filteredPds = filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);\n      }\n      checkDependencies(beanName, mbd, filteredPds, pvs);\n   }\n\n   if (pvs != null) {\n      applyPropertyValues(beanName, mbd, bw, pvs);\n   }\n}\n"],["body","\n"],["h1","初始化"],["body","\n"],["headingLink","调用栈-1"],["heading","调用栈"],["body","\n"],["body","AbstractBeanFactory#doGetBean\n    AbstractAutowireCapableBeanFactory#createBean\n        AbstractAutowireCapableBeanFactory#resolveBeforeInstantiation\n        AbstractAutowireCapableBeanFactory#doCreateBean\n            AbstractAutowireCapableBeanFactory#createBeanInstance\n            AbstractAutowireCapableBeanFactory#populateBean\n            AbstractAutowireCapableBeanFactory#initializeBean\n                AbstractAutowireCapableBeanFactory#invokeAwareMethods //调用 Aware方法\n                AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsBeforeInitialization //调用 postProcess\n                    BeanPostProcessor#postProcessBeforeInitialization //beforeInitialization\n                AbstractAutowireCapableBeanFactory#invokeInitMethods //调用初始化方法\n                    InitializingBean#afterPropertiesSet //InitializingBean类\n                    AbstractAutowireCapableBeanFactory#invokeCustomInitMethod //自定义初始化方法\n                AbstractAutowireCapableBeanFactory#applyBeanPostProcessorsAfterInitialization //afterInitializion\n"],["body","\n"],["headingLink","源码"],["heading","源码"],["body","\n"],["body","\tprotected Object initializeBean(String beanName, Object bean, @Nullable RootBeanDefinition mbd) {\n\t\tif (System.getSecurityManager() != null) {\n\t\t\tAccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n\t\t\t\tinvokeAwareMethods(beanName, bean);\n\t\t\t\treturn null;\n\t\t\t}, getAccessControlContext());\n\t\t}\n\t\telse {\n\t\t\tinvokeAwareMethods(beanName, bean);\n\t\t}\n\n\t\tObject wrappedBean = bean;\n\t\tif (mbd == null || !mbd.isSynthetic()) {\n\t\t\twrappedBean = applyBeanPostProcessorsBeforeInitialization(wrappedBean, beanName);\n\t\t}\n\n\t\ttry {\n\t\t\tinvokeInitMethods(beanName, wrappedBean, mbd);\n\t\t}\n\t\tcatch (Throwable ex) {\n\t\t\tthrow new BeanCreationException(\n\t\t\t\t\t(mbd != null ? mbd.getResourceDescription() : null),\n\t\t\t\t\tbeanName, \"Invocation of init method failed\", ex);\n\t\t}\n\t\tif (mbd == null || !mbd.isSynthetic()) {\n\t\t\twrappedBean = applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);\n\t\t}\n\n\t\treturn wrappedBean;\n\t}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springframework/MessageSource.html"],["title","MessageSource.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springframework/资源抽象.html"],["title","资源抽象.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","资源抽象"],["body","\n"],["headingLink","类图"],["heading","类图"],["body","\n"],["body","classDiagram\nclass InputStreamSource{\n\tInputStream getInputStream()\n}\n\nInputStreamSource --|> EncodedResource:带字符集指定的Resource\n\nclass Resource{\n\tisOpen\n\tisFile\n\tURL\n\tURI\n\tfilename\n\tdescription\n\tboolean exists();\n    long contentLength()\n    long lastModified()\n    Resource createRelative(String relativePath)\n}\n\nclass ContextResource{\n\tString getPathWithinContext();\n}\n\nInputStreamSource --|> Resource\n\nResource --|> ContextResource:基于上下文的资源\nResource --|> AbstractResource:实现基本的 exists contentLength lastModified\nResource --|> WritableResource:可写的资源\n\n\nAbstractResource --|> DescriptiveResource:占位符，不用于实际读取\nAbstractResource --|> AbstractFileResolvingResource: 基于File\nAbstractResource --|> InputStreamResource:基于InputStream的Resource\nAbstractResource --|> FileSystemResource:基于文件系统的\nAbstractResource --|> ByteArrayResource:基于字节数组的\nAbstractResource --|> PathResource:基于Path对象的Resource\n\nAbstractFileResolvingResource --|> UrlResource:基于URL，URI的实现\nAbstractFileResolvingResource --|> ClassPathResource:基于classPath下的实现\nAbstractFileResolvingResource  --|> ServletContextResource:基于ServletContext的实现\n\n"],["body","\n"],["h1","资源载入"],["body","\n\n"],["body","方便 载入resource "],["body","\n"],["body","支持 通配符匹配"],["body","\n\n"],["headingLink","类图-1"],["heading","类图"],["body","\n"],["body","classDiagram\nclass ResourceLoader{\n\tClassLoader getClassLoader();\t\n    Resource getResource(String location);\t\n}\n\nclass ResourcePatternResolver{\n\tResource[] getResources(String locationPattern)\n}\n\nResourceLoader--|> ResourcePatternResolver:classpath*\nResourcePatternResolver --|> PathMatchingResourcePatternResolver:路径匹配\nPathMatchingResourcePatternResolver --|> ServletContextResourcePatternResolver:基于ServletContext的路径匹配\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springframework/类型转换.html"],["title","类型转换.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","简介"],["body","\n"],["body","spring3 引入了一个 core.convert 包,提供了 一个通用类型转换系统"],["body","\n"],["h1","接口定义"],["body","\n"],["body","1对1转换"],["body","\n"],["body","package org.springframework.core.convert.converter;\n\npublic interface Converter<S, T> {\n\n    T convert(S source);\n}\n"],["body","\n"],["body","实现范例"],["body","\n"],["body","package org.springframework.core.convert.support;\n\nfinal class StringToInteger implements Converter<String, Integer> {\n\n    public Integer convert(String source) {\n        return Integer.valueOf(source);\n    }\n\n"],["body","\n"],["h1","注意事项"],["body","\n\n"],["body","对每一个  convert(S) 的调用  ,入参 要保证不为空"],["body","\n"],["body","如果转换失败,可能会抛出任何未检查的异常"],["body","\n"],["body","如果参数不正确则 抛出IllegalArgumentException "],["body","\n"],["body","请确保 转换线程安全的"],["body","\n"],["body","内置实现 在 core.convert.support 包中"],["body","\n\n"],["h1","使用 ConverterFactory"],["body","\n"],["body","1 对 多 转换"],["body","\n"],["body","\n"],["body","当你需要集中你的转换逻辑 转换某一类的所有继承子类 例如 ( String To Enum )"],["body","\n"],["body","\n"],["body","package org.springframework.core.convert.converter;\n\npublic interface ConverterFactory<S, R> {\n\n    <T extends R> Converter<S, T> getConverter(Class<T> targetType);\n}\n"],["body","\n"],["body","示例"],["body","\n"],["body","package org.springframework.core.convert.support;\n\nfinal class StringToEnumConverterFactory implements ConverterFactory<String, Enum> {\n\n    public <T extends Enum> Converter<String, T> getConverter(Class<T> targetType) {\n        return new StringToEnumConverter(targetType);\n    }\n\n    private final class StringToEnumConverter<T extends Enum> implements Converter<String, T> {\n\n        private Class<T> enumType;\n\n        public StringToEnumConverter(Class<T> enumType) {\n            this.enumType = enumType;\n        }\n\n        public T convert(String source) {\n            return (T) Enum.valueOf(this.enumType, source.trim());\n        }\n    }\n}\n"],["body","\n"],["h1","使用 GenericConverter"],["body","\n"],["body","N:N 的转化"],["body","\n"],["body","When you require a sophisticated Converter implementation, consider using the GenericConverter interface. "],["body","\n"],["body","\n"],["body","当你需要复杂的转换,可以实现GenericConverter ,允许在转换时获取 字段注解,签名,等上下文"],["body","\n"],["body","\n"],["body","package org.springframework.core.convert.converter;\n\npublic interface GenericConverter {\n    // 支持的 source -> target 对\n    public Set<ConvertiblePair> getConvertibleTypes();\n\n    // 转换逻辑, TypeDescriptor 字段上下文\n    Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType);\n}\n//很好的实例是 `ArrayToCollectionConverter`\n"],["body","\n"],["h1","条件转换ConditionalGenericConverter"],["body","\n"],["body","\n"],["body","只有当满足特定条件时,才会转换"],["body","\n"],["body","\n"],["h1","ConversionService"],["body","\n"],["body","Conversion Service提供统一的外观界面 ,在运行时执行类型转换"],["body","\n"],["body","package org.springframework.core.convert;\n\npublic interface ConversionService {\n\n    boolean canConvert(Class<?> sourceType, Class<?> targetType);\n\n    <T> T convert(Object source, Class<T> targetType);\n\n    boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType);\n\n    Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType);\n\n}\n"],["body","\n\n"],["body","\n"],["body","大多数实现了 ConversionService 也实现了 ConverterRegistry  ,提供注册converters的SPI, conversionService 将转换逻辑 委托给注册的转换器"],["body","\n"],["body","\n"],["body","\n"],["body","core.convert.support下 GenericConversionService  是一个通用实现"],["body","\n"],["body","\n"],["body","\n"],["body","ConversionServiceFactory  提供ConversionService 的配置化构建"],["body","\n"],["body","\n\n"],["h1","配置GenericService"],["body","\n"],["body","\n"],["body","ConversionService 是一个 无状态对象，在应用启动时初始化，多线程共享，可以手动注入"],["body","\n"],["body","If no ConversionService is registered with Spring, the original PropertyEditor-based system is used."],["body","\n"],["body","\n"],["headingLink","通过-factorybean-创建"],["heading","通过 factoryBean 创建"],["body","\n"],["body","<bean id=\"conversionService\"\n    class=\"org.springframework.context.support.ConversionServiceFactoryBean\"/>\n\n// 配置converters,值可以是任何实现了 Converter, ConverterFactory, or GenericConverter的类\n<bean id=\"conversionService\"\n        class=\"org.springframework.context.support.ConversionServiceFactoryBean\">\n    <property name=\"converters\">\n        <set>\n            <bean class=\"example.MyCustomConverter\"/>\n        </set>\n    </property>\n</bean>\n\n"],["body","\n"],["headingLink","conversionservicefactorybean-完成的功能"],["heading","ConversionServiceFactoryBean 完成的功能"],["body","\n\n"],["body","\n"],["body","创建 DefaultConversionService"],["body","\n"],["body","\n"],["body","\n"],["body","注册自定义 Converters"],["body","\n"],["body","if (converter instanceof GenericConverter) {\n\t\t\t\t\tregistry.addConverter((GenericConverter) converter);\n\t\t\t\t}\n\t\t\t\telse if (converter instanceof Converter<?, ?>) {\n\t\t\t\t\tregistry.addConverter((Converter<?, ?>) converter);\n\t\t\t\t}\n\t\t\t\telse if (converter instanceof ConverterFactory<?, ?>) {\n\t\t\t\t\tregistry.addConverterFactory((ConverterFactory<?, ?>) converter);\n\t\t\t\t}\n"],["body","\n"],["body","\n\n"],["headingLink","编程式方式使用conversionservice"],["heading","编程式方式使用ConversionService"],["body","\n"],["body","@Service\npublic class MyService {\n\n    public MyService(ConversionService conversionService) {\n        this.conversionService = conversionService;\n    }\n\n    public void doIt() {\n        this.conversionService.convert(...)\n    }\n}\n"],["body","\n"],["body","泛型集合转换"],["body","\n"],["body","DefaultConversionService cs = new DefaultConversionService();\n\nList<Integer> input = ...\ncs.convert(input,\n    TypeDescriptor.forObject(input), // List<Integer> type descriptor\n    TypeDescriptor.collection(List.class, TypeDescriptor.valueOf(String.class)));\n"],["body","\n\n"],["body","DefaultConversionService 会自动注册内置converters 适合大部分环境, 包括 集合转换,基本类型转换,ObjectToString converters "],["body","\n"],["body","可以在 DefaultConversionService.addDefaultConverters"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springframework/spring代理.html"],["title","spring代理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","org.springframework.core.io.support.PathMatchingResourcePatternResolver.PatternVirtualFileVisitor"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springframework/spring-ioc.html"],["title","spring-ioc.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","{% raw %}"],["body","\n"],["h1","spring总结"],["body","\n"],["headingLink","beanfactory与-applicationcontext-有什么区别"],["heading","beanFactory与 ApplicationContext 有什么区别"],["body","\n"],["body","beanFactory提供了配置框架的基本功能"],["body","\n\n"],["body","提供 获取bean及其相关信息"],["body","\n\n"],["body","而ApplicationContext作为它的子类 多了一些企业级的功能"],["body","\n\n"],["body","AOP集成"],["body","\n"],["body","消息资源处理"],["body","\n"],["body","事件发布"],["body","\n"],["body","应用专用容器,例如 WebApplicationContext"],["body","\n\n"],["body","通过元数据配置, 告诉容器如何"],["body","\n\n"],["body","初始化 , 实例化 , 组装一个bean"],["body","\n\n"],["headingLink","配置bean的方式"],["heading","配置bean的方式"],["body","\n\n"],["body","xml"],["body","\n"],["body","注解"],["body","\n"],["body","java代码"],["body","\n\n"],["h1","配置Bean元数据"],["body","\n"],["headingLink","基于xml"],["heading","基于xml"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"...\" class=\"...\">  \n        <!-- collaborators and configuration for this bean go here -->\n    </bean>\n\n    <bean id=\"...\" class=\"...\">\n        <!-- collaborators and configuration for this bean go here -->\n    </bean>\n    <!-- more bean definitions go here -->\n</beans>\n"],["body","\n"],["headingLink","导入其他xml定义"],["heading","导入其他XML定义"],["body","\n"],["body","<beans>\n    <import resource=\"services.xml\"/>\n    <import resource=\"resources/messageSource.xml\"/>\n    <import resource=\"/resources/themeSource.xml\"/>\n\n    <bean id=\"bean1\" class=\"...\"/>\n    <bean id=\"bean2\" class=\"...\"/>\n</beans>\n"],["body","\n"],["h1","容器"],["body","\n"],["headingLink","spring容器类"],["heading","spring容器类"],["body","\n\n"],["body","ClassPathXmlApplicationContext 基于类路径下的xml装载的容器类"],["body","\n"],["body","FileSystemXmlApplicationContext 基于文件系统下的xml装载的容器类"],["body","\n\n"],["headingLink","实例化容器"],["heading","实例化容器"],["body","\n"],["body","ApplicationContext context = new ClassPathXmlApplicationContext(\"services.xml\", \"daos.xml\");\n//通用容器对象\nApplicationContext context = new GenericGroovyApplicationContext(\"services.groovy\", \"daos.groovy\");\n//加入xmlbean定义\nnew XmlBeanDefinitionReader(context).loadBeanDefinitions(\"services.xml\", \"daos.xml\");\ncontext.refresh();\n//加入grouvybean定义\nnew GroovyBeanDefinitionReader(context).loadBeanDefinitions(\"services.groovy\", \"daos.groovy\");\ncontext.refresh();\n\n// xml容器对象\nApplicationContext context = new ClassPathXmlApplicationContext(\"services.xml\", \"daos.xml\");\n// retrieve configured instance\nPetStoreService service = context.getBean(\"petStore\", PetStoreService.class);\n"],["body","\n"],["h1","BeanDefintion"],["body","\n\n"],["body","\n"],["body","bean定义描述了以何种方式创建bean"],["body","\n"],["body","\n"],["body","\n"],["body","除了从bean定义创建bean,还可以从外部注册bean"],["body","\n"],["body","getBeanFactory().registerSingleton(..)\ngetBeanFactory().registerBeanDefinition(..)\n"],["body","\n"],["body","\n\n"],["headingLink","bean属性"],["heading","bean属性"],["body","\n"],["body","Property"],["body","Explained in…"],["body","\n"],["body","Class"],["body","Instantiating Beans"],["body","\n"],["body","Name"],["body","Naming Beans"],["body","\n"],["body","Scope"],["body","Bean Scopes"],["body","\n"],["body","Constructor arguments"],["body","Dependency Injection"],["body","\n"],["body","Properties"],["body","Dependency Injection"],["body","\n"],["body","Autowiring mode"],["body","Autowiring Collaborators"],["body","\n"],["body","Lazy initialization mode"],["body","Lazy-initialized Beans"],["body","\n"],["body","Initialization method"],["body","Initialization Callbacks"],["body","\n"],["body","Destruction method"],["body","Destruction Callbacks"],["body","\n\n\n"],["headingLink","bean别名"],["heading","bean别名"],["body","\n"],["body","id唯一,name可以多个,以 空格,逗号,分号,分隔"],["body","\n"],["body","<alias name=\"myApp-dataSource\" alias=\"subsystemA-dataSource\"/>\n"],["body","\n"],["headingLink","bean实例化"],["heading","bean实例化"],["body","\n"],["body","构造方法\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\"/>\n静态工厂\n<bean id=\"clientService\"\n    class=\"examples.ClientService\"\n    factory-method=\"createInstance\"/>\n实例工厂\n<!-- the factory bean, which contains a method called createInstance() -->\n<bean id=\"serviceLocator\" class=\"examples.DefaultServiceLocator\">\n    <!-- inject any dependencies required by this locator bean -->\n</bean>\n\n<!-- the bean to be created via the factory bean -->\n<bean id=\"clientService\"\n    factory-bean=\"serviceLocator\"\n    factory-method=\"createClientServiceInstance\"/>\n\n"],["body","\n"],["h1","依赖注入"],["body","\n"],["headingLink","构造注入"],["heading","构造注入"],["body","\n"],["body","构造注入-引用类型\n<bean id=\"beanOne\" class=\"x.y.ThingOne\">\n        <constructor-arg ref=\"beanTwo\"/>\n        <constructor-arg ref=\"beanThree\"/>\n</bean>\n构造注入-基本类型\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n    <constructor-arg type=\"int\" value=\"7500000\"/>\n    <constructor-arg type=\"java.lang.String\" value=\"42\"/>\n</bean>\n\n构造注入-按索引注入\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n    <constructor-arg index=\"0\" value=\"7500000\"/>\n    <constructor-arg index=\"1\" value=\"42\"/>\n</bean>\n构造注入-按参数名注入-\n前提是 jvm开启Debug选项\n可以使用 @ConstructorProperties注解给定参数名\n<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n    <constructor-arg name=\"years\" value=\"7500000\"/>\n    <constructor-arg name=\"ultimateAnswer\" value=\"42\"/>\n</bean>\n"],["body","\n"],["body","    @ConstructorProperties({\"years\", \"ultimateAnswer\"})\n    public ExampleBean(int years, String ultimateAnswer) {\n        this.years = years;\n        this.ultimateAnswer = ultimateAnswer;\n    }\n"],["body","\n"],["headingLink","setter方法注入"],["heading","setter方法注入"],["body","\n"],["body","<bean id=\"exampleBean\" class=\"examples.ExampleBean\">\n    <properties name=\"ddd\" ref=\"dd\"/>\n</bean>\n"],["body","\n"],["body","推荐使用构造注入注入必须的变量, 使用setter注入不是必须的变量"],["body","\n"],["headingLink","被注入的值的写法"],["heading","被注入的值的写法"],["body","\n"],["headingLink","字面量"],["heading","字面量"],["body","\n"],["body","字符串和基本数据类型原样写"],["body","\n"],["headingLink","集合"],["heading","集合"],["body","\n"],["body","<list/>, <set/>, <map/>, and <props/>"],["body","\n"],["body","<bean id=\"moreComplexObject\" class=\"example.ComplexObject\">\n    <!-- results in a setAdminEmails(java.util.Properties) call -->\n    <property name=\"adminEmails\">\n        <props>\n            <prop key=\"administrator\">administrator@example.org</prop>\n            <prop key=\"support\">support@example.org</prop>\n            <prop key=\"development\">development@example.org</prop>\n        </props>\n    </property>\n    <!-- results in a setSomeList(java.util.List) call -->\n    <property name=\"someList\">\n        <list>\n            <value>a list element followed by a reference</value>\n            <ref bean=\"myDataSource\" />\n        </list>\n    </property>\n    <!-- results in a setSomeMap(java.util.Map) call -->\n    <property name=\"someMap\">\n        <map>\n            <entry key=\"an entry\" value=\"just some string\"/>\n            <entry key =\"a ref\" value-ref=\"myDataSource\"/>\n        </map>\n    </property>\n    <!-- results in a setSomeSet(java.util.Set) call -->\n    <property name=\"someSet\">\n        <set>\n            <value>just some string</value>\n            <ref bean=\"myDataSource\" />\n        </set>\n    </property>\n</bean>\n\n集合合并 merge=true\n<beans>\n    <bean id=\"parent\" abstract=\"true\" class=\"example.ComplexObject\">\n        <property name=\"adminEmails\">\n            <props>\n                <prop key=\"administrator\">administrator@example.com</prop>\n                <prop key=\"support\">support@example.com</prop>\n            </props>\n        </property>\n    </bean>\n    <bean id=\"child\" parent=\"parent\">\n        <property name=\"adminEmails\">\n            <!-- the merge is specified on the child collection definition -->\n            <props merge=\"true\">\n                <prop key=\"sales\">sales@example.com</prop>\n                <prop key=\"support\">support@example.co.uk</prop>\n            </props>\n        </property>\n    </bean>\n<beans>\n"],["body","\n"],["headingLink","空串与null"],["heading","空串与null"],["body","\n"],["body","等价于 \"\"\n<bean class=\"ExampleBean\">\n    <property name=\"email\" value=\"\"/>\n</bean>\n\n\n<bean class=\"ExampleBean\">\n    <property name=\"email\">\n        <null/>\n    </property>\n</bean>\n"],["body","\n"],["headingLink","名称空间注入"],["heading","名称空间注入"],["body","\n"],["body","p名称空间\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:p=\"http://www.springframework.org/schema/p\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    https://www.springframework.org/schema/beans/spring-beans.xsd\">\n\n    <bean id=\"myDataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\"\n        destroy-method=\"close\"\n        p:driverClassName=\"com.mysql.jdbc.Driver\"\n        p:url=\"jdbc:mysql://localhost:3306/mydb\"\n        p:username=\"root\"\n        p:password=\"masterkaoli\"/>\n\n</beans>\nc名称空间\n<!-- c-namespace index declaration -->\n<bean id=\"beanOne\" class=\"x.y.ThingOne\" c:_0-ref=\"beanTwo\" c:_1-ref=\"beanThree\"\n    c:_2=\"something@somewhere.com\"/>\n\n"],["body","\n"],["headingLink","嵌套注入"],["heading","嵌套注入"],["body","\n"],["body","<bean id=\"something\" class=\"things.ThingOne\">\n    <property name=\"fred.bob.sammy\" value=\"123\" />\n</bean>\n"],["body","\n"],["headingLink","properties实例注入"],["heading","properties实例注入"],["body","\n"],["body","<bean id=\"mappings\"\n    class=\"org.springframework.context.support.PropertySourcesPlaceholderConfigurer\">\n\n    <!-- typed as a java.util.Properties -->\n    <property name=\"properties\">\n        <value>\n            jdbc.driver.className=com.mysql.jdbc.Driver\n            jdbc.url=jdbc:mysql://localhost:3306/mydb\n        </value>\n    </property>\n</bean>\n"],["body","\n"],["headingLink","idref"],["heading","idref"],["body","\n"],["body","避免 值与引用混淆\n<!-- in the child (descendant) context -->\n<bean id=\"accountService\" <!-- bean name is the same as the parent bean -->\n    class=\"org.springframework.aop.framework.ProxyFactoryBean\">\n    <property name=\"target\">\n        <ref parent=\"accountService\"/> <!-- notice how we refer to the parent bean -->\n    </property>\n    <!-- insert other configuration and dependencies as required here -->\n</bean>\n"],["body","\n"],["headingLink","depends-on"],["heading","depends-on"],["body","\n"],["body","在某个bean之前实例化,用于两个不直接依赖的bean"],["body","\n"],["body","<bean id=\"beanOne\" class=\"ExampleBean\" depends-on=\"manager\"/>\n<bean id=\"manager\" class=\"ManagerBean\" />\n"],["body","\n"],["headingLink","context手动获取"],["heading","Context手动获取"],["body","\n"],["body","使用场景: 两个bean的生命周期不一致,使用自动注入只会调用一次,"],["body","\n"],["body","可以使用 getBean(String name)来获得"],["body","\n"],["body","// a class that uses a stateful Command-style class to perform some processing\npackage fiona.apple;\n\n// Spring-API imports\nimport org.springframework.beans.BeansException;\nimport org.springframework.context.ApplicationContext;\nimport org.springframework.context.ApplicationContextAware;\n\npublic class CommandManager implements ApplicationContextAware {\n\n    private ApplicationContext applicationContext;\n\n    public Object process(Map commandState) {\n        // grab a new instance of the appropriate Command\n        Command command = createCommand();\n        // set the state on the (hopefully brand new) Command instance\n        command.setState(commandState);\n        return command.execute();\n    }\n\n    protected Command createCommand() {\n        // notice the Spring API dependency!\n        return this.applicationContext.getBean(\"command\", Command.class);\n    }\n\n    public void setApplicationContext(\n            ApplicationContext applicationContext) throws BeansException {\n        this.applicationContext = applicationContext;\n    }\n}\n"],["body","\n"],["headingLink","抽象方法注入"],["heading","抽象方法注入"],["body","\n"],["body","<!-- a stateful bean deployed as a prototype (non-singleton) -->\n<bean id=\"myCommand\" class=\"fiona.apple.AsyncCommand\" scope=\"prototype\">\n    <!-- inject dependencies here as required -->\n</bean>\n\n<!-- commandProcessor uses statefulCommandHelper -->\n<bean id=\"commandManager\" class=\"fiona.apple.CommandManager\">\n    <lookup-method name=\"createCommand\" bean=\"myCommand\"/>\n</bean>\n"],["body","\n"],["body","package fiona.apple;\n\n// no more Spring imports!\n\npublic abstract class CommandManager {\n\n    public Object process(Object commandState) {\n        // grab a new instance of the appropriate Command interface\n        Command command = createCommand();\n        // set the state on the (hopefully brand new) Command instance\n        command.setState(commandState);\n        return command.execute();\n    }\n\n    // okay... but where is the implementation of this method?\n    protected abstract Command createCommand();\n}\n\n或者使用注解\n@Lookup(\"name\")\n    如果不写名称则根据 方法的返回值类型查找,如果不写名字则需要写具体类名\n    \n​ Spring的Lookup method inject实现原理的是使用CGLIB动态生成一个类去继承CommandManager，重写createCommand方法。然后根据@Lookup中指定的bean Name或者createCommand方法的返回类型判断需要返回的bean。createCommand可以是abstract和可以不是。因为使用的是继承，所以CommandManager类和createCommand方法都不能是final的。\n\ncreateCommand方法的签名需要满足如下要求\n\n<public|protected> [abstract] <return-type> theMethodName(no-arguments);\n"],["body","\n"],["headingLink","方法替换"],["heading","方法替换"],["body","\n"],["body","待替换的方法"],["body","\n"],["body","public class MyValueCalculator {\n\n    public String computeValue(String input) {\n        // some real code...\n    }\n\n    // some other methods...\n}\n"],["body","\n"],["body","重新实现的方法"],["body","\n"],["body","public class ReplacementComputeValue implements MethodReplacer {\n\n    public Object reimplement(Object o, Method m, Object[] args) throws Throwable {\n        // get the input value, work with it, and return a computed result\n        String input = (String) args[0];\n        ...\n        return ...;\n    }\n}\n"],["body","\n"],["body","配置"],["body","\n"],["body","<bean id=\"myValueCalculator\" class=\"x.y.z.MyValueCalculator\">\n    <!-- arbitrary method replacement -->\n    <replaced-method name=\"computeValue\" replacer=\"replacementComputeValue\">\n        <arg-type>String</arg-type>\n    </replaced-method>\n</bean>\n\n<bean id=\"replacementComputeValue\" class=\"a.b.c.ReplacementComputeValue\"/>\n构造参数类型主要是为了区别 重载的方法\n只能配置\n"],["body","\n"],["h1","作用域"],["body","\n"],["headingLink","属性列表"],["heading","属性列表"],["body","\n"],["body","Scope"],["body","Description"],["body","\n"],["body","singleton"],["body","单例"],["body","\n"],["body","prototype"],["body","多例"],["body","\n"],["body","request"],["body","每来一个 Http请求中 就会产生一个"],["body","\n"],["body","session"],["body","Httpsession"],["body","\n"],["body","application"],["body","Scopes a single bean definition to the lifecycle of a ServletContext. Only valid in the context of a web-aware Spring ApplicationContext."],["body","\n"],["body","websocket"],["body","Scopes a single bean definition to the lifecycle of a WebSocket. Only valid in the context of a web-aware Spring ApplicationContext."],["body","\n\n\n"],["headingLink","生存周期不一致的bean-访问方式"],["heading","生存周期不一致的bean 访问方式"],["body","\n\n"],["body","单例a依赖注入 prototype的实例b时, 每次访问b, b不会变,就是直接访问,不会去scope中取"],["body","\n"],["body","如果 proxyMode=ScopedProxyMode.TARGET_CLASS 或者interface,则 会访问b时 会生成一个代理类,里面根据 scope取值"],["body","\n\n"],["body","package com.weisanju.javaconfig.config;\n\nimport org.springframework.context.annotation.Scope;\nimport org.springframework.context.annotation.ScopedProxyMode;\nimport org.springframework.stereotype.Component;\n\n@Component\n@Scope(proxyMode=ScopedProxyMode.NO,value = \"prototype\")\npublic class MyValueCalculator {\n    public String computeValue(String input) {\n        System.out.println(input);\n        return input;\n    }\n}\n在被注入的时候指定代理形式\n"],["body","\n"],["headingLink","自定义-scope"],["heading","自定义 scope"],["body","\n\n"],["body","\n"],["body","实现 org.springframework.beans.factory.config.Scope接口"],["body","\n"],["body","基于 时间的作用域"],["body","\n"],["body","/**\n * 首先自定义作用域范围类TimeScope:\n * Scope接口提供了五个方法，只有get()和remove()是必须实现，get()中写获取逻辑，\n * 如果已有存储中没有该名称的bean，则通过objectFactory.getObject()创建实例。\n */\n@Slf4j\npublic class TimeScope implements Scope {\n\n    private static Map<String, Map<Integer, Object>> scopeBeanMap = new HashMap<>();\n\n    @Override\n    public Object get(String name, ObjectFactory<?> objectFactory) {\n        Integer hour = Calendar.getInstance().get(Calendar.HOUR_OF_DAY);\n        // 当前是一天内的第多少分钟\n        Integer minute = hour * 60 + Calendar.getInstance().get(Calendar.MINUTE);\n        log.info(\"当前是第 {} 分钟\", minute);\n        Map<Integer, Object> objectMap = scopeBeanMap.get(name);\n        Object object = null;\n        if (Objects.isNull(objectMap)) {\n            objectMap = new HashMap<>();\n            object = objectFactory.getObject();\n            objectMap.put(minute, object);\n            scopeBeanMap.put(name, objectMap);\n        } else {\n            object = objectMap.get(minute);\n            if (Objects.isNull(object)) {\n                object = objectFactory.getObject();\n                objectMap.put(minute, object);\n                scopeBeanMap.put(name, objectMap);\n            }\n        }\n        return object;\n    }\n\n    @Override\n    public Object remove(String name) {\n        return scopeBeanMap.remove(name);\n    }\n\n    @Override\n    public void registerDestructionCallback(String name, Runnable callback) {\n    }\n    @Override\n    public Object resolveContextualObject(String key) {\n        return null;\n    }\n    @Override\n    public String getConversationId() {\n        return null;\n    }\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","注册到 org.springframework.beans.factory.config.CustomScopeConfigurer 上"],["body","\n"],["body","@Configuration\n@Slf4j\npublic class BeanScopeConfig {\n    @Bean\n    public CustomScopeConfigurer customScopeConfigurer() {\n        CustomScopeConfigurer customScopeConfigurer = new CustomScopeConfigurer();\n        Map<String, Object> map = new HashMap<>();\n        map.put(\"timeScope\", new TimeScope());\n        customScopeConfigurer.setScopes(map);\n        return customScopeConfigurer;\n    }\n    \n    @Bean\n    @Scope(value = \"timeScope\", proxyMode = ScopedProxyMode.TARGET_CLASS)\n    public TimeScopeBean timeScopeBean() {\n        TimeScopeBean timeScopeBean = new TimeScopeBean();\n        timeScopeBean.setCurrentTime(System.currentTimeMillis());\n        log.info(\"time scope bean\");\n        return timeScopeBean;\n    }\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","使用 "],["body","\n"],["body","@Scope(proxyMode=ScopedProxyMode.TARGET_CLASS,value = \"thread\")"],["body","\n"],["body","\n\n"],["headingLink","自定义bean的特性"],["heading","自定义bean的特性"],["body","\n"],["headingLink","三类回调形式"],["heading","三类回调形式"],["body","\n"],["body","Lifecycle Callbacks 生命周期回调"],["body","\n"],["body","ApplicationContextAware and BeanNameAware bean注入的回调"],["body","\n"],["body","Other Aware Interfaces 其他的回调接口"],["body","\n"],["headingLink","生命周期回调"],["heading","生命周期回调"],["body","\n"],["headingLink","bean生命周期回调"],["heading","Bean生命周期回调"],["body","\n\n"],["body","\n"],["body","通过 实现 InitializingBean ,DisposableBean"],["body","\n"],["body","\n"],["body","\n"],["body","推荐使用 @PostConstructand@PreDestroy ,这可与 spring特定接口 松耦合"],["body","\n"],["body","\n"],["body","\n"],["body","或者使用 bean定义 init-methodanddestroy-method 属性"],["body","\n"],["body","\n"],["body","\n"],["body","spring通过 BeanPostProcessor 接口 进行回调处理,如果需要自定义可以自行实现"],["body","\n"],["body","\n"],["body","\n"],["body","被管理的bean可以实现 Lifecycle 接口"],["body","\n"],["body","\n\n"],["body","Initialization Callbacks"],["body","\n\n"],["body","发生于 容器初始完 所有必须的属性时"],["body","\n"],["body","推荐使用 * @PostConstruct * 或者使用  Beandefinition 的  init-methodanddestroy-method 或者java注解的@Bean的属性,initMethod"],["body","\n\n"],["body","Destruction Callbacks"],["body","\n\n"],["body","类似于上面"],["body","\n\n"],["body","Default Initialization and Destroy Methods"],["body","\n"],["body","或者指定全局默认的 init,destroy方法"],["body","\n"],["body","<beans default-init-method=\"init\">\n\n    <bean id=\"blogService\" class=\"com.something.DefaultBlogService\">\n        <property name=\"blogDao\" ref=\"blogDao\" />\n    </bean>\n\n</beans>\n// destroy-method\n"],["body","\n"],["body","以上各个 回调实现的组合调用顺序"],["body","\n"],["body","Multiple lifecycle mechanisms configured for the same bean, with different initialization methods, are called as follows:"],["body","\n\n"],["body","Methods annotated with @PostConstruct"],["body","\n"],["body","afterPropertiesSet() as defined by the InitializingBean callback interface"],["body","\n"],["body","A custom configured init() method"],["body","\n\n"],["body","Destroy methods are called in the same order:"],["body","\n\n"],["body","Methods annotated with @PreDestroy"],["body","\n"],["body","destroy() as defined by the DisposableBean callback interface"],["body","\n"],["body","A custom configured destroy() method"],["body","\n\n"],["headingLink","startup-and-shutdown-callbacks"],["heading","Startup and Shutdown Callbacks"],["body","\n\n"],["body","\n"],["body","Lifecycle 定义了 bean自己的 生命周期"],["body","\n"],["body","\n"],["body","\n"],["body","容器会在收到 start stop信号后,将调用所有实现了该接口的方法,容器将委托给 LifecycleProcessor 去处理"],["body","\n"],["body","\n"],["body","\n"],["body","只会在显示启动,或者显示停止时调用,要更细粒度的控制, 参照SmartLifecycle"],["body","\n"],["body","\tNote that the regular org.springframework.context.Lifecycle interface is a plain contract for explicit start and stop notifications and does not imply auto-startup at context refresh time. For fine-grained control over auto-startup of a specific bean (including startup phases), consider implementing org.springframework.context.SmartLifecycle instead.\n\nAlso, please note that stop notifications are not guaranteed to come before destruction. On regular shutdown, all Lifecycle beans first receive a stop notification before the general destruction callbacks are being propagated. However, on hot refresh during a context’s lifetime or on aborted refresh attempts, only destroy methods are called.\n"],["body","\n"],["body","\n"],["body","\n"],["body","bean 对象 之间的 start,stop决定于 depends-on 和显示依赖注入,对于 某一类型 与另一类型的顺序 这 在 SmartLifecycle 有实现"],["body","\n"],["body","public interface Phased {\n    int getPhase();\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","当启动时, 最小的 phase 先启动, 关闭时 最大的 phase先关闭"],["body","\n"],["body","\n"],["body","\n"],["body","对于普通的  “normal” Lifecycle  ,他们的 phase为0"],["body","\n"],["body","\n"],["body","\n"],["body","SmartLifecycle 的stop方法有回调,所有实现 SmartLifecycle 接口的 类 必须在 stop完后 回调该 stop方法"],["body","\n"],["body","\tdefault void stop(Runnable callback) {\n\t\tstop();\n\t\tcallback.run();\n\t}\n"],["body","\n"],["body","\n"],["body","\n"],["body","processor的默认实现 在各个 bean关闭时的 默认超时时间 30s"],["body","\n"],["body","<bean id=\"lifecycleProcessor\" class=\"org.springframework.context.support.DefaultLifecycleProcessor\">\n    <!-- timeout value in milliseconds -->\n    <property name=\"timeoutPerShutdownPhase\" value=\"10000\"/>\n</bean>\n"],["body","\n"],["body","\n"],["body","\n"],["body","processor还提供了  onRefresh 的回调 , 它会判断 SmartLifecycle  的isAutoStart 的标志"],["body","\n"],["body","\n\n"],["headingLink","优雅的关闭非web的容器"],["heading","优雅的关闭非web的容器"],["body","\n\n"],["body","\n"],["body","springWebmvc的容器已经实现了该特性"],["body","\n"],["body","\n"],["body","\n"],["body","在jvm那里 注册一个 钩子回调,实际上是 在jvm那里 注册一个 线程用于关闭"],["body","\n"],["body","        ConfigurableApplicationContext ctx = new ClassPathXmlApplicationContext(\"beans.xml\");\n\n        // add a shutdown hook for the above context...\n        ctx.registerShutdownHook();\n        \n        \n{\n\t\tif (this.shutdownHook == null) {\n\t\t\t// No shutdown hook registered yet.\n\t\t\tthis.shutdownHook = new Thread(SHUTDOWN_HOOK_THREAD_NAME) {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tsynchronized (startupShutdownMonitor) {\n\t\t\t\t\t\tdoClose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tRuntime.getRuntime().addShutdownHook(this.shutdownHook);\n\t\t}\n\t}\n"],["body","\n"],["body","\n\n"],["headingLink","applicationcontextaware-and-beannameaware"],["heading","ApplicationContextAware and BeanNameAware"],["body","\n\n"],["body","\n"],["body","用于获取 容器引用或者 bean引用,推荐使用 注解注入"],["body","\n"],["body","\n"],["body","\n"],["body","BeanNameAware 回调 迟于 各种属性填充前, 早于 各种初始化回调前"],["body","\n"],["body","\n\n"],["headingLink","other-aware-interfaces"],["heading","Other Aware Interfaces"],["body","\n"],["body","Name"],["body","Injected Dependency"],["body","Explained in…"],["body","\n"],["body","ApplicationContextAware"],["body","Declaring ApplicationContext."],["body","ApplicationContextAware and BeanNameAware"],["body","\n"],["body","ApplicationEventPublisherAware"],["body","Event publisher of the enclosing ApplicationContext."],["body","Additional Capabilities of the ApplicationContext"],["body","\n"],["body","BeanClassLoaderAware"],["body","Class loader used to load the bean classes."],["body","Instantiating Beans"],["body","\n"],["body","BeanFactoryAware"],["body","Declaring BeanFactory."],["body","ApplicationContextAware and BeanNameAware"],["body","\n"],["body","BeanNameAware"],["body","Name of the declaring bean."],["body","ApplicationContextAware and BeanNameAware"],["body","\n"],["body","BootstrapContextAware"],["body","Resource adapter BootstrapContext the container runs in. Typically available only in JCA-aware ApplicationContext instances."],["body","JCA CCI"],["body","\n"],["body","LoadTimeWeaverAware"],["body","Defined weaver for processing class definition at load time."],["body","Load-time Weaving with AspectJ in the Spring Framework"],["body","\n"],["body","MessageSourceAware"],["body","Configured strategy for resolving messages (with support for parametrization and internationalization)."],["body","Additional Capabilities of the ApplicationContext"],["body","\n"],["body","NotificationPublisherAware"],["body","Spring JMX notification publisher."],["body","Notifications"],["body","\n"],["body","ResourceLoaderAware"],["body","Configured loader for low-level access to resources."],["body","Resources"],["body","\n"],["body","ServletConfigAware"],["body","Current ServletConfig the container runs in. Valid only in a web-aware Spring ApplicationContext."],["body","Spring MVC"],["body","\n"],["body","ServletContextAware"],["body","Current ServletContext the container runs in. Valid only in a web-aware Spring ApplicationContext."],["body","Spring MVC"],["body","\n\n\n"],["headingLink","bean-definition-inheritance"],["heading","Bean Definition Inheritance"],["body","\n"],["body","bean定义继承"],["body","\n\n"],["body","bean继承以 子类为准"],["body","\n"],["body","父类可以如果不写 class,必须abstract为true"],["body","\n"],["body","bean之间的同名属性必须是 兼容的"],["body","\n"],["body","如果abstract 定义为 true 则该bean定义为模板,不会产生实例"],["body","\n\n"],["body","<bean id=\"inheritedTestBean\" abstract=\"true\"\n        class=\"org.springframework.beans.TestBean\">\n    <property name=\"name\" value=\"parent\"/>\n    <property name=\"age\" value=\"1\"/>\n</bean>\n\n<bean id=\"inheritsWithDifferentClass\"\n        class=\"org.springframework.beans.DerivedTestBean\"\n        parent=\"inheritedTestBean\" init-method=\"initialize\">  \n    <property name=\"name\" value=\"override\"/>\n    <!-- the age property value of 1 will be inherited from parent -->\n</bean>\n\n//不指定class\n<bean id=\"inheritedTestBeanWithoutClass\" abstract=\"true\">\n    <property name=\"name\" value=\"parent\"/>\n    <property name=\"age\" value=\"1\"/>\n</bean>\n\n<bean id=\"inheritsWithClass\" class=\"org.springframework.beans.DerivedTestBean\"\n        parent=\"inheritedTestBeanWithoutClass\" init-method=\"initialize\">\n    <property name=\"name\" value=\"override\"/>\n    <!-- age will inherit the value of 1 from the parent bean definition-->\n</bean>\n"],["body","\n"],["headingLink","container-extension-points"],["heading","Container Extension Points"],["body","\n"],["body","容器扩展点"],["body","\n"],["body","spring容器提供各种接口 以供开发人员扩展"],["body","\n"],["headingLink","beanpostprocessor"],["heading","BeanPostProcessor"],["body","\n\n"],["body","BeanPostProcessor  可以设置任意个"],["body","\n"],["body","通过order属性 排序"],["body","\n"],["body","作用域是 容器中,容器间得另外注册"],["body","\n"],["body","BeanFactoryPostProcessor 可以改变BeanDefintion"],["body","\n"],["body","回调发生在每个bean对象 创建后, InitializingBean.afterPropertiesSet() or any declared init method  容器初始化完,或者任何申明得初始化方法,在其他bean初始化后"],["body","\n"],["body","它可以对任何 bean采取行动, 一般用于bean的代理"],["body","\n"],["body","容器会根据 配置元数据(xml,或java) 注册 这些 beanpostProcessor"],["body","\n"],["body","beanpostprocessor 的初始化需要早于其他bean的初始化"],["body","\n"],["body","编程方式 注册\n\n"],["body","ConfigurableBeanFactory.addBeanPostProcessor通过这个 手动注册,当你有业务逻辑时"],["body","\n"],["body","不会遵守 order 顺序,注册的顺序决定 执行顺序"],["body","\n"],["body","调用发生在 自动检测bean之前"],["body","\n\n"],["body","\n"],["body","AOP auto-proxying 是基于这个接口的 ,所以任何引用该类型的 类都不应该 对其 使用AOP"],["body","\n\n"],["body","Example"],["body","\n"],["body","RequiredAnnotationBeanPostProcessor 依赖注入时 确保属性的必输项都输入( 现在更推荐 构造器注入)已过期"],["body","\n"],["headingLink","beanfactorypostprocessor"],["heading","BeanFactoryPostProcessor"],["body","\n"],["body","Customizing Configuration Metadata with a BeanFactoryPostProcessor"],["body","\n\n"],["body","用来修改bean定义本身,这种改变时不可逆的"],["body","\n"],["body","通过实现 order接口 来配置  BeanFactoryPostProcessor间的 顺序"],["body","\n"],["body","作用域时容器范围内"],["body","\n"],["body","所有的postProcessor会忽略 懒加载"],["body","\n\n"],["body","Example"],["body","\n"],["body","PropertySourcesPlaceholderConfigurer"],["body","\n"],["body","可以使用PropertySource替代"],["body","\n\n"],["body","\n"],["body","可以配置多个外部属性配置文件,用来替换  ${}表达式"],["body","\n"],["body","\n"],["body","\n"],["body","或者手写配置文件"],["body","\n"],["body","\n"],["body","\n"],["body","如果它失败了则 这时 容器处于 preInstantiateSingletons() phase of an ApplicationContext for a non-lazy-init bean"],["body","\n"],["body","预加载阶段"],["body","\n"],["body","\n\n"],["body","<bean class=\"org.springframework.beans.factory.config.PropertySourcesPlaceholderConfigurer\">\n    <property name=\"locations\">\n        <value>classpath:com/something/strategy.properties</value>\n    </property>\n    <property name=\"properties\">\n        <value>custom.strategy.class=com.something.DefaultStrategy</value>\n    </property>\n</bean>\n\n<bean id=\"serviceStrategy\" class=\"${custom.strategy.class}\"/>\n"],["body","\n"],["body","PropertyOverrideConfigurer"],["body","\n"],["body","替换 Bean定义的 参数属性"],["body","\n"],["body","使用标签 :<context:property-override location=\"classpath:override.properties\"/>"],["body","\n"],["body","person.name=大师傅似的\nbeanname.properteis=value\n"],["body","\n"],["body","@Bean\npublic PropertyOverrideConfigurer propertyOverrideConfigurer(){\n    PropertyOverrideConfigurer propertyOverrideConfigurer = new PropertyOverrideConfigurer();\n    propertyOverrideConfigurer.setFileEncoding(\"UTF-8\");\n    propertyOverrideConfigurer.setLocation(new ClassPathResource(\"my.properties\"));\n    return propertyOverrideConfigurer;\n}\n"],["body","\n"],["headingLink","factorybean"],["heading","FactoryBean"],["body","\n"],["body","Customizing Instantiation Logic with a factoryBean"],["body","\n"],["body","实现自定义 bean定义 逻辑"],["body","\n"],["headingLink","annotation-based-container-configuration"],["heading","Annotation-based Container Configuration"],["body","\n\n"],["body","基于注解的注入 比XML 注入更早执行,所以xml的注入会覆盖注解的注入"],["body","\n"],["body","基于注解的注入实际上是 一个个beanPostProcessor"],["body","\n"],["body","隐式注册这些beanPostProcessor :  context:annotation-config/\n\n"],["body","AutowiredAnnotationBeanPostProcessor"],["body","\n"],["body","CommonAnnotationBeanPostProcessor"],["body","\n"],["body","PersistenceAnnotationBeanPostProcessor "],["body","\n"],["body","RequiredAnnotationBeanPostProcessor"],["body","\n\n"],["body","\n\n"],["headingLink","required"],["heading","@Required"],["body","\n"],["body","标识该setter方法的注入必须, 已过期,推荐使用构造器注入"],["body","\n"],["body","public class SimpleMovieLister {\n\n    private MovieFinder movieFinder;\n\n    @Required\n    public void setMovieFinder(MovieFinder movieFinder) {\n        this.movieFinder = movieFinder;\n    }\n\n    // ...\n}\n"],["body","\n"],["headingLink","autowired"],["heading","@Autowired"],["body","\n"],["body","构造方法上(当 只有一个构造方法时,不是很必要)"],["body","\n"],["body","public class MovieRecommender {\n\n    private final CustomerPreferenceDao customerPreferenceDao;\n\n    @Autowired\n    public MovieRecommender(CustomerPreferenceDao customerPreferenceDao) {\n        this.customerPreferenceDao = customerPreferenceDao;\n    }\n}\n"],["body","\n"],["body","setter注入"],["body","\n"],["body","public class SimpleMovieLister {\n\n    private MovieFinder movieFinder;\n\n    @Autowired\n    public void setMovieFinder(MovieFinder movieFinder) {\n        this.movieFinder = movieFinder;\n    }\n\n    // ...\n}\n"],["body","\n"],["body","字段注入"],["body","\n"],["body"," @Autowired\n    private MovieCatalog movieCatalog;\n"],["body","\n"],["body","可以注入某一类Bean"],["body","\n"],["body","可以@Order或者order接口,实现注入的排序,否则顺序以注册顺序为准,@Order也会影响依赖注入顺序"],["body","\n"],["body","public class MovieRecommender {\n    @Autowired\n    private MovieCatalog[] movieCatalogs;\n}\npublic class MovieRecommender {\n    private Set<MovieCatalog> movieCatalogs;\n    @Autowired\n    public void setMovieCatalogs(Set<MovieCatalog> movieCatalogs) {\n        this.movieCatalogs = movieCatalogs;\n    }\n}\n"],["body","\n"],["body","Map注入"],["body","\n"],["body","这回注入所有 beanname,和某一类型的bean"],["body","\n"],["body","public class MovieRecommender {\n    private Map<String, MovieCatalog> movieCatalogs;\n    @Autowired\n    public void setMovieCatalogs(Map<String, MovieCatalog> movieCatalogs) {\n        this.movieCatalogs = movieCatalogs;\n    }\n}\n"],["body","\n"],["body","可以不启用"],["body","\n"],["body","public class SimpleMovieLister {\n    private MovieFinder movieFinder;\n    @Autowired(required = false)\n    public void setMovieFinder(MovieFinder movieFinder) {\n        this.movieFinder = movieFinder;\n    }\n}\n"],["body","\n"],["body","注入Optional类"],["body","\n"],["body","public class SimpleMovieLister {\n    @Autowired\n    public void setMovieFinder(Optional<MovieFinder> movieFinder) {\n    }\n}\n"],["body","\n"],["body","可以使用@nullable"],["body","\n"],["body","    @Autowired\n    public void setMovieFinder(@Nullable MovieFinder movieFinder) {\n        ...\n    }\n"],["body","\n"],["body","可以注入spring相关的bean"],["body","\n"],["body","BeanFactory, ApplicationContext, Environment, ResourceLoader, ApplicationEventPublisher, and MessageSource\nConfigurableApplicationContext or ResourcePatternResolver\npublic class MovieRecommender {\n\n    @Autowired\n    private ApplicationContext context;\n\n    public MovieRecommender() {\n    }\n}\n"],["body","\n"],["body","注意事项"],["body","\n\n"],["body","一个bean可能有多个 构造器, 但只有一个 构造器能 @Autowired(required = true),其他的必须是false"],["body","\n"],["body","通过 匹配容器中的bean 满足依赖关系最多的 构造器 将会被使用,如果都不满足 使用默认构造器"],["body","\n"],["body","'@Autowired, @Inject, @Value, and @Resource' 这些注入 不能用于BeanPostProcessor或者BeanFactoryPostProcessor"],["body","\n\n"],["headingLink","primary"],["heading","@Primary"],["body","\n\n"],["body","通过类型注册可能有多个类型的候选者,可以使用primary指定"],["body","\n\n"],["body","@Configuration\npublic class MovieConfiguration {\n\n    @Bean\n    @Primary\n    public MovieCatalog firstMovieCatalog() { ... }\n\n    @Bean\n    public MovieCatalog secondMovieCatalog() { ... }\n\n    // ...\n}\n"],["body","\n"],["body","xml配置"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:annotation-config/>\n\n    <bean class=\"example.SimpleMovieCatalog\" primary=\"true\">\n        <!-- inject any dependencies required by this bean -->\n    </bean>\n\n    <bean class=\"example.SimpleMovieCatalog\">\n        <!-- inject any dependencies required by this bean -->\n    </bean>\n\n    <bean id=\"movieRecommender\" class=\"example.MovieRecommender\"/>\n\n</beans>\n"],["body","\n"],["headingLink","qualifiers"],["heading","@Qualifiers"],["body","\n\n"],["body","\n"],["body","与id不同,类似于 手动给定bean分类, 类似于某种bean的过滤器"],["body","\n"],["body","\n"],["body","\n"],["body","这在注入 集合类的时候 作用尤为明显 Set<MovieCatalog>"],["body","\n"],["body","\n"],["body","\n"],["body","如果没有其他指示器(类似primary,qualifier) ,而且存在多个候选者,则spring会根据 注入字段名或参数名匹配bean"],["body","\n"],["body","\n"],["body","\n"],["body","如果你想通过bean名匹配,最好使用@Resource, @Autowired的语义是:先找同类型的,然后寻找指定的Qualifer"],["body","\n"],["body","\n"],["body","\n"],["body","可以通过@Resource引用集合"],["body","\n"],["body","\n"],["body","\n"],["body","qualifier可以自引用,但顺序是最后的"],["body","\n"],["body","\n\n"],["body","public class MovieRecommender {\n\n    @Autowired\n    @Qualifier(\"main\")\n    private MovieCatalog movieCatalog;\n\n    // ...\n}\n\n\npublic class MovieRecommender {\n\n    private MovieCatalog movieCatalog;\n\n    private CustomerPreferenceDao customerPreferenceDao;\n\n    @Autowired\n    public void prepare(@Qualifier(\"main\") MovieCatalog movieCatalog,\n            CustomerPreferenceDao customerPreferenceDao) {\n        this.movieCatalog = movieCatalog;\n        this.customerPreferenceDao = customerPreferenceDao;\n    }\n\n    // ...\n}\n"],["body","\n"],["body","xml配置"],["body","\n"],["body"," <bean class=\"example.SimpleMovieCatalog\">\n        <qualifier value=\"main\"/> \n\n        <!-- inject any dependencies required by this bean -->\n    </bean>\n"],["body","\n"],["body","创建自己的qualifier注解,给qualifier分类"],["body","\n"],["body","@Target({ElementType.FIELD, ElementType.PARAMETER})\n@Retention(RetentionPolicy.RUNTIME)\n@Qualifier\npublic @interface Genre {\n\n    String value();\n}\n"],["body","\n"],["body","使用注解"],["body","\n"],["body","public class MovieRecommender {\n\n    @Autowired\n    @Genre(\"Action\")\n    private MovieCatalog actionCatalog;\n\n    private MovieCatalog comedyCatalog;\n\n    @Autowired\n    public void setComedyCatalog(@Genre(\"Comedy\") MovieCatalog comedyCatalog) {\n        this.comedyCatalog = comedyCatalog;\n    }\n\n    // ...\n}\n"],["body","\n"],["body","可以使用短类名,或者全限定类名"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:annotation-config/>\n\n    <bean class=\"example.SimpleMovieCatalog\">\n        <qualifier type=\"Genre\" value=\"Action\"/>\n        <!-- inject any dependencies required by this bean -->\n    </bean>\n\n    <bean class=\"example.SimpleMovieCatalog\">\n        <qualifier type=\"example.Genre\" value=\"Comedy\"/>\n        <!-- inject any dependencies required by this bean -->\n    </bean>\n\n    <bean id=\"movieRecommender\" class=\"example.MovieRecommender\"/>\n\n</beans>\n"],["body","\n"],["body","给qualifier添加类别,属性"],["body","\n"],["body","@Target({ElementType.FIELD, ElementType.PARAMETER})\n@Retention(RetentionPolicy.RUNTIME)\n@Qualifier\npublic @interface MovieQualifier {\n\n    String genre();\n\n    Format format();\n}\npublic enum Format {\n    VHS, DVD, BLURAY\n}\n"],["body","\n"],["body","按照分类注入"],["body","\n"],["body","public class MovieRecommender {\n\n    @Autowired\n    @MovieQualifier(format=Format.VHS, genre=\"Action\")\n    private MovieCatalog actionVhsCatalog;\n\n    @Autowired\n    @MovieQualifier(format=Format.VHS, genre=\"Comedy\")\n    private MovieCatalog comedyVhsCatalog;\n\n    @Autowired\n    @MovieQualifier(format=Format.DVD, genre=\"Action\")\n    private MovieCatalog actionDvdCatalog;\n\n    @Autowired\n    @MovieQualifier(format=Format.BLURAY, genre=\"Comedy\")\n    private MovieCatalog comedyBluRayCatalog;\n\n    // ...\n}\n"],["body","\n"],["body","同样可以使用meta标签 简写 qualifier标签,会自动查找该qualifier的值"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:context=\"http://www.springframework.org/schema/context\"\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        https://www.springframework.org/schema/context/spring-context.xsd\">\n\n    <context:annotation-config/>\n\n    <bean class=\"example.SimpleMovieCatalog\">\n        <qualifier type=\"MovieQualifier\">\n            <attribute key=\"format\" value=\"VHS\"/>\n            <attribute key=\"genre\" value=\"Action\"/>\n        </qualifier>\n        <!-- inject any dependencies required by this bean -->\n    </bean>\n\n    <bean class=\"example.SimpleMovieCatalog\">\n        <qualifier type=\"MovieQualifier\">\n            <attribute key=\"format\" value=\"VHS\"/>\n            <attribute key=\"genre\" value=\"Comedy\"/>\n        </qualifier>\n        <!-- inject any dependencies required by this bean -->\n    </bean>\n\n    <bean class=\"example.SimpleMovieCatalog\">\n        <meta key=\"format\" value=\"DVD\"/>\n        <meta key=\"genre\" value=\"Action\"/>\n        <!-- inject any dependencies required by this bean -->\n    </bean>\n\n    <bean class=\"example.SimpleMovieCatalog\">\n        <meta key=\"format\" value=\"BLURAY\"/>\n        <meta key=\"genre\" value=\"Comedy\"/>\n        <!-- inject any dependencies required by this bean -->\n    </bean>\n\n</beans>\n"],["body","\n"],["headingLink","using-generics"],["heading","Using Generics"],["body","\n"],["body","使用泛型自动注入"],["body","\n"],["body","假设下面的类 实现了 某个泛型接口"],["body","\n"],["body","Store<String>` and `Store<Integer>\n"],["body","\n"],["body","@Configuration\npublic class MyConfiguration {\n\n    @Bean\n    public StringStore stringStore() {\n        return new StringStore();\n    }\n\n    @Bean\n    public IntegerStore integerStore() {\n        return new IntegerStore();\n    }\n}\n\n\n@Autowired\nprivate Store<String> s1; // <String> qualifier, injects the stringStore bean\n\n@Autowired\nprivate Store<Integer> s2; // <Integer> qualifier, injects the integerStore bean\n"],["body","\n"],["body","泛型同样支持 集合类"],["body","\n"],["body","@Autowired\nprivate List<Store<Integer>> s;\n"],["body","\n"],["headingLink","customautowireconfigurer"],["heading","CustomAutowireConfigurer"],["body","\n"],["body","CustomAutowireConfigurer 是一个 BeanFactoryPostProcessor  可以让你注册自己的 qualifier"],["body","\n"],["body","xml配置"],["body","\n"],["body","<bean id=\"customAutowireConfigurer\"\n        class=\"org.springframework.beans.factory.annotation.CustomAutowireConfigurer\">\n    <property name=\"customQualifierTypes\">\n        <set>\n            <value>example.CustomQualifier</value>\n        </set>\n    </property>\n</bean>\n"],["body","\n"],["body","AutowireCandidateResolver (QualifierAnnotationAutowireCandidateResolver)选取候选者的方式"],["body","\n\n"],["body","autowire-candidate 每一个bean的 自动注入候选者"],["body","\n"],["body","在<beans>中的 default-autowire-candidates"],["body","\n"],["body","@qualifier的限定类"],["body","\n"],["body","CustomAutowireConfigurer 中的候选类"],["body","\n\n"],["headingLink","resource"],["heading","@Resource"],["body","\n\n"],["body","如果没有指定名字 取 方法参数名或者 字段名"],["body","\n"],["body","名称是由 ApplicationContext 提供查找(由CommonAnnotationBeanPostProcessor 注入)"],["body","\n\n"],["headingLink","value"],["heading","@Value"],["body","\n"],["body","注入外部属性"],["body","\n"],["body","@Component\npublic class MovieRecommender {\n\n    private final String catalog;\n\n    public MovieRecommender(@Value(\"${catalog.name}\") String catalog) {\n        this.catalog = catalog;\n    }\n}\n\n@Configuration\n@PropertySource(\"classpath:application.properties\")\npublic class AppConfig { }\n\ncatalog.name=MovieCatalog\n"],["body","\n"],["body","如果想要严格控制 不存在的值可以如下申明"],["body","\n"],["body","@Configuration\npublic class AppConfig {\n\n     @Bean\n     public static PropertySourcesPlaceholderConfigurer propertyPlaceholderConfigurer() {\n           return new PropertySourcesPlaceholderConfigurer();\n     }\n}\n\n"],["body","\n\n"],["body","\n"],["body","当配置这个JavaConfig Bean时,必须是static"],["body","\n"],["body","\n"],["body","\n"],["body","可以设置前缀后缀 分隔符,setPlaceholderPrefix, setPlaceholderSuffix, or setValueSeparator"],["body","\n"],["body","\n"],["body","\n"],["body","PropertySourcesPlaceholderConfigurer springboot自动带一个,会从 application.propertiesandapplication.yml解析"],["body","\n"],["body","\n"],["body","\n"],["body","值转换的过程 可以自定义ConversionService"],["body","\n"],["body","@Configuration\npublic class AppConfig {\n\n    @Bean\n    public ConversionService conversionService() {\n        DefaultFormattingConversionService conversionService = new DefaultFormattingConversionService();\n        conversionService.addConverter(new MyCustomConverter());\n        return conversionService;\n    }\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","支持 EL表达式"],["body","\n"],["body","@Component\npublic class MovieRecommender {\n\n    private final String catalog;\n\n    public MovieRecommender(@Value(\"#{systemProperties['user.catalog'] + 'Catalog' }\") String catalog) {\n        this.catalog = catalog;\n    }\n}\n\n@Component\npublic class MovieRecommender {\n\n    private final Map<String, Integer> countOfMoviesPerCatalog;\n\n    public MovieRecommender(\n            @Value(\"#{{'Thriller': 100, 'Comedy': 300}}\") Map<String, Integer> countOfMoviesPerCatalog) {\n        this.countOfMoviesPerCatalog = countOfMoviesPerCatalog;\n    }\n}\n"],["body","\n"],["body","\n\n"],["headingLink","postconstruct-predestroy"],["heading","@PostConstruct @PreDestroy"],["body","\n\n"],["body","这两个注解也是 CommonAnnotationBeanPostProcessor 实现的"],["body","\n"],["body","@Resource, the @PostConstruct and @PreDestroy  这个在 java9被移包,在11被分离需要手动引入javax.annotation-api"],["body","\n\n"],["headingLink","类路径扫描容器管理"],["heading","类路径扫描,容器管理"],["body","\n"],["headingLink","component"],["heading","Component"],["body","\n"],["body","模板注解,@Repository, @Service, and @Controller是 它的特例,目前没有什么区别,以后可能会增加区别"],["body","\n"],["headingLink","使用元注解或组合注解"],["heading","使用元注解或组合注解"],["body","\n"],["body","元注解"],["body","\n"],["body","@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Component \npublic @interface Service {\n\n    // ...\n}\n\nComponent 导致 service 跟 component同样对待\n"],["body","\n"],["body","组合注解"],["body","\n"],["body","@RestController等价于 @Controllerand@ResponseBody"],["body","\n"],["body","元注解可以重新申明 属性自定义属性的值"],["body","\n"],["body","@Target({ElementType.TYPE, ElementType.METHOD})\n@Retention(RetentionPolicy.RUNTIME)\n@Documented\n@Scope(WebApplicationContext.SCOPE_SESSION)\npublic @interface SessionScope {\n\n    /**\n     * Alias for {@link Scope#proxyMode}.\n     * <p>Defaults to {@link ScopedProxyMode#TARGET_CLASS}.\n     */\n    @AliasFor(annotation = Scope.class)\n    ScopedProxyMode proxyMode() default ScopedProxyMode.TARGET_CLASS;\n\n}\n\n@Service\n@SessionScope\npublic class SessionScopedService {\n    // ...\n}\n"],["body","\n"],["headingLink","自动注册bean定义"],["heading","自动注册bean定义"],["body","\n"],["body","spring会自动注册带有 模板注解component的类,并生成相应的bean定义 在applicationContext中"],["body","\n"],["body","@Service\npublic class SimpleMovieLister {\n\n    private MovieFinder movieFinder;\n\n    public SimpleMovieLister(MovieFinder movieFinder) {\n        this.movieFinder = movieFinder;\n    }\n}\n"],["body","\n"],["body","为了自动注册上面的类型必须 要在 带有 @Configuration的 类中 申明 ,包扫描,包之间可以用 空格, 逗号,冒号"],["body","\n"],["body","@Configuration\n@ComponentScan(basePackages = \"org.example\")\npublic class AppConfig  {\n    // ...\n}\n\n//@ComponentScan(\"org.example\")简写形式\n\n//xml 形式\n <context:component-scan base-package=\"org.example\"/>\n 它会激活 <context:annotation-config>注解\n"],["body","\n"],["body","使用Ant编译工程时, you do not activate the files-only switch of the JAR task"],["body","\n"],["body","同时 AutowiredAnnotationBeanPostProcessorandCommonAnnotationBeanPostProcessor这两个beanPostProcessor也会被注册"],["body","\n"],["body","You can disable the registration of AutowiredAnnotationBeanPostProcessor and CommonAnnotationBeanPostProcessor by including the annotation-config attribute with a value of false.\n"],["body","\n"],["headingLink","使用过滤器-自定义扫描"],["heading","使用过滤器 自定义扫描"],["body","\n\n"],["body","\n"],["body","'@Component, @Repository, @Service, @Controller, @Configuration'默认只扫描带有这些注解的类 "],["body","\n"],["body","\n"],["body","\n"],["body","通过ComponentScan的 includeFilters ,excludeFilters 属性 设定不同类型的过滤器去 取 或者排除 相应的类"],["body","\n"],["body","\n"],["body","\n"],["body","过滤器的类型"],["body","\n"],["body","ilter Type"],["body","Example Expression"],["body","Description"],["body","\n"],["body","annotation (default)"],["body","org.example.SomeAnnotation"],["body","指定  注释类上或者元类上的注解类"],["body","\n"],["body","assignable"],["body","org.example.SomeClass"],["body","A class (or interface) that the target components are assignable to (extend or implement)."],["body","\n"],["body","aspectj"],["body","org.example..*Service+"],["body","使用 aspectj注入语法"],["body","\n"],["body","regex"],["body","org\\.example\\.Default.*"],["body","使用正则匹配类全限定名"],["body","\n"],["body","custom"],["body","org.example.MyTypeFilter"],["body","A custom implementation of the org.springframework.core.type.TypeFilter interface."],["body","\n\n"],["body","\n"],["body","\n"],["body","使用"],["body","\n"],["body","@Configuration\n@ComponentScan(basePackages = \"org.example\",\n        includeFilters = @Filter(type = FilterType.REGEX, pattern = \".*Stub.*Repository\"),\n        excludeFilters = @Filter(Repository.class))\npublic class AppConfig {\n    ...\n}\n"],["body","\n"],["body","<beans>\n    <context:component-scan base-package=\"org.example\">\n        <context:include-filter type=\"regex\"\n                expression=\".*Stub.*Repository\"/>\n        <context:exclude-filter type=\"annotation\"\n                expression=\"org.springframework.stereotype.Repository\"/>\n    </context:component-scan>\n</beans>\n\n"],["body","\n"],["body","\n"],["body","\n"],["body","'useDefaultFilters=false use-default-filters=\"false\"' 可以使得系统不会自动 @Component, @Repository, @Service, @Controller, @RestController, or @Configuration. 扫描这些注解"],["body","\n"],["body","\n\n"],["headingLink","使用component定义元数据"],["heading","使用component定义元数据"],["body","\n\n"],["body","可以使用component定义元数据"],["body","\n"],["body","方法级别的bean定义,类似于 提供一个工厂方法"],["body","\n\n"],["body","@Component\npublic class FactoryMethodComponent {\n\n    @Bean\n    @Qualifier(\"public\")\n    public TestBean publicInstance() {\n        return new TestBean(\"publicInstance\");\n    }\n\n    public void doWork() {\n        // Component method implementation omitted\n    }\n}\n"],["body","\n"],["body","@Component\npublic class FactoryMethodComponent {\n\n    private static int i;\n\n    @Bean\n    @Qualifier(\"public\")\n    public TestBean publicInstance() {\n        return new TestBean(\"publicInstance\");\n    }\n\n    // use of a custom qualifier and autowiring of method parameters\n    @Bean\n    protected TestBean protectedInstance(\n            @Qualifier(\"public\") TestBean spouse,\n            @Value(\"#{privateInstance.age}\") String country) {\n        TestBean tb = new TestBean(\"protectedInstance\", 1);\n        tb.setSpouse(spouse);\n        tb.setCountry(country);\n        return tb;\n    }\n\n    @Bean\n    private TestBean privateInstance() {\n        return new TestBean(\"privateInstance\", i++);\n    }\n\n    @Bean\n    @RequestScope\n    public TestBean requestScopedInstance() {\n        return new TestBean(\"requestScopedInstance\", 3);\n    }\n}\n"],["body","\n"],["body","@Component\npublic class FactoryMethodComponent {\n\n    @Bean @Scope(\"prototype\")\n    public TestBean prototypeInstance(InjectionPoint injectionPoint) {\n        return new TestBean(\"prototypeInstance for \" + injectionPoint.getMember());\n    }\n}\n"],["body","\n"],["body","As of Spring Framework 4.3,可以使用 InjectionPoint(DependencyDescriptor更详细的子类) 可以访问到请求注入点,当然这适用于 原型作用域,"],["body","\n\n"],["body","在普通 component的 @bean与 @configuration的@Bean不同\n\n"],["body","configuration 中 cglib会对其增强, 通过 代理@bean方法的调用来创建元数据引用"],["body","\n"],["body","component 下的@bean是正常的java语义"],["body","\n"],["body","由于CGLIB需要继承 该类,所以@bean方法不能是final和 private,可以设置成 static,这样避免spring拦截"],["body","\n\n"],["body","\n\n"],["headingLink","componet自动命名"],["heading","componet自动命名"],["body","\n\n"],["body","自动命名取 短类名"],["body","\n"],["body","如果命名重复  BeanNameGenerator 可以注册这个类实现自定义自动命名它的子类为,FullyQualifiedAnnotationBeanNameGenerator"],["body","\n\n"],["body","@Configuration\n@ComponentScan(basePackages = \"org.example\", nameGenerator = MyNameGenerator.class)\npublic class AppConfig {\n    // ...\n}\n"],["body","\n"],["body","<beans>\n    <context:component-scan base-package=\"org.example\"\n        name-generator=\"org.example.MyNameGenerator\" />\n</beans>\n"],["body","\n"],["headingLink","component设置作用域"],["heading","component设置作用域"],["body","\n"],["body","@Scope(\"prototype\")\n@Repository\npublic class MovieFinderImpl implements MovieFinder {\n    // ...\n}\n"],["body","\n"],["body","扫描特定作用域"],["body","\n"],["body","实现 ScopeMetadataResolver "],["body","\n"],["body","@Configuration\n@ComponentScan(basePackages = \"org.example\", scopeResolver = MyScopeResolver.class)\npublic class AppConfig {\n    // ...\n}\n"],["body","\n"],["body","扫描特定 作用域代理方式"],["body","\n"],["body","@Configuration\n@ComponentScan(basePackages = \"org.example\", scopedProxy = ScopedProxyMode.INTERFACES)\npublic class AppConfig {\n    // ...\n}\n"],["body","\n"],["headingLink","qualifier标注component"],["heading","Qualifier标注Component"],["body","\n"],["body","@Component\n@Qualifier(\"Action\")\npublic class ActionMovieCatalog implements MovieCatalog {\n    // ...\n}\n"],["body","\n"],["headingLink","产生候选组件索引"],["heading","产生候选组件索引"],["body","\n"],["body","<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context-indexer</artifactId>\n        <version>5.2.7.RELEASE</version>\n        <optional>true</optional>\n    </dependency>\n</dependencies>\n"],["body","\n"],["body","在编译期产生 候选者的索引,可以避免在类路径扫描,提升查找速度"],["body","\n"],["body","dependencies {\n    compileOnly \"org.springframework:spring-context-indexer:5.2.7.RELEASE\"\n}\n"],["body","\n\n"],["body","会产生  META-INF/spring.components 文件"],["body","\n"],["body","spring-context-indexer必须要注册到容器中来"],["body","\n"],["body","如果类路径下 META-INF/spring.components 有这个文件,且有相关依赖,则该特性会被激活,spring.index.ignore可以关闭"],["body","\n\n"],["headingLink","使用jsr330标准注解"],["heading","使用JSR330标准注解"],["body","\n\n"],["body","\n"],["body","需要引入"],["body","\n"],["body","<dependency>\n    <groupId>javax.inject</groupId>\n    <artifactId>javax.inject</artifactId>\n    <version>1</version>\n</dependency>\n"],["body","\n"],["body","\n\n"],["headingLink","依赖注入injectnamed"],["heading","依赖注入:Inject,Named"],["body","\n"],["body","import javax.inject.Inject;\n\npublic class SimpleMovieLister {\n\n    private MovieFinder movieFinder;\n\n    @Inject\n    public void setMovieFinder(MovieFinder movieFinder) {\n        this.movieFinder = movieFinder;\n    }\n\n    public void listMovies() {\n        this.movieFinder.findMovies(...);\n        // ...\n    }\n}\n"],["body","\n"],["headingLink","provider注入"],["heading","provider注入"],["body","\n"],["body","可以注入 Provider包装的类, 提供懒加载,按需加载"],["body","\n"],["body","import javax.inject.Inject;\nimport javax.inject.Provider;\n\npublic class SimpleMovieLister {\n\n    private Provider<MovieFinder> movieFinder;\n\n    @Inject\n    public void setMovieFinder(Provider<MovieFinder> movieFinder) {\n        this.movieFinder = movieFinder;\n    }\n\n    public void listMovies() {\n        this.movieFinder.get().findMovies(...);\n        // ...\n    }\n}\n"],["body","\n"],["headingLink","optional注入"],["heading","Optional注入"],["body","\n"],["body","注入Optional 包装类,或者使用@nullable"],["body","\n"],["body","public class SimpleMovieLister {\n\n    @Inject\n    public void setMovieFinder(Optional<MovieFinder> movieFinder) {\n        // ...\n    }\n}\n"],["body","\n"],["headingLink","named注入"],["heading","named注入"],["body","\n"],["body","名称注入named"],["body","\n"],["body","import javax.inject.Inject;\nimport javax.inject.Named;\n\npublic class SimpleMovieLister {\n\n    private MovieFinder movieFinder;\n\n    @Inject\n    public void setMovieFinder(@Named(\"main\") MovieFinder movieFinder) {\n        this.movieFinder = movieFinder;\n    }\n\n    // ...\n}\n"],["body","\n"],["headingLink","namedmanagedbean"],["heading","@named,@ManagedBean"],["body","\n"],["body","与Component相同的 @named,@ManagedBean,二者不可组合"],["body","\n"],["body","import javax.inject.Inject;\nimport javax.inject.Named;\n\n@Named(\"movieListener\")  // @ManagedBean(\"movieListener\") could be used as well\npublic class SimpleMovieLister {\n\n    private MovieFinder movieFinder;\n\n    @Inject\n    public void setMovieFinder(MovieFinder movieFinder) {\n        this.movieFinder = movieFinder;\n    }\n\n    // ...\n}\n\nimport javax.inject.Inject;\nimport javax.inject.Named;\n\n@Named\npublic class SimpleMovieLister {\n\n    private MovieFinder movieFinder;\n\n    @Inject\n    public void setMovieFinder(MovieFinder movieFinder) {\n        this.movieFinder = movieFinder;\n    }\n\n    // ...\n}\n"],["body","\n"],["headingLink","jsr330注解限制"],["heading","JSR330注解限制"],["body","\n"],["body","Spring"],["body","javax.inject.*"],["body","javax.inject restrictions / comments"],["body","\n"],["body","@Autowired"],["body","@Inject"],["body","@Inject has no 'required' attribute. Can be used with Java 8’s Optional instead."],["body","\n"],["body","@Component"],["body","@Named / @ManagedBean"],["body","JSR-330 does not provide a composable model, only a way to identify named components."],["body","\n"],["body","@Scope(\"singleton\")"],["body","@Singleton"],["body","The JSR-330 default scope is like Spring’s prototype. However, in order to keep it consistent with Spring’s general defaults, a JSR-330 bean declared in the Spring container is a singleton by default. In order to use a scope other than singleton, you should use Spring’s @Scope annotation. javax.inject also provides a @Scope annotation. Nevertheless, this one is only intended to be used for creating your own annotations."],["body","\n"],["body","@Qualifier"],["body","@Qualifier / @Named"],["body","javax.inject.Qualifier is just a meta-annotation for building custom qualifiers. Concrete String qualifiers (like Spring’s @Qualifier with a value) can be associated through javax.inject.Named."],["body","\n"],["body","@Value"],["body","-"],["body","no equivalent"],["body","\n"],["body","@Required"],["body","-"],["body","no equivalent"],["body","\n"],["body","@Lazy"],["body","-"],["body","no equivalent"],["body","\n"],["body","ObjectFactory"],["body","Provider"],["body","javax.inject.Provider is a direct alternative to Spring’s ObjectFactory, only with a shorter get() method name. It can also be used in combination with Spring’s @Autowired or with non-annotated constructors and setter methods."],["body","\n\n\n"],["headingLink","基于java的注解"],["heading","基于Java的注解."],["body","\n"],["headingLink","实例化-注解配置容器"],["heading","实例化 注解配置容器"],["body","\n"],["body","AnnotationConfigApplicationContext "],["body","\n\n"],["body","这个通用的applicationContext可以接受@configuration的配置,也可以接受@Component的注解"],["body","\n"],["body","带有@configuration注解的类被解析成 bean定义,@bean也会被解析成bean定义"],["body","\n\n"],["body","实例化"],["body","\n"],["body","public static void main(String[] args) {\n    ApplicationContext ctx = new AnnotationConfigApplicationContext(AppConfig.class);\n    MyService myService = ctx.getBean(MyService.class);\n    myService.doStuff();\n}\n\npublic static void main(String[] args) {\n    ApplicationContext ctx = new AnnotationConfigApplicationContext(MyServiceImpl.class, Dependency1.class, Dependency2.class);\n    MyService myService = ctx.getBean(MyService.class);\n    myService.doStuff();\n}\n"],["body","\n"],["body","编程方式实例化"],["body","\n"],["body","public static void main(String[] args) {\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n    ctx.register(AppConfig.class, OtherConfig.class);\n    ctx.register(AdditionalConfig.class);\n    ctx.refresh();\n    MyService myService = ctx.getBean(MyService.class);\n    myService.doStuff();\n}\n"],["body","\n"],["body","扫描"],["body","\n"],["body","public static void main(String[] args) {\n    AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n    ctx.scan(\"com.acme\");\n    ctx.refresh();\n    MyService myService = ctx.getBean(MyService.class);\n}\n\n@Configuration\n@ComponentScan(basePackages = \"com.acme\") \npublic class AppConfig  {\n    ...\n}\n"],["body","\n"],["body","web应用 AnnotationConfigWebApplicationContext"],["body","\n\n"],["body","'WebApplicationContext'的变体 AnnotationConfigWebApplicationContext 来配置spring的 ContextLoaderListener servlet"],["body","\n"],["body","Spring MVC DispatcherServlet"],["body","\n\n"],["body","<web-app>\n    <!-- Configure ContextLoaderListener to use AnnotationConfigWebApplicationContext\n        instead of the default XmlWebApplicationContext -->\n    <context-param>\n        <param-name>contextClass</param-name>\n        <param-value>\n            org.springframework.web.context.support.AnnotationConfigWebApplicationContext\n        </param-value>\n    </context-param>\n\n    <!-- Configuration locations must consist of one or more comma- or space-delimited\n        fully-qualified @Configuration classes. Fully-qualified packages may also be\n        specified for component-scanning -->\n    <context-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>com.acme.AppConfig</param-value>\n    </context-param>\n\n    <!-- Bootstrap the root application context as usual using ContextLoaderListener -->\n    <listener>\n        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n    </listener>\n\n    <!-- Declare a Spring MVC DispatcherServlet as usual -->\n    <servlet>\n        <servlet-name>dispatcher</servlet-name>\n        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n        <!-- Configure DispatcherServlet to use AnnotationConfigWebApplicationContext\n            instead of the default XmlWebApplicationContext -->\n        <init-param>\n            <param-name>contextClass</param-name>\n            <param-value>\n                org.springframework.web.context.support.AnnotationConfigWebApplicationContext\n            </param-value>\n        </init-param>\n        <!-- Again, config locations must consist of one or more comma- or space-delimited\n            and fully-qualified @Configuration classes -->\n        <init-param>\n            <param-name>contextConfigLocation</param-name>\n            <param-value>com.acme.web.MvcConfig</param-value>\n        </init-param>\n    </servlet>\n\n    <!-- map all requests for /app/* to the dispatcher servlet -->\n    <servlet-mapping>\n        <servlet-name>dispatcher</servlet-name>\n        <url-pattern>/app/*</url-pattern>\n    </servlet-mapping>\n</web-app>\n"],["body","\n"],["headingLink","bean注解"],["heading","@Bean注解"],["body","\n"],["headingLink","生命周期回调-1"],["heading","生命周期回调"],["body","\n\n"],["body","\n"],["body","'@PostConstructand@PreDestroy' 构造器调用完后,setter注入前,  销毁前"],["body","\n"],["body","\n"],["body","\n"],["body","支持 spring常规的 回调'InitializingBean, DisposableBean, or Lifecycle' "],["body","\n"],["body","\n"],["body","\n"],["body","*Aware interfaces 注入接口回调"],["body","\n"],["body","\n"],["body","\n"],["body","支持 init-methodanddestroy-method 属性"],["body","\n"],["body","\n"],["body","\n"],["body","关闭生命周期回调"],["body","\n"],["body","@Bean(destroyMethod=\"\")\npublic DataSource dataSource() throws NamingException {\n    return (DataSource) jndiTemplate.lookup(\"MyDS\");\n}\n"],["body","\n"],["body","\n\n"],["headingLink","指定scope域"],["heading","指定scope域"],["body","\n"],["body","// an HTTP Session-scoped bean exposed as a proxy\n@Bean\n@SessionScope\npublic UserPreferences userPreferences() {\n    return new UserPreferences();\n}\n\n@Bean\npublic Service userService() {\n    UserService service = new SimpleUserService();\n    // a reference to the proxied userPreferences bean\n    service.setUserPreferences(userPreferences());\n    return service;\n}\n"],["body","\n"],["headingLink","bean别名-1"],["heading","bean别名"],["body","\n"],["body","@Configuration\npublic class AppConfig {\n\n    @Bean({\"dataSource\", \"subsystemA-dataSource\", \"subsystemB-dataSource\"})\n    public DataSource dataSource() {\n        // instantiate, configure and return DataSource bean...\n    }\n}\n"],["body","\n"],["headingLink","bean描述"],["heading","bean描述"],["body","\n"],["body","@Configuration\npublic class AppConfig {\n\n    @Bean\n    @Description(\"Provides a basic example of a bean\")\n    public Thing thing() {\n        return new Thing();\n    }\n}\n"],["body","\n"],["headingLink","import"],["heading","@import"],["body","\n"],["body","@Configuration\npublic class ConfigA {\n\n    @Bean\n    public A a() {\n        return new A();\n    }\n}\n\n@Configuration\n@Import(ConfigA.class)\npublic class ConfigB {\n\n    @Bean\n    public B b() {\n        return new B();\n    }\n}\n\n\npublic static void main(String[] args) {\n    ApplicationContext ctx = new AnnotationConfigApplicationContext(ConfigB.class);\n\n    // now both beans A and B will be available...\n    A a = ctx.getBean(A.class);\n    B b = ctx.getBean(B.class);\n}\n"],["body","\n"],["body","这样只用引入 ConfigB就可以同时引入ConfigA"],["body","\n"],["headingLink","条件性的包含bean"],["heading","条件性的包含bean"],["body","\n"],["body","@Conditional."],["body","\n"],["body","实现Conditional接口"],["body","\n"],["body","@Profile的实现"],["body","\n"],["body","@Override\npublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\n    // Read the @Profile annotation attributes\n    MultiValueMap<String, Object> attrs = metadata.getAllAnnotationAttributes(Profile.class.getName());\n    if (attrs != null) {\n        for (Object value : attrs.get(\"value\")) {\n            if (context.getEnvironment().acceptsProfiles(((String[]) value))) {\n                return true;\n            }\n        }\n        return false;\n    }\n    return true;\n}\n"],["body","\n"],["body","Condition接口"],["body","\n"],["body","boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata);\n"],["body","\n"],["headingLink","java配置与xml配置结合"],["heading","Java配置与XML配置结合"],["body","\n\n"],["body","以Java为中心的配置 AnnotationConfigApplicationContext and the  @ImportResource 导入xml"],["body","\n\n"],["body","@Configuration\n@ImportResource(\"classpath:/com/acme/properties-config.xml\")\npublic class AppConfig {\n\n    @Value(\"${jdbc.url}\")\n    private String url;\n\n    @Value(\"${jdbc.username}\")\n    private String username;\n\n    @Value(\"${jdbc.password}\")\n    private String password;\n\n    @Bean\n    public DataSource dataSource() {\n        return new DriverManagerDataSource(url, username, password);\n    }\n}\n"],["body","\n"],["headingLink","环境抽象"],["heading","环境抽象"],["body","\n"],["body","spring对环境的抽象建模 主要是 两块: properties 和 profile"],["body","\n\n"],["body","\n"],["body","profile的含义是 条件选择"],["body","\n"],["body","\n"],["body","\n"],["body","properties (包括配置文件,系统属性,系统环境变量,JNDI,servletContext参数,等等)"],["body","\n"],["body","\n\n"],["headingLink","profile"],["heading","profile"],["body","\n"],["body","@Configuration\n@Profile(\"development\")\npublic class StandaloneDataConfig {\n\n    @Bean\n    public DataSource dataSource() {\n        return new EmbeddedDatabaseBuilder()\n            .setType(EmbeddedDatabaseType.HSQL)\n            .addScript(\"classpath:com/bank/config/sql/schema.sql\")\n            .addScript(\"classpath:com/bank/config/sql/test-data.sql\")\n            .build();\n    }\n}\n"],["body","\n"],["body","profile名称支持 如下语法"],["body","\n\n"],["body","!: A logical “not” of the profile"],["body","\n"],["body","&: A logical “and” of the profiles"],["body","\n"],["body","|: A logical “or” of the profiles"],["body","\n\n"],["body","可以自定义注解"],["body","\n"],["body","@Target(ElementType.TYPE)\n@Retention(RetentionPolicy.RUNTIME)\n@Profile(\"production\")\npublic @interface Production {\n}\n"],["body","\n"],["body","@Profile({\"p1\", \"!p2\"}) {} 标识 或逻辑"],["body","\n"],["body","基于xml的配置"],["body","\n"],["body","<beans profile=\"development\"\n    xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"\n    xsi:schemaLocation=\"...\">\n\n    <jdbc:embedded-database id=\"dataSource\">\n        <jdbc:script location=\"classpath:com/bank/config/sql/schema.sql\"/>\n        <jdbc:script location=\"classpath:com/bank/config/sql/test-data.sql\"/>\n    </jdbc:embedded-database>\n</beans>\n\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"\n    xmlns:jee=\"http://www.springframework.org/schema/jee\"\n    xsi:schemaLocation=\"...\">\n\n    <!-- other bean definitions -->\n\n    <beans profile=\"development\">\n        <jdbc:embedded-database id=\"dataSource\">\n            <jdbc:script location=\"classpath:com/bank/config/sql/schema.sql\"/>\n            <jdbc:script location=\"classpath:com/bank/config/sql/test-data.sql\"/>\n        </jdbc:embedded-database>\n    </beans>\n\n    <beans profile=\"production\">\n        <jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/datasource\"/>\n    </beans>\n</beans>\n"],["body","\n"],["headingLink","激活profile"],["heading","激活profile"],["body","\n"],["body","通过编程的方式 ,使用Environment接口 通过容器"],["body","\n"],["body","AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\nctx.getEnvironment().setActiveProfiles(\"development\");\nctx.register(SomeConfig.class, StandaloneDataConfig.class, JndiDataConfig.class);\nctx.refresh();\n"],["body","\n"],["body","使用注解 @ActiveProfiles"],["body","\n"],["body","使用变量名spring.profiles.active"],["body","\n"],["body","  -Dspring.profiles.active=\"profile1,profile2\"\n"],["body","\n"],["body","spring.profiles.default设置默认环境变量"],["body","\n"],["body","@Configuration\n@Profile(\"default\")\npublic class DefaultDataConfig {\n\n    @Bean\n    public DataSource dataSource() {\n        return new EmbeddedDatabaseBuilder()\n            .setType(EmbeddedDatabaseType.HSQL)\n            .addScript(\"classpath:com/bank/config/sql/schema.sql\")\n            .build();\n    }\n}\n"],["body","\n"],["headingLink","propertiessource"],["heading","PropertiesSource"],["body","\n\n"],["body","\n"],["body","propertiesSource是 spring对环境变量的抽象,基于键值对的抽象"],["body","\n"],["body","\n"],["body","\n"],["body","standardEnvironment 是包含两个 properties Source "],["body","\n\n"],["body","JVM system properties (System.getProperties()"],["body","\n"],["body","system environment variables (System.getenv())."],["body","\n\n"],["body","\n"],["body","\n"],["body","StandardServletEnvrionment 包含 servletconfig,servletContext参数,可选的JNDIPropertySource"],["body","\n"],["body","\n"],["body","\n"],["body","环境变量的查找有层级优先级,以StandardServletEnvrionment 为例"],["body","\n\n"],["body","ServletConfig parameters (if applicable — for example, in case of a DispatcherServlet context)"],["body","\n"],["body","ServletContext parameters (web.xml context-param entries)"],["body","\n"],["body","JNDI environment variables (java:comp/env/ entries)"],["body","\n"],["body","JVM system properties (-D command-line arguments)"],["body","\n"],["body","JVM system environment (operating system environment variables)"],["body","\n\n"],["body","\n"],["body","\n"],["body","以上查找机制是可配的,可自定义"],["body","\n"],["body","ConfigurableApplicationContext ctx = new GenericApplicationContext();\nMutablePropertySources sources = ctx.getEnvironment().getPropertySources();\nsources.addFirst(new MyPropertySource());\n"],["body","\n"],["body","经过以上配置,可以注册自定义的MypropertySource 并且由先先级是最高"],["body","\n"],["body","\n\n"],["headingLink","propertysource"],["heading","@PropertySource"],["body","\n"],["body","@Configuration\n@PropertySource(\"classpath:/com/myco/app.properties\")\npublic class AppConfig {\n\n    @Autowired\n    Environment env;\n\n    @Bean\n    public TestBean testBean() {\n        TestBean testBean = new TestBean();\n        testBean.setName(env.getProperty(\"testbean.name\"));\n        return testBean;\n    }\n}\n"],["body","\n"],["body","@Configuration\n@PropertySource(\"classpath:/com/${my.placeholder:default/path}/app.properties\")\npublic class AppConfig {\n\n    @Autowired\n    Environment env;\n\n    @Bean\n    public TestBean testBean() {\n        TestBean testBean = new TestBean();\n        testBean.setName(env.getProperty(\"testbean.name\"));\n        return testBean;\n    }\n}\n"],["body","\n"],["body","my.placeholder是其他已经定义过的 属性,default/path是找不到数据源使用默认的属性"],["body","\n"],["headingLink","占位符解析"],["heading","占位符解析"],["body","\n"],["body","环境变量贯穿整个容器,只要在定义之前这个变量已经被注册进去就可以"],["body","\n"],["body","<beans>\n    <import resource=\"com/bank/service/${customer}-config.xml\"/>\n</beans>\n"],["body","\n"],["headingLink","registering-a-loadtimeweaver"],["heading","Registering a LoadTimeWeaver"],["body","\n"],["body","当类被装载进虚拟机时,动态的转换类"],["body","\n"],["body","@Configuration\n@EnableLoadTimeWeaving\npublic class AppConfig {\n}\n"],["body","\n"],["body","<beans>\n    <context:load-time-weaver/>\n</beans>\n"],["body","\n"],["headingLink","applicationcontext额外的功能"],["heading","ApplicationContext额外的功能"],["body","\n\n"],["body","org.springframework.beans.factory 提供基本的管理和维护bean的功能,org.springframework.context 添加了ApplicationContext接口不仅扩展了beanFactory接口,也提供了其他功能"],["body","\n"],["body","大部分应用程序以声明的方式 使用ApplicationContext,例如依赖 ContextLoader的类 "],["body","\n"],["body","额外的功能如下\n\n"],["body","i18n 风格的 消息访问,  MessageSource"],["body","\n"],["body","访问URL资源: ResourceLoader"],["body","\n"],["body","时间发布: ApplicationListener,ApplicationEventPublisher"],["body","\n"],["body","带有层次接口的多上下文,每个applicationContext只关注特定的层, 例如web层, 通过 HierarchicalBeanFactory接口"],["body","\n\n"],["body","\n\n"],["headingLink","使用-messagesource-国际化"],["heading","使用 MessageSource 国际化"],["body","\n"],["body","String getMessage(String code, @Nullable Object[] args, @Nullable String defaultMessage, Locale locale);\n"],["body","\n"],["body","根据Loclae,  code对应的 带参数的message"],["body","\n\n"],["body","\n"],["body","applicationContext首先会查找当前容器中有没有 messageSource的bean名"],["body","\n"],["body","\n"],["body","\n"],["body","如果找到了则使用该 bean作为 消息源"],["body","\n"],["body","\n"],["body","\n"],["body","如果没找到 则往父 bean找,如果还是找不到则 在 messageSource代理类 DelegatingMessageSource 设置空的source"],["body","\n"],["body","\n"],["body","\n"],["body","spring提供了 两个 messageSource"],["body","\n\n"],["body","\n"],["body","ResourceBundleMessageSource"],["body","\n"],["body","\n"],["body","\n"],["body","StaticMessageSource"],["body","\n"],["body","\n"],["body","\n"],["body","都继承于HierarchicalMessageSource(为了处理 嵌套的消息)"],["body","\n"],["body","\n"],["body","\n"],["body","名称要覆盖messageSource"],["body","\n"],["body","\n"],["body","\n"],["body","basename,即资源包的名称,会默认去类路径下查找:  classpath:basename.properties, basename-en.properties,等不同地域的文件"],["body","\n"],["body","\n\n"],["body","\n\n"],["body","    @Bean(\"messageSource\")\n    public  ResourceBundleMessageSource resourceBundleMessageSource(){\n        ResourceBundleMessageSource resourceBundleMessageSource = new ResourceBundleMessageSource();\n        resourceBundleMessageSource.setAlwaysUseMessageFormat(true);\n        resourceBundleMessageSource.setBasenames(\"format\",\"exceptions\",\"windows\",\"messages\");\n        return resourceBundleMessageSource;\n    }\n    \n"],["body","\n\n"],["body","还有可重载的 ResourceBundleMessageSource : ReloadableResourceBundleMessageSource\n\n"],["body","允许从spring 任意的 location 加载文件"],["body","\n"],["body","支持热加载"],["body","\n\n"],["body","\n\n"],["headingLink","标准事件和自定义事件"],["heading","标准事件和自定义事件"],["body","\n"],["headingLink","spring提供的内置事件"],["heading","spring提供的内置事件"],["body","\n"],["body","Event"],["body","Explanation"],["body","\n"],["body","ContextRefreshedEvent"],["body","1. 当ApplicationContext被初始化或者被刷新时(例如调用`refresh) 2. 在容器关闭前,context可以被刷新任意次"],["body","\n"],["body","ContextStartedEvent"],["body","Published when the ApplicationContext is started by using the start() method on the ConfigurableApplicationContext interface"],["body","\n"],["body","ContextStoppedEvent"],["body","Published when the ApplicationContext is stopped by using the stop() method on the ConfigurableApplicationContext interface. Here, “stopped” means that all Lifecycle beans receive an explicit stop signal. A stopped context may be restarted through a start() call."],["body","\n"],["body","ContextClosedEvent"],["body","Published when the ApplicationContext is being closed by using the close() method on the ConfigurableApplicationContext interface or via a JVM shutdown hook. Here, \"closed\" means that all singleton beans will be destroyed. Once the context is closed, it reaches its end of life and cannot be refreshed or restarted."],["body","\n"],["body","RequestHandledEvent"],["body","A web-specific event telling all beans that an HTTP request has been serviced. This event is published after the request is complete. This event is only applicable to web applications that use Spring’s DispatcherServlet."],["body","\n"],["body","ServletRequestHandledEvent"],["body","A subclass of RequestHandledEvent that adds Servlet-specific context information"],["body","\n\n\n"],["headingLink","自定义事件"],["heading","自定义事件"],["body","\n"],["body","通过ApplicationEvent自定义事件发布,ApplicationListener 自定义事件接收, ApplicationEventPublisher在容器bean中发布事件"],["body","\n"],["body","//定义事件\npublic class BlackListEvent extends ApplicationEvent {\n\n    private final String address;\n    private final String content;\n\n    public BlackListEvent(Object source, String address, String content) {\n        super(source);\n        this.address = address;\n        this.content = content;\n    }\n\n    // accessor and other methods...\n}\n//定义 发布事件的服务\npublic class EmailService implements ApplicationEventPublisherAware {\n\n    private List<String> blackList;\n    private ApplicationEventPublisher publisher;\n\n    public void setBlackList(List<String> blackList) {\n        this.blackList = blackList;\n    }\n\n    public void setApplicationEventPublisher(ApplicationEventPublisher publisher) {\n        this.publisher = publisher;\n    }\n\n    public void sendEmail(String address, String content) {\n        if (blackList.contains(address)) {\n            publisher.publishEvent(new BlackListEvent(this, address, content));\n            return;\n        }\n        // send email...\n    }\n}\n//定义监听该事件的类\npublic class BlackListNotifier implements ApplicationListener<BlackListEvent> {\n\n    private String notificationAddress;\n\n    public void setNotificationAddress(String notificationAddress) {\n        this.notificationAddress = notificationAddress;\n    }\n\n    public void onApplicationEvent(BlackListEvent event) {\n        // notify appropriate parties via notificationAddress...\n    }\n}\n"],["body","\n"],["headingLink","注意事项"],["heading","注意事项"],["body","\n\n"],["body","\n"],["body","该事件发布是同步的,会等待所有监听者 处理完事件才会返回,比较利于事务"],["body","\n"],["body","\n"],["body","\n"],["body","另外一个事件发布的策略:异步多播 ApplicationEventMulticaster interface and SimpleApplicationEventMulticaster"],["body","\n"],["body","\n\n"],["headingLink","基于注解的事件监听"],["heading","基于注解的事件监听"],["body","\n"],["body","public class BlackListNotifier {\n\n    private String notificationAddress;\n\n    public void setNotificationAddress(String notificationAddress) {\n        this.notificationAddress = notificationAddress;\n    }\n\n    @EventListener\n    public void processBlackListEvent(BlackListEvent event) {\n        // notify appropriate parties via notificationAddress...\n    }\n}\n\n//多事件 监听\n@EventListener({ContextStartedEvent.class, ContextRefreshedEvent.class})\npublic void handleContextStart() {\n    // ...\n}\n\n//运行时对事件 过滤\n@EventListener(condition = \"#blEvent.content == 'my-event'\")\npublic void processBlackListEvent(BlackListEvent blEvent) {\n    // notify appropriate parties via notificationAddress...\n}\n\n//处理完事件后 发布另一事件,可以通过集合发布多个事件\n@EventListener\npublic ListUpdateEvent handleBlackListEvent(BlackListEvent event) {\n    // notify appropriate parties via notificationAddress and\n    // then publish a ListUpdateEvent...\n}\n\n//异步事件处理\n@EventListener\n@Async\npublic void processBlackListEvent(BlackListEvent event) {\n    // BlackListEvent is processed in a separate thread\n}\n异步事件的限制\n如果异步调用发生异常,不会传给调用者,详见AsyncUncaughtExceptionHandler \n无法通过返回值 发布事件,只能手动 注入ApplicationEventPublisher,发布\n    \n//可排序的监听器执行    \n@EventListener\n@Order(42)\npublic void processBlackListEvent(BlackListEvent event) {\n    // notify appropriate parties via notificationAddress...\n}    \n\n//基于泛型的 监听器选择\n@EventListener\npublic void onPersonCreated(EntityCreatedEvent<Person> event) {\n    // ...\n}\n只会选择 Person类型的监听器\n前提是 此类已将泛型具体化\n\n//可以使用 ResolveableTypeProvider 来让spring自动识别解析类型\npublic class EntityCreatedEvent<T> extends ApplicationEvent implements ResolvableTypeProvider {\n\n    public EntityCreatedEvent(T entity) {\n        super(entity);\n    }\n\n    @Override\n    public ResolvableType getResolvableType() {\n        return ResolvableType.forClassWithGenerics(getClass(), ResolvableType.forInstance(getSource()));\n    }\n}\n"],["body","\n"],["body","el表达式有专门语义环境的变量"],["body","\n"],["body","Name"],["body","Location"],["body","Description"],["body","Example"],["body","\n"],["body","Event"],["body","root object"],["body","The actual ApplicationEvent."],["body","#root.event or event"],["body","\n"],["body","Arguments array"],["body","root object"],["body","The arguments (as an object array) used to invoke the method."],["body","#root.args or args; args[0] to access the first argument, etc."],["body","\n"],["body","Argument name"],["body","evaluation context"],["body","The name of any of the method arguments. If, for some reason, the names are not available (for example, because there is no debug information in the compiled byte code), individual arguments are also available using the #a<#arg> syntax where <#arg> stands for the argument index (starting from 0)."],["body","#blEvent or #a0 (you can also use #p0 or #p<#arg> parameter notation as an alias)"],["body","\n\n\n"],["headingLink","资源访问"],["heading","资源访问"],["body","\n\n"],["body","application context 是一个ResourceLoader,可以导入resource对象"],["body","\n"],["body","resource对象本质上是一个 更加版本丰富的 java.net.URL"],["body","\n"],["body","Resource对象可以以间接的方式,透明的从大多数路径 下获取资源"],["body","\n"],["body","包括 类路径,文件系统路径,任何以URL标准形式的路径"],["body","\n"],["body","如果一个资源 没有指定任何  资源前缀, 则默认是 application context type"],["body","\n"],["body","提供给 ApplicationContext构造函数的 路径, 以string格式,根据实现的不同会当作不同路径的资源,例如(ClassPathXmlApplicationContext) 类路径下的"],["body","\n"],["body","通过ResourceLoaderAware 注入 ResourceLoader,直接访问资源文件"],["body","\n\n"],["headingLink","访问applicationcontext"],["heading","访问ApplicationContext"],["body","\n\n"],["body","\n"],["body","通过申明式创建 ApplicationContext"],["body","\n"],["body","<context-param>\n    <param-name>contextConfigLocation</param-name>\n    <param-value>/WEB-INF/daoContext.xml /WEB-INF/applicationContext.xml</param-value>\n</context-param>\n\n<listener>\n    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n</listener>\n1. 监听器检测contextConfigLocation  参数下的文件\n2. 如果参数不存在,取默认/WEB-INF/applicationContext.xml\n3. 文件之间使用 : ; 空格等分隔\n4. 支持ANtPath风格\n"],["body","\n"],["body","\n\n"],["headingLink","springcontextrar部署"],["heading","springContextRAR部署"],["body","\n"],["body","Deploying a Spring ApplicationContext as a Java EE RAR File"],["body","\n"],["body","基于RAR的springContext部署"],["body","\n"],["body","不需要web端"],["body","\n"],["body","SpringContextResourceAdapter"],["body","\n"],["headingLink","beanfactory"],["heading","BeanFactory"],["body","\n"],["body","BeanFactory 极其相关接口(BeanFactoryAware, InitializingBean, DisposableBean)  是集成第三方组件 的接入点,可以不需要注解或者反射,就能有效的使第三方组件与容器沟通"],["body","\n"],["headingLink","beanfactory-or-applicationcontext"],["heading","BeanFactory or ApplicationContext"],["body","\n"],["body","这两者的容器级别 与 对启动的影响"],["body","\n"],["body","ApplicationContext 子类:GenericApplicationContext,AnnotationConfigApplicationContext 主要完成的工作"],["body","\n\n"],["body","配置文件加载"],["body","\n"],["body","类路径扫描"],["body","\n"],["body","注册bean定义"],["body","\n"],["body","(as of 5.0) registering functional bean definitions."],["body","\n\n"],["body","ApplicationContext  包含了所有 beanfactory的功能,除非想完全把控bean的处理过程"],["body","\n\n"],["body","简单实现 DefaultListableBeanFactory 不会检测到  BeanPostProcessor "],["body","\n\n"],["body","beanfactory与applicationContext对比"],["body","\n"],["body","Feature"],["body","BeanFactory"],["body","ApplicationContext"],["body","\n"],["body","Bean instantiation/wiring"],["body","Yes"],["body","Yes"],["body","\n"],["body","Integrated lifecycle management"],["body","No"],["body","Yes"],["body","\n"],["body","Automatic BeanPostProcessor registration"],["body","No"],["body","Yes"],["body","\n"],["body","Automatic BeanFactoryPostProcessor registration"],["body","No"],["body","Yes"],["body","\n"],["body","Convenient MessageSource access (for internalization)"],["body","No"],["body","Yes"],["body","\n"],["body","Built-in ApplicationEvent publication mechanism"],["body","No"],["body","Yes"],["body","\n\n\n"],["body","{% raw %}"],["body","\n"],["h1","Resource"],["body","\n\n"],["body","本章节介绍了spring如何处理资源,如何在spring中使用资源"],["body","\n"],["body","对Java URL类的封装,提供了更强大的功能 ,推荐在自己代码中使用"],["body","\n\n"],["headingLink","内置的resource实现"],["heading","内置的Resource实现"],["body","\n"],["body","UrlResource"],["body","\n\n"],["body","UrlResource 包装了java.net.URL ,可以用来访问 Http,Ftp,file文件系统的访问"],["body","\n"],["body","会解析 已知的关键字 classpath"],["body","\n\n"],["body","ClassPathResource"],["body","\n\n"],["body","加载类路径的资源文件"],["body","\n"],["body","要么使用当前线程的类加载器或者给定类加载器,或者 指定类"],["body","\n\n"],["body","FileSystemResource"],["body","\n"],["body","ServletContextResource"],["body","\n\n"],["body","ServletContext*的实现,从web跟目录的相对路径加载文件"],["body","\n\n"],["headingLink","resourceloader"],["heading","ResourceLoader"],["body","\n\n"],["body","\n"],["body","用于加载resource的类"],["body","\n"],["body","\n"],["body","\n"],["body","所有application context 实现了该接口,对于不同的容器返回不同类型的 Resource"],["body","\n"],["body","Resource template = ctx.getResource(\"some/resource/path/myTemplate.txt\");\n"],["body","\n\n"],["body","\n"],["body","ClassPathXmlApplicationContext 返回 ClassPathResource"],["body","\n"],["body","\n"],["body","\n"],["body","FileSystemXmlApplicationContext 返回FileSystemResource"],["body","\n"],["body","\n"],["body","\n"],["body","WebApplicationContext 返回ServletContextResource"],["body","\n"],["body","\n"],["body","\n"],["body","可以强制返回指定类型的资源"],["body","\n"],["body","//返回类路径下的资源\nResource template = ctx.getResource(\"classpath:some/resource/path/myTemplate.txt\");\n//返回文件系统下的资源\nResource template = ctx.getResource(\"file:///some/resource/path/myTemplate.txt\");\n//返回http资源\nResource template = ctx.getResource(\"https://myhost.com/resource/path/myTemplate.txt\");\n"],["body","\n"],["body","\n\n"],["body","显示指定前缀"],["body","\n"],["body","\n\n"],["body","Prefix"],["body","Example"],["body","Explanation"],["body","\n"],["body","classpath:"],["body","classpath:com/myapp/config.xml"],["body","Loaded from the classpath."],["body","\n"],["body","file:"],["body","file:///data/config.xml"],["body","Loaded as a URL from the filesystem. See also FileSystemResource Caveats."],["body","\n"],["body","http:"],["body","https://myserver/logo.png"],["body","Loaded as a URL."],["body","\n"],["body","(none)"],["body","/data/config.xml"],["body","Depends on the underlying ApplicationContext."],["body","\n\n\n"],["headingLink","resourceloaderaware"],["heading","ResourceLoaderAware"],["body","\n\n"],["body","申明注入resourceloader的接口"],["body","\n"],["body","因为所有 ApplicationContext 都实现了resourceloader 所以可以使用他 来加载资源"],["body","\n\n"],["headingLink","依赖注入资源属性"],["heading","依赖注入资源属性"],["body","\n\n"],["body","\n"],["body","使用PropertyEditor 注入自定义的属性文件,"],["body","\n"],["body","//注入的路径取决于 你的 applicationContext的类型,可以指定前缀来使用指定资源\n<bean id=\"myBean\" class=\"...\">\n    <property name=\"template\" value=\"some/resource/path/myTemplate.txt\"/>\n</bean>\n\n"],["body","\n"],["body","\n\n"],["headingLink","使用resource创建-applicationcontext"],["heading","使用resource创建 applicationContext"],["body","\n"],["body","ApplicationContext ctx = new ClassPathXmlApplicationContext(\"conf/appContext.xml\");\n\nApplicationContext ctx =\n    new FileSystemXmlApplicationContext(\"conf/appContext.xml\");\n"],["body","\n"],["body","com/\n  foo/\n    services.xml\n    daos.xml\n    MessengerService.class\n    \n使用上述路径的资源加载文件\nApplicationContext ctx = new ClassPathXmlApplicationContext(\n    new String[] {\"services.xml\", \"daos.xml\"}, MessengerService.class);\n"],["body","\n"],["body","资源加载中的通配符"],["body","\n"],["headingLink","文件系统资源使用-警告"],["heading","文件系统资源使用 警告"],["body","\n"],["body","为了向后兼容的原因 spring使用 FileSystemApplicationContext 时,会通通当成相对路径,"],["body","\n"],["body","这两个示例 时相等价的\nApplicationContext ctx =\n    new FileSystemXmlApplicationContext(\"conf/context.xml\");\n    \nApplicationContext ctx =\n    new FileSystemXmlApplicationContext(\"/conf/context.xml\");\n"],["body","\n"],["h1","验证,数据绑定,类型转换"],["body","\n"],["body","Validation, Data Binding, and Type Conversion"],["body","\n\n"],["body","Validator 与 DataBinder 组成 validation 包"],["body","\n"],["body","BeanWrapper 是spring非常基础的概念,在很多地方使用到"],["body","\n"],["body","DataBinder 和BeanWrapper 都使用 PropertyEditorSupport 的实现去 解析和格式化属性值"],["body","\n\n"],["headingLink","spring-validtor使用示例"],["heading","spring validtor使用示例"],["body","\n"],["body","public class PersonValidator implements Validator {\n\n    /**\n     * This Validator validates only Person instances\n     */\n    public boolean supports(Class clazz) {\n        return Person.class.equals(clazz);\n    }\n\n    public void validate(Object obj, Errors e) {\n        ValidationUtils.rejectIfEmpty(e, \"name\", \"name.empty\");\n        Person p = (Person) obj;\n        if (p.getAge() < 0) {\n            e.rejectValue(\"age\", \"negativevalue\");\n        } else if (p.getAge() > 110) {\n            e.rejectValue(\"age\", \"too.darn.old\");\n        }\n    }\n}\n"],["body","\n"],["headingLink","resolving-codes-to-error-messages"],["heading","Resolving Codes to Error Messages"],["body","\n\n"],["body","使用前面的验证器产生的错误消息,可以通过 MessageCodesResolver 解析code"],["body","\n"],["body","例如默认的实现 DefaultMessageCodesResolver ,调用 rejectValue(\"age\", \"too.darn.old\") 方法会在resource中注册 too.darn.old  too.darn.old.age,too.darn.old.age.int"],["body","\n\n"],["headingLink","bean-manipulation-and-the-beanwrapper"],["heading","Bean Manipulation and the BeanWrapper"],["body","\n\n"],["body","BeanWrapper* 和它的实现 BeanWrapperImpl 可以批量设置或者读取 JavaBean属性"],["body","\n"],["body","支持嵌套属性"],["body","\n"],["body","能够添加 PropertyChangeListeners,VetoableChangeListeners"],["body","\n"],["body","支持字段索引"],["body","\n"],["body","Bean Wrapper通常是 DataBinder和 BeanFactory 使用,不是给应用程序直接使用"],["body","\n\n"],["headingLink","访问语法"],["heading","访问语法"],["body","\n"],["body","Expression"],["body","Explanation"],["body","\n"],["body","name"],["body","javabean的属性名"],["body","\n"],["body","account.name"],["body","嵌套的属性名getAccount().setName() or getAccount().getName() methods."],["body","\n"],["body","account[2]"],["body","集合索引Indicates the third element of the indexed property account. Indexed properties can be of type array, list, or other naturally ordered collection."],["body","\n"],["body","account[COMPANYNAME]"],["body","map索引"],["body","\n\n\n"],["headingLink","如何使用-beanwrapper"],["heading","如何使用 beanWrapper"],["body","\n"],["body","public class Company {\n\n    private String name;\n    private Employee managingDirector;\n\n    public String getName() {\n        return this.name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public Employee getManagingDirector() {\n        return this.managingDirector;\n    }\n\n    public void setManagingDirector(Employee managingDirector) {\n        this.managingDirector = managingDirector;\n    }\n}\n\n\npublic class Employee {\n\n    private String name;\n\n    private float salary;\n\n    public String getName() {\n        return this.name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public float getSalary() {\n        return salary;\n    }\n\n    public void setSalary(float salary) {\n        this.salary = salary;\n    }\n}\n//使用\nBeanWrapper company = new BeanWrapperImpl(new Company());\n// setting the company name..\ncompany.setPropertyValue(\"name\", \"Some Company Inc.\");\n// ... can also be done like this:\nPropertyValue value = new PropertyValue(\"name\", \"Some Company Inc.\");\ncompany.setPropertyValue(value);\n\n// ok, let's create the director and tie it to the company:\nBeanWrapper jim = new BeanWrapperImpl(new Employee());\njim.setPropertyValue(\"name\", \"Jim Stravinsky\");\ncompany.setPropertyValue(\"managingDirector\", jim.getWrappedInstance());\n\n// retrieving the salary of the managingDirector through the company\nFloat salary = (Float) company.getPropertyValue(\"managingDirector.salary\");\n"],["body","\n"],["headingLink","propertyeditor-内置的beanwrapper的实现"],["heading","PropertyEditor 内置的beanwrapper的实现"],["body","\n\n"],["body","spring使用 PropertyEditor 在 string名称的属性,与 对象 之间 转换"],["body","\n"],["body","springBean wrapper有两个使用场景\n\n"],["body","通过使用 PropertyEditor 的实现 来实现 设置 bean,例如基于xml的依赖注入"],["body","\n"],["body","spring MVC的Http参数解析中绑定,使用各种各样的 PropertyEditor"],["body","\n"],["body","您可以在CommandController的所有子类中手动绑定这些实现。"],["body","\n\n"],["body","\n"],["body","spring 有很多 PropertyEditor 在 org.springframework.beans.propertyeditors包中,大部分由 BeanWrapperImpl 默认注册"],["body","\n\n"],["body","Class"],["body","Explanation"],["body","\n"],["body","ByteArrayPropertyEditor"],["body","Editor for byte arrays. Converts strings to their corresponding byte representations. Registered by default by BeanWrapperImpl."],["body","\n"],["body","ClassEditor"],["body","Parses Strings that represent classes to actual classes and vice-versa. When a class is not found, an IllegalArgumentException is thrown. By default, registered by BeanWrapperImpl."],["body","\n"],["body","CustomBooleanEditor"],["body","Customizable property editor for Boolean properties. By default, registered by BeanWrapperImpl but can be overridden by registering a custom instance of it as a custom editor."],["body","\n"],["body","CustomCollectionEditor"],["body","Property editor for collections, converting any source Collection to a given target Collection type."],["body","\n"],["body","CustomDateEditor"],["body","Customizable property editor for java.util.Date, supporting a custom DateFormat. NOT registered by default. Must be user-registered with the appropriate format as needed."],["body","\n"],["body","CustomNumberEditor"],["body","Customizable property editor for any Number subclass, such as Integer, Long, Float, or Double. By default, registered by BeanWrapperImpl but can be overridden by registering a custom instance of it as a custom editor."],["body","\n"],["body","FileEditor"],["body","Resolves strings to java.io.File objects. By default, registered by BeanWrapperImpl."],["body","\n"],["body","InputStreamEditor"],["body","One-way property editor that can take a string and produce (through an intermediate ResourceEditor and Resource) an InputStream so that InputStream properties may be directly set as strings. Note that the default usage does not close the InputStream for you. By default, registered by BeanWrapperImpl."],["body","\n"],["body","LocaleEditor"],["body","Can resolve strings to Locale objects and vice-versa (the string format is *[country]*[variant], same as the toString() method of Locale). By default, registered by BeanWrapperImpl."],["body","\n"],["body","PatternEditor"],["body","Can resolve strings to java.util.regex.Pattern objects and vice-versa."],["body","\n"],["body","PropertiesEditor"],["body","Can convert strings (formatted with the format defined in the javadoc of the java.util.Properties class) to Properties objects. By default, registered by BeanWrapperImpl."],["body","\n"],["body","StringTrimmerEditor"],["body","Property editor that trims strings. Optionally allows transforming an empty string into a null value. NOT registered by default — must be user-registered."],["body","\n"],["body","URLEditor"],["body","Can resolve a string representation of a URL to an actual URL object. By default, registered by BeanWrapperImpl."],["body","\n\n\n\n"],["body","通过使用 java.beans.PropertyEditorManager 为  PropertyEditor 设置 搜索路径"],["body","\n"],["body","搜索路径默认 包括 sun.bean.editors "],["body","\n"],["body","JavaBean对象 自动发现 与他同名同包的 PropertyEditor 例如 SomethingEditor 与 Something"],["body","\n\n"],["body","public class SomethingBeanInfo extends SimpleBeanInfo {\n\n    public PropertyDescriptor[] getPropertyDescriptors() {\n        try {\n            final PropertyEditor numberPE = new CustomNumberEditor(Integer.class, true);\n            PropertyDescriptor ageDescriptor = new PropertyDescriptor(\"age\", Something.class) {\n                public PropertyEditor createPropertyEditor(Object bean) {\n                    return numberPE;\n                };\n            };\n            return new PropertyDescriptor[] { ageDescriptor };\n        }\n        catch (IntrospectionException ex) {\n            throw new Error(ex.toString());\n        }\n    }\n}\n"],["body","\n"],["body","注册自定义的propertyEditor"],["body","\n\n"],["body","\n"],["body","spring会自动注册 内置的propertyEditor"],["body","\n"],["body","\n"],["body","\n"],["body","javabean 框架会自动 发现 与javabean同名同包的 propertyEditor"],["body","\n"],["body","\n"],["body","\n"],["body","也可以注册自己的propertyeditor"],["body","\n\n"],["body","\n"],["body","手动注册: ConfigurableBeanFactory.registerCustomEditor."],["body","\n"],["body","\n"],["body","\n"],["body","使用 post-processor , CustomEditorConfigurer 来注册"],["body","\n"],["body","\n"],["body","\n"],["body","使用 e bean factory post-processors  with BeanFactory "],["body","\n"],["body","\n"],["body","\n"],["body","使用 PropertyEditorRegistrar"],["body","\n"],["body","\n\n"],["body","package com.foo.editors.spring;\n\npublic final class CustomPropertyEditorRegistrar implements PropertyEditorRegistrar {\n\n    public void registerCustomEditors(PropertyEditorRegistry registry) {\n\n        // it is expected that new PropertyEditor instances are created\n        registry.registerCustomEditor(ExoticType.class, new ExoticTypeEditor());\n\n        // you could register as many custom property editors as are required here...\n    }\n}\n\n"],["body","\n"],["body","<bean class=\"org.springframework.beans.factory.config.CustomEditorConfigurer\">\n    <property name=\"propertyEditorRegistrars\">\n        <list>\n            <ref bean=\"customPropertyEditorRegistrar\"/>\n        </list>\n    </property>\n</bean>\n\n<bean id=\"customPropertyEditorRegistrar\"\n    class=\"com.foo.editors.spring.CustomPropertyEditorRegistrar\"/>\n"],["body","\n"],["body","继承SimpleFormController 初始化自定义的属性注册\npublic final class RegisterUserController extends SimpleFormController {\n\n    private final PropertyEditorRegistrar customPropertyEditorRegistrar;\n\n    public RegisterUserController(PropertyEditorRegistrar propertyEditorRegistrar) {\n        this.customPropertyEditorRegistrar = propertyEditorRegistrar;\n    }\n\n    protected void initBinder(HttpServletRequest request,\n            ServletRequestDataBinder binder) throws Exception {\n        this.customPropertyEditorRegistrar.registerCustomEditors(binder);\n    }\n\n    // other methods to do with registering a User\n}\n"],["body","\n"],["headingLink","类型转换"],["heading","类型转换"],["body","\n"],["body","package org.springframework.core.convert.converter;\n\npublic interface Converter<S, T> {\n\n    T convert(S source);\n}\n"],["body","\n"],["body","// 类型转换器 位于 core.convert.support\npackage org.springframework.core.convert.support;\n\nfinal class StringToInteger implements Converter<String, Integer> {\n\n    public Integer convert(String source) {\n        return Integer.valueOf(source);\n    }\n}\n"],["body","\n"],["body","使用ConverterFactory\npackage org.springframework.core.convert.converter;\n\npublic interface ConverterFactory<S, R> {\n\n    <T extends R> Converter<S, T> getConverter(Class<T> targetType);\n}\n\n"],["body","\n"],["body","package org.springframework.core.convert.support;\n\nfinal class StringToEnumConverterFactory implements ConverterFactory<String, Enum> {\n\n    public <T extends Enum> Converter<String, T> getConverter(Class<T> targetType) {\n        return new StringToEnumConverter(targetType);\n    }\n\n    private final class StringToEnumConverter<T extends Enum> implements Converter<String, T> {\n\n        private Class<T> enumType;\n\n        public StringToEnumConverter(Class<T> enumType) {\n            this.enumType = enumType;\n        }\n\n        public T convert(String source) {\n            return (T) Enum.valueOf(this.enumType, source.trim());\n        }\n    }\n}\n"],["body","\n"],["body","\n\n"],["body","GenericConverter"],["body","\n"],["body","package org.springframework.core.convert.converter;\n\npublic interface GenericConverter {\n\n    public Set<ConvertiblePair> getConvertibleTypes();\n\n    Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType);\n}\n"],["body","\n"],["body","ConditionalGenericConverter"],["body","\n"],["body","public interface ConditionalConverter {\n\n    boolean matches(TypeDescriptor sourceType, TypeDescriptor targetType);\n}\n\npublic interface ConditionalGenericConverter extends GenericConverter, ConditionalConverter {\n}\n"],["body","\n"],["body","ConversionService"],["body","\n"],["body","package org.springframework.core.convert;\n\npublic interface ConversionService {\n\n    boolean canConvert(Class<?> sourceType, Class<?> targetType);\n\n    <T> T convert(Object source, Class<T> targetType);\n\n    boolean canConvert(TypeDescriptor sourceType, TypeDescriptor targetType);\n\n    Object convert(Object source, TypeDescriptor sourceType, TypeDescriptor targetType);\n\n}\n"],["body","\n\n"],["body","配置conversionService"],["body","\n"],["body","编程方式使用 conversionService"],["body","\n\n"],["body","Formatt"],["body","\n"],["body","前面提到的 Type Convert类型转换 , spel,formatter,databinder就是基于 类型转换类 来工作的"],["body","\n\n"],["body","使用"],["body","\n"],["body","注解"],["body","\n"],["body","注册"],["body","\n\n"],["body","Configuring a Global Date and Time Format"],["body","\n"],["body","spring全局默认使用 DateFormat.SHORT "],["body","\n"],["body","org.springframework.format.datetime.standard.DateTimeFormatterRegistrar\n\norg.springframework.format.datetime.DateFormatterRegistrar, or org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar\n"],["body","\n"],["body","注册全局日期格式"],["body","\n"],["body","@Configuration\npublic class AppConfig {\n\n    @Bean\n    public FormattingConversionService conversionService() {\n\n        // Use the DefaultFormattingConversionService but do not register defaults\n        DefaultFormattingConversionService conversionService = new DefaultFormattingConversionService(false);\n\n        // Ensure @NumberFormat is still supported\n        conversionService.addFormatterForFieldAnnotation(new NumberFormatAnnotationFormatterFactory());\n\n        // Register JSR-310 date conversion with a specific global format\n        DateTimeFormatterRegistrar registrar = new DateTimeFormatterRegistrar();\n        registrar.setDateFormatter(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));\n        registrar.registerFormatters(conversionService);\n\n        // Register date conversion with a specific global format\n        DateFormatterRegistrar registrar = new DateFormatterRegistrar();\n        registrar.setFormatter(new DateFormatter(\"yyyyMMdd\"));\n        registrar.registerFormatters(conversionService);\n\n        return conversionService;\n    }\n}\n"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd>\n\n    <bean id=\"conversionService\" class=\"org.springframework.format.support.FormattingConversionServiceFactoryBean\">\n        <property name=\"registerDefaultFormatters\" value=\"false\" />\n        <property name=\"formatters\">\n            <set>\n                <bean class=\"org.springframework.format.number.NumberFormatAnnotationFormatterFactory\" />\n            </set>\n        </property>\n        <property name=\"formatterRegistrars\">\n            <set>\n                <bean class=\"org.springframework.format.datetime.joda.JodaTimeFormatterRegistrar\">\n                    <property name=\"dateFormatter\">\n                        <bean class=\"org.springframework.format.datetime.joda.DateTimeFormatterFactoryBean\">\n                            <property name=\"pattern\" value=\"yyyyMMdd\"/>\n                        </bean>\n                    </property>\n                </bean>\n            </set>\n        </property>\n    </bean>\n</beans>\n"],["body","\n"],["headingLink","bean验证"],["heading","Bean验证"],["body","\n"],["body","public class PersonForm {\n\n    @NotNull\n    @Size(max=64)\n    private String name;\n\n    @Min(0)\n    private int age;\n}\n"],["body","\n"],["body","注入bean"],["body","\n"],["body","import javax.validation.Validator;\n\n@Service\npublic class MyService {\n\n    @Autowired\n    private Validator validator;\n}\n"],["body","\n"],["body","自定义约束"],["body","\n"],["body","每个自定义约束包含两个部分"],["body","\n\n"],["body","@Constraint 注解申明约束"],["body","\n"],["body","javax.validation.ConstraintValidator的实现"],["body","\n\n"],["body","声明注解"],["body","\n"],["body","@Target({ElementType.METHOD, ElementType.FIELD})\n@Retention(RetentionPolicy.RUNTIME)\n@Constraint(validatedBy=MyConstraintValidator.class)\npublic @interface MyConstraint {\n}\n"],["body","\n"],["body","实现validator"],["body","\n"],["body","import javax.validation.ConstraintValidator;\n\npublic class MyConstraintValidator implements ConstraintValidator {\n\n    @Autowired;\n    private Foo aDependency;\n\n    // ...\n}\n"],["body","\n"],["body","import org.springframework.validation.beanvalidation.MethodValidationPostProcessor;\n\n@Configuration\n\npublic class AppConfig {\n\n    @Bean\n    public MethodValidationPostProcessor validationPostProcessor() {\n        return new MethodValidationPostProcessor;\n    }\n}\n"],["body","\n"],["h1","SPEL表达式"],["body","\n"],["body","Spring Expression Language (SpEL)"],["body","\n"],["headingLink","spel支持的功能"],["heading","SPEL支持的功能"],["body","\n\n"],["body","Literal expressions 字面量表达式:数学表达式"],["body","\n"],["body","Boolean and relational operators  布尔运算符,关系运算符"],["body","\n"],["body","Regular expressions : 正则表达式"],["body","\n"],["body","Class expressions : 类表达式"],["body","\n"],["body","Accessing properties, arrays, lists, and maps :访问数组,列表,map"],["body","\n"],["body","Method invocation:静态方法调用,对象方法调用"],["body","\n"],["body","Relational operators 关系运算符"],["body","\n"],["body","Assignment 赋值"],["body","\n"],["body","Calling constructors 调用构造器"],["body","\n"],["body","Bean references bean引用"],["body","\n"],["body","Array construction 数组构建"],["body","\n"],["body","Inline lists 内联lists"],["body","\n"],["body","Inline maps 内联 map"],["body","\n"],["body","Ternary operator  三元运算符"],["body","\n"],["body","Variables 变量"],["body","\n"],["body","User-defined functions 用户定义功能"],["body","\n"],["body","Collection projection 集合投影"],["body","\n"],["body","Collection selection 集合选择"],["body","\n"],["body","Templated expressions 模板表达式"],["body","\n\n"],["headingLink","evaluation"],["heading","Evaluation"],["body","\n\n"],["body","\n"],["body","spel的包 位于 org.springframework.expression ,它的子包 spel.support"],["body","\n"],["body","\n"],["body","\n"],["body","ExpressionParser 接口负责 解析 string类型的 表达式,可能会抛出两个异常,ParseException EvaluationException"],["body","\n"],["body","\n"],["body","\n"],["body","string类型的字面量用 单引号 包裹"],["body","\n"],["body","\n"],["body","\n"],["body","parser.parseExpressionandexp.getValue 必须成对的调用"],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\nExpression exp = parser.parseExpression(\"'Hello World'\"); \nString message = (String) exp.getValue();\n"],["body","\n"],["body","\n\n"],["headingLink","example"],["heading","Example"],["body","\n"],["headingLink","调用stringconcat"],["heading","调用string.concat"],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\nExpression exp = parser.parseExpression(\"'Hello World'.concat('!')\"); \nString message = (String) exp.getValue();\n"],["body","\n"],["headingLink","标准的点式调用"],["heading","标准的点式调用"],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\n\n// invokes 'getBytes().length'\nExpression exp = parser.parseExpression(\"'Hello World'.bytes.length\"); \nint length = (Integer) exp.getValue();\n"],["body","\n"],["headingLink","按照java语法"],["heading","按照Java语法"],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\nExpression exp = parser.parseExpression(\"new String('hello world').toUpperCase()\"); \nString message = exp.getValue(String.class);\n"],["body","\n"],["body","从对象示例中取 变量的值"],["body","\n"],["body","// Create and set a calendar\nGregorianCalendar c = new GregorianCalendar();\nc.set(1856, 7, 9);\n\n// The constructor arguments are name, birthday, and nationality.\nInventor tesla = new Inventor(\"Nikola Tesla\", c.getTime(), \"Serbian\");\n\nExpressionParser parser = new SpelExpressionParser();\n\nExpression exp = parser.parseExpression(\"name\"); // Parse name as an expression\nString name = (String) exp.getValue(tesla);\n// name == \"Nikola Tesla\"\n\nexp = parser.parseExpression(\"name == 'Nikola Tesla'\");\nboolean result = exp.getValue(tesla, Boolean.class);\n// result == true\n"],["body","\n"],["body","{% endraw %}"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springframework/springEL.html"],["title","springEL.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","简介"],["body","\n\n"],["body","springEL 是一个强大的表达式语言, 支持在运行时查询,修改对象图"],["body","\n"],["body","与其他 Unified EL 相比提供其他特性,最值得注意的是 方法调用 字符串模板"],["body","\n\n"],["h1","springEL的特性"],["body","\n\n"],["body","Literal expressions 字面量表达式"],["body","\n"],["body","Boolean and relational operators 布尔操作"],["body","\n"],["body","Regular expressions 正则"],["body","\n"],["body","Class expressions 类表达式"],["body","\n"],["body","Accessing properties, arrays, lists, and maps 访问 集合。数组，列表，map"],["body","\n"],["body","Method invocation 方法调用"],["body","\n"],["body","Relational operators 关联操作"],["body","\n"],["body","Assignment 赋值"],["body","\n"],["body","Calling constructors 调用构造"],["body","\n"],["body","Bean references bean引用"],["body","\n"],["body","Array construction 数组构造"],["body","\n"],["body","Inline lists  内联list"],["body","\n"],["body","Inline maps 内联map"],["body","\n"],["body","Ternary operator 三目表达式"],["body","\n"],["body","Variables 变量"],["body","\n"],["body","User-defined functions 用户定义函数"],["body","\n"],["body","Collection projection 集合投影"],["body","\n"],["body","Collection selection 集合选择"],["body","\n"],["body","Templated expressions 模板表达式"],["body","\n\n"],["h1","Evaluation"],["body","\n"],["headingLink","简介-1"],["heading","简介"],["body","\n"],["body","解析字符串字面量"],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\nExpression exp = parser.parseExpression(\"'Hello World'\"); \nString message = (String) exp.getValue();\n"],["body","\n\n"],["body","最可能会使用的 SpEL 类与接口 位于 org.springframework.expression  包下"],["body","\n"],["body","ExpressionParser 接口 负责 表达式解析，在上面的例子中，表达式是 一个被单引号引起来的字符串字面量"],["body","\n"],["body","Expression  接口 负责 对定义的表达式 求值，调用 parser.parseExpression  会抛出ParseException ，调用exp.getValue  会抛出EvaluationException,"],["body","\n"],["body","SpEL支持 很多特性，例如 方法调用，访问属性，调用构造函数"],["body","\n\n"],["body","字符串的 concat"],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\nExpression exp = parser.parseExpression(\"'Hello World'.concat('!')\"); \nString message = (String) exp.getValue();\n"],["body","\n"],["body","字符串 的 getBytes"],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\n\n// invokes 'getBytes()'\nExpression exp = parser.parseExpression(\"'Hello World'.bytes\"); \nbyte[] bytes = (byte[]) exp.getValue();\n"],["body","\n"],["body","bytes.length"],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\n\n// invokes 'getBytes().length'\nExpression exp = parser.parseExpression(\"'Hello World'.bytes.length\"); \nint length = (Integer) exp.getValue();\n"],["body","\n"],["body","使用 Class类指定返回值"],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\nExpression exp = parser.parseExpression(\"new String('hello world').toUpperCase()\"); \nString message = exp.getValue(String.class);\n"],["body","\n\n"],["body","\n"],["body","使用泛型方法 求值，public <T> T getValue(Class<T> desiredResultType)，可以自动类型转换"],["body","\n"],["body","\n"],["body","\n"],["body","使用注册的 Converter ，类型转换仍然失败 会抛出 EvaluationException"],["body","\n"],["body","\n"],["body","\n"],["body","SpEL的更常见用法是提供一个针对特定对象实例（称为根对象）进行求值的表达式字符串。"],["body","\n"],["body","下面例子展示了如何从示例中 取属性"],["body","\n"],["body","SpelExpressionParser parser = new SpelExpressionParser();\nPerson person = new Person();\nperson.age = 10;\nperson.name = \"肖佳权\";\nExpression age = parser.parseExpression(\"age\");\nint value = age.getValue(person, int.class);\nSystem.out.println(value);\n"],["body","\n"],["body","\n\n"],["headingLink","understanding-evaluationcontext"],["heading","Understanding EvaluationContext"],["body","\n"],["body","简介"],["body","\n"],["body","在 对表达式 求值以解析 属性，方法，或字段并帮助执行类型转换时，将使用 EvaluationContext  接口 "],["body","\n"],["body","有两个实现"],["body","\n\n"],["body","\n"],["body","SimpleEvaluationContext: "],["body","\n"],["body","针对不需要 完整SpEL语言 语法且 应受到有意义限制的表达式类别，公开了SPEL 基本语言功能和配置选项的子集。示例包括但不限于数据绑定，基于属性的过滤器"],["body","\n"],["body","\n"],["body","\n"],["body","StandardEvaluationContext:"],["body","\n"],["body","公开了完整的SpEL语言功能和配置选项，您可以使用它来指定默认的跟对象，并配置每个可用的 求值策略"],["body","\n"],["body","\n\n"],["body","SimpleEvaluationContext"],["body","\n\n"],["body","\n"],["body","设计为 只提供 SpEL语言语法的子集，它不包括Java类型引用，构造函数和Bean引用"],["body","\n"],["body","\n"],["body","\n"],["body","它还要求您 显示的 选择 对表达式中的属性和 方法的 支持级别，默认 create 静态工厂方法 仅允许对属性的读取访问"],["body","\n"],["body","\n"],["body","\n"],["body","你可以获取构建器来配置 准确的支持级别 针对以下一种或某些组合"],["body","\n\n"],["body","Custom PropertyAccessor only (no reflection) "],["body","\n"],["body","Data binding properties for read-only access"],["body","\n"],["body","Data binding properties for read and write"],["body","\n\n"],["body","\n\n"],["body","Type Conversion"],["body","\n\n"],["body","默认情况下，SpEL 使用  org.springframework.core.convert.ConversionService 的转换服务"],["body","\n"],["body","这个服务内置了很多通用类型转换器，同样可扩展，具备泛型"],["body","\n\n"],["body","使用 setValue 赋值时，会自动将 字符串类型的 string 转成 Boolean"],["body","\n"],["body","    static class Simple {\n        public List<Boolean> booleanList = new ArrayList<Boolean>();\n    }\n\n    public static void main(String[] args) {\n        Simple simple = new Simple();\n        simple.booleanList.add(true);\n\n        EvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().build();\n\n// \"false\" is passed in here as a String. SpEL and the conversion service\n// will recognize that it needs to be a Boolean and convert it accordingly.\n        SpelExpressionParser parser = new SpelExpressionParser();\n        parser.parseExpression(\"booleanList[0]\").setValue(context, simple, \"false\");\n\n// b is false\n        Boolean b = simple.booleanList.get(0);\n        System.out.println(b);\n    }\n"],["body","\n"],["headingLink","parser-configuration"],["heading","Parser Configuration"],["body","\n"],["body","\n"],["body","语法解析配置"],["body","\n"],["body","\n\n"],["body","可以通过 使用 解析器配置对象 配置 SpEL的 表达式解析 org.springframework.expression.spel.SpelParserConfiguration"],["body","\n"],["body","配置对象控制某些表达式组件的行为\n\n"],["body","例如，使用索引 访问数组或集合 遇到 NULL 值，SpEL可以自动创建元素，这对于链式属性引用很有用"],["body","\n"],["body","还可以当 集合访问超出容量之后，SpEL 能够自动扩容"],["body","\n"],["body","往指定索引处放值，使用默认的构造器设置值，如果没有默认的构造器，则填充NULL"],["body","\n"],["body","如果没有 内置的或 自定义的转换器 则会填充 NULL "],["body","\n\n"],["body","\n\n"],["body","class Demo {\n    public List<String> list;\n}\n\n// Turn on:\n// - auto null reference initialization\n// - auto collection growing\nSpelParserConfiguration config = new SpelParserConfiguration(true,true);\n\nExpressionParser parser = new SpelExpressionParser(config);\n\nExpression expression = parser.parseExpression(\"list[3]\");\n\nDemo demo = new Demo();\n\nObject o = expression.getValue(demo);\n\n// demo.list will now be a real collection of 4 entries\n// Each entry is a new empty String\n"],["body","\n"],["headingLink","spel-compilation"],["heading","SpEL Compilation"],["body","\n"],["body","\n"],["body","SpEL表达式编译"],["body","\n"],["body","\n"],["body","编译执行与解析执行"],["body","\n"],["body","Spring Framework 4.1 包含一个基本的 表达式编译器。表达式通常是被解析执行，这在求值阶段提供了很大的灵活性，但不会提供最佳性能。偶尔使用表达式 这已经够了，但是与其他组件 （例如 Spring Integration) 性能很重要，并且不需要动态性"],["body","\n"],["body","编译执行的使用场景"],["body","\n"],["body","​\tSpEL编译器 旨在满足 这一需求：在求值过程中 生成一个Java类，该类在运行时体现了表达式的行为，并使用该类来实现更快的表达式解析"],["body","\n"],["body","由于缺少在表达式周围 输入的信息，编译器 在执行编译时会使用 在表达式的解释求值过程收集的 信息"],["body","\n"],["body","例如，它不只是 从表达式中就知道属性引用的类型，而是在第一次解释求值时知道的类型"],["body","\n"],["body","当然，如果表达式元素的类型 随着时间变化，则基于此类派生信息进行编译会在以后引起麻烦"],["body","\n"],["body","因此 编译最适合类型信息 在重复求值过程 不会改变的表达式"],["body","\n"],["body","someArray[0].someProperty.someOtherProperty < 0.1\n"],["body","\n"],["body","由于前面的这个例子 涉及数组访问，一些属性的解引用 和数字运算，因此性能提升很明显，在 基准测试中，50000个迭代 ，"],["body","\n"],["body","解释求值版本：75ms，编译求值版本：3ms"],["body","\n"],["body","Compiler Configuration"],["body","\n"],["body","默认情况下不打开编译器，但是您可以通过两种不同的方式之一来打开它。"],["body","\n\n"],["body","您可以通过使用解析器配置过程来打开它"],["body","\n"],["body","或者 当SpEL 嵌入到某个组件时，使用 spring属性控制打开它"],["body","\n\n"],["body","编译模式"],["body","\n"],["body","定义在枚举 org.springframework.expression.spel.SpelCompilerMode"],["body","\n\n"],["body","OFF (default): The compiler is switched off."],["body","\n"],["body","IMMEDIATE: 尽快编译.通常是在第一次解释求值之后. 如果编译的表达式失败(通常是因为类型变化) 会抛异常"],["body","\n"],["body","MIXED: 在混合模式下，表达式会随着时间静默在解释模式和编译模式之间切换. 经过一些解释后的运行, 他们切换到已编译的表单，如果已编译的表单出了问题（例如，如前面所述的类型更改）表达式自动再次切换回解释形式."],["body","\n\n"],["body","IMMEDIATE mode exists because MIXED mode could cause issues for expressions that have side effects. If a compiled expression blows up after partially succeeding"],["body","\n"],["body","存在IMMEDIATE模式的原因"],["body","\n"],["body","存在IMMEDIATE模式是因为MIXED模式可能会引起具有副作用的表达式问题。如果部分成功后已编译的表达式运行失败，切换到解释模式重新执行，那部分可能会执行两遍"],["body","\n"],["body","SpelParserConfiguration config = new SpelParserConfiguration(SpelCompilerMode.IMMEDIATE,\n    this.getClass().getClassLoader());\n\nSpelExpressionParser parser = new SpelExpressionParser(config);\n\nExpression expr = parser.parseExpression(\"payload\");\n\nMyMessage message = new MyMessage();\n\nObject payload = expr.getValue(message);\n"],["body","\n"],["body","当指定编译器模式时，还可以指定一个类加载器（允许传递null）。"],["body","\n"],["body","编译表达式是在提供的任何子类加载器中创建的子类加载器中定义的类"],["body","\n"],["body","重要的是要确保，如果指定了类加载器，则它可以查看表达式求值过程中涉及的所有类型。"],["body","\n"],["body","如果未指定类加载器，则使用默认的类加载器（通常是在表达式求值期间运行的线程的上下文类加载器）。"],["body","\n"],["body","第二种配置编译器的方法是将SpEL嵌入到其他组件中，并且可能无法通过配置对象进行配置。\n在这种情况下，可以通过JVM系统属性 spring.expression.compiler.mode "],["body","\n"],["body","SpringProperties 机制 SpelCompilerMode (off, immediate, or mixed)"],["body","\n"],["body","Compiler Limitations"],["body","\n"],["body","从Spring Framework 4.1开始，已经有了基本的编译框架"],["body","\n"],["body","但是，该框架尚不支持编译每种表达式"],["body","\n"],["body","最初的重点是可能在性能关键型上下文中使用的通用表达式。"],["body","\n"],["body","目前无法编译以下类型的表达式："],["body","\n\n"],["body","Expressions involving assignment：涉及赋值的表达"],["body","\n"],["body","Expressions relying on the conversion service：依赖转换服务的表达式"],["body","\n"],["body","Expressions using custom resolvers or accessors：使用自定义解析器或访问器的表达式"],["body","\n"],["body","Expressions using selection or projection：使用选择或投影的表达式"],["body","\n\n"],["h1","Expressions in Bean Definitions"],["body","\n"],["body","您可以将SpEL表达式与基于XML或基于注释的配置元数据一起使用，用来定义“ BeanDefinition”实例。\n在这两种情况下，用于定义表达式的语法均采用“＃{<表达式字符串>}”的形式。"],["body","\n"],["headingLink","xml-configuration"],["heading","XML Configuration"],["body","\n"],["body","<bean id=\"numberGuess\" class=\"org.spring.samples.NumberGuess\">\n    <property name=\"randomNumber\" value=\"#{ T(java.lang.Math).random() * 100.0 }\"/>\n    <!-- other properties -->\n</bean>\n"],["body","\n"],["body","ApplicationContext 的所有 bean 都可以通过 bean名引用，包括内置的 bean，例如 访问运行时的环境变量org.springframework.core.env.Environment  以及 systemProperties 和 systemEnvironment"],["body","\n"],["body","通过属性名 访问属性"],["body","\n"],["body","<bean id=\"taxCalculator\" class=\"org.spring.samples.TaxCalculator\">\n    <property name=\"defaultLocale\" value=\"#{ systemProperties['user.region'] }\"/>\n\n    <!-- other properties -->\n</bean>\n"],["body","\n"],["body","<bean id=\"numberGuess\" class=\"org.spring.samples.NumberGuess\">\n    <property name=\"randomNumber\" value=\"#{ T(java.lang.Math).random() * 100.0 }\"/>\n\n    <!-- other properties -->\n</bean>\n\n<bean id=\"shapeGuess\" class=\"org.spring.samples.ShapeGuess\">\n    <property name=\"initialShapeSeed\" value=\"#{ numberGuess.randomNumber }\"/>\n\n    <!-- other properties -->\n</bean>\n"],["body","\n"],["headingLink","annotation-configuration"],["heading","Annotation Configuration"],["body","\n"],["body","属性"],["body","\n"],["body","public class FieldValueTestBean {\n\n    @Value(\"#{ systemProperties['user.region'] }\")\n    private String defaultLocale;\n\n    public void setDefaultLocale(String defaultLocale) {\n        this.defaultLocale = defaultLocale;\n    }\n\n    public String getDefaultLocale() {\n        return this.defaultLocale;\n    }\n}\n"],["body","\n"],["body","setterMethod"],["body","\n"],["body","public class PropertyValueTestBean {\n\n    private String defaultLocale;\n\n    @Value(\"#{ systemProperties['user.region'] }\")\n    public void setDefaultLocale(String defaultLocale) {\n        this.defaultLocale = defaultLocale;\n    }\n\n    public String getDefaultLocale() {\n        return this.defaultLocale;\n    }\n}\n"],["body","\n"],["body","Autowired methods and constructors can also use the @Value annotation"],["body","\n"],["body","public class SimpleMovieLister {\n\n    private MovieFinder movieFinder;\n    private String defaultLocale;\n\n    @Autowired\n    public void configure(MovieFinder movieFinder,\n            @Value(\"#{ systemProperties['user.region'] }\") String defaultLocale) {\n        this.movieFinder = movieFinder;\n        this.defaultLocale = defaultLocale;\n    }\n\n    // ...\n}\n"],["body","\n"],["body","public class MovieRecommender {\n\n    private String defaultLocale;\n\n    private CustomerPreferenceDao customerPreferenceDao;\n\n    public MovieRecommender(CustomerPreferenceDao customerPreferenceDao,\n            @Value(\"#{systemProperties['user.country']}\") String defaultLocale) {\n        this.customerPreferenceDao = customerPreferenceDao;\n        this.defaultLocale = defaultLocale;\n    }\n\n    // ...\n}\n"],["body","\n"],["h1","Language Reference"],["body","\n"],["body","\n"],["body","语法参考"],["body","\n"],["body","\n"],["headingLink","literal-expressions"],["heading","Literal Expressions"],["body","\n"],["body","字面量包括：字符串单引号包裹，数值类型：整数，实数，十六进制，boolean，的"],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\n\n// evals to \"Hello World\"\nString helloWorld = (String) parser.parseExpression(\"'Hello World'\").getValue();\n\ndouble avogadrosNumber = (Double) parser.parseExpression(\"6.0221415E+23\").getValue();\n\n// evals to 2147483647\nint maxValue = (Integer) parser.parseExpression(\"0x7FFFFFFF\").getValue();\n\nboolean trueValue = (Boolean) parser.parseExpression(\"true\").getValue();\n\nObject nullValue = parser.parseExpression(\"null\").getValue();\n"],["body","\n"],["body","数字支持使用负号，指数符号和小数点。\n默认情况下，使用Double.parseDouble（）解析实数。"],["body","\n"],["headingLink","properties-arrays-lists-maps-and-indexers"],["heading","Properties, Arrays, Lists, Maps, and Indexers"],["body","\n"],["headingLink","使用属性名访问属性"],["heading","使用属性名访问属性"],["body","\n"],["body","// evals to 1856\nint year = (Integer) parser.parseExpression(\"birthdate.year + 1900\").getValue(context);\n\nString city = (String) parser.parseExpression(\"placeOfBirth.city\").getValue(context);\n"],["body","\n\n"],["body","属性名称的首字母允许不区分大小写"],["body","\n"],["body","上述的表达式 可以写作 Birthdate.Year + 1900 and PlaceOfBirth.City"],["body","\n"],["body","属性的访问 也可能通过方法调用 ``getPlaceOfBirth().getCity()instead ofplaceOfBirth.city`"],["body","\n\n"],["headingLink","使用方括号访问数组"],["heading","使用方括号访问数组"],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\nEvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().build();\n\n// Inventions Array\n\n// evaluates to \"Induction motor\"\nString invention = parser.parseExpression(\"inventions[3]\").getValue(\n        context, tesla, String.class);\n\n// Members List\n\n// evaluates to \"Nikola Tesla\"\nString name = parser.parseExpression(\"members[0].name\").getValue(\n        context, ieee, String.class);\n\n// List and Array navigation\n// evaluates to \"Wireless communication\"\nString invention = parser.parseExpression(\"members[0].inventions[6]\").getValue(\n        context, ieee, String.class);\n"],["body","\n"],["headingLink","访问map"],["heading","访问Map"],["body","\n"],["body","// Officer's Dictionary\n\nInventor pupin = parser.parseExpression(\"officers['president']\").getValue(\n        societyContext, Inventor.class);\n\n// evaluates to \"Idvor\"\nString city = parser.parseExpression(\"officers['president'].placeOfBirth.city\").getValue(\n        societyContext, String.class);\n\n// setting values\nparser.parseExpression(\"officers['advisors'][0].placeOfBirth.country\").setValue(\n        societyContext, \"Croatia\");\n"],["body","\n"],["headingLink","内联list"],["heading","内联List"],["body","\n"],["body","// evaluates to a Java list containing the four numbers\nList numbers = (List) parser.parseExpression(\"{1,2,3,4}\").getValue(context);\n\nList listOfLists = (List) parser.parseExpression(\"{{'a','b'},{'x','y'}}\").getValue(context);\n"],["body","\n"],["body","{}本身表示一个空列表。\n出于性能原因，如果列表本身完全由固定文字组成，则会创建一个常量列表来表示该表达式（而不是在每次求值时都构建一个新列表）。"],["body","\n"],["headingLink","inline-maps"],["heading","Inline Maps"],["body","\n"],["body","{key:value}"],["body","\n"],["body","// evaluates to a Java map containing the two entries\nMap inventorInfo = (Map) parser.parseExpression(\"{name:'Nikola',dob:'10-July-1856'}\").getValue(context);\n\nMap mapOfMaps = (Map) parser.parseExpression(\"{name:{first:'Nikola',last:'Tesla'},dob:{day:10,month:'July',year:1856}}\").getValue(context);\n"],["body","\n"],["body","{：}表示一个空的map\n出于性能原因，如果映射表本身由固定的文字或其他嵌套的常量结构（列表或映射表）组成，则会创建一个常量映射表来表示该表达式（而不是在每次求值时都构建一个新的映射表）。映射键的引号是可选的。"],["body","\n"],["headingLink","array-construction"],["heading","Array Construction"],["body","\n"],["body","您可以使用熟悉的Java语法来构建数组，可以选择提供一个初始化以在构造时填充该数组。\n以下示例显示了如何执行此操作："],["body","\n"],["body","int[] numbers1 = (int[]) parser.parseExpression(\"new int[4]\").getValue(context);\n\n// Array with initializer\nint[] numbers2 = (int[]) parser.parseExpression(\"new int[]{1,2,3}\").getValue(context);\n\n// Multi dimensional array\nint[][] numbers3 = (int[][]) parser.parseExpression(\"new int[4][5]\").getValue(context);\n"],["body","\n"],["body","构造多维数组时，当前无法提供初始化"],["body","\n"],["headingLink","methods"],["heading","Methods"],["body","\n"],["body","// string literal, evaluates to \"bc\"\nString bc = parser.parseExpression(\"'abc'.substring(1, 3)\").getValue(String.class);\n\n// evaluates to true\nboolean isMember = parser.parseExpression(\"isMember('Mihajlo Pupin')\").getValue(\n        societyContext, Boolean.class);\n"],["body","\n"],["headingLink","operators"],["heading","Operators"],["body","\n"],["body","\n"],["body","操作符\n支持四种运算符"],["body","\n"],["body","\n\n"],["body","Relational Operators 关系运算符"],["body","\n"],["body","Logical Operators 逻辑运算符"],["body","\n"],["body","Mathematical Operators 数学运算符"],["body","\n"],["body","The Assignment Operator 赋值运算符"],["body","\n\n"],["headingLink","relational-operators"],["heading","Relational Operators"],["body","\n"],["body","支持 equal, not equal, less than, less than or equal, greater than, and greater than or equal  这几种 关系运算符"],["body","\n"],["body","// evaluates to true\nboolean trueValue = parser.parseExpression(\"2 == 2\").getValue(Boolean.class);\n\n// evaluates to false\nboolean falseValue = parser.parseExpression(\"2 < -5.0\").getValue(Boolean.class);\n\n// evaluates to true\nboolean trueValue = parser.parseExpression(\"'black' < 'block'\").getValue(Boolean.class);\n"],["body","\n"],["body","对于NULL值的处理"],["body","\n"],["body","X > null is always true "],["body","\n"],["body","X < null is always false"],["body","\n"],["body","InstanceOf与Match"],["body","\n"],["body","// evaluates to false\nboolean falseValue = parser.parseExpression(\n        \"'xyz' instanceof T(Integer)\").getValue(Boolean.class);\n\n// evaluates to true\nboolean trueValue = parser.parseExpression(\n        \"'5.00' matches '^-?\\\\d+(\\\\.\\\\d{2})?$'\").getValue(Boolean.class);\n\n//evaluates to false\nboolean falseValue = parser.parseExpression(\n        \"'5.0067' matches '^-?\\\\d+(\\\\.\\\\d{2})?$'\").getValue(Boolean.class);\n"],["body","\n"],["body","请注意基本类型，因为它们会立即被包装为包装类型，因此，如预期的那样，1 instanceof T（int）的计算结果为false，而1 instanceofT（Integer）的计算结果为true。"],["body","\n"],["body","支持字母的运算符"],["body","\n\n"],["body","lt (<)"],["body","\n"],["body","gt (>)"],["body","\n"],["body","le (<=)"],["body","\n"],["body","ge (>=)"],["body","\n"],["body","eq (==)"],["body","\n"],["body","ne (!=)"],["body","\n"],["body","div (/)"],["body","\n"],["body","mod (%)"],["body","\n"],["body","not (!)."],["body","\n\n"],["headingLink","logical-operators"],["heading","Logical Operators"],["body","\n"],["body","SpEL supports the following logical operators:"],["body","\n\n"],["body","and (&&)"],["body","\n"],["body","or (||)"],["body","\n"],["body","not (!)"],["body","\n\n"],["body","// -- AND --\n\n// evaluates to false\nboolean falseValue = parser.parseExpression(\"true and false\").getValue(Boolean.class);\n\n// evaluates to true\nString expression = \"isMember('Nikola Tesla') and isMember('Mihajlo Pupin')\";\nboolean trueValue = parser.parseExpression(expression).getValue(societyContext, Boolean.class);\n\n// -- OR --\n\n// evaluates to true\nboolean trueValue = parser.parseExpression(\"true or false\").getValue(Boolean.class);\n\n// evaluates to true\nString expression = \"isMember('Nikola Tesla') or isMember('Albert Einstein')\";\nboolean trueValue = parser.parseExpression(expression).getValue(societyContext, Boolean.class);\n\n// -- NOT --\n\n// evaluates to false\nboolean falseValue = parser.parseExpression(\"!true\").getValue(Boolean.class);\n\n// -- AND and NOT --\nString expression = \"isMember('Nikola Tesla') and !isMember('Mihajlo Pupin')\";\nboolean falseValue = parser.parseExpression(expression).getValue(societyContext, Boolean.class);\n"],["body","\n"],["headingLink","mathematical-operators"],["heading","Mathematical Operators"],["body","\n"],["body","// Addition\nint two = parser.parseExpression(\"1 + 1\").getValue(Integer.class);  // 2\n\nString testString = parser.parseExpression(\n        \"'test' + ' ' + 'string'\").getValue(String.class);  // 'test string'\n\n// Subtraction\nint four = parser.parseExpression(\"1 - -3\").getValue(Integer.class);  // 4\n\ndouble d = parser.parseExpression(\"1000.00 - 1e4\").getValue(Double.class);  // -9000\n\n// Multiplication\nint six = parser.parseExpression(\"-2 * -3\").getValue(Integer.class);  // 6\n\ndouble twentyFour = parser.parseExpression(\"2.0 * 3e0 * 4\").getValue(Double.class);  // 24.0\n\n// Division\nint minusTwo = parser.parseExpression(\"6 / -3\").getValue(Integer.class);  // -2\n\ndouble one = parser.parseExpression(\"8.0 / 4e0 / 2\").getValue(Double.class);  // 1.0\n\n// Modulus\nint three = parser.parseExpression(\"7 % 4\").getValue(Integer.class);  // 3\n\nint one = parser.parseExpression(\"8 / 5 % 2\").getValue(Integer.class);  // 1\n\n// Operator precedence\nint minusTwentyOne = parser.parseExpression(\"1+2-3*8\").getValue(Integer.class);  // -21\n"],["body","\n"],["headingLink","the-assignment-operator"],["heading","The Assignment Operator"],["body","\n"],["body","要设置属性，请使用赋值运算符（=）。 这通常在对 setValue的调用内完成，但也可以在对getValue的调用内完成。\n下面的清单显示了使用赋值运算符的两种方法："],["body","\n"],["body","Inventor inventor = new Inventor();\nEvaluationContext context = SimpleEvaluationContext.forReadWriteDataBinding().build();\n\nparser.parseExpression(\"name\").setValue(context, inventor, \"Aleksandar Seovic\");\n\n// alternatively\nString aleks = parser.parseExpression(\n        \"name = 'Aleksandar Seovic'\").getValue(context, inventor, String.class);\n"],["body","\n"],["headingLink","types"],["heading","Types"],["body","\n\n"],["body","你可以使用 特殊的 T运算符 来执行 java.lang.Class 类示例"],["body","\n"],["body","也可以通过此运算符 来调用 静态方法"],["body","\n"],["body","StandardEvaluationContext  使用  TypeLocator  查找类型， StandardTypeLocator  （可以替换） 会自动查找 Java.lang包，不需要全限定类名，而其他包需要"],["body","\n\n"],["body","Class dateClass = parser.parseExpression(\"T(java.util.Date)\").getValue(Class.class);\n\nClass stringClass = parser.parseExpression(\"T(String)\").getValue(Class.class);\n\nboolean trueValue = parser.parseExpression(\n        \"T(java.math.RoundingMode).CEILING < T(java.math.RoundingMode).FLOOR\")\n        .getValue(Boolean.class);\n"],["body","\n"],["headingLink","constructors"],["heading","Constructors"],["body","\n"],["body","您可以使用new运算符来调用构造函数。\n除了基本类型（int，float等）和String之外，您都应使用完全限定的类名。\n以下示例显示了如何使用new运算符来调用构造函数："],["body","\n"],["body","Inventor einstein = p.parseExpression(\n        \"new org.spring.samples.spel.inventor.Inventor('Albert Einstein', 'German')\")\n        .getValue(Inventor.class);\n\n//create new inventor instance within add method of List\np.parseExpression(\n        \"Members.add(new org.spring.samples.spel.inventor.Inventor(\n            'Albert Einstein', 'German'))\").getValue(societyContext);\n"],["body","\n"],["headingLink","variables"],["heading","Variables"],["body","\n\n"],["body","您可以使用 #variableName 语法在表达式中引用变量。"],["body","\n"],["body","通过在EvaluationContext实现上使用setVariable方法设置变量。"],["body","\n\n"],["headingLink","合法变量名"],["heading","合法变量名："],["body","\n"],["body","A to Z and a to zdigits: 0 to 9underscore: _dollar sign: $"],["body","\n"],["body","Inventor tesla = new Inventor(\"Nikola Tesla\", \"Serbian\");\n\nEvaluationContext context = SimpleEvaluationContext.forReadWriteDataBinding().build();\ncontext.setVariable(\"newName\", \"Mike Tesla\");\n\nparser.parseExpression(\"name = #newName\").getValue(context, tesla);\nSystem.out.println(tesla.getName())  // \"Mike Tesla\"\n"],["body","\n"],["headingLink","the-this-and-root-variables"],["heading","The #this and #root Variables"],["body","\n\n"],["body","#this 变量始终 定义，引用当前解析对象（不会解析不满足的变量） "],["body","\n"],["body","#root 始终指向 root context object #this 随着 表达式组件部分 求值 的变化而变化"],["body","\n\n"],["body","// create an array of integers\nList<Integer> primes = new ArrayList<Integer>();\nprimes.addAll(Arrays.asList(2,3,5,7,11,13,17));\n\n// create parser and set variable 'primes' as the array of integers\nExpressionParser parser = new SpelExpressionParser();\nEvaluationContext context = SimpleEvaluationContext.forReadOnlyDataAccess();\ncontext.setVariable(\"primes\", primes);\n\n// all prime numbers > 10 from the list (using selection ?{...})\n// evaluates to [11, 13, 17]\nList<Integer> primesGreaterThanTen = (List<Integer>) parser.parseExpression(\n        \"#primes.?[#this>10]\").getValue(context);\n"],["body","\n"],["headingLink","functions"],["heading","Functions"],["body","\n"],["body","您可以通过注册可以在表达式字符串中调用的用户定义函数来扩展SpEL。\n该函数通过EvaluationContext注册。\n以下示例显示了如何注册用户定义的函数："],["body","\n"],["body","Method method = ...;\n\nEvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().build();\ncontext.setVariable(\"myFunction\", method);\n"],["body","\n"],["body","public abstract class StringUtils {\n\n    public static String reverseString(String input) {\n        StringBuilder backwards = new StringBuilder(input.length());\n        for (int i = 0; i < input.length(); i++) {\n            backwards.append(input.charAt(input.length() - 1 - i));\n        }\n        return backwards.toString();\n    }\n}\n\nExpressionParser parser = new SpelExpressionParser();\n\nEvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().build();\ncontext.setVariable(\"reverseString\",\n        StringUtils.class.getDeclaredMethod(\"reverseString\", String.class));\n\nString helloWorldReversed = parser.parseExpression(\n        \"#reverseString('hello')\").getValue(context, String.class);\n"],["body","\n"],["headingLink","bean-references"],["heading","Bean References"],["body","\n"],["body","如果 EvaluationContext 已使用bean解析器配置，则可以使用@符号从表达式中查找bean。\n以下示例显示了如何执行此操作："],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\nStandardEvaluationContext context = new StandardEvaluationContext();\ncontext.setBeanResolver(new MyBeanResolver());\n\n// This will end up calling resolve(context,\"something\") on MyBeanResolver during evaluation\nObject bean = parser.parseExpression(\"@something\").getValue(context);\n"],["body","\n"],["body","要访问工厂bean本身，您应该在bean名称前加上＆符号。\n以下示例显示了如何执行此操作："],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\nStandardEvaluationContext context = new StandardEvaluationContext();\ncontext.setBeanResolver(new MyBeanResolver());\n\n// This will end up calling resolve(context,\"&foo\") on MyBeanResolver during evaluation\nObject bean = parser.parseExpression(\"&foo\").getValue(context);\n"],["body","\n"],["headingLink","ternary-operator-if-then-else"],["heading","Ternary Operator (If-Then-Else)"],["body","\n"],["body","String falseString = parser.parseExpression(\n        \"false ? 'trueExp' : 'falseExp'\").getValue(String.class);\n"],["body","\n"],["body","parser.parseExpression(\"name\").setValue(societyContext, \"IEEE\");\nsocietyContext.setVariable(\"queryName\", \"Nikola Tesla\");\n\nexpression = \"isMember(#queryName)? #queryName + ' is a member of the ' \" +\n        \"+ Name + ' Society' : #queryName + ' is not a member of the ' + Name + ' Society'\";\n\nString queryResultString = parser.parseExpression(expression)\n        .getValue(societyContext, String.class);\n// queryResultString = \"Nikola Tesla is a member of the IEEE Society\"\n"],["body","\n"],["headingLink","the-elvis-operator"],["heading","The Elvis Operator"],["body","\n"],["body","Elvis运算符是三元运算符语法的简化，并且在Groovy语言中使用。\n使用三元运算符语法，通常必须将变量重复两次，如以下示例所示："],["body","\n"],["body","String name = \"Elvis Presley\";\nString displayName = (name != null ? name : \"Unknown\");\n"],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\n\nString name = parser.parseExpression(\"name?:'Unknown'\").getValue(new Inventor(), String.class);\nSystem.out.println(name);  // 'Unknown'\n"],["body","\n"],["body","@Value(\"#{systemProperties['pop3.port'] ?: 25}\")\n"],["body","\n"],["headingLink","safe-navigation-operator"],["heading","Safe Navigation Operator"],["body","\n"],["body","安全导航运算符用于避免NullPointerException，它来自Groovy语言。\n通常，当您引用对象时，可能需要在访问对象的方法或属性之前验证其是否为null。\n为了避免这种情况，安全导航运算符返回null而不是引发异常。\n以下示例显示如何使用安全导航操作符："],["body","\n"],["body","ExpressionParser parser = new SpelExpressionParser();\nEvaluationContext context = SimpleEvaluationContext.forReadOnlyDataBinding().build();\n\nInventor tesla = new Inventor(\"Nikola Tesla\", \"Serbian\");\ntesla.setPlaceOfBirth(new PlaceOfBirth(\"Smiljan\"));\n\nString city = parser.parseExpression(\"placeOfBirth?.city\").getValue(context, tesla, String.class);\nSystem.out.println(city);  // Smiljan\n\ntesla.setPlaceOfBirth(null);\ncity = parser.parseExpression(\"placeOfBirth?.city\").getValue(context, tesla, String.class);\nSystem.out.println(city);  // null - does not throw NullPointerException!!!\n"],["body","\n"],["headingLink","collection-selection"],["heading","Collection Selection"],["body","\n"],["body","选择是一种强大的表达语言功能，可让您通过从源集合中选择条目来将其转换为另一个集合。"],["body","\n"],["body","选择使用。？[selectionExpression]  的语法。\n它过滤该集合并返回一个包含原始元素子集的新集合。"],["body","\n"],["body","List<Inventor> list = (List<Inventor>) parser.parseExpression(\n        \"members.?[nationality == 'Serbian']\").getValue(societyContext);\n"],["body","\n"],["body","在List和Map上都可以选择。\n对于List，将针对每个单独的列表元素评估选择标准。\n针对Map，针对每个Map Entry（Java类型Map.Entry的对象）评估选择标准。\n每个Map Entry都有其键和值，可作为属性进行访问，以供在选择中使用。"],["body","\n"],["body","Map newMap = parser.parseExpression(\"map.?[value<27]\").getValue();\n"],["body","\n"],["body","除了返回所有选定的元素外，您只能检索第一个或最后一个值。\n为了获得与选择匹配的第一个条目，语法为。^ [selectionExpression]。\n要获得最后的匹配选择，语法为。$ [selectionExpression]。"],["body","\n"],["headingLink","collection-projection"],["heading","Collection Projection"],["body","\n"],["body","投影使集合可以驱动子表达式的求值，结果是一个新的集合。\n投影的语法为。！[projectionExpression]。"],["body","\n"],["body","// returns ['Smiljan', 'Idvor' ]\nList placesOfBirth = (List)parser.parseExpression(\"members.![placeOfBirth.city]\");\n"],["body","\n"],["body","使用map 投影的结果也是 list"],["body","\n"],["headingLink","expression-templating"],["heading","Expression templating"],["body","\n"],["body","表达式模板允许将文字文本与一个或多个求值块混合。\n每个求值块均由您可以定义的前缀和后缀字符定界。\n常见的选择是使用＃{}作为分隔符，如以下示例所示："],["body","\n"],["body","String randomPhrase = parser.parseExpression(\n        \"random number is #{T(java.lang.Math).random()}\",\n        new TemplateParserContext()).getValue(String.class);\n\n// evaluates to \"random number is 0.7038186818312008\"\n"],["body","\n"],["body","    public static void main(String[] args) {\n        SpelParserConfiguration configuration = new SpelParserConfiguration(true,true);\n        SpelExpressionParser parser = new SpelExpressionParser(configuration);\n        Expression expression = parser.parseExpression(\"12#{list[0]}12\", new TemplateParserContext());\n        Demo demo = new Demo();\n        demo.list = new ArrayList<>();\n        demo.list.add(\"sdfdsf\");\n        Object o = expression.getValue(demo,String.class);\n        System.out.println(o);\n    }\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springframework/字段格式化.html"],["title","字段格式化.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","FormatterSPI"],["body","\n\n"],["body","core.convert提供的是强类型的 通用转换 SPI, SpringEL DataBinder 都使用这个转换系统绑定字段值"],["body","\n"],["body","例如在web环境 将 string 转换为客户端能处理的, 或者将对象转换成string 渲染,这就需要 Formatter SPI 提供简单可用的 PropertyEditor  实现"],["body","\n"],["body","要使用FormatterSPI 则 要实现 通用的转换逻辑 例如 在  Date->Long 做类型转换,统一由 ConversionService  提供类型转换API"],["body","\n\n"],["h1","SPI接口"],["body","\n"],["body","package org.springframework.format;\n\npublic interface Formatter<T> extends Printer<T>, Parser<T> {\n}\n\npublic interface Printer<T> {\n\n    String print(T fieldValue, Locale locale);\n}\n\n\nimport java.text.ParseException;\n\npublic interface Parser<T> {\n\n    T parse(String clientValue, Locale locale) throws ParseException;\n}\n"],["body","\n"],["body","注意事项"],["body","\n\n"],["body","根据不同Locale得到不同的String"],["body","\n"],["body","可以抛出 ParseException, IllegalArgumentException    解析错误或者参数异常错误"],["body","\n"],["body","确保线程安全"],["body","\n"],["body","已经提供了几个便利的 实现类\n\n"],["body","number 包: NumberStyleFormatter, CurrencyStyleFormatter PercentStyleFormatter   java.text.NumberFormat"],["body","\n"],["body","datetime包  提供 Number java.text.DateFormat"],["body","\n\n"],["body","\n\n"],["body","实现"],["body","\n"],["body","package org.springframework.format.datetime;\n\npublic final class DateFormatter implements Formatter<Date> {\n    private String pattern;\n    public DateFormatter(String pattern) {\n        this.pattern = pattern;\n    }\n    public String print(Date date, Locale locale) {\n        if (date == null) {\n            return \"\";\n        }\n        return getDateFormat(locale).format(date);\n    }\n    public Date parse(String formatted, Locale locale) throws ParseException {\n        if (formatted.length() == 0) {\n            return null;\n        }\n        return getDateFormat(locale).parse(formatted);\n    }\n    protected DateFormat getDateFormat(Locale locale) {\n        DateFormat dateFormat = new SimpleDateFormat(this.pattern, locale);\n        dateFormat.setLenient(false);\n        return dateFormat;\n    }\n}\n"],["body","\n"],["h1","基于注解的Formatter"],["body","\n"],["body","绑定注解 与 Formatter 类"],["body","\n"],["body","通过AnnotationFormatterFactory"],["body","\n"],["body","package org.springframework.format;\n//A表示关联的注解类型 `org.springframework.format.annotation.DateTimeFormat`\npublic interface AnnotationFormatterFactory<A extends Annotation> {\n\t//注解能够处理的类型\n    Set<Class<?>> getFieldTypes();\n    Printer<?> getPrinter(A annotation, Class<?> fieldType);\n    Parser<?> getParser(A annotation, Class<?> fieldType);\n}\n"],["body","\n"],["body","范例实现"],["body","\n"],["body","\n"],["body","@NumberFormat"],["body","\n"],["body","\n"],["body","public final class NumberFormatAnnotationFormatterFactory\n        implements AnnotationFormatterFactory<NumberFormat> {\n\n    public Set<Class<?>> getFieldTypes() {\n        return new HashSet<Class<?>>(asList(new Class<?>[] {\n            Short.class, Integer.class, Long.class, Float.class,\n            Double.class, BigDecimal.class, BigInteger.class }));\n    }\n\n    public Printer<Number> getPrinter(NumberFormat annotation, Class<?> fieldType) {\n        return configureFormatterFrom(annotation, fieldType);\n    }\n\n    public Parser<Number> getParser(NumberFormat annotation, Class<?> fieldType) {\n        return configureFormatterFrom(annotation, fieldType);\n    }\n\n    private Formatter<Number> configureFormatterFrom(NumberFormat annotation, Class<?> fieldType) {\n        if (!annotation.pattern().isEmpty()) {\n            return new NumberStyleFormatter(annotation.pattern());\n        } else {\n            Style style = annotation.style();\n            if (style == Style.PERCENT) {\n                return new PercentStyleFormatter();\n            } else if (style == Style.CURRENCY) {\n                return new CurrencyStyleFormatter();\n            } else {\n                return new NumberStyleFormatter();\n            }\n        }\n    }\n}\n\n//使用示例1\npublic class MyModel {\n    @NumberFormat(style=Style.CURRENCY)\n    private BigDecimal decimal;\n}\n//使用示例2\npublic class MyModel {\n    @DateTimeFormat(iso=ISO.DATE)\n    private Date date;\n}\n"],["body","\n"],["h1","Formatter注册SPI"],["body","\n\n"],["body","FormatterRegistry 是一个 注册Formatters converters  的SPI ,   FormattingConversionService 是一个通用实现"],["body","\n"],["body","通过使用FormattingConversionServiceFactoryBean  可以编程式或者 声明式配置其他注册变体, 同样也是 ConversionService的实现类,在数据绑定,SPringEL中也可以使用"],["body","\n\n"],["body","package org.springframework.format;\n\npublic interface FormatterRegistry extends ConverterRegistry {\n\n    void addFormatterForFieldType(Class<?> fieldType, Printer<?> printer, Parser<?> parser);\n\n    void addFormatterForFieldType(Class<?> fieldType, Formatter<?> formatter);\n\n    void addFormatterForFieldType(Formatter<?> formatter);\n\n    void addFormatterForAnnotation(AnnotationFormatterFactory<?> factory);\n}\n"],["body","\n"],["h1","FormatterRegistrar"],["body","\n"],["body","注册 注册类的 SPI"],["body","\n"],["body","package org.springframework.format;\n\npublic interface FormatterRegistrar {\n\n    void registerFormatters(FormatterRegistry registry);\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springframework/配置全局日期格式化.html"],["title","配置全局日期格式化.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","全局日期格式化"],["body","\n"],["body","默认 使用@DateTimeFormat 注解的字段 ,,默认使用DateFormat.SHORT 风格, 可以修改全局默认"],["body","\n"],["body","使用以下API 确保spring 不会自动注册默认"],["body","\n\n"],["body","org.springframework.format.datetime.standard.DateTimeFormatterRegistrar"],["body","\n"],["body","org.springframework.format.datetime.DateFormatterRegistrar"],["body","\n\n"],["h1","示例"],["body","\n"],["body","@Configuration\npublic class AppConfig {\n\n    @Bean\n    public FormattingConversionService conversionService() {\n\n        // Use the DefaultFormattingConversionService but do not register defaults\n        DefaultFormattingConversionService conversionService = new DefaultFormattingConversionService(false);\n\n        // Ensure @NumberFormat is still supported\n        conversionService.addFormatterForFieldAnnotation(new NumberFormatAnnotationFormatterFactory());\n\n        // Register JSR-310 date conversion with a specific global format\n        DateTimeFormatterRegistrar registrar = new DateTimeFormatterRegistrar();\n        registrar.setDateFormatter(DateTimeFormatter.ofPattern(\"yyyyMMdd\"));\n        registrar.registerFormatters(conversionService);\n\n        // Register date conversion with a specific global format\n        DateFormatterRegistrar registrar = new DateFormatterRegistrar();\n        registrar.setFormatter(new DateFormatter(\"yyyyMMdd\"));\n        registrar.registerFormatters(conversionService);\n\n        return conversionService;\n    }\n}\n"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xsi:schemaLocation=\"\n        http://www.springframework.org/schema/beans\n        https://www.springframework.org/schema/beans/spring-beans.xsd>\n\n    <bean id=\"conversionService\" class=\"org.springframework.format.support.FormattingConversionServiceFactoryBean\">\n        <property name=\"registerDefaultFormatters\" value=\"false\" />\n        <property name=\"formatters\">\n            <set>\n                <bean class=\"org.springframework.format.number.NumberFormatAnnotationFormatterFactory\" />\n            </set>\n        </property>\n        <property name=\"formatterRegistrars\">\n            <set>\n                <bean class=\"org.springframework.format.datetime.standard.DateTimeFormatterRegistrar\">\n                    <property name=\"dateFormatter\">\n                        <bean class=\"org.springframework.format.datetime.standard.DateTimeFormatterFactoryBean\">\n                            <property name=\"pattern\" value=\"yyyyMMdd\"/>\n                        </bean>\n                    </property>\n                </bean>\n            </set>\n        </property>\n    </bean>\n</beans>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springframework/属性源抽象.html"],["title","属性源抽象.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","环境抽象"],["body","\n\n"],["body","\n"],["body","Environment 接口是 对   程序两个关键的环境: "],["body","\n\n"],["body","profile"],["body","\n"],["body","properties"],["body","\n\n"],["body","进行的抽象"],["body","\n"],["body","\n"],["body","\n"],["body","profile 是一系列 bean定义的 逻辑分组, 只有当指定的profile 激活才会把加入到容器管理"],["body","\n"],["body","\n"],["body","\n"],["body","properties 管理者 很多属性资源, 例如  JVM系统属性, 环境变量, JNDI, 容器参数,  临时properties, objects, map "],["body","\n"],["body","\n\n"],["h1","Profile"],["body","\n"],["headingLink","使用"],["heading","使用"],["body","\n"],["headingLink","与或非使用逻辑"],["heading","与或非使用逻辑"],["body","\n"],["body","!: A logical “not” of the profile\n\n&: A logical “and” of the profiles\n\n|: A logical “or” of the profiles\n"],["body","\n"],["headingLink","标注配置类上"],["heading","标注配置类上"],["body","\n"],["body","//标注配置类上\n@Configuration\n@Profile(\"development\")\npublic class StandaloneDataConfig {\n\n    @Bean\n    public DataSource dataSource() {\n        return new EmbeddedDatabaseBuilder()\n            .setType(EmbeddedDatabaseType.HSQL)\n            .addScript(\"classpath:com/bank/config/sql/schema.sql\")\n            .addScript(\"classpath:com/bank/config/sql/test-data.sql\")\n            .build();\n    }\n}\n\n//多环境\n@Profile({\"p1\", \"p2\"})\n"],["body","\n"],["headingLink","xml配置"],["heading","XML配置"],["body","\n"],["body","<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"\n    xmlns:jee=\"http://www.springframework.org/schema/jee\"\n    xsi:schemaLocation=\"...\">\n\n    <!-- other bean definitions -->\n\n    <beans profile=\"development\">\n        <jdbc:embedded-database id=\"dataSource\">\n            <jdbc:script location=\"classpath:com/bank/config/sql/schema.sql\"/>\n            <jdbc:script location=\"classpath:com/bank/config/sql/test-data.sql\"/>\n        </jdbc:embedded-database>\n    </beans>\n\n    <beans profile=\"production\">\n        <jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/datasource\"/>\n    </beans>\n</beans>\n//嵌套\n<beans xmlns=\"http://www.springframework.org/schema/beans\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    xmlns:jdbc=\"http://www.springframework.org/schema/jdbc\"\n    xmlns:jee=\"http://www.springframework.org/schema/jee\"\n    xsi:schemaLocation=\"...\">\n\n    <!-- other bean definitions -->\n\n    <beans profile=\"production\">\n        <beans profile=\"us-east\">\n            <jee:jndi-lookup id=\"dataSource\" jndi-name=\"java:comp/env/jdbc/datasource\"/>\n        </beans>\n    </beans>\n</beans>\n"],["body","\n"],["headingLink","激活profile的方式"],["heading","激活Profile的方式"],["body","\n"],["body","编码方式"],["body","\n"],["body","AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\nctx.getEnvironment().setActiveProfiles(\"development\");\nctx.register(SomeConfig.class, StandaloneDataConfig.class, JndiDataConfig.class);\nctx.refresh();\n"],["body","\n"],["body","命令行"],["body","\n"],["body"," -Dspring.profiles.active=\"profile1,profile2\"\n"],["body","\n"],["body","默认环境"],["body","\n"],["body","@Configuration\n@Profile(\"default\")\npublic class DefaultDataConfig {\n\n    @Bean\n    public DataSource dataSource() {\n        return new EmbeddedDatabaseBuilder()\n            .setType(EmbeddedDatabaseType.HSQL)\n            .addScript(\"classpath:com/bank/config/sql/schema.sql\")\n            .build();\n    }\n}\n"],["body","\n"],["h1","属性源"],["body","\n"],["headingLink","属性查找的优先级"],["heading","属性查找的优先级"],["body","\n\n"],["body","\n"],["body","Environment 的查找是可继承的"],["body","\n"],["body","\n"],["body","\n"],["body","StandardEnvironment 包含了 系统变量和环境变量"],["body","\n"],["body","\n"],["body","\n"],["body","StandardServletEnvironment包含以下，　越排在上面优先级越高"],["body","\n\n"],["body","ServletConfig parameters (if applicable — for example, in case of a DispatcherServlet context)"],["body","\n"],["body","ServletContext parameters (web.xml context-param entries)"],["body","\n"],["body","JNDI environment variables (java:comp/env/ entries)"],["body","\n"],["body","JVM system properties (-D command-line arguments)"],["body","\n"],["body","JVM system environment (operating system environment variables)"],["body","\n\n"],["body","\n\n"],["headingLink","属性源在spring中的使用"],["heading","属性源在spring中的使用"],["body","\n"],["body","@Configuration\n@PropertySource(\"classpath:/com/myco/app.properties\")\npublic class AppConfig {\n\n    @Autowired\n    Environment env;\n\n    @Bean\n    public TestBean testBean() {\n        TestBean testBean = new TestBean();\n        testBean.setName(env.getProperty(\"testbean.name\"));\n        return testBean;\n    }\n}\n"],["body","\n"],["body","占位符会从当前环境已加载的属性中取"],["body","\n"],["body","@Configuration\n@PropertySource(\"classpath:/com/${my.placeholder:default/path}/app.properties\")\npublic class AppConfig {\n\n    @Autowired\n    Environment env;\n\n    @Bean\n    public TestBean testBean() {\n        TestBean testBean = new TestBean();\n        testBean.setName(env.getProperty(\"testbean.name\"));\n        return testBean;\n    }\n}\n"],["body","\n"],["h1","属性与资源环境"],["body","\n"],["headingLink","资源属性"],["heading","资源属性"],["body","\n"],["body","\n"],["body","PropertySource：对 key value键值对的封装"],["body","\n"],["body","\n"],["headingLink","类图"],["heading","类图"],["body","\n"],["body","classDiagram\n  PropertySource <|-- EnumerablePropertySource:可枚举的\n  PropertySource <|-- StubPropertySource:存根\n  EnumerablePropertySource <|-- MapPropertySource:基于map的实现\n  MapPropertySource <|-- PropertiesPropertySource:基于Properties的实现\n  MapPropertySource <|-- SystemEnvironmentPropertySource:兼容bash 的a_b,a.b,a-b等\n  PropertiesPropertySource <|-- ResourcePropertySource:基于类路径资源\n  PropertiesPropertySource <|-- MockPropertySource:数据模拟\n"],["body","\n"],["headingLink","propertysource"],["heading","PropertySource"],["body","\n"],["headingLink","简述"],["heading","简述"],["body","\n"],["body","PropertySource 对象通常不会单独使用，而是通过 PropertySources 对象使用，该对象聚合属性源并与 PropertyResolver 实现结合使用，该实现可以跨 PropertySource 集执行基于优先级的搜索。 \nPropertySource 标识不是根据封装的属性的内容来确定的，而是仅根据 PropertySource 的名称来确定的。"],["body","\n"],["headingLink","局部变量"],["heading","局部变量"],["body","\n"],["body","属性源的名称"],["body","\n"],["body","protected final String name;\n"],["body","\n"],["body","属性源backend"],["body","\n"],["body","protected final T source;\n"],["body","\n"],["headingLink","stubpropertysource"],["heading","StubPropertySource"],["body","\n\n"],["body","\n"],["body","在创建应用程序上下文时无法急切初始化实际属性源的情况下，PropertySource 用作占位符。"],["body","\n"],["body","\n"],["body","\n"],["body","例如，基于 ServletContext 的属性源必须等待 ServletContext 对象可用于其封闭的 ApplicationContext。"],["body","\n"],["body","\n"],["body","\n"],["body","在这种情况下，应使用存根来保存属性源的预期默认位置/顺序，然后在上下文刷新期间替换。"],["body","\n"],["body","\n\n"],["body","public static class StubPropertySource extends PropertySource<Object> {\n\n   public StubPropertySource(String name) {\n      super(name, new Object());\n   }\n\n   /**\n    * Always returns {@code null}.\n    */\n   @Override\n   @Nullable\n   public String getProperty(String name) {\n      return null;\n   }\n}\n"],["body","\n"],["headingLink","comparisonpropertysource"],["heading","ComparisonPropertySource"],["body","\n"],["body","\n"],["body","用于集合比较目的的 PropertySource 实现。"],["body","\n"],["body","\n"],["body","static class ComparisonPropertySource extends StubPropertySource {\n\n   private static final String USAGE_ERROR =\n         \"ComparisonPropertySource instances are for use with collection comparison only\";\n\n   public ComparisonPropertySource(String name) {\n      super(name);\n   }\n\n   @Override\n   public Object getSource() {\n      throw new UnsupportedOperationException(USAGE_ERROR);\n   }\n\n   @Override\n   public boolean containsProperty(String name) {\n      throw new UnsupportedOperationException(USAGE_ERROR);\n   }\n\n   @Override\n   @Nullable\n   public String getProperty(String name) {\n      throw new UnsupportedOperationException(USAGE_ERROR);\n   }\n}\n"],["body","\n"],["headingLink","enumerablepropertysource"],["heading","EnumerablePropertySource"],["body","\n"],["body","\n"],["body","能够查询其底层源对象以枚举所有可能的属性名称/值对的 PropertySource 实现。"],["body","\n"],["body","\n"],["body","公开 getPropertyNames() 方法以允许调用者内省可用属性"],["body","\n"],["body","public abstract String[] getPropertyNames();\n"],["body","\n"],["headingLink","compositepropertysource"],["heading","CompositePropertySource"],["body","\n"],["body","\n"],["body","一些列PropertySource的集合组合实现"],["body","\n"],["body","\n"],["body","private final Set<PropertySource<?>> propertySources = new LinkedHashSet<>();\n"],["body","\n"],["headingLink","commandlinepropertysource"],["heading","CommandLinePropertySource"],["body","\n\n"],["body","\n"],["body","基于命令行的属性源"],["body","\n"],["body","\n"],["body","\n"],["body","有两个实现类，一个是基于 --opt=xjq 的简单命令行"],["body","\n"],["body","CommandLinePropertySource"],["body","\n"],["body","一个是基于Jopt的命令行属性源 CommandLinePropertySource"],["body","\n"],["body","\n\n"],["headingLink","resourcepropertysource"],["heading","ResourcePropertySource"],["body","\n"],["body","\n"],["body","基于Resource 的 属性源"],["body","\n"],["body","\n"],["body","初始化"],["body","\n"],["body","//将Resource 转化成Properties\n//从resource从获取 resourcename\npublic ResourcePropertySource(String name, EncodedResource resource) throws IOException {\n   super(name, PropertiesLoaderUtils.loadProperties(resource));\n   this.resourceName = getNameForResource(resource.getResource());\n}\n"],["body","\n"],["body","getNameForResource"],["body","\n"],["body","private static String getNameForResource(Resource resource) {\n   String name = resource.getDescription();\n   if (!StringUtils.hasText(name)) {\n      name = resource.getClass().getSimpleName() + \"@\" + System.identityHashCode(resource);\n   }\n   return name;\n}\n"],["body","\n"],["headingLink","属性占位符解析"],["heading","属性占位符解析"],["body","\n"],["headingLink","类图-1"],["heading","类图"],["body","\n"],["body","classDiagram\n\tPropertyResolver --|> ConfigurablePropertyResolver:设置属性解析器的一些配置包括占位符、默认值分隔符、无法解析时是否忽略\n\tConfigurablePropertyResolver --|> AbstractPropertyResolver:大部分内容的实现：1.ConfigurablePropertyResolver的大部分实现\n\tAbstractPropertyResolver --|> PropertySourcesPropertyResolver:使用PropertySource实现属性源获取功能\n\tAbstractPropertyResolver ..> PropertyPlaceholderHelper:1.通过它完成占位符替换功能\n"],["body","\n"],["headingLink","propertyresolver"],["heading","PropertyResolver"],["body","\n"],["body","\n"],["body","用于针对任何基础源 解析属性的接口"],["body","\n"],["body","\n"],["body","获取属性"],["body","\n"],["body","//返回给定的属性键是否可用于解析，即给定键的值不为空\nboolean containsProperty(String key);\n//返回与给定键关联的属性值，如果无法解析键，则返回 null。\nString getProperty(String key);\nString getProperty(String key, String defaultValue);\n//返回与给定键关联的属性值，如果无法解析键，则返回 null。\n<T> T getProperty(String key, Class<T> targetType);\n//返回与给定键关联的属性值，如果键不能被返回，则返回 defaultValue\n<T> T getProperty(String key, Class<T> targetType, T defaultValue);\nString getRequiredProperty(String key) throws IllegalStateException;\n\t<T> T getRequiredProperty(String key, Class<T> targetType) throws IllegalStateException;\n"],["body","\n"],["body","解析占位符"],["body","\n"],["body","// 解析给定文本中的 ${...} 占位符，将它们替换为由 getProperty 解析的相应属性值。没有默认值的无法解析的占位符将被忽略并保持不变\nString resolvePlaceholders(String text);\nString resolveRequiredPlaceholders(String text) throws IllegalArgumentException;\n"],["body","\n"],["headingLink","configurablepropertyresolver"],["heading","ConfigurablePropertyResolver"],["body","\n"],["body","API"],["body","\n\n"],["body","提供 ConversionService 转换服务：不通类型之间的转换"],["body","\n"],["body","设置 占位符前缀、后缀"],["body","\n"],["body","默认值与占位符之间的分隔符 默认为 冒号"],["body","\n"],["body","遇到无法解析的占位符时是否抛出异常。"],["body","\n"],["body","校验属性值"],["body","\n\n"],["headingLink","abstractpropertyresolver"],["heading","AbstractPropertyResolver"],["body","\n"],["headingLink","成员变量"],["heading","成员变量"],["body","\n"],["body","//必输属性\nprivate final Set<String> requiredProperties = new LinkedHashSet<>();\n//默认值分割符\nprivate String valueSeparator =  SystemPropertyUtils.VALUE_SEPARATOR;\n\n//前缀\npublic static final String PLACEHOLDER_PREFIX = \"${\";\n\n//后缀\n\t/** Suffix for system property placeholders: \"}\". */\npublic static final String PLACEHOLDER_SUFFIX = \"}\";\n\n//默认值分割符\n\t/** Value separator for system property placeholders: \":\". */\npublic static final String VALUE_SEPARATOR = \":\";\n\n//遇到无法解析的 占用符时是否忽略\nprivate boolean ignoreUnresolvableNestedPlaceholders = false;\n\n"],["body","\n"],["body","//类型转换\nprivate volatile ConfigurableConversionService conversionService;\n\n//placeHolder解析器：非严格\nprivate PropertyPlaceholderHelper nonStrictHelper;\n//placeHolder解析器：严格\nprivate PropertyPlaceholderHelper strictHelper;\n"],["body","\n"],["headingLink","环境"],["heading","环境"],["body","\n"],["body","\n"],["body","不同的 PropertySource 构成不同的 Environment"],["body","\n"],["body","\n"],["headingLink","environment"],["heading","Environment"],["body","\n\n"],["body","当前应用程序运行环境的接口"],["body","\n"],["body","对应用程序环境的两个关键方面进行抽象：（profile）配置文件和（properties）属性。"],["body","\n"],["body","与属性访问相关的方法通过 PropertyResolver 接口公开。"],["body","\n\n"],["body","主要用来查询 当前环境激活的环境变量"],["body","\n"],["body","配置文件是一个命名的、逻辑的 bean 定义组，仅当给定的配置文件处于活动状态时才向容器注册"],["body","\n"],["body","Bean 可以分配给配置文件，无论是在 XML 中定义还是通过注解"],["body","\n"],["body","在 ApplicationContext  管理的Bean 可以通过   EnvironmentAware  接口注入环境变量 或者 @Inject"],["body","\n"],["body","大多数情况下、应用程序级的 bean 不需要直接与  Environment  交互"],["body","\n"],["body","而是 通过 占位符 属性 ${...} 替换来 访问"],["body","\n"],["body","默认情况下 "],["body","\n"],["body","PropertySourcesPlaceholderConfigurer 是默认注册进Spring容器 中"],["body","\n"],["body","并处理这些 变量替换"],["body","\n"],["body","environment 对象的配置必须通过 ConfigurableEnvironment 接口完成"],["body","\n"],["body","从所有 AbstractApplicationContext 子类 getEnvironment() 方法返回"],["body","\n"],["body","//所有已激活的环境变量\nString[] getActiveProfiles();\n//获取默认环境变量\nString[] getDefaultProfiles();\n\n//返回一个或多个给定的配置文件是否处于活动状态，或者在没有明确的活动配置文件的情况下，一个或多个给定的配置文件是否包含在一组默认配置文件中。如果配置文件以 '!' 开头 逻辑被反转，即如果给定的配置文件未激活，该方法将返回 true。 例如， env.acceptsProfiles(\"p1\", \"!p2\") 如果配置文件 'p1' 处于活动状态或 'p2' 未处于活动状态，则将返回 true。\nboolean acceptsProfiles(Profiles profiles);\n"],["body","\n"],["headingLink","configurableenvironment"],["heading","ConfigurableEnvironment"],["body","\n"],["body","配置profile"],["body","\n"],["body","void setActiveProfiles(String... profiles);\nvoid addActiveProfile(String profile);\nvoid setDefaultProfiles(String... profiles);\n"],["body","\n"],["body","返回系统环境属性"],["body","\n"],["body","//由jvm设置\nMap<String, Object> getSystemProperties();\n//环境变量：由外部进程设置\nMap<String, Object> getSystemEnvironment();\n"],["body","\n"],["body","合并"],["body","\n"],["body","//将给定的父环境的活动配置文件、默认配置文件和属性源附加到此（子）环境各自的集合中。\nvoid merge(ConfigurableEnvironment parent);\n"],["body","\n\n"],["body","对于存在于父和子中的任何同名 PropertySource 实例，将保留子实例并丢弃父实例。"],["body","\n"],["body","活动和默认配置文件名称也过滤重复，以避免混淆和冗余存储。"],["body","\n"],["body",".在任何情况下，父环境都保持不变。请注意，在调用合并之后发生的对父环境的任何更改都不会反映在子环境中。因此，在调用merge之前应注意配置父属性源和配置文件信息"],["body","\n\n"],["headingLink","abstractenvironment"],["heading","AbstractEnvironment"],["body","\n"],["headingLink","简介"],["heading","简介"],["body","\n\n"],["body","环境实现的抽象基类"],["body","\n"],["body","允许通过 ACTIVE_PROFILES_PROPERTY_NAME 和 DEFAULT_PROFILES_PROPERTY_NAME 属性指定活动和默认配置文件"],["body","\n"],["body","具体子类的不同主要在于它们默认添加的 PropertySource 对象"],["body","\n"],["body","AbstractEnvironment 不添加任何内容。"],["body","\n"],["body","子类通过 customPropertySources(MutablePropertySources) 构造PropertySources"],["body","\n\n"],["headingLink","成员变量-1"],["heading","成员变量"],["body","\n"],["body","profile属性"],["body","\n"],["body","private final Set<String> activeProfiles = new LinkedHashSet<>();\nprotected static final String RESERVED_DEFAULT_PROFILE_NAME = \"default\";\nprivate final Set<String> defaultProfiles = new LinkedHashSet<>(getReservedDefaultProfiles());\n\n// ProfileParser：profile解析类\norg.springframework.core.env.ProfilesParser\n"],["body","\n"],["body","占位符解析器"],["body","\n"],["body","private final ConfigurablePropertyResolver propertyResolver =\n      new PropertySourcesPropertyResolver(this.propertySources);\n"],["body","\n"],["body","资源集合"],["body","\n"],["body","private final MutablePropertySources propertySources = new MutablePropertySources();\n"],["body","\n"],["body","主要实现了 profile的 增删改查"],["body","\n"],["headingLink","standardenvironment"],["heading","StandardEnvironment"],["body","\n"],["body","\n"],["body","适用于“标准”（即非网络）应用程序的环境实现"],["body","\n"],["body","\n"],["body","除了 ConfigurableEnvironment 的常用功能"],["body","\n\n"],["body","例如属性解析和"],["body","\n"],["body","与profile相关的操作）之外"],["body","\n\n"],["body","此实现还配置了两个默认属性源，按以下顺序搜索："],["body","\n\n"],["body","system properties"],["body","\n"],["body","system environment variables"],["body","\n\n"],["headingLink","configurablewebenvironment"],["heading","ConfigurableWebEnvironment"],["body","\n"],["body","在 ServletContext  早期：ServletConfig 可用的时候，来初始化相关的PropertySource"],["body","\n"],["body","void initPropertySources(@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig);\n"],["body","\n"],["headingLink","standardservletenvironment"],["heading","StandardServletEnvironment"],["body","\n"],["body","extends StandardEnvironment implements ConfigurableWebEnvironment\n"],["body","\n"],["body","ServletContext 初始化属性源"],["body","\n"],["body","初始化两个属性源"],["body","\n\n"],["body","ServletContextPropertySource"],["body","\n"],["body","ServletConfigPropertySource"],["body","\n\n"],["body","\t@Override\npublic void initPropertySources(@Nullable ServletContext servletContext, @Nullable ServletConfig servletConfig) {\nWebApplicationContextUtils.initServletPropertySources(getPropertySources(), servletContext, servletConfig);\n\t}\n"],["body","\n"],["headingLink","mockenvironment"],["heading","MockEnvironment"],["body","\n"],["body","伪造 属性环境"],["body","\n"],["h1","spring资源环境自动加载机制"],["body","\n"],["headingLink","类图-2"],["heading","类图"],["body","\n"],["body","classDiagram\n    class PropertiesLoaderSupport{\n    \tlocalProperties:本地变量\n    \tlocations:拥有资源\n    \tfileEncoding:编码\n    \tlocalOverride:是否使用本地变量覆盖\n    }\n   \n\tPropertiesLoaderSupport --|> PropertiesFactoryBean:返回 内置的属性资源对象\n\tPropertiesLoaderSupport --|> PropertyResourceConfigurer:在BeanFactoryPostProcessor后置处理器\n\tPropertyResourceConfigurer --|> PropertyOverrideConfigurer: 使用这种格式覆盖beanName.property=value\n\tPropertyResourceConfigurer --|> PlaceholderConfigurerSupport:帮助在bean定义中的placeHolder替换\n\tPlaceholderConfigurerSupport --|> PropertySourcesPlaceholderConfigurer:完成真正的逻辑加载\n\tPlaceholderConfigurerSupport --|> PropertyPlaceholderConfigurer:已过时\n"],["body","\n"],["headingLink","propertyplaceholderconfigurer逻辑"],["heading","PropertyPlaceholderConfigurer逻辑"],["body","\n\n"],["body","获取配置的本地资源 数据"],["body","\n"],["body","自定义转换逻辑：覆盖properties的值"],["body","\n"],["body","对bean定义 遍历 BeanDefinitionVisitor  进行 占位符替换 "],["body","\n\n"],["headingLink","propertysourcesplaceholderconfigurer逻辑"],["heading","PropertySourcesPlaceholderConfigurer逻辑"],["body","\n\n"],["body","\n"],["body","将默认环境资源加入到资源管理中"],["body","\n"],["body","\t\t\t\tthis.propertySources.addLast(\n\t\t\t\t\tnew PropertySource<Environment>(ENVIRONMENT_PROPERTIES_PROPERTY_SOURCE_NAME, this.environment) {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\t@Nullable\n\t\t\t\t\t\tpublic String getProperty(String key) {\n\t\t\t\t\t\t\treturn this.source.getProperty(key);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t);\n"],["body","\n"],["body","\n"],["body","\n"],["body","将本地资源属性加入到资源管理中"],["body","\n"],["body","PropertySource<?> localPropertySource =\n      new PropertiesPropertySource(LOCAL_PROPERTIES_PROPERTY_SOURCE_NAME, mergeProperties());\nif (this.localOverride) {\n   this.propertySources.addFirst(localPropertySource);\n}\nelse {\n   this.propertySources.addLast(localPropertySource);\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","配置 占位符解析器"],["body","\n"],["body","\n\n"],["body","\tprotected void processProperties(ConfigurableListableBeanFactory beanFactoryToProcess,\n\t\t\tfinal ConfigurablePropertyResolver propertyResolver) throws BeansException {\n\n\t\tpropertyResolver.setPlaceholderPrefix(this.placeholderPrefix);\n\t\tpropertyResolver.setPlaceholderSuffix(this.placeholderSuffix);\n\t\tpropertyResolver.setValueSeparator(this.valueSeparator);\n\n\t\tStringValueResolver valueResolver = strVal -> {\n\t\t\tString resolved = (this.ignoreUnresolvablePlaceholders ?\n\t\t\t\t\tpropertyResolver.resolvePlaceholders(strVal) :\n\t\t\t\t\tpropertyResolver.resolveRequiredPlaceholders(strVal));\n\t\t\tif (this.trimValues) {\n\t\t\t\tresolved = resolved.trim();\n\t\t\t}\n\t\t\treturn (resolved.equals(this.nullValue) ? null : resolved);\n\t\t};\n\n\t\tdoProcessProperties(beanFactoryToProcess, valueResolver);\n\t}\n"],["body","\n\n"],["body","bean定义 占位符替换"],["body","\n\n"],["body","protected void doProcessProperties(ConfigurableListableBeanFactory beanFactoryToProcess,\n      StringValueResolver valueResolver) {\n\n   BeanDefinitionVisitor visitor = new BeanDefinitionVisitor(valueResolver);\n\n   String[] beanNames = beanFactoryToProcess.getBeanDefinitionNames();\n   for (String curName : beanNames) {\n      // Check that we're not parsing our own bean definition,\n      // to avoid failing on unresolvable placeholders in properties file locations.\n      if (!(curName.equals(this.beanName) && beanFactoryToProcess.equals(this.beanFactory))) {\n         BeanDefinition bd = beanFactoryToProcess.getBeanDefinition(curName);\n         try {\n            visitor.visitBeanDefinition(bd);\n         }\n         catch (Exception ex) {\n            throw new BeanDefinitionStoreException(bd.getResourceDescription(), curName, ex.getMessage(), ex);\n         }\n      }\n   }\n\n   // New in Spring 2.5: resolve placeholders in alias target names and aliases as well.\n   beanFactoryToProcess.resolveAliases(valueResolver);\n\n   // New in Spring 3.0: resolve placeholders in embedded values such as annotation attributes.\n   beanFactoryToProcess.addEmbeddedValueResolver(valueResolver);\n}\n"],["body","\n"],["headingLink","propertysource逻辑"],["heading","@PropertySource逻辑"],["body","\n"],["body","org.springframework.context.annotation.ConfigurationClassParser#doProcessConfigurationClass"],["body","\n"],["body","解析ConfigClass 时 解析PropertySource"],["body","\n"],["body","// Process any @PropertySource annotations\nfor (AnnotationAttributes propertySource : AnnotationConfigUtils.attributesForRepeatable(\n      sourceClass.getMetadata(), PropertySources.class,\n      org.springframework.context.annotation.PropertySource.class)) {\n   if (this.environment instanceof ConfigurableEnvironment) {\n      processPropertySource(propertySource);\n   }\n   else {\n      logger.info(\"Ignoring @PropertySource annotation on [\" + sourceClass.getMetadata().getClassName() +\n            \"]. Reason: Environment must implement ConfigurableEnvironment\");\n   }\n}\n"],["body","\n"],["body","针对@PropertySource注解逻辑处理"],["body","\n"],["body","{\n//属性源名称\n   String name = propertySource.getString(\"name\");\n   if (!StringUtils.hasLength(name)) {\n      name = null;\n   }\n//属性源编码\n   String encoding = propertySource.getString(\"encoding\");\n   if (!StringUtils.hasLength(encoding)) {\n      encoding = null;\n   }\n  //属性源值\n   String[] locations = propertySource.getStringArray(\"value\");\n   Assert.isTrue(locations.length > 0, \"At least one @PropertySource(value) location is required\");\n    //not found时的处理逻辑\n   boolean ignoreResourceNotFound = propertySource.getBoolean(\"ignoreResourceNotFound\");\n   //PropertySourceFactory工厂处理类\n   Class<? extends PropertySourceFactory> factoryClass = propertySource.getClass(\"factory\");\n   PropertySourceFactory factory = (factoryClass == PropertySourceFactory.class ?\n         DEFAULT_PROPERTY_SOURCE_FACTORY : BeanUtils.instantiateClass(factoryClass));\n\n    //解析处理 locations\n   for (String location : locations) {\n      try {\n          //针对location上的变量进行占位符替换\n         String resolvedLocation = this.environment.resolveRequiredPlaceholders(location);\n          //加载资源\n         Resource resource = this.resourceLoader.getResource(resolvedLocation);\n          //将资源计入到Environment\n         addPropertySource(factory.createPropertySource(name, new EncodedResource(resource, encoding)));\n      }\n      catch (IllegalArgumentException | FileNotFoundException | UnknownHostException ex) {\n          //处理找不到资源的情况\n         // Placeholders not resolvable or resource not found when trying to open it\n         if (ignoreResourceNotFound) {\n            if (logger.isInfoEnabled()) {\n               logger.info(\"Properties location [\" + location + \"] not resolvable: \" + ex.getMessage());\n            }\n         }\n         else {\n            throw ex;\n         }\n      }\n   }\n}\n"],["body","\n"],["body","将解析的资源加入到Environment"],["body","\n"],["body","{\n   String name = propertySource.getName();\n   MutablePropertySources propertySources = ((ConfigurableEnvironment) this.environment).getPropertySources();\n//如果已经加载过：将 sourcename作为 name替换\n   if (this.propertySourceNames.contains(name)) {\n      // We've already added a version, we need to extend it\n      PropertySource<?> existing = propertySources.get(name);\n      // \n      if (existing != null) {\n         PropertySource<?> newSource = (propertySource instanceof ResourcePropertySource ?\n               ((ResourcePropertySource) propertySource).withResourceName() : propertySource);\n         if (existing instanceof CompositePropertySource) {\n            ((CompositePropertySource) existing).addFirstPropertySource(newSource);\n         }\n         else {\n            if (existing instanceof ResourcePropertySource) {\n               existing = ((ResourcePropertySource) existing).withResourceName();\n            }\n             //新旧版本 一起组合\n            CompositePropertySource composite = new CompositePropertySource(name);\n            composite.addPropertySource(newSource);\n            composite.addPropertySource(existing);\n            propertySources.replace(name, composite);\n         }\n         return;\n      }\n   }\n\n   if (this.propertySourceNames.isEmpty()) {\n      propertySources.addLast(propertySource);\n   }\n   else {\n      String firstProcessed = this.propertySourceNames.get(this.propertySourceNames.size() - 1);\n      propertySources.addBefore(firstProcessed, propertySource);\n   }\n   this.propertySourceNames.add(name);\n}\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/springframework/基于Ant的路径匹配.html"],["title","基于Ant的路径匹配.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","路径匹配"],["body","\n"],["body","\n"],["body","基于字符串的路径匹配的策略接口"],["body","\n"],["body","\n"],["headingLink","类图"],["heading","类图"],["body","\n"],["body","classDiagram\nPathMatcher --|> AntPathMatcher:基于Ant风格的路径匹配\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/PropertySource.html"],["title","PropertySource.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","propertysource"],["heading","PropertySource"],["body","\n"],["body","代表名称/值属性对的源的抽象基类。基础源对象可以是封装属性的任何类型T。"],["body","\n"],["body","示例包括java.util.Properties对象，java.util.Map对象，ServletContext和ServletConfig对象 (用于访问init参数)。探索PropertySource类型层次结构以查看提供的实现。"],["body","\n"],["body","PropertySource对象通常不是隔离使用，而是通过一个PropertySources对象使用，该对象聚合属性源，并与可以在PropertySources集合中执行基于优先级的搜索的PropertyResolver实现结合使用。"],["body","\n"],["body","PropertySource标识不是基于封装属性的内容来确定的，而是仅基于PropertySource的名称来确定的。这对于在集合上下文中操纵PropertySource对象很有用。有关详细信息，请参见MutablePropertySources中的操作以及named(String) 和toString() 方法。"],["body","\n"],["body","请注意，在使用 @ Configuration类时，@ PropertySource注释提供了一种方便且声明性的方式将属性源添加到封闭环境中。"],["body","\n\n"],["body","给定包含键/值对文件app.properties，以下 @Configuration类使用 @PropertySource将app.properties贡献给Environment's set of PropertySources."],["body","\n"],["body","请注意，环境对象是 @Autowired到配置类中，然后在填充TestBean对象时使用。"],["body","\n"],["body","解析 <bean> 和 @ Value注解中的 ${...} 占位符"],["body","\n"],["body","为了使用PropertySource中的属性解析 <bean> 定义或 @ Value注释中的 ${...} 占位符，您必须确保在ApplicationContext使用的BeanFactory中注册了适当的嵌套值解析器。"],["body","\n"],["body","在XML中使用 <context:property-placeholder> 时会自动发生这种情况。"],["body","\n"],["body","使用 @Configuration类时，可以通过静态 @ Bean方法显式注册PropertySourcesPlaceholderConfigurer来实现。"],["body","\n"],["body","但是请注意，通常仅在需要自定义配置 (例如占位符语法) 时，才需要通过静态 @ Bean方法对propertysourcesplaceholder进行显式注册。"],["body","\n"],["body","有关详细信息和示例，请参见 @Configuration的javadocs的 \"Working with externalized values\"，\"a note on BeanFactoryPostProcessor-returning @Bean methods\" of @Bean's javadocs for details and examples."],["body","\n\n"],["body","  @Configuration\n  @PropertySource(\"classpath:/com/myco/app.properties\")\n  public class AppConfig {\n \n      @Autowired\n      Environment env;\n \n      @Bean\n      public TestBean testBean() {\n          TestBean testBean = new TestBean();\n          testBean.setName(env.getProperty(\"testbean.name\"));\n          return testBean;\n    }\n}\n"],["body","\n"],["body","解析@PropertySource资源位置中的 ${...} 占位符"],["body","\n\n"],["body","@PropertySource资源位置中存在的任何 ${...} 占位符将使用 已注册在该环境的属性源集进行解析"],["body","\n\n"],["body","  @Configuration\n  @PropertySource(\"classpath:/com/${my.placeholder:default/path}/app.properties\")\n  public class AppConfig {\n \n      @Autowired\n      Environment env;\n \n      @Bean\n      public TestBean testBean() {\n          TestBean testBean = new TestBean();\n          testBean.setName(env.getProperty(\"testbean.name\"));\n          return testBean;\n    }\n}\n"],["body","\n"],["body","假设 “my.placeholder” 存在于已经注册的属性源之一中-例如，系统属性或环境变量-占位符将被解析为相应的值。如果不是，则将使用默认值。"],["body","\n"],["body","默认值使用 冒号分割。可选的。如果没有默认值会抛出异常"],["body","\n"],["body","使用PropertySource的关键点是"],["body","\n\n"],["body","同名key。越靠后声明的文件 优先级越高"],["body","\n"],["body","但是使用  component-scanning 扫描时，此时优先级很难确定。建议 使用编程式 PropertySource API。See ConfigurableEnvironment and MutablePropertySources javadocs for details."],["body","\n"],["body","可以重复注解"],["body","\n"],["body","但是，所有此类 @PropertySource注解  都需要在同一级别上声明\n\n"],["body","直接在配置类上或在同一自定义注解上作为元注解。"],["body","\n"],["body","不建议混合直接注解和元注解，因为直接注释将有效地覆盖元注解。"],["body","\n\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-bean定义/Bean定义.html"],["title","Bean定义.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","BeanDefinition"],["body","\n"],["body","BeanDefinition 描述了一个 bean 实例，它具有属性值、构造函数参数值以及由具体实现提供的更多信息。"],["body","\n"],["body","这只是一个最小的接口：主要目的是允许 BeanFactoryPostProcessor 内省和修改属性值和其他 bean 元数据。"],["body","\n"],["headingLink","parentname"],["heading","parentName"],["body","\n"],["body","父 definition "],["body","\n"],["headingLink","beanclassname"],["heading","beanClassName"],["body","\n"],["body","bean 类名称"],["body","\n"],["body","类名可以在 bean factory 后处理期间修改，通常用它的解析变体替换原始类名"],["body","\n"],["headingLink","scope"],["heading","scope"],["body","\n"],["body","bean的作用域"],["body","\n"],["headingLink","lazyinit"],["heading","lazyInit"],["body","\n"],["body","懒加载"],["body","\n"],["headingLink","dependson"],["heading","dependsOn"],["body","\n"],["body","依赖bean名称"],["body","\n"],["headingLink","autowirecandidate"],["heading","autowireCandidate"],["body","\n"],["body","设置此 bean 是否是自动装配到其他 bean 的候选者。"],["body","\n"],["body","此标志旨在仅影响基于类型的自动装配"],["body","\n"],["body","它不会影响按名称的显式引用，即使指定的 bean 没有被标记为自动装配候选者，也会被解析"],["body","\n"],["body","因此，如果名称匹配，按名称自动装配仍然会注入一个 bean"],["body","\n"],["headingLink","primary"],["heading","primary"],["body","\n"],["body","设置此 bean 是否是主要的自动装配候选者。"],["body","\n"],["body","如果这个值对于多个匹配候选中的一个 bean 正好是真的，它将作为一个 tie-breaker."],["body","\n"],["headingLink","factorybeanname"],["heading","factoryBeanName"],["body","\n"],["body","指定要使用的工厂 bean（如果有）"],["body","\n"],["headingLink","factorymethodname"],["heading","factoryMethodName"],["body","\n"],["body","此方法将使用构造函数参数调用"],["body","\n"],["body","该方法将在指定的工厂 bean（如果有）上调用，或者作为本地 bean 类上的静态方法调用。"],["body","\n"],["headingLink","constructorargumentvalues"],["heading","ConstructorArgumentValues"],["body","\n"],["body","返回的实例可以在 bean factory 后处理期间进行修改"],["body","\n"],["headingLink","mutablepropertyvalues"],["heading","MutablePropertyValues"],["body","\n"],["body","返回要应用于 bean 的新实例的属性值"],["body","\n"],["body","返回的实例可以在 bean factory 后处理期间进行修改"],["body","\n"],["headingLink","initmethodname"],["heading","initMethodName"],["body","\n"],["headingLink","destroymethodname"],["heading","destroyMethodName"],["body","\n"],["headingLink","role"],["heading","role"],["body","\n"],["body","BeanDefinition 的角色提示。角色提示为框架和工具提供了特定 BeanDefinition 的角色和重要性的指示。"],["body","\n"],["headingLink","description"],["heading","description"],["body","\n"],["body","设置此 bean 定义的人类可读描述。"],["body","\n"],["headingLink","resolvabletype"],["heading","ResolvableType"],["body","\n"],["body","根据 bean 类或其他特定元数据，返回此 bean 定义的可解析类型。"],["body","\n"],["body","这通常在运行时合并的 bean 定义上完全解决，但不一定在配置时定义实例上解决。"],["body","\n"],["headingLink","singleton"],["heading","singleton"],["body","\n"],["body","单例"],["body","\n"],["headingLink","abstract"],["heading","abstract"],["body","\n"],["body","抽象"],["body","\n"],["headingLink","resourcedescription"],["heading","ResourceDescription"],["body","\n"],["body","返回此 bean 定义来自的资源的描述（为了在出现错误时显示上下文）。"],["body","\n"],["headingLink","originatingbeandefinition"],["heading","OriginatingBeanDefinition"],["body","\n"],["body","返回原始 BeanDefinition，如果没有则返回 null。允许检索装饰的 bean 定义（如果有）。请注意，此方法返回直接发起者。遍历创建者链以找到用户定义的原始 BeanDefinition。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","10.spring_SpringFramework/spring-bean定义/README.html"],["title","spring-bean定义 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n"],["body","Spring对各种实例对象的抽象"],["body","\n"],["h1","BeanDefinition"],["body","\n"],["body","bean定义"],["body","\n"],["h1","AnnotatedTypeMetadata"],["body","\n"],["body","以不一定需要类加载的形式定义对特定类型（类或方法）注解的访问。"],["body","\n"],["h1","MergedAnnotation"],["body","\n"],["body","从合并的注解集返回中 返回单个合并的注解。在属性值可能从不同的源值中\"合并\"的注释上呈现视图。"],["body","\n"],["h1","MergedAnnotations"],["body","\n"],["body","提供对注解合并 集合访问"],["body","\n"],["h1","AliasRegistry"],["body","\n"],["body","别名注册"],["body","\n"],["body","给定一个名称，并将相关的别名与之绑定"],["body","\n"],["h1","BeanDefinitionRegistry"],["body","\n\n"],["body","\n"],["body","注册bean定义"],["body","\n"],["body","\n"],["body","\n"],["body","给定bean名称，并绑定与之相关的bean定义"],["body","\n"],["body","\n"],["body","\n"],["body","一般实现者是：DefaultListableBeanFactory and GenericApplicationContext"],["body","\n"],["body","\n\n"],["h1","BeanMetadataElement"],["body","\n"],["body","携带配置源对象的 bean元数据 元素 实现"],["body","\n"],["h1","BeanDefinitionHolder"],["body","\n"],["body","持有 bean定义，bean名，bean别名的引用"],["body","\n"],["h1","BeanNameGenerator"],["body","\n"],["body","根据bean定义 bean定义注册器 生成名称"],["body","\n"],["h1","SingletonBeanRegistry"],["body","\n"],["body","共享bean实例的注册"],["body","\n"],["body","由BeanFactory 实现 主要用来 以统一的方式暴露他们的单例管理工具"],["body","\n"],["body","Register the given existing object as singleton in the bean registry, under the given bean name.\nThe given instance is supposed to be fully initialized; "],["body","\n"],["body","the registry will not perform any initialization callbacks (in particular, it won't call InitializingBean's afterPropertiesSet method). "],["body","\n"],["body","The given instance will not receive any destruction callbacks (like DisposableBean's destroy method) either."],["body","\n"],["body","When running within a full BeanFactory: Register a bean definition instead of an existing instance if your bean is supposed to receive initialization and/or destruction callbacks.\nTypically invoked during registry configuration, but can also be used for runtime registration of singletons. As a consequence, a registry implementation should synchronize singleton access; it will have to do this anyway if it supports a BeanFactory's lazy initialization of singletons.\nParams:\nbeanName – the name of the bean\nsingletonObject – the existing singleton object"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","25.html"],["title","MyBatis - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/JUL.html"],["title","JUL.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","{% raw %}"],["body","\n"],["h1","JUL"],["body","\n"],["headingLink","使用"],["heading","使用"],["body","\n"],["body","JUL 全称 java.util.logging.Logger，JDK 自带的日志系统，从 JDK1.4 就有了。因为 log4j 的存在，这个 logger 一直沉默着，其实在一些测试性的代码中，jdk自带的 logger 比 log4j 更方便。JUL是自带具体实现的，与 log4j、logback 等类似，而不是像 JCL、slf4j 那样的日志接口封装。"],["body","\n"],["body","import java.util.logging.Level;\nimport java.util.logging.Logger;\n\nprivate static final Logger LOGGER = Logger.getLogger(MyClass.class.getName());\n"],["body","\n"],["headingLink","日志级别"],["heading","日志级别"],["body","\n\n"],["body","日志级别由高到低依次为：\n\n"],["body","SEVERE（严重）"],["body","\n"],["body","WARNING（警告）"],["body","\n"],["body","INFO（信息）"],["body","\n"],["body","CONFIG（配置）"],["body","\n"],["body","FINE（详细）"],["body","\n"],["body","FINER（较详细）"],["body","\n"],["body","FINEST（非常详细）"],["body","\n\n"],["body","\n\n"],["body","另外还有两个全局开关：OFF「关闭日志记录」和ALL「启用所有消息日志记录」。"],["body","\n"],["headingLink","loggingproperties文件"],["heading","logging.properties文件"],["body","\n"],["body","默认日志级别"],["body","\n"],["body","默认日志级别可以通过.level= ALL来控制，也可以基于层次命名空间来控制，按照Logger名字进行前缀匹配，匹配度最高的优先采用，日志级别只认大写；"],["body","\n"],["body","JUL通过handler来完成实际的日志输出，可以通过配置文件指定一个或者多个hanlder，多个handler之间使用逗号分隔；handler上也有一个日志级别，作为该handler可以接收的日志最低级别，低于该级别的日志，将不进行实际的输出；"],["body","\n"],["body","handler上可以绑定日志格式化器，比如java.util.logging.ConsoleHandler就是使用的String.format来支持的；"],["body","\n"],["headingLink","关于构造函数中defaultbundle的解释"],["heading","关于构造函数中defaultBundle的解释"],["body","\n"],["body","// 默认资源包位置\nprivate static final String defaultBundle = \"sun.util.logging.resources.logging\";\n// 用于本地化级别名称的资源包名称\nprivate final String resourceBundleName;\n"],["body","\n"],["body","resourceBundleName是用来指定外部资源包的，如果不指定，会默认用defaultBundle指定的资源包，资源包是干嘛的呢，我在rt.jar包下找到了这个资源。"],["body","\n"],["body","package sun.util.logging.resources;\n\nimport java.util.ListResourceBundle;\n\npublic final class logging extends ListResourceBundle {\n    public logging() {\n    }\n\n    protected final Object[][] getContents() {\n        return new Object[][]{{\"ALL\", \"All\"}, {\"CONFIG\", \"Config\"}, {\"FINE\", \"Fine\"}, {\"FINER\", \"Finer\"}, {\"FINEST\", \"Finest\"}, {\"INFO\", \"Info\"}, {\"OFF\", \"Off\"}, {\"SEVERE\", \"Severe\"}, {\"WARNING\", \"Warning\"}};\n    }\n}\n\n"],["body","\n"],["body","原来就是控制台输出日志时，定义本地化后的级别名称。或许你会有疑问，明明在控制台上看到的是警告、信息等中文的Level，这实际上是SimpleFormatter进行的处理。"],["body","\n"],["body","public synchronized String format(LogRecord record) {\n\t// 省略方法前半部分的代码\n\treturn String.format(format,\n                             dat,\n                             source,\n                             record.getLoggerName(),\n                             record.getLevel().getLocalizedLevelName(),\n                             message,\n                             throwable);\n}\n\n"],["body","\n"],["headingLink","logmanager对象的初始化"],["heading","LogManager对象的初始化"],["body","\n\n"],["body","\n"],["body","从类加载日志配置文件"],["body","\n"],["body","从图中代码可以看出 java.util.logging.config.class 中实例化类，用户并从构造函数中加载 配置类，通过调用   readConfiguration(InputStream)"],["body","\n"],["body","\n"],["body","\n"],["body","从指定的 系统环境变量中加载，java.util.logging.config.file"],["body","\n"],["body","注意这里的 路径是绝对路径，默认路径是 ${java.home}\\lib\\logging.properties"],["body","\n"],["body","\n\n"],["body","    public void readConfiguration() throws IOException, SecurityException {\n        checkPermission();\n\n        // if a configuration class is specified, load it and use it.\n        String cname = System.getProperty(\"java.util.logging.config.class\");\n        if (cname != null) {\n            try {\n                // Instantiate the named class.  It is its constructor's\n                // responsibility to initialize the logging configuration, by\n                // calling readConfiguration(InputStream) with a suitable stream.\n                try {\n                    Class<?> clz = ClassLoader.getSystemClassLoader().loadClass(cname);\n                    clz.newInstance();\n                    return;\n                } catch (ClassNotFoundException ex) {\n                    Class<?> clz = Thread.currentThread().getContextClassLoader().loadClass(cname);\n                    clz.newInstance();\n                    return;\n                }\n            } catch (Exception ex) {\n                System.err.println(\"Logging configuration class \\\"\" + cname + \"\\\" failed\");\n                System.err.println(\"\" + ex);\n                // keep going and useful config file.\n            }\n        }\n\n        String fname = System.getProperty(\"java.util.logging.config.file\");\n        if (fname == null) {\n            fname = System.getProperty(\"java.home\");\n            if (fname == null) {\n                throw new Error(\"Can't find java.home ??\");\n            }\n            File f = new File(fname, \"lib\");\n            f = new File(f, \"logging.properties\");\n            fname = f.getCanonicalPath();\n        }\n        try (final InputStream in = new FileInputStream(fname)) {\n            final BufferedInputStream bin = new BufferedInputStream(in);\n            readConfiguration(bin);\n        }\n    }\n"],["body","\n"],["headingLink","logmanager中的loggercontext"],["heading","LogManager中的LoggerContext"],["body","\n"],["body","LoggerContext为每个context的Logger提供命名空间。"],["body","\n"],["body","默认的LogManager对象有一个系统上下文SystemLoggerContext和一个用户上下文LoggerContext。"],["body","\n"],["body","系统上下文用于维护所有系统Logger的命名空间，并由系统代码查询。"],["body","\n"],["body","如果系统Logger不存在于用户上下文中，它也将被添加到用户上下文中。"],["body","\n"],["body","用户代码查询用户上下文，并在用户上下文中添加所有Logger。"],["body","\n"],["body","Logger对象维护了 直接Parent"],["body","\n"],["body","    /**\n     * 日志之间存在父子关系，最顶层的日志类型为LogManager$RootLogger,命名为\"\"\n     */\n    @Test\n    public void test() throws IOException {\n        Logger logger = Logger.getLogger(\"com.wuhao.log\");\n        Logger logger1 = Logger.getLogger(\"com.wuhao\");\n        Logger logger2 = Logger.getLogger(\"com\");\n        System.out.println(logger);\n        System.out.println(logger1.equals(logger.getParent()));\n        System.out.println(logger2.equals(logger1.getParent()));\n        System.out.println(logger2.getParent());\n    }\n    \njava.util.logging.Logger@7fbe847c\ntrue\ntrue\njava.util.logging.LogManager$RootLogger@41975e01\n"],["body","\n"],["headingLink","handler"],["heading","Handler"],["body","\n"],["body","JUL提供多种日志处理器。"],["body","\n\n"],["body","StreamHandler：用于将格式化记录写入OutputStream的简单处理程序。"],["body","\n"],["body","ConsoleHandler：用于将格式化记录写入System.err的简单处理程序"],["body","\n"],["body","FileHandler：将格式化日志记录写入单个文件或一组旋转日志文件的处理程序。"],["body","\n"],["body","SocketHandler：将格式化日志记录写入远程TCP端口的处理程序。"],["body","\n"],["body","MemoryHandler：缓冲内存中日志记录的处理程序"],["body","\n\n"],["headingLink","formatter"],["heading","Formatter"],["body","\n"],["body","JUL提供了2种日志格式处理器"],["body","\n\n"],["body","SimpleFormatter：写简短的“人类可读”日志记录摘要。"],["body","\n"],["body","XMLFormatter：写入详细的XML结构信息。"],["body","\n\n"],["body","{% endraw %}"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/依赖管理.html"],["title","依赖管理.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Maven, Ivy, Gradle, and SBT Artifacts"],["body","\n"],["body","Log4j 2 分为 API 和实现（核心），其中 API 提供应用程序应编码到的接口。严格来说，Log4j 核心仅在运行时需要，而在编译时不需要。"],["body","\n"],["body","但是，下面我们将 Log4j 核心列为编译时依赖项，以改善自定义插件的启动时间，因为它提供了一个注释处理器，可生成元数据文件来缓存插件信息以及编译所需的代码以创建自定义插件。"],["body","\n"],["h1","Using Log4j in your Apache Maven build"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-api</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-core</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["h1","Using Log4j in your Apache Ivy build"],["body","\n"],["body","To build with Apache Ivy, add the dependencies listed below to your ivy.xml file."],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-api\" rev=\"2.14.1\" />\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-core\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["h1","Using Log4j in your Gradle build"],["body","\n"],["body","To build with Gradle, add the dependencies listed below to your build.gradle file."],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'\n  compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'\n}\n"],["body","\n"],["h1","Using Log4j in your SBT build"],["body","\n"],["body","To build with SBT, add the dependencies listed below to your build.sbt file."],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-api\" % \"2.14.1\"\nlibraryDependencies += \"org.apache.logging.log4j\" % \"log4j-core\" % \"2.14.1\"\n"],["body","\n"],["h1","Bill of Material"],["body","\n"],["body","To keep your Log4j module versions in sync with each other, a BOM pom.xml file is provided for your convenience. To use this with Maven, add the dependency listed below to your pom.xml file. When you specify the version identifier in this section, you don’t have to specify the version in your  section."],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencyManagement>\n  <dependencies>\n    <dependency>\n      <groupId>org.apache.logging.log4j</groupId>\n      <artifactId>log4j-bom</artifactId>\n      <version>2.14.1</version>\n      <scope>import</scope>\n      <type>pom</type>\n    </dependency>\n  </dependencies>\n</dependencyManagement>\n"],["body","\n"],["body","To use this with Gradle, an additional Gradle plugin is required for dependency management functionality."],["body","\n"],["body","build.gradle"],["body","\n"],["body","plugins {\n  id 'io.spring.dependency-management' version '1.0.1.RELEASE'\n}\n\ndependencyManagement {\n  imports {\n    mavenBom 'org.apache.logging.log4j:log4j-bom:2.14.1'\n  }\n}\n\ndependencies {\n  compile 'org.apache.logging.log4j:log4j-api'\n  compile 'org.apache.logging.log4j:log4j-core'\n  // etc.\n}\n"],["body","\n"],["h1","Optional Components"],["body","\n"],["body","可选组件"],["body","\n"],["headingLink","log4j-1x-api-bridge"],["heading","Log4j 1.x API Bridge"],["body","\n"],["body","If existing components use Log4j 1.x and you want to have this logging routed to Log4j 2, then remove any log4j 1.x dependencies and add the following."],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-1.2-api</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-1.2-api\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-1.2-api', version: '2.14.1'\n}\n"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-1.2-api\" % \"2.14.1\"\n"],["body","\n"],["headingLink","apache-commons-logging-bridge"],["heading","Apache Commons Logging Bridge"],["body","\n"],["body","If existing components use Apache Commons Logging 1.x and you want to have this logging routed to Log4j 2, then add the following but do not remove any Commons Logging 1.x dependencies."],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-jcl</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-jcl\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-jcl', version: '2.14.1'\n}\n"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-jcl\" % \"2.14.1\"\n"],["body","\n"],["headingLink","slf4j-bridge"],["heading","SLF4J Bridge"],["body","\n"],["body","If existing components use SLF4J and you want to have this logging routed to Log4j 2, then add the following but do not remove any SLF4J dependencies."],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-slf4j-impl</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-slf4j-impl\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.14.1'\n}\n"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-slf4j-impl\" % \"2.14.1\"\n"],["body","\n"],["headingLink","jul-adapter"],["heading","JUL Adapter"],["body","\n"],["body","If existing components use Java Util Logging and you want to have this logging routed to Log4j 2, then add the following."],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-jul</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-jul\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-jul', version: '2.14.1'\n}\n"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-jul\" % \"2.14.1\"\n"],["body","\n"],["headingLink","web-servlet-support"],["heading","Web Servlet Support"],["body","\n"],["body","为了正确支持和处理 Web 应用程序的 ClassLoader 环境和容器生命周期，需要一个额外的模块。"],["body","\n"],["body","该模块仅在运行时需要。"],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-web</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-web\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-web', version: '2.14.1'\n}\n"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-web\" % \"2.14.1\"\n"],["body","\n"],["headingLink","tag-library"],["heading","Tag Library"],["body","\n"],["body","Log4j 日志标记库创建了在不使用 Java 脚本的情况下在 JSP 中插入日志语句的功能。"],["body","\n"],["body","它使用标准的 Log4j 2 API 根据您的 Log4j 配置记录消息。"],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-taglib</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-taglib\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-taglib', version: '2.14.1'\n}\n"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-taglib\" % \"2.14.1\"\n"],["body","\n"],["headingLink","apache-flume-appender"],["heading","Apache Flume Appender"],["body","\n"],["body","The Flume Appender allows applications to send events to Flume Agents."],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-flume-ng</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-flume-ng\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-flume-ng', version: '2.14.1'\n}\n"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-flume-ng\" % \"2.14.1\"\n"],["body","\n"],["headingLink","log4j-to-slf4j-adapter"],["heading","Log4j to SLF4J Adapter"],["body","\n"],["body","Log4j 2 到 SLF4J 适配器允许将编码到 Log4j 2 API 的应用程序路由到 SLF4J。"],["body","\n"],["body","使用此适配器可能会导致一些性能损失，因为必须先格式化 Log4j 2 消息才能将它们传递给 SLF4J。"],["body","\n"],["body","使用时，SLF4J Bridge 不能在类路径上。"],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-to-slf4j</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-to-slf4j\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: '2.14.1'\n}\n"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-to-slf4j\" % \"2.14.1\"\n"],["body","\n"],["headingLink","couchdb"],["heading","CouchDB"],["body","\n"],["body","If your configuration uses the NoSQL CouchDB appender, then add the following."],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-couchdb</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-couchdb\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-couchdb', version: '2.14.1'\n}\n"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-couchdb\" % \"2.14.1\"\n"],["body","\n"],["headingLink","mongodb"],["heading","MongoDB"],["body","\n"],["body","If your configuration uses the NoSQL MongoDB appender, then add the following."],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-mongodb</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-mongodb\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-mongodb', version: '2.14.1'\n}\n"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-mongodb\" % \"2.14.1\"\n"],["body","\n"],["headingLink","cassandra"],["heading","Cassandra"],["body","\n"],["body","If your configuration uses the Cassandra appender, then add the following."],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-cassandra</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-cassandra\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-cassandra', version: '2.14.1'\n}\n"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-cassandra\" % \"2.14.1\"\n"],["body","\n"],["headingLink","io-streams"],["heading","IO Streams"],["body","\n"],["body","Log4j IO Streams allow applications to have data that is written to an OutputStream or a Writer be redirected to a Logger, or have data that is read from an InputStream or a Reader be wiretapped by a Logger. To use IO Streams, add the following."],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-iostreams</artifactId>\n    <version>2.14.1</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-iostreams\" rev=\"2.14.1\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-iostreams', version: '2.14.1'\n}\n"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" % \"log4j-iostreams\" % \"2.14.1\"\n"],["body","\n"],["headingLink","scala-api"],["heading","Scala API"],["body","\n"],["body","A convenient Scala wrapper for the Logger API. SBT users can add the following to their build.sbt:"],["body","\n"],["body","build.sbt"],["body","\n"],["body","libraryDependencies += \"org.apache.logging.log4j\" %% \"log4j-api-scala\" % \"11.0\"\n"],["body","\n"],["body","Maven, Ivy, and Gradle users need to add the Scala version to the artifact name."],["body","\n"],["body","Scala 2.12 users can use the following:"],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-api-scala_2.12</artifactId>\n    <version>11.0</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-api-scala_2.12\" rev=\"11.0\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-api-scala_2.12', version: '11.0'\n}\n"],["body","\n"],["body","Scala 2.11 users can use the following:"],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-api-scala_2.11</artifactId>\n    <version>11.0</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-api-scala_2.11\" rev=\"11.0\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-api-scala_2.11', version: '11.0'\n}\n"],["body","\n"],["body","Scala 2.10 users can use the following:"],["body","\n"],["body","pom.xml"],["body","\n"],["body","<dependencies>\n  <dependency>\n    <groupId>org.apache.logging.log4j</groupId>\n    <artifactId>log4j-api-scala_2.10</artifactId>\n    <version>11.0</version>\n  </dependency>\n</dependencies>\n"],["body","\n"],["body","ivy.xml"],["body","\n"],["body","<dependencies>\n  <dependency org=\"org.apache.logging.log4j\" name=\"log4j-api-scala_2.10\" rev=\"11.0\" />\n</dependencies>\n"],["body","\n"],["body","build.gradle"],["body","\n"],["body","dependencies {\n  compile group: 'org.apache.logging.log4j', name: 'log4j-api-scala_2.10', version: '11.0'\n}\n"],["body","\n"],["headingLink","snapshot-builds"],["heading","Snapshot builds"],["body","\n"],["body","您可以使用 Maven 存储库 https://repository.apache.org/snapshots 和当前的 SNAPSHOT 版本访问最新的开发快照。"],["body","\n"],["body","通常，无论 Log4j 的下一个实际版本是什么，master 分支都会使用下一个补丁版本作为其快照版本。"],["body","\n"],["body","例如，如果最新版本是 2.0，那么 master 将使用 2.0.1-SNAPSHOT 版本。"],["body","\n"],["body","始终按照源存储库页面中的说明在 master 分支中使用 pom.xml 进行验证。"],["body","\n"],["headingLink","maven"],["heading","Maven"],["body","\n"],["body","Maven users can add the following to their pom.xml to enable snapshots:"],["body","\n"],["body","<repositories>\n  <repository>\n    <id>apache.snapshots</id>\n    <name>Apache Snapshot Repository</name>\n    <url>https://repository.apache.org/snapshots</url>\n    <releases>\n      <enabled>false</enabled>\n    </releases>\n  </repository>\n</repositories>\n"],["body","\n"],["headingLink","gradle"],["heading","Gradle"],["body","\n"],["body","Gradle users can add the following to their build.gradle to enable snapshots:"],["body","\n"],["body","repositories {\n  mavenCentral()\n  maven { url 'https://repository.apache.org/snapshots' }\n}\n"],["body","\n"],["headingLink","sbt"],["heading","SBT"],["body","\n"],["body","SBT users can add the following to their build.sbt to enable snapshots:"],["body","\n"],["body","resolvers += \"Apache Snapshot Repository\" at \"https://repository.apache.org/snapshots\"\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/layouts/JSONTemplateLayouts.html"],["title","JSONTemplateLayouts.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JSON Template Layout"],["body","\n"],["body","JsonTemplateLayout 是一种可定制、高效且无垃圾的 JSON  emitting layout。它根据提供的 JSON 模板描述的结构对 LogEvents 进行编码。"],["body","\n"],["body","例如，给定以下 JSON 模板建模官方 Logstash JSONEventLayoutV1"],["body","\n"],["body","{\n  \"mdc\": {\n    \"$resolver\": \"mdc\"\n  },\n  \"exception\": {\n    \"exception_class\": {\n      \"$resolver\": \"exception\",\n      \"field\": \"className\"\n    },\n    \"exception_message\": {\n      \"$resolver\": \"exception\",\n      \"field\": \"message\",\n      \"stringified\": true\n    },\n    \"stacktrace\": {\n      \"$resolver\": \"exception\",\n      \"field\": \"stackTrace\",\n      \"stringified\": true\n    }\n  },\n  \"line_number\": {\n    \"$resolver\": \"source\",\n    \"field\": \"lineNumber\"\n  },\n  \"class\": {\n    \"$resolver\": \"source\",\n    \"field\": \"className\"\n  },\n  \"@version\": 1,\n  \"source_host\": \"${hostName}\",\n  \"message\": {\n    \"$resolver\": \"message\",\n    \"stringified\": true\n  },\n  \"thread_name\": {\n    \"$resolver\": \"thread\",\n    \"field\": \"name\"\n  },\n  \"@timestamp\": {\n    \"$resolver\": \"timestamp\"\n  },\n  \"level\": {\n    \"$resolver\": \"level\",\n    \"field\": \"name\"\n  },\n  \"file\": {\n    \"$resolver\": \"source\",\n    \"field\": \"fileName\"\n  },\n  \"method\": {\n    \"$resolver\": \"source\",\n    \"field\": \"methodName\"\n  },\n  \"logger_name\": {\n    \"$resolver\": \"logger\",\n    \"field\": \"name\"\n  }\n}\n"],["body","\n"],["body","in combination with the below Log4j configuration:"],["body","\n"],["body","<JsonTemplateLayout eventTemplateUri=\"classpath:LogstashJsonEventLayoutV1.json\"/>\n\n"],["body","\n"],["body","JSON Template Layout will render JSON documents as follows:"],["body","\n"],["body","{\n  \"exception\": {\n    \"exception_class\": \"java.lang.RuntimeException\",\n    \"exception_message\": \"test\",\n    \"stacktrace\": \"java.lang.RuntimeException: test\\n\\tat org.apache.logging.log4j.JsonTemplateLayoutDemo.main(JsonTemplateLayoutDemo.java:11)\\n\"\n  },\n  \"line_number\": 12,\n  \"class\": \"org.apache.logging.log4j.JsonTemplateLayoutDemo\",\n  \"@version\": 1,\n  \"source_host\": \"varlik\",\n  \"message\": \"Hello, error!\",\n  \"thread_name\": \"main\",\n  \"@timestamp\": \"2017-05-25T19:56:23.370+02:00\",\n  \"level\": \"ERROR\",\n  \"file\": \"JsonTemplateLayoutDemo.java\",\n  \"method\": \"main\",\n  \"logger_name\": \"org.apache.logging.log4j.JsonTemplateLayoutDemo\"\n}\n"],["body","\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/layouts/HTMLayouts.html"],["title","HTMLayouts.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","HTML Layout"],["body","\n"],["body","The HtmlLayout generates an HTML page and adds each LogEvent to a row in a table."],["body","\n"],["h1","HtmlLayout Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","charset"],["body","String"],["body","The character set to use when converting the HTML String to a byte array. The value must be a valid Charset. If not specified, this layout uses UTF-8."],["body","\n"],["body","contentType"],["body","String"],["body","The value to assign to the Content-Type header. The default is \"text/html\"."],["body","\n"],["body","locationInfo"],["body","boolean"],["body","If true, the filename and line number will be included in the HTML output. The default value is false.Generating location information is an expensive operation and may impact performance. Use with caution."],["body","\n"],["body","title"],["body","String"],["body","A String that will appear as the HTML title."],["body","\n"],["body","fontName"],["body","String"],["body","The font-family to use. The default is \"arial,sans-serif\"."],["body","\n"],["body","fontSize"],["body","String"],["body","The font-size to use. The default is \"small\"."],["body","\n"],["body","datePattern"],["body","String"],["body","The date format of the logging event. The default is \"JVM_ELAPSE_TIME\", which outputs the milliseconds since JVM started. For other valid values, refer to the date pattern of PatternLayout."],["body","\n"],["body","timezone"],["body","String"],["body","The timezone id of the logging event. If not specified, this layout uses the java.util.TimeZone.getDefault as default timezone. Like date pattern of PatternLayout, you can use timezone id from java.util.TimeZone.getTimeZone."],["body","\n\n\n"],["body","Configure as follows to use dataPattern and timezone in HtmlLayout:"],["body","\n"],["body","<Appenders>\n  <Console name=\"console\">\n    <HtmlLayout datePattern=\"ISO8601\" timezone=\"GMT+0\"/>\n  </Console>\n</Appenders>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/layouts/JSONLayout.html"],["title","JSONLayout.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JSON Layout"],["body","\n"],["body","将一系列 JSON 事件附加为序列化为字节的字符串。"],["body","\n"],["h1","Complete well-formed JSON vs. fragment JSON"],["body","\n"],["body","如果配置 complete=\"true\"，appender 会输出格式良好的 JSON 文档。默认情况下，使用 complete=\"false\" 时，您应该将输出作为外部文件包含在单独的文件中，以形成格式良好的 JSON 文档。"],["body","\n"],["body","如果 complete=\"false\"，appender 不会在文档的开头、“]”和结尾写入 JSON 开放数组字符“[”，也不会在记录之间写入逗号“,”。"],["body","\n"],["body","{\n  \"instant\" : {\n    \"epochSecond\" : 1493121664,\n    \"nanoOfSecond\" : 118000000\n  },\n  \"thread\" : \"main\",\n  \"level\" : \"INFO\",\n  \"loggerName\" : \"HelloWorld\",\n  \"marker\" : {\n    \"name\" : \"child\",\n    \"parents\" : [ {\n      \"name\" : \"parent\",\n      \"parents\" : [ {\n        \"name\" : \"grandparent\"\n      } ]\n    } ]\n  },\n  \"message\" : \"Hello, world!\",\n  \"thrown\" : {\n    \"commonElementCount\" : 0,\n    \"message\" : \"error message\",\n    \"name\" : \"java.lang.RuntimeException\",\n    \"extendedStackTrace\" : [ {\n      \"class\" : \"logtest.Main\",\n      \"method\" : \"main\",\n      \"file\" : \"Main.java\",\n      \"line\" : 29,\n      \"exact\" : true,\n      \"location\" : \"classes/\",\n      \"version\" : \"?\"\n    } ]\n  },\n  \"contextStack\" : [ \"one\", \"two\" ],\n  \"endOfBatch\" : false,\n  \"loggerFqcn\" : \"org.apache.logging.log4j.spi.AbstractLogger\",\n  \"contextMap\" : {\n    \"bar\" : \"BAR\",\n    \"foo\" : \"FOO\"\n  },\n  \"threadId\" : 1,\n  \"threadPriority\" : 5,\n  \"source\" : {\n    \"class\" : \"logtest.Main\",\n    \"method\" : \"main\",\n    \"file\" : \"Main.java\",\n    \"line\" : 29\n  }\n}\n"],["body","\n"],["body","如果 complete=\"false\"，appender 不会在文档的开头、“]”和结尾写入 JSON 开放数组字符“[”，也不会在记录之间写入逗号“,”。"],["body","\n"],["h1","Pretty vs. compact JSON"],["body","\n"],["body","compact 属性决定输出是否“pretty”。默认值为“false”，这意味着 appender 使用行尾字符和缩进行来格式化文本。如果 compact=\"true\"，则不使用行尾或缩进，这将导致输出占用更少的空间。当然，消息内容可能包含转义的行尾。"],["body","\n"],["h1","JsonLayout Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","charset"],["body","String"],["body","The character set to use when converting to a byte array. The value must be a valid Charset. If not specified, UTF-8 will be used."],["body","\n"],["body","compact"],["body","boolean"],["body","If true, the appender does not use end-of-lines and indentation. Defaults to false."],["body","\n"],["body","eventEol"],["body","boolean"],["body","If true, the appender appends an end-of-line after each record. Defaults to false. Use with eventEol=true and compact=true to get one record per line."],["body","\n"],["body","endOfLine"],["body","String"],["body","If set, overrides the default end-of-line string. E.g. set it to \"\\n\" and use with eventEol=true and compact=true to have one record per line separated by \"\\n\" instead of \"\\r\\n\". Defaults to null (i.e. not set)."],["body","\n"],["body","complete"],["body","boolean"],["body","If true, the appender includes the JSON header and footer, and comma between records. Defaults to false."],["body","\n"],["body","properties"],["body","boolean"],["body","If true, the appender includes the thread context map in the generated JSON. Defaults to false."],["body","\n"],["body","propertiesAsList"],["body","boolean"],["body","If true, the thread context map is included as a list of map entry objects, where each entry has a \"key\" attribute (whose value is the key) and a \"value\" attribute (whose value is the value). Defaults to false, in which case the thread context map is included as a simple map of key-value pairs."],["body","\n"],["body","locationInfo"],["body","boolean"],["body","If true, the appender includes the location information in the generated JSON. Defaults to false.Generating location information is an expensive operation and may impact performance. Use with caution."],["body","\n"],["body","includeStacktrace"],["body","boolean"],["body","If true, include full stacktrace of any logged Throwable (optional, default to true)."],["body","\n"],["body","includeTimeMillis"],["body","boolean"],["body","If true, the timeMillis attribute is included in the Json payload instead of the instant. timeMillis will contain the number of milliseconds since midnight, January 1, 1970 UTC."],["body","\n"],["body","stacktraceAsString"],["body","boolean"],["body","Whether to format the stacktrace as a string, and not a nested object (optional, defaults to false)."],["body","\n"],["body","includeNullDelimiter"],["body","boolean"],["body","Whether to include NULL byte as delimiter after each event (optional, default to false)."],["body","\n"],["body","objectMessageAsJsonObject"],["body","boolean"],["body","If true, ObjectMessage is serialized as JSON object to the \"message\" field of the output log. Defaults to false."],["body","\n\n\n"],["body","To include any custom field in the output, use following syntax:"],["body","\n"],["body","  <JsonLayout>    <KeyValuePair key=\"additionalField1\" value=\"constant value\"/>    <KeyValuePair key=\"additionalField2\" value=\"$${ctx:key}\"/>  </JsonLayout>\n"],["body","\n"],["body","Custom fields are always last, in the order they are declared. The values support lookups."],["body","\n"],["body","Additional runtime dependencies are required for using JsonLayout."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/layouts/CSVLayouts.html"],["title","CSVLayouts.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","CSV Layouts"],["body","\n"],["body","此布局创建逗号分隔值 (CSV) 记录并需要 Apache Commons CSV 1.4。"],["body","\n"],["body","可以通过两种方式使用 CSV 布局："],["body","\n\n"],["body","使用 CsvParameterLayout 记录事件参数以创建自定义数据库"],["body","\n"],["body","using CsvParameterLayout to log event parameters to create a custom database, usually to a logger and file appender uniquely configured for this purpose."],["body","\n"],["body","其次，使用 CsvLogEventLayout 记录事件以创建数据库，作为使用完整 DBMS 或使用支持 CSV 格式的 JDBC 驱动程序的替代方法。"],["body","\n\n"],["body","CsvParameterLayout 将事件的参数转换为 CSV 记录，忽略消息。要记录 CSV 记录，您可以使用常用的 Logger 方法 info()、debug() 等："],["body","\n"],["body","logger.info(\"Ignored\", value1, value2, value3);\n"],["body","\n"],["body","Which will create the CSV record:"],["body","\n"],["body","value1, value2, value3\n"],["body","\n"],["body","或者，您可以使用仅携带参数的 ObjectArrayMessage："],["body","\n"],["body","logger.info(new ObjectArrayMessage(value1, value2, value3));\n"],["body","\n"],["body","CsvParameterLayout and CsvLogEventLayout"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","format"],["body","String"],["body","One of the predefined formats: Default, Excel, MySQL, RFC4180, TDF. See CSVFormat.Predefined."],["body","\n"],["body","delimiter"],["body","Character"],["body","分隔符"],["body","\n"],["body","escape"],["body","Character"],["body","转义字符"],["body","\n"],["body","quote"],["body","Character"],["body","quoteChar"],["body","\n"],["body","quoteMode"],["body","String"],["body","Sets the output quote policy of the format to the specified value. One of: ALL, MINIMAL, NON_NUMERIC, NONE."],["body","\n"],["body","nullString"],["body","String"],["body","Writes null as the given nullString when writing records."],["body","\n"],["body","recordSeparator"],["body","String"],["body","Sets the record separator of the format to the specified String."],["body","\n"],["body","charset"],["body","Charset"],["body","The output Charset."],["body","\n"],["body","header"],["body","Sets the header to include when the stream is opened."],["body","Desc."],["body","\n"],["body","footer"],["body","Sets the footer to include when the stream is closed."],["body","Desc."],["body","\n\n\n"],["body","Logging as a CSV events looks like this:"],["body","\n"],["body","logger.debug(\"one={}, two={}, three={}\", 1, 2, 3);\n"],["body","\n"],["body","生成包含以下字段的 CSV 记录："],["body","\n\n"],["body","Time Nanos"],["body","\n"],["body","Time Millis"],["body","\n"],["body","Level"],["body","\n"],["body","Thread ID"],["body","\n"],["body","Thread Name"],["body","\n"],["body","Thread Priority"],["body","\n"],["body","Formatted Message"],["body","\n"],["body","Logger FQCN"],["body","\n"],["body","Logger Name"],["body","\n"],["body","Marker"],["body","\n"],["body","Thrown Proxy"],["body","\n"],["body","Source"],["body","\n"],["body","Context Map"],["body","\n"],["body","Context Stack"],["body","\n\n"],["body","0,1441617184044,DEBUG,main,\"one=1, two=2, three=3\",org.apache.logging.log4j.spi.AbstractLogger,,,,org.apache.logging.log4j.core.layout.CsvLogEventLayoutTest.testLayout(CsvLogEventLayoutTest.java:98),{},[]\n"],["body","\n"],["body","Additional runtime dependencies are required for using CSV layouts."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/layouts/README.html"],["title","layouts - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Layouts"],["body","\n\n"],["body","\n"],["body","Appender 使用 Layout 将 LogEvent 格式化为满足消费日志事件需求的形式"],["body","\n"],["body","\n"],["body","\n"],["body","在 Log4j 2 Layouts 中返回一个字节数组。这允许 Layout 的结果在更多类型的 Appender 中有用。但是，这意味着您需要 在大多数布局中配置 Charset ，以确保字节数组包含正确的值。"],["body","\n"],["body","\n"],["body","\n"],["body","使用字符集的布局的根类是 org.apache.logging.log4j.core.layout.AbstractStringLayout，其中默认值为 UTF-8。每个扩展 AbstractStringLayout 的布局都可以提供自己的默认值。请参阅下面的每个布局。"],["body","\n"],["body","\n\n"],["body","Log4j 2.4.1 中为 ISO-8859-1 和 US-ASCII 字符集添加了一个自定义字符编码器"],["body","\n"],["body","以将 Java 8 内置的一些性能改进带到 Log4j 以便在 Java 7 上使用"],["body","\n"],["body","对于仅记录日志的应用程序ISO-8859-1 字符，指定此字符集将显着提高性能。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/layouts/PatternLayout.html"],["title","PatternLayout.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Pattern Layout"],["body","\n"],["body","使用模式字符串可配置的灵活布局。此类的目标是格式化 LogEvent 并返回结果。结果的格式取决于转换模式。"],["body","\n"],["body","转换模式与 C 中 printf 函数的转换模式密切相关。转换模式由称为转换说明符的文字文本和格式控制表达式组成。"],["body","\n"],["body","请注意，任何文字文本，包括特殊字符，都可以包含在转换模式中。特殊字符包括\\t、\\n、\\r、\\f。使用 \\ 在输出中插入一个反斜杠。"],["body","\n"],["body","每个转换说明符都以百分号 (%) 开头，后跟可选的格式修饰符和转换字符。转换字符指定数据的类型，例如类别、优先级、日期、线程名称。格式修饰符控制诸如字段宽度、填充、左右对齐等内容。下面是一个简单的例子。"],["body","\n"],["body","让转换模式为 \"%-5p [%t]: %m%n\" 并假设 Log4j 环境设置为使用 PatternLayout。然后声明"],["body","\n"],["body","Logger logger = LogManager.getLogger(\"MyLogger\");\nlogger.debug(\"Message 1\");\nlogger.warn(\"Message 2\");\n\nDEBUG [main]: Message 1\nWARN  [main]: Message 2\n"],["body","\n"],["body","请注意，文本和转换说明符之间没有明确的分隔符。模式解析器在读取转换字符时知道它何时到达转换说明符的末尾。在上面的例子中，转换说明符 %-5p 意味着记录事件的优先级应该左对齐到五个字符的宽度。"],["body","\n"],["body","如果模式字符串不包含处理正在记录的 Throwable 的说明符，则模式的解析将表现为“%xEx”说明符已添加到字符串的末尾。要完全抑制 Throwable 的格式，只需在模式字符串中添加“%ex{0}”作为说明符。"],["body","\n"],["h1","PatternLayout Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","charset"],["body","String"],["body","The character set to use when converting the syslog String to a byte array. The String must be a valid Charset. If not specified, this layout uses the platform default character set."],["body","\n"],["body","pattern"],["body","String"],["body","A composite pattern string of one or more conversion patterns from the table below. Cannot be specified with a PatternSelector."],["body","\n"],["body","patternSelector"],["body","PatternSelector"],["body","一个组件，用于分析 LogEvent 中的信息并确定应使用哪种模式来格式化事件。 pattern 和 patternSelector 参数是互斥的"],["body","\n"],["body","replace"],["body","RegexReplacement"],["body","允许替换部分结果字符串。如果已配置，replace 元素必须指定要匹配的正则表达式和替换。这执行类似于 RegexReplacement 转换器的功能，但适用于整个消息，而转换器仅适用于其模式生成的字符串。"],["body","\n"],["body","alwaysWriteExceptions"],["body","boolean"],["body","If true (it is by default) exceptions are always written even if the pattern contains no exception conversions. This means that if you do not include a way to output exceptions in your pattern, the default exception formatter will be added to the end of the pattern. Setting this to false disables this behavior and allows you to exclude exceptions from your pattern output."],["body","\n"],["body","header"],["body","String"],["body","The optional header string to include at the top of each log file."],["body","\n"],["body","footer"],["body","String"],["body","The optional footer string to include at the bottom of each log file."],["body","\n"],["body","disableAnsi"],["body","boolean"],["body","If true (default is false), do not output ANSI escape codes."],["body","\n"],["body","noConsoleNoAnsi"],["body","boolean"],["body","If true (default is false) and System.console() is null, do not output ANSI escape codes."],["body","\n\n\n"],["h1","RegexReplacement Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","regex"],["body","String"],["body","A Java-compliant regular expression to match in the resulting string. See Pattern ."],["body","\n"],["body","replacement"],["body","String"],["body","The string to replace any matched sub-strings with."],["body","\n\n\n"],["h1","Pattern表格汇总"],["body","\n"],["body","转换符"],["body","说明"],["body","示例"],["body","\n"],["body","c{precision}"],["body","logger{precision}"],["body","日志名"],["body","%c{10}"],["body","\n"],["body","C{precision}"],["body","class{precision}"],["body","调用者的全限定类名"],["body","\n"],["body","d{pattern}"],["body","date{pattern}"],["body","日志事件的日期"],["body","%d{DEFAULT}、%d{HH:mm:ss,SSS}"],["body","\n"],["body","F"],["body","file"],["body","目标输出文件名"],["body","\n"],["body","K{key}"],["body","map{key}"],["body","MAP{key}"],["body","输出 MapMessage 的 entries"],["body","%K{clientNumber}"],["body","多key的输出格式为： {{key1,val1},{key2,val2}}"],["body","\n"],["body","L"],["body","line"],["body","调用者的行号"],["body","耗时操作"],["body","\n"],["body","m{nolookups}{ansi}"],["body","msg{nolookups}{ansi}"],["body","message{nolookups}{ansi}"],["body","输出程序提供的消息"],["body","两个选项：nolookups、ansi"],["body","\n"],["body","M"],["body","method"],["body","发出日志请求的方法名"],["body","\n"],["body","marker"],["body","marker全名包括parentName"],["body","\n"],["body","markerSimpleName"],["body","简单名（不包括parentName）"],["body","\n"],["body","maxLen"],["body","maxLength"],["body","限定日志的内容的最大最小"],["body","%maxLen{%m}{20}"],["body","\n"],["body","n"],["body","换行符"],["body","\n"],["body","N"],["body","nano"],["body","日志事件产生时间"],["body","\n"],["body","pid{[defaultValue]}"],["body","processId{[defaultValue]}"],["body","进程Id"],["body","\n"],["body","p|level"],["body","日志级别"],["body","\n"],["body","x"],["body","NDC"],["body","NDC"],["body","\n"],["body","X{key[,key2...]}"],["body","mdc{key[,key2...]}"],["body","MDC{key[,key2...]}"],["body","MDC"],["body","\n"],["body","u{\"RANDOM\"|\"TIME\"}"],["body","uuid"],["body","随机数"],["body","\n"],["body","T"],["body","tid"],["body","threadId"],["body","线程ID"],["body","\n"],["body","t"],["body","tn"],["body","thread"],["body","threadName"],["body","线程名"],["body","\n\n\n"],["h1","Patterns详解"],["body","\n"],["body","The conversions that are provided with Log4j are:"],["body","\n"],["headingLink","输出日志名称"],["heading","输出日志名称"],["body","\n"],["body","c{precision}\nlogger{precision}"],["body","\n"],["body","Conversion Pattern"],["body","Logger Name"],["body","Result"],["body","\n"],["body","%c{1}"],["body","org.apache.commons.Foo"],["body","Foo"],["body","\n"],["body","%c{2}"],["body","org.apache.commons.Foo"],["body","commons.Foo"],["body","\n"],["body","%c{10}"],["body","org.apache.commons.Foo"],["body","org.apache.commons.Foo"],["body","\n"],["body","%c{-1}"],["body","org.apache.commons.Foo"],["body","apache.commons.Foo"],["body","\n"],["body","%c{-2}"],["body","org.apache.commons.Foo"],["body","commons.Foo"],["body","\n"],["body","%c{-10}"],["body","org.apache.commons.Foo"],["body","org.apache.commons.Foo"],["body","\n"],["body","%c{1.}"],["body","org.apache.commons.Foo"],["body","o.a.c.Foo"],["body","\n"],["body","%c{1.1..}"],["body","org.apache.commons.test.Foo"],["body","o.a...Foo"],["body","\n"],["body","%c{.}"],["body","org.apache.commons.test.Foo"],["body","....Foo"],["body","\n\n\n"],["headingLink","输出调用类的全限定名"],["heading","输出调用类的全限定名"],["body","\n"],["body","C{precision}\nclass{precision}"],["body","\n"],["body","输出发出日志记录请求的调用者的完全限定类名。此转换说明符可以选择后跟精度说明符，其遵循与记录器名称转换器相同的规则。"],["body","\n"],["body","生成调用者的类名（位置信息）是一项代价高昂的操作，可能会影响性能。谨慎使用。"],["body","\n"],["headingLink","输出日志事件的日期"],["heading","输出日志事件的日期"],["body","\n"],["body","d{pattern}\ndate{pattern}"],["body","\n"],["body","输出日志事件的日期。日期转换说明符后面可以跟一组包含每个 SimpleDateFormat 的日期和时间模式字符串的大括号。"],["body","\n"],["body","Pattern"],["body","Example"],["body","\n"],["body","%d{DEFAULT}"],["body","2012-11-02 14:34:02,123"],["body","\n"],["body","%d{DEFAULT_MICROS}"],["body","2012-11-02 14:34:02,123456"],["body","\n"],["body","%d{DEFAULT_NANOS}"],["body","2012-11-02 14:34:02,123456789"],["body","\n"],["body","%d{ISO8601}"],["body","2012-11-02T14:34:02,781"],["body","\n"],["body","%d{ISO8601_BASIC}"],["body","20121102T143402,781"],["body","\n"],["body","%d{ISO8601_OFFSET_DATE_TIME_HH}"],["body","2012-11-02'T'14:34:02,781-07"],["body","\n"],["body","%d{ISO8601_OFFSET_DATE_TIME_HHMM}"],["body","2012-11-02'T'14:34:02,781-0700"],["body","\n"],["body","%d{ISO8601_OFFSET_DATE_TIME_HHCMM}"],["body","2012-11-02'T'14:34:02,781-07:00"],["body","\n"],["body","%d{ABSOLUTE}"],["body","14:34:02,781"],["body","\n"],["body","%d{ABSOLUTE_MICROS}"],["body","14:34:02,123456"],["body","\n"],["body","%d{ABSOLUTE_NANOS}"],["body","14:34:02,123456789"],["body","\n"],["body","%d{DATE}"],["body","02 Nov 2012 14:34:02,781"],["body","\n"],["body","%d{COMPACT}"],["body","20121102143402781"],["body","\n"],["body","%d{UNIX}"],["body","1351866842"],["body","\n"],["body","%d{UNIX_MILLIS}"],["body","1351866842781"],["body","\n\n\n"],["body","您还可以使用一组包含每个 java.util.TimeZone.getTimeZone 的时区 ID 的大括号。如果未给出日期格式说明符，则使用 DEFAULT 格式。"],["body","\n"],["headingLink","预定义格式说明符"],["heading","预定义格式说明符"],["body","\n"],["body","Pattern"],["body","Example"],["body","\n"],["body","%d{HH:mm:ss,SSS}"],["body","14:34:02,123"],["body","\n"],["body","%d{HH:mm:ss,nnnn} to %d{HH:mm:ss,nnnnnnnnn}"],["body","14:34:02,1234 to 14:34:02,123456789"],["body","\n"],["body","%d{dd MMM yyyy HH:mm:ss,SSS}"],["body","02 Nov 2012 14:34:02,123"],["body","\n"],["body","%d{dd MMM yyyy HH:mm:ss,nnnn} to %d{dd MMM yyyy HH:mm:ss,nnnnnnnnn}"],["body","02 Nov 2012 14:34:02,1234 to 02 Nov 2012 14:34:02,123456789"],["body","\n"],["body","%d{HH:mm:ss}{GMT+0}"],["body","18:34:02"],["body","\n\n\n"],["body","%d{UNIX} 以秒为单位输出 UNIX 时间。"],["body","\n"],["body","%d{UNIX_MILLIS} 以毫秒为单位输出 UNIX 时间。 "],["body","\n"],["body","UNIX 时间是当前时间与 UTC 时间 1970 年 1 月 1 日午夜之间的差异，UNIX 以秒为单位，UNIX_MILLIS 以毫秒为单位。虽然时间单位是毫秒，但粒度取决于操作系统 (Windows)。这是输出事件时间的有效方法，因为只发生从 long 到 String 的转换，不涉及日期格式。"],["body","\n"],["body","在 Java 9 上运行时，Log4j 2.11 添加了对比毫秒更精确的时间戳的有限支持。请注意，并非所有 DateTimeFormatter 格式都受支持。只有上表中提到的格式的时间戳可以使用“nano-of-second”模式字母 n 而不是“fraction-of-second”模式字母 S。"],["body","\n"],["headingLink","编码和转义适合以特定标记语言输出的特殊字符"],["heading","编码和转义适合以特定标记语言输出的特殊字符。"],["body","\n"],["body","enc{pattern}{[HTML|XML|JSON|CRLF]}\nencode{pattern}{[HTML|XML|JSON|CRLF]}"],["body","\n"],["body","默认情况下，如果只指定了一个选项，则此编码为 HTML。"],["body","\n"],["body","第二个选项用于指定应使用哪种编码格式。该转换器对于对用户提供的数据进行编码特别有用，这样输出数据就不会被错误地或不安全地写入。"],["body","\n"],["body","典型的用法是对消息 %enc{%m} 进行编码，但用户输入也可能来自其他位置，例如 MDC %enc{%mdc{key}}"],["body","\n"],["body","使用HTML编码格式，替换如下字符："],["body","\n"],["body","Character"],["body","Replacement"],["body","\n"],["body","'\\r', '\\n'"],["body","Converted into escaped strings \"\\r\" and \"\\n\" respectively"],["body","\n"],["body","&, <, >, \", ', /"],["body","Replaced with the corresponding HTML entity"],["body","\n\n\n"],["body","使用 XML 编码格式，这遵循 XML 规范指定的转义规则："],["body","\n"],["body","Character"],["body","Replacement"],["body","\n"],["body","&, <, >, \", '"],["body","Replaced with the corresponding XML entity"],["body","\n\n\n"],["body","使用 JSON 编码格式，这遵循 RFC 4627 第 2.5 节指定的转义规则："],["body","\n"],["body","Character"],["body","Replacement"],["body","\n"],["body","U+0000 - U+001F"],["body","\\u0000 - \\u001F"],["body","\n"],["body","Any other control characters"],["body","Encoded into its \\uABCD equivalent escaped code point"],["body","\n"],["body","\""],["body","\""],["body","\n"],["body","\\"],["body","\\"],["body","\n\n\n"],["body","例如，模式 {\"message\": \"%enc{%m}{JSON}\"} 可用于输出包含作为字符串值的日志消息的有效 JSON 文档。使用CRLF编码格式，替换如下字符："],["body","\n"],["body","Character"],["body","Replacement"],["body","\n"],["body","'\\r', '\\n'"],["body","Converted into escaped strings \"\\r\" and \"\\n\" respectively"],["body","\n\n\n"],["headingLink","等值替换"],["heading","等值替换"],["body","\n"],["body","equals{pattern}{test}{substitution}\nequalsIgnoreCase{pattern}{test}{substitution}"],["body","\n"],["body","将字符串中出现的 'test' 替换为由模式评估产生的字符串中的替换 'substitution'。"],["body","\n"],["body","例如，\"%equals{[%marker]}{[]}{}\" 将用空字符串替换由没有标记的事件产生的 '[]' 字符串。模式可以是任意复杂的，特别是可以包含多个转换关键字。"],["body","\n"],["headingLink","throwable"],["heading","Throwable"],["body","\n"],["body","ex|exception|throwable\n{\n[ \"none\"\n| \"full\"\n| depth\n| \"short\"\n| \"short.className\"\n| \"short.fileName\"\n| \"short.lineNumber\"\n| \"short.methodName\"\n| \"short.message\"\n| \"short.localizedMessage\"]\n}\n{filters(package,package,...)}\n{suffix(pattern)}\n{separator(separator)}"],["body","\n"],["body","默认情况下，这将输出完整的跟踪，就像通常通过调用 Throwable.printStackTrace() 找到的那样。"],["body","\n"],["body","您可以使用 %throwable{option} 形式的选项跟随 throwable 转换词。"],["body","\n"],["body","%throwable{short} outputs the first line of the Throwable."],["body","\n"],["body","%throwable{short.className} outputs the name of the class where the exception occurred."],["body","\n"],["body","%throwable{short.methodName} outputs the method name where the exception occurred."],["body","\n"],["body","%throwable{short.fileName} outputs the name of the class where the exception occurred."],["body","\n"],["body","%throwable{short.lineNumber} outputs the line number where the exception occurred."],["body","\n"],["body","%throwable{short.message} outputs the message."],["body","\n"],["body","%throwable{short.localizedMessage} outputs the localized message."],["body","\n"],["body","%throwable{n} outputs the first n lines of the stack trace."],["body","\n"],["body","%throwable{none} or %throwable{0} suppresses output of the exception."],["body","\n"],["body","使用 {filters(packages)} ，其中包是包名称列表，以抑制来自堆栈跟踪的匹配堆栈帧。使用 {suffix(pattern)} 在每个堆栈帧的末尾添加模式的输出。使用 {separator(...)} 作为行尾字符串。例如：分隔符(|)。默认值是 line.separator 系统属性，它依赖于操作系统。"],["body","\n"],["headingLink","输出发出日志记录请求的文件名"],["heading","输出发出日志记录请求的文件名。"],["body","\n"],["body","F\nfile"],["body","\n"],["body","生成文件信息（位置信息）是一项昂贵的操作，可能会影响性能。谨慎使用。"],["body","\n"],["headingLink","根据当前事件的日志记录级别将-ansi-颜色添加到封闭模式的结果中"],["heading","根据当前事件的日志记录级别将 ANSI 颜色添加到封闭模式的结果中。"],["body","\n"],["body","The default colors for each level are:"],["body","\n"],["body","Level"],["body","ANSI color"],["body","\n"],["body","FATAL"],["body","Bright red"],["body","\n"],["body","ERROR"],["body","Bright red"],["body","\n"],["body","WARN"],["body","Yellow"],["body","\n"],["body","INFO"],["body","Green"],["body","\n"],["body","DEBUG"],["body","Cyan"],["body","\n"],["body","TRACE"],["body","Black (looks dark grey)"],["body","\n\n\n"],["body","The color and attribute names and are standard, but the exact shade, hue, or value."],["body","\n"],["body","Intensity Code"],["body","0"],["body","1"],["body","2"],["body","3"],["body","4"],["body","5"],["body","6"],["body","7"],["body","\n"],["body","Normal"],["body","Black"],["body","Red"],["body","Green"],["body","Yellow"],["body","Blue"],["body","Magenta"],["body","Cyan"],["body","White"],["body","\n"],["body","Bright"],["body","Black"],["body","Red"],["body","Green"],["body","Yellow"],["body","Blue"],["body","Magenta"],["body","Cyan"],["body","White"],["body","\n\n\n"],["body","You can use the default colors with:"],["body","\n"],["body","%highlight{%d [%t] %-5level: %msg%n%throwable}\n"],["body","\n"],["body","You can override the default colors in the optional {style} option. For example:"],["body","\n"],["body","%highlight{%d [%t] %-5level: %msg%n%throwable}{FATAL=white, ERROR=red, WARN=blue, INFO=black, DEBUG=green, TRACE=blue}\n"],["body","\n"],["body","You can highlight only the a portion of the log event:"],["body","\n"],["body","%d [%t] %highlight{%-5level: %msg%n%throwable}\n"],["body","\n"],["body","You can style one part of the message and highlight the rest the log event:"],["body","\n"],["body","%style{%d [%t]}{black} %highlight{%-5level: %msg%n%throwable}\n"],["body","\n"],["body","You can also use the STYLE key to use a predefined group of colors:"],["body","\n"],["body","%highlight{%d [%t] %-5level: %msg%n%throwable}{STYLE=Logback}\n"],["body","\n"],["body","The STYLE value can be one of:"],["body","\n"],["body","Style"],["body","Description"],["body","\n"],["body","Default"],["body","See above"],["body","\n"],["body","Logback"],["body","logback desciption"],["body","\n\n\n"],["body","logback desciption"],["body","\n"],["body","Level"],["body","ANSI color"],["body","\n"],["body","FATAL"],["body","Blinking bright red"],["body","\n"],["body","ERROR"],["body","Bright red"],["body","\n"],["body","WARN"],["body","Red"],["body","\n"],["body","INFO"],["body","Blue"],["body","\n"],["body","DEBUG"],["body","Normal"],["body","\n"],["body","TRACE"],["body","Normal"],["body","\n\n\n"],["headingLink","outputs-the-entries-in-a-mapmessage"],["heading","Outputs the entries in a MapMessage"],["body","\n"],["body","K{key}\nmap{key}\nMAP{key}"],["body","\n"],["body","如果没有指定额外的子选项，则使用格式 {{key1,val1},{key2,val2}} 输出 Map 键值对集的全部内容"],["body","\n"],["headingLink","location-information"],["heading","location information"],["body","\n"],["body","l\nlocation"],["body","\n"],["body","位置信息取决于 JVM 实现，但通常由调用方法的完全限定名称和调用者源文件名和括号之间的行号组成。"],["body","\n"],["body","Generating location information is an expensive operation and may impact performance. Use with caution."],["body","\n"],["headingLink","line-number"],["heading","line number"],["body","\n"],["body","L\nline"],["body","\n"],["body","Outputs the line number from where the logging request was issued."],["body","\n"],["body","Generating line number information (location information) is an expensive operation and may impact performance. Use with caution."],["body","\n"],["headingLink","application-supplied-message"],["heading","application supplied message"],["body","\n"],["body","m{nolookups}{ansi}\nmsg{nolookups}{ansi}\nmessage{nolookups}{ansi}"],["body","\n"],["body","Add {ansi} to render messages with ANSI escape codes (requires JAnsi, see configuration.)"],["body","\n"],["body","The default syntax for embedded ANSI codes is:"],["body","\n"],["body","@|code(,code)* text|@\n"],["body","\n"],["body","For example, to render the message \"Hello\" in green, use:"],["body","\n"],["body","@|green Hello|@\n"],["body","\n"],["body","To render the message \"Hello\" in bold and red, use:"],["body","\n"],["body","@|bold,red Warning!|@\n"],["body","\n"],["body","You can also define custom style names in the configuration with the syntax:"],["body","\n"],["body","%message{ansi}{StyleName=value(,value)*( StyleName=value(,value)*)*}%n\n"],["body","\n"],["body","For example:"],["body","\n"],["body","%message{ansi}{WarningStyle=red,bold KeyStyle=white ValueStyle=blue}%n\n"],["body","\n"],["body","The call site can look like this:"],["body","\n"],["body","logger.info(\"@|KeyStyle {}|@ = @|ValueStyle {}|@\", entry.getKey(), entry.getValue());\n"],["body","\n"],["body","Use {nolookups} to log messages like \"${date:YYYY-MM-dd}\" without using any lookups. Normally calling logger.info(\"Try ${date:YYYY-MM-dd}\") would replace the date template ${date:YYYY-MM-dd} with an actual date. Using nolookups disables this feature and logs the message string untouched."],["body","\n"],["headingLink","调用方法名"],["heading","调用方法名"],["body","\n"],["body","M\nmethod"],["body","\n"],["body","生成调用者的方法名称（位置信息）是一项代价高昂的操作，可能会影响性能。谨慎使用。"],["body","\n"],["headingLink","marker"],["heading","marker"],["body","\n"],["body","The full name of the marker, including parents, if one is present."],["body","\n"],["headingLink","markersimplename"],["heading","markerSimpleName"],["body","\n"],["body","The simple name of the marker (not including parents), if one is present"],["body","\n"],["headingLink","限制输出内容"],["heading","限制输出内容"],["body","\n"],["body","maxLen\nmaxLength"],["body","\n"],["body","如果长度大于 20，则输出将包含尾随省略号。如果提供的长度无效，则使用默认值 100。示例语法：%maxLen{%p: %c{1} - %m%notEmpty{ =>%ex{short}}}{160} 将被限制为 160 个字符，并带有尾随省略号。"],["body","\n"],["body","另一个示例： %maxLen{%m}{20} 将被限制为 20 个字符并且没有尾随省略号。"],["body","\n"],["headingLink","平台无关的换行符"],["heading","平台无关的换行符"],["body","\n"],["body","n"],["body","\n"],["headingLink","log-event-cratedtime"],["heading","log event cratedTime"],["body","\n"],["body","N\nnano"],["body","\n"],["body","Outputs the result of System.nanoTime() at the time the log event was created."],["body","\n"],["headingLink","进程id"],["heading","进程ID"],["body","\n"],["body","pid{[defaultValue]}\nprocessId{[defaultValue]}"],["body","\n"],["body","Outputs the process ID if supported by the underlying platform. An optional default value may be specified to be shown if the platform does not support process IDs."],["body","\n"],["headingLink","变量存在则打印"],["heading","变量存在则打印"],["body","\n"],["body","Outputs the result of evaluating the pattern if and only if all variables in the pattern are not empty."],["body","\n"],["body","%notEmpty{[%marker]}\n"],["body","\n"],["headingLink","日志级别"],["heading","日志级别"],["body","\n"],["body","p|level{level=label, level=label, ...} "],["body","\n"],["body","p|level{length=n} "],["body","\n"],["body","p|level{lowerCase=true|false}"],["body","\n"],["body","输出日志事件的级别。您以“级别=值，级别=值”的形式提供级别名称映射，其中级别是级别的名称，值是应显示的值而不是级别的名称。"],["body","\n"],["body","%level{WARN=Warning, DEBUG=Debug, ERROR=Error, TRACE=Trace, INFO=Info}\n\n"],["body","\n"],["body","Alternatively, for the compact-minded:"],["body","\n"],["body","%level{WARN=W, DEBUG=D, ERROR=E, TRACE=T, INFO=I}\n"],["body","\n"],["body","更简洁地说，对于与上面相同的结果，您可以定义级别标签的长度："],["body","\n"],["body","%level{length=1}\n"],["body","\n"],["body","如果长度大于级别名称长度，则布局使用普通级别名称。"],["body","\n"],["body","You can combine the two kinds of options:"],["body","\n"],["body","%level{ERROR=Error, length=2}\n"],["body","\n"],["body","这将为您提供错误级别名称和长度为 2 的所有其他级别名称。"],["body","\n"],["body","您可以输出小写级别的名称（默认为大写）："],["body","\n"],["body","%level{lowerCase=true}\n"],["body","\n"],["headingLink","从jvm启动时--日志事件的创建时间"],["heading","从JVM启动时  日志事件的创建时间"],["body","\n"],["body","r\nrelative"],["body","\n"],["body","Outputs the number of milliseconds elapsed since the JVM was started until the creation of the logging event."],["body","\n"],["headingLink","内容替换"],["heading","内容替换"],["body","\n"],["body","replace{pattern}{regex}{substitution}\t"],["body","\n"],["body","用它在模式评估产生的字符串中的替换 'substitution' 替换正则表达式 'regex' 的出现。例如，“%replace{%msg}{\\s}{}”将删除事件消息中包含的所有空格"],["body","\n"],["body","模式可以是任意复杂的，特别是可以包含多个转换关键字。例如，“%replace{%logger %msg}{.}{/}”将用正斜杠替换记录器或事件消息中的所有点。"],["body","\n"],["headingLink","rthrowable"],["heading","RThrowable"],["body","\n"],["body","rEx|rException|rThrowable\n{\n[\"none\" | \"short\" | \"full\" | depth]\n[,filters(package,package,...)]\n[,separator(separator)]\n}\n{ansi(\nKey=Value,Value,...\nKey=Value,Value,...\n...)\n}\n{suffix(pattern)}"],["body","\n"],["body","同 %throwable 转换字"],["body","\n"],["body","但是堆栈跟踪从抛出的第一个异常开始打印，然后是每个后续的包装异常"],["body","\n"],["body","%rEx{short} "],["body","\n"],["body","输出异常栈的第一行"],["body","\n"],["body","%rEx{n}"],["body","\n"],["body","输出栈的前几行"],["body","\n"],["body","%rEx{none} or %rEx{0} "],["body","\n"],["body","禁用异常打印"],["body","\n"],["body","抑制栈帧"],["body","\n"],["body","filters(packages) "],["body","\n"],["body","packages 是一个包名称列表，用于抑制来自堆栈跟踪的匹配堆栈帧。"],["body","\n"],["body","separator(separator)"],["body","\n"],["body","使用分隔符字符串来分隔堆栈跟踪的行。例如：分隔符(|)。默认值是 line.separator 系统属性，它依赖于操作系统。"],["body","\n"],["body","rEx{suffix(pattern) "],["body","\n"],["body","to add the output of pattern to the output only when there is a throwable to print."],["body","\n"],["headingLink","日志事件自增序列"],["heading","日志事件自增序列"],["body","\n"],["body","包括将在每个事件中递增的序列号。计数器是一个静态变量，因此仅在共享相同转换器类对象的应用程序中是唯一的。"],["body","\n"],["headingLink","线程id"],["heading","线程ID"],["body","\n"],["body","T\ntid\nthreadId"],["body","\n"],["body","Outputs the ID of the thread that generated the logging event."],["body","\n"],["headingLink","线程名"],["heading","线程名"],["body","\n"],["body","t\ntn\nthread\nthreadName"],["body","\n"],["headingLink","线程优先级"],["heading","线程优先级"],["body","\n"],["body","tp\nthreadPriority"],["body","\n"],["headingLink","logger的全限定类名"],["heading","logger的全限定类名"],["body","\n"],["body","fqcn"],["body","\n"],["body","Outputs the fully qualified class name of the logger."],["body","\n"],["headingLink","endofbatch"],["heading","EndOfBatch"],["body","\n"],["body","Outputs the EndOfBatch status of the logging event, as \"true\" or \"false\"."],["body","\n"],["headingLink","ndc"],["heading","NDC"],["body","\n"],["body","x\nNDC"],["body","\n"],["body","Outputs the Thread Context Stack (also known as the Nested Diagnostic Context or NDC) associated with the thread that generated the logging event."],["body","\n"],["headingLink","mdc"],["heading","MDC"],["body","\n"],["body","X{key[,key2...]}\nmdc{key[,key2...]}\nMDC{key[,key2...]}"],["body","\n"],["body","Outputs the Thread Context Map (also known as the Mapped Diagnostic Context or MDC) associated with the thread that generated the logging event. "],["body","\n"],["body","%X{clientNumber}"],["body","\n"],["body","%X{name, number} using the format {name=val1, number=val2}"],["body","\n"],["body","如果未指定子选项，则使用格式 {key1=val1, key2=val2} 输出 MDC 键值对集的全部内容。键/值对将按排序顺序打印。"],["body","\n"],["body","See the ThreadContext class for more details."],["body","\n"],["headingLink","随机值"],["heading","随机值"],["body","\n"],["body","u{\"RANDOM\" | \"TIME\"}\nuuid"],["body","\n"],["body","包括随机或基于时间的 UUID。"],["body","\n"],["body","The time-based UUID is a Type 1 UUID 每毫秒最多可以生成 10,000 个唯一 ID，"],["body","\n"],["body","将使用每个主机的 MAC 地址，"],["body","\n"],["body","并尝试确保同一主机上多个 JVM 和/或类加载器的唯一性"],["body","\n"],["body","到 16,384 之间的随机数将与 UUID 生成器类的每个实例相关联，并包含在生成的每个基于时间的 UUID 中。"],["body","\n"],["body","由于基于时间的 UUID 包含 MAC 地址和时间戳，因此应谨慎使用，因为它们可能导致安全漏洞。"],["body","\n"],["h1","格式修饰符"],["body","\n"],["body","默认情况下，相关信息按原样输出。但是，借助格式修饰符，可以更改最小字段宽度、最大字段宽度和对齐方式。"],["body","\n"],["body","可选的格式修饰符位于百分号和转换字符之间。"],["body","\n"],["body","第一个可选的格式修饰符是左对齐标志，它只是减号 (-) 字符"],["body","\n"],["body","然后是可选的 minimum field width 修饰符"],["body","\n"],["body","这是一个十进制常量，表示要输出的最小字符数。"],["body","\n"],["body","如果数据项为较少的字符，则在左侧或右侧进行填充，直到达到最小宽度"],["body","\n"],["body","默认是在左侧填充（右对齐），但您可以使用左对齐标志指定右填充。"],["body","\n"],["body","填充字符是空格"],["body","\n"],["body","如果数据项大于最小字段宽度，则扩展字段以容纳数据该值永远不会被截断"],["body","\n"],["body","要使用零作为填充字符，请在 minimum field width 前面加上零。"],["body","\n"],["body","可以使用 maximum field width 修饰符更改此行为，该修饰符由句点后跟十进制常量指定。"],["body","\n"],["body","如果数据项比最大字段长，则从数据项的开头而不是结尾删除多余的字符。"],["body","\n"],["body","例如，最大字段宽度为 8，数据项长度为 10 个字符，则删除数据项的前两个字符。"],["body","\n"],["body","此行为不同于 C 中的 printf 函数，其中从末尾开始截断。"],["body","\n"],["body","通过在句点后附加一个减号，可以从末尾截断。"],["body","\n"],["body","在这种情况下，如果最大字段宽度为 8 且数据项长度为 10 个字符，则删除数据项的最后两个字符。"],["body","\n"],["body","以下是类别转换说明符的各种格式修饰符示例。"],["body","\n"],["body","Pattern Converters"],["body","\n"],["body","Format modifier"],["body","left justify"],["body","minimum width"],["body","maximum width"],["body","comment"],["body","\n"],["body","%20c"],["body","false"],["body","20"],["body","none"],["body","Left pad with spaces if the category name is less than 20 characters long."],["body","\n"],["body","%-20c"],["body","true"],["body","20"],["body","none"],["body","Right pad with spaces if the category name is less than 20 characters long."],["body","\n"],["body","%.30c"],["body","NA"],["body","none"],["body","30"],["body","Truncate from the beginning if the category name is longer than 30 characters."],["body","\n"],["body","%20.30c"],["body","false"],["body","20"],["body","30"],["body","Left pad with spaces if the category name is shorter than 20 characters. However, if category name is longer than 30 characters, then truncate from the beginning."],["body","\n"],["body","%-20.30c"],["body","true"],["body","20"],["body","30"],["body","Right pad with spaces if the category name is shorter than 20 characters. However, if category name is longer than 30 characters, then truncate from the beginning."],["body","\n"],["body","%-20.-30c"],["body","true"],["body","20"],["body","30"],["body","Right pad with spaces if the category name is shorter than 20 characters. However, if category name is longer than 30 characters, then truncate from the end."],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/log4j2-web.html"],["title","log4j2-web.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Using Log4j 2 in Web Applications"],["body","\n"],["body","在 Java EE Web 应用程序中使用 Log4j 或任何其他日志记录框架时，您必须特别小心。"],["body","\n"],["body","当容器关闭或取消部署 Web 应用程序时，正确清理日志资源（关闭数据库连接、关闭文件等）非常重要。"],["body","\n"],["body","由于 Web 应用程序中类加载器的性质，Log4j 资源无法通过正常方式清理。"],["body","\n"],["body","当 Web 应用程序部署时 Log4j 必须“启动”，当 Web 应用程序取消部署时必须“关闭”。"],["body","\n"],["body","它的工作方式取决于您的应用程序是 Servlet 3.0 或更新版本还是 Servlet 2.5 Web 应用程序。"],["body","\n"],["body","无论哪种情况，您都需要将 log4j-web 模块添加到您的部署中，如 Maven、Ivy 和 Gradle Artifacts 手册页中所述。"],["body","\n"],["body","为避免出现问题，当包含 log4j-web jar 时，将自动禁用 Log4j 关闭挂钩。"],["body","\n"],["h1","Configuration"],["body","\n"],["body","Log4j 允许 在 web.xml 中 使用 log4jConfiguration  context parameter 指定配置文件。 "],["body","\n"],["body","Log4j 将通过以下方式搜索配置文件"],["body","\n\n"],["body","\n"],["body","如果提供了位置，它将作为 servlet 上下文资源进行搜索。例如，如果 log4jConfiguration 包含“logging.xml”，那么 Log4j 将在 Web 应用程序的根目录中查找具有该名称的文件。"],["body","\n"],["body","\n"],["body","\n"],["body","如果没有定义位置，Log4j 将在 WEB-INF 目录中搜索以“log4j2”开头的文件。如果找到多个文件，并且存在以“log4j2-name”开头的文件（其中 name 是 Web 应用程序的名称），则将使用该文件。否则将使用第一个文件。"],["body","\n"],["body","\n"],["body","\n"],["body","使用类路径和文件 URL 的“正常”搜索序列将用于定位配置文件。"],["body","\n"],["body","\n"],["body","\n"],["body","使用类路径和文件 URL 的“正常”搜索序列将用于定位配置文件。"],["body","\n"],["body","\n\n"],["h1","Servlet 3.0 and Newer Web Applications"],["body","\n"],["body","Log4j 2 在 Servlet 3.0 和更新的 Web 应用程序中“正常工作”。"],["body","\n"],["body","它能够在应用程序部署时自动启动并在应用程序取消部署时自动关闭。"],["body","\n"],["body","由于 ServletContainerInitializer API 添加到 Servlet 3.0，相关的 Filter 和 ServletContextListener 类可以在 web 应用程序启动时动态注册。"],["body","\n"],["body","重要的提示！"],["body","\n"],["body","出于性能原因，容器通常会忽略某些已知不包含 TLD 或 ServletContainerInitializers 的 JAR，并且不扫描它们以查找 web 片段和初始化程序。"],["body","\n"],["body","重要的是，Tomcat 7 <7.0.43 会忽略所有名为 log4j*.jar 的 JAR 文件，这会阻止此功能工作。"],["body","\n"],["body","这已在 Tomcat 7.0.43、Tomcat 8 及更高版本中修复。"],["body","\n"],["body","Log4j 2 Web JAR 文件是一个 Web 片段，配置为在应用程序中的任何其他 Web 片段之前排序。"],["body","\n"],["body","它包含一个容器自动发现和初始化的 ServletContainerInitializer (Log4jServletContainerInitializer)。"],["body","\n"],["body","这会将 Log4jServletContextListener 和 Log4jServletFilter 添加到 ServletContext。"],["body","\n"],["body","这些类正确初始化和取消初始化 Log4j 配置。"],["body","\n"],["body","对于某些用户来说，自动启动 Log4j 是有问题的或不可取的。"],["body","\n"],["body","您可以使用 isLog4jAutoInitializationDisabled 上下文参数轻松禁用此功能。"],["body","\n"],["body","只需使用值“true”将其添加到您的部署描述符中即可禁用自动初始化。"],["body","\n"],["body","您必须在 web.xml 中定义上下文参数。"],["body","\n"],["body","如果以编程方式设置，Log4j 检测设置为时已晚。"],["body","\n"],["body","  <context-param>\n        <param-name>isLog4jAutoInitializationDisabled</param-name>\n        <param-value>true</param-value>\n    </context-param>\n"],["body","\n"],["body","禁用自动初始化后，您必须像初始化 Servlet 2.5 Web 应用程序一样初始化 Log4j。"],["body","\n"],["body","您必须以这种初始化发生在任何其他应用程序代码（例如 Spring Framework 启动代码）执行之前的方式执行此操作。"],["body","\n"],["body","您可以使用 log4jContextName、log4jConfiguration 和/或 isLog4jContextSelectorNamed 上下文参数自定义侦听器和过滤器的行为。"],["body","\n"],["body","在下面的上下文参数部分阅读更多相关信息。"],["body","\n"],["body","除非您使用 isLog4jAutoInitializationDisabled 禁用自动初始化，否则您不得在部署描述符 (web.xml) 或 Servlet 3.0 或更高版本应用程序中的另一个初始化程序或侦听器中手动配置 Log4jServletContextListener 或 Log4jServletFilter。"],["body","\n"],["body","这样做将导致启动错误和未指定的错误行为。"],["body","\n"],["h1","Servlet 2.5 Web Applications"],["body","\n"],["body","Servlet 2.5 Web 应用程序是版本属性值为“2.5”的任何 。 "],["body","\n"],["body","version 属性是唯一重要的东西；"],["body","\n"],["body","即使 Web 应用程序运行在 Servlet 3.0 或更新的容器中，如果版本属性为“2.5”，它也是 Servlet 2.5 Web 应用程序。"],["body","\n"],["body","请注意，Log4j 2 不支持 Servlet 2.4 和更旧的 Web 应用程序。"],["body","\n"],["body","如果您在 Servlet 2.5 Web 应用程序中使用 Log4j，或者您已使用 isLog4jAutoInitializationDisabled 上下文参数禁用自动初始化，则必须在部署描述符中或以编程方式配置 Log4jServletContextListener 和 Log4jServletFilter。"],["body","\n"],["body","过滤器应匹配任何类型的所有请求。"],["body","\n"],["body","监听器应该是应用程序中定义的第一个监听器，过滤器应该是应用程序中定义和映射的第一个过滤器。"],["body","\n"],["body","这可以使用以下 web.xml 代码轻松完成："],["body","\n"],["body","    <listener>\n        <listener-class>org.apache.logging.log4j.web.Log4jServletContextListener</listener-class>\n    </listener>\n \n    <filter>\n        <filter-name>log4jServletFilter</filter-name>\n        <filter-class>org.apache.logging.log4j.web.Log4jServletFilter</filter-class>\n    </filter>\n    <filter-mapping>\n        <filter-name>log4jServletFilter</filter-name>\n        <url-pattern>/*</url-pattern>\n        <dispatcher>REQUEST</dispatcher>\n        <dispatcher>FORWARD</dispatcher>\n        <dispatcher>INCLUDE</dispatcher>\n        <dispatcher>ERROR</dispatcher>\n        <dispatcher>ASYNC</dispatcher><!-- Servlet 3.0 w/ disabled auto-initialization only; not supported in 2.5 -->\n    </filter-mapping>\n"],["body","\n"],["body","您可以使用 log4jContextName、log4jConfiguration 和/或 isLog4jContextSelectorNamed 上下文参数自定义侦听器和过滤器的行为。"],["body","\n"],["body","在下面的上下文参数部分阅读更多相关信息"],["body","\n"],["h1","Context Parameters"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/RollingRandomAccessFileAppender.html"],["title","RollingRandomAccessFileAppender.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","RollingRandomAccessFileAppender"],["body","\n"],["body","RollingRandomAccessFileAppender 类似于标准的 RollingFileAppender，除了它总是被缓冲（不能关闭）并且在内部它使用 ByteBuffer + RandomAccessFile 而不是 BufferedOutputStream。"],["body","\n"],["body","在我们的测量中，与使用“bufferedIO=true”的 RollingFileAppender 相比，我们看到了 20-200% 的性能提升。 "],["body","\n"],["body","RollingRandomAccessFileAppender 写入在 fileName 参数中命名的 File 并根据 TriggeringPolicy 和 RolloverPolicy 滚动文件。"],["body","\n"],["body","与 RollingFileAppender 类似，RollingRandomAccessFileAppender 使用 RollingRandomAccessFileManager 来实际执行文件 I/O 并执行翻转。"],["body","\n"],["body","虽然无法共享来自不同配置的 RollingRandomAccessFileAppender，但如果 Manager 可访问，则 RollingRandomAccessFileManagers 可以共享。"],["body","\n"],["body","例如，servlet 容器中的两个 Web 应用程序可以有自己的配置，并且如果 Log4j 位于它们公共的 ClassLoader 中，则可以安全地写入同一个文件。"],["body","\n"],["body","RollingRandomAccessFileAppender 需要 TriggeringPolicy 和 RolloverStrategy。"],["body","\n"],["body","触发策略确定是否应该执行翻转，而 RolloverStrategy 定义应该如何完成翻转。"],["body","\n"],["body","如果没有配置 RolloverStrategy，RollingRandomAccessFileAppender 将使用 DefaultRolloverStrategy。"],["body","\n"],["body","从 log4j-2.5 开始，可以在 DefaultRolloverStrategy 中配置自定义删除操作以在翻转时运行。"],["body","\n"],["body","RollingRandomAccessFileAppender 不支持文件锁定。"],["body","\n"],["h1","RollingRandomAccessFileAppender Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","append"],["body","boolean"],["body","When true - the default, records will be appended to the end of the file. When set to false, the file will be cleared before new records are written."],["body","\n"],["body","filter"],["body","Filter"],["body","A Filter to determine if the event should be handled by this Appender. More than one Filter may be used by using a CompositeFilter."],["body","\n"],["body","fileName"],["body","String"],["body","The name of the file to write to. If the file, or any of its parent directories, do not exist, they will be created."],["body","\n"],["body","filePattern"],["body","String"],["body","The pattern of the file name of the archived log file. The format of the pattern should is dependent on the RolloverStrategu that is used. The DefaultRolloverStrategy will accept both a date/time pattern compatible with SimpleDateFormat and/or a %i which represents an integer counter. The integer counter allows specifying a padding, like %3i for space-padding the counter to 3 digits or (usually more useful) %03i for zero-padding the counter to 3 digits. The pattern also supports interpolation at runtime so any of the Lookups (such as the DateLookup can be included in the pattern."],["body","\n"],["body","immediateFlush"],["body","boolean"],["body","When set to true - the default, each write will be followed by a flush. This will guarantee the data is written to disk but could impact performance.Flushing after every write is only useful when using this appender with synchronous loggers. Asynchronous loggers and appenders will automatically flush at the end of a batch of events, even if immediateFlush is set to false. This also guarantees the data is written to disk but is more efficient."],["body","\n"],["body","bufferSize"],["body","int"],["body","The buffer size, defaults to 262,144 bytes (256 * 1024)."],["body","\n"],["body","layout"],["body","Layout"],["body","The Layout to use to format the LogEvent. If no layout is supplied the default pattern layout of \"%m%n\" will be used."],["body","\n"],["body","name"],["body","String"],["body","The name of the Appender."],["body","\n"],["body","policy"],["body","TriggeringPolicy"],["body","The policy to use to determine if a rollover should occur."],["body","\n"],["body","strategy"],["body","RolloverStrategy"],["body","The strategy to use to determine the name and location of the archive file."],["body","\n"],["body","ignoreExceptions"],["body","boolean"],["body","The default is true, causing exceptions encountered while appending events to be internally logged and then ignored. When set to false exceptions will be propagated to the caller, instead. You must set this to false when wrapping this Appender in a FailoverAppender."],["body","\n"],["body","filePermissions"],["body","String"],["body","File attribute permissions in POSIX format to apply whenever the file is created.Underlying files system shall support POSIX file attribute view.Examples: rw------- or rw-rw-rw- etc..."],["body","\n"],["body","fileOwner"],["body","String"],["body","File owner to define whenever the file is created.Changing file's owner may be restricted for security reason and Operation not permitted IOException thrown. Only processes with an effective user ID equal to the user ID of the file or with appropriate privileges may change the ownership of a file if _POSIX_CHOWN_RESTRICTED is in effect for path.Underlying files system shall support file owner attribute view."],["body","\n"],["body","fileGroup"],["body","String"],["body","File group to define whenever the file is created.Underlying files system shall support POSIX file attribute view."],["body","\n\n\n"],["h1","Triggering Policies"],["body","\n"],["body","See RollingFileAppender Triggering Policies."],["body","\n"],["h1","Rollover Strategies"],["body","\n"],["body","See RollingFileAppender Rollover Strategies."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/ConsoleAppender.html"],["title","ConsoleAppender.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","ConsoleAppender"],["body","\n"],["body","正如人们所料，ConsoleAppender 将其输出写入 System.out 或 System.err，其中 System.out 是默认目标。"],["body","\n"],["body","必须提供布局来格式化 LogEvent。"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","filter"],["body","Filter"],["body","个过滤器，用于确定事件是否应该由这个 Appender 处理。"],["body","使用 CompositeFilter 可以使用多个过滤器。"],["body","\n"],["body","layout"],["body","Layout"],["body","用于格式化 LogEvent 的布局。"],["body","如果未提供布局，则将使用“%m%n”的默认模式布局。"],["body","\n"],["body","follow"],["body","boolean"],["body","标识 appender在配置后  是否通过 System.setOut 或 System.setErr对  System.out 或 System.err 的重新分配"],["body","请注意，follow 属性不能与 Windows 上的 Jansi 一起使用，不能与 direct 一起使用。"],["body","\n"],["body","direct"],["body","boolean"],["body","直接写入java.io.FileDescriptor，绕过java.lang.System.out/.err.当输出被重定向到文件或其他进程时，可以提供高达 10 倍的性能提升.不能在 Windows 上与 Jansi 一起使用。"],["body","不能与 follow一起使用. 输出将不尊重 java.lang.System.setOut()/.setErr() 并且可能会与多线程应用程序中 java.lang.System.out/.err 的其他输出交织在一起. 自 2.6.2 以来的新功能 目前仅在 Linux 和 Windows 上使用 Oracle JVM 进行过测试"],["body","\n"],["body","name"],["body","String"],["body","Appender 的名称"],["body","\n"],["body","ignoreExceptions"],["body","boolean"],["body","The default is true, 致在附加事件时遇到异常被内部记录然后被忽略. 当设置为 false 时，异常将传播给调用者"],["body"," You must set this to false when wrapping this Appender in a FailoverAppender."],["body","\n"],["body","target"],["body","String"],["body","Either \"SYSTEM_OUT\" or \"SYSTEM_ERR\". The default is \"SYSTEM_OUT\"."],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/FailoverAppender.html"],["title","FailoverAppender.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","FailoverAppender"],["body","\n"],["body","FailoverAppender 包装了一组 appender。如果主要 Appender 失败，则将按顺序尝试次要 Appender，直到成功或没有更多次要 Appender 可以尝试。"],["body","\n"],["h1","FailoverAppender Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","filter"],["body","Filter"],["body","一个过滤器，用于确定事件是否应该由这个 Appender 处理。使用 CompositeFilter 可以使用多个过滤器"],["body","\n"],["body","primary"],["body","String"],["body","要使用的主要 Appender 的名称"],["body","\n"],["body","failovers"],["body","String[]"],["body","要使用的辅助 Appender 的名称"],["body","\n"],["body","name"],["body","String"],["body","The name of the Appender."],["body","\n"],["body","retryIntervalSeconds"],["body","integer"],["body","在重试主 Appender 之前应该经过的秒数。默认值为 60"],["body","\n"],["body","ignoreExceptions"],["body","boolean"],["body","默认值为 true，导致在附加事件时遇到异常以进行内部记录然后被忽略。当设置为 false 时，异常将传播给调用者。"],["body","\n"],["body","target"],["body","String"],["body","Either \"SYSTEM_OUT\" or \"SYSTEM_ERR\". The default is \"SYSTEM_ERR\"."],["body","\n\n\n"],["h1","配置"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Appenders>\n    <RollingFile name=\"RollingFile\" fileName=\"logs/app.log\" filePattern=\"logs/app-%d{MM-dd-yyyy}.log.gz\"\n                 ignoreExceptions=\"false\">\n      <PatternLayout>\n        <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>\n      </PatternLayout>\n      <TimeBasedTriggeringPolicy />\n    </RollingFile>\n    <Console name=\"STDOUT\" target=\"SYSTEM_OUT\" ignoreExceptions=\"false\">\n      <PatternLayout pattern=\"%m%n\"/>\n    </Console>\n    <Failover name=\"Failover\" primary=\"RollingFile\">\n      <Failovers>\n        <AppenderRef ref=\"Console\"/>\n      </Failovers>\n    </Failover>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"Failover\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/RandomAccessFileAppender.html"],["title","RandomAccessFileAppender.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","RandomAccessFileAppender"],["body","\n"],["body","RandomAccessFileAppender 类似于标准的 FileAppender，除了它总是被缓冲（不能关闭），并且在内部它使用 ByteBuffer + RandomAccessFile 而不是 BufferedOutputStream"],["body","\n"],["body","在我们的 measurements 中，与带有“bufferedIO=true”的 FileAppender 相比，我们看到了 20-200% 的性能提升。"],["body","\n"],["body","与 FileAppender 类似，RandomAccessFileAppender 使用 RandomAccessFileManager 来实际执行文件 I/O。"],["body","\n"],["body","虽然无法共享来自不同配置的 RandomAccessFileAppender，但如果 Manager 可访问，则可以共享 RandomAccessFileManagers"],["body","\n"],["body","例如，servlet 容器中的两个 Web 应用程序可以有自己的配置，并且如果 Log4j 位于它们公共的 ClassLoader 中，则可以安全地写入同一个文件。"],["body","\n"],["h1","Paramter"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","append"],["body","boolean"],["body","当 true - 默认值时，记录将被附加到文件的末尾。"],["body","设置为 false 时，将在写入新记录之前清除文件。"],["body","\n"],["body","fileName"],["body","String"],["body","要写入的文件的名称。"],["body","如果文件或其任何父目录不存在，则将创建它们。"],["body","\n"],["body","filters"],["body","Filter"],["body","一个过滤器，用于确定事件是否应该由这个 Appender 处理。"],["body","使用 CompositeFilter 可以使用多个过滤器。"],["body","\n"],["body","immediateFlush"],["body","boolean"],["body","当设置为 true - 默认值时，每次写入后都会进行刷新。这将保证将数据写入磁盘，但可能会影响性能。每次写入后刷新仅在将此 appender 与同步记录器一起使用时才有用。异步记录器和附加器将在一批事件结束时自动刷新，即使immediateFlush 设置为false。"],["body","这也保证了将数据写入磁盘但效率更高。"],["body","\n"],["body","bufferSize"],["body","int"],["body","The buffer size, defaults to 262,144 bytes (256 * 1024)."],["body","\n"],["body","layout"],["body","Layout"],["body","用于格式化 LogEvent 的布局。"],["body","如果未提供布局，则将使用“%m%n”的默认模式布局。"],["body","\n"],["body","name"],["body","String"],["body","The name of the Appender."],["body","\n"],["body","ignoreExceptions"],["body","boolean"],["body","The default is true, causing exceptions encountered while appending events to be internally logged and then ignored. When set to false exceptions will be propagated to the caller, instead. You must set this to false when wrapping this Appender in a FailoverAppender."],["body","\n\n\n"],["h1","Example"],["body","\n"],["body","Here is a sample RandomAccessFile configuration:"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Appenders>\n    <RandomAccessFile name=\"MyFile\" fileName=\"logs/app.log\">\n      <PatternLayout>\n        <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>\n      </PatternLayout>\n    </RandomAccessFile>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"MyFile\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/OutputStreamAppender.html"],["title","OutputStreamAppender.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","The OutputStreamAppender provides the base for many of the other Appenders such as the File and Socket appenders that write the event to an Output Stream. It cannot be directly configured. Support for immediateFlush and buffering is provided by the OutputStreamAppender. The OutputStreamAppender uses an OutputStreamManager to handle the actual I/O, allowing the stream to be shared by Appenders in multiple configurations."],["body","\n"],["body","OutputStreamAppender 为许多其他 Appender 提供了基础，例如将事件写入输出流的 File 和 Socket appender。不能直接配置。 OutputStreamAppender 提供了对即时刷新和缓冲的支持。 OutputStreamAppender 使用 OutputStreamManager 来处理实际的 I/O，允许在多个配置中由 Appender 共享流。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/RewriteAppender.html"],["title","RewriteAppender.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","RewriteAppender"],["body","\n"],["body","RewriteAppender 允许在 LogEvent 被另一个 Appender 处理之前对其进行操作。"],["body","\n"],["body","这可用于屏蔽敏感信息（例如密码）或将信息注入每个事件。 "],["body","\n"],["body","RewriteAppender 必须配置有 RewritePolicy。 "],["body","\n"],["h1","Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","AppenderRef"],["body","String"],["body","在操作 LogEvent 后要调用的 Appender 的名称。"],["body","可以配置多个 AppenderRef 元素。"],["body","\n"],["body","filter"],["body","Filter"],["body","一个过滤器，用于确定事件是否应该由这个 Appender 处理。"],["body","使用 CompositeFilter 可以使用多个过滤器。"],["body","\n"],["body","name"],["body","String"],["body","The name of the Appender."],["body","\n"],["body","rewritePolicy"],["body","RewritePolicy"],["body","将操作 LogEvent 的 RewritePolicy。"],["body","\n"],["body","ignoreExceptions"],["body","boolean"],["body","The default is true, causing exceptions encountered while appending events to be internally logged and then ignored. When set to false exceptions will be propagated to the caller, instead. You must set this to false when wrapping this Appender in a FailoverAppender."],["body","\n\n\n"],["h1","RewritePolicy"],["body","\n"],["body","RewritePolicy 是一个接口，它允许实现在传递给 Appender 之前检查并可能修改 LogEvent。 "],["body","\n"],["body","RewritePolicy 声明了一个必须实现的名为 rewrite 的方法。"],["body","\n"],["body","该方法通过 LogEvent 传递，可以返回相同的事件或创建一个新的事件。"],["body","\n"],["headingLink","maprewritepolicy"],["heading","MapRewritePolicy"],["body","\n"],["body","MapRewritePolicy will evaluate LogEvents that contain a MapMessage and will add or update elements of the Map."],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","mode"],["body","String"],["body","\"Add\" or \"Update\""],["body","\n"],["body","keyValuePair"],["body","KeyValuePair[]"],["body","An array of keys and their values."],["body","\n\n\n"],["body","以下配置显示了一个 RewriteAppender 配置为将产品密钥及其值添加到 MapMessage。："],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Appenders>\n    <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\n      <PatternLayout pattern=\"%m%n\"/>\n    </Console>\n    <Rewrite name=\"rewrite\">\n      <AppenderRef ref=\"STDOUT\"/>\n      <MapRewritePolicy mode=\"Add\">\n        <KeyValuePair key=\"product\" value=\"TestProduct\"/>\n      </MapRewritePolicy>\n    </Rewrite>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"Rewrite\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["body","PropertiesRewritePolicy"],["body","\n"],["body","PropertiesRewritePolicy 会将在策略上配置的属性添加到正在记录的 ThreadContext Map。"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","properties"],["body","Property[]"],["body","One of more Property elements to define the keys and values to be added to the ThreadContext Map."],["body","\n\n\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Appenders>\n    <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\n      <PatternLayout pattern=\"%m%n\"/>\n    </Console>\n    <Rewrite name=\"rewrite\">\n      <AppenderRef ref=\"STDOUT\"/>\n      <PropertiesRewritePolicy>\n        <Property name=\"user\">${sys:user.name}</Property>\n        <Property name=\"env\">${sys:environment}</Property>\n      </PropertiesRewritePolicy>\n    </Rewrite>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"Rewrite\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["body","LoggerNameLevelRewritePolicy"],["body","\n"],["body","您可以使用此策略通过更改事件级别来减少第三方代码中的记录器"],["body","\n"],["body","LoggerNameLevelRewritePolicy 将重写给定记录器名称前缀的日志事件级别。"],["body","\n"],["body","您可以使用记录器名称前缀和一对级别配置 LoggerNameLevelRewritePolicy，其中一对定义源级别和目标级别。"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","logger"],["body","String"],["body","A logger name used as a prefix to test each event's logger name."],["body","\n"],["body","LevelPair"],["body","KeyValuePair[]"],["body","An array of keys and their values, each key is a source level, each value a target level."],["body","\n\n\n"],["body","以下配置显示了一个 RewriteAppender，配置为将级别 INFO 映射到 DEBUG，并将级别 WARN 映射到以 com.foo.bar 开头的所有记录器的 INFO。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\">\n  <Appenders>\n    <Console name=\"STDOUT\" target=\"SYSTEM_OUT\">\n      <PatternLayout pattern=\"%m%n\"/>\n    </Console>\n    <Rewrite name=\"rewrite\">\n      <AppenderRef ref=\"STDOUT\"/>\n      <LoggerNameLevelRewritePolicy logger=\"com.foo.bar\">\n        <KeyValuePair key=\"INFO\" value=\"DEBUG\"/>\n        <KeyValuePair key=\"WARN\" value=\"INFO\"/>\n      </LoggerNameLevelRewritePolicy>\n    </Rewrite>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"Rewrite\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/AsyncAppender.html"],["title","AsyncAppender.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","AsyncAppender"],["body","\n\n"],["body","\n"],["body","AsyncAppender 接受对其他 Appender 的引用，并在单独的线程上将 LogEvents 写入它们。"],["body","\n"],["body","\n"],["body","\n"],["body","请注意，写入这些 Appender 时的异常将对应用程序隐藏。 "],["body","\n"],["body","\n"],["body","\n"],["body","AsyncAppender 应该在它引用的 appender 之后配置，以允许它正确关闭。"],["body","\n"],["body","\n\n"],["body","默认情况下，AsyncAppender 使用不需要任何外部库的 java.util.concurrent.ArrayBlockingQueue。"],["body","\n"],["body","请注意，多线程应用程序在使用这个 appender 时应该小心"],["body","\n"],["body","阻塞队列容易受到锁争用的影响，我们的测试表明，当更多线程同时记录时，性能可能会变得更糟。"],["body","\n"],["body","考虑使用 无锁异步记录器 以获得最佳性能。"],["body","\n"],["body","AsyncAppender Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","默认值"],["body","\n"],["body","AppenderRef"],["body","String"],["body","要异步调用的 Appender 的名称。"],["body","可以配置多个 AppenderRef 元素"],["body","\n"],["body","blocking"],["body","boolean"],["body","如果为 true，appender 将等到队列中有空闲插槽。"],["body","如果为 false，则如果队列已满，则事件将写入错误附加程序。"],["body","true"],["body","\n"],["body","shutdownTimeout"],["body","integer"],["body","在关闭时   Appender 应该等待多少毫秒 才能刷新队列中的未完成日志事件"],["body","默认值为零，这意味着永远等待"],["body","\n"],["body","bufferSize"],["body","integer"],["body","指定可以排队的最大事件数。. 请注意，当使用 a disruptor-style BlockingQueue, 此缓冲区大小必须是 2 的幂. 当记录日志过快导致底层异步记录器队列满了时 其行为决定于 AsyncQueueFullPolicy."],["body","1024"],["body","\n"],["body","errorRef"],["body","String"],["body","如果由于 appender 中的错误或队列已满而无法调用任何appender，则该值为要调用的appender的名称。. 如果未指定，则将忽略错误。"],["body","\n"],["body","filter"],["body","Filter"],["body","一个过滤器，用于确定事件是否应该由这个 Appender 处理。使用 CompositeFilter 可以使用多个过滤器。"],["body","\n"],["body","name"],["body","String"],["body","Appender 的名称。"],["body","\n"],["body","ignoreExceptions"],["body","boolean"],["body","设置为true,导致在附加事件时遇到异常被内部记录然后被忽略  当设置为 false 时，异常将传播给调用者。将此 Appender 包装在 FailoverAppender 中时，您必须将此设置为 false。"],["body","true"],["body","\n"],["body","includeLocation"],["body","boolean"],["body","提取位置是一项昂贵的操作（它可以使日志记录速度慢 5 - 20 倍）。. 为了提高性能，将日志事件添加到队列时，默认情况下不包括位置. 您可以通过设置 includeLocation=\"true\" 来更改此设置。"],["body","false"],["body","\n"],["body","BlockingQueueFactory"],["body","BlockingQueueFactory"],["body","This element overrides what type of BlockingQueue to use. See below documentation for more details."],["body","\n\n\n"],["body","还有一些系统属性可用于维持应用程序吞吐量，即使底层 appender 无法跟上日志记录速率并且队列正在填满。"],["body","\n"],["body","请参阅系统属性 log4j2.AsyncQueueFullPolicy 和 log4j2.DiscardThreshold 的详细信息。"],["body","\n"],["h1","Example"],["body","\n"],["headingLink","标准写法"],["heading","标准写法"],["body","\n"],["body","A typical AsyncAppender configuration might look like:"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Appenders>\n    <File name=\"MyFile\" fileName=\"logs/app.log\">\n      <PatternLayout>\n        <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>\n      </PatternLayout>\n    </File>\n    <Async name=\"Async\">\n      <AppenderRef ref=\"MyFile\"/>\n    </Async>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"Async\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["headingLink","覆盖默认队列"],["heading","覆盖默认队列"],["body","\n"],["body","<Configuration name=\"LinkedTransferQueueExample\">\n  <Appenders>\n    <List name=\"List\"/>\n    <Async name=\"Async\" bufferSize=\"262144\">\n      <AppenderRef ref=\"List\"/>\n      <LinkedTransferQueue/>\n    </Async>\n  </Appenders>\n  <Loggers>\n    <Root>\n      <AppenderRef ref=\"Async\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["h1","默认队列实现内置实现"],["body","\n"],["body","Plugin Name"],["body","Description"],["body","\n"],["body","ArrayBlockingQueue"],["body","默认实现"],["body","\n"],["body","DisruptorBlockingQueue"],["body","This uses the Conversant Disruptor implementation of BlockingQueue. 这个插件有一个可选的属性，spinPolicy"],["body","\n"],["body","JCToolsBlockingQueue"],["body","This uses JCTools, specifically the MPSC bounded lock-free queue."],["body","\n"],["body","LinkedTransferQueue"],["body","这使用了 Java 7 中的新实现 LinkedTransferQueue。"],["body","请注意，此队列不使用 AsyncAppender 的 bufferSize 配置属性，因为 LinkedTransferQueue 不支持最大容量。"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/CassandraAppender.html"],["title","CassandraAppender.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","前言"],["body","\n"],["body","CassandraAppender 将其输出写入 Apache Cassandra 数据库。"],["body","\n"],["body","A keyspace and table must be configured ahead of time, and the columns of that table are mapped in a configuration file"],["body","\n"],["body","Each column can specify either a StringLayout (e.g., a PatternLayout) along with an optional conversion type, or only a conversion type for org.apache.logging.log4j.spi.ThreadContextMap or org.apache.logging.log4j.spi.ThreadContextStack to store the MDC or NDC in a map or list column respectively"],["body","\n"],["body","与 java.util.Date 兼容的转换类型将使用转换为该类型的日志事件时间戳（例如，在 Cassandra 中使用 java.util.Date 填充时间戳列类型）。"],["body","\n"],["h1","CassandraAppender Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","batched"],["body","boolean"],["body","Whether or not to use batch statements to write log messages to Cassandra. By default, this is false."],["body","\n"],["body","batchType"],["body","BatchStatement.Type"],["body","The batch type to use when using batched writes. By default, this is LOGGED."],["body","\n"],["body","bufferSize"],["body","int"],["body","The number of log messages to buffer or batch before writing. By default, no buffering is done."],["body","\n"],["body","clusterName"],["body","String"],["body","The name of the Cassandra cluster to connect to."],["body","\n"],["body","columns"],["body","ColumnMapping[]"],["body","A list of column mapping configurations. Each column must specify a column name. Each column can have a conversion type specified by its fully qualified class name. By default, the conversion type is String. If the configured type is assignment-compatible with ReadOnlyStringMap / ThreadContextMap or ThreadContextStack, then that column will be populated with the MDC or NDC respectively. If the configured type is assignment-compatible with java.util.Date, then the log timestamp will be converted to that configured date type. If a literal attribute is given, then its value will be used as is in the INSERT query without any escaping. Otherwise, the layout or pattern specified will be converted into the configured type and stored in that column."],["body","\n"],["body","contactPoints"],["body","SocketAddress[]"],["body","A list of hosts and ports of Cassandra nodes to connect to. These must be valid hostnames or IP addresses. By default, if a port is not specified for a host or it is set to 0, then the default Cassandra port of 9042 will be used. By default, localhost:9042 will be used."],["body","\n"],["body","filter"],["body","Filter"],["body","A Filter to determine if the event should be handled by this Appender. More than one Filter may be used by using a CompositeFilter."],["body","\n"],["body","ignoreExceptions"],["body","boolean"],["body","The default is true, causing exceptions encountered while appending events to be internally logged and then ignored. When set to false exceptions will be propagated to the caller, instead. You must set this to false when wrapping this Appender in a FailoverAppender."],["body","\n"],["body","keyspace"],["body","String"],["body","The name of the keyspace containing the table that log messages will be written to."],["body","\n"],["body","name"],["body","String"],["body","The name of the Appender."],["body","\n"],["body","password"],["body","String"],["body","The password to use (along with the username) to connect to Cassandra."],["body","\n"],["body","table"],["body","String"],["body","The name of the table to write log messages to."],["body","\n"],["body","useClockForTimestampGenerator"],["body","boolean"],["body","Whether or not to use the configured org.apache.logging.log4j.core.util.Clock as a TimestampGenerator. By default, this is false."],["body","\n"],["body","username"],["body","String"],["body","The username to use to connect to Cassandra. By default, no username or password is used."],["body","\n"],["body","useTls"],["body","boolean"],["body","Whether or not to use TLS/SSL to connect to Cassandra. This is false by default."],["body","\n\n\n"],["h1","ExampleConfiguration"],["body","\n"],["body","<Configuration name=\"CassandraAppenderTest\">\n  <Appenders>\n    <Cassandra name=\"Cassandra\" clusterName=\"Test Cluster\" keyspace=\"test\" table=\"logs\" bufferSize=\"10\" batched=\"true\">\n      <SocketAddress host=\"localhost\" port=\"9042\"/>\n      <ColumnMapping name=\"id\" pattern=\"%uuid{TIME}\" type=\"java.util.UUID\"/>\n      <ColumnMapping name=\"timeid\" literal=\"now()\"/>\n      <ColumnMapping name=\"message\" pattern=\"%message\"/>\n      <ColumnMapping name=\"level\" pattern=\"%level\"/>\n      <ColumnMapping name=\"marker\" pattern=\"%marker\"/>\n      <ColumnMapping name=\"logger\" pattern=\"%logger\"/>\n      <ColumnMapping name=\"timestamp\" type=\"java.util.Date\"/>\n      <ColumnMapping name=\"mdc\" type=\"org.apache.logging.log4j.spi.ThreadContextMap\"/>\n      <ColumnMapping name=\"ndc\" type=\"org.apache.logging.log4j.spi.ThreadContextStack\"/>\n    </Cassandra>\n  </Appenders>\n  <Loggers>\n    <Logger name=\"org.apache.logging.log4j.cassandra\" level=\"DEBUG\">\n      <AppenderRef ref=\"Cassandra\"/>\n    </Logger>\n    <Root level=\"ERROR\"/>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["body","This example configuration uses the following table schema:"],["body","\n"],["body","CREATE TABLE logs (\n    id timeuuid PRIMARY KEY,\n    timeid timeuuid,\n    message text,\n    level text,\n    marker text,\n    logger text,\n    timestamp timestamp,\n    mdc map<text,text>,\n    ndc list<text>\n);\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/RollingFileAppender.html"],["title","RollingFileAppender.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","RollingFileAppender"],["body","\n"],["body","RollingFileAppender 是一个 OutputStreamAppender，它写入 fileName 参数中命名的 File 并根据 TriggeringPolicy 和 RolloverPolicy 滚动文件"],["body","\n"],["body","RollingFileAppender 使用 RollingFileManager（它扩展了 OutputStreamManager）来实际执行文件 I/O 并执行翻转。"],["body","\n"],["body","虽然无法共享来自不同配置的 RolloverFileAppender，但如果 Manager 可访问，则可以共享 RollingFileManagers。"],["body","\n"],["body","例如，servlet 容器中的两个 Web 应用程序可以有自己的配置，并且如果 Log4j 位于它们公共的 ClassLoader 中，则可以安全地写入同一个文件。"],["body","\n"],["h1","TriggeringPolicy 与RolloverStrategy"],["body","\n\n"],["body","\n"],["body","RollingFileAppender 需要一个 TriggeringPolicy 和一个 RolloverStrategy。"],["body","\n"],["body","\n"],["body","\n"],["body","触发策略确定是否应该执行翻转，而 RolloverStrategy 定义应该如何完成翻转。"],["body","\n"],["body","\n"],["body","\n"],["body","如果没有配置 RolloverStrategy，RollingFileAppender 将使用 DefaultRolloverStrategy。"],["body","\n"],["body","\n"],["body","\n"],["body","从 log4j-2.5 开始，可以在 DefaultRolloverStrategy 中配置自定义删除操作以在翻转时运行。"],["body","\n"],["body","\n"],["body","\n"],["body","从 2.8 开始，如果没有配置文件名，那么将使用 DirectWriteRolloverStrategy 而不是 DefaultRolloverStrategy。"],["body","\n"],["body","\n"],["body","\n"],["body","从 log4j-2.9 开始，可以在 DefaultRolloverStrategy 中配置自定义 POSIX 文件属性视图操作以在翻转时运行，如果未定义，将从 RollingFileAppender 继承的 POSIX 文件属性视图将被应用。"],["body","\n"],["body","\n"],["body","\n"],["body","RollingFileAppender 不支持文件锁定。"],["body","\n"],["body","\n\n"],["h1","Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","append"],["body","boolean"],["body","When true - the default, records will be appended to the end of the file. When set to false, the file will be cleared before new records are written."],["body","\n"],["body","bufferedIO"],["body","boolean"],["body","When true - the default, records will be written to a buffer and the data will be written to disk when the buffer is full or, if immediateFlush is set, when the record is written. File locking cannot be used with bufferedIO. Performance tests have shown that using buffered I/O significantly improves performance, even if immediateFlush is enabled."],["body","\n"],["body","bufferSize"],["body","int"],["body","When bufferedIO is true, this is the buffer size, the default is 8192 bytes."],["body","\n"],["body","createOnDemand"],["body","boolean"],["body","The appender creates the file on-demand. The appender only creates the file when a log event passes all filters and is routed to this appender. Defaults to false."],["body","\n"],["body","filter"],["body","Filter"],["body","A Filter to determine if the event should be handled by this Appender. More than one Filter may be used by using a CompositeFilter."],["body","\n"],["body","fileName"],["body","String"],["body","The name of the file to write to. If the file, or any of its parent directories, do not exist, they will be created."],["body","\n"],["body","filePattern"],["body","String"],["body","归档日志文件的文件名模式。模式的格式取决于所使用的 RolloverPolicy。 .DefaultRolloverPolicy 将接受与 SimpleDateFormat 兼容的日期/时间模式和 或  %i 计算器. 该模式还支持运行时插值，因此任何 任何 Lookups (such as the DateLookup) can be included in the pattern."],["body","\n"],["body","immediateFlush"],["body","boolean"],["body","When set to true - the default, each write will be followed by a flush. This will guarantee the data is written to disk but could impact performance.Flushing after every write is only useful when using this appender with synchronous loggers. Asynchronous loggers and appenders will automatically flush at the end of a batch of events, even if immediateFlush is set to false. This also guarantees the data is written to disk but is more efficient."],["body","\n"],["body","layout"],["body","Layout"],["body","用于格式化 LogEvent 的布局。"],["body","如果未提供布局，则将使用“%m%n”的默认模式布局。"],["body","\n"],["body","name"],["body","String"],["body","The name of the Appender."],["body","\n"],["body","policy"],["body","TriggeringPolicy"],["body","用于确定是否应发生翻转的策略。"],["body","\n"],["body","strategy"],["body","RolloverStrategy"],["body","用于确定存档文件的名称和位置的策略"],["body","\n"],["body","ignoreExceptions"],["body","boolean"],["body","The default is true, causing exceptions encountered while appending events to be internally logged and then ignored. When set to false exceptions will be propagated to the caller, instead. You must set this to false when wrapping this Appender in a FailoverAppender."],["body","\n"],["body","filePermissions"],["body","String"],["body","File attribute permissions in POSIX format to apply whenever the file is created.Underlying files system shall support POSIX file attribute view.Examples: rw------- or rw-rw-rw- etc..."],["body","\n"],["body","fileOwner"],["body","String"],["body","File owner to define whenever the file is created.Changing file's owner may be restricted for security reason and Operation not permitted IOException thrown. Only processes with an effective user ID equal to the user ID of the file or with appropriate privileges may change the ownership of a file if _POSIX_CHOWN_RESTRICTED is in effect for path.Underlying files system shall support file owner attribute view."],["body","\n"],["body","fileGroup"],["body","String"],["body","File group to define whenever the file is created.Underlying files system shall support POSIX file attribute view."],["body","\n\n\n"],["h1","Triggering Policies"],["body","\n"],["headingLink","composite-triggering-policy"],["heading","Composite Triggering Policy"],["body","\n"],["body","CompositeTriggeringPolicy 组合了多个触发策略，如果任何配置的策略返回 true，则返回 true。"],["body","\n"],["body","CompositeTriggeringPolicy 只需将其他策略包装在 Policies 元素中即可配置。"],["body","\n"],["body","例如，以下 XML 片段定义了在 JVM 启动、日志大小达到 20 兆字节、以及当前日期不再与日志的开始日期匹配时滚动日志的策略。"],["body","\n"],["body","<Policies>\n  <OnStartupTriggeringPolicy />\n  <SizeBasedTriggeringPolicy size=\"20 MB\" />\n  <TimeBasedTriggeringPolicy />\n</Policies>\n"],["body","\n"],["headingLink","cron-triggering-policy"],["heading","Cron Triggering Policy"],["body","\n"],["body","CronTriggeringPolicy 基于 cron 表达式触发翻转"],["body","\n"],["headingLink","parameters-1"],["heading","Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","schedule"],["body","String"],["body","cron 表达式。该表达式与 Quartz 调度程序中允许的表达式相同。 See CronExpression for a full description of the expression."],["body","\n"],["body","evaluateOnStartup"],["body","boolean"],["body","启动时，cron 表达式将根据文件的最后修改时间戳进行评估。"],["body","如果 cron 表达式指示在该时间和当前时间之间应该发生翻转，则文件将立即翻转。"],["body","\n\n\n"],["headingLink","onstartup-triggering-policy"],["heading","OnStartup Triggering Policy"],["body","\n"],["body","如果日志文件早于当前 JVM 的启动时间并且达到或超过最小文件大小，则 OnStartupTriggeringPolicy 策略会导致翻转。"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","minSize"],["body","long"],["body","文件必须翻转的最小大小。"],["body","无论文件大小如何，大小为零都会导致翻转。"],["body","默认值为 1，这将防止滚动空文件。"],["body","\n\n\n"],["headingLink","sizebased-triggering-policy"],["heading","SizeBased Triggering Policy"],["body","\n"],["body","一旦文件达到指定的大小，SizeBasedTriggeringPolicy 会导致翻转。"],["body","\n"],["body","大小可以以字节为单位指定，后缀为 KB、MB 或 GB，例如 20MB。"],["body","\n"],["body","当与基于时间的触发策略结合使用时，文件模式必须包含 %i 否则目标文件将在每次翻转时被覆盖，因为 SizeBased 触发策略不会导致文件名中的时间戳值发生更改。"],["body","\n"],["body","当在没有基于时间的触发策略的情况下使用时，SizeBased 触发策略将导致时间戳值发生变化。"],["body","\n"],["headingLink","timebased-triggering-policy"],["heading","TimeBased Triggering Policy"],["body","\n"],["body","一旦日期/时间模式不再适用于活动文件， TimeBasedTriggeringPolicy 会导致翻转。"],["body","\n"],["body","此策略接受一个间隔属性，该属性指示基于时间模式和  一个boolean属性指示是否 应该调整间隔以使得下一次翻转发生在边界上。"],["body","\n"],["headingLink","parameters-2"],["heading","Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","interval"],["body","integer"],["body","根据日期模式中最具体的时间单位，应多久进行一次翻转。.例如，日期模式以小时为最具体的项目，并且每 4 小时会发生 4 次翻转。. The default value is 1."],["body","\n"],["body","modulate"],["body","boolean"],["body","指示是否应调整间隔以使下一次翻转发生在间隔边界上。. 例如，如果项目是小时，当前小时是凌晨 3 点，间隔是 4，那么第一次翻转将在凌晨 4 点发生，然后下一次翻转将在上午 8 点、中午、下午 4 点等发生。"],["body","\n"],["body","maxRandomDelay"],["body","integer"],["body","Indicates the maximum number of seconds to randomly delay a rollover. By default, this is 0 which indicates no delay. This setting is useful on servers where multiple applications are configured to rollover log files at the same time and can spread the load of doing so across time."],["body","\n\n\n"],["h1","Rollover Strategies"],["body","\n"],["headingLink","default-rollover-strategy"],["heading","Default Rollover Strategy"],["body","\n"],["body","默认翻转策略接受日期/时间模式和一个在整数 "],["body","\n"],["body","上述属性在 RollingFileAppender  本身上指定该"],["body","\n"],["body","如果存在日期/时间模式，它将被当前的日期和时间值替换。"],["body","\n"],["body","如果模式包含一个整数，它将在每次翻转时递增。"],["body","\n"],["body","如果模式中同时包含日期/时间和整数，则整数将递增，直到日期/时间模式的结果发生变化。"],["body","\n"],["body","如果文件模式以“.gz”、“.zip”、“.bz2”、“.deflate”、“.pack200”或“.xz”结尾，则生成的存档将使用与后缀匹配的压缩方案进行压缩"],["body","\n"],["body","bzip2、Deflate、Pack200 和 XZ 格式需要 Apache Commons Compress。"],["body","\n"],["body","此外，XZ 需要 XZ for Java。"],["body","\n"],["body","该模式还可能包含可以在运行时解析的查找引用，如下例所示。"],["body","\n"],["body","默认翻转策略支持三种递增计数器的变体。"],["body","\n"],["body","假设 min 属性设置为 1，max 属性设置为 3，文件名为“foo.log”，文件名模式为“foo-%i.log”。"],["body","\n"],["body","Number of rollovers"],["body","Active output target"],["body","Archived log files"],["body","Description"],["body","\n"],["body","0"],["body","foo.log"],["body","-"],["body","All logging is going to the initial file."],["body","\n"],["body","1"],["body","foo.log"],["body","foo-1.log"],["body","在第一次翻转期间，foo.log 被重命名为 foo-1.log。一个新的 foo.log 文件被创建并开始写入。"],["body","\n"],["body","2"],["body","foo.log"],["body","foo-2.log, foo-1.log"],["body","在第二次翻转期间，foo.log 被重命名为 foo-2.log。"],["body","一个新的 foo.log 文件被创建并开始写入。"],["body","\n"],["body","3"],["body","foo.log"],["body","foo-3.log, foo-2.log, foo-1.log"],["body","在第三次翻转期间，foo.log 被重命名为 foo-3.log。一个新的 foo.log 文件被创建并开始写入。"],["body","\n"],["body","4"],["body","foo.log"],["body","foo-3.log, foo-2.log, foo-1.log"],["body","在第四次及以后的翻转中，foo-1.log被删除，foo-2.log被重命名为foo-1.log，foo-3.log被重命名为foo-2.log，foo.log被重命名为foo-3.日志。"],["body","一个新的 foo.log 文件被创建并开始写入。"],["body","\n\n\n"],["body","相比之下，当 fileIndex 属性设置为“min”但所有其他设置都相同时，将执行“固定窗口”策略。"],["body","\n"],["body","Number of rollovers"],["body","Active output target"],["body","Archived log files"],["body","Description"],["body","\n"],["body","0"],["body","foo.log"],["body","-"],["body","All logging is going to the initial file."],["body","\n"],["body","1"],["body","foo.log"],["body","foo-1.log"],["body","During the first rollover foo.log is renamed to foo-1.log. A new foo.log file is created and starts being written to."],["body","\n"],["body","2"],["body","foo.log"],["body","foo-1.log, foo-2.log"],["body","During the second rollover foo-1.log is renamed to foo-2.log and foo.log is renamed to foo-1.log. A new foo.log file is created and starts being written to."],["body","\n"],["body","3"],["body","foo.log"],["body","foo-1.log, foo-2.log, foo-3.log"],["body","During the third rollover foo-2.log is renamed to foo-3.log, foo-1.log is renamed to foo-2.log and foo.log is renamed to foo-1.log. A new foo.log file is created and starts being written to."],["body","\n"],["body","4"],["body","foo.log"],["body","foo-1.log, foo-2.log, foo-3.log"],["body","In the fourth and subsequent rollovers, foo-3.log is deleted, foo-2.log is renamed to foo-3.log, foo-1.log is renamed to foo-2.log and foo.log is renamed to foo-1.log. A new foo.log file is created and starts being written to."],["body","\n\n\n"],["body","最后，从 2.8 版开始，如果 fileIndex 属性设置为“nomax”，那么最小值和最大值将被忽略，文件编号将增加 1，并且每次翻转都会有一个递增的更高值，没有最大文件数。"],["body","\n"],["headingLink","parameters-3"],["heading","Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","fileIndex"],["body","String"],["body","If set to \"max\" (the default), files with a higher index will be newer than files with a smaller index. If set to \"min\", file renaming and the counter will follow the Fixed Window strategy described above."],["body","\n"],["body","min"],["body","integer"],["body","The minimum value of the counter. The default value is 1."],["body","\n"],["body","max"],["body","integer"],["body","The maximum value of the counter. Once this values is reached older archives will be deleted on subsequent rollovers. The default value is 7."],["body","\n"],["body","compressionLevel"],["body","integer"],["body","Sets the compression level, 0-9, where 0 = none, 1 = best speed, through 9 = best compression. Only implemented for ZIP files."],["body","\n"],["body","tempCompressedFilePattern"],["body","String"],["body","The pattern of the file name of the archived log file during compression."],["body","\n\n\n"],["headingLink","directwrite-rollover-strategy"],["heading","DirectWrite Rollover Strategy"],["body","\n"],["body","DirectWriteRolloverStrategy 使日志事件直接写入由文件模式表示的文件。"],["body","\n"],["body","使用此策略不会执行文件重命名。"],["body","\n"],["body","如果基于大小的触发策略导致在指定时间段内写入多个文件，它们将从 1 开始编号并不断递增，直到发生基于时间的翻转。"],["body","\n"],["body","警告：如果文件模式有一个表示应该进行压缩的后缀，则当应用程序关闭时，当前文件将不会被压缩。"],["body","\n"],["body","此外，如果时间改变以致文件模式不再与当前文件匹配，则它也不会在启动时被压缩。"],["body","\n"],["headingLink","parameters-4"],["heading","Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","maxFiles"],["body","String"],["body","The maximum number of files to allow in the time period matching the file pattern. If the number of files is exceeded the oldest file will be deleted. If specified, the value must be greater than 1. If the value is less than zero or omitted then the number of files will not be limited."],["body","\n"],["body","compressionLevel"],["body","integer"],["body","Sets the compression level, 0-9, where 0 = none, 1 = best speed, through 9 = best compression. Only implemented for ZIP files."],["body","\n"],["body","tempCompressedFilePattern"],["body","String"],["body","The pattern of the file name of the archived log file during compression."],["body","\n\n\n"],["body","下面是一个示例配置，它使用具有基于时间和大小的触发策略的 RollingFileAppender，将在同一天 (1-7) 创建多达 7 个存档，这些存档存储在基于当前年和月的目录中，并将"],["body","\n"],["body","使用 gzip 压缩每个存档："],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Appenders>\n    <RollingFile name=\"RollingFile\" fileName=\"logs/app.log\"\n                 filePattern=\"logs/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz\">\n      <PatternLayout>\n        <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>\n      </PatternLayout>\n      <Policies>\n        <TimeBasedTriggeringPolicy />\n        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n      </Policies>\n    </RollingFile>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"RollingFile\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n\n"],["body","\n"],["body","第二个示例显示了一个翻转策略，该策略将在删除之前最多保留 20 个文件。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Appenders>\n    <RollingFile name=\"RollingFile\" fileName=\"logs/app.log\"\n                 filePattern=\"logs/$${date:yyyy-MM}/app-%d{MM-dd-yyyy}-%i.log.gz\">\n      <PatternLayout>\n        <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>\n      </PatternLayout>\n      <Policies>\n        <TimeBasedTriggeringPolicy />\n        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n      </Policies>\n      <DefaultRolloverStrategy max=\"20\"/>\n    </RollingFile>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"RollingFile\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["body","下面是一个示例配置，它使用具有基于时间和大小的触发策略的 RollingFileAppender，将在同一天 (1-7) 创建多达 7 个存档，这些存档存储在基于当前年和月的目录中，并将"],["body","\n"],["body","使用 gzip 压缩每个存档，当小时可被 6 整除时，将每 6 小时滚动一次："],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Appenders>\n    <RollingFile name=\"RollingFile\" fileName=\"logs/app.log\"\n                 filePattern=\"logs/$${date:yyyy-MM}/app-%d{yyyy-MM-dd-HH}-%i.log.gz\">\n      <PatternLayout>\n        <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>\n      </PatternLayout>\n      <Policies>\n        <TimeBasedTriggeringPolicy interval=\"6\" modulate=\"true\"/>\n        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n      </Policies>\n    </RollingFile>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"RollingFile\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["body","此示例配置使用具有基于 cron 和大小的触发策略的 RollingFileAppender，并直接写入无限数量的存档文件。 "],["body","\n"],["body","cron 触发器每小时导致一次翻转，而文件大小限制为 250MB"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Appenders>\n    <RollingFile name=\"RollingFile\" filePattern=\"logs/app-%d{yyyy-MM-dd-HH}-%i.log.gz\">\n      <PatternLayout>\n        <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>\n      </PatternLayout>\n      <Policies>\n        <CronTriggeringPolicy schedule=\"0 0 * * * ?\"/>\n        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n      </Policies>\n    </RollingFile>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"RollingFile\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["body","此示例配置与前面的相同，但将每小时保存的文件数限制为 10："],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Appenders>\n    <RollingFile name=\"RollingFile\" filePattern=\"logs/app-%d{yyyy-MM-dd-HH}-%i.log.gz\">\n      <PatternLayout>\n        <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>\n      </PatternLayout>\n      <Policies>\n        <CronTriggeringPolicy schedule=\"0 0 * * * ?\"/>\n        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n      </Policies>\n      <DirectWriteRolloverStrategy maxFiles=\"10\"/>\n    </RollingFile>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"RollingFile\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["headingLink","log-archive-retention-policy"],["heading","Log Archive Retention Policy"],["body","\n"],["body","\n"],["body","Delete on Rollover"],["body","\n"],["body","\n"],["body","Log4j-2.5 引入了一个 Delete 操作，与 DefaultRolloverStrategy max 属性相比，它使用户可以更好地控制在翻转时删除哪些文件。"],["body","\n"],["body","删除操作允许用户配置一个或多个条件来选择相对于基本目录删除的文件。"],["body","\n"],["body","请注意，可以删除任何文件，而不仅仅是滚动日志文件，因此请谨慎使用此操作！"],["body","\n"],["body","使用 testMode 参数，您可以测试您的配置，而不会意外删除错误的文件。"],["body","\n"],["headingLink","parameters-5"],["heading","Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","basePath"],["body","String"],["body","Required. Base path from where to start scanning for files to delete."],["body","\n"],["body","maxDepth"],["body","int"],["body","要访问的目录的最大级别数。"],["body","值 0 表示仅访问起始文件（基本路径本身），除非被安全管理器拒绝。 "],["body","Integer.MAX_VALUE 值表示应该访问所有级别。默认值为 1，表示仅指定基目录中的文件。"],["body","\n"],["body","followLinks"],["body","boolean"],["body","Whether to follow symbolic links. Default is false."],["body","\n"],["body","testMode"],["body","boolean"],["body","如果为 true，则不会删除文件，而是在 INFO 级别将消息打印到 状态记录器。"],["body","\n"],["body","pathSorter"],["body","PathSorter"],["body","实现 PathSorter"],["body","在选择要删除的文件之前对文件进行排序的界面。"],["body","默认设置是首先对最近修改的文件进行排序。"],["body","\n"],["body","pathConditions"],["body","PathCondition[]"],["body","如果未指定 ScriptCondition 则为必需 ,一个或多个 PathCondition 元素。如果指定了多个条件，则它们都需要接受条件才能删除, 条件可以嵌套，在这种情况下，仅当外部条件接受路径时才评估内部条件.如果条件不是嵌套的，它们可以按任何顺序进行计算。条件也可以通过使用 IfAll、IfAny 和 IfNot 复合条件与逻辑运算符 AND、OR 和 NOT 组合。.Users can create custom conditions or use the built-in conditions:IfFileName - accepts files whose path (relative to the base path) matches a regular expression or a glob.IfLastModified - accepts files that are as old as or older than the specified duration.IfAccumulatedFileCount - accepts paths after some count threshold is exceeded during the file tree walk.IfAccumulatedFileSize - accepts paths after the accumulated file size threshold is exceeded during the file tree walk.IfAll - accepts a path if all nested conditions accept it (logical AND). Nested conditions may be evaluated in any order.IfAny - accepts a path if one of the nested conditions accept it (logical OR). Nested conditions may be evaluated in any order.IfNot - accepts a path if the nested condition does not accept it (logical NOT)."],["body","\n"],["body","scriptCondition"],["body","ScriptCondition"],["body","Required if no PathConditions are specified. A ScriptCondition element specifying a script.The ScriptCondition should contain a Script, ScriptRef or ScriptFile element that specifies the logic to be executed. (See also the ScriptFilter documentation for more examples of configuring ScriptFiles and ScriptRefs.)The script is passed a number of parameters, including a list of paths found under the base path (up to maxDepth) and must return a list with the paths to delete."],["body","\n\n\n"],["headingLink","iffilename-condition-parameters"],["heading","IfFileName Condition Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","glob"],["body","String"],["body","Required if regex not specified. Matches the relative path (relative to the base path) using a limited pattern language that resembles regular expressions but with a simpler syntax."],["body","\n"],["body","regex"],["body","String"],["body","Required if glob not specified. Matches the relative path (relative to the base path) using a regular expression as defined by the Pattern class."],["body","\n"],["body","nestedConditions"],["body","PathCondition[]"],["body","An optional set of nested PathConditions. If any nested conditions exist they all need to accept the file before it is deleted. Nested conditions are only evaluated if the outer condition accepts a file (if the path name matches)."],["body","\n\n\n"],["headingLink","iflastmodified-condition-parameters"],["heading","IfLastModified Condition Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","age"],["body","String"],["body","Required. Specifies a duration. The condition accepts files that are as old or older than the specified duration."],["body","\n"],["body","nestedConditions"],["body","PathCondition[]"],["body","An optional set of nested PathConditions. If any nested conditions exist they all need to accept the file before it is deleted. Nested conditions are only evaluated if the outer condition accepts a file (if the file is old enough)."],["body","\n\n\n"],["headingLink","ifaccumulatedfilecount-condition-parameters"],["heading","IfAccumulatedFileCount Condition Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","exceeds"],["body","int"],["body","Required. The threshold count from which files will be deleted."],["body","\n"],["body","nestedConditions"],["body","PathCondition[]"],["body","An optional set of nested PathConditions. If any nested conditions exist they all need to accept the file before it is deleted. Nested conditions are only evaluated if the outer condition accepts a file (if the threshold count has been exceeded)."],["body","\n\n\n"],["headingLink","ifaccumulatedfilesize-condition-parameters"],["heading","IfAccumulatedFileSize Condition Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","exceeds"],["body","String"],["body","Required. The threshold accumulated file size from which files will be deleted. The size can be specified in bytes, with the suffix KB, MB or GB, for example 20MB."],["body","\n"],["body","nestedConditions"],["body","PathCondition[]"],["body","An optional set of nested PathConditions. If any nested conditions exist they all need to accept the file before it is deleted. Nested conditions are only evaluated if the outer condition accepts a file (if the threshold accumulated file size has been exceeded)."],["body","\n\n\n"],["body","下面是一个示例配置，它使用 RollingFileAppender 和配置为每天午夜触发的 cron 触发策略。"],["body","\n"],["body","档案存储在基于当前年份和月份的目录中。"],["body","\n"],["body","基目录下与“/app-.log.gz”glob 匹配且存在于 60 天或更旧的所有文件将在翻转时被删除。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Properties>\n    <Property name=\"baseDir\">logs</Property>\n  </Properties>\n  <Appenders>\n    <RollingFile name=\"RollingFile\" fileName=\"${baseDir}/app.log\"\n          filePattern=\"${baseDir}/$${date:yyyy-MM}/app-%d{yyyy-MM-dd}.log.gz\">\n      <PatternLayout pattern=\"%d %p %c{1.} [%t] %m%n\" />\n      <CronTriggeringPolicy schedule=\"0 0 0 * * ?\"/>\n      <DefaultRolloverStrategy>\n        <Delete basePath=\"${baseDir}\" maxDepth=\"2\">\n          <IfFileName glob=\"*/app-*.log.gz\" />\n          <IfLastModified age=\"60d\" />\n        </Delete>\n      </DefaultRolloverStrategy>\n    </RollingFile>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"RollingFile\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["body","下面是一个示例配置，它使用具有基于时间和大小的触发策略的 RollingFileAppender，将在同一天 (1-100) 创建多达 100 个存档，这些存档存储在基于当前年和月的目录中，并将"],["body","\n"],["body","使用 gzip 压缩每个存档，并将每小时滚动一次。"],["body","\n"],["body","在每次翻转期间，此配置将删除与“/app-.log.gz”匹配且 30 天或更旧的文件，但保留最近的 100 GB 或最近的 10 个文件，以先到者为准。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Properties>\n    <Property name=\"baseDir\">logs</Property>\n  </Properties>\n  <Appenders>\n    <RollingFile name=\"RollingFile\" fileName=\"${baseDir}/app.log\"\n          filePattern=\"${baseDir}/$${date:yyyy-MM}/app-%d{yyyy-MM-dd-HH}-%i.log.gz\">\n      <PatternLayout pattern=\"%d %p %c{1.} [%t] %m%n\" />\n      <Policies>\n        <TimeBasedTriggeringPolicy />\n        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n      </Policies>\n      <DefaultRolloverStrategy max=\"100\">\n        <!--\n        Nested conditions: the inner condition is only evaluated on files\n        for which the outer conditions are true.\n        -->\n        <Delete basePath=\"${baseDir}\" maxDepth=\"2\">\n          <IfFileName glob=\"*/app-*.log.gz\">\n            <IfLastModified age=\"30d\">\n              <IfAny>\n                <IfAccumulatedFileSize exceeds=\"100 GB\" />\n                <IfAccumulatedFileCount exceeds=\"10\" />\n              </IfAny>\n            </IfLastModified>\n          </IfFileName>\n        </Delete>\n      </DefaultRolloverStrategy>\n    </RollingFile>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"RollingFile\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["headingLink","scriptcondition-parameters"],["heading","ScriptCondition Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","script"],["body","Script, ScriptFile or ScriptRef"],["body","The Script element that specifies the logic to be executed. The script is passed a list of paths found under the base path and must return the paths to delete as a java.util.List<PathWithAttributes>. See also the ScriptFilter documentation for an example of how ScriptFiles and ScriptRefs can be configured."],["body","\n\n\n"],["headingLink","script-parameters"],["heading","Script Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","basePath"],["body","java.nio.file.Path"],["body","The directory from where the Delete action started scanning for files to delete. Can be used to relativize the paths in the pathList."],["body","\n"],["body","pathList"],["body","java.util.List<PathWithAttributes>"],["body","The list of paths found under the base path up to the specified max depth, sorted most recently modified files first. The script is free to modify and return this list."],["body","\n"],["body","statusLogger"],["body","StatusLogger"],["body","The StatusLogger that can be used to log internal events during script execution."],["body","\n"],["body","configuration"],["body","Configuration"],["body","The Configuration that owns this ScriptCondition."],["body","\n"],["body","substitutor"],["body","StrSubstitutor"],["body","The StrSubstitutor used to replace lookup variables."],["body","\n"],["body","?"],["body","String"],["body","Any properties declared in the configuration."],["body","\n\n\n"],["body","下面是一个示例配置，它使用 RollingFileAppender 和配置为每天午夜触发的 cron 触发策略。"],["body","\n"],["body","档案存储在基于当前年份和月份的目录中。"],["body","\n"],["body","该脚本返回日期为 13 日星期五的基本目录下的滚动文件列表。"],["body","\n"],["body","删除操作将删除脚本返回的所有文件。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"trace\" name=\"MyApp\" packages=\"\">\n  <Properties>\n    <Property name=\"baseDir\">logs</Property>\n  </Properties>\n  <Appenders>\n    <RollingFile name=\"RollingFile\" fileName=\"${baseDir}/app.log\"\n          filePattern=\"${baseDir}/$${date:yyyy-MM}/app-%d{yyyyMMdd}.log.gz\">\n      <PatternLayout pattern=\"%d %p %c{1.} [%t] %m%n\" />\n      <CronTriggeringPolicy schedule=\"0 0 0 * * ?\"/>\n      <DefaultRolloverStrategy>\n        <Delete basePath=\"${baseDir}\" maxDepth=\"2\">\n          <ScriptCondition>\n            <Script name=\"superstitious\" language=\"groovy\"><![CDATA[\n                import java.nio.file.*;\n \n                def result = [];\n                def pattern = ~/\\d*\\/app-(\\d*)\\.log\\.gz/;\n \n                pathList.each { pathWithAttributes ->\n                  def relative = basePath.relativize pathWithAttributes.path\n                  statusLogger.trace 'SCRIPT: relative path=' + relative + \" (base=$basePath)\";\n \n                  // remove files dated Friday the 13th\n \n                  def matcher = pattern.matcher(relative.toString());\n                  if (matcher.find()) {\n                    def dateString = matcher.group(1);\n                    def calendar = Date.parse(\"yyyyMMdd\", dateString).toCalendar();\n                    def friday13th = calendar.get(Calendar.DAY_OF_MONTH) == 13 \\\n                                  && calendar.get(Calendar.DAY_OF_WEEK) == Calendar.FRIDAY;\n                    if (friday13th) {\n                      result.add pathWithAttributes;\n                      statusLogger.trace 'SCRIPT: deleting path ' + pathWithAttributes;\n                    }\n                  }\n                }\n                statusLogger.trace 'SCRIPT: returning ' + result;\n                result;\n              ]] >\n            </Script>\n          </ScriptCondition>\n        </Delete>\n      </DefaultRolloverStrategy>\n    </RollingFile>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"RollingFile\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["headingLink","log-archive-file-attribute-view-policy"],["heading","Log Archive File Attribute View Policy"],["body","\n"],["body","\n"],["body","Custom file attribute on Rollover"],["body","\n"],["body","\n"],["body","og4j-2.9 引入了 PosixViewAttribute 操作，使用户可以更好地控制应应用哪些文件属性权限、所有者和组。 "],["body","\n"],["body","PosixViewAttribute 操作允许用户配置一个或多个条件来选择相对于基目录的合格文件。"],["body","\n"],["headingLink","posixviewattribute-parameters"],["heading","PosixViewAttribute Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","basePath"],["body","String"],["body","Required. Base path from where to start scanning for files to apply attributes."],["body","\n"],["body","maxDepth"],["body","int"],["body","The maximum number of levels of directories to visit. A value of 0 means that only the starting file (the base path itself) is visited, unless denied by the security manager. A value of Integer.MAX_VALUE indicates that all levels should be visited. The default is 1, meaning only the files in the specified base directory."],["body","\n"],["body","followLinks"],["body","boolean"],["body","Whether to follow symbolic links. Default is false."],["body","\n"],["body","pathConditions"],["body","PathCondition[]"],["body","see DeletePathCondition"],["body","\n"],["body","filePermissions"],["body","String"],["body","File attribute permissions in POSIX format to apply when action is executed.Underlying files system shall support POSIX file attribute view.Examples: rw------- or rw-rw-rw- etc..."],["body","\n"],["body","fileOwner"],["body","String"],["body","File owner to define when action is executed.Changing file's owner may be restricted for security reason and Operation not permitted IOException thrown. Only processes with an effective user ID equal to the user ID of the file or with appropriate privileges may change the ownership of a file if _POSIX_CHOWN_RESTRICTED is in effect for path.Underlying files system shall support file owner attribute view."],["body","\n"],["body","fileGroup"],["body","String"],["body","File group to define when action is executed.Underlying files system shall support POSIX file attribute view."],["body","\n\n\n"],["body","以下是使用 RollingFileAppender 并为当前和滚动日志文件定义不同 POSIX 文件属性视图的示例配置。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"trace\" name=\"MyApp\" packages=\"\">\n  <Properties>\n    <Property name=\"baseDir\">logs</Property>\n  </Properties>\n  <Appenders>\n    <RollingFile name=\"RollingFile\" fileName=\"${baseDir}/app.log\"\n          \t\t filePattern=\"${baseDir}/$${date:yyyy-MM}/app-%d{yyyyMMdd}.log.gz\"\n                 filePermissions=\"rw-------\">\n      <PatternLayout pattern=\"%d %p %c{1.} [%t] %m%n\" />\n      <CronTriggeringPolicy schedule=\"0 0 0 * * ?\"/>\n      <DefaultRolloverStrategy stopCustomActionsOnError=\"true\">\n        <PosixViewAttribute basePath=\"${baseDir}/$${date:yyyy-MM}\" filePermissions=\"r--r--r--\">\n        \t<IfFileName glob=\"*.gz\" />\n        </PosixViewAttribute>\n      </DefaultRolloverStrategy>\n    </RollingFile>\n  </Appenders>\n \n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"RollingFile\"/>\n    </Root>\n  </Loggers>\n \n</Configuration>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/FileAppender.html"],["title","FileAppender.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","FileAppender"],["body","\n"],["body","FileAppender 是一个 OutputStreamAppender，它写入 fileName 参数中命名的 File。 FileAppender 使用 FileManager（它扩展了 OutputStreamManager）来实际执行文件 I/O。虽然不能共享来自不同配置的 FileAppender，但如果 Manager 可访问，则可以共享 FileManager。"],["body","\n"],["body","例如，servlet 容器中的两个 Web 应用程序可以有自己的配置，并且如果 Log4j 位于它们公共的 ClassLoader 中，则可以安全地写入同一个文件。"],["body","\n"],["h1","FileAppender Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","append"],["body","boolean"],["body","当 true - 默认值时，记录将被附加到文件的末尾。设置为 false 时，将在写入新记录之前清除文件"],["body","\n"],["body","bufferedIO"],["body","boolean"],["body","当为 true - 默认值时，记录将被写入缓冲区，当缓冲区已满时，数据将写入磁盘，如果设置了 immediateFlush，则在写入记录时将数据写入磁盘。文件锁定不能与 bufferedIO 一起使用。性能测试表明，即使启用了即时刷新，使用缓冲 I/O 也能显着提高性能。"],["body","\n"],["body","bufferSize"],["body","int"],["body","当 bufferedIO 为 true 时，这是缓冲区大小，默认为 8192 字节"],["body","\n"],["body","createOnDemand"],["body","boolean"],["body","按需创建文件. 仅当日志事件通过所有过滤器并路由到此 appender 时，appender 才会创建文件. Defaults to false."],["body","\n"],["body","filter"],["body","Filter"],["body","一个过滤器，用于确定事件是否应该由这个 Appender 处理。使用 CompositeFilter 可以使用多个过滤器。"],["body","\n"],["body","fileName"],["body","String"],["body","要写入的文件的名称。如果文件或其任何父目录不存在，则将创建它们"],["body","\n"],["body","immediateFlush"],["body","boolean"],["body","当设置为 true - 默认值时，每次写入后都会进行刷新。这将保证将数据写入磁盘，但可能会影响性能. 每次写入后刷新仅在同步记录器中有用. 异步记录器和附加器将在一批事件结束时自动刷新，即使immediateFlush 设置为false。这也保证了将数据写入磁盘但效率更高。"],["body","\n"],["body","layout"],["body","Layout"],["body","The Layout to use to format the LogEvent. If no layout is supplied the default pattern layout of \"%m%n\" will be used."],["body","\n"],["body","locking"],["body","boolean"],["body","当设置为 true 时，I/O 操作只会在持有文件锁时发生，允许多个 JVM 中的 FileAppenders 和潜在的多个主机同时写入同一个文件. 这将显着影响性能，因此应谨慎使用。.此外，在许多系统上，文件锁是“建议性的”，这意味着其他应用程序可以在不获取锁的情况下对文件执行操作。默认值为假。"],["body","\n"],["body","name"],["body","String"],["body","The name of the Appender."],["body","\n"],["body","ignoreExceptions"],["body","boolean"],["body","The default is true, causing exceptions encountered while appending events to be internally logged and then ignored. When set to false exceptions will be propagated to the caller, instead. You must set this to false when wrapping this Appender in a FailoverAppender."],["body","\n"],["body","filePermissions"],["body","String"],["body","POSIX 格式的文件属性权限在创建文件时应用。底层文件系统应支持 [POSIX](https://docs.oracle.com/javase/7/docs/api/java/nio/file/attribute/PosixFileAttributeView .html) 文件属性视图。示例：rw------- 或 rw-rw-rw- 等..."],["body","\n"],["body","fileOwner"],["body","String"],["body","文件所有者在创建文件时定义。出于安全原因，可能会限制更改文件的所有者，并且操作不允许，抛出 IOException. Only processes with an effective user ID equal to the user ID of the file or with appropriate privileges may change the ownership of a file if _POSIX_CHOWN_RESTRICTED is in effect for path.Underlying files system shall support file owner attribute view."],["body","\n"],["body","fileGroup"],["body","String"],["body","File group to define whenever the file is created.Underlying files system shall support POSIX file attribute view."],["body","\n\n\n"],["h1","Example"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Appenders>\n    <File name=\"MyFile\" fileName=\"logs/app.log\">\n      <PatternLayout>\n        <Pattern>%d %p %c{1.} [%t] %m%n</Pattern>\n      </PatternLayout>\n    </File>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"MyFile\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/JDBCAppender.html"],["title","JDBCAppender.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","JDBCAppender"],["body","\n"],["body","JDBCAppender 使用标准 JDBC 将日志事件写入关系数据库表"],["body","\n"],["body","它可以配置为使用 JNDI 数据源或自定义工厂方法获取 JDBC 连接。无论您采用哪种方法，它都必须由连接池支持,否则，日志性能将受到很大影响"],["body","\n"],["body","如果配置的 JDBC 驱动程序支持批处理语句并且 bufferSize 配置为正数，则日志事件将被批处理"],["body","\n"],["body","从 Log4j 2.8 开始，有两种方法可以将日志事件配置为列映射：仅允许字符串和时间戳的原始 ColumnConfig 样式，以及使用 Log4j 的内置类型转换以允许更多数据类型的新 ColumnMapping 插件（这与 Cassandra Appender 中的插件相同）。"],["body","\n"],["body","为了在开发过程中快速起步，使用基于 JNDI 的连接源的替代方法是使用非池化DriverManager 连接源。"],["body","\n"],["body","此连接源使用 JDBC 连接字符串、用户名和密码。或者，您还可以使用属性。"],["body","\n"],["h1","JDBCAppender Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","name"],["body","String"],["body","Required. The name of the Appender."],["body","\n"],["body","ignoreExceptions"],["body","boolean"],["body","The default is true, causing exceptions encountered while appending events to be internally logged and then ignored. When set to false exceptions will be propagated to the caller, instead. You must set this to false when wrapping this Appender in a FailoverAppender."],["body","\n"],["body","filter"],["body","Filter"],["body","A Filter to determine if the event should be handled by this Appender. More than one Filter may be used by using a CompositeFilter."],["body","\n"],["body","bufferSize"],["body","int"],["body","If an integer greater than 0, this causes the appender to buffer log events and flush whenever the buffer reaches this size."],["body","\n"],["body","connectionSource"],["body","ConnectionSource"],["body","Required. The connections source from which database connections should be retrieved."],["body","\n"],["body","tableName"],["body","String"],["body","Required. The name of the database table to insert log events into."],["body","\n"],["body","columnConfigs"],["body","ColumnConfig[]"],["body","Required (and/or columnMappings). 有关应插入记录事件数据的列以及如何插入该数据的信息。这用多个 <Column> 元素表示。"],["body","\n"],["body","columnMappings"],["body","ColumnMapping[]"],["body","Required (and/or columnConfigs). 列映射配置列表. 每列必须指定一个列名. 每个列都可以具有由其完全限定的类名指定的转换类型。默认情况下，转换类型为 String. If the configured type is assignment-compatible with ReadOnlyStringMap / ThreadContextMap or ThreadContextStack, 然后该列将分别用 MDC 或 NDC 填充（这是特定于数据库的，它们处理插入 Map 或 List 值的方式）.如果配置的类型与 java.util.Date 的赋值兼容，则日志时间戳将转换为该配置的日期类型. If the configured type is assignment-compatible with java.sql.Clob or java.sql.NClob, then the formatted event will be set as a Clob or NClob respectively (similar to the traditional ColumnConfig plugin). 如果给出了文字属性，则其值将在 INSERT 查询中按原样使用，而不会进行任何转义。否则，指定的布局或模式将转换为配置的类型并存储在该列中。"],["body","\n"],["body","immediateFail"],["body","boolean"],["body","设置为 true 时，日志事件不会等待尝试重新连接，如果 JDBC 资源不可用，则会立即失败。 2.11.2 新功能"],["body","\n"],["body","reconnectIntervalMillis"],["body","long"],["body","如果设置为大于 0 的值，则在发生错误后，JDBCDatabaseManager 将在等待指定的毫秒数后尝试重新连接到数据库"],["body","如果重新连接失败，则会抛出异常（如果 ignoreExceptions 设置为 false，则应用程序可以捕获该异常） 2.11.2 中的新功能"],["body","\n\n\n"],["h1","ConnectionSource implementation"],["body","\n"],["body","在配置 JDBCAppender 时，您必须指定一个 ConnectionSource implementation，Appender 从中获取 JDBC 连接。您必须恰好使用以下嵌套元素之一："],["body","\n\n"],["body","<DataSource>: Uses JNDI."],["body","\n"],["body","<ConnectionFactory>: Points to a class-method pair to provide JDBC connections."],["body","\n"],["body","<DriverManager>: A quick and dirty way to get off the ground, no connection pooling."],["body","\n"],["body","<PoolingDriver>: Uses Apache Commons DBCP to provide connection pooling"],["body","\n\n"],["h1","DataSource Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","jndiName"],["body","String"],["body","Required. The full, prefixed JNDI name that the javax.sql.DataSource is bound to, such as java:/comp/env/jdbc/LoggingDatabase. The DataSource must be backed by a connection pool; otherwise, logging will be very slow."],["body","\n\n\n"],["h1","ConnectionFactory Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","class"],["body","Class"],["body","*Required. 包含用于获取 JDBC 连接的静态工厂方法的类的完全限定名称。"],["body","\n"],["body","method"],["body","Method"],["body","Required. 用于获取 JDBC 连接的静态工厂方法的名称。此方法必须没有参数，并且其返回类型必须是 java.sql.Connection 或 DataSource。如果该方法返回连接，则必须从连接池中获取它们（并且它们会在 Log4j 完成时返回到连接池中）；否则，日志记录会很慢。如果该方法返回一个 DataSource，则该 DataSource 只会被检索一次，并且出于同样的原因，它必须由连接池支持。"],["body","\n\n\n"],["h1","DriverManager Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","connectionString"],["body","String"],["body","Required. 特定于驱动程序的 JDBC 连接字符串。"],["body","\n"],["body","userName"],["body","String"],["body","The database user name. 数据库用户名。您不能同时指定 properties 和 userName或 password"],["body","\n"],["body","password"],["body","String"],["body","数据库密码。您不能同时指定属性和用户名或密码"],["body","\n"],["body","driverClassName"],["body","String"],["body","JDBC 驱动程序类名称。某些旧的 JDBC 驱动程序只能通过按类名显式加载它们来发现"],["body","\n"],["body","properties"],["body","Property[]"],["body","属性列表。您不能同时指定属性和用户名或密码。"],["body","\n\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","DriverManager parameters"],["body","DriverManager parameters"],["body","This connection source inherits all parameter from the DriverManager connection source."],["body","\n"],["body","poolName"],["body","String"],["body","The pool name used to pool JDBC Connections. Defaults to example. You can use the JDBC connection string prefix jdbc:apache:commons:dbcp: followed by the pool name if you want to use a pooled connection elsewhere. For example: jdbc:apache:commons:dbcp:example."],["body","\n"],["body","PoolableConnectionFactory"],["body","PoolableConnectionFactory element"],["body","Defines a PoolableConnectionFactory."],["body","\n\n\n"],["h1","PoolingDriver Parameters (Apache Commons DBCP)"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","DriverManager parameters"],["body","DriverManager parameters"],["body","此连接源继承了 DriverManager 连接源的所有参数"],["body","\n"],["body","poolName"],["body","String"],["body","用于池化 JDBC 连接的池名称。默认为示例。如果要在其他地方使用池连接，可以使用 JDBC 连接字符串前缀 jdbc:apache:commons:dbcp: 后跟池名称。例如：jdbc:apache:commons:dbcp:example。"],["body","\n\n\n"],["h1","PoolableConnectionFactory Parameters (Apache Commons DBCP)"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","autoCommitOnReturn"],["body","boolean"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","cacheState"],["body","boolean"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","ConnectionInitSqls"],["body","Strings"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","defaultAutoCommit"],["body","boolean"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","defaultCatalog"],["body","String"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","defaultQueryTimeoutSeconds"],["body","integer"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","defaultReadOnly"],["body","boolean"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","defaultTransactionIsolation"],["body","integer"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","disconnectionSqlCodes"],["body","Strings"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","fastFailValidation"],["body","boolean"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","maxConnLifetimeMillis"],["body","long"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","maxOpenPreparedStatements"],["body","integer"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","poolStatements"],["body","boolean"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","rollbackOnReturn"],["body","boolean"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","validationQuery"],["body","String"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n"],["body","validationQueryTimeoutSeconds"],["body","integer"],["body","See Apache Commons DBCP PoolableConnectionFactory."],["body","\n\n\n"],["body","配置 JDBCAppender 时，使用嵌套的 <Column> 元素指定应写入表中的哪些列以及如何写入它们。 JDBCAppender 使用此信息制定 PreparedStatement 以插入没有 SQL 注入漏洞的记录。"],["body","\n"],["h1","Column Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","name"],["body","String"],["body","Required. The name of the database column."],["body","\n"],["body","pattern"],["body","String"],["body","Use this attribute to insert a value or values from the log event in this column using a PatternLayout pattern. Simply specify any legal pattern in this attribute. Either this attribute, literal, or isEventTimestamp=\"true\" must be specified, but not more than one of these."],["body","\n"],["body","literal"],["body","String"],["body","Use this attribute to insert a literal value in this column. The value will be included directly in the insert SQL, without any quoting (which means that if you want this to be a string, your value should contain single quotes around it like this: literal=\"'Literal String'\"). This is especially useful for databases that don't support identity columns. For example, if you are using Oracle you could specify literal=\"NAME_OF_YOUR_SEQUENCE.NEXTVAL\" to insert a unique ID in an ID column. Either this attribute, pattern, or isEventTimestamp=\"true\" must be specified, but not more than one of these."],["body","\n"],["body","parameter"],["body","String"],["body","Use this attribute to insert an expression with a parameter marker '?' in this column. The value will be included directly in the insert SQL, without any quoting (which means that if you want this to be a string, your value should contain single quotes around it like this:You can only specify one of literal or parameter."],["body","\n"],["body","isEventTimestamp"],["body","boolean"],["body","Use this attribute to insert the event timestamp in this column, which should be a SQL datetime. The value will be inserted as a java.sql.Types.TIMESTAMP. Either this attribute (equal to true), pattern, or isEventTimestamp must be specified, but not more than one of these."],["body","\n"],["body","isUnicode"],["body","boolean"],["body","This attribute is ignored unless pattern is specified. If true or omitted (default), the value will be inserted as unicode (setNString or setNClob). Otherwise, the value will be inserted non-unicode (setString or setClob)."],["body","\n"],["body","isClob"],["body","boolean"],["body","This attribute is ignored unless pattern is specified. Use this attribute to indicate that the column stores Character Large Objects (CLOBs). If true, the value will be inserted as a CLOB (setClob or setNClob). If false or omitted (default), the value will be inserted as a VARCHAR or NVARCHAR (setString or setNString)."],["body","\n\n\n"],["h1","ColumnMapping Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","name"],["body","String"],["body","Required. The name of the database column."],["body","\n"],["body","pattern"],["body","String"],["body","Use this attribute to insert a value or values from the log event in this column using a PatternLayout pattern. Simply specify any legal pattern in this attribute. Either this attribute, literal, or isEventTimestamp=\"true\" must be specified, but not more than one of these."],["body","\n"],["body","literal"],["body","String"],["body","Use this attribute to insert a literal value in this column. The value will be included directly in the insert SQL, without any quoting (which means that if you want this to be a string, your value should contain single quotes around it like this: literal=\"'Literal String'\"). This is especially useful for databases that don't support identity columns. For example, if you are using Oracle you could specify literal=\"NAME_OF_YOUR_SEQUENCE.NEXTVAL\" to insert a unique ID in an ID column. Either this attribute, pattern, or isEventTimestamp=\"true\" must be specified, but not more than one of these."],["body","\n"],["body","layout"],["body","Layout"],["body","The Layout to format the LogEvent."],["body","\n"],["body","type"],["body","String"],["body","Conversion type name, a fully-qualified class name."],["body","\n\n\n"],["h1","Example"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"error\">\n  <Appenders>\n    <JDBC name=\"databaseAppender\" tableName=\"dbo.application_log\">\n      <DataSource jndiName=\"java:/comp/env/jdbc/LoggingDataSource\" />\n      <Column name=\"eventDate\" isEventTimestamp=\"true\" />\n      <Column name=\"level\" pattern=\"%level\" />\n      <Column name=\"logger\" pattern=\"%logger\" />\n      <Column name=\"message\" pattern=\"%message\" />\n      <Column name=\"exception\" pattern=\"%ex{full}\" />\n    </JDBC>\n  </Appenders>\n  <Loggers>\n    <Root level=\"warn\">\n      <AppenderRef ref=\"databaseAppender\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"error\">\n  <Appenders>\n    <JDBC name=\"databaseAppender\" tableName=\"LOGGING.APPLICATION_LOG\">\n      <ConnectionFactory class=\"net.example.db.ConnectionFactory\" method=\"getDatabaseConnection\" />\n      <Column name=\"EVENT_ID\" literal=\"LOGGING.APPLICATION_LOG_SEQUENCE.NEXTVAL\" />\n      <Column name=\"EVENT_DATE\" isEventTimestamp=\"true\" />\n      <Column name=\"LEVEL\" pattern=\"%level\" />\n      <Column name=\"LOGGER\" pattern=\"%logger\" />\n      <Column name=\"MESSAGE\" pattern=\"%message\" />\n      <Column name=\"THROWABLE\" pattern=\"%ex{full}\" />\n    </JDBC>\n  </Appenders>\n  <Loggers>\n    <Root level=\"warn\">\n      <AppenderRef ref=\"databaseAppender\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["body","package net.example.db;\n \nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.Properties;\n \nimport javax.sql.DataSource;\n \nimport org.apache.commons.dbcp.DriverManagerConnectionFactory;\nimport org.apache.commons.dbcp.PoolableConnection;\nimport org.apache.commons.dbcp.PoolableConnectionFactory;\nimport org.apache.commons.dbcp.PoolingDataSource;\nimport org.apache.commons.pool.impl.GenericObjectPool;\n \npublic class ConnectionFactory {\n    private static interface Singleton {\n        final ConnectionFactory INSTANCE = new ConnectionFactory();\n    }\n \n    private final DataSource dataSource;\n \n    private ConnectionFactory() {\n        Properties properties = new Properties();\n        properties.setProperty(\"user\", \"logging\");\n        properties.setProperty(\"password\", \"abc123\"); // or get properties from some configuration file\n \n        GenericObjectPool<PoolableConnection> pool = new GenericObjectPool<PoolableConnection>();\n        DriverManagerConnectionFactory connectionFactory = new DriverManagerConnectionFactory(\n                \"jdbc:mysql://example.org:3306/exampleDb\", properties\n        );\n        new PoolableConnectionFactory(\n                connectionFactory, pool, null, \"SELECT 1\", 3, false, false, Connection.TRANSACTION_READ_COMMITTED\n        );\n \n        this.dataSource = new PoolingDataSource(pool);\n    }\n \n    public static Connection getDatabaseConnection() throws SQLException {\n        return Singleton.INSTANCE.dataSource.getConnection();\n    }\n}\n"],["body","\n"],["body","The following configuration uses a MessageLayout to indicate that the Appender should match the keys of a MapMessage to the names of ColumnMappings when setting the values of the Appender's SQL INSERT statement. This let you insert rows for custom values in a database table based on a Log4j MapMessage instead of values from LogEvents."],["body","\n"],["body","<Configuration status=\"debug\">\n \n  <Appenders>\n    <Console name=\"STDOUT\">\n      <PatternLayout pattern=\"%C{1.} %m %level MDC%X%n\"/>\n    </Console>\n    <Jdbc name=\"databaseAppender\" tableName=\"dsLogEntry\" ignoreExceptions=\"false\">\n      <DataSource jndiName=\"java:/comp/env/jdbc/TestDataSourceAppender\" />\n      <ColumnMapping name=\"Id\" />\n      <ColumnMapping name=\"ColumnA\" />\n      <ColumnMapping name=\"ColumnB\" />\n      <MessageLayout />\n    </Jdbc>\n  </Appenders>\n \n  <Loggers>\n    <Logger name=\"org.apache.logging.log4j.core.appender.db\" level=\"debug\" additivity=\"false\">\n      <AppenderRef ref=\"databaseAppender\" />\n    </Logger>\n \n    <Root level=\"fatal\">\n      <AppenderRef ref=\"STDOUT\"/>\n    </Root>\n  </Loggers>\n \n</Configuration>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/RoutingAppender.html"],["title","RoutingAppender.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","RoutingAppender"],["body","\n"],["body","RoutingAppender 评估 LogEvents，然后将它们路由到下级 Appender。"],["body","\n"],["body","目标 Appender 可能是之前配置的一个 appender，可以通过它的名字来引用，也可以根据需要动态创建 Appender。 "],["body","\n"],["body","RoutingAppender 应该在它引用的任何 Appender 之后配置，以允许它正确关闭。"],["body","\n"],["body","您还可以使用脚本配置 RoutingAppender：您可以在 appender 启动以及为日志事件选择路由时运行脚本。"],["body","\n"],["h1","RoutingAppender Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","Filter"],["body","Filter"],["body","A Filter to determine if the event should be handled by this Appender. More than one Filter may be used by using a CompositeFilter."],["body","\n"],["body","name"],["body","String"],["body","The name of the Appender."],["body","\n"],["body","RewritePolicy"],["body","RewritePolicy"],["body","The RewritePolicy that will manipulate the LogEvent."],["body","\n"],["body","Routes"],["body","Routes"],["body","包含一个或多个 Route 声明以标识选择 Appenders 的标准。"],["body","\n"],["body","Script"],["body","Script"],["body","This Script runs when Log4j starts the RoutingAppender and returns a String Route key to determine the default Route.This script is passed the following variables:RoutingAppender Script ParametersParameter NameTypeDescriptionconfigurationConfigurationThe active Configuration.staticVariablesMapA Map shared between all script invocations for this appender instance. This is the same map passed to the Routes Script."],["body","\n"],["body","ignoreExceptions"],["body","boolean"],["body","The default is true, causing exceptions encountered while appending events to be internally logged and then ignored. When set to false exceptions will be propagated to the caller, instead. You must set this to false when wrapping this Appender in a FailoverAppender."],["body","\n\n\n"],["body","在此示例中，脚本使“ServiceWindows”路由成为 Windows 上的默认路由，而“ServiceOther”则成为所有其他操作系统上的默认路由。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\" name=\"RoutingTest\">\n  <Appenders>\n    <Routing name=\"Routing\">\n      <Script name=\"RoutingInit\" language=\"JavaScript\"><![CDATA[\n        importPackage(java.lang);\n        System.getProperty(\"os.name\").search(\"Windows\") > -1 ? \"ServiceWindows\" : \"ServiceOther\";]]>\n      </Script>\n      <Routes>\n        <Route key=\"ServiceOther\">\n          <List name=\"List1\" />\n        </Route>\n        <Route key=\"ServiceWindows\">\n          <List name=\"List2\" />\n        </Route>\n      </Routes>\n    </Routing>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"Routing\" />\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["h1","Routes"],["body","\n"],["body","Routes 元素接受名为“pattern”的单个属性。"],["body","\n"],["body","该模式针对所有注册的 lookups 进行评估，结果用于选择路由。"],["body","\n"],["body","每个路由都可以配置一个 key。"],["body","\n"],["body","如果key 与评估模式的结果匹配，则将选择该路由。"],["body","\n"],["body","如果没有在 Route 上指定键，则该 Route 是默认值。"],["body","\n"],["body","默认只能配置一个Route。"],["body","\n"],["body","Routes 元素可能包含一个 Script 子元素。"],["body","\n"],["body","如果指定，则为每个日志事件运行脚本并返回要使用的字符串路由键。"],["body","\n"],["body","您必须指定模式属性或脚本元素，但不能同时指定两者。"],["body","\n"],["body","每个 Route 必须引用一个 Appender。"],["body","\n"],["body","如果 Route 包含 ref 属性，则 Route 将引用在配置中定义的 Appender。"],["body","\n"],["body","如果 Route 包含 Appender 定义，则 Appender 将在 RoutingAppender 的上下文中创建，并且每次通过 Route 引用匹配的 Appender 名称时都会重用。"],["body","\n"],["body","该脚本传递了以下变量："],["body","\n"],["body","RoutingAppender Routes Script Parameters"],["body","\n"],["body","Parameter Name"],["body","Type"],["body","Description"],["body","\n"],["body","configuration"],["body","Configuration"],["body","The active Configuration."],["body","\n"],["body","staticVariables"],["body","Map"],["body","A Map shared between all script invocations for this appender instance. This is the same map passed to the Routes Script."],["body","\n"],["body","logEvent"],["body","LogEvent"],["body","The log event."],["body","\n\n\n"],["body","在此示例中，脚本针对每个日志事件运行，并根据名为“AUDIT”的标记的存在选择路由。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\" name=\"RoutingTest\">\n  <Appenders>\n    <Console name=\"STDOUT\" target=\"SYSTEM_OUT\" />\n    <Flume name=\"AuditLogger\" compress=\"true\">\n      <Agent host=\"192.168.10.101\" port=\"8800\"/>\n      <Agent host=\"192.168.10.102\" port=\"8800\"/>\n      <RFC5424Layout enterpriseNumber=\"18060\" includeMDC=\"true\" appName=\"MyApp\"/>\n    </Flume>\n    <Routing name=\"Routing\">\n      <Routes>\n        <Script name=\"RoutingInit\" language=\"JavaScript\"><![CDATA[\n          if (logEvent.getMarker() != null && logEvent.getMarker().isInstanceOf(\"AUDIT\")) {\n                return \"AUDIT\";\n            } else if (logEvent.getContextMap().containsKey(\"UserId\")) {\n                return logEvent.getContextMap().get(\"UserId\");\n            }\n            return \"STDOUT\";]]>\n        </Script>\n        <Route>\n          <RollingFile\n              name=\"Rolling-${mdc:UserId}\"\n              fileName=\"${mdc:UserId}.log\"\n              filePattern=\"${mdc:UserId}.%i.log.gz\">\n            <PatternLayout>\n              <pattern>%d %p %c{1.} [%t] %m%n</pattern>\n            </PatternLayout>\n            <SizeBasedTriggeringPolicy size=\"500\" />\n          </RollingFile>\n        </Route>\n        <Route ref=\"AuditLogger\" key=\"AUDIT\"/>\n        <Route ref=\"STDOUT\" key=\"STDOUT\"/>\n      </Routes>\n      <IdlePurgePolicy timeToLive=\"15\" timeUnit=\"minutes\"/>\n    </Routing>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"Routing\" />\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["h1","Purge Policy"],["body","\n"],["body","outingAppender 可以配置 PurgePolicy，其目的是停止和删除由 RoutingAppender 动态创建的休眠 Appender。 "],["body","\n"],["body","Log4j 当前提供 IdlePurgePolicy 作为唯一可用于清理 Appenders 的 PurgePolicy。 "],["body","\n"],["body","IdlePurgePolicy 接受 2 个属性； "],["body","\n"],["body","timeToLive，这是 Appender 在没有任何事件发送给它的情况下应该存活的 timeUnits 的数量，以及 timeUnit，java.util.concurrent.TimeUnit 的 String 表示，与 timeToLive 属性一起使用。"],["body","\n"],["body","下面是一个示例配置，它使用 RoutingAppender 将所有 Audit 事件路由到 FlumeAppender，所有其他事件将路由到仅捕获特定事件类型的 RollingFileAppender。"],["body","\n"],["body","请注意， AuditAppender 是预定义的，而 RollingFileAppenders 是根据需要创建的。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"warn\" name=\"MyApp\" packages=\"\">\n  <Appenders>\n    <Flume name=\"AuditLogger\" compress=\"true\">\n      <Agent host=\"192.168.10.101\" port=\"8800\"/>\n      <Agent host=\"192.168.10.102\" port=\"8800\"/>\n      <RFC5424Layout enterpriseNumber=\"18060\" includeMDC=\"true\" appName=\"MyApp\"/>\n    </Flume>\n    <Routing name=\"Routing\">\n      <Routes pattern=\"$${sd:type}\">\n        <Route>\n          <RollingFile name=\"Rolling-${sd:type}\" fileName=\"${sd:type}.log\"\n                       filePattern=\"${sd:type}.%i.log.gz\">\n            <PatternLayout>\n              <pattern>%d %p %c{1.} [%t] %m%n</pattern>\n            </PatternLayout>\n            <SizeBasedTriggeringPolicy size=\"500\" />\n          </RollingFile>\n        </Route>\n        <Route ref=\"AuditLogger\" key=\"Audit\"/>\n      </Routes>\n      <IdlePurgePolicy timeToLive=\"15\" timeUnit=\"minutes\"/>\n    </Routing>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"Routing\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/appenders/README.html"],["title","appenders - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Appenders"],["body","\n\n"],["body","\n"],["body","Appenders 负责将 LogEvents 传送到目的地。"],["body","\n"],["body","\n"],["body","\n"],["body","每个 Appender 都必须实现 Appender 接口。"],["body","\n"],["body","\n"],["body","\n"],["body","大多数 Appender 将扩展 AbstractAppender，它添加 Lifecycle 和可过滤支持。"],["body","\n"],["body","\n"],["body","\n"],["body","Lifecycle 允许组件在配置完成后完成初始化并在关闭期间执行清理。 "],["body","\n"],["body","\n"],["body","\n"],["body","Filterable 允许组件附加过滤器，这些过滤器在事件处理期间进行过滤 。"],["body","\n"],["body","\n\n"],["body","Appender 通常只负责将事件数据写入目标目的地。"],["body","\n"],["body","在大多数情况下，他们将事件格式化的责任委托给布局。"],["body","\n"],["body","一些 appender 包装其他 appender，以便它们可以 修改 LogEvent，处理 Appender 中的故障，"],["body","\n"],["body","根据高级过滤器标准将事件 路由 到下级 Appender，或提供类似功能但  不直接格式化事件"],["body","\n"],["body","Appenders 总是有一个名称，以便它们可以从 Loggers 中引用。"],["body","\n"],["body","在下表中，“类型”列对应于预期的 Java 类型。"],["body","\n"],["body","对于非 JDK 类，除非另有说明，否则这些类通常应位于 Log4j Core 中。"],["body","\n"],["h1","预定义的Appenders"],["body","\n"],["headingLink","asyncappender"],["heading","AsyncAppender"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/log4j2配置/高级配置.html"],["title","高级配置.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Scripts"],["body","\n"],["body","Log4j 支持在其某些组件中使用 JSR 223 脚本语言。"],["body","\n"],["body","可以使用任何为 JSR 223 脚本引擎提供支持的语言。"],["body","\n"],["body","可以在脚本引擎网站上找到语言和它们的绑定列表。"],["body","\n"],["body","但是，其中列出的一些语言（例如 JavaScript、Groovy 和 Beanshell）直接支持 JSR 223 脚本框架，并且只需要安装该语言的 jar。"],["body","\n"],["body","The components that support using scripts do so by allowing a <script>, <scriptFile>, or <scriptRef> element to be configured on them"],["body","\n\n"],["body","\n"],["body","script元素包含脚本名称、脚本语言和脚本文本。 "],["body","\n"],["body","\n"],["body","\n"],["body","scriptFile 元素包含脚本的名称、位置、语言、字符集以及是否应监视文件的更改。"],["body","\n"],["body","\n"],["body","\n"],["body","scriptRef 元素包含在 配置元素中定义的脚本的名称"],["body","\n"],["body","\n"],["body","\n"],["body","脚本的名称用于存储脚本及其 ScriptEngine，因此每次需要运行脚本时都可以快速定位"],["body","\n"],["body","\n"],["body","\n"],["body","虽然名称不是必需的，但提供它有助于在脚本运行时调试问题。"],["body","\n"],["body","\n"],["body","\n"],["body","必须在脚本元素上提供语言，并且必须指定出现在配置状态日志中的语言名称之一，如下一节所述"],["body","\n"],["body","\n"],["body","\n"],["body","如果未在 scriptFile 元素上指定语言，则语言将由脚本路径的文件扩展名确定"],["body","\n"],["body","\n"],["body","\n"],["body","如果请求文件监视，则只有在配置元素上指定了非零的 monitorInterval 时才会启用它。该间隔将用于检查文件中的更改。"],["body","\n"],["body","\n\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"debug\" name=\"RoutingTest\">\n  <Scripts>\n    <Script name=\"selector\" language=\"javascript\"><![CDATA[\n            var result;\n            if (logEvent.getLoggerName().equals(\"JavascriptNoLocation\")) {\n                result = \"NoLocation\";\n            } else if (logEvent.getMarker() != null && logEvent.getMarker().isInstanceOf(\"FLOW\")) {\n                result = \"Flow\";\n            }\n            result;\n            ]]></Script>\n    <ScriptFile name=\"groovy.filter\" path=\"scripts/filter.groovy\"/>\n  </Scripts>\n \n  <Appenders>\n    <Console name=\"STDOUT\">\n      <ScriptPatternSelector defaultPattern=\"%d %p %m%n\">\n        <ScriptRef ref=\"selector\"/>\n          <PatternMatch key=\"NoLocation\" pattern=\"[%-5level] %c{1.} %msg%n\"/>\n          <PatternMatch key=\"Flow\" pattern=\"[%-5level] %c{1.} ====== %C{1.}.%M:%L %msg ======%n\"/>\n      </ScriptPatternSelector>\n      <PatternLayout pattern=\"%m%n\"/>\n    </Console>\n  </Appenders>\n \n  <Loggers>\n    <Logger name=\"EventLogger\" level=\"info\" additivity=\"false\">\n        <ScriptFilter onMatch=\"ACCEPT\" onMisMatch=\"DENY\">\n          <Script name=\"GroovyFilter\" language=\"groovy\"><![CDATA[\n            if (logEvent.getMarker() != null && logEvent.getMarker().isInstanceOf(\"FLOW\")) {\n                return true;\n            } else if (logEvent.getContextMap().containsKey(\"UserId\")) {\n                return true;\n            }\n            return false;\n            ]]>\n          </Script>\n        </ScriptFilter>\n      <AppenderRef ref=\"STDOUT\"/>\n    </Logger>\n \n    <Root level=\"error\">\n      <ScriptFilter onMatch=\"ACCEPT\" onMisMatch=\"DENY\">\n        <ScriptRef ref=\"groovy.filter\"/>\n      </ScriptFilter>\n      <AppenderRef ref=\"STDOUT\"/>\n    </Root>\n  </Loggers>\n \n</Configuration>\n"],["body","\n"],["body","如果 Configuration 元素上的 status 属性设置为 DEBUG，则会列出当前安装的脚本引擎列表及其属性。"],["body","\n"],["body","尽管有些引擎可能会说它们不是线程安全的，但如果引擎通告它不是线程安全的，Log4j 会采取措施确保脚本以线程安全的方式运行。"],["body","\n"],["body","当脚本被执行时，它们将被提供一组变量，这些变量应该允许它们完成预期执行的任何任务。"],["body","\n"],["body","有关脚本可用的变量列表，请参阅各个组件的文档。"],["body","\n"],["body","支持脚本编写的组件期望将返回值传递回调用 Java 代码。"],["body","\n"],["body","这对于一些脚本语言来说不是问题，但 Javascript 不允许 return 语句，除非它在函数内。"],["body","\n"],["body","但是，Javascript 将返回脚本中执行的最后一条语句的值。"],["body","\n"],["body","因此，如下所示的代码将导致所需的行为。"],["body","\n"],["body","       var result;\n            if (logEvent.getLoggerName().equals(\"JavascriptNoLocation\")) {\n                result = \"NoLocation\";\n            } else if (logEvent.getMarker() != null && logEvent.getMarker().isInstanceOf(\"FLOW\")) {\n                result = \"Flow\";\n            }\n            result;\n"],["body","\n"],["h1","XInclude"],["body","\n"],["body","XML 配置文件可以包含其他带有 XInclude 的文件。"],["body","\n"],["body","这是一个示例 log4j2.xml 文件，其中包含另外两个文件："],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration xmlns:xi=\"http://www.w3.org/2001/XInclude\"\n               status=\"warn\" name=\"XIncludeDemo\">\n  <properties>\n    <property name=\"filename\">xinclude-demo.log</property>\n  </properties>\n  <ThresholdFilter level=\"debug\"/>\n  <xi:include href=\"log4j-xinclude-appenders.xml\" />\n  <xi:include href=\"log4j-xinclude-loggers.xml\" />\n</configuration>\n"],["body","\n"],["body","log4j-xinclude-appenders.xml"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<appenders>\n  <Console name=\"STDOUT\">\n    <PatternLayout pattern=\"%m%n\" />\n  </Console>\n  <File name=\"File\" fileName=\"${filename}\" bufferedIO=\"true\" immediateFlush=\"true\">\n    <PatternLayout>\n      <pattern>%d %p %C{1.} [%t] %m%n</pattern>\n    </PatternLayout>\n  </File>\n</appenders>\n"],["body","\n"],["body","log4j-xinclude-loggers.xml:"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?><loggers>  <logger name=\"org.apache.logging.log4j.test1\" level=\"debug\" additivity=\"false\">    <ThreadContextMapFilter>      <KeyValuePair key=\"test\" value=\"123\" />    </ThreadContextMapFilter>    <AppenderRef ref=\"STDOUT\" />  </logger>   <logger name=\"org.apache.logging.log4j.test2\" level=\"debug\" additivity=\"false\">    <AppenderRef ref=\"File\" />  </logger>   <root level=\"error\">    <AppenderRef ref=\"STDOUT\" />  </root></loggers>\n"],["body","\n"],["h1","Composite Configuration"],["body","\n"],["body","Log4j 允许使用多个配置文件，方法是在 log4j.configurationFile 上将它们指定为逗号分隔的文件路径列表，或者在使用 url 时，通过添加辅助配置位置作为名为“override”的查询参数。"],["body","\n"],["body","可以通过在 log4j.mergeStrategy 属性上指定实现 MergeStrategy 接口的类来控制合并逻辑。"],["body","\n"],["body","默认合并策略将使用以下规则合并文件："],["body","\n\n"],["body","\n"],["body","全局配置属性与后面配置中的属性聚合，替换以前配置中的属性，但以下情况除外"],["body","\n\n"],["body","将使用最高状态级别"],["body","\n"],["body","将使用大于 0 的最低 monitorInterval"],["body","\n"],["body","packages are joined with comma"],["body","\n\n"],["body","\n"],["body","\n"],["body","汇总所有配置的属性.重复的属性替换了以前配置中的属性"],["body","\n"],["body","\n"],["body","\n"],["body","如果定义了多个过滤器，则过滤器将在 CompositeFilter 下聚合。由于过滤器未命名，因此可能存在重复项。"],["body","\n"],["body","\n"],["body","\n"],["body","脚本和脚本文件引用被聚合。重复的定义取代了先前配置中的定义."],["body","\n"],["body","\n"],["body","\n"],["body","Appender 是聚合的。具有相同名称的 Appender 被后面的配置中的 Appender 替换，包括 Appender 的所有子组件"],["body","\n"],["body","\n"],["body","\n"],["body","记录器都是聚合的。记录器属性单独合并，重复项被后续配置中的那些属性替换。 "],["body","\n"],["body","Logger 上的 Appender 引用被聚合，重复项被后面的配置中的那些替换。如果定义了多个过滤器，则 Logger 上的过滤器将在 CompositeFilter 下聚合。由于过滤器未命名，因此可能存在重复项。包含或丢弃 Appender 引用下的过滤器取决于是保留还是丢弃其父 Appender 引用。"],["body","\n"],["body","\n\n"],["h1","Status Messages"],["body","\n"],["body","Troubleshooting tip for the impatient:"],["body","\n"],["body","从 log4j-2.9 开始，如果定义了系统属性 log4j2.debug（具有任何值或没有值），log4j2 会将所有内部日志记录打印到控制台。"],["body","\n"],["body","在 log4j-2.9 之前，有两个地方可以控制内部日志记录： "],["body","\n\n"],["body","\n"],["body","在找到配置之前，可以使用系统属性 org.apache.logging.log4j.simplelog.StatusLogger.level 控制状态记录器级别。"],["body","\n"],["body","\n"],["body","\n"],["body","找到配置后，可以在配置文件中使用“status”属性控制状态记录器级别，例如：<Configuration status=\"trace\">."],["body","\n"],["body","\n\n"],["body","正如希望能够诊断应用程序中的问题一样，经常需要能够诊断日志配置或已配置组件中的问题。"],["body","\n"],["body","由于尚未配置日志记录，因此在初始化期间无法使用“正常”日志记录。"],["body","\n"],["body","此外，appender 中的正常日志记录可能会创建无限递归，Log4j 将检测到该递归并导致递归事件被忽略。"],["body","\n"],["body","为了满足这种需求，Log4j 2 API 包含一个 StatusLogger。"],["body","\n"],["body","protected final static Logger logger = StatusLogger.getLogger();\n"],["body","\n"],["body","由于 StatusLogger 实现了 Log4j 2 API 的 Logger 接口，因此可以使用所有正常的 Logger 方法。"],["body","\n"],["body","在配置 Log4j 时，有时需要查看生成的状态事件。"],["body","\n"],["body","这可以通过将 status 属性添加到配置元素来完成，或者可以通过设置“Log4jDefaultStatusLevel”系统属性来提供默认值。 "],["body","\n"],["body","status 属性的有效值为“trace”、“debug”、“info”、“warn”、“error”和“fatal”。"],["body","\n"],["h1","Testing in Maven"],["body","\n"],["body","Maven 可以在构建周期中运行单元和功能测试。"],["body","\n"],["body","默认情况下，放置在 src/test/resources 中的任何文件都会自动复制到 target/test-classes 并在执行任何测试期间包含在类路径中。"],["body","\n"],["body","因此，将 log4j2-test.xml 放入此目录将导致使用它而不是可能存在的 log4j2.xml 或 log4j2.json。"],["body","\n"],["body","因此，在测试期间可以使用不同于生产中使用的日志配置。 "],["body","\n"],["body","Log4j 2 广泛使用的第二种方法是在 junit 测试类中用 @BeforeClass 注释的方法中设置 log4j.configurationFile 属性。"],["body","\n"],["body","这将允许在测试期间使用任意命名的文件。 "],["body","\n"],["body","Log4j 2 也广泛使用的第三种方法是使用 LoggerContextRule JUnit 测试规则，它为测试提供了额外的便利方法。"],["body","\n"],["body","这需要将 log4j-core test-jar 依赖项添加到您的测试范围依赖项中。"],["body","\n"],["body","public class AwesomeTest {\n    @Rule\n    public LoggerContextRule init = new LoggerContextRule(\"MyTestConfig.xml\");\n \n    @Test\n    public void testSomeAwesomeFeature() {\n        final LoggerContext ctx = init.getLoggerContext();\n        final Logger logger = init.getLogger(\"org.apache.logging.log4j.my.awesome.test.logger\");\n        final Configuration cfg = init.getConfiguration();\n        final ListAppender app = init.getListAppender(\"List\");\n        logger.warn(\"Test message\");\n        final List<LogEvent> events = app.getEvents();\n        // etc.\n    }\n}\n"],["body","\n"],["h1","System Properties"],["body","\n"],["body","Log4j 文档引用了许多系统属性，可用于控制 Log4j 2 行为的各个方面。"],["body","\n"],["body","下表列出了这些属性以及它们的默认值和它们控制的内容的描述。"],["body","\n"],["body","属性名称中存在的任何空格都用于视觉流，应删除。"],["body","\n"],["body","请注意，从 Log4j 2.10 开始，所有系统属性名称都已规范化以遵循一致的命名方案。"],["body","\n"],["body","虽然仍支持旧的属性名称以实现向后兼容性，但建议更新配置以使用新样式。"],["body","\n"],["body","该系统是可扩展的，并通过 PropertySource 接口启用。"],["body","\n"],["body","可以通过 Java SE 中的标准 ServiceLoader 机制添加其他属性源类。"],["body","\n"],["body","属性可以被优先级较低的源覆盖（例如，-100 在 100 之前）。"],["body","\n"],["body","默认情况下，以下来源都是可用的："],["body","\n"],["body","Source"],["body","Priority"],["body","Description"],["body","\n"],["body","Environment Variables"],["body","-100"],["body","环境变量都以LOG4J_为前缀，全部大写，单词之间用下划线分隔。只有这个命名方案支持环境变量，因为没有旧的命名方案来保持兼容性。"],["body","\n"],["body","log4j2.component.properties file"],["body","0"],["body","在类路径中包含此文件可用作提供属性作为系统属性的替代方法。这优先于系统属性，但它们可以被如上所述的环境变量覆盖。"],["body","\n"],["body","System Properties"],["body","100"],["body","所有属性都可以使用正常的系统属性模式设置。"],["body","它们具有最低优先级，可以被包含的属性文件或环境变量覆盖。"],["body","\n\n\n"],["body","以下是可用全局配置属性的列表。"],["body","\n"],["body","请注意，与配置文件中可用的配置设置不同，这些只能为每个 JVM 进程设置一次。"],["body","\n"],["body","属性名称列包含在属性文件和系统属性中使用的名称； "],["body","\n"],["body","Environemt Variable 为等效的环境变量；"],["body","\n"],["body","和 2.10 之前的名称的旧属性名称。"],["body","\n"],["body","Property Name (Legacy Property Name)"],["body","Environment Variable"],["body","Default Value"],["body","Description"],["body","\n"],["body","log4j2.configurationFile (log4j.configurationFile)"],["body","LOG4J_CONFIGURATION_FILE"],["body","Log4j 2 配置文件的路径。"],["body","还可能包含逗号分隔的配置文件名列表。可能包含一个 URL。"],["body","当指定为 URL 时，“覆盖”查询参数可用于指定其他配置文件位置。"],["body","\n"],["body","log4j2.debug (log4j2.debug)"],["body","LOG4J_DEBUG"],["body","Log4j2 will print all internal logging to the console if system property log4j2.debug is defined (with any or no value)."],["body","\n"],["body","log4j2.mergeStrategy (log4j.mergeStrategy)"],["body","LOG4J_MERGE_STRATEGY"],["body","The name of the class that implements the MergeStrategy interface. If not specified DefaultMergeStrategy will be used when creating a CompositeConfiguration.."],["body","\n"],["body","log4j2.contextSelector (Log4jContextSelector)"],["body","LOG4J_CONTEXT_SELECTOR"],["body","ClassLoaderContextSelector"],["body","Creates the LoggerContexts. An application can have one or more active LoggerContexts depending on the circumstances. See Log Separation for more details. Available context selector implementation classes: org.apache.logging.log4j.core.async .AsyncLoggerContextSelector - makes all loggers asynchronous. org.apache.logging.log4j.core.selector .BasicContextSelector - creates a single shared LoggerContext. org.apache.logging.log4j.core.selector .ClassLoaderContextSelector - separate LoggerContexts for each web application. org.apache.logging.log4j.core.selector .JndiContextSelector - use JNDI to locate each web application's LoggerContext. org.apache.logging.log4j.core.osgi .BundleContextSelector - separate LoggerContexts for each OSGi bundle."],["body","\n"],["body","log4j2.logEventFactory (Log4jLogEventFactory)"],["body","LOG4J_LOG_EVENT_FACTORY"],["body","org.apache.logging.log4j.core.impl .DefaultLogEventFactory"],["body","Factory class used by LoggerConfig to create LogEvent instances. (Ignored when the AsyncLoggerContextSelector is used.)"],["body","\n"],["body","log4j2.loggerContextFactory (log4j2.loggerContextFactory)"],["body","LOG4J_LOGGER_CONTEXT_FACTORY"],["body","org.apache.logging.log4j.simple .SimpleLoggerContextFactory"],["body","Factory class used by LogManager to bootstrap the logging implementation. The core jar provides org.apache.logging.log4j.core .impl.Log4jContextFactory."],["body","\n"],["body","log4j2.configurationFactory (log4j.configurationFactory)"],["body","LOG4J_CONFIGURATION_FACTORY"],["body","Fully specified class name of a class extending org.apache.logging.log4j.core .config.ConfigurationFactory. If specified, an instance of this class is added to the list of configuration factories."],["body","\n"],["body","log4j2.shutdownHookEnabled (log4j.shutdownHookEnabled)"],["body","LOG4J_SHUTDOWN_"],["body","HOOK_ENABLED"],["body","true"],["body","Overrides the global flag for whether or not a shutdown hook should be used to stop a LoggerContext. By default, this is enabled and can be disabled on a per-configuration basis. When running with the log4j-web module, this is automatically disabled."],["body","\n"],["body","log4j2.shutdownCallbackRegistry (log4j.shutdownCallbackRegistry)"],["body","LOG4J_SHUTDOWN_"],["body","CALLBACK_REGISTRY"],["body","org.apache.logging.log4j.core.util .DefaultShutdownCallbackRegistry"],["body","Fully specified class name of a class implementing ShutdownCallbackRegistry. If specified, an instance of this class is used instead of DefaultShutdownCallbackRegistry. The specified class must have a default constructor."],["body","\n"],["body","log4j2.clock (log4j.Clock)"],["body","LOG4J_CLOCK"],["body","SystemClock"],["body","Implementation of the org.apache.logging.log4j .core.util.Clock interface that is used for timestamping the log events. By default, System.currentTimeMillis is called on every log event. You can also specify a fully qualified class name of a custom class that implements the Clock interface."],["body","\n"],["body","log4j2.level (org.apache.logging.log4j.level)"],["body","LOG4J_LEVEL"],["body","ERROR"],["body","Log level of the default configuration. The default configuration is used if the ConfigurationFactory could not successfully create a configuration (e.g. no log4j2.xml file was found)."],["body","\n"],["body","log4j2.disableThreadContext (disableThreadContext)"],["body","LOG4J_DISABLE_"],["body","THREAD_CONTEXT"],["body","false"],["body","If true, the ThreadContext stack and map are disabled. (May be ignored if a custom ThreadContext map is specified.)"],["body","\n"],["body","log4j2.disableThreadContextStack (disableThreadContextStack)"],["body","LOG4J_DISABLE_THREAD_"],["body","CONTEXT_STACK"],["body","false"],["body","If true, the ThreadContext stack is disabled."],["body","\n"],["body","log4j2.disableThreadContextMap (disableThreadContextMap)"],["body","LOG4J_DISABLE_THREAD_"],["body","CONTEXT_MAP"],["body","false"],["body","If true, the ThreadContext map is disabled. (May be ignored if a custom ThreadContext map is specified.)"],["body","\n"],["body","log4j2.threadContextMap (log4j2.threadContextMap)"],["body","LOG4J_THREAD_CONTEXT_MAP"],["body","Fully specified class name of a custom ThreadContextMap implementation class."],["body","\n"],["body","log4j2.isThreadContextMapInheritable (isThreadContextMapInheritable)"],["body","LOG4J_IS_THREAD_CONTEXT"],["body","_MAP_INHERITABLE"],["body","false"],["body","If true use a InheritableThreadLocal to implement the ThreadContext map. Otherwise, use a plain ThreadLocal. (May be ignored if a custom ThreadContext map is specified.)"],["body","\n"],["body","log4j2.contextDataInjector (log4j2.ContextDataInjector)"],["body","LOG4J_CONTEXT_DATA_INJECTOR"],["body","Fully specified class name of a custom ContextDataInjector implementation class."],["body","\n"],["body","log4j2.garbagefreeThreadContextMap (log4j2.garbagefree.threadContextMap)"],["body","LOG4J_GARBAGEFREE_"],["body","THREAD_CONTEXT_MAP"],["body","false"],["body","Specify \"true\" to make the ThreadContext map garbage-free."],["body","\n"],["body","log4j2.disableJmx (log4j2.disable.jmx)"],["body","LOG4J_DISABLE_JMX"],["body","false"],["body","If true, Log4j configuration objects like LoggerContexts, Appenders, Loggers, etc. will not be instrumented with MBeans and cannot be remotely monitored and managed."],["body","\n"],["body","log4j2.jmxNotifyAsync (log4j2.jmx.notify.async)"],["body","LOG4J_JMX_NOTIFY_ASYNC"],["body","false for web apps, true otherwise"],["body","If true, log4j's JMX notifications are sent from a separate background thread, otherwise they are sent from the caller thread. If system property log4j2.is.webapp is true or the javax.servlet.Servlet class is on the classpath, the default behaviour is to use the caller thread to send JMX notifications."],["body","\n"],["body","log4j2.skipJansi (log4j.skipJansi)"],["body","LOG4J_SKIP_JANSI"],["body","true"],["body","If true, the ConsoleAppender will not try to use the Jansi output stream on Windows."],["body","\n"],["body","log4j2.ignoreTCL (log4j.ignoreTCL)"],["body","LOG4J_IGNORE_TCL"],["body","false"],["body","If true, classes are only loaded with the default class loader. Otherwise, an attempt is made to load classes with the current thread's context class loader before falling back to the default class loader."],["body","\n"],["body","log4j2.uuidSequence (org.apache.logging.log4j.uuidSequence)"],["body","LOG4J_UUID_SEQUENCE"],["body","0"],["body","System property that may be used to seed the UUID generation with an integer value."],["body","\n"],["body","log4j2.simplelogShowContextMap (org.apache.logging.log4j .simplelog.showContextMap)"],["body","LOG4J_SIMPLELOG_SHOW"],["body","_CONTEXT_MAP"],["body","false"],["body","If true, the full ThreadContext map is included in each SimpleLogger log message."],["body","\n"],["body","log4j2.simplelogShowlogname (org.apache.logging.log4j .simplelog.showlogname)"],["body","LOG4J_SIMPLELOG_SHOWLOGNAME"],["body","false"],["body","If true, the logger name is included in each SimpleLogger log message."],["body","\n"],["body","log4j2.simplelogShowShortLogname (org.apache.logging.log4j .simplelog.showShortLogname)"],["body","LOG4J_SIMPLELOG_SHOW_"],["body","SHORT_LOGNAME"],["body","true"],["body","If true, only the last component of a logger name is included in SimpleLogger log messages. (E.g., if the logger name is \"mycompany.myproject.mycomponent\", only \"mycomponent\" is logged."],["body","\n"],["body","log4j2.simplelogShowdatetime (org.apache.logging.log4j .simplelog.showdatetime)"],["body","LOG4J_SIMPLELOG_SHOWDATETIME"],["body","false"],["body","If true, SimpleLogger log messages contain timestamp information."],["body","\n"],["body","log4j2.simplelogDateTimeFormat (org.apache.logging.log4j .simplelog.dateTimeFormat)"],["body","LOG4J_SIMPLELOG_"],["body","DATE_TIME_FORMAT"],["body","\"yyyy/MM/dd HH:mm:ss:SSS zzz\""],["body","Date-time format to use. Ignored if org.apache.logging.log4j .simplelog.showdatetime is false."],["body","\n"],["body","log4j2.simplelogLogFile (org.apache.logging.log4j .simplelog.logFile)"],["body","LOG4J_SIMPLELOG_LOG_FILE"],["body","system.err"],["body","\"system.err\" (case-insensitive) logs to System.err, \"system.out\" (case-insensitive) logs to System.out, any other value is interpreted as a file name to save SimpleLogger messages to."],["body","\n"],["body","log4j2.simplelogLevel (org.apache.logging.log4j .simplelog.level)"],["body","LOG4J_SIMPLELOG_LEVEL"],["body","ERROR"],["body","Default level for new SimpleLogger instances."],["body","\n"],["body","log4j2.simplelog..level (org.apache.logging.log4j .simplelog..level)"],["body","LOG4J_SIMPLELOG_<LOGGER_NAME>_LEVEL"],["body","SimpleLogger default log level"],["body","Log level for a the SimpleLogger instance with the specified name."],["body","\n"],["body","log4j2.simplelogStatusLoggerLevel (org.apache.logging.log4j.simplelog .StatusLogger.level)"],["body","LOG4J_SIMPLELOG_STATUS"],["body","_LOGGER_LEVEL"],["body","ERROR"],["body","This property is used to control the initial StatusLogger level, and can be overridden in code by calling StatusLogger.getLogger() .setLevel(someLevel). Note that the StatusLogger level is only used to determine the status log output level until a listener is registered. In practice, a listener is registered when a configuration is found, and from that point onwards, status messages are only sent to the listeners (depending on their statusLevel)."],["body","\n"],["body","log4j2.defaultStatusLevel (Log4jDefaultStatusLevel)"],["body","LOG4J_DEFAULT_STATUS_LEVEL"],["body","ERROR"],["body","The StatusLogger logs events that occur in the logging system to the console. During configuration, AbstractConfiguration registers a StatusConsoleListener with the StatusLogger that may redirect status log events from the default console output to a file. The listener also supports fine-grained filtering. This system property specifies the default status log level for the listener to use if the configuration does not specify a status level.Note: this property is used by the log4j-core implementation only after a configuration file has been found."],["body","\n"],["body","log4j2.statusLoggerLevel (log4j2.StatusLogger.level)"],["body","LOG4J_STATUS_LOGGER_LEVEL"],["body","WARN"],["body","The initial \"listenersLevel\" of the StatusLogger. If StatusLogger listeners are added, the \"listenerLevel\" is changed to that of the most verbose listener. If any listeners are registered, the listenerLevel is used to quickly determine if an interested listener exists.By default, StatusLogger listeners are added when a configuration is found and by the JMX StatusLoggerAdmin MBean. For example, if a configuration contains , a listener with statusLevel TRACE is registered and the StatusLogger listenerLevel is set to TRACE, resulting in verbose status messages displayed on the console.If no listeners are registered, the listenersLevel is not used, and the StatusLogger output level is determined by StatusLogger.getLogger().getLevel() (see property org.apache.logging.log4j.simplelog .StatusLogger.level)."],["body","\n"],["body","log4j2.statusEntries (log4j2.status.entries)"],["body","LOG4J_STATUS_ENTRIES"],["body","200"],["body","Number of StatusLogger events that are kept in a buffer and can be retrieved with StatusLogger.getStatusData()."],["body","\n"],["body","log4j2.statusLoggerDateformat (log4j2.StatusLogger.DateFormat)"],["body","LOG4J_STATUS_LOGGER"],["body","_DATEFORMAT"],["body","Date-time format string to use as the format for timestamps in the status logger output. See java.text.SimpleDateFormat for supported formats."],["body","\n"],["body","log4j2.asyncLoggerExceptionHandler (AsyncLogger.ExceptionHandler)"],["body","LOG4J_ASYNC_LOGGER"],["body","_EXCEPTION_HANDLER"],["body","default handler"],["body","See Async Logger System Properties for details."],["body","\n"],["body","log4j2.asyncLoggerRingBufferSize (AsyncLogger.RingBufferSize)"],["body","LOG4J_ASYNC_LOGGER"],["body","_RING_BUFFER_SIZE"],["body","256 * 1024 or 4 * 1024 in garbage-free mode"],["body","See Async Logger System Properties for details."],["body","\n"],["body","log4j2.asyncLoggerWaitStrategy (AsyncLogger.WaitStrategy)"],["body","LOG4J_ASYNC_LOGGER"],["body","_WAIT_STRATEGY"],["body","Timeout"],["body","See Async Logger System Properties for details."],["body","\n"],["body","log4j2.asyncLoggerTimeout (AsyncLogger.Timeout)"],["body","LOG4J_ASYNC_LOGGER_TIMEOUT"],["body","10"],["body","See Async Logger System Properties for details."],["body","\n"],["body","log4j2.asyncLoggerSleepTimeNs (AsyncLogger.SleepTimeNs)"],["body","LOG4J_ASYNC_LOGGER_SLEEP_TIME_NS"],["body","100"],["body","See Async Logger System Properties for details."],["body","\n"],["body","log4j2.asyncLoggerRetries (AsyncLogger.Retries)"],["body","LOG4J_ASYNC_LOGGER_SLEEP_TIME_NS"],["body","200"],["body","See Async Logger System Properties for details."],["body","\n"],["body","AsyncLogger.SynchronizeEnqueueWhenQueueFull"],["body","ASYNC_LOGGER_SYNCHRONIZE_"],["body","ENQUEUE_WHEN_QUEUE_FULL"],["body","true"],["body","See Async Logger System Properties for details."],["body","\n"],["body","log4j2.asyncLoggerThreadNameStrategy (AsyncLogger.ThreadNameStrategy)"],["body","LOG4J_ASYNC_LOGGER_THREAD_"],["body","NAME_STRATEGY"],["body","CACHED"],["body","See Async Logger System Properties for details."],["body","\n"],["body","log4j2.asyncLoggerConfigExceptionHandler (AsyncLoggerConfig.ExceptionHandler)"],["body","LOG4J_ASYNC_LOGGER_CONFIG_"],["body","EXCEPTION_HANDLER"],["body","default handler"],["body","See Mixed Async/Synchronous Logger System Properties for details."],["body","\n"],["body","log4j2.asyncLoggerConfigRingBufferSize (AsyncLoggerConfig.RingBufferSize)"],["body","LOG4J_ASYNC_LOGGER_CONFIG_"],["body","RING_BUFFER_SIZE"],["body","256 * 1024 or 4 * 1024 in garbage-free mode"],["body","See Mixed Async/Synchronous Logger System Properties for details."],["body","\n"],["body","log4j2.asyncLoggerConfigWaitStrategy (AsyncLoggerConfig.WaitStrategy)"],["body","LOG4J_ASYNC_LOGGER_CONFIG_"],["body","WAIT_STRATEGY"],["body","Timeout"],["body","See Mixed Async/Synchronous Logger System Properties for details."],["body","\n"],["body","AsyncLoggerConfig.SynchronizeEnqueueWhenQueueFull"],["body","ASYNC_LOGGER_CONFIG_SYNCHRONIZE"],["body","_ENQUEUE_WHEN_QUEUE_FULL"],["body","true"],["body","See Mixed Async/Synchronous Logger System Properties for details."],["body","\n"],["body","log4j2.julLoggerAdapter (log4j.jul.LoggerAdapter)"],["body","LOG4J_JUL_LOGGER_ADAPTER"],["body","org.apache.logging.log4j .jul.ApiLoggerAdapter"],["body","Default LoggerAdapter to use in the JUL adapter. By default, if log4j-core is available, then the class org.apache.logging.log4j.jul .CoreLoggerAdapter will be used. Otherwise, the ApiLogggerAdapter will be used. Custom implementations must provide a public default constructor."],["body","\n"],["body","log4j2.formatMsgAsync (log4j.format.msg.async)"],["body","LOG4J_FORMAT_MSG_ASYNC"],["body","false"],["body","If false (the default), Log4j will make sure the message is formatted in the caller thread, to ensure the value at the time of the call to the logger is the value that is logged."],["body","\n"],["body","log4j2.asyncQueueFullPolicy (log4j2.AsyncQueueFullPolicy)"],["body","LOG4J_ASYNC_QUEUE_FULL_POLICY"],["body","Used by Async Loggers and the AsyncAppender to maintain application throughput even when the underlying appender cannot keep up with the logging rate and the queue is filling up.If no value is specified (the default) events are never discarded. If the queue is full, the logger call blocks until the event can be added to the queue.Specify Discard to drop events whose level is equal or less than the threshold level (INFO by default) when the queue is full."],["body","\n"],["body","log4j2.discardThreshold (log4j2.DiscardThreshold)"],["body","LOG4J_DISCARD_THRESHOLD"],["body","INFO"],["body","Used by the DiscardingAsyncQueueFullPolicy to determine which events to drop when the queue becomes full. By default, INFO, DEBUG and TRACE level events are discarded when the queue is full. This property only has effect if Discard is specified as the log4j2.AsyncQueueFullPolicy."],["body","\n"],["body","log4j2.messageFactory (log4j2.messageFactory)"],["body","LOG4J_MESSAGE_FACTORY"],["body","org.apache.logging.log4j.message. ParameterizedMessageFactory or org.apache.logging.log4j.message. ReusableMessageFactory in garbage-free mode"],["body","Default message factory used by Loggers if no factory was specified."],["body","\n"],["body","log4j2.flowMessageFactory (log4j2.flowMessageFactory)"],["body","LOG4J_FLOW_MESSAGE_FACTORY"],["body","org.apache.logging.log4j.message. DefaultFlowMessageFactory"],["body","Default flow message factory used by Loggers."],["body","\n"],["body","log4j2.isWebapp (log4j2.is.webapp)"],["body","LOG4J_IS_WEBAPP"],["body","true if Servlet class on class path"],["body","This system property can be used to force Log4j 2 to behave as if it is part of a web application (when true) or as if it is not part of a web application (when false)."],["body","\n"],["body","log4j2.enableThreadlocals (log4j2.enable.threadlocals)"],["body","LOG4J_ENABLE_THREADLOCALS"],["body","true"],["body","This system property can be used to switch off the use of threadlocals, which will partly disable Log4j's garbage-free behaviour: to be fully garbage-free, Log4j stores objects in ThreadLocal fields to reuse them, otherwise new objects are created for each log event. Note that this property is not effective when Log4j detects it is running in a web application."],["body","\n"],["body","log4j2.enableDirectEncoders (log4j2.enable.direct.encoders)"],["body","LOG4J_ENABLE_DIRECT_ENCODERS"],["body","true"],["body","This property can be used to force garbage-aware Layouts and Appenders to revert to the pre-2.6 behaviour where converting log events to text generates temporary objects like Strings and char[] arrays, and converting this text to bytes generates temporary byte[] arrays. By default, this property is true and garbage-aware Layouts and Appenders that convert log events to text will convert this text to bytes without creating temporary objects."],["body","\n"],["body","log4j2.initialReusableMsgSize (log4j.initialReusableMsgSize)"],["body","LOG4J_INITIAL_REUSABLE_MSG_SIZE"],["body","128"],["body","In GC-free mode, this property determines the initial size of the reusable StringBuilders where the message text is formatted and potentially passed to background threads."],["body","\n"],["body","log4j2.maxReusableMsgSize (log4j.maxReusableMsgSize)"],["body","LOG4J_MAX_REUSABLE_MSG_SIZE"],["body","518"],["body","In GC-free mode, this property determines the maximum size of the reusable StringBuilders where the message text is formatted and potentially passed to background threads."],["body","\n"],["body","log4j2.layoutStringBuilderMaxSize (log4j.layoutStringBuilder.maxSize)"],["body","LOG4J_LAYOUT_STRING"],["body","_BUILDER_MAX_SIZE"],["body","2048"],["body","This property determines the maximum size of the thread-local reusable StringBuilders used to format the log event to text by Layouts that extend AbstractStringLayout."],["body","\n"],["body","log4j2.unboxRingbufferSize (log4j.unbox.ringbuffer.size)"],["body","LOG4J_UNBOX_RINGBUFFER_SIZE"],["body","32"],["body","The org.apache.logging.log4j.util.Unbox utility manages a small thread-local ring buffer of StringBuilders. Each time one of the box() methods is called, the next slot in the ring buffer is used, until the ring buffer is full and the first slot is reused. By default the Unbox ring buffer has 32 slots, so user code can have up to 32 boxed primitives in a single logger call.If more slots are required, set system property log4j.unbox.ringbuffer.size to the desired ring buffer size. Note that the specified number will be rounded up to the nearest power of 2."],["body","\n"],["body","log4j2.loggerContextStacktraceOnStart (log4j.LoggerContext.stacktrace.on.start)"],["body","LOG4J_LOGGER_CONTEXT"],["body","_STACKTRACE_ON_START"],["body","false"],["body","Prints a stacktrace to the status logger at DEBUG level when the LoggerContext is started. For debug purposes."],["body","\n"],["body","log4j2.formatMsgNoLookups (log4j2.formatMsgNoLookups)"],["body","FORMAT_MESSAGES_"],["body","PATTERN_DISABLE_LOOKUPS"],["body","false"],["body","Disables message pattern lookups globally when set to true. This is equivalent to defining all message patterns using %m{nolookups}."],["body","\n"],["body","log4j2.trustStoreLocation"],["body","LOG4J_TRUST_STORE_LOCATION"],["body","The location of the trust store. If not provided the default trust store will be used."],["body","\n"],["body","log4j2.trustStorePassword"],["body","LOG4J_TRUST_STORE_PASSWORD"],["body","Password needed to access the trust store."],["body","\n"],["body","log4j2.trustStorePasswordFile"],["body","LOG4J_TRUST_STORE_PASSWORD_FILE"],["body","The location of a file that contains the password for the trust store."],["body","\n"],["body","log4j2.trustStorePasswordEnvironmentVariable"],["body","LOG4J_TRUST_STORE_PASSWORD_"],["body","ENVIRONMENT_VARIABLE"],["body","The name of the environment variable that contains the trust store password."],["body","\n"],["body","log4j2.trustStoreType"],["body","LOG4J_TRUST_STORE_TYPE"],["body","The type of key store used for the trust store."],["body","\n"],["body","log4j2.trustStoreKeyManagerFactoryAlgorithm"],["body","LOG4J_TRUST_STORE_KEY_"],["body","MANAGER_FACTORY_ALGORITHM"],["body","Java cryptographic algorithm."],["body","\n"],["body","log4j2.keyStoreLocation"],["body","LOG4J_KEY_STORE_LOCATION"],["body","The location of the key store. If not provided the default key store will be used."],["body","\n"],["body","log4j2.keyStorePassword"],["body","LOG4J_KEY_STORE_PASSWORD"],["body","Password needed to access the key store."],["body","\n"],["body","log4j2.keyStorePasswordFile"],["body","LOG4J_KEY_STORE_PASSWORD_FILE"],["body","The location of a file that contains the password for the key store."],["body","\n"],["body","log4j2.keyStorePasswordEnvironmentVariable"],["body","LOG4J_KEY_STORE_PASSWORD_"],["body","ENVIRONMENT_VARIABLE"],["body","The name of the environment variable that contains the key store password."],["body","\n"],["body","log4j2.keyStoreType"],["body","LOG4J_KEY_STORE_TYPE"],["body","The type of key store."],["body","\n"],["body","log4j2.keyStoreKeyManagerFactoryAlgorithm"],["body","LOG4J_KEY_STORE_KEY_MANAGER_"],["body","FACTORY_ALGORITHM"],["body","Java cryptographic algorithm."],["body","\n"],["body","log4j2.sslVerifyHostName"],["body","false"],["body","true or false if the host name should be verified"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/log4j2配置/README.html"],["title","log4j2配置 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","配置方式"],["body","\n"],["body","Log4j 2 的配置可以通过以下 4 种方式中的一种来完成： "],["body","\n\n"],["body","\n"],["body","通过以 XML、JSON、YAML 或属性格式编写的配置文件。"],["body","\n"],["body","\n"],["body","\n"],["body","以编程方式，通过创建 ConfigurationFactory 和 Configuration 实现。"],["body","\n"],["body","\n"],["body","\n"],["body","以编程方式，通过调用 Configuration 接口中公开的 API 将组件添加到默认配置中。"],["body","\n"],["body","\n"],["body","\n"],["body","以编程方式，通过调用内部 Logger 类上的方法。"],["body","\n"],["body","\n\n"],["h1","Automatic Configuration"],["body","\n"],["body","Log4j 具有在初始化期间自动配置自身的能力。"],["body","\n"],["body","当 Log4j 启动时，它会定位所有 ConfigurationFactory 插件，并按从高到低的加权顺序排列它们。"],["body","\n"],["body","交付时，Log4j 包含四种 ConfigurationFactory 实现："],["body","\n\n"],["body","\n"],["body","一种用于 JSON，"],["body","\n"],["body","\n"],["body","\n"],["body","一种用于 YAML，"],["body","\n"],["body","\n"],["body","\n"],["body","一种用于 properties，"],["body","\n"],["body","\n"],["body","\n"],["body","一种用于 XML。"],["body","\n"],["body","\n"],["body","\n"],["body","Log4j 将检查“log4j2.configurationFile”系统属性，如果设置，将尝试使用与文件扩展名匹配的 ConfigurationFactory 加载配置。请注意，这不限于本地文件系统上的某个位置，并且可能包含一个 URL。"],["body","\n"],["body","\n"],["body","\n"],["body","如果未设置系统属性，则Properties ConfigurationFactory 将在类路径中查找 log4j2-test.properties。"],["body","\n"],["body","\n"],["body","\n"],["body","如果未找到此类文件，YAML ConfigurationFactory 将在类路径中查找 log4j2-test.yaml 或 log4j2-test.yml。"],["body","\n"],["body","\n"],["body","\n"],["body","如果没有找到这样的文件，JSON ConfigurationFactory 将在类路径中查找 log4j2-test.json 或 log4j2-test.jsn。"],["body","\n"],["body","\n"],["body","\n"],["body","如果没有找到这样的文件，XML ConfigurationFactory 将在类路径中查找 log4j2-test.xml。"],["body","\n"],["body","\n"],["body","\n"],["body","如果无法找到测试文件，则属性 ConfigurationFactory 将在类路径上查找 log4j2.properties。"],["body","\n"],["body","\n"],["body","\n"],["body","如果无法找到属性文件，YAML ConfigurationFactory 将在类路径上查找 log4j2.yaml 或 log4j2.yml。"],["body","\n"],["body","\n"],["body","\n"],["body","如果找不到 YAML 文件，JSON ConfigurationFactory 将在类路径上查找 log4j2.json 或 log4j2.jsn。"],["body","\n"],["body","\n"],["body","\n"],["body","如果找不到 JSON 文件，XML ConfigurationFactory 将尝试在类路径上定位 log4j2.xml。"],["body","\n"],["body","\n"],["body","\n"],["body","如果找不到配置文件，则将使用 DefaultConfiguration。这将导致日志输出进入控制台。"],["body","\n"],["body","\n\n"],["body","DefaultConfiguration 类中提供的默认配置将设置："],["body","\n\n"],["body","A ConsoleAppender attached to the root logger."],["body","\n"],["body","A PatternLayout set to the pattern \"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\" attached to the ConsoleAppender"],["body","\n\n"],["body","默认情况下 Log4j 将根记录器分配给 Level.ERROR。"],["body","\n"],["body","与默认值等效的配置如下所示："],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"WARN\">\n  <Appenders>\n    <Console name=\"Console\" target=\"SYSTEM_OUT\">\n      <PatternLayout pattern=\"%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n\"/>\n    </Console>\n  </Appenders>\n  <Loggers>\n    <Root level=\"error\">\n      <AppenderRef ref=\"Console\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["h1","Additivity"],["body","\n"],["h1","Automatic Reconfiguration"],["body","\n"],["body","从文件配置时，Log4j 能够自动检测对配置文件的更改并重新配置自身。如果在配置元素上指定了 monitorInterval 属性并将其设置为非零值，则在下次评估和/或记录日志事件时将检查该文件，并且自上次检查以来已经过去了 monitorInterval。下面的示例显示了如何配置属性，以便仅在至少 30 秒过去后才检查配置文件的更改。最小间隔为 5 秒。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration monitorInterval=\"30\">\n...\n</Configuration>\n"],["body","\n"],["headingLink","advertising-appender-配置"],["heading","Advertising appender 配置"],["body","\n"],["body","Chainsaw 可以自动处理您的日志文件（Advertising appender 配置）"],["body","\n"],["body","Log4j 提供了为所有基于文件的appenders以及基于套接字的appenders  “通告”appenders配置细节的能力。"],["body","\n"],["body","例如，对于基于文件的 appender，文件中的文件位置和模式布局都包含在通告中"],["body","\n"],["body","Chainsaw 和其他外部系统可以发现这些通告并使用该信息智能地处理日志文件。"],["body","\n"],["body","展示通告的机制以及通告格式特定于每个通告商实现。"],["body","\n"],["body","想要使用特定通告商实现的外部系统必须了解如何定位通告配置以及通告格式。"],["body","\n"],["body","例如，“数据库”广告商可以将配置细节存储在数据库表中。"],["body","\n"],["body","外部系统可以读取该数据库表以发现文件位置和文件格式。"],["body","\n"],["body","Log4j 提供了一个 Advertiser 实现，即“multicastdns”Advertiser，它使用 http://jmdns.sourceforge.net 库通过 IP 多播来通告 appender 配置详细信息。"],["body","\n"],["body","Chainsaw 自动发现 log4j 的多播dns 生成的通告"],["body","\n"],["body","并在 Chainsaw 的 Zeroconf 选项卡中显示那些发现的通告（如果 jmdns 库在 Chainsaw 的类路径中）"],["body","\n"],["body","要开始解析和跟踪通告中提供的日志文件，只需双击 Chainsaw 的 Zeroconf 选项卡中的通告条目。"],["body","\n"],["body","目前，Chainsaw 仅支持 FileAppender通告。"],["body","\n"],["body","要通告 appender 配置："],["body","\n\n"],["body","Add the JmDns library from http://jmdns.sourceforge.net to the application classpath"],["body","\n"],["body","Set the 'advertiser' attribute of the configuration element to 'multicastdns'"],["body","\n"],["body","Set the 'advertise' attribute on the appender element to 'true'"],["body","\n"],["body","If advertising a FileAppender-based configuration, set the 'advertiseURI' attribute on the appender element to an appropriate URI"],["body","\n\n"],["body","基于 FileAppender 的配置需要在 appender 上指定一个额外的“advertiseURI”属性。 "],["body","\n"],["body","'advertiseURI' 属性为 Chainsaw 提供有关如何访问文件的信息。"],["body","\n"],["body","例如，通过指定 Commons VFS (http://commons.apache.org/proper/commons-vfs/) sftp:// URI，一个 http:// URI，Chainsaw 可以通过 ssh/sftp 远程访问该文件"],["body","\n"],["body","如果文件可通过 Web 服务器访问，则可以使用；如果从本地运行的 Chainsaw 实例访问文件，则可以指定 file:// URI。"],["body","\n"],["body","这是一个启用通告的 appender 配置示例，本地运行的 Chainsaw 可以使用它来自动跟踪日志文件（注意 file://advertiseURI）："],["body","\n"],["body","请注意，您必须将来自 http://jmdns.sourceforge.net 的 JmDns 库添加到您的应用程序类路径中，以便通过“multicastdns”通告商进行通告。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration advertiser=\"multicastdns\">\n...\n</Configuration>\n<Appenders>\n  <File name=\"File1\" fileName=\"output.log\" bufferedIO=\"false\" advertiseURI=\"file://path/to/output.log\" advertise=\"true\">\n  ...\n  </File>\n</Appenders>\n"],["body","\n"],["h1","Configuration Syntax"],["body","\n"],["body","从 version 2.9 开始，出于安全原因，Log4j 不会处理 XML 文件中的 DTD。"],["body","\n"],["body","如果要将配置拆分为多个文件，请使用 XInclude 或 Composite Configuration。"],["body","\n"],["body","Log4j 允许您轻松地重新定义日志记录行为，而无需修改您的应用程序"],["body","\n\n"],["body","\n"],["body","可以禁用应用程序的某些部分的日志记录，"],["body","\n"],["body","\n"],["body","\n"],["body","仅在满足特定条件时才记录日志，"],["body","\n"],["body","\n"],["body","\n"],["body","例如为特定用户执行的操作、路由输出到 Flume 或日志报告系统等。"],["body","\n"],["body","\n\n"],["body","能够做到这一点需要理解配置文件的语法。 "],["body","\n"],["headingLink","configuration接受几个属性"],["heading","Configuration接受几个属性："],["body","\n"],["body","Attribute Name"],["body","Description"],["body","\n"],["body","advertiser"],["body","将用于通过告单个 FileAppender 或 SocketAppender 配置的通过商插件名称"],["body","提供的唯一广告商插件是“multicastdns”。"],["body","\n"],["body","dest"],["body","Either \"err\" for stderr, \"out\" for stdout, a file path, or a URL."],["body","\n"],["body","monitorInterval"],["body","在检查文件配置更改之前必须经过的最短时间（以秒为单位）"],["body","\n"],["body","name"],["body","配置的名称。"],["body","\n"],["body","packages"],["body","用于搜索插件的以逗号分隔的软件包名称列表。"],["body","每个类加载器只加载一次插件，因此更改此值可能不会对重新配置产生任何影响。"],["body","\n"],["body","schema"],["body","标识用于定位用于验证配置的 XML 架构的类加载器的位置。"],["body","仅在strict 设置为true 时有效。"],["body","如果未设置，则不会进行架构验证。"],["body","\n"],["body","shutdownHook"],["body","指定当 JVM 关闭时 Log4j 是否应该自动关闭。"],["body","关闭挂钩默认启用，但可以通过将此属性设置为“禁用”来禁用"],["body","\n"],["body","shutdownTimeout"],["body","Specifies how many milliseconds appenders and background tasks will get to shutdown when the JVM shuts down. Default is zero which mean that each appender uses its default timeout, and don't wait for background tasks. Not all appenders will honor this, it is a hint and not an absolute guarantee that the shutdown procedure will not take longer. Setting this too low increase the risk of losing outstanding log events not yet written to the final destination. See LoggerContext.stop(long, java.util.concurrent.TimeUnit). (Not used if shutdownHook is set to \"disable\".)"],["body","\n"],["body","status"],["body","应该记录到控制台的内部 Log4j 事件的级别。"],["body","此属性的有效值为“trace”、“debug”、“info”、“warn”、“error”和“fatal”。 "],["body","Log4j 会将有关初始化、翻转和其他内部操作的详细信息记录到状态记录器中。"],["body","如果您需要对 log4j 进行故障排除，设置 status=\"trace\" 是您可以使用的首批工具之一。（或者，设置系统属性 log4j2.debug 也会将内部 Log4j2 日志记录打印到控制台，包括在配置之前发生的内部日志记录"],["body","找到了文件。）"],["body","\n"],["body","strict"],["body","允许使用严格的 XML 格式。 "],["body","JSON 配置不支持。"],["body","\n"],["body","verbose"],["body","在加载插件时启用诊断信息。"],["body","\n\n\n"],["h1","Configuration with XML"],["body","\n"],["body","Log4j 可以使用两种 XML 风格进行配置；"],["body","\n"],["body","concise and strict."],["body","\n"],["body","简洁的格式使配置变得非常容易，因为元素名称与它们所代表的组件相匹配，但无法使用 XML 模式进行验证。"],["body","\n"],["body","例如，ConsoleAppender 是通过在其父 appenders 元素下声明一个名为 Console 的 XML 元素来配置的"],["body","\n"],["body","此外，属性可以指定为 XML 属性，也可以指定为没有属性但具有文本值的 XML 元素。"],["body","\n"],["body","<PatternLayout pattern=\"%m%n\"/>\n与\n<PatternLayout>\n  <Pattern>%m%n</Pattern>\n</PatternLayout>\n"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>;\n<Configuration>\n  <Properties>\n    <Property name=\"name1\">value</property>\n    <Property name=\"name2\" value=\"value2\"/>\n  </Properties>\n  <filter  ... />\n  <Appenders>\n    <appender ... >\n      <filter  ... />\n    </appender>\n    ...\n  </Appenders>\n  <Loggers>\n    <Logger name=\"name1\">\n      <filter  ... />\n    </Logger>\n    ...\n    <Root level=\"level\">\n      <AppenderRef ref=\"name\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>;\n<Configuration>\n  <Properties>\n    <Property name=\"name1\">value</property>\n    <Property name=\"name2\" value=\"value2\"/>\n  </Properties>\n  <Filter type=\"type\" ... />\n  <Appenders>\n    <Appender type=\"type\" name=\"name\">\n      <Filter type=\"type\" ... />\n    </Appender>\n    ...\n  </Appenders>\n  <Loggers>\n    <Logger name=\"name1\">\n      <Filter type=\"type\" ... />\n    </Logger>\n    ...\n    <Root level=\"level\">\n      <AppenderRef ref=\"name\"/>\n    </Root>\n  </Loggers>\n</Configuration>\n\n与\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"debug\" strict=\"true\" name=\"XMLConfigTest\"\n               packages=\"org.apache.logging.log4j.test\">\n  <Properties>\n    <Property name=\"filename\">target/test.log</Property>\n  </Properties>\n  <Filter type=\"ThresholdFilter\" level=\"trace\"/>\n \n  <Appenders>\n    <Appender type=\"Console\" name=\"STDOUT\">\n      <Layout type=\"PatternLayout\" pattern=\"%m MDC%X%n\"/>\n      <Filters>\n        <Filter type=\"MarkerFilter\" marker=\"FLOW\" onMatch=\"DENY\" onMismatch=\"NEUTRAL\"/>\n        <Filter type=\"MarkerFilter\" marker=\"EXCEPTION\" onMatch=\"DENY\" onMismatch=\"ACCEPT\"/>\n      </Filters>\n    </Appender>\n    <Appender type=\"Console\" name=\"FLOW\">\n      <Layout type=\"PatternLayout\" pattern=\"%C{1}.%M %m %ex%n\"/><!-- class and line number -->\n      <Filters>\n        <Filter type=\"MarkerFilter\" marker=\"FLOW\" onMatch=\"ACCEPT\" onMismatch=\"NEUTRAL\"/>\n        <Filter type=\"MarkerFilter\" marker=\"EXCEPTION\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n      </Filters>\n    </Appender>\n    <Appender type=\"File\" name=\"File\" fileName=\"${filename}\">\n      <Layout type=\"PatternLayout\">\n        <Pattern>%d %p %C{1.} [%t] %m%n</Pattern>\n      </Layout>\n    </Appender>\n  </Appenders>\n \n  <Loggers>\n    <Logger name=\"org.apache.logging.log4j.test1\" level=\"debug\" additivity=\"false\">\n      <Filter type=\"ThreadContextMapFilter\">\n        <KeyValuePair key=\"test\" value=\"123\"/>\n      </Filter>\n      <AppenderRef ref=\"STDOUT\"/>\n    </Logger>\n \n    <Logger name=\"org.apache.logging.log4j.test2\" level=\"debug\" additivity=\"false\">\n      <AppenderRef ref=\"File\"/>\n    </Logger>\n \n    <Root level=\"trace\">\n      <AppenderRef ref=\"STDOUT\"/>\n    </Root>\n  </Loggers>\n \n</Configuration>\n"],["body","\n"],["h1","Configuring Loggers"],["body","\n"],["body","配置LoggConfig"],["body","\n"],["body","LoggerConfig 是使用 logger 元素配置的。 "],["body","\n"],["body","logger 元素必须指定一个 name 属性，通常指定一个 level 属性，也可能指定一个 additivity 属性。"],["body","\n"],["body","该级别可以配置为 TRACE、DEBUG、INFO、WARN、ERROR、ALL 或 OFF 之一。"],["body","\n"],["body","如果未指定级别，则默认为 ERROR。"],["body","\n"],["body","捕获位置信息"],["body","\n"],["body","捕获位置信息（类名、文件名、方法名和调用者的行号）可能很慢。 "],["body","\n"],["body","Log4j 试图通过减少必须遍历以找到日志记录方法的调用者的堆栈的大小来优化这一点。"],["body","\n"],["body","它通过确定可能被访问的任何组件是否需要位置信息来实现这一点。"],["body","\n"],["body","如果在跟踪或调试等级别配置记录器并期望大多数日志将在 Appender 引用或 Appender 上过滤，则这可能会导致性能问题，因为即使日志事件将被丢弃，Log4j 也会计算位置信息。"],["body","\n"],["body","要禁用此行为，可以在 LoggerConfig 上将 includeLocation 属性设置为 false。"],["body","\n"],["body","这将导致 Log4j 推迟计算位置信息，直到绝对必要。"],["body","\n"],["body","属性替换"],["body","\n"],["body","LoggerConfig（包括根 LoggerConfig）可以配置属性，这些属性将添加到从 ThreadContextMap 复制的属性中。"],["body","\n"],["body","这些属性可以从 Appender、过滤器、布局等中引用，就像它们是 ThreadContext Map 的一部分一样。"],["body","\n"],["body","属性可以包含在解析配置时或在记录每个事件时动态解析的变量。"],["body","\n"],["body","有关使用变量的更多信息，请参阅属性替换。"],["body","\n"],["body","配置多个Appender"],["body","\n\n"],["body","\n"],["body","LoggerConfig 也可以配置一个或多个 AppenderRef 元素。"],["body","\n"],["body","\n"],["body","\n"],["body","引用的每个 appender 都将与指定的 LoggerConfig 相关联。"],["body","\n"],["body","\n"],["body","\n"],["body","如果在 LoggerConfig 上配置了多个 appender，则在处理日志事件时会调用它们中的每一个。"],["body","\n"],["body","\n\n"],["body","默认存在根配置"],["body","\n"],["body","每个配置都必须有一个根记录器。"],["body","\n"],["body","如果未配置，则将使用默认根 LoggerConfig，其级别为 ERROR 并附加了 Console appender。"],["body","\n"],["body","根记录器和其他记录器之间的主要区别是"],["body","\n\n"],["body","The root logger does not have a name attribute."],["body","\n"],["body","The root logger does not support the additivity attribute since it has no parent."],["body","\n\n"],["h1","Configuring Appenders"],["body","\n"],["body","使用特定的 appender 插件的名称或使用 appender 元素和包含 appender 插件名称的 type 属性来配置 appender。"],["body","\n"],["body","此外，每个 appender 必须有一个 name 属性，指定一个值，该值在 appender 集合中是唯一的。"],["body","\n"],["body","记录器将使用该名称来引用前一节中所述的附加程序。"],["body","\n"],["body","大多数 appender 还支持要配置的布局（同样可以使用特定的 Layout 插件的名称作为元素或使用“layout”作为元素名称以及包含布局插件名称的 type 属性来指定。各种 appender 将"],["body","\n"],["body","包含它们正常运行所需的其他属性或元素。"],["body","\n"],["h1","Configuring Filters"],["body","\n"],["body","Log4j 允许在 4 个位置中的任何一个指定过滤器"],["body","\n\n"],["body","与 appender、loggers 和 properties 元素处于同一级别。这些过滤器可以在事件被传递到 LoggerConfig 之前接受或拒绝事件。"],["body","\n"],["body","在logger 元素中。这些过滤器可以接受或拒绝特定loggers的事件。"],["body","\n"],["body","在 appender 元素中。这些过滤器可以阻止或导致事件被附加程序处理。"],["body","\n"],["body","在 appender 引用元素中。这些过滤器用于确定 Logger 是否应该将事件路由到 appender。"],["body","\n\n"],["body","尽管只能配置单个过滤器元素，但该元素可能是表示 CompositeFilter 的过滤器元素。"],["body","\n"],["body","过滤器元素允许在其中配置任意数量的过滤器元素。"],["body","\n"],["body","以下示例显示了如何在 ConsoleAppender 上配置多个过滤器。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"debug\" name=\"XMLConfigTest\" packages=\"org.apache.logging.log4j.test\">\n  <Properties>\n    <Property name=\"filename\">target/test.log</Property>\n  </Properties>\n  <ThresholdFilter level=\"trace\"/>\n \n  <Appenders>\n    <Console name=\"STDOUT\">\n      <PatternLayout pattern=\"%m MDC%X%n\"/>\n    </Console>\n    <Console name=\"FLOW\">\n      <!-- this pattern outputs class name and line number -->\n      <PatternLayout pattern=\"%C{1}.%M %m %ex%n\"/>\n      <filters>\n        <MarkerFilter marker=\"FLOW\" onMatch=\"ACCEPT\" onMismatch=\"NEUTRAL\"/>\n        <MarkerFilter marker=\"EXCEPTION\" onMatch=\"ACCEPT\" onMismatch=\"DENY\"/>\n      </filters>\n    </Console>\n    <File name=\"File\" fileName=\"${filename}\">\n      <PatternLayout>\n        <pattern>%d %p %C{1.} [%t] %m%n</pattern>\n      </PatternLayout>\n    </File>\n  </Appenders>\n \n  <Loggers>\n    <Logger name=\"org.apache.logging.log4j.test1\" level=\"debug\" additivity=\"false\">\n      <ThreadContextMapFilter>\n        <KeyValuePair key=\"test\" value=\"123\"/>\n      </ThreadContextMapFilter>\n      <AppenderRef ref=\"STDOUT\"/>\n    </Logger>\n \n    <Logger name=\"org.apache.logging.log4j.test2\" level=\"debug\" additivity=\"false\">\n      <Property name=\"user\">${sys:user.name}</Property>\n      <AppenderRef ref=\"File\">\n        <ThreadContextMapFilter>\n          <KeyValuePair key=\"test\" value=\"123\"/>\n        </ThreadContextMapFilter>\n      </AppenderRef>\n      <AppenderRef ref=\"STDOUT\" level=\"error\"/>\n    </Logger>\n \n    <Root level=\"trace\">\n      <AppenderRef ref=\"STDOUT\"/>\n    </Root>\n  </Loggers>\n \n</Configuration>\n"],["body","\n"],["h1","Property Substitution"],["body","\n"],["body","Log4j 2 支持在配置中指定 tokens  作为对其他地方定义的属性的引用的能力。"],["body","\n"],["body","其中一些属性将在解释配置文件时解析，而其他属性可能会传递给组件在运行时解析。"],["body","\n"],["body","为了实现这一点，Log4j 使用了 Apache Commons Lang 的 StrSubstitutor 和 StrLookup 类的变体"],["body","\n"],["body","以类似于 Ant 或 Maven 的方式，这允许使用配置本身中声明的属性解析声明为 ${name} 的变量。"],["body","\n"],["body","例如，以下示例显示了被声明为属性的滚动文件附加程序的文件名。"],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration status=\"debug\" name=\"RoutingTest\" packages=\"org.apache.logging.log4j.test\">\n  <Properties>\n    <Property name=\"filename\">target/rolling1/rollingtest-$${sd:type}.log</Property>\n  </Properties>\n  <ThresholdFilter level=\"debug\"/>\n \n  <Appenders>\n    <Console name=\"STDOUT\">\n      <PatternLayout pattern=\"%m%n\"/>\n      <ThresholdFilter level=\"debug\"/>\n    </Console>\n    <Routing name=\"Routing\">\n      <Routes pattern=\"$${sd:type}\">\n        <Route>\n          <RollingFile name=\"Rolling-${sd:type}\" fileName=\"${filename}\"\n                       filePattern=\"target/rolling1/test1-${sd:type}.%i.log.gz\">\n            <PatternLayout>\n              <pattern>%d %p %c{1.} [%t] %m%n</pattern>\n            </PatternLayout>\n            <SizeBasedTriggeringPolicy size=\"500\" />\n          </RollingFile>\n        </Route>\n        <Route ref=\"STDOUT\" key=\"Audit\"/>\n      </Routes>\n    </Routing>\n  </Appenders>\n \n  <Loggers>\n    <Logger name=\"EventLogger\" level=\"info\" additivity=\"false\">\n      <AppenderRef ref=\"Routing\"/>\n    </Logger>\n \n    <Root level=\"error\">\n      <AppenderRef ref=\"STDOUT\"/>\n    </Root>\n  </Loggers>\n \n</Configuration>\n"],["body","\n"],["body","虽然这很有用，但还有更多的地方可以创建属性。"],["body","\n"],["body","为了适应这一点，Log4j 还支持语法 ${prefix:name} ，其中前缀标识告诉 Log4j 应该在特定上下文中评估变量名称。"],["body","\n"],["body","Log4j 内置的上下文是："],["body","\n"],["body","Prefix"],["body","Context"],["body","\n"],["body","base64"],["body","Base64 encoded data. The format is ${base64:Base64_encoded_data}. For example: ${base64:SGVsbG8gV29ybGQhCg==} yields Hello World!."],["body","\n"],["body","bundle"],["body","Resource bundle. The format is ${bundle:BundleName:BundleKey}. The bundle name follows package naming conventions, for example: ${bundle:com.domain.Messages:MyKey}."],["body","\n"],["body","ctx"],["body","Thread Context Map (MDC)"],["body","\n"],["body","date"],["body","使用指定格式插入当前日期和/或时间"],["body","\n"],["body","env"],["body","System environment variables. The formats are ${env:ENV_NAME} and ${env:ENV_NAME:-default_value}."],["body","\n"],["body","jndi"],["body","A value set in the default JNDI Context."],["body","\n"],["body","jvmrunargs"],["body","A JVM input argument accessed through JMX, but not a main argument; see RuntimeMXBean.getInputArguments(). Not available on Android."],["body","\n"],["body","log4j"],["body","Log4j configuration properties. The expressions ${log4j:configLocation} and ${log4j:configParentLocation} respectively provide the absolute path to the log4j configuration file and its parent folder."],["body","\n"],["body","main"],["body","A value set with [MapLookup.setMainArguments(String])"],["body","\n"],["body","map"],["body","A value from a MapMessage"],["body","\n"],["body","sd"],["body","来自 StructuredDataMessage 的值. The key \"id\" will return the name of the StructuredDataId without the enterprise number. The key \"type\" will return the message type. Other keys will retrieve individual elements from the Map."],["body","\n"],["body","sys"],["body","System properties. The formats are ${sys:some.property} and ${sys:some.property:-default_value}."],["body","\n\n\n"],["h1","Default Properites"],["body","\n"],["body","通过将 Properties 元素直接放在 Configuration 元素之后和任何 Loggers、Filters、Appenders 等声明之前，可以在配置文件中声明默认属性映射。"],["body","\n"],["body","如果在指定的查找中无法找到该值，则将使用默认属性映射中的值。"],["body","\n"],["body","默认映射预先填充了“hostName”的值，它是当前系统的主机名或 IP 地址，“contextName”是当前日志记录上下文的值。"],["body","\n"],["body","也可以使用语法 ${lookupName:\\key:-defaultValue} 在 Lookup 中指定默认属性。"],["body","\n"],["body","在某些情况下，键可能包含前导“-”。"],["body","\n"],["body","在这种情况下，必须包含转义字符，例如 ${main:--file:-app.properties}。"],["body","\n"],["h1","Disables Message Pattern Lookups"],["body","\n"],["body","消息由查找处理（默认情况下），例如，如果您定义了 "],["body","\n"],["body","<Property name=\"foo.bar\">FOO_BAR </Property>\n"],["body","\n"],["body","则 logger.info(\"${foo.bar}\") 将输出 FOO_BAR "],["body","\n"],["body","${foo.bar} 的。"],["body","\n"],["body","您可以通过将系统属性 log4j2.formatMsgNoLookups 设置为 true 或使用 %m{nolookups} 定义消息模式来全局禁用消息模式查找。"],["body","\n"],["h1","Lookup Variables with Multiple Leading '$' Characters"],["body","\n"],["body","StrLookup 处理的一个有趣特性是，当变量引用在每次解析变量时使用多个前导 '$' 字符声明时，前导 '$' 会被简单地删除。"],["body","\n"],["body","在前面的示例中，“Routes”元素能够在运行时解析变量。"],["body","\n"],["body","为此，将前缀值指定为带有两个前导 '$' 字符的变量。"],["body","\n"],["body","当第一次处理配置文件时，第一个“$”字符被简单地删除。"],["body","\n"],["body","因此，当 Routes 元素在运行时被评估时，它是变量声明“${sd:type}”，它导致事件被检查 StructuredDataMessage，如果存在，则其类型属性的值将用作路由钥匙。"],["body","\n"],["body","并非所有元素都支持在运行时解析变量。执行此操作的组件将在其文档中明确指出这一点。"],["body","\n"],["body","如果在与前缀关联的 Lookup 中找不到键的值，则将使用与配置文件中的属性声明中的键关联的值。"],["body","\n"],["body","如果没有找到值，变量声明将作为值返回。"],["body","\n"],["body","可以通过执行以下操作在配置中声明默认值："],["body","\n"],["body","<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<Configuration>\n  <Properties>\n    <Property name=\"type\">Audit</property>\n  </Properties>\n  ...\n</Configuration>\n"],["body","\n"],["body","值得指出的是，在处理配置时也不会评估 RollingFile appender 声明中的变量。"],["body","\n"],["body","这仅仅是因为整个 RollingFile 元素的解析被推迟到匹配发生。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/lookups.html"],["title","lookups.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Lookups"],["body","\n"],["body","Lookups  提供了一种在任意位置向 Log4j 配置添加值的方法。它们是实现 StrLookup 接口的特殊类型的插件"],["body","\n"],["body","关于如何在配置文件中使用查找的信息可以在  configuration 页面的  Property Substitution 部分找到。"],["body","\n"],["h1","Context Map Lookup"],["body","\n"],["body","ContextMapLookup 允许应用程序将数据存储在 Log4j ThreadContext Map 中，然后在Log4j 配置 检索值。"],["body","\n"],["body","在下面的示例中，应用程序将使用键“loginId”将当前用户的登录 ID 存储在 ThreadContext Map 中。"],["body","\n"],["body","在初始配置处理期间，第一个“$”将被删除。 "],["body","\n"],["body","PatternLayout 支持使用 Lookups 进行插值，然后将为每个事件解析变量。"],["body","\n"],["body","请注意，模式 \"%X{loginId}\" 将获得相同的结果。"],["body","\n"],["body","<File name=\"Application\" fileName=\"application.log\">\n  <PatternLayout>\n    <pattern>%d %p %c{1.} [%t] $${ctx:loginId} %m%n</pattern>\n  </PatternLayout>\n</File>\n"],["body","\n"],["h1","Date Lookup"],["body","\n"],["body","DateLookup 与其他查找有些不同，因为它不使用键来定位项目。"],["body","\n"],["body","相反，该键可用于指定对 SimpleDateFormat 有效的日期格式字符串。"],["body","\n"],["body","当前日期或与当前日志事件关联的日期将按照指定的格式进行格式化。"],["body","\n"],["body","<RollingFile name=\"Rolling-${map:type}\" fileName=\"${filename}\" filePattern=\"target/rolling1/test1-$${date:MM-dd-yyyy}.%i.log.gz\">\n  <PatternLayout>\n    <pattern>%d %p %c{1.} [%t] %m%n</pattern>\n  </PatternLayout>\n  <SizeBasedTriggeringPolicy size=\"500\" />\n</RollingFile>\n"],["body","\n"],["h1","Docker Lookup"],["body","\n"],["body","DockerLookup 可用于从运行应用程序的 Docker 容器中查找属性。"],["body","\n"],["body","Log4j Docker provides access to the following container attributes:"],["body","\n"],["body","\n"],["body","containerId"],["body","The full id assigned to the container."],["body","\n"],["body","containerName"],["body","The name assigned to the container."],["body","\n"],["body","imageId"],["body","The id assigned to the image."],["body","\n"],["body","imageName"],["body","The name assigned to the image."],["body","\n"],["body","shortContainerId"],["body","The first 12 characters of the container id."],["body","\n"],["body","shortImageId"],["body","The first 12 characters of the image id."],["body","\n\n\n"],["body","<JsonLayout properties=\"true\" compact=\"true\" eventEol=\"true\">\n  <KeyValuePair key=\"containerId\" value=\"${docker:containerId}\"/>\n  <KeyValuePair key=\"containerName\" value=\"${docker:containerName}\"/>\n  <KeyValuePair key=\"imageName\" value=\"${docker:imageName}\"/>\n</JsonLayout>\n"],["body","\n"],["body","This Lookup is subject to the requirements listed at Log4j Docker Support"],["body","\n"],["h1","Environment Lookup"],["body","\n"],["body","EnvironmentLookup 允许系统在全局文件（如 /etc/profile）或应用程序的启动脚本中配置环境变量，然后从日志配置中检索这些变量。"],["body","\n"],["body","<File name=\"Application\" fileName=\"application.log\">\n  <PatternLayout>\n    <pattern>%d %p %c{1.} [%t] $${env:USER} %m%n</pattern>\n  </PatternLayout>\n</File>\n"],["body","\n"],["body","此查找还支持默认值语法。"],["body","\n"],["body","<File name=\"Application\" fileName=\"application.log\">\n  <PatternLayout>\n    <pattern>%d %p %c{1.} [%t] $${env:USER:-jdoe} %m%n</pattern>\n  </PatternLayout>\n</File>\n"],["body","\n"],["h1","EventLookup"],["body","\n"],["body","EventLookup 提供对配置中  日志事件中 字段的访问。"],["body","\n"],["body","Key"],["body","Description"],["body","\n"],["body","Exception"],["body","如果事件中包含异常，则返回异常的简单类名。"],["body","\n"],["body","Level"],["body","返回事件的日志记录级别。"],["body","\n"],["body","Logger"],["body","返回记录器的名称。"],["body","\n"],["body","Marker"],["body","返回与日志事件关联的标记的名称（如果存在）。"],["body","\n"],["body","Message"],["body","返回格式化的消息字符串。"],["body","\n"],["body","ThreadId"],["body","返回与日志事件关联的线程 ID。"],["body","\n"],["body","ThreadName"],["body","返回与日志事件关联的线程的名称"],["body","\n"],["body","Timestamp"],["body","返回事件发生的时间（以毫秒为单位）。"],["body","\n\n\n"],["body","在此示例中，RoutingAppender 根据日志事件中存在的名为“AUDIT”的标记的存在来选择路由。"],["body","\n"],["body","          <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n          <Configuration status=\"WARN\" name=\"RoutingTest\">\n            <Appenders>\n              <Console name=\"STDOUT\" target=\"SYSTEM_OUT\" />\n              <Flume name=\"AuditLogger\" compress=\"true\">\n                <Agent host=\"192.168.10.101\" port=\"8800\"/>\n                <Agent host=\"192.168.10.102\" port=\"8800\"/>\n                <RFC5424Layout enterpriseNumber=\"18060\" includeMDC=\"true\" appName=\"MyApp\"/>\n              </Flume>\n              <Routing name=\"Routing\">\n                <Routes>\n                  <Route pattern=\"$${event:Marker}\">\n                    <RollingFile\n                        name=\"Rolling-${mdc:UserId}\"\n                        fileName=\"${mdc:UserId}.log\"\n                        filePattern=\"${mdc:UserId}.%i.log.gz\">\n                      <PatternLayout>\n                        <pattern>%d %p %c{1.} [%t] %m%n</pattern>\n                      </PatternLayout>\n                      <SizeBasedTriggeringPolicy size=\"500\" />\n                    </RollingFile>\n                  </Route>\n                  <Route ref=\"AuditLogger\" key=\"AUDIT\"/>\n                  <Route ref=\"STDOUT\" key=\"STDOUT\"/>\n                </Routes>\n                <IdlePurgePolicy timeToLive=\"15\" timeUnit=\"minutes\"/>\n              </Routing>\n            </Appenders>\n            <Loggers>\n              <Root level=\"error\">\n                <AppenderRef ref=\"Routing\" />\n              </Root>\n            </Loggers>\n          </Configuration>\n"],["body","\n"],["h1","Java Lookup"],["body","\n"],["body","JavaLookup 允许使用 java: 前缀在方便的预格式化字符串中检索 Java 环境信息。"],["body","\n"],["body","Key"],["body","Description"],["body","\n"],["body","version"],["body","The short Java version, like:Java version 1.7.0_67"],["body","\n"],["body","runtime"],["body","The Java runtime version, like:Java(TM) SE Runtime Environment (build 1.7.0_67-b01) from Oracle Corporation"],["body","\n"],["body","vm"],["body","The Java VM version, like:Java HotSpot(TM) 64-Bit Server VM (build 24.65-b04, mixed mode)"],["body","\n"],["body","os"],["body","The OS version, like:Windows 7 6.1 Service Pack 1, architecture: amd64-64"],["body","\n"],["body","locale"],["body","Hardware information, like:default locale: en_US, platform encoding: Cp1252"],["body","\n"],["body","hw"],["body","Hardware information, like:processors: 4, architecture: amd64-64, instruction sets: amd64"],["body","\n\n\n"],["body","<File name=\"Application\" fileName=\"application.log\">\n  <PatternLayout header=\"${java:runtime} - ${java:vm} - ${java:os}\">\n    <Pattern>%d %m%n</Pattern>\n  </PatternLayout>\n</File>\n"],["body","\n"],["h1","Jndi Lookup"],["body","\n"],["body","JndiLookup 允许通过 JNDI 检索变量。"],["body","\n"],["body","默认情况下，键将以 java:comp/env/ 为前缀，但是如果键包含“:”，则不会添加前缀。"],["body","\n"],["body","<File name=\"Application\" fileName=\"application.log\">\n  <PatternLayout>\n    <pattern>%d %p %c{1.} [%t] $${jndi:logging/context-name} %m%n</pattern>\n  </PatternLayout>\n</File>\n"],["body","\n"],["body","Java 的 JNDI 模块在 Android 上不可用。"],["body","\n"],["h1","Log4j Configuration Location Lookup"],["body","\n"],["body","Log4j 配置属性。"],["body","\n"],["body","表达式 ${log4j:configLocation} 和 ${log4j:configParentLocation} 分别提供 log4j 配置文件及其父文件夹的绝对路径。"],["body","\n"],["body","<File name=\"Application\" fileName=\"${log4j:configParentLocation}/logs/application.log\">\n  <PatternLayout>\n    <pattern>%d %p %c{1.} [%t] %m%n</pattern>\n  </PatternLayout>\n</File>\n"],["body","\n"],["h1","Lower Lookup"],["body","\n"],["body","LowerLookup 将传入的参数转换为小写。据推测，该值将是嵌套查找的结果。"],["body","\n"],["body","<File name=\"Application\" fileName=\"application.log\">\n  <PatternLayout>\n    <pattern>%d %p %c{1.} [%t] $${lower:{${spring:spring.application.name}} %m%n</pattern>\n  </PatternLayout>\n</File>\n"],["body","\n"],["headingLink","upper-lookup"],["heading","Upper Lookup"],["body","\n"],["body","The UpperLookup converts the passed in argument to upper case. Presumably the value will be the result of a nested lookup."],["body","\n"],["body","<File name=\"Application\" fileName=\"application.log\">  <PatternLayout>    <pattern>%d %p %c{1.} [%t] $$upper{${spring:spring.application.name}} %m%n</pattern>  </PatternLayout></File>\n"],["body","\n"],["h1","Main Arguments Lookup (Application)"],["body","\n"],["body","此查找要求您手动向 Log4j 提供应用程序的主要参数："],["body","\n"],["body","import org.apache.logging.log4j.core.lookup.MainMapLookup;\n \npublic static void main(String args[]) {\n  MainMapLookup.setMainArguments(args);\n  ...\n}\n"],["body","\n"],["body","如果已设置主要参数，则此查找允许应用程序从日志记录配置中检索这些主要参数值。 "],["body","\n"],["body","main: 前缀后面的键可以是参数列表中从 0 开始的索引，也可以是字符串，其中 ${main:myString} 替换为 main 参数列表中 myString 后面的值。"],["body","\n"],["body","注意：许多应用程序使用前导破折号来标识命令参数。"],["body","\n"],["body","指定 ${main:--file} 将导致查找失败，因为它会查找名为“main”的变量，默认值为“-file”。"],["body","\n"],["body","为避免这种情况，将 Lookup 名称与键分开的“:”必须后跟反斜杠作为转义字符，如 ${main:--file}"],["body","\n"],["body","Then the following substitutions are possible:"],["body","\n"],["body","--file foo.txt --verbose -x bar\n"],["body","\n"],["body","Expression"],["body","Result"],["body","\n"],["body","${main:0}"],["body","--file"],["body","\n"],["body","${main:1}"],["body","foo.txt"],["body","\n"],["body","${main:2}"],["body","--verbose"],["body","\n"],["body","${main:3}"],["body","-x"],["body","\n"],["body","${main:4}"],["body","bar"],["body","\n"],["body","${main:--file}"],["body","foo.txt"],["body","\n"],["body","${main:-x}"],["body","bar"],["body","\n"],["body","${main:bar}"],["body","null"],["body","\n"],["body","${main:--quiet:-true}"],["body","true"],["body","\n\n\n"],["body","<File name=\"Application\" fileName=\"application.log\">\n  <PatternLayout header=\"File: ${main:--file}\">\n    <Pattern>%d %m%n</Pattern>\n  </PatternLayout>\n</File>\n"],["body","\n"],["h1","Map Lookup"],["body","\n"],["body","MapLookup 有多种用途"],["body","\n\n"],["body","\n"],["body","为配置文件中声明的属性 提供 存储。"],["body","\n"],["body","\n"],["body","\n"],["body","从 LogEvents 中的 MapMessages 中检索值。"],["body","\n"],["body","\n"],["body","\n"],["body","检索使用 MapLookup.setMainArguments(String[]) 设置的值"],["body","\n"],["body","\n"],["body","\n"],["body","第一项仅表示 MapLookup 用于替换配置文件中定义的属性。这些变量没有前缀指定"],["body","\n"],["body","\n"],["body","\n"],["body","第二种用法允许替换当前 MapMessage 中的值（如果一个值是当前日志事件的一部分）。"],["body","\n"],["body","RoutingAppender 将为 MapMessage 中名为“type”的键的每个唯一值使用不同的 RollingFileAppender"],["body","\n"],["body","当以这种方式使用时，应在属性声明中声明“type”的值，以在消息不是 MapMessage 或 MapMessage 不包含键的情况下提供默认值。"],["body","\n"],["body","<Routing name=\"Routing\">\n  <Routes pattern=\"$${map:type}\">\n    <Route>\n      <RollingFile name=\"Rolling-${map:type}\" fileName=\"${filename}\"\n                   filePattern=\"target/rolling1/test1-${map:type}.%i.log.gz\">\n        <PatternLayout>\n          <pattern>%d %p %c{1.} [%t] %m%n</pattern>\n        </PatternLayout>\n        <SizeBasedTriggeringPolicy size=\"500\" />\n      </RollingFile>\n    </Route>\n  </Routes>\n</Routing>\n"],["body","\n"],["body","\n\n"],["h1","Marker Lookup"],["body","\n"],["body","标记查找允许您在有趣的配置中使用标记，例如路由附加程序。"],["body","\n"],["body","考虑以下基于标记记录到不同文件的 YAML 配置和代码："],["body","\n"],["body","Configuration:\n  status: debug\n \n  Appenders:\n    Console:\n    RandomAccessFile:\n      - name: SQL_APPENDER\n        fileName: logs/sql.log\n        PatternLayout:\n          Pattern: \"%d{ISO8601_BASIC} %-5level %logger{1} %X %msg%n\"\n      - name: PAYLOAD_APPENDER\n        fileName: logs/payload.log\n        PatternLayout:\n          Pattern: \"%d{ISO8601_BASIC} %-5level %logger{1} %X %msg%n\"\n      - name: PERFORMANCE_APPENDER\n        fileName: logs/performance.log\n        PatternLayout:\n          Pattern: \"%d{ISO8601_BASIC} %-5level %logger{1} %X %msg%n\"\n \n    Routing:\n      name: ROUTING_APPENDER\n      Routes:\n        pattern: \"$${marker:}\"\n        Route:\n        - key: PERFORMANCE\n          ref: PERFORMANCE_APPENDER\n        - key: PAYLOAD\n          ref: PAYLOAD_APPENDER\n        - key: SQL\n          ref: SQL_APPENDER\n \n  Loggers:\n    Root:\n      level: trace\n      AppenderRef:\n        - ref: ROUTING_APPENDER\n"],["body","\n"],["body","public static final Marker SQL = MarkerFactory.getMarker(\"SQL\");\npublic static final Marker PAYLOAD = MarkerFactory.getMarker(\"PAYLOAD\");\npublic static final Marker PERFORMANCE = MarkerFactory.getMarker(\"PERFORMANCE\");\n \nfinal Logger logger = LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME);\n \nlogger.info(SQL, \"Message in Sql.log\");\nlogger.info(PAYLOAD, \"Message in Payload.log\");\nlogger.info(PERFORMANCE, \"Message in Performance.log\");\n"],["body","\n"],["body","注意配置的关键部分是模式：“$${marker:}”。"],["body","\n"],["body","这将产生三个日志文件，每个文件都有一个特定标记的日志事件。 "],["body","\n"],["body","Log4j 会将带有 SQL 标记的日志事件路由到 sql.log，将带有 PAYLOAD 标记的日志事件路由到 payload.log，依此类推。"],["body","\n"],["body","您可以使用符号“${marker:name}”和“$${marker:name}”来检查是否存在名称为标记名称的标记。"],["body","\n"],["body","如果标记存在，则表达式返回名称，否则返回 null。"],["body","\n"],["h1","Spring Boot Lookup"],["body","\n"],["body","Spring Boot Lookup 从 Spring 配置中检索 Spring 属性的值以及活动和默认配置文件的值。"],["body","\n"],["body","指定“profiles.active”键将返回活动配置文件，而“profiles.default”键将返回默认配置文件。"],["body","\n"],["body","默认和活动配置文件可以是一个数组。"],["body","\n"],["body","如果存在多个配置文件，它们将作为逗号分隔列表返回。"],["body","\n"],["body","要从数组中检索单个项目，请将“[{index}]”附加到键。"],["body","\n"],["body","例如，要返回列表中的第一个活动配置文件，请指定“profiles.active[0]”。"],["body","\n"],["body","<File name=\"Application\" fileName=\"application-${spring:profiles.active[0]}.log\">\n  <PatternLayout>\n    <pattern>%d %p %c{1.} [%t] $${spring:spring.application.name} %m%n</pattern>\n  </PatternLayout>\n</File>\n"],["body","\n"],["h1","Structured Data Lookup"],["body","\n"],["body","StructuredDataLookup 与 MapLookup 非常相似，因为它将从 StructuredDataMessages 中检索值。"],["body","\n"],["body","除了 Map 值，它还将返回 id 的名称部分（不包括企业编号）和类型字段。"],["body","\n"],["body","下面的示例与 MapMessage 示例之间的主要区别在于，“type”是 StructuredDataMessage 的一个属性，而“type”必须是 MapMessage 中 Map 中的一个 item。"],["body","\n"],["body","<Routing name=\"Routing\">\n  <Routes pattern=\"$${sd:type}\">\n    <Route>\n      <RollingFile name=\"Rolling-${sd:type}\" fileName=\"${filename}\"\n                   filePattern=\"target/rolling1/test1-${sd:type}.%i.log.gz\">\n        <PatternLayout>\n          <pattern>%d %p %c{1.} [%t] %m%n</pattern>\n        </PatternLayout>\n        <SizeBasedTriggeringPolicy size=\"500\" />\n      </RollingFile>\n    </Route>\n  </Routes>\n</Routing>\n"],["body","\n"],["h1","System Properties Lookup"],["body","\n"],["body","由于使用系统属性在应用程序内部和外部定义值是很常见的，因此可以通过查找访问它们是很自然的。"],["body","\n"],["body","由于系统属性通常是在应用程序之外定义的，因此通常会看到以下内容："],["body","\n"],["body","<Appenders>\n  <File name=\"ApplicationLog\" fileName=\"${sys:logPath}/app.log\"/>\n</Appenders>\n"],["body","\n"],["body","此查找还支持默认值语法。"],["body","\n"],["body","在下面的示例中，当 logPath 系统属性未定义时，将使用默认值 /var/logs："],["body","\n"],["body","<Appenders>\n  <File name=\"ApplicationLog\" fileName=\"${sys:logPath:-/var/logs}/app.log\"/>\n</Appenders>\n"],["body","\n"],["h1","Web Lookup"],["body","\n"],["body","WebLookup 允许应用程序检索与 ServletContext 关联的变量。"],["body","\n"],["body","除了能够检索 ServletContext 中的各种字段外，WebLookup 还支持查找存储为属性或配置为初始化参数的值。"],["body","\n"],["body","下表列出了可以检索的各种键："],["body","\n"],["body","Key"],["body","Description"],["body","\n"],["body","attr.name"],["body","Returns the ServletContext attribute with the specified name"],["body","\n"],["body","contextPath"],["body","The context path of the web application"],["body","\n"],["body","contextPathName"],["body","The first token in the context path of the web application splitting on \"/\" characters."],["body","\n"],["body","effectiveMajorVersion"],["body","Gets the major version of the Servlet specification that the application represented by this ServletContext is based on."],["body","\n"],["body","effectiveMinorVersion"],["body","Gets the minor version of the Servlet specification that the application represented by this ServletContext is based on."],["body","\n"],["body","initParam.name"],["body","Returns the ServletContext initialization parameter with the specified name"],["body","\n"],["body","majorVersion"],["body","Returns the major version of the Servlet API that this servlet container supports."],["body","\n"],["body","minorVersion"],["body","Returns the minor version of the Servlet API that this servlet container supports."],["body","\n"],["body","rootDir"],["body","Returns the result of calling getRealPath with a value of \"/\"."],["body","\n"],["body","serverInfo"],["body","Returns the name and version of the servlet container on which the servlet is running."],["body","\n"],["body","servletContextName"],["body","Returns the name of the web application as defined in the display-name element of the deployment descriptor"],["body","\n\n\n"],["body","将首先检查指定的任何其他键名以查看是否存在具有该名称的 ServletContext 属性，然后将检查以查看是否存在该名称的初始化参数。"],["body","\n"],["body","如果找到了键，则将返回相应的值。"],["body","\n"],["body","<Appenders>\n  <File name=\"ApplicationLog\" fileName=\"${web:rootDir}/app.log\"/>\n</Appenders>\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/Log4j2API.html"],["title","Log4j2API.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","Overview"],["body","\n"],["body","Log4j 2 API 提供应用程序应编码到的接口，并提供实现者创建日志记录实现所需的适配器组件。"],["body","\n"],["body","尽管 Log4j 2 在 API 和实现之间被分解，但这样做的主要目的不是允许多个实现，尽管这当然是可能的，"],["body","\n"],["body","但要明确定义在“正常”应用程序代码中可以安全使用哪些类和方法"],["body","\n"],["headingLink","hello-world"],["heading","Hello World!"],["body","\n"],["body","import org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.Logger;\n \npublic class HelloWorld {\n    private static final Logger logger = LogManager.getLogger(\"HelloWorld\");\n    public static void main(String[] args) {\n        logger.info(\"Hello, World!\");\n    }\n}\n"],["body","\n"],["headingLink","substituting-parameters"],["heading","Substituting Parameters"],["body","\n"],["body","logger.debug(\"Logging in user {} with birthday {}\", user.getName(), user.getBirthdayCalendar());\n"],["body","\n"],["headingLink","formatting-parameters"],["heading","Formatting Parameters"],["body","\n"],["body","如果 toString() 不是您想要的，格式化程序记录器将格式化由您决定。"],["body","\n"],["body","为了便于格式化，您可以使用与 Java 的 Formatter 相同的格式字符串。"],["body","\n"],["body","public static Logger logger = LogManager.getFormatterLogger(\"Foo\");\n \nlogger.debug(\"Logging in user %s with birthday %s\", user.getName(), user.getBirthdayCalendar());\nlogger.debug(\"Logging in user %1$s with birthday %2$tm %2$te,%2$tY\", user.getName(), user.getBirthdayCalendar());\nlogger.debug(\"Integer.MAX_VALUE = %,d\", Integer.MAX_VALUE);\nlogger.debug(\"Long.MAX_VALUE = %,d\", Long.MAX_VALUE);\n"],["body","\n"],["body","要使用格式化程序 Logger，您必须调用 LogManager getFormatterLogger 方法之一。此示例的输出显示 Calendar toString() 与自定义格式相比更为冗长："],["body","\n"],["headingLink","mixing-loggers-with-formatter-loggers"],["heading","Mixing Loggers with Formatter Loggers"],["body","\n"],["body","格式化程序记录器对输出格式进行细粒度控制，但缺点是必须指定正确的类型（例如，为 %d 格式参数传递除十进制整数以外的任何内容都会导致异常）。"],["body","\n"],["body","如果您的主要用途是使用 {} 样式的参数，但偶尔需要对输出格式进行细粒度控制，则可以使用 printf 方法："],["body","\n"],["body","public static Logger logger = LogManager.getLogger(\"Foo\");\n \nlogger.debug(\"Opening connection to {}...\", someDataSource);\nlogger.printf(Level.INFO, \"Logging in user %1$s with birthday %2$tm %2$te,%2$tY\", user.getName(), user.getBirthdayCalendar());\n"],["body","\n"],["headingLink","java-8-lambda-support-for-lazy-logging"],["heading","Java 8 lambda support for lazy logging"],["body","\n"],["body","在 2.4 版中，Logger 接口添加了对 lambda 表达式的支持。这允许客户端代码延迟记录消息，而无需显式检查请求的日志级别是否已启用。"],["body","\n"],["body","// pre-Java 8 style optimization: explicitly check the log level\n// to make sure the expensiveOperation() method is only called if necessary\nif (logger.isTraceEnabled()) {\n    logger.trace(\"Some long-running operation returned {}\", expensiveOperation());\n}\n"],["body","\n"],["body","// Java-8 style optimization: no need to explicitly check the log level:\n// the lambda expression is not evaluated if the TRACE level is not enabled\nlogger.trace(\"Some long-running operation returned {}\", () -> expensiveOperation());\n"],["body","\n"],["headingLink","logger-names"],["heading","Logger Names"],["body","\n"],["body","大多数日志实现使用分层方案来匹配日志名称和日志配置。"],["body","\n"],["body","在此方案中，记录器名称层次结构由“.”表示。"],["body","\n"],["body","记录器名称中的字符，其方式与用于 Java 包名称的层次结构非常相似。"],["body","\n"],["body","例如，org.apache.logging.appender 和 org.apache.logging.filter 都将 org.apache.logging 作为它们的父级。"],["body","\n"],["body","在大多数情况下，应用程序通过将当前类的名称传递给 LogManager.getLogger(...) 来命名它们的记录器。"],["body","\n"],["body","因为这种用法非常普遍，所以 Log4j 2 提供了当 logger name 参数被省略或为 null 时的默认值。"],["body","\n"],["body","例如，在下面的所有示例中，Logger 的名称都为“org.apache.test.MyTest”。"],["body","\n"],["body","package org.apache.test; \npublic class MyTest {    \n    private static final Logger logger = LogManager.getLogger(MyTest.class);\n}\npackage org.apache.test; \npublic class MyTest {    \n    private static final Logger logger = LogManager.getLogger(MyTest.class.getName());\n}\npackage org.apache.test; \npublic class MyTest {    \n    private static final Logger logger = LogManager.getLogger();\n}\n"],["body","\n"],["h1","Log Builder"],["body","\n"],["body","Log4j 传统上与日志语句一起使用，例如"],["body","\n"],["body","logger.error(\"Unable to process request due to {}\", code, exception);\n"],["body","\n"],["body","这导致了一些关于异常是否应该作为消息的参数或 Log4j 是否应该将其作为 throwable 处理的混淆。"],["body","\n"],["body","为了使日志记录更清晰，API 中添加了一个构建器模式。"],["body","\n"],["body","使用构建器语法，上述内容将被处理为："],["body","\n"],["body"," logger.atError().withThrowable(exception).log(\"Unable to process request due to {}\", code);\n"],["body","\n"],["body","现在，当调用任何 atTrace、atDebug、atInfo、atWarn、atError、atFatal、always 或 atLevel(Level) 方法时，Logger 类将返回一个 LogBuilder。"],["body","\n"],["body","然后 logBuilder 允许在记录事件之前将标记、Throwable 和/或位置添加到事件中。"],["body","\n"],["body","对 log 方法的调用总是导致日志事件被最终确定和发送。"],["body","\n"],["body","带有标记、Throwable 和位置的日志记录语句如下所示："],["body","\n"],["body","logger.atInfo().withMarker(marker).withLocation().withThrowable(exception).log(\"Login for user {} failed\", userId);\n"],["body","\n"],["body","在 LogBuilder 上提供 location 方法有两个明显的优势："],["body","\n\n"],["body","Logging 包装器可以使用它来提供 Log4j 使用的位置信息。"],["body","\n"],["body","使用不带参数的位置方法时捕获位置信息的开销比需要时必须计算位置信息要好得多。 Log4j 可以简单地在固定索引处请求堆栈跟踪条目，而不必遍历堆栈跟踪来确定调用类。"],["body","\n\n"],["body","正如预期的那样，当使用 LogBuilder 并调用 withLocation() 方法时，当输出中使用位置信息时，日志记录速度要快得多，但如果不使用，则速度要慢得多。"],["body","\n"],["h1","Flow Tracing"],["body","\n"],["body","Logger 类提供了对跟踪应用程序的执行路径非常有用的日志记录方法。"],["body","\n"],["body","这些方法生成可以与其他调试日志分开过滤的日志事件。"],["body","\n\n"],["body","\n"],["body","无需调试会话即可帮助开发中的问题诊断"],["body","\n"],["body","\n"],["body","\n"],["body","帮助无法进行调试的生产中的问题"],["body","\n"],["body","\n"],["body","\n"],["body","诊断有助于教育新开发人员学习应用程序。"],["body","\n"],["body","\n\n"],["body","最常用的方法是 traceEntry() 和 traceExit() 方法。 记录方法进入与出去"],["body","\n"],["h1","Markers"],["body","\n"],["body","日志框架的主要目的之一是提供仅在需要时生成调试和诊断信息的方法，并允许过滤该信息，以免系统或需要使用的个人不堪重负"],["body","\n"],["body","例如，应用程序希望将其进入、退出和其他操作与正在执行的 SQL 语句分开记录，并希望能够将查询与更新分开记录。实现此目的的一种方法如下所示："],["body","\n"],["body","使用标记过滤器 过滤日志"],["body","\n"],["body","public class MyApp {\n \n    private Logger logger = LogManager.getLogger(MyApp.class.getName());\n    private static final Marker SQL_MARKER = MarkerManager.getMarker(\"SQL\");\n    private static final Marker UPDATE_MARKER = MarkerManager.getMarker(\"SQL_UPDATE\").setParents(SQL_MARKER);\n    private static final Marker QUERY_MARKER = MarkerManager.getMarker(\"SQL_QUERY\").setParents(SQL_MARKER);\n \n    public String doQuery(String table) {\n        logger.traceEntry();\n \n        logger.debug(QUERY_MARKER, \"SELECT * FROM {}\", table);\n \n        String result = ... \n \n        return logger.traceExit(result);\n    }\n \n    public String doUpdate(String table, Map<String, String> params) {\n        logger.traceEntry();\n \n        if (logger.isDebugEnabled()) {\n            logger.debug(UPDATE_MARKER, \"UPDATE {} SET {}\", table, formatCols());\n        }\n\t\n        String result = ... \n \n        return logger.traceExit(result);\n    }\n \n    private String formatCols(Map<String, String> cols) {\n        StringBuilder sb = new StringBuilder();\n        boolean first = true;\n        for (Map.Entry<String, String> entry : cols.entrySet()) {\n            if (!first) {\n                sb.append(\", \");\n            }\n            sb.append(entry.getKey()).append(\"=\").append(entry.getValue());\n            first = false;\n        }\n        return sb.toString();\n    }\n}\n"],["body","\n"],["h1","Event Logging"],["body","\n"],["body","EventLogger 类提供了一种简单的机制来记录应用程序中发生的事件。"],["body","\n"],["body","虽然 EventLogger 作为启动应由审计日志系统处理的事件的一种方式很有用，但它本身并没有实现审计日志系统所需的任何功能，例如保证交付。"],["body","\n"],["body","在典型的 Web 应用程序中使用 EventLogger 的推荐方法是使用与请求的整个生命周期相关的数据填充 ThreadContext Map，例如用户的 id、用户的 IP 地址、产品名称等。这很容易"],["body","\n"],["body","在 servlet 过滤器中完成，其中也可以在请求结束时清除 ThreadContext Map。"],["body","\n"],["body","当需要记录的事件发生时，应创建并填充 StructuredDataMessage。"],["body","\n"],["body","然后调用 EventLogger.logEvent(msg)，其中 msg 是对 StructuredDataMessage 的引用。"],["body","\n"],["body","public class RequestFilter implements Filter {\n    private FilterConfig filterConfig;\n    private static String TZ_NAME = \"timezoneOffset\";\n \n    public void init(FilterConfig filterConfig) throws ServletException {\n        this.filterConfig = filterConfig;\n    }\n \n    /**\n     * Sample filter that populates the MDC on every request.\n     */\n    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)\n            throws IOException, ServletException {\n        HttpServletRequest request = (HttpServletRequest)servletRequest;\n        HttpServletResponse response = (HttpServletResponse)servletResponse;\n        ThreadContext.put(\"ipAddress\", request.getRemoteAddr());\n        HttpSession session = request.getSession(false);\n        TimeZone timeZone = null;\n        if (session != null) {\n            // Something should set this after authentication completes\n            String loginId = (String)session.getAttribute(\"LoginId\");\n            if (loginId != null) {\n                ThreadContext.put(\"loginId\", loginId);\n            }\n            // This assumes there is some javascript on the user's page to create the cookie.\n            if (session.getAttribute(TZ_NAME) == null) {\n                if (request.getCookies() != null) {\n                    for (Cookie cookie : request.getCookies()) {\n                        if (TZ_NAME.equals(cookie.getName())) {\n                            int tzOffsetMinutes = Integer.parseInt(cookie.getValue());\n                            timeZone = TimeZone.getTimeZone(\"GMT\");\n                            timeZone.setRawOffset((int)(tzOffsetMinutes * DateUtils.MILLIS_PER_MINUTE));\n                            request.getSession().setAttribute(TZ_NAME, tzOffsetMinutes);\n                            cookie.setMaxAge(0);\n                            response.addCookie(cookie);\n                        }\n                    }\n                }\n            }\n        }\n        ThreadContext.put(\"hostname\", servletRequest.getServerName());\n        ThreadContext.put(\"productName\", filterConfig.getInitParameter(\"ProductName\"));\n        ThreadContext.put(\"locale\", servletRequest.getLocale().getDisplayName());\n        if (timeZone == null) {\n            timeZone = TimeZone.getDefault();\n        }\n        ThreadContext.put(\"timezone\", timeZone.getDisplayName());\n        filterChain.doFilter(servletRequest, servletResponse);\n        ThreadContext.clear();\n    }\n \n    public void destroy() {\n    }\n}\n"],["body","\n"],["body","import org.apache.logging.log4j.StructuredDataMessage;\nimport org.apache.logging.log4j.EventLogger;\n \nimport java.util.Date;\nimport java.util.UUID;\n \npublic class MyApp {\n \n    public String doFundsTransfer(Account toAccount, Account fromAccount, long amount) {\n        toAccount.deposit(amount);\n        fromAccount.withdraw(amount);\n        String confirm = UUID.randomUUID().toString();\n        StructuredDataMessage msg = new StructuredDataMessage(confirm, null, \"transfer\");\n        msg.put(\"toAccount\", toAccount);\n        msg.put(\"fromAccount\", fromAccount);\n        msg.put(\"amount\", amount);\n        EventLogger.logEvent(msg);\n        return confirm;\n    }\n}\n"],["body","\n"],["h1","Messages"],["body","\n"],["body","尽管 Log4j 2 提供了接受字符串和对象的 Logger 方法，但所有这些最终都在 Message 对象中捕获，然后与日志事件关联。"],["body","\n"],["body","应用程序可以自由地构建自己的消息并将它们传递给记录器。"],["body","\n"],["body","尽管看起来比将消息格式和参数直接传递给事件更昂贵，但测试表明，使用现代 JVM，创建和销毁事件的成本很小，尤其是当复杂的任务封装在消息而不是应用程序中时。"],["body","\n"],["body","此外，当使用接受字符串和参数的方法时，只有在任何配置的全局过滤器或 Logger 的日志级别允许处理消息时，才会创建底层 Message 对象。"],["body","\n"],["body","考虑一个应用程序，它有一个包含 {\"Name\" = \"John Doe\", \"Address\" = \"123 Main St.\", \"Phone\" = \"(999) 555-1212\"} 的 Map 对象和一个具有\n\n返回“jdoe”的 getId 方法。\n\n开发人员想要添加返回“用户 John Doe 已使用 id jdoe 登录”的信息性消息。\n\n实现这一点的方法是：\nlogger.info(\"User {} has logged in using id {}\", map.get(\"Name\"), user.getId());\n\n"],["body","\n"],["body","虽然这本身没有任何问题，但随着对象的复杂性和所需输出的增加，这种技术变得更难使用。"],["body","\n"],["body","作为替代方案，使用 Messages 允许："],["body","\n"],["body","logger.info(new LoggedInMessage(map, user));\n"],["body","\n"],["body","在此替代方案中，格式化委托给 LoggedInMessage 对象的 getFormattedMessage 方法。"],["body","\n"],["body","尽管在此替代方案中创建了一个新对象，但在格式化 LoggedInMessage 之前，不会调用传递给 LoggedInMessage 的对象上的任何方法。"],["body","\n"],["body","当对象的 toString 方法不产生您希望出现在日志中的信息时，这尤其有用。"],["body","\n"],["body","Messages 的另一个优点是它们简化了编写布局。在其他日志框架中，布局必须单独遍历参数并根据遇到的对象确定要执行的操作。对于消息，布局可以选择将格式委托给消息或根据遇到的消息类型执行其格式。"],["body","\n"],["body","借用前面说明标记以识别正在记录的 SQL 语句的示例，还可以利用消息。首先，定义消息。"],["body","\n"],["body","public class SQLMessage implements Message {\n  public enum SQLType {\n      UPDATE,\n      QUERY\n  };\n \n  private final SQLType type;\n  private final String table;\n  private final Map<String, String> cols;\n \n  public SQLMessage(SQLType type, String table) {\n      this(type, table, null);\n  }\n \n  public SQLMessage(SQLType type, String table, Map<String, String> cols) {\n      this.type = type;\n      this.table = table;\n      this.cols = cols;\n  }\n \n  public String getFormattedMessage() {\n      switch (type) {\n          case UPDATE:\n            return createUpdateString();\n            break;\n          case QUERY:\n            return createQueryString();\n            break;\n          default;\n      }\n  }\n \n  public String getMessageFormat() {\n      return type + \" \" + table;\n  }\n \n  public Object getParameters() {\n      return cols;\n  }\n \n  private String createUpdateString() {\n  }\n \n  private String createQueryString() {\n  }\n \n  private String formatCols(Map<String, String> cols) {\n      StringBuilder sb = new StringBuilder();\n      boolean first = true;\n      for (Map.Entry<String, String> entry : cols.entrySet()) {\n          if (!first) {\n              sb.append(\", \");\n          }\n          sb.append(entry.getKey()).append(\"=\").append(entry.getValue());\n          first = false;\n      }\n      return sb.toString();\n  }\n}\n"],["body","\n"],["body","接下来我们可以在我们的应用程序中使用消息。"],["body","\n"],["body","import org.apache.logging.log4j.Logger;\nimport org.apache.logging.log4j.LogManager;\nimport java.util.Map;\n \npublic class MyApp {\n \n    private Logger logger = LogManager.getLogger(MyApp.class.getName());\n    private static final Marker SQL_MARKER = MarkerManager.getMarker(\"SQL\");\n    private static final Marker UPDATE_MARKER = MarkerManager.getMarker(\"SQL_UPDATE\", SQL_MARKER);\n    private static final Marker QUERY_MARKER = MarkerManager.getMarker(\"SQL_QUERY\", SQL_MARKER);\n \n    public String doQuery(String table) {\n        logger.entry(param);\n \n        logger.debug(QUERY_MARKER, new SQLMessage(SQLMessage.SQLType.QUERY, table));\n \n        return logger.exit();\n    }\n \n    public String doUpdate(String table, Map<String, String> params) {\n        logger.entry(param);\n \n        logger.debug(UPDATE_MARKER, new SQLMessage(SQLMessage.SQLType.UPDATE, table, parmas);\n \n        return logger.exit();\n    }\n}\n"],["body","\n"],["headingLink","其他消息类"],["heading","其他消息类"],["body","\n"],["headingLink","formattedmessage"],["heading","FormattedMessage"],["body","\n"],["body","使用 MessageFormatMessage 对其进行格式化"],["body","\n"],["headingLink","localizedmessage"],["heading","LocalizedMessage"],["body","\n"],["body","提供 LocalizedMessage 主要是为了提供与 Log4j 1.x 的兼容性。通常，本地化的最佳方法是让客户端 UI 在客户端的语言环境中呈现事件。"],["body","\n"],["headingLink","loggernameawaremessage"],["heading","LoggerNameAwareMessage"],["body","\n"],["body","此方法将在事件构造期间调用，以便 Message 具有在格式化消息时用于记录事件的 Logger 的名称。"],["body","\n"],["headingLink","mapmessage"],["heading","MapMessage"],["body","\n"],["body","MapMessage 包含字符串键和值的映射。 "],["body","\n"],["body","MapMessage 实现 FormattedMessage 并接受“XML”、“JSON”或“JAVA”的格式说明符，在这种情况下，Map 将被格式化为 XML、JSON 或 java.util.AbstractMap.toString() 所记录的格式。"],["body","\n"],["body","否则，地图将被格式化为“key1=value1 key2=value2 ...”。"],["body","\n"],["headingLink","一些-appender-专门使用-mapmessage-对象"],["heading","一些 Appender 专门使用 MapMessage 对象："],["body","\n\n"],["body","当 JMS Appender 配置了 MessageLayout 时，它会将 Log4j MapMessage 转换为 JMS javax.jms.MapMessage。"],["body","\n"],["body","当 JDBC Appender 配置了 MessageLayout 时，它会将 Log4j MapMessage 转换为 SQL INSERT 语句中的值。"],["body","\n"],["body","当 MongoDB3 Appender 或 MongoDB4 Appender 配置了 MessageLayout 时，它会将 Log4j MapMessage 转换为 MongoDB 对象中的字段。"],["body","\n\n"],["body","当 Appender 是 MessageLayout-aware 时，Log4j 发送到目标的对象不是 Log4j 日志事件，而是自定义对象。"],["body","\n"],["headingLink","messageformatmessage"],["heading","MessageFormatMessage"],["body","\n"],["body","MessageFormatMessage handles messages that use a conversion format. While this Message has more flexibility than ParameterizedMessage, it is also about two times slower."],["body","\n"],["headingLink","multiformatmessage"],["heading","MultiformatMessage"],["body","\n"],["body","A MultiformatMessage will have a getFormats method and a getFormattedMessage method that accepts and array of format Strings. The getFormats method may be called by a Layout to provide it information on what formatting options the Message supports. The Layout may then call getFormattedMessage with one or more for the formats. If the Message doesn't recognize the format name it will simply format the data using its default format. An example of this is the StructuredDataMessage which accepts a format String of \"XML\" which will cause it to format the event data as XML instead of the RFC 5424 format."],["body","\n"],["headingLink","objectmessage"],["heading","ObjectMessage"],["body","\n"],["body","Formats an Object by calling its toString method. Since Log4j 2.6, Layouts trying to be low-garbage or garbage-free will call the formatTo(StringBuilder) method instead."],["body","\n"],["headingLink","parameterizedmessage"],["heading","ParameterizedMessage"],["body","\n"],["body","ParameterizedMessage handles messages that contain \"{}\" in the format to represent replaceable tokens and the replacement parameters."],["body","\n"],["headingLink","reusableobjectmessage"],["heading","ReusableObjectMessage"],["body","\n"],["body","In garbage-free mode, this message is used to pass logged Objects to the Layout and Appenders. Functionally equivalent to ObjectMessage."],["body","\n"],["headingLink","reusableparameterizedmessage"],["heading","ReusableParameterizedMessage"],["body","\n"],["body","In garbage-free mode, this message is used to handle messages that contain \"{}\" in the format to represent replaceable tokens and the replacement parameters. Functionally equivalent to ParameterizedMessage."],["body","\n"],["headingLink","reusablesimplemessage"],["heading","ReusableSimpleMessage"],["body","\n"],["body","In garbage-free mode, this message is used to pass logged Strings and CharSequences to the Layout and Appenders. Functionally equivalent to SimpleMessage."],["body","\n"],["headingLink","simplemessage"],["heading","SimpleMessage"],["body","\n"],["body","SimpleMessage contains a String or CharSequence that requires no formatting."],["body","\n"],["headingLink","stringformattedmessage"],["heading","StringFormattedMessage"],["body","\n"],["body","StringFormattedMessage handles messages that use a conversion format that is compliant with [java.lang.String.format()](https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#format(java.lang.String, java.lang.Object...)). While this Message has more flexibility than ParameterizedMessage, it is also 5 to 10 times slower."],["body","\n"],["headingLink","structureddatamessage"],["heading","StructuredDataMessage"],["body","\n"],["body","StructuredDataMessage allows applications to add items to a Map as well as set the id to allow a message to be formatted as a Structured Data element in accordance with RFC 5424."],["body","\n"],["headingLink","threaddumpmessage"],["heading","ThreadDumpMessage"],["body","\n"],["body","A ThreadDumpMessage, if logged, will generate stack traces for all threads. The stack traces will include any locks that are held."],["body","\n"],["headingLink","timestampmessage"],["heading","TimestampMessage"],["body","\n"],["body","A TimestampMessage will provide a getTimestamp method that is called during event construction. The timestamp in the Message will be used in lieu of the current timestamp."],["body","\n"],["h1","Thread Context"],["body","\n"],["body","Log4j 引入了映射诊断上下文或 MDC 的概念。"],["body","\n"],["body","Log4j 2 延续了 MDC 和 NDC 的想法，但将它们合并到一个单一的线程上下文中。"],["body","\n"],["body","线程上下文映射相当于 MDC"],["body","\n"],["body","线程上下文堆栈相当于 NDC。"],["body","\n"],["body","两者间的区别是 "],["body","\n"],["body","至于选择NDC还是MDC要看需要存储的上下文信息是堆栈式的还是key/value形式的。"],["body","\n"],["body","NDC采用了一个类似栈的机制来push和pop上下文信息，每一个线程都独立地储存上下文信息。比如说一个servlet就可以针对每一个request创建对应的NDC，储存客户端地址等等信息。"],["body","\n"],["body","当使用的时候，我们要尽可能确保在进入一个context的时候，把相关的信息使用NDC.push(message);在离开这个context的时候使用NDC.pop()将信息删除。另外由于设计上的一些问题，还需要保证在当前thread结束的时候使用NDC.remove()清除内存，否则会产生内存泄漏的问题。"],["body","\n"],["headingLink","fish-tagging"],["heading","Fish Tagging"],["body","\n"],["body","大多数现实世界的系统必须同时处理多个客户端。在此类系统的典型多线程实现中，不同的线程将处理不同的客户端。日志记录特别适合跟踪和调试复杂的分布式应用程序。区分一个客户端的日志输出与另一个的常用方法是为每个客户端实例化一个新的单独记录器。这促进了记录器的扩散并增加了记录的管理开销。"],["body","\n"],["body","一种较轻的技术是对从同一客户端交互发起的每个日志请求进行唯一标记。 "],["body","\n"],["body","Neil Harrison 在由 R. Martin、D. Riehle 和 F. Buschmann 编辑的“程序设计模式语言 3”一书中的“记录诊断消息的模式”一书中描述了这种方法（Addison-Wesley，1997 年）。"],["body","\n"],["body","就像鱼可以被标记并跟踪其移动一样，使用通用标记或数据元素集标记日志事件允许跟踪事务或请求的完整流程。"],["body","\n"],["body","我们称之为鱼标记。"],["body","\n"],["body","log4j 提供了两种执行 Fish Tagging 的机制；"],["body","\n\n"],["body","\n"],["body","线程上下文映射"],["body","\n"],["body","\n"],["body","\n"],["body","线程上下文堆栈"],["body","\n"],["body","\n\n"],["body","线程上下文映射允许使用键/值对添加和识别任意数量的项目。"],["body","\n"],["body","线程上下文堆栈允许将一个或多个项目压入堆栈，然后通过它们在堆栈中的顺序或数据本身进行标识"],["body","\n"],["body","由于key/value对更加灵活，当请求的处理过程中可能会添加数据项或者数据项超过一两个时，推荐使用Thread Context Map。"],["body","\n"],["body","ThreadContext.push(UUID.randomUUID().toString()); // Add the fishtag;\n \nlogger.debug(\"Message 1\");\n.\n.\n.\nlogger.debug(\"Message 2\");\n.\n.\nThreadContext.pop();\n"],["body","\n"],["body","ThreadContext.put(\"id\", UUID.randomUUID().toString()); // Add the fishtag;\nThreadContext.put(\"ipAddress\", request.getRemoteAddr());\nThreadContext.put(\"loginId\", session.getAttribute(\"loginId\"));\nThreadContext.put(\"hostName\", request.getServerName());\n.\nlogger.debug(\"Message 1\");\n.\n.\nlogger.debug(\"Message 2\");\n.\n.\nThreadContext.clear();\n"],["body","\n"],["headingLink","closeablethreadcontext"],["heading","CloseableThreadContext"],["body","\n"],["body","放入堆栈需要清除数据，CloseableThreadContext 实现了 AutoCloseable 接口。"],["body","\n"],["body","这允许将项目推送到堆栈或放入映射中，并在调用 close() 方法时删除 - 或者作为 try-with-resources 的一部分自动删除。"],["body","\n"],["body","// Add to the ThreadContext stack for this try block only;\ntry (final CloseableThreadContext.Instance ctc = CloseableThreadContext.push(UUID.randomUUID().toString())) {\n \n    logger.debug(\"Message 1\");\n.\n.\n    logger.debug(\"Message 2\");\n.\n.\n}\n// Add to the ThreadContext map for this try block only;\ntry (final CloseableThreadContext.Instance ctc = CloseableThreadContext.put(\"id\", UUID.randomUUID().toString())\n                                                                .put(\"loginId\", session.getAttribute(\"loginId\"))) {\n \n    logger.debug(\"Message 1\");\n.\n.\n    logger.debug(\"Message 2\");\n.\n.\n}\n"],["body","\n"],["body","如果您使用线程池，则可以使用 putAll(final Map values) 和/或 pushAll(List messages) 方法初始化 CloseableThreadContext ；"],["body","\n"],["body","开启线程池时 使用putAll pushAll传值"],["body","\n"],["body","for( final Session session : sessions ) {\n    try (final CloseableThreadContext.Instance ctc = CloseableThreadContext.put(\"loginId\", session.getAttribute(\"loginId\"))) {\n        logger.debug(\"Starting background thread for user\");\n        final Map<String, String> values = ThreadContext.getImmutableContext();\n        final List<String> messages = ThreadContext.getImmutableStack().asList();\n        executor.submit(new Runnable() {\n        public void run() {\n            try (final CloseableThreadContext.Instance ctc = CloseableThreadContext.putAll(values).pushAll(messages)) {\n                logger.debug(\"Processing for user started\");\n                .\n                logger.debug(\"Processing for user completed\");\n            }\n        });\n    }\n}\n"],["body","\n"],["body","Map 可以配置为使用 InheritableThreadLocal.以这种方式配置时，Map 的内容将传递给子线程。"],["body","\n"],["headingLink","配置"],["heading","配置"],["body","\n"],["headingLink","configuration"],["heading","Configuration"],["body","\n\n"],["body","Set the system property disableThreadContextMap to true to disable the Thread Context Map."],["body","\n"],["body","Set the system property disableThreadContextStack to true to disable the Thread Context Stack."],["body","\n"],["body","Set the system property disableThreadContext to true to disable both the Thread Context Map and Stack."],["body","\n"],["body","Set the system property log4j2.isThreadContextMapInheritable to true to enable child threads to inherit the Thread Context Map."],["body","\n\n"],["headingLink","including-the-threadcontext-when-writing-logs"],["heading","Including the ThreadContext when writing logs"],["body","\n"],["body","The PatternLayout provides mechanisms to print the contents of the ThreadContext Map and Stack."],["body","\n\n"],["body","Use %X by itself to include the full contents of the Map."],["body","\n"],["body","Use %X{key} to include the specified key."],["body","\n"],["body","Use %x to include the full contents of the Stack."],["body","\n\n"],["headingLink","custom-context-data-injectors-for-non-thread-local-context-data"],["heading","Custom context data injectors for non thread-local context data"],["body","\n"],["body","With the ThreadContext logging statements can be tagged so log entries that were related in some way can be linked via these tags. The limitation is that this only works for logging done on the same application thread (or child threads when configured)."],["body","\n"],["body","Some applications have a thread model that delegates work to other threads, and in such models, tagging attributes that are put into a thread-local map in one thread are not visible in the other threads and logging done in the other threads will not show these attributes."],["body","\n"],["body","Log4j 2.7 adds a flexible mechanism to tag logging statements with context data coming from other sources than the ThreadContext. See the manual page on extending Log4j for details."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/log4j2/README.html"],["title","log4j2 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","日志介绍"],["body","\n"],["body","​\t几乎每个大型应用程序都包含自己的日志记录或跟踪 API，the E.U. SEMPER project  决定实现自己记录API、这是1996年初，经过无数次的改进、several incarnations 和大量工作，API 已经演变成 log4j，一个流行的 Java 日志记录包，该软件包是在 Apache 软件许可证下分发的，"],["body","\n"],["body","​\tApache 软件许可证是由开源计划认证的成熟的开源许可证。可以在 http://logging.apache.org/log4j/2.x/index.html 找到最新的 log4j 版本，包括完整的源代码、类文件和文档"],["body","\n"],["body","​\t\t将日志语句插入代码是一种低技术的调试方法。这也可能是唯一的方法，因为调试器并不总是可用的。这通常适用于多线程应用程序和整个分布式应用程序。"],["body","\n"],["body","​\t\t经验表明，日志记录是开发周期的重要组成部分。它提供了几个优点。"],["body","\n\n"],["body","它提供有关应用程序运行的精确上下文"],["body","\n"],["body","一旦插入到代码中，日志输出的生成就不需要人工干预"],["body","\n"],["body","此外，日志输出可以保存在持久性介质中，以备日后研究"],["body","\n"],["body","除了在开发周期中使用之外，一个足够丰富的日志包也可以被视为一个审计工具"],["body","\n\n"],["h1","Log4j 2介绍"],["body","\n"],["body","Log4j 1.x 已被广泛采用并用于许多应用程序。然而，多年来它的发展已经放缓。"],["body","\n"],["body","由于需要兼容非常旧的 Java 版本，它变得更加难以维护，并于 2015 年 8 月终止。它的替代方案 SLF4J/Logback 对该框架进行了许多必要的改进。那么为什么要为 Log4j 2 烦恼呢？"],["body","\n\n"],["body","Log4j 2 旨在用作审计日志记录框架。 Log4j 1.x 和 Logback 在重新配置时都会丢失事件。 Log4j 2 不会。"],["body","\n"],["body","Log4j 2 包含基于 LMAX Disruptor 库的下一代异步记录器。在多线程场景中，异步 Logger 的吞吐量比 Log4j 1.x 和 Logback 高 10 倍，延迟低几个数量级。"],["body","\n"],["body","Log4j 2 对于独立应用程序是 garbage free，在稳定状态日志记录期间对于 Web 应用程序来说是低垃圾。这减少了垃圾收集器的压力，并且可以提供更好的响应时间性能。"],["body","\n"],["body","Log4j 2 使用插件系统，通过添加新的 Appenders, Filters, Layouts, Lookups  and Pattern Converters ，无需对 Log4j 进行任何更改，就可以非常轻松地扩展框架。"],["body","\n"],["body","由于插件系统配置更简单。配置中的条目不需要指定类名。"],["body","\n"],["body","支持自定义日志级别。自定义日志级别可以在代码或配置中定义。"],["body","\n"],["body","支持 lambda 表达式。仅当启用了请求的日志级别时，在 Java 8 上运行的客户端代码才能使用 lambda 表达式来延迟构建日志消息。不需要显式级别检查，从而使代码更清晰。"],["body","\n"],["body","支持消息对象。消息允许通过日志系统传递有趣和复杂的结构并进行有效操作。 Users are free to create their own Message types and write custom Layouts, Filters and Lookups to manipulate them."],["body","\n"],["body","Log4j 1.x supports Filters on Appenders. Logback added TurboFilters to allow filtering of events before they are processed by a Logger. Log4j 2 supports Filters that can be configured to process events before they are handled by a Logger, as they are processed by a Logger or on an Appender."],["body","\n"],["body","大多数 Log4j 2 Appender 接受 Layout，允许以任何所需的格式传输数据。"],["body","\n"],["body","Log4j 1.x 和 Logback 中的布局返回一个字符串。这导致了 Logback Encoders 中讨论的问题。 Log4j 2 采用更简单的方法，即 Layouts 总是返回一个字节数组。这样做的好处是，意味着它们几乎可以在任何 Appender 中使用，而不仅仅是写入 OutputStream Appender。"],["body","\n"],["body","Syslog Appender 支持 TCP 和 UDP，并支持 BSD syslog 和 RFC 5424 格式。"],["body","\n"],["body","Log4j 2 利用 Java 5 并发支持并在可能的最低级别执行锁定"],["body","\n"],["body","它是一个 Apache 软件基金会项目，遵循所有 ASF 项目使用的社区和支持模型。如果您想贡献或获得提交更改的权利，只需遵循贡献中概述的路径即可。"],["body","\n\n"],["h1","架构"],["body","\n"],["body","\n\n"],["body","使用 Log4j 2 API 的应用程序将从 LogManager 请求具有特定名称的 Logger。 "],["body","\n"],["body","LogManager 将定位适当的 LoggerContext，然后从中获取 Logger。"],["body","\n"],["body","如果必须创建 Logger，它将与包含 a) 与 Logger 相同的名称，b) 父包的名称或 c) 根 LoggerConfig 的 LoggerConfig 相关联。 "],["body","\n"],["body","LoggerConfig 对象是从配置中的 Logger 声明创建的。 "],["body","\n"],["body","LoggerConfig 与实际交付 LogEvents 的 Appender 相关联。"],["body","\n\n"],["headingLink","logger-hierarchy"],["heading","Logger Hierarchy"],["body","\n"],["body","在 Log4j 1.x 中，Logger Hierarchy 是通过 Logger 之间的关系维护的。在 Log4j 2 中，这种关系不再存在。"],["body","\n"],["body","相反，层次结构在 LoggerConfig 对象之间的关系中维护。"],["body","\n"],["body","Loggers 和 LoggerConfigs 是命名实体。 Logger 名称区分大小写，并遵循分层命名规则："],["body","\n"],["body","Named Hierarchy"],["body","\n\n"],["body","\n"],["body","通过 点分命名"],["body","\n"],["body","\n"],["body","\n"],["body","com.foo 是 com.foo.Bar 的祖先"],["body","\n"],["body","\n"],["body","\n"],["body","根Config位于 LoggerConfig层级结构的顶部，它的特殊之处在于它始终存在并且它是每个层次结构的一部分"],["body","\n"],["body","\n"],["body","\n"],["body","直接 获取 根LoggerConfig的Logger可以通过如下方式获取 "],["body","\n"],["body","Logger logger = LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);\n//或者\nLogger logger = LogManager.getRootLogger();\n"],["body","\n"],["body","\n\n"],["headingLink","loggercontext"],["heading","LoggerContext"],["body","\n"],["body","LoggerContext 作为 Logging 系统的锚点。但是，根据情况，应用程序中可能有多个活动的 LoggerContexts。"],["body","\n"],["body","有关 LoggerContext 的更多详细信息，请参见日志分离部分"],["body","\n"],["headingLink","configuration"],["heading","Configuration"],["body","\n"],["body","每个 LoggerContext 都有一个活动配置。"],["body","\n"],["body","配置包含所有 Appender、上下文范围的过滤器、LoggerConfig 并包含对 StrSubstitutor 的引用。"],["body","\n"],["body","在重新配置期间，将存在两个 Configuration 对象。一旦所有记录器都被重定向到新配置，旧配置将被停止并丢弃。"],["body","\n"],["headingLink","logger"],["heading","Logger"],["body","\n"],["body","如前所述，Logger 是通过调用 LogManager.getLogger 创建的。 "],["body","\n"],["body","Logger 本身不执行任何直接操作。"],["body","\n"],["body","它只有一个名称并与 LoggerConfig 相关联。"],["body","\n"],["body","它扩展了 AbstractLogger 并实现了所需的方法。"],["body","\n"],["body","随着配置被修改，Logger 可能会与不同的 LoggerConfig 相关联，从而导致它们的行为被修改。"],["body","\n"],["headingLink","loggerconfig"],["heading","LoggerConfig"],["body","\n\n"],["body","LoggerConfig 对象是在日志配置中声明 Logger 时创建的。 LoggerConfig 包含一组过滤器，必须允许 LogEvent 在它被传递给任何 Appender 之前通过。它包含对应该用于处理事件的 Appender 集的引用。"],["body","\n"],["body","oggerConfigs 将被分配一个日志级别。内置级别集包括 TRACE、DEBUG、INFO、WARN、ERROR 和 FATAL。 Log4j 2 还支持自定义日志级别。"],["body","\n"],["body","另一种获得更多粒度的机制是改用标记。 Log4j 1.x 和 Logback 都有“级别继承”的概念。在 Log4j 2 中，Loggers 和 LoggerConfigs 是两个不同的对象，因此这个概念的实现方式不同。每个 Logger 引用适当的 LoggerConfig，后者又可以引用其父级，从而达到相同的效果"],["body","\n\n"],["body","日志级别默认支持自动级别过滤"],["body","\n"],["body","横坐标是日志事件的级别、纵坐标是日志配置的级别"],["body","\n"],["body","Event Level"],["body","LoggerConfig Level"],["body","\n"],["body","TRACE"],["body","DEBUG"],["body","INFO"],["body","WARN"],["body","ERROR"],["body","FATAL"],["body","OFF"],["body","\n"],["body","ALL"],["body","YES"],["body","YES"],["body","YES"],["body","YES"],["body","YES"],["body","YES"],["body","NO"],["body","\n"],["body","TRACE"],["body","YES"],["body","NO"],["body","NO"],["body","NO"],["body","NO"],["body","NO"],["body","NO"],["body","\n"],["body","DEBUG"],["body","YES"],["body","YES"],["body","NO"],["body","NO"],["body","NO"],["body","NO"],["body","NO"],["body","\n"],["body","INFO"],["body","YES"],["body","YES"],["body","YES"],["body","NO"],["body","NO"],["body","NO"],["body","NO"],["body","\n"],["body","WARN"],["body","YES"],["body","YES"],["body","YES"],["body","YES"],["body","NO"],["body","NO"],["body","NO"],["body","\n"],["body","ERROR"],["body","YES"],["body","YES"],["body","YES"],["body","YES"],["body","YES"],["body","NO"],["body","NO"],["body","\n"],["body","FATAL"],["body","YES"],["body","YES"],["body","YES"],["body","YES"],["body","YES"],["body","YES"],["body","NO"],["body","\n"],["body","OFF"],["body","NO"],["body","NO"],["body","NO"],["body","NO"],["body","NO"],["body","NO"],["body","NO"],["body","\n\n\n"],["headingLink","filter"],["heading","Filter"],["body","\n"],["body","除了上一节中描述的自动日志级别过滤之外，Log4j 还提供了过滤器，"],["body","\n\n"],["body","这些过滤器可以在控制传递给任何 LoggerConfig 之前，"],["body","\n"],["body","在控制传递给 LoggerConfig 之后但在调用任何 Appenders 之前"],["body","\n"],["body","在控制传递之后应用到 LoggerConfig 但在调用特定 Appender 之前，"],["body","\n"],["body","以及在每个 Appender 上。"],["body","\n\n"],["body","以与防火墙过滤器非常相似的方式，每个过滤器可以返回三个结果之一，接受、拒绝或中立。 "],["body","\n"],["body","Accept, Deny or Neutral"],["body","\n\n"],["body","\n"],["body","Accept 的响应意味着不应调用其他过滤器并且事件应该进行。"],["body","\n"],["body","\n"],["body","\n"],["body","拒绝响应意味着应立即忽略该事件并将控制权返回给调用者。 "],["body","\n"],["body","\n"],["body","\n"],["body","Neutral 响应表示该事件应传递给其他过滤器。"],["body","\n"],["body","\n\n"],["body","如果没有其他过滤器，则将处理该事件。"],["body","\n"],["headingLink","appender"],["heading","Appender"],["body","\n"],["body","目前，存在用于控制台、文件、远程套接字服务器、Apache Flume、JMS、远程 UNIX Syslog 守护进程和各种数据库 API 的附加程序。"],["body","\n"],["body","有关可用的各种类型的更多详细信息，请参阅 Appenders 部分。一个 Logger 可以附加多个 Appender。可以通过调用当前 Configuration 的 addLoggerAppender 方法将 Appender 添加到 Logger。如果与 Logger 名称匹配的 LoggerConfig 不存在，则将创建一个，将 Appender 附加到它，然后将通知所有 Loggers 更新它们的 LoggerConfig 引用。"],["body","\n"],["body","appender可加性原则"],["body","\n"],["body","给定记录器的每个启用的日志记录请求都将转发到该 Logger 的 LoggerConfig 中的所有 appender 以及 LoggerConfig 父级的 Appender。"],["body","\n"],["body","换句话说，Appender 从 LoggerConfig 层次结构中附加地继承。"],["body","\n"],["body","例如，如果将控制台 appender 添加到根记录器，则所有启用的日志记录请求至少会在控制台上打印。"],["body","\n"],["body","如果另外将文件附加程序添加到 LoggerConfig，例如 C，则为 C 和 C 的子项启用的日志记录请求将打印在文件和控制台上。"],["body","\n"],["body","可以通过在配置文件中的 Logger 声明中设置 additivity=\"false\" 来覆盖此默认行为，以便 Appender 累积不再是可加的。"],["body","\n"],["body","下面总结了管理 appender 可加性的规则。"],["body","\n"],["body","L 的一条日志语句的输出将转到与 L 关联的 LoggerConfig 中的所有 Appender 以及该 LoggerConfig 的祖先。"],["body","\n"],["body","这就是术语“appender 可加性”的含义。"],["body","\n"],["body","但是，如果与 Logger L 关联的 LoggerConfig 的祖先，例如 P，将可加性标志设置为 false，那么 L 的输出将被定向到 L 的 LoggerConfig 中的所有 appender，并且它的祖先一直到并包括 P，但不包括在 "],["body","\n"],["body","The table below shows an example:"],["body","\n"],["body","Logger Name"],["body","Added Appenders"],["body","Additivity Flag"],["body","Output Targets"],["body","Comment"],["body","\n"],["body","root"],["body","A1"],["body","not applicable"],["body","A1"],["body","The root logger has no parent so additivity does not apply to it."],["body","\n"],["body","x"],["body","A-x1, A-x2"],["body","true"],["body","A1, A-x1, A-x2"],["body","Appenders of \"x\" and root."],["body","\n"],["body","x.y"],["body","none"],["body","true"],["body","A1, A-x1, A-x2"],["body","Appenders of \"x\" and root. It would not be typical to configure a Logger with no Appenders."],["body","\n"],["body","x.y.z"],["body","A-xyz1"],["body","true"],["body","A1, A-x1, A-x2, A-xyz1"],["body","Appenders in \"x.y.z\", \"x\" and root."],["body","\n"],["body","security"],["body","A-sec"],["body","false"],["body","A-sec"],["body","No appender accumulation since the additivity flag is set to false."],["body","\n"],["body","security.access"],["body","none"],["body","true"],["body","A-sec"],["body","Only appenders of \"security\" because the additivity flag in \"security\" is set to false."],["body","\n\n\n"],["headingLink","layout"],["heading","Layout"],["body","\n"],["body","通常情况下，用户不仅希望自定义输出目的地，还希望自定义输出格式。"],["body","\n"],["body","这是通过将 Layout 与 Appender 相关联来实现的。 "],["body","\n"],["body","Layout 负责根据用户的意愿格式化 LogEvent，而 appender 负责将格式化的输出发送到其目的地。 "],["body","\n"],["body","PatternLayout 是标准 log4j 发行版的一部分，它允许用户根据类似于 C 语言 printf 函数的转换模式来指定输出格式。"],["body","\n"],["body","例如，具有转换模式“%r [%t] %-5p %c - %m%n”的 PatternLayout 将输出类似于："],["body","\n"],["body","176 [main] INFO  org.foo.Bar - Located nearest gas station.\n"],["body","\n"],["body","第一个字段是自程序启动以来经过的毫秒数。"],["body","\n"],["body","第二个字段是发出日志请求的线程。"],["body","\n"],["body","第三个字段是日志语句的级别。"],["body","\n"],["body","第四个字段是与日志请求关联的记录器的名称。 "],["body","\n"],["body","“-”后面的文字是语句的信息。"],["body","\n"],["body","Log4j 为各种用例提供了许多不同的布局，例如 JSON、XML、HTML 和 Syslog（包括新的 RFC 5424 版本）。"],["body","\n"],["body","其他附加程序（例如数据库连接器）填充指定的字段而不是特定的文本布局。"],["body","\n"],["body","同样重要的是，log4j 将根据用户指定的标准呈现日志消息的内容。"],["body","\n"],["body","例如，如果您经常需要记录当前项目中使用的对象类型 Oranges，那么您可以创建一个接受 Orange 实例的 OrangeMessage 并将其传递给 Log4j，以便在以下情况下可以将 Orange 对象格式化为适当的字节数组"],["body","\n"],["headingLink","strsubstitutor-and-strlookup"],["heading","StrSubstitutor and StrLookup"],["body","\n"],["body","StrSubstitutor 类和 StrLookup 接口是从 Apache Commons Lang 借来的，然后经过修改以支持评估 LogEvents。"],["body","\n"],["body","此外，Interpolator 类是从 Apache Commons Configuration 借来的，以允许 StrSubstitutor 评估来自多个 StrLookups 的变量。"],["body","\n"],["body","它也经过修改以支持评估 LogEvents。"],["body","\n"],["body","这些共同提供了一种机制，允许配置引用来自系统属性、配置文件、ThreadContext Map、LogEvent 中的 StructuredData 的变量。"],["body","\n"],["body","如果组件能够处理它，则可以在处理配置时或在处理每个事件时解析变量。"],["body","\n"],["body","有关详细信息，请参阅查找。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/SL4j.html"],["title","SL4j.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概述"],["body","\n"],["body","使用过 Log4J 和 LogBack 的同学肯定能发现，这两个框架的设计理念极为相似，使用方法也如出一辙。"],["body","\n"],["body","其实这个两个框架的作者都是一个人，Ceki Gülcü，俄罗斯程序员。"],["body","\n"],["body","Log4J 最初是基于Java开发的日志框架，发展一段时间后，作者Ceki Gülcü将 Log4j 捐献给了Apache软件基金会，使之成为了Apache日志服务的一个子项目。 又由于 Log4J 出色的表现，后续又被孵化出了支持C, C++, C#, Perl, Python, Ruby等语言的子框架。"],["body","\n"],["body","然而，伟大的程序员好像都比较有个性。Ceki Gülcü由于不满Apache对 Log4J 的管理，决定不再参加 Log4J 的开发维护。“出走”后的Ceki Gülcü另起炉灶，开发出了 LogBack 这个框架（ SLF4J 是和 LogBack 一起开发出来的）。"],["body","\n"],["body","LogBack 改进了很多 Log4J 的缺点，在性能上有了很大的提升，同时使用方式几乎和 Log4J 一样，许多用户开始慢慢开始使用 LogBack 。"],["body","\n"],["body","由于受到 LogBack 的冲击， Log4J 开始式微。终于，2015年9月，Apache软件基金业宣布， Log4j 不在维护，建议所有相关项目升级到 Log4j2 。"],["body","\n"],["body","Log4J2 是Apache开发的一个新的日志框架，改进了很多 Log4J 的缺点，同时也借鉴了 LogBack ，号称在性能上也是完胜 LogBack"],["body","\n"],["h1","门面模式如何动态替换日志实现"],["body","\n"],["headingLink","sl4j-api18以前"],["heading","sl4j-api1.8以前"],["body","\n"],["body","public static ILoggerFactory getILoggerFactory() {\n       //双重检查\n       if (INITIALIZATION_STATE == UNINITIALIZED) {\n           synchronized (LoggerFactory.class) {\n               if (INITIALIZATION_STATE == UNINITIALIZED) {\n                   INITIALIZATION_STATE = ONGOING_INITIALIZATION;\n                   //初始化工厂类，进去后就会发现会用到下面几行的StaticLoggerBinder类\n                   performInitialization();\n               }\n           }\n       }\n       switch (INITIALIZATION_STATE) {\n       case SUCCESSFUL_INITIALIZATION:\n           //关键所在，StaticLoggerBinder这个类是logback的（slf4j-log4j12中也有同名类）\n           return StaticLoggerBinder.getSingleton().getLoggerFactory();\n       。。。\n   }\n"],["body","\n\n"],["body","\n"],["body","上述代码还是在slf4j-api中，说到这有个疑问，那么在slf4j-api这个包中，不存在这个StaticLoggerBinder类，是怎么打包出来的呢？查看源码，发现其实源码中有这个类。只是在pom打包时将这个impl包整个删掉了。非常粗暴（1.8之后不再使用这种方式了）"],["body","\n"],["body","\n"],["body","\n"],["body","原理是 ：在代码中写死了，利用类加载机制，只会加载一个 同名的类，其余实现类则忽略 掉"],["body","\n"],["body","org.slf4j.impl.StaticLoggerBinder"],["body","\n"],["body","\n\n"],["body","if (!isAndroid()) {\n            // We need to use the name of the StaticLoggerBinder class, but we can't\n            // reference\n            // the class itself.\n            //private static String STATIC_LOGGER_BINDER_PATH = \"org/slf4j/impl/StaticLoggerBinder.class\";\n            staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet();\n            reportMultipleBindingAmbiguity(staticLoggerBinderPathSet);\n        }\n        // the next line does the binding\n        StaticLoggerBinder.getSingleton();\n"],["body","\n"],["headingLink","sl4j-api18之后"],["heading","sl4j-api1.8之后"],["body","\n"],["body","\n"],["body","使用SPI机制"],["body","\n"],["body","\n"],["headingLink","核心绑定逻辑"],["heading","核心绑定逻辑"],["body","\n\n"],["body","根据SPI机制 进行类发现"],["body","\n"],["body","如果发现多个实现类则 输出日志"],["body","\n"],["body","默认选择 第一个实例化，并报告被实例化的 那个实现类"],["body","\n"],["body","进行其他初始化动作"],["body","\n"],["body","如果 SPI类发现机制 没有发现，则  使用 旧版本的 类发现机制，报告当前的 StaticLoggerBinder binder"],["body","\n\n"],["body","private final static void bind() {\n    try {\n        List<SLF4JServiceProvider> providersList = findServiceProviders();\n        reportMultipleBindingAmbiguity(providersList);\n        if (providersList != null && !providersList.isEmpty()) {\n           PROVIDER = providersList.get(0);\n           PROVIDER.initialize();\n           INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION;\n            reportActualBinding(providersList);\n            fixSubstituteLoggers();\n            replayEvents();\n            // release all resources in SUBST_FACTORY\n            SUBST_PROVIDER.getSubstituteLoggerFactory().clear();\n        } else {\n            INITIALIZATION_STATE = NOP_FALLBACK_INITIALIZATION;\n            Util.report(\"No SLF4J providers were found.\");\n            Util.report(\"Defaulting to no-operation (NOP) logger implementation\");\n            Util.report(\"See \" + NO_PROVIDERS_URL + \" for further details.\");\n\n            Set<URL> staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet();\n            reportIgnoredStaticLoggerBinders(staticLoggerBinderPathSet);\n        }\n    } catch (Exception e) {\n        failedBinding(e);\n        throw new IllegalStateException(\"Unexpected initialization failure\", e);\n    }\n}\n"],["body","\n"],["body","private static List<SLF4JServiceProvider> findServiceProviders() {\n    ServiceLoader<SLF4JServiceProvider> serviceLoader = ServiceLoader.load(SLF4JServiceProvider.class);\n    List<SLF4JServiceProvider> providerList = new ArrayList<SLF4JServiceProvider>();\n    for (SLF4JServiceProvider provider : serviceLoader) {\n        providerList.add(provider);\n    }\n    return providerList;\n}\n"],["body","\n"],["h1","父类委托机制"],["body","\n"],["body","如果 当前 logger没有配置 LEVEL 或者没有配置 APPEND，则会往向上一级父级 寻找"],["body","\n"],["body","public void callAppenders(ILoggingEvent event) {\n       int writes = 0;\n       for (Logger l = this; l != null; l = l.parent) {\n           writes += l.appendLoopOnAppenders(event);\n           //这里能看到日志会不断寻找其父级logger，并且把logevent交给父级的appender，除非additive为false，这也和我们配置中的<logger additive>属性对应上了\n           if (!l.additive) {\n               break;\n           }\n       }\n       // No appenders in hierarchy\n       if (writes == 0) {\n           loggerContext.noAppenderDefinedWarning(this);\n       }\n   }\n"],["body","\n"],["body","所以这里我们明白一点：未专门配置appender的logger，且additive为true的（默认就是），实际上最终都是由root的appender完成的日志输出。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/日志处理进化史.html"],["title","日志处理进化史.md - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","第一阶段"],["body","\n\n"],["body","\n"],["body","使用日志库"],["body","\n"],["body","\n"],["body","\n"],["body","用 Linux 命令过滤出带 “ERROR” 字段的日志行就行了"],["body","\n"],["body","\n\n"],["h1","第二阶段"],["body","\n\n"],["body","日志分级"],["body","\n"],["body","将 ERROR（错误）级别的日志单独输出到 error.log 文件中"],["body","\n\n"],["h1","第三阶段"],["body","\n\n"],["body","按类隔离"],["body","\n"],["body","按功能分文件"],["body","\n\n"],["h1","第四阶段"],["body","\n"],["body","自动刷新日志配置"],["body","\n"],["h1","第五阶段"],["body","\n"],["body","MDC 链路追踪"],["body","\n"],["h1","第六阶段"],["body","\n"],["body","日志收集"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","19.日志/README.html"],["title","日志 - JAVA笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n            \n                                \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["h1","概述"],["body","\n"],["body","在java的世界里有许多实现日志功能的工具，最早得到广泛使用的是 log4j，现在比较流行的是slf4j+logback。"],["body","\n"],["body","作为开发人员，我们有时候需要封装一些组件（二方包）提供给其他人员使用，但是那么多的日志工具，根本没法保证每个组件里都能使用约定好的日志工具，况且还有很多第三方的包，鬼知道他会用什么日志工具。"],["body","\n"],["body","假如一个应用程序用到了两个组件，恰好两个组件使用不同的日志工具，那么应用程序就会有两份日志输出了，蛋疼吧。。\n下面简单介绍下常见的日志工具："],["body","\n"],["h1","日志的核心功能"],["body","\n"],["body","日志系统核心时记录日志，以方便排查问题或作为其他系统进行统计。其核心功能如下"],["body","\n\n"],["body","1 支持多渠道输出"],["body","\n"],["body","2 日志信息支持多等级"],["body","\n"],["body","3 渠道,日志和等级做关联，以支持渠道过滤不必要的日志信息"],["body","\n\n"],["h1","日志原理简述"],["body","\n"],["headingLink","日志组件"],["heading","日志组件"],["body","\n"],["body","日志功能的实现基本靠一下几个组件来完成："],["body","\n"],["body","Loggers："],["body","\n"],["body","Logger负责捕捉事件并将其发送给合适的Appender\nAppenders："],["body","\n"],["body","也称为Handlers，负责从Logger中取出日志消息，并使用Layout来格式化消息，然后将消息发送出去，比如发送到控制台、文件或其他日志收集系统。"],["body","\n"],["body","Layouts："],["body","\n"],["body","也称为Formatters，负责对日志事件进中的数据进行转换和格式化。"],["body","\n"],["body","Filters："],["body","\n"],["body","过滤器，根据需要定制哪些信息会被记录，哪些信息会被放过。"],["body","\n"],["headingLink","总结"],["heading","总结"],["body","\n"],["body","总结一下就是：用户使用Logger来进行日志记录，Logger持有若干个Handler，日志的输出操作是由Handler完成的。在Handler在输出日志前，会经过Filter的过滤，判断代码是否可以继续执行，Filter返回false，日志方法return，Handler不会处理；Filter返回true，则继续向下执行，Handler会将日志内容输出到指定位置（日志文件、控制台等）。Handler在输出日志时会使用Layout，将输出内容进行排版。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    "],["body","\n                        \n                            \n                                \n                            \n\n                            \n                                \n                            \n\n                        \n                    "],["body","\n                \n            \n\n            "],["body","\n                    \n                        \n                    \n\n                    \n                        \n                    \n            "],["body","\n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]]]