[[["_relative_fp","index.html"],["title","pyscript - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","什么是pyscript"],["heading","什么是PyScript"],["body","\n"],["body","PyScript是一个在现代Web浏览器中运行Python的平台。"],["body","\n"],["body","使用PyScript开发环境创建应用程序：编写代码，整理项目资产，并测试您的应用程序。"],["body","\n"],["body","要分发PyScript应用程序，请将其托管为静态网站，然后单击应用程序的链接。PyScript和浏览器会完成其余工作。"],["body","\n"],["headingLink","注意"],["heading","注意"],["body","\n"],["body","要获得PyScript开发环境和托管的最简单方法是在浏览器中使用pyscript.com。"],["body","\n"],["body","这是一个免费服务，可帮助您从模板创建新项目，然后使用唯一链接编辑、预览和部署您的应用程序。"],["body","\n"],["body","虽然pyscript.com的核心功能将始终是免费的，但额外的付费功能直接支持和维持PyScript开源项目。商业和教育支持也可用。"],["body","\n"],["headingLink","pyscript要求"],["heading","PyScript要求"],["body","\n"],["body","所有PyScript应用程序都需要三样东西"],["body","\n\n"],["body","一个提供给您浏览器的index.html文件"],["body","\n"],["body","描述您的应用程序将在其中运行的Python环境。这通常由一个pyscript.json或pyscript.toml文件指定"],["body","\n"],["body","Python代码（通常在一个名为main.py的文件中），定义您的应用程序如何工作。"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python_install_guide.html"],["title","install_guide.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","centos-7安装python-310指南"],["heading","CentOS 7安装Python 3.10指南"],["body","\n"],["headingLink","背景说明"],["heading","背景说明"],["body","\n\n"],["body","CentOS 7默认安装的Python版本为2.7.5"],["body","\n"],["body","通过默认软件源能安装的最新Python 3版本为3.6.8"],["body","\n"],["body","建议升级到更高版本的Python 3（3.7+），不推荐使用3.6版本"],["body","\n\n"],["headingLink","重要提示"],["heading","重要提示"],["body","\n"],["body","\n"],["body","Python 3.7及以后版本需要更高版本的OpenSSL支持。CentOS 7.9默认的OpenSSL 1.0.2k-fips版本可能不满足要求，如需使用SSL功能，需要预先编译安装更高版本的OpenSSL。"],["body","\n"],["body","\n"],["headingLink","安装步骤"],["heading","安装步骤"],["body","\n"],["headingLink","1-安装依赖包"],["heading","1. 安装依赖包"],["body","\n"],["body","yum groupinstall \"Development Tools\"\nyum install openssl-devel bzip2-devel libffi-devel\n"],["body","\n"],["headingLink","2-下载python源码"],["heading","2. 下载Python源码"],["body","\n"],["body","wget https://www.python.org/ftp/python/3.10.9/Python-3.10.9.tgz\n"],["body","\n"],["headingLink","3-解压并进入目录"],["heading","3. 解压并进入目录"],["body","\n"],["body","tar zxvf Python-3.10.9.tgz\ncd Python-3.10.9\n"],["body","\n"],["headingLink","4-编译安装"],["heading","4. 编译安装"],["body","\n"],["body","./configure --prefix=/usr/local/python310\nmake && make install\n"],["body","\n"],["headingLink","5-配置环境变量"],["heading","5. 配置环境变量"],["body","\n"],["body","临时配置："],["body","\n"],["body","export PATH=/usr/local/python310/bin:$PATH\n"],["body","\n"],["body","永久配置："],["body","\n"],["body","echo 'export PATH=/usr/local/python310/bin:$PATH' >> /etc/profile\nsource /etc/profile\n"],["body","\n"],["headingLink","6-验证安装"],["heading","6. 验证安装"],["body","\n"],["body","python3 -V\n"],["body","\n"],["headingLink","参考来源"],["heading","参考来源"],["body","\n\n"],["body","CentOS7安装新版本Python3.10"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","logging.html"],["title","logging.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python-logging库使用指南"],["heading","Python logging库使用指南"],["body","\n"],["headingLink","1-基本概念"],["heading","1. 基本概念"],["body","\n"],["body","Python的logging库是标准库的一部分，提供了灵活的日志记录功能。它允许开发者记录程序运行时的各种信息，便于调试和监控。"],["body","\n"],["headingLink","11-日志级别"],["heading","1.1 日志级别"],["body","\n"],["body","logging库定义了以下几个日志级别（按严重程度递增）："],["body","\n\n"],["body","DEBUG (10): 详细信息，通常用于调试问题"],["body","\n"],["body","INFO (20): 确认程序按预期运行"],["body","\n"],["body","WARNING (30): 表示可能出现的问题，程序仍在正常工作"],["body","\n"],["body","ERROR (40): 由于更严重的问题，程序无法执行某些功能"],["body","\n"],["body","CRITICAL (50): 严重错误，表明程序可能无法继续运行"],["body","\n\n"],["body","默认情况下，logging模块只显示WARNING及以上级别的日志。"],["body","\n"],["headingLink","2-基本使用"],["heading","2. 基本使用"],["body","\n"],["headingLink","21-简单示例"],["heading","2.1 简单示例"],["body","\n"],["body","import logging\n\n# 基本配置\nlogging.basicConfig(level=logging.INFO)\n\n# 记录不同级别的日志\nlogging.debug(\"这是一条调试信息\")  # 不会显示，因为级别设置为INFO\nlogging.info(\"这是一条信息\")\nlogging.warning(\"这是一条警告\")\nlogging.error(\"这是一条错误信息\")\nlogging.critical(\"这是一条严重错误信息\")\n"],["body","\n"],["headingLink","22-配置日志格式"],["heading","2.2 配置日志格式"],["body","\n"],["body","import logging\n\n# 配置日志格式\nlogging.basicConfig(\n    level=logging.DEBUG,\n    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',\n    datefmt='%Y-%m-%d %H:%M:%S'\n)\n\nlogging.debug(\"带有详细时间格式的调试信息\")\n"],["body","\n"],["headingLink","3-将日志写入文件"],["heading","3. 将日志写入文件"],["body","\n"],["headingLink","31-基本文件日志"],["heading","3.1 基本文件日志"],["body","\n"],["body","import logging\n\n# 配置日志写入文件\nlogging.basicConfig(\n    filename='app.log',  # 日志文件名\n    filemode='w',  # 'w'表示覆盖，'a'表示追加\n    level=logging.DEBUG,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\n\nlogging.debug(\"这条信息将写入文件\")\n"],["body","\n"],["headingLink","32-同时输出到控制台和文件"],["heading","3.2 同时输出到控制台和文件"],["body","\n"],["body","import logging\nimport sys\n\n# 创建logger\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\n\n# 创建文件处理器\nfile_handler = logging.FileHandler('app.log')\nfile_handler.setLevel(logging.DEBUG)\n\n# 创建控制台处理器\nconsole_handler = logging.StreamHandler(sys.stdout)\nconsole_handler.setLevel(logging.INFO)\n\n# 创建格式器\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nfile_handler.setFormatter(formatter)\nconsole_handler.setFormatter(formatter)\n\n# 添加处理器到logger\nlogger.addHandler(file_handler)\nlogger.addHandler(console_handler)\n\n# 记录日志\nlogger.debug(\"这条信息将写入文件\")\nlogger.info(\"这条信息将同时显示在控制台和写入文件\")\n"],["body","\n"],["headingLink","4-高级配置"],["heading","4. 高级配置"],["body","\n"],["headingLink","41-使用配置文件"],["heading","4.1 使用配置文件"],["body","\n"],["body","可以使用配置文件来配置logging，例如logging.conf："],["body","\n"],["body","[loggers]\nkeys=root,sampleLogger\n\n[handlers]\nkeys=consoleHandler,fileHandler\n\n[formatters]\nkeys=sampleFormatter\n\n[logger_root]\nlevel=DEBUG\nhandlers=consoleHandler,fileHandler\n\n[logger_sampleLogger]\nlevel=DEBUG\nhandlers=consoleHandler,fileHandler\nqualname=sampleLogger\npropagate=0\n\n[handler_consoleHandler]\nclass=StreamHandler\nlevel=INFO\nformatter=sampleFormatter\nargs=(sys.stdout,)\n\n[handler_fileHandler]\nclass=FileHandler\nlevel=DEBUG\nformatter=sampleFormatter\nargs=('app.log', 'a')\n\n[formatter_sampleFormatter]\nformat=%(asctime)s - %(name)s - %(levelname)s - %(message)s\ndatefmt=%Y-%m-%d %H:%M:%S\n"],["body","\n"],["body","然后在代码中使用："],["body","\n"],["body","import logging\nimport logging.config\n\n# 加载配置文件\nlogging.config.fileConfig('logging.conf')\n\n# 获取logger\nlogger = logging.getLogger('sampleLogger')\n\n# 记录日志\nlogger.debug('这是一条调试信息')\n"],["body","\n"],["headingLink","42-使用字典配置"],["heading","4.2 使用字典配置"],["body","\n"],["body","import logging\nimport logging.config\n\n# 配置字典\nconfig = {\n    'version': 1,\n    'formatters': {\n        'standard': {\n            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n        },\n    },\n    'handlers': {\n        'console': {\n            'class': 'logging.StreamHandler',\n            'level': 'INFO',\n            'formatter': 'standard',\n            'stream': 'ext://sys.stdout'\n        },\n        'file': {\n            'class': 'logging.FileHandler',\n            'level': 'DEBUG',\n            'formatter': 'standard',\n            'filename': 'app.log',\n            'mode': 'a',\n        }\n    },\n    'loggers': {\n        '': {  # root logger\n            'handlers': ['console', 'file'],\n            'level': 'DEBUG',\n            'propagate': True\n        }\n    }\n}\n\n# 应用配置\nlogging.config.dictConfig(config)\n\n# 获取logger\nlogger = logging.getLogger(__name__)\n\n# 记录日志\nlogger.debug('这是一条调试信息')\nlogger.info('这是一条信息')\n"],["body","\n"],["headingLink","5-日志轮转"],["heading","5. 日志轮转"],["body","\n"],["body","对于长期运行的应用程序，日志文件可能会变得非常大。可以使用RotatingFileHandler或TimedRotatingFileHandler来管理日志文件的大小和数量。"],["body","\n"],["headingLink","51-基于大小的日志轮转"],["heading","5.1 基于大小的日志轮转"],["body","\n"],["body","import logging\nfrom logging.handlers import RotatingFileHandler\n\n# 创建logger\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\n\n# 创建轮转文件处理器\nhandler = RotatingFileHandler(\n    'app.log',\n    maxBytes=10*1024*1024,  # 10MB\n    backupCount=5  # 保留5个备份文件\n)\nhandler.setLevel(logging.DEBUG)\n\n# 设置格式\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\n\n# 添加处理器\nlogger.addHandler(handler)\n\n# 记录日志\nlogger.debug('这是一条调试信息')\n"],["body","\n"],["headingLink","52-基于时间的日志轮转"],["heading","5.2 基于时间的日志轮转"],["body","\n"],["body","import logging\nfrom logging.handlers import TimedRotatingFileHandler\n\n# 创建logger\nlogger = logging.getLogger()\nlogger.setLevel(logging.DEBUG)\n\n# 创建时间轮转文件处理器\nhandler = TimedRotatingFileHandler(\n    'app.log',\n    when='midnight',  # 每天午夜轮转\n    interval=1,  # 每1个单位时间轮转一次\n    backupCount=7  # 保留7个备份文件\n)\nhandler.setLevel(logging.DEBUG)\n\n# 设置格式\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\n\n# 添加处理器\nlogger.addHandler(handler)\n\n# 记录日志\nlogger.debug('这是一条调试信息')\n"],["body","\n"],["headingLink","6-最佳实践"],["heading","6. 最佳实践"],["body","\n\n"],["body","\n"],["body","使用模块级别的logger：每个模块使用自己的logger，便于定位日志来源"],["body","\n"],["body","logger = logging.getLogger(__name__)\n"],["body","\n"],["body","\n"],["body","\n"],["body","适当设置日志级别：开发环境可以使用DEBUG级别，生产环境使用INFO或WARNING级别"],["body","\n"],["body","\n"],["body","\n"],["body","结构化日志信息：使用格式化字符串提供上下文信息"],["body","\n"],["body","logger.error(\"处理用户 %s 的请求时出错: %s\", user_id, error_message)\n"],["body","\n"],["body","\n"],["body","\n"],["body","捕获异常时记录堆栈跟踪："],["body","\n"],["body","try:\n    # 可能引发异常的代码\n    result = 10 / 0\nexcept Exception as e:\n    logger.exception(\"发生异常: %s\", str(e))  # 自动包含堆栈跟踪\n"],["body","\n"],["body","\n"],["body","\n"],["body","配置日志轮转：防止日志文件过大"],["body","\n"],["body","\n"],["body","\n"],["body","在多线程环境中使用线程安全的处理器"],["body","\n"],["body","\n\n"],["headingLink","7-常见问题解决"],["heading","7. 常见问题解决"],["body","\n\n"],["body","\n"],["body","重复日志：可能是由于多次调用basicConfig或添加了多个相同的处理器"],["body","\n\n"],["body","解决方法：确保只配置一次，或在添加处理器前检查是否已存在"],["body","\n\n"],["body","\n"],["body","\n"],["body","日志不显示：可能是日志级别设置过高"],["body","\n\n"],["body","解决方法：检查logger和handler的级别设置"],["body","\n\n"],["body","\n"],["body","\n"],["body","性能问题：频繁的日志记录可能影响性能"],["body","\n\n"],["body","解决方法：使用logger.isEnabledFor()检查日志级别，避免不必要的字符串格式化"],["body","\n\n"],["body","\n\n"],["headingLink","8-总结"],["heading","8. 总结"],["body","\n"],["body","Python的logging库提供了灵活而强大的日志记录功能，适用于从简单脚本到复杂应用程序的各种场景。通过合理配置，可以实现日志的分级记录、格式化输出、文件存储和轮转等功能，帮助开发者更好地监控和调试程序。"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python三方库_2_fabric.html"],["title","_fabric - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","pyscript/README.html"],["title","pyscript - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","什么是pyscript"],["heading","什么是PyScript"],["body","\n"],["body","PyScript是一个在现代Web浏览器中运行Python的平台。"],["body","\n"],["body","使用PyScript开发环境创建应用程序：编写代码，整理项目资产，并测试您的应用程序。"],["body","\n"],["body","要分发PyScript应用程序，请将其托管为静态网站，然后单击应用程序的链接。PyScript和浏览器会完成其余工作。"],["body","\n"],["headingLink","注意"],["heading","注意"],["body","\n"],["body","要获得PyScript开发环境和托管的最简单方法是在浏览器中使用pyscript.com。"],["body","\n"],["body","这是一个免费服务，可帮助您从模板创建新项目，然后使用唯一链接编辑、预览和部署您的应用程序。"],["body","\n"],["body","虽然pyscript.com的核心功能将始终是免费的，但额外的付费功能直接支持和维持PyScript开源项目。商业和教育支持也可用。"],["body","\n"],["headingLink","pyscript要求"],["heading","PyScript要求"],["body","\n"],["body","所有PyScript应用程序都需要三样东西"],["body","\n\n"],["body","一个提供给您浏览器的index.html文件"],["body","\n"],["body","描述您的应用程序将在其中运行的Python环境。这通常由一个pyscript.json或pyscript.toml文件指定"],["body","\n"],["body","Python代码（通常在一个名为main.py的文件中），定义您的应用程序如何工作。"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","toc.html"],["body","\n        "],["body","0. pyscript"],["body","1. _python基础❱"],["body","1.0. python3基础语法.md"],["body","1.1. Python3集合.md"],["body","1.2. Number类型.md"],["body","1.3. python3流程控制.md"],["body","1.4. Python3迭代器与生成器.md"],["body","1.5. 函数.md"],["body","1.6. Python3JSON数据解析.md"],["body","1.7. Python3面向对象.md"],["body","1.8. 模块与包.md"],["body","1.9. 枚举.md"],["body","1.10. 装饰器.md"],["body","1.11. 基本数据类型.md"],["body","1.12. JsonDictObject互转.md"],["body","1.13. Python3数据类型转换.md"],["body","1.14. Python推导式.md"],["body","1.15. Python3运算符.md"],["body","1.16. Python3字符串.md"],["body","1.17. python3列表.md"],["body","1.18. 元祖.md"],["body","1.19. Python3字典.md"],["body","1.20. With关键字.md"],["body","1.21. 杂项.md"],["body","2. logging.md"],["body","python"],["body","3. install_guide.md"],["body","python三方库"],["body","4. _fabric❱"],["body","4.0. fabric❱"],["body","4.0.0. Configuration.md"],["body","README"],["body","4.0.3. x.md"],["body","4.1. invoke❱"],["body","4.1.0. DefiningAndRunningTask.md"],["body","4.1.1. InvokeCoreUsage.md"],["body","4.1.2. Configuration.md"],["body","4.1.3. loadingCollections.md"],["body","4.1.4. UsingInvokeAslibrary.md"],["body","\n    \n\n"]],[["_relative_fp","python三方库_2_fabric/fabric/README_1.x.html"],["title","x.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","fabric-是什么"],["heading","Fabric 是什么？"],["body","\n"],["body","Python部署工具"],["body","\n"],["body","\n"],["body","Fabric 是一个 Python (2.5-2.7) 的库和命令行工具，用来提高基于 SSH 的应用部署和系统管理效率。"],["body","\n"],["body","\n"],["headingLink","hello-fab"],["heading","Hello, fab"],["body","\n"],["body","def hello():\n    print(\"Hello world!\")\n"],["body","\n"],["body","把上述代码放在你当前的工作目录中一个名为 fabfile.py 的 Python 模块文件中。"],["body","\n"],["body","然后这个 hello 函数就可以用 fab 工具（随 Fabric 一并安装的命令）来执行了，输出的结果会是这样："],["body","\n"],["body","$ fab hello\nHello world!\n\nDone.\n"],["body","\n"],["body","把上述代码放在你当前的工作目录中一个名为 fabfile.py 的 Python 模块文件中。然后这个 hello 函数就可以用 fab 工具（随 Fabric 一并安装的命令）来执行了，输出的结果会是这样："],["body","\n"],["body","fab 工具所做的只是导入 fabfile 并执行了相应一个或多个的函数，这里并没有任何魔法——任何你能在一个普通 Python 模块中做的事情同样可以在一个 fabfile 中完成。"],["body","\n"],["headingLink","任务参数"],["heading","任务参数"],["body","\n"],["body","和你平时的 Python 编程一样，给任务函数传递参数很有必要``。Fabric 支持 Shell 兼容的参数用法： <任务名>:<参数>, <关键字参数名>=<参数值>,... 用起来就是这样，下面我们用一个 say hello 的实例来展开说明一下："],["body","\n"],["body","def hello(name=\"world\"):\n    print(\"Hello %s!\" % name)\n"],["body","\n"],["body","$ fab hello:name=Jeff\nHello Jeff!\n\nDone.\n"],["body","\n"],["headingLink","本地命令"],["heading","本地命令"],["body","\n"],["body","Fabric 的设计目的更是为了使用它自己的 API，包括执行 Shell 命令、传送文件等函数（或操作）接口。"],["body","\n"],["body","假设我们需要为一个 web 应用创建 fabfile 。具体的情景如下：这个 web 应用的代码使用 git 托管在一台远程服务器 vcshost 上，我们把它的代码库克隆到了本地 localhost 中。"],["body","\n"],["body","我们希望在我们把修改后的代码 push 回 vcshost 时，自动把新的版本安装到另一台远程服务器 my_server 上"],["body","\n"],["body","我们将通过自动化本地和远程 git 命令来完成这些工作。"],["body","\n"],["body","关于 fabfile 文件放置位置的最佳时间是项目的根目录："],["body","\n"],["body",".\n|-- __init__.py\n|-- app.wsgi\n|-- fabfile.py <-- our fabfile!\n|-- manage.py\n`-- my_app\n    |-- __init__.py\n    |-- models.py\n    |-- templates\n    |   `-- index.html\n    |-- tests.py\n    |-- urls.py\n    `-- views.py\n"],["body","\n"],["body","作为起步，我们希望先执行测试准备好部署后，再提交到 VCS（版本控制系统）："],["body","\n"],["body","from fabric.api import local\n\ndef prepare_deploy():\n    local(\"./manage.py test my_app\")\n    local(\"git add -p && git commit\")\n    local(\"git push\")\n"],["body","\n"],["body","这段代码很简单，导入一个 Fabric API： local ，然后用它执行本地 Shell 命令并与之交互，剩下的 Fabric API 也都类似——它们都只是 Python。"],["body","\n"],["headingLink","用你的方式来组织"],["heading","用你的方式来组织"],["body","\n"],["body","比如说，把任务分割成多个子任务："],["body","\n"],["body","from fabric.api import local\n\ndef test():\n    local(\"./manage.py test my_app\")\n\ndef commit():\n    local(\"git add -p && git commit\")\n\ndef push():\n    local(\"git push\")\n\ndef prepare_deploy():\n    test()\n    commit()\n    push()\n"],["body","\n"],["body","这个 prepare_deploy 任务仍可以像之前那样调用，但现在只要你愿意，就可以调用更细粒度的子任务。"],["body","\n"],["headingLink","故障"],["heading","故障"],["body","\n"],["body","我们的基本案例已经可以正常工作了，但如果测试失败了会怎样？我们应该抓住机会即使停下任务，并在部署之前修复这些失败的测试。"],["body","\n"],["body","Fabric 会检查被调用程序的返回值，如果这些程序没有干净地退出，Fabric 会终止操作。下面我们就来看看如果一个测试用例遇到错误时会发生什么："],["body","\n"],["body","$ fab prepare_deploy\n[localhost] run: ./manage.py test my_app\nCreating test database...\nCreating tables\nCreating indexes\n.............E............................\n======================================================================\nERROR: testSomething (my_project.my_app.tests.MainTests)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n[...]\n\n----------------------------------------------------------------------\nRan 42 tests in 9.138s\n\nFAILED (errors=1)\nDestroying test database...\n\nFatal error: local() encountered an error (return code 2) while executing './manage.py test my_app'\n\nAborting.\n"],["body","\n"],["body","但如果我们想更加灵活，给用户另一个选择，该怎么办？一个名为 warn_only 的设置（或着说 环境变量 ，通常缩写为 env var ）可以把退出换为警告，以提供更灵活的错误处理。"],["body","\n"],["body","让我们把这个设置丢到 test 函数中，然后注意这个 local 调用的结果："],["body","\n"],["body","from __future__ import with_statement\nfrom fabric.api import local, settings, abort\nfrom fabric.contrib.console import confirm\n\ndef test():\n    with settings(warn_only=True):\n        result = local('./manage.py test my_app', capture=True)\n    if result.failed and not confirm(\"Tests failed. Continue anyway?\"):\n        abort(\"Aborting at user request.\")\n\n[...]\n"],["body","\n"],["body","from __future__ import with_statement\nfrom fabric.api import local, settings, abort\nfrom fabric.contrib.console import confirm\n\ndef test():\n    with settings(warn_only=True):\n        result = local('./manage.py test my_app', capture=True)\n    if result.failed and not confirm(\"Tests failed. Continue anyway?\"):\n        abort(\"Aborting at user request.\")\n\n[...]\n"],["body","\n"],["body","为了引入这个新特性，我们需要添加一些新东西："],["body","\n\n"],["body","在 Python 2.5 中，需要从 __future__ 中导入 with ；"],["body","\n"],["body","Fabric contrib.console 子模块提供了 confirm 函数，用于简单的 yes/no 提示。"],["body","\n"],["body","settings 上下文管理器提供了特定代码块特殊设置的功能。"],["body","\n"],["body","local 这样运行命令的操作会返回一个包含执行结果（ .failed 或 .return_code 属性）的对象。"],["body","\n"],["body","abort 函数用于手动停止任务的执行。"],["body","\n\n"],["headingLink","建立连接"],["heading","建立连接"],["body","\n"],["body","让我们回到 fabfile 的主旨：定义一个 deploy 任务，让它在一台或多台远程服务器上运行，并保证代码是最新的："],["body","\n"],["body","def deploy():\n    code_dir = '/srv/django/myproject'\n    with cd(code_dir):\n        run(\"git pull\")\n        run(\"touch app.wsgi\")\n"],["body","\n"],["body","这里再次引入了一些新的概念："],["body","\n\n"],["body","Fabric 是 Python——所以我们可以自由地使用变量、字符串等常规的 Python 代码；"],["body","\n"],["body","cd 函数是一个简易的前缀命令，相当于运行 cd /to/some/directory ，和 lcd 函数类似，只不过后者是在本地执行。"],["body","\n"],["body","~fabric.operations.run和 local 类似，不过是在 远程 而非本地执行。"],["body","\n\n"],["body","我们还需要保证在文件顶部导入了这些新函数："],["body","\n"],["body","from __future__ import with_statement\nfrom fabric.api import local, settings, abort, run, cd\nfrom fabric.contrib.console import confirm\n"],["body","\n"],["body","$ fab deploy\nNo hosts found. Please specify (single) host string for connection: my_server\n[my_server] run: git pull\n[my_server] out: Already up-to-date.\n[my_server] out:\n[my_server] run: touch app.wsgi\n\nDone.\n"],["body","\n"],["body","我们并没有在 fabfile 中指定任何连接信息，所以 Fabric 依旧不知道该在哪里运行这些远程命令。遇到这种情况时，Fabric 会在运行时提示我们。连接的定义使用 SSH 风格的“主机串”（例如： user@host:port ），默认使用你的本地用户名——所以在这个例子中，我们只需要指定主机名 my_server 。"],["body","\n"],["headingLink","与远程交互"],["heading","与远程交互"],["body","\n"],["body","如果你已经得到了代码，说明 git pull 执行非常顺利——但如果这是第一次部署呢？最好也能应付这样的情况，这时应该使用 git clone 来初始化代码库："],["body","\n"],["body","def deploy():\n    code_dir = '/srv/django/myproject'\n    with settings(warn_only=True):\n        if run(\"test -d %s\" % code_dir).failed:\n            run(\"git clone user@vcshost:/path/to/repo/.git %s\" % code_dir)\n    with cd(code_dir):\n        run(\"git pull\")\n        run(\"touch app.wsgi\")\n"],["body","\n"],["body","和上面调用 local 一样， run 也提供基于 Shell 命令构建干净的 Python 逻辑。"],["body","\n"],["body","git交互"],["body","\n"],["body","这里最有趣的部分是 git clone ：因为我们是用 git 的 SSH 方法来访问 git 服务器上的代码库，这意味着我们远程执行的 run 需要自己提供身份验证。"],["body","\n"],["body","旧版本的 Fabric（和其他类似的高层次 SSH 库）像在监狱里一样运行远程命令，无法提供本地交互。当你迫切需要输入密码或者与远程程序交互时，这就很成问题。"],["body","\n"],["body","Fabric 1.0 和后续的版本突破了这个限制，并保证你和另一端的会话交互。让我们看看当我们在一台没有 git checkout 的新服务器上运行更新后的 deploy 任务时会发生什么："],["body","\n"],["body","$ fab deploy\nNo hosts found. Please specify (single) host string for connection: my_server\n[my_server] run: test -d /srv/django/myproject\n\nWarning: run() encountered an error (return code 1) while executing 'test -d /srv/django/myproject'\n\n[my_server] run: git clone user@vcshost:/path/to/repo/.git /srv/django/myproject\n[my_server] out: Cloning into /srv/django/myproject...\n[my_server] out: Password: <enter password>\n[my_server] out: remote: Counting objects: 6698, done.\n[my_server] out: remote: Compressing objects: 100% (2237/2237), done.\n[my_server] out: remote: Total 6698 (delta 4633), reused 6414 (delta 4412)\n[my_server] out: Receiving objects: 100% (6698/6698), 1.28 MiB, done.\n[my_server] out: Resolving deltas: 100% (4633/4633), done.\n[my_server] out:\n[my_server] run: git pull\n[my_server] out: Already up-to-date.\n[my_server] out:\n[my_server] run: touch app.wsgi\n\nDone.\n"],["body","\n"],["body","注意那个 Password: 提示——那就是我们在 web 服务器上的远程 git 应用在请求 git 密码。我们可以在本地输入密码，然后像往常一样继续克隆。"],["body","\n"],["body","参见"],["body","\n"],["body","与远程程序集成"],["body","\n"],["headingLink","预定义连接"],["heading","预定义连接"],["body","\n"],["body","在运行输入连接信息已经是非常古老的做法了，Fabric 提供了一套在 fabfile 或命令行中指定服务器信息的简单方法"],["body","\n"],["body","这里我们不展开说明，但是会展示最常用的方法：设置全局主机列表 env.hosts 。"],["body","\n"],["body","env 是一个全局的类字典对象，是 Fabric 很多设置的基础，也能在 with 表达式中使用（事实上，前面见过的 ~fabric.context_managers.settings 就是它的一个简单封装）。因此，我们可以在模块层次上，在 fabfile 的顶部附近修改它，就像这样："],["body","\n"],["body","from __future__ import with_statement\nfrom fabric.api import *\nfrom fabric.contrib.console import confirm\n\nenv.hosts = ['my_server']\n\ndef test():\n    do_test_stuff()\n"],["body","\n"],["body","当 fab 加载 fabfile 时，将会执行我们对 env 的修改并保存设置的变化。最终结果如上所示：我们的 deploy 任务将在 my_server 上运行。"],["body","\n"],["body","这就是如何指定 Fabric 一次性控制多台远程服务器的方法： env.hosts 是一个列表， fab 对它迭代，对每个连接运行指定的任务。"],["body","\n"],["body","参见"],["body","\n"],["body","环境字典 env, How host lists are constructed"],["body","\n"],["headingLink","总结"],["heading","总结"],["body","\n"],["body","虽然经历了很多，我们的 fabfile 文件仍然相当短。下面是它的完整内容："],["body","\n"],["body","from __future__ import with_statement\nfrom fabric.api import *\nfrom fabric.contrib.console import confirm\n\nenv.hosts = ['my_server']\n\ndef test():\n    with settings(warn_only=True):\n        result = local('./manage.py test my_app', capture=True)\n    if result.failed and not confirm(\"Tests failed. Continue anyway?\"):\n        abort(\"Aborting at user request.\")\n\ndef commit():\n    local(\"git add -p && git commit\")\n\ndef push():\n    local(\"git push\")\n\ndef prepare_deploy():\n    test()\n    commit()\n    push()\n\ndef deploy():\n    code_dir = '/srv/django/myproject'\n    with settings(warn_only=True):\n        if run(\"test -d %s\" % code_dir).failed:\n            run(\"git clone user@vcshost:/path/to/repo/.git %s\" % code_dir)\n    with cd(code_dir):\n        run(\"git pull\")\n        run(\"touch app.wsgi\")\n"],["body","\n"],["body","但它已经涉及到了 Fabric 中的很多功能："],["body","\n\n"],["body","定义 fabfile 任务，并用 fab 执行；"],["body","\n"],["body","用 local 调用本地 shell 命令；"],["body","\n"],["body","通过 settings 修改 env 变量；"],["body","\n"],["body","处理失败命令、提示用户、手动取消任务；"],["body","\n"],["body","以及定义主机列表、使用 run 来执行远程命令。"],["body","\n\n"],["body","还有更多这里没有涉及到的内容，你还可以看看所有“参见”中的链接，以及 索引页 的内容表。"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python三方库_2_fabric/fabric/README.html"],["title","fabric - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","关于导入"],["heading","关于导入"],["body","\n"],["body","Fabric由几个库组成，提供统一的接口层"],["body","\n"],["body","用户代码 可以从 fabric中导入包。也可以直接从 invoke paramiko 库中导入"],["body","\n\n"],["body","Invoke 实现命令行参数解析,组织任务，shell命令执行 (一个通用框架，且实现了本地命令执行.)\n\n"],["body","Anything that isn’t specific to remote systems tends to live in Invoke, and it is often used standalone by programmers who don’t need any remote functionality."],["body","\n"],["body","Fabric users will frequently import Invoke objects, in cases where Fabric itself has no need to subclass or otherwise modify what Invoke provides."],["body","\n\n"],["body","\n\n\n"],["body","Paramiko implements low/mid level SSH functionality - SSH and SFTP sessions, key management, etc.\n\n"],["body","Fabric mostly uses this under the hood; users will only rarely import from Paramiko directly."],["body","\n\n"],["body","\n"],["body","Fabric将其他 库 粘合起来 提供 高层的抽象\n\n"],["body","Subclassing Invoke’s context and command-runner classes, wrapping them around Paramiko-level primitives;"],["body","\n"],["body","Extending Invoke’s configuration system by using Paramiko’s ssh_config parsing machinery;"],["body","\n"],["body","Implementing new high-level primitives of its own, such as port-forwarding context managers. (These may, in time, migrate downwards into Paramiko.)"],["body","\n\n"],["body","\n\n"],["headingLink","run-commands-via-connections-and-run"],["heading","Run commands via Connections and run"],["body","\n"],["body","Fabric 最基本的用途是通过 SSH 在远程系统上执行 shell 命令，然后（可选）询问结果。默认情况下，远程程序的输出直接打印到终端并捕获。一个基本示例："],["body","\n"],["body",">>> from fabric import Connection\n>>> c = Connection('web1')\n>>> result = c.run('uname -s')\nLinux\n>>> result.stdout.strip() == 'Linux'\nTrue\n>>> result.exited\n0\n>>> result.ok\nTrue\n>>> result.command\n'uname -s'\n>>> result.connection\n<Connection host=web1>\n>>> result.connection.host\n'web1'\n"],["body","\n"],["body","Connection(host='web1', user='deploy', port=2202)\n\nConnection('deploy@web1:2202')\n"],["body","\n"],["body","Connection 对象的run方法通常返回  invoke.runners.Result 或其子类"],["body","\n"],["body","注意：Many lower-level SSH connection arguments (such as private keys and timeouts) can be given directly to the SSH backend by using the connect_kwargs argument."],["body","\n"],["headingLink","superuser-privileges-via-auto-response"],["heading","Superuser privileges via auto-response"],["body","\n"],["body","\n"],["body","超级管理员"],["body","\n"],["body","\n"],["body","需要以远程系统的超级用户身份运行操作？您可以通过运行调用 sudo 程序，并且（如果您的远程系统未配置无密码 sudo）手动响应密码提示，如下所示。（请注意我们需要如何请求远程伪终端;否则，大多数 sudo 实现在密码提示时会变得脾气暴躁。)"],["body","\n"],["body",">>> from fabric import Connection\n>>> c = Connection('db1')\n>>> c.run('sudo useradd mydbuser', pty=True)\n[sudo] password:\n<Result cmd='sudo useradd mydbuser' exited=0>\n>>> c.run('id -u mydbuser')\n1001\n<Result cmd='id -u mydbuser' exited=0>\n"],["body","\n"],["body","每次手动提供密码已经过时了"],["body","\n"],["body","值得庆幸的是，Invoke强大的命令执行功能包括使用预定义输入自动响应程序输出的功能。"],["body","\n"],["body","我们可以将其用于sudo："],["body","\n"],["body",">>> from invoke import Responder\n>>> from fabric import Connection\n>>> c = Connection('host')\n>>> sudopass = Responder(\n...     pattern=r'\\[sudo\\] password:',\n...     response='mypassword\\n',\n... )\n>>> c.run('sudo whoami', pty=True, watchers=[sudopass])\n[sudo] password:\nroot\n<Result cmd='sudo whoami' exited=0>\n"],["body","\n"],["headingLink","the-sudo-helper"],["heading","The sudo helper"],["body","\n"],["body","使用观察器/响应程序在这里效果很好，但每次都需要设置很多样板 - 特别是因为实际用例需要更多的工作来检测失败/不正确的密码。"],["body","\n"],["body","Invoke提供了一个Context.sudo方法"],["body","\n"],["body","用户需要做的就是确保填写 sudo.password 配置值（通过配置文件、环境变量或 --prompt-for-sudo-password），然后 Connection.sudo 处理其余部分。为清楚起见，下面是一个示例，其中库/shell 用户执行自己的基于 getpass 的密码提示："],["body","\n"],["body",">>> import getpass\n>>> from fabric import Connection, Config\n>>> sudo_pass = getpass.getpass(\"What's your sudo password?\")\nWhat's your sudo password?\n>>> config = Config(overrides={'sudo': {'password': sudo_pass}})\n>>> c = Connection('db1', config=config)\n>>> c.sudo('whoami', hide='stderr')\nroot\n<Result cmd=\"...whoami\" exited=0>\n>>> c.sudo('useradd mydbuser')\n<Result cmd=\"...useradd mydbuser\" exited=0>\n>>> c.run('id -u mydbuser')\n1001\n<Result cmd='id -u mydbuser' exited=0>\n"],["body","\n"],["headingLink","transfer-files"],["heading","Transfer files"],["body","\n"],["body","除了 shell 命令执行之外，SSH 连接的另一个常见用途是文件传输;Connection.put 和 Connection.get exist 可以满足这一需求。例如，假设您有一个要上传的归档文件："],["body","\n"],["body",">>> from fabric import Connection\n>>> result = Connection('web1').put('myfiles.tgz', remote='/opt/mydata/')\n>>> print(\"Uploaded {0.local} to {0.remote}\".format(result))\nUploaded /local/myfiles.tgz to /opt/mydata/\n"],["body","\n"],["body","这些方法通常在参数评估方面遵循 cp 和 scp/sftp 的行为 - 例如，在上面的代码片段中，我们省略了远程路径参数的文件名部分。"],["body","\n"],["headingLink","multiple-actions"],["heading","Multiple actions"],["body","\n"],["body","单行线是很好的例子，但并不总是现实的用例 - 通常需要多个步骤来做任何有趣的事情。在最基本的级别上，您可以通过多次调用 Connection 方法来执行此操作："],["body","\n"],["body","from fabric import Connection\nc = Connection('web1')\nc.put('myfiles.tgz', '/opt/mydata')\nc.run('tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz')\n"],["body","\n"],["body","您可以（但不必）将此类代码块转换为函数，并使用调用方的 Connection 对象进行参数化，以鼓励重用："],["body","\n"],["body","import buildConfig.Utils\n\n\ndef upload_and_unpack(c):\n    c.put('myfiles.tgz', '/opt/mydata')\n    buildConfig.Utils.run('tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz')\n"],["body","\n"],["body","正如您将在下面看到的，这些函数可以交给其他API方法，以实现更复杂的用例。"],["body","\n"],["headingLink","multiple-servers"],["heading","Multiple servers"],["body","\n"],["body","大多数实际用例都涉及在多个服务器上执行操作。简单的方法可以循环访问连接参数的列表或元组（或连接对象本身，也许通过map）："],["body","\n"],["body",">>> from fabric import Connection\n>>> for host in ('web1', 'web2', 'mac1'):\n...     result = Connection(host).run('uname -s')\n...     print(\"{}: {}\".format(host, result.stdout.strip()))\n...\n...\nweb1: Linux\nweb2: Linux\nmac1: Darwin\n"],["body","\n"],["body","这种方法是有效的，但随着用例变得越来越复杂，将主机集合视为单个对象会很有用。"],["body","\n"],["body","输入 Group，这是一个包装一个或多个连接对象并提供类似 API 的类;"],["body","\n"],["body","具体来说，您将需要使用其具体的子类之一，如 SerialGroup 或 ThreadingGroup。"],["body","\n"],["body","The previous example, using Group (SerialGroup specifically), looks like this:"],["body","\n"],["body",">>> from fabric import SerialGroup as Group\n>>> results = Group('web1', 'web2', 'mac1').run('uname -s')\n>>> print(results)\n<GroupResult: {\n    <Connection 'web1'>: <CommandResult 'uname -s'>,\n    <Connection 'web2'>: <CommandResult 'uname -s'>,\n    <Connection 'mac1'>: <CommandResult 'uname -s'>,\n}>\n>>> for connection, result in results.items():\n...     print(\"{0.host}: {1.stdout}\".format(connection, result))\n...\n...\nweb1: Linux\nweb2: Linux\nmac1: Darwin\n"],["body","\n"],["body","如果连接方法返回单个 Result 对象（例如 fabric.runners.Result），则 Group 方法返回 GroupResult -类似 dict 的对象，提供对单个每个连接结果的访问权限以及有关整个运行的元数据。"],["body","\n"],["body","当组内的任何单个连接遇到错误时，GroupResult 会略微包装在组异常中，该异常将引发。因此，聚合行为类似于各个 Connection 方法的行为，在成功时返回值或在失败时引发异常。"],["body","\n"],["headingLink","bringing-it-all-together"],["heading","Bringing it all together"],["body","\n"],["body","最后，我们得出了最实际的用例：您有一堆命令和/或文件传输，并且希望将其应用于多个服务器。您可以使用多个 Group 方法调用来执行此操作："],["body","\n"],["body","from fabric import SerialGroup as Group\npool = Group('web1', 'web2', 'web3')\npool.put('myfiles.tgz', '/opt/mydata')\npool.run('tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz')\n"],["body","\n"],["body","一旦逻辑变得必要，这种方法就会失效 - 例如，如果您只想在 /opt/mydata 为空时执行上面的 copy-and-untar。执行此类检查需要基于每个服务器执行。"],["body","\n"],["body","您可以通过使用连接对象的可迭代对象来满足该需求（尽管这放弃了使用组的一些好处）："],["body","\n"],["body","from fabric import Connection\nfor host in ('web1', 'web2', 'web3'):\n    c = Connection(host)\n    if c.run('test -f /opt/mydata/myfile', warn=True).failed:\n        c.put('myfiles.tgz', '/opt/mydata')\n        c.run('tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz')\n"],["body","\n"],["body","或者，还记得我们在前面的示例中如何使用函数吗？您可以改为走这条路："],["body","\n"],["body","import buildConfig.Utils\nfrom fabric import SerialGroup as Group\n\n\ndef upload_and_unpack(c):\n    if buildConfig.Utils.run('test -f /opt/mydata/myfile', warn=True).failed:\n        c.put('myfiles.tgz', '/opt/mydata')\n        buildConfig.Utils.run('tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz')\n\n\nfor connection in Group('web1', 'web2', 'web3'):\n    upload_and_unpack(connection)\n"],["body","\n"],["body","最后一种方法缺乏的唯一便利性是 Group.run 的有用类似物 - 如果要将所有upload_and_unpack调用的结果作为聚合进行跟踪，则必须自己执行此操作。期待未来的功能版本，以获取有关此领域的更多内容！"],["body","\n"],["headingLink","addendum-the-fab-command-line-tool"],["heading","Addendum: the fab command-line tool"],["body","\n"],["body","\n"],["body","附录："],["body","\n"],["body","\n"],["body","从 shell 运行 Fabric 代码通常很有用，例如，在任意服务器上部署应用程序或运行 sysadmin 作业。您可以使用带有Fabric库代码的常规Invine任务，但另一个选项是Fabric自己的\"面向网络\"工具fab。"],["body","\n"],["body","fab 将 Invoke 的 CLI 机制与主机选择等功能相结合，让您在各种服务器上快速运行任务 - 无需在所有任务或类似任务上定义主机 kwargs。"],["body","\n"],["body","对于最后一个代码示例，让我们将前面的示例改编为一个名为 fabfile.py 的 fab 任务模块："],["body","\n"],["body","import buildConfig.Utils\nfrom fabric import task\n\n\n@task\ndef upload_and_unpack(c):\n    if buildConfig.Utils.run('test -f /opt/mydata/myfile', warn=True).failed:\n        c.put('myfiles.tgz', '/opt/mydata')\n        buildConfig.Utils.run('tar -C /opt/mydata -xzvf /opt/mydata/myfiles.tgz')\n"],["body","\n"],["body","这并不难 - 我们所做的只是将临时任务函数复制到一个文件中，并在其上打上装饰器。任务告诉 CLI 机器在命令行上公开任务："],["body","\n"],["body","$ fab --list\nAvailable tasks:\n\n  upload_and_unpack\n"],["body","\n"],["body","然后，当fab实际调用任务时，它知道如何将控制目标服务器的参数拼接在一起，并在每个服务器上运行一次任务。在单个服务器上运行一次任务："],["body","\n"],["body","发生这种情况时，任务内部的 c 将有效地设置为 Connection（\"web1\"） - 如前面的示例所示。同样，您可以为多个主机提供多个主机，该主机多次运行任务，每次都交出不同的连接实例：\n\n\nfab -H web1 upload_and_unpack\n"],["body","\n"],["body","$ fab -H web1,web2,web3 upload_and_unpack\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python三方库_2_fabric/fabric/Configuration.html"],["title","Configuration.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","introduction"],["heading","Introduction"],["body","\n"],["body","Invoke提供了一种多方面的配置机制，允许您通过配置文件、环境变量、任务名称空间和CLI标志的层次结构来配置核心行为和任务的行为。"],["body","\n"],["body","配置搜索，加载，解析和合并的最终结果是一个Config对象，它的行为就像一个 (嵌套的) Python字典。Invoke在运行时引用此对象 (确定诸如Context.run之类的方法的默认行为)，并将其作为Context.config或 Context 本身的速记属性访问方式公开给用户的任务。"],["body","\n"],["headingLink","the-configuration-hierarchy"],["heading","The configuration hierarchy"],["body","\n"],["body","简而言之，配置值相互覆盖的顺序如下:"],["body","\n\n"],["body","\n"],["body","Internal default values ：默认值"],["body","\n"],["body","\n"],["body","\n"],["body","Collection-driven configurations   通过 Collection.configure 定义，Sub-collections的配置被合并到顶级集合中，最终结果构成了整个配置设置的基础。"],["body","\n"],["body","\n"],["body","\n"],["body","System-level configuration file stored in /etc/, such as /etc/invoke.yaml"],["body","\n"],["body","\n"],["body","\n"],["body","User-level configuration file found in the running user’s home directory, e.g. ~/.invoke.yaml."],["body","\n"],["body","\n"],["body","\n"],["body","Project-level configuration file living next to your top level tasks.py. For example, if your run of Invoke loads /home/user/myproject/tasks.py (see our docs on the load process), this might be /home/user/myproject/invoke.yaml."],["body","\n"],["body","\n"],["body","\n"],["body","Environment variables found in the invoking shell environment."],["body","\n"],["body","\n\n"],["body","These aren’t as strongly hierarchical as the rest, nor is the shell environment namespace owned wholly by Invoke, so we must rely on slightly verbose prefixing instead - see Environment variables for details."],["body","\n\n"],["body","\n"],["body","\n"],["body","\n"],["body","Runtime configuration file whose path is given to -f, e.g. inv -f /random/path/to/config_file.yaml. This path may also be set via the INVOKE_RUNTIME_CONFIG env var."],["body","\n"],["body","\n"],["body","\n"],["body","Command-line flags for certain core settings, such as -e."],["body","\n"],["body","\n"],["body","\n"],["body","Modifications made by user code at runtime."],["body","\n"],["body","\n\n"],["headingLink","default-configuration-values"],["heading","Default configuration values"],["body","\n"],["body","下面列出了所有配置值和/或section Invoke本身用于控制行为的列表，例如Context.run的echo和pty标志，任务重复数据删除等。"],["body","\n"],["body","这些值的存储位置在Config类内部，特别是Config.global_defaults的返回值; 有关更多详细信息，请参见其API文档。"],["body","\n"],["body","For convenience, we refer to nested setting names with a dotted syntax, so e.g. foo.bar refers to what would be (in a Python config context) {'foo': {'bar': <value here>}}. Typically, these can be read or set on Config and Context objects using attribute syntax, which looks nearly identical: c.foo.bar."],["body","\n"],["body","为了方便起见，我们引用带有点语法的嵌套设置名称，例如foo.bar指的是 (在Python config上下文中) {'foo': {'bar': <value here >}}。通常，可以使用属性语法在Config和Context对象上读取或设置这些语法，这些语法看起来几乎相同: c.foo.bar。"],["body","\n"],["body","任务配置树保存与任务执行相关的设置。"],["body","\n\n"],["body","\n"],["body","tasks.dedupe controls Task deduplication and defaults to True. It can also be overridden at runtime via --no-dedupe."],["body","\n"],["body","\n"],["body","\n"],["body","tasks.auto_dash_names 控制任务名称和集合名称是否已将下划线转到CLI上的破折号。 Default: True. See also Dashes vs underscores."],["body","\n"],["body","\n"],["body","\n"],["body","tasks.collection_name controls the Python import name sought out by collection discovery, and defaults to \"tasks\"."],["body","\n"],["body","\n"],["body","\n"],["body","tasks.executor_class allows users to override the class instantiated and used for task execution."],["body","\n"],["body","\n\n"],["body","Must be a fully-qualified dotted path of the form module(.submodule...).class, where all but .class will be handed to importlib.import_module, and class is expected to be an attribute on that resulting module object."],["body","\n"],["body","Defaults to None, meaning to use the running Program object’s executor_class attribute."],["body","\n"],["body","Warning"],["body","\n"],["body","Take care if using this setting in tandem with custom program binaries, since custom programs may specify their own default executor class (which your use of this setting will override!) and assume certain behaviors stemming from that."],["body","\n"],["body","tasks.search_root allows overriding the default collection discovery root search location. It defaults to None, which indicates to use the executing process’ current working directory."],["body","\n\n"],["body","\n"],["body","The run tree controls the behavior of Runner.run. Each member of this tree (such as run.echo or run.pty) maps directly to a Runner.run keyword argument of the same name; see that method’s docstring for details on what these settings do & what their default values are."],["body","\n"],["body","\n"],["body","\n"],["body","• 运行 • 树控制 • Runner.ru n • 的行为。此树的每个成员 (例如 • run.echo • 或 • run.pt y •) 直接映射到具有相同名称的 • Runner.ru n • 关键字参数; 有关这些设置的功能和默认值的详细信息，请参阅该方法的docstring。"],["body","\n"],["body","\n"],["body","\n"],["body","The runners tree controls which runner classes map to which execution contexts; if you’re using Invoke by itself, this will only tend to have a single member, runners.local. Client libraries may extend it with additional key/value pairs, such as runners.remote."],["body","\n"],["body","\n"],["body","\n"],["body","The sudo tree controls the behavior of Context.sudo:"],["body","\n"],["body","\n\n"],["body","\n"],["body","sudo.password controls the autoresponse password submitted to sudo’s password prompt. Default: None."],["body","\n"],["body","Warning"],["body","\n"],["body","While it’s possible to store this setting, like any other, in configuration files – doing so is inherently insecure. We highly recommend filling this config value in at runtime from a secrets management system of some kind."],["body","\n"],["body","\n"],["body","\n"],["body","sudo.prompt holds the sudo password prompt text, which is both supplied to sudo -p, and searched for when performing auto-response. Default: [sudo] password:."],["body","\n"],["body","\n\n"],["body","\n"],["body","\n"],["body","\n"],["body","A top level config setting, debug, controls whether debug-level output is logged; it defaults to False."],["body","\n"],["body","debug can be toggled via the -d CLI flag, which enables debugging after CLI parsing runs. It can also be toggled via the INVOKE_DEBUG environment variable which - unlike regular env vars - is honored from the start of execution and is thus useful for troubleshooting parsing and/or config loading."],["body","\n"],["body","\n"],["body","\n"],["body","A small config tree, timeouts, holds various kinds of timeout controls. At present, for Invoke, this only holds a command subkey, which controls subprocess execution timeouts."],["body","\n"],["body","\n\n"],["body","Client code often adds more to this tree, and Invoke itself may add more in the future as well."],["body","\n\n"],["body","\n"],["body","\n\n"],["headingLink","configuration-files"],["heading","Configuration files"],["body","\n"],["headingLink","loading"],["heading","Loading"],["body","\n"],["body","For each configuration file location mentioned in the previous section, we search for files ending in .yaml, .yml, .json or .py (in that order!), load the first one we find, and ignore any others that might exist."],["body","\n"],["body","For example, if Invoke is run on a system containing both /etc/invoke.yml and /etc/invoke.json, only the YAML file will be loaded. This helps keep things simple, both conceptually and in the implementation."],["body","\n"],["headingLink","format"],["heading","Format"],["body","\n"],["body","Invoke’s configuration allows arbitrary nesting, and thus so do our config file formats. All three of the below examples result in a configuration equivalent to {'debug': True, 'run': {'echo': True}}:"],["body","\n\n"],["body","\n"],["body","YAML"],["body","\n"],["body","debug: true\nrun:\n    echo: true\n"],["body","\n"],["body","\n"],["body","\n"],["body","JSON"],["body","\n"],["body","{\n    \"debug\": true,\n    \"run\": {\n        \"echo\": true\n    }\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","Python:"],["body","\n"],["body","debug = True\nrun = {\n    \"echo\": True\n}\n"],["body","\n"],["body","\n\n"],["body","For further details, see these languages’ own documentation."],["body","\n"],["headingLink","environment-variables"],["heading","Environment variables"],["body","\n"],["body","Environment variables are a bit different from other configuration-setting methods, since they don’t provide a clean way to nest configuration keys, and are also implicitly shared amongst the entire system’s installed application base."],["body","\n"],["body","In addition, due to implementation concerns, env vars must be pre-determined by the levels below them in the config hierarchy (in other words - env vars may only be used to override existing config values). If you need Invoke to understand a FOOBAR environment variable, you must first declare a foobar setting in a configuration file or in your task collections."],["body","\n"],["headingLink","basic-rules"],["heading","Basic rules"],["body","\n"],["body","To mitigate the shell namespace problem, we simply prefix all our env vars with INVOKE_."],["body","\n"],["body","Nesting is performed via underscore separation, so a setting that looks like e.g. {'run': {'echo': True}} at the Python level becomes INVOKE_RUN_ECHO=1 in a typical shell. See Nesting vs underscored names below for more on this."],["body","\n"],["headingLink","type-casting"],["heading","Type casting"],["body","\n"],["body","Since env vars can only be used to override existing settings, the previous value of a given setting is used as a guide in casting the strings we get back from the shell:"],["body","\n\n"],["body","\n"],["body","If the current value is a string or Unicode object, it is replaced with the value from the environment, with no casting whatsoever;"],["body","\n"],["body","\n\n"],["body","Depending on interpreter and environment, this means that a setting defaulting to a non-Unicode string type (eg a str on Python 2) may end up replaced with a Unicode string, or vice versa. This is intentional as it prevents users from accidentally limiting themselves to non-Unicode strings."],["body","\n\n"],["body","\n"],["body","\n"],["body","\n"],["body","If the current value is None, it too is replaced with the string from the environment;"],["body","\n"],["body","\n"],["body","\n"],["body","Booleans are set as follows: 0 and the empty value/string (e.g. SETTING=, or unset SETTING, or etc) evaluate to False, and any other value evaluates to True."],["body","\n"],["body","\n"],["body","\n"],["body","Lists and tuples are currently unsupported and will raise an exception;"],["body","\n"],["body","\n\n"],["body","In the future we may implement convenience transformations, such as splitting on commas to form a list; however since users can always perform such operations themselves, it may not be a high priority."],["body","\n\n"],["body","\n"],["body","\n"],["body","\n"],["body","All other types - integers, longs, floats, etc - are simply used as constructors for the incoming value."],["body","\n"],["body","\n\n"],["body","For example, a foobar setting whose default value is the integer 1 will run all env var inputs through int, and thus FOOBAR=5 will result in the Python value 5, not \"5\"."],["body","\n\n"],["body","\n"],["body","\n\n"],["headingLink","nesting-vs-underscored-names"],["heading","Nesting vs underscored names"],["body","\n"],["body","Since environment variable keys are single strings, we must use some form of string parsing to allow access to nested configuration settings. As mentioned above, in basic use cases this just means using an underscore character: {'run': {'echo': True}} becomes INVOKE_RUN_ECHO=1."],["body","\n"],["body","However, ambiguity is introduced when the settings names themselves contain underscores: is INVOKE_FOO_BAR=baz equivalent to {'foo': {'bar': 'baz'}}, or to {'foo_bar': 'baz'}? Thankfully, because env vars can only be used to modify settings declared at the Python level or in config files, we look at the current state of the config to determine the answer."],["body","\n"],["body","There is still a corner case where both possible interpretations exist as valid config paths (e.g. {'foo': {'bar': 'default'}, 'foo_bar': 'otherdefault'}). In this situation, we honor the Zen of Python and refuse to guess; an error is raised instead, counseling users to modify their configuration layout or avoid using env vars for the setting in question."],["body","\n"],["headingLink","collection-based-configuration"],["heading","Collection-based configuration"],["body","\n"],["body","Collection objects may contain a config mapping, set via Collection.configure, and (as per the hierarchy) this typically forms the lowest level of configuration in the system."],["body","\n"],["body","When collections are nested, configuration is merged ‘downwards’ by default: when conflicts arise, outer namespaces closer to the root will win, versus inner ones closer to the task being invoked."],["body","\n"],["body","Note"],["body","\n"],["body","‘Inner’ tasks here are specifically those on the path from the root to the one housing the invoked task. ‘Sibling’ subcollections are ignored."],["body","\n"],["body","A quick example of what this means:"],["body","\n"],["body","from invoke import Collection, task\n\n# This task & collection could just as easily come from\n# another module somewhere.\n@task\ndef mytask(c):\n    print(c['conflicted'])\ninner = Collection('inner', mytask)\ninner.configure({'conflicted': 'default value'})\n\n# Our project's root namespace.\nns = Collection(inner)\nns.configure({'conflicted': 'override value'})\n"],["body","\n"],["body","The result of calling inner.mytask:"],["body","\n"],["body","$ inv inner.mytask\noverride value\n"],["body","\n"],["headingLink","example-of-real-world-config-use"],["heading","Example of real-world config use"],["body","\n"],["body","The previous sections had small examples within them; this section provides a more realistic-looking set of examples showing how the config system works."],["body","\n"],["headingLink","setup"],["heading","Setup"],["body","\n"],["body","We’ll start out with semi-realistic tasks that hardcode their values, and build up to using the various configuration mechanisms. A small module for building Sphinx docs might begin like this:"],["body","\n"],["body","from invoke import task\n\n@task\ndef clean(c):\n    c.run(\"rm -rf docs/_build\")\n\n@task\ndef build(c):\n    c.run(\"sphinx-build docs docs/_build\")\n"],["body","\n"],["body","Then maybe you refactor the build target:"],["body","\n"],["body","target = \"docs/_build\"\n\n@task\ndef clean(c):\n    c.run(\"rm -rf {}\".format(target))\n\n@task\ndef build(c):\n    c.run(\"sphinx-build docs {}\".format(target))\n"],["body","\n"],["body","We can also allow runtime parameterization:"],["body","\n"],["body","default_target = \"docs/_build\"\n\n@task\ndef clean(c, target=default_target):\n    c.run(\"rm -rf {}\".format(target))\n\n@task\ndef build(c, target=default_target):\n    c.run(\"sphinx-build docs {}\".format(target))\n"],["body","\n"],["body","This task module works for a single set of users, but what if we want to allow reuse? Somebody may want to use this module with a different default target. Using the configuration data (made available via the context arg) to configure these settings is usually the better solution [1]."],["body","\n"],["headingLink","configuring-via-task-collection"],["heading","Configuring via task collection"],["body","\n"],["body","The configuration setting and getting APIs enable moving otherwise ‘hardcoded’ default values into a config structure which downstream users are free to redefine. Let’s apply this to our example. First we add an explicit namespace object:"],["body","\n"],["body","from invoke import Collection, task\n\ndefault_target = \"docs/_build\"\n\n@task\ndef clean(c, target=default_target):\n    c.run(\"rm -rf {}\".format(target))\n\n@task\ndef build(c, target=default_target):\n    c.run(\"sphinx-build docs {}\".format(target))\n\nns = Collection(clean, build)\n"],["body","\n"],["body","Then we can move the default build target value into the collection’s default configuration, and refer to it via the context. At this point we also change our kwarg default value to be None so we can determine whether or not a runtime value was given. The result:"],["body","\n"],["body","@task\ndef clean(c, target=None):\n    if target is None:\n        target = c.sphinx.target\n    c.run(\"rm -rf {}\".format(target))\n\n@task\ndef build(c, target=None):\n    if target is None:\n        target = c.sphinx.target\n    c.run(\"sphinx-build docs {}\".format(target))\n\nns = Collection(clean, build)\nns.configure({'sphinx': {'target': \"docs/_build\"}})\n"],["body","\n"],["body","The result isn’t significantly more complex than what we began with, and as we’ll see next, it’s now trivial for users to override your defaults in various ways."],["body","\n"],["headingLink","configuration-overriding"],["heading","Configuration overriding"],["body","\n"],["body","The lowest-level override is, of course, just modifying the local Collection tree into which a distributed module has been imported. E.g. if the above module is distributed as myproject.docs, someone can define a tasks.py that does this:"],["body","\n"],["body","from invoke import Collection, task\nfrom myproject import docs\n\n@task\ndef mylocaltask(c):\n    # Some local stuff goes here\n    pass\n\n# Add 'docs' to our local root namespace, plus our own task\nns = Collection(mylocaltask, docs)\n"],["body","\n"],["body","And then they can add this to the bottom:"],["body","\n"],["body","# Our docs live in 'built_docs', not 'docs/_build'\nns.configure({'sphinx': {'target': \"built_docs\"}})\n"],["body","\n"],["body","Now we have a docs sub-namespace whose build target defaults to built_docs instead of docs/_build. Runtime users can still override this via flags (e.g. inv docs.build --target='some/other/dir') just as before."],["body","\n"],["body","If you prefer configuration files over in-Python tweaking of your namespace tree, that works just as well; instead of adding the line above to the previous snippet, instead drop this into a file next to tasks.py named invoke.yaml:"],["body","\n"],["body","sphinx:\n    target: built_docs\n"],["body","\n"],["body","For this example, that sort of local-to-project conf file makes the most sense, but don’t forget that the config hierarchy offers additional configuration methods which may be suitable depending on your needs."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python三方库_2_fabric/invoke/1.DefiningAndRunningTask.html"],["title","DefiningAndRunningTask.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","defining-and-running-task-functions"],["heading","Defining and running task functions"],["body","\n"],["body","The core use case for Invoke is setting up a collection of task functions and executing them. This is pretty easy – all you need is to make a file called tasks.py importing the task decorator and decorating one or more functions. You will also need to add an arbitrarily-named context argument (convention is to use c, ctx or context) as the first positional arg. Don’t worry about using this context parameter yet."],["body","\n"],["body","Let’s start with a dummy Sphinx docs building task:"],["body","\n"],["body","Invoke的核心用例是设置任务函数的集合并执行它们。这很容易-你所需要的是制作一个名为tasks.py的文件导入任务装饰器并装饰一个或多个函数。您还需要添加一个任意命名的上下文参数 (约定是使用c，ctx或上下文) 作为第一个位置arg。还不用担心使用这个上下文参数。\n让我们从一个虚拟狮身人面像(dummy Sphinx )文档构建任务开始:"],["body","\n"],["body","from invoke import task\n\n@task\ndef build(c):\n    print(\"Building!\")\n"],["body","\n"],["body","You can then execute that new task by telling Invoke’s command line runner, invoke, that you want it to run:"],["body","\n"],["body","然后，您可以通过告诉Invoke的命令行运行程序invoke，您希望它运行来执行新任务:"],["body","\n"],["body","$ invoke build\nBuilding!\n"],["body","\n"],["headingLink","task-parameters"],["heading","Task parameters"],["body","\n"],["body","Functions can have arguments, and thus so can tasks. By default, your task functions’ args/kwargs are mapped automatically to both long and short CLI flags, as per the CLI docs. For example, if we add a clean argument and give it a boolean default, it will show up as a set of toggle flags, --clean and -c:"],["body","\n"],["body","函数可以有参数，因此任务也可以。默认情况下，根据the CLI docs.，任务函数的args/kwargs会自动映射到long和short CLI标志。"],["body","\n"],["body","例如，如果我们添加一个干净的参数并给它一个布尔默认值，它将显示为一组切换标志，-- clean和-c:"],["body","\n"],["body","@task\ndef build(c, clean=False):\n    if clean:\n        print(\"Cleaning!\")\n    print(\"Building!\")\n"],["body","\n"],["body","Invocations:"],["body","\n"],["body","$ invoke build -c\n$ invoke build --clean\n"],["body","\n"],["body","自然，其他默认参数值将允许给出字符串或整数值。"],["body","\n"],["body","假设没有默认值的参数采用字符串，也可以作为位置参数给出。"],["body","\n"],["body","@task\ndef hi(c, name):\n    print(\"Hi {}!\".format(name))\n"],["body","\n"],["body","$ invoke hi Name\n$ invoke hi --name Name\n$ invoke hi --name=Name\n$ invoke hi -n Name\n$ invoke hi -nName\n"],["body","\n"],["headingLink","adding-metadata-via-task"],["heading","Adding metadata via @task"],["body","\n"],["body","@task can be used without any arguments, as above, but it’s also a convenient vector for additional metadata about the task function it decorates. One common example is describing the task’s arguments, via the help parameter (in addition to optionally giving task-level help via the docstring):"],["body","\n"],["body","@ Task 可以在没有任何参数的情况下使用它,但是在任务功能方面具有额外的元数据。"],["body","\n"],["body","例如帮助：help"],["body","\n"],["body","@task(help={'name': \"Name of the person to say hi to.\"})\ndef hi(c, name):\n    \"\"\"\n    Say hi to someone.\n    \"\"\"\n    print(\"Hi {}!\".format(name))\n"],["body","\n"],["body","$ invoke --help hi\nUsage: inv[oke] [--core-opts] hi [--options] [other tasks here ...]\n\nDocstring:\n  Say hi to someone.\n\nOptions:\n  -n STRING, --name=STRING   Name of the person to say hi to.\n"],["body","\n"],["body","More details on task parameterization and metadata can be found in Invoking tasks (for the command-line & parsing side of things) and in the task API documentation (for the declaration side)."],["body","\n"],["body","有关任务参数化和元数据的更多详细信息，可以在  Invoking tasks   (用于命令行和解析操作) 和 task API文档 (用于声明侧) 中找到。"],["body","\n"],["headingLink","listing-tasks"],["heading","Listing tasks"],["body","\n"],["body","列出所有任务"],["body","\n"],["body","$ invoke --list\nAvailable tasks:\n\n    build\n"],["body","\n"],["body","这也将打印每个任务的docstring的第一行，如果它有一个要查看除了-list之外还有什么可用的，请说invoke-help。"],["body","\n"],["headingLink","running-shell-commands"],["heading","Running shell commands"],["body","\n"],["body","Many use cases for Invoke involve running local shell commands, similar to programs like Make or Rake. This is done via the run function:"],["body","\n"],["body","Invoke的许多用例都涉及运行本地shell命令，类似于制作或Rake之类的程序。这是通过  run  函数完成的:"],["body","\n"],["body","import buildConfig.Utils\nfrom invoke import task\n\n\n@task\ndef build(c):\n    buildConfig.Utils.run(\"sphinx-build docs docs/_build\")\n"],["body","\n"],["body","你会看到命令的输出在你的终端"],["body","\n"],["body","$ invoke build\nRunning Sphinx v1.1.3\nloading pickled environment... done\n...\nbuild succeeded, 2 warnings.\n"],["body","\n"],["body","run具有许多控制其行为的参数，例如为需要它们的复杂程序激活伪终端，抑制错误退出行为，隐藏子进程的输出 (同时仍捕获它以供以后查看) 等等。有关详细信息，请参见其API文档。"],["body","\n"],["body","运行总是返回一个有用的结果对象，提供对捕获的输出、退出代码和其他信息的访问。"],["body","\n"],["headingLink","aside-what-exactly-is-this-context-arg-anyway"],["heading","Aside: what exactly is this ‘context’ arg anyway?"],["body","\n"],["body","\n"],["body","上下文到底是什么"],["body","\n"],["body","\n"],["body","task runners  面临的一个常见问题是传输 “全局” 数据-从  configuration files or other configuration vectors,   加载的值，通过CLI标志给出，在 “设置” 任务中生成，等等。"],["body","\n"],["body","一些库 (如Fabric 1.x) 通过模块级属性实现了这一点，这使得测试变得困难且容易出错，限制了并发性，并增加了实现的复杂性。\nInvoke将状态封装在显式上下文对象中，并在执行任务时交给任务。上下文是主要的API端点，提供了展示当前状态 (例  Context.run)  ） 以及对该状态本身的访问的方法。"],["body","\n"],["headingLink","declaring-pre-tasks"],["heading","Declaring pre-tasks"],["body","\n"],["body","可以通过任务装饰器以多种方式配置任务。其中之一是选择您希望在执行任务之前始终运行的一个或多个其他任务，并以名称表示。"],["body","\n"],["body","让我们用一个新的清理任务来扩展我们的docs builder，该任务在每次构建之前运行 (但是，当然，它仍然可以自己执行):"],["body","\n"],["body","import buildConfig.Utils\nfrom invoke import task\n\n\n@task\ndef clean(c):\n    buildConfig.Utils.run(\"rm -rf docs/_build\")\n\n\n@task(clean)\ndef build(c):\n    buildConfig.Utils.run(\"sphinx-build docs docs/_build\")\n"],["body","\n"],["body","现在，当您调用build时，它将自动首先运行clean。"],["body","\n"],["body","Note"],["body","\n"],["body","如果您不喜欢隐式的 “位置参数是预运行任务名称” API，则可以显式给出pre kwarg: @ task(pre =[clean])。"],["body","\n"],["body","详见： How tasks run."],["body","\n"],["headingLink","creating-namespaces"],["heading","Creating namespaces"],["body","\n"],["body","现在，我们的tasks.py隐含地仅用于文档，但也许我们的项目需要其他非doc的东西，例如打包/部署，测试等。在这一点上，单个平坦的名称空间是不够的，所以Invoke可以让你轻松地构建一个 nested namespace.。这里有一个简单的例子。"],["body","\n"],["body","让我们首先将tasks.py重命名为docs.py; 那里不需要其他更改。然后，我们创建一个新的tasks.py，为了简洁起见，用一个新的、真正的顶层任务部署填充它。"],["body","\n"],["body","最后，我们可以使用一个新的API成员，即 Collection 类，将此任务和docs模块绑定到单个显式名称空间中。当Invoke加载您的任务模块时，如果绑定为ns或命名空间的集合对象存在，它将用于根命名空间:"],["body","\n"],["body","import buildConfig.Utils\nfrom invoke import Collection, task\nimport docs\n\n\n@task\ndef deploy(c):\n    buildConfig.Utils.run(\"python setup.py sdist\")\n    buildConfig.Utils.run(\"twine upload dist/*\")\n\n\nnamespace = Collection(docs, deploy)\n"],["body","\n"],["body","$ invoke --list\nAvailable tasks:\n\n    deploy\n    docs.build\n    docs.clean\n"],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python三方库_2_fabric/invoke/README.html"],["title","invoke - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","welcome-to-invoke"],["heading","Welcome to Invoke!"],["body","\n"],["body","该网站涵盖了Invoke的项目信息，例如变更日志，贡献指南，开发路线图，新闻/博客等。详细的用法和API文档可以在我们的代码文档网站 docs.pyinvoke.org 上找到。此外，项目维护者在他的网站上保留了路线图。\n请参阅下面的高级介绍，或左侧的导航以获取网站的其余内容。"],["body","\n"],["headingLink","what-is-invoke"],["heading","What is Invoke?"],["body","\n"],["body","Invoke是一个Python (2.7和3.4) 任务执行工具和库，从各种来源汲取灵感，得出一个强大而干净的功能集。"],["body","\n\n"],["body","\n"],["body","像Ruby的Rake工具和Invoke自己的前身Fabric 1.x一样，它提供了一个干净的高级API，用于运行shell命令并从tasks.py文件中定义/组织任务函数:"],["body","\n"],["body","\n"],["body","\n\n"],["body","import buildConfig.Utils\nfrom invoke import task"],["body","\n"],["body","@task\ndef clean(c, docs=False, bytecode=False, extra=''):\npatterns = ['build']\nif docs:\npatterns.append('docs/_build')\nif bytecode:\npatterns.append('**/*.pyc')\nif extra:\npatterns.append(extra)\nfor pattern in patterns:\nbuildConfig.Utils.run(\"rm -rf {}\".format(pattern))"],["body","\n"],["body","@task\ndef build(c, docs=False):\nbuildConfig.Utils.run(\"python setup.py build\")\nif docs:\nbuildConfig.Utils.run(\"sphinx-build docs docs/_build\")"],["body","\n"],["body","\n- 从GNU Make开始，它继承了对通用模式的最小样板的强调，并能够在一次调用中运行多个任务:\n\n```python\n$ invoke clean build\n"],["body","\n\n"],["body","\n"],["body","其中Fabric 1.x认为命令行方法的默认使用模式，Invoke (和建立在它上面的工具) 同样在家里嵌入你自己的Python代码或REPL::"],["body","\n"],["body",">>> from invoke import run\n>>> cmd = \"pip install -r requirements.txt\"\n>>> result = run(cmd, hide=True, warn=True)\n>>> print(result.ok)\nTrue\n>>> print(result.stdout.splitlines()[-1])\nSuccessfully installed invocations-0.13.0 pep8-1.5.7 spec-1.3.1\n"],["body","\n"],["body","\n"],["body","\n"],["body","在大多数Unix CLI应用程序的领导下，它提供了一种传统的基于标志的命令行解析风格，从任务签名中导出标志名称和值类型 (当然是可选的!):"],["body","\n"],["body","$ invoke clean --docs --bytecode build --docs --extra='**/*.pyo'\n$ invoke clean -d -b build --docs -e '**/*.pyo'\n$ invoke clean -db build -de '**/*.pyo'\n"],["body","\n"],["body","\n"],["body","\n"],["body","像它的许多前辈一样，它也提供了高级功能– namespacing, task aliasing, before/after hooks, parallel execution and more."],["body","\n"],["body","\n\n"],["headingLink","getting-started"],["heading","Getting started"],["body","\n"],["body","教程/入门文档中解释了许多核心思想和API调用:Getting started"],["body","\n\n"],["body","定义或运行任务：Defining and running task functions"],["body","\n"],["body","任务参数：Task parameters"],["body","\n"],["body","列出任务：Listing tasks"],["body","\n"],["body","运行shell任务：Running shell commands"],["body","\n"],["body","申明任务：Declaring pre-tasks"],["body","\n"],["body","创建名称空间：Creating namespaces"],["body","\n\n"],["headingLink","the-invoke-cli-tool"],["heading","The invoke CLI tool"],["body","\n"],["body","有关要调用的CLI接口、可用的核心标志和TAB补全：选项的详细信息。"],["body","\n\n"],["body","inv[oke] core usage\n\n"],["body","核心标志：Core options and flags"],["body","\n"],["body","Shell tab completion\n\n"],["body","Generating a completion script"],["body","\n"],["body","Sourcing the script"],["body","\n"],["body","Utilizing tab completion itself"],["body","\n\n"],["body","\n\n"],["body","\n\n"],["headingLink","concepts"],["heading","Concepts"],["body","\n"],["body","深入挖掘"],["body","\n\n"],["body","Configuration\n\n"],["body","Introduction"],["body","\n"],["body","The configuration hierarchy"],["body","\n"],["body","Default configuration values"],["body","\n"],["body","Configuration files"],["body","\n"],["body","Environment variables"],["body","\n"],["body","Collection-based configuration"],["body","\n"],["body","Example of real-world config use"],["body","\n\n"],["body","\n"],["body","Invoking tasks\n\n"],["body","Basic command line layout"],["body","\n"],["body","Task command-line arguments"],["body","\n"],["body","How tasks run"],["body","\n\n"],["body","\n"],["body","Using Invoke as a library\n\n"],["body","Reusing Invoke’s CLI module as a distinct binary"],["body","\n"],["body","Customizing the configuration system’s defaults"],["body","\n\n"],["body","\n"],["body","Loading collections\n\n"],["body","Task module discovery"],["body","\n"],["body","Configuring the loading process"],["body","\n\n"],["body","\n"],["body","Constructing namespaces\n\n"],["body","Starting out"],["body","\n"],["body","Naming your tasks"],["body","\n"],["body","Nesting collections"],["body","\n"],["body","Importing modules as collections"],["body","\n"],["body","Default tasks"],["body","\n"],["body","Mix and match"],["body","\n"],["body","More shortcuts"],["body","\n\n"],["body","\n"],["body","Testing Invoke-using codebases\n\n"],["body","Subclass & modify Invoke ‘internals’"],["body","\n"],["body","Use MockContext"],["body","\n"],["body","Expect Results"],["body","\n"],["body","Avoid mocking dependency code paths altogether"],["body","\n\n"],["body","\n"],["body","Automatically responding to program output\n\n"],["body","Background"],["body","\n"],["body","Basic use"],["body","\n\n"],["body","\n\n"],["headingLink","api"],["heading","API"],["body","\n\n"],["body","__init__"],["body","\n"],["body","collection"],["body","\n"],["body","config"],["body","\n"],["body","context"],["body","\n"],["body","exceptions"],["body","\n"],["body","executor"],["body","\n"],["body","loader"],["body","\n"],["body","parser"],["body","\n"],["body","program"],["body","\n"],["body","runners"],["body","\n"],["body","tasks"],["body","\n"],["body","terminals"],["body","\n"],["body","util"],["body","\n"],["body","watchers"],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python三方库_2_fabric/invoke/4.loadingCollections.html"],["title","loadingCollections.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","loading-collections"],["heading","Loading collections"],["body","\n"],["body","The core of Invoke’s execution model involves one or more Collection objects. While these may be created programmatically, in typical use Invoke will create them for you from Python modules it finds or is told to use."],["body","\n"],["body","Invoke的执行模型的核心涉及一个或多个集合对象。虽然这些可以以编程方式创建，但在典型的使用中，Invoke会从它找到或被告知要使用的Python模块为您创建它们。"],["body","\n"],["headingLink","task-module-discovery"],["heading","Task module discovery"],["body","\n"],["body","With no other configuration, simply calling invoke will look for a single Python module or package named tasks, and will treat it as the root namespace."],["body","\n"],["body","在没有其他配置的情况下，简单地调用invoke将查找名为tasks的单个Python模块或包，并将其视为根命名空间。"],["body","\n"],["body","tasks (or any other name given via loading configuration options) is searched for in the following ways:"],["body","\n"],["body","通过以下方式搜索 “任务” (或通过 loading configuration options 给出的任何其他名称):"],["body","\n\n"],["body","\n"],["body","首先，如果Python的sys.path上已经存在该名称的有效任务模块，则不再进行搜索-选择该模块。"],["body","\n"],["body","\n"],["body","\n"],["body","Failing that, search towards the root of the local filesystem, starting with the user’s current working directory (os.getcwd) and try importing again with each directory temporarily added to sys.path."],["body","\n"],["body","\n\n"],["body","由于Python的导入机制是如何工作的，这种方法总是倾向于包目录 (tasks/包含 init.py) 而不是位于同一位置的模块文件 (tasks.py)。"],["body","\n"],["body","If a candidate is found and successfully imported, its parent directory will stay on sys.path during the rest of the Python session – this allows task code to make convenient assumptions concerning sibling modules’ importability."],["body","\n\n"],["body","\n"],["body","\n\n"],["body","对候选模块/包进行了内省，以确保它们实际上可以用作有效的任务集合。任何失败的都将被丢弃，导入它们的sys.path munging将被还原，搜索将继续。"],["body","\n"],["headingLink","configuring-the-loading-process"],["heading","Configuring the loading process"],["body","\n"],["body","\n"],["body","配置加载过程"],["body","\n"],["body","\n"],["body","您可以配置上述行为，请求调用更改搜索的集合名称和/或文件系统级加载开始查找的路径。"],["body","\n"],["body","例如，您可能已经有一个无法轻松重命名的项目级 tasks.py ; 或者您可能希望托管存储在项目根目录之外的多个任务集合，并使它们之间的切换变得容易; 或者任何原因。"],["body","\n"],["body","Both the sought collection name and the search root can be specified via configuration file options or as runtime CLI flags:"],["body","\n\n"],["body","Change the collection name: Set the tasks.collection_name configuration option, or use --collection. It should be a Python module name and not a file name (so mytasks, not mytasks.py or mytasks/.)"],["body","\n"],["body","Change the root search path: Configure tasks.search_root or use --search-root. This value may be any valid directory path."],["body","\n\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python三方库_2_fabric/invoke/5.UsingInvokeAslibrary.html"],["title","UsingInvokeAslibrary.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","using-invoke-as-a-library"],["heading","Using Invoke as a library"],["body","\n"],["body","虽然我们的大多数文档都涉及用户/CLI面对任务管理和命令执行的用例，但Invoke的设计目的是让高级用户可以独立使用其组成部分-开箱即用或最少的额外工作。CLI解析，子流程命令执行，任务组织等都被写成广泛分离的关注点。\n本文档概述了已知可行的用例 (因为像Fabric这样的下游工具已经在利用它们)。"],["body","\n"],["headingLink","reusing-invokes-cli-module-as-a-distinct-binary"],["heading","Reusing Invoke’s CLI module as a distinct binary"],["body","\n"],["body","一个主要的用例是在引擎盖下使用Invoke分发自己的程序，绑定到不同的二进制名称，并且通常将特定的任务命名空间设置为默认值。(这与标准库中的argparse类似的东西有点接近。)在某些情况下，还需要移除、替换和/或添加核心CLI标志。"],["body","\n"],["headingLink","getting-set-up"],["heading","Getting set up"],["body","\n"],["body","假设您要分发一个名为tester的测试运行器，提供两个子命令，即单元和集成，以便用户可以pip安装tester并可以访问tester unit，tester integration或tester integration-fail-fast之类的命令。\n首先，与提供CLI “二进制” 的任何不同的Python包一样，您将通知您的setup.py您的入口点:"],["body","\n"],["body","setup(\n    name='tester',\n    version='0.1.0',\n    packages=['tester'],\n    install_requires=['invoke'],\n    entry_points={\n        'console_scripts': ['tester = tester.main:program.run']\n    }\n)\n"],["body","\n"],["body","This is just an example snippet and is not a fully valid setup.py; if you don’t know how Python packaging works, a good starting place is the Python Packaging User’s Guide."],["body","\n"],["body","这里没有什么是特定的Invoke-这是告诉Python安装一个测试器脚本的标准方法，该脚本执行在模块tester.main中定义的程序对象的run方法。"],["body","\n"],["headingLink","creating-a-program"],["heading","Creating a Program"],["body","\n"],["body","In our tester/main.py, we start out importing Invoke’s public CLI functionality:"],["body","\n"],["body","from invoke import Program\n"],["body","\n"],["body","然后我们定义我们在setup.py中引用的程序对象，这是一个简单的程序来完成繁重的工作，为初学者提供我们的版本号:"],["body","\n"],["body","program = Program(version='0.1.0')\n"],["body","\n"],["body","At this point, installing tester would give you the same functionality as Invoke’s built-in CLI tool, except named tester and exposing its own version number:"],["body","\n"],["body","$ tester --version\nTester 0.1.0\n$ tester --help\nUsage: tester [--core-opts] task1 [--task1-opts] ... taskN [--taskN-opts]\n\nCore options:\n    ... core Invoke options here ...\n\n$ tester --list\nCan't find any collection named 'tasks'!\n"],["body","\n"],["body","This doesn’t do us much good yet - there aren’t any subcommands (and our users don’t care about arbitrary ‘tasks’, so Invoke’s own default --help and --list output isn’t a good fit)."],["body","\n"],["headingLink","specifying-subcommands"],["heading","Specifying subcommands"],["body","\n"],["body","For tester to expose unit and integration subcommands, we need to define them, in a regular Invoke tasks module or namespace. For our example, we’ll just create tester/tasks.py (but as you’ll see in a moment, this too is arbitrary and can be whatever you like):"],["body","\n"],["body","from invoke import task\n\n@task\ndef unit(c):\n    print(\"Running unit tests!\")\n\n@task\ndef integration(c):\n    print(\"Running integration tests!\")\n"],["body","\n"],["body","As described in Constructing namespaces, you can arrange this module however you want - the above snippet uses an implicit namespace for brevity’s sake."],["body","\n"],["body","Note"],["body","\n"],["body","It’s important to realize that there’s nothing special about these “subcommands” - you could run them just as easily with vanilla Invoke, e.g. via invoke --collection=tester.tasks --list."],["body","\n"],["body","Now the useful part: telling our custom Program that this namespace of tasks should be used as the subcommands for tester, via the namespace kwarg:"],["body","\n"],["body","from invoke import Collection, Program\nfrom tester import tasks\n\nprogram = Program(namespace=Collection.from_module(tasks), version='0.1.0')\n"],["body","\n"],["body","The result?"],["body","\n"],["body","$ tester --version\nTester 0.1.0\n$ tester --help\nUsage: tester [--core-opts] <subcommand> [--subcommand-opts] ...\n\nCore options:\n  ... core options here, minus task-related ones ...\n\nSubcommands:\n  unit\n  integration\n\n$ tester --list\nNo idea what '--list' is!\n$ tester unit\nRunning unit tests!\n"],["body","\n"],["body","Notice how the ‘usage’ line changed (to specify ‘subcommands’ instead of ‘tasks’); the list of specific subcommands is now printed as part of --help; and --list has been removed from the options."],["body","\n"],["body","You can enable tab-completion for your distinct binary and subcommands."],["body","\n"],["headingLink","modifying-core-parser-arguments"],["heading","Modifying core parser arguments"],["body","\n"],["body","A common need for this use case is tweaking the core parser arguments. Program makes it easy: default core Arguments are returned by Program.core_args. Extend this method’s return value with super and you’re done:"],["body","\n"],["body","# Presumably, this is your setup.py-designated CLI module...\n\nfrom invoke import Program, Argument\n\nclass MyProgram(Program):\n    def core_args(self):\n        core_args = super(MyProgram, self).core_args()\n        extra_args = [\n            Argument(names=('foo', 'f'), help=\"Foo the bars\"),\n            # ...\n        ]\n        return core_args + extra_args\n\nprogram = MyProgram()\n"],["body","\n"],["body","Warning"],["body","\n"],["body","我们不建议省略任何现有的核心参数; 许多基本功能依赖于它们的存在，即使保留默认值也是如此。"],["body","\n"],["headingLink","customizing-the-configuration-systems-defaults"],["heading","Customizing the configuration system’s defaults"],["body","\n"],["body","Besides the CLI-oriented content of the previous section, another area of functionality that frequently needs updating when redistributing an Invoke codebase (CLI or no CLI) is configuration. There are typically two concerns here:"],["body","\n\n"],["body","Configuration filenames and the env var prefix - crucial if you ever expect your users to use the configuration system;"],["body","\n"],["body","Default configuration values - less critical (most defaults aren’t labeled with anything Invoke-specific) but still sometimes desirable."],["body","\n\n"],["body","Note"],["body","\n"],["body","Both of these involve subclassing Config (and, if using the CLI machinery, informing your Program to use that subclass instead of the default one.)"],["body","\n"],["headingLink","changing-filenames-andor-env-var-prefix"],["heading","Changing filenames and/or env var prefix"],["body","\n"],["body","By default, Invoke’s config system looks for files like /etc/invoke.yaml, ~/.invoke.json, etc. If you’re distributing client code named something else, like the Tester example earlier, you might instead want the config system to load /etc/tester.json or $CWD/tester.py."],["body","\n"],["body","Similarly, the environment variable config level looks for env vars like INVOKE_RUN_ECHO; you might prefer TESTER_RUN_ECHO."],["body","\n"],["body","There are a few Config attributes controlling these values:"],["body","\n\n"],["body","prefix: A generic, catchall prefix used directly as the file prefix, and used via all-caps as the env var prefix;"],["body","\n"],["body","file_prefix: For overriding just the filename prefix - otherwise, it defaults to the value of prefix;"],["body","\n"],["body","env_prefix: For overriding just the env var prefix - as you might have guessed, it too defaults to the value of prefix."],["body","\n\n"],["body","Continuing our ‘Tester’ example, you’d do something like this:"],["body","\n"],["body","from invoke import Config\n\nclass TesterConfig(Config):\n    prefix = 'tester'\n"],["body","\n"],["body","Or, to seek tester.yaml as before, but TEST_RUN_ECHO instead of TESTER_RUN_ECHO:"],["body","\n"],["body","class TesterConfig(Config):\n    prefix = 'tester'\n    env_prefix = 'TEST'\n"],["body","\n"],["headingLink","modifying-default-config-values"],["heading","Modifying default config values"],["body","\n"],["body","Default config values are simple - they’re just the return value of the staticmethod Config.global_defaults, so override that and return whatever you like - ideally something based on the superclass’ values, as many defaults are assumed to exist by the rest of the system. (The helper function invoke.config.merge_dicts can be useful here.)"],["body","\n"],["body","For example, say you want Tester to always echo shell commands by default when your codebase calls Context.run:"],["body","\n"],["body","from invoke import Program\nfrom invoke.config import Config, merge_dicts\n\nclass TesterConfig(Config):\n    @staticmethod\n    def global_defaults():\n        their_defaults = Config.global_defaults()\n        my_defaults = {\n            'run': {\n                'echo': True,\n            },\n        }\n        return merge_dicts(their_defaults, my_defaults)\n\nprogram = Program(config_class=TesterConfig, version='0.1.0')\n"],["body","\n"],["body","For reference, Invoke’s own base defaults (the…default defaults, you could say) are documented at Default configuration values."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python三方库_2_fabric/invoke/3.Configuration.html"],["title","Configuration.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","configuration"],["heading","Configuration"],["body","\n"],["headingLink","introduction"],["heading","Introduction"],["body","\n"],["body","配置搜索，加载，解析和合并的最终结果是一个Config对象，它的行为就像一个 (嵌套的) Python字典。"],["body","\n"],["body","Invoke在运行时引用此对象 (确定诸如  Context.run 之类的方法的默认行为)，并将其作为  Context.config  或上下文本身的速记属性访问方式公开给用户的任务。"],["body","\n"],["headingLink","the-configuration-hierarchy"],["heading","The configuration hierarchy"],["body","\n"],["body","简而言之，配置值相互覆盖的顺序如下:"],["body","\n\n"],["body","\n"],["body","内部默认值（Internal default values）用于通过配置可控制的行为。 详见： Default configuration values"],["body","\n"],["body","\n"],["body","\n"],["body","基于集合的配置：Collection-driven configurations defined in tasks modules via Collection.configure. (See Collection-based configuration below for details.)"],["body","\n"],["body","\n"],["body","子集合的配置被合并到顶级集合中，最终结果构成了整个配置设置的基础。"],["body","\n"],["body","\n"],["body","\n"],["body","\n"],["body","系统层面的配置文件：System-level configuration file stored in /etc/, such as /etc/invoke.yaml. (详见： Configuration files ）"],["body","\n"],["body","\n"],["body","\n"],["body","用户层面的配置文件：User-level configuration file. ~/.invoke.yaml."],["body","\n"],["body","\n"],["body","\n"],["body","项目层面的配置：Project-level configuration file living next to your top level tasks.py. For example, if your run of Invoke loads /home/user/myproject/tasks.py (see our docs on the load process), this might be /home/user/myproject/invoke.yaml."],["body","\n"],["body","\n"],["body","\n"],["body","环境变量：Environment variables found in the invoking shell environment."],["body","\n"],["body","\n"],["body","这些不像其他人那样具有强烈的层次性，也不是shell环境命名空间完全由Invoke拥有，所以我们必须依靠稍微冗长的前缀来代替- - 详见 Environment variables"],["body","\n"],["body","\n"],["body","\n"],["body","\n"],["body","命令行指定配置文件：Runtime configuration file whose path is given to -f, e.g. inv -f /random/path/to/config_file.yaml. This path may also be set via the INVOKE_RUNTIME_CONFIG env var."],["body","\n"],["body","\n"],["body","\n"],["body","命令行指定环境变量：Command-line flags for certain core settings, such as -e."],["body","\n"],["body","\n"],["body","\n"],["body","用户代码运行时变更：Modifications made by user code at runtime."],["body","\n"],["body","\n\n"],["headingLink","default-configuration-values"],["heading","Default configuration values"],["body","\n"],["body","\n"],["body","默认配置值"],["body","\n"],["body","\n"],["body","下面列出了所有配置值和/或section Invoke本身用于控制行为的列表，例如 Context.run的echo和pty标志，task deduplication等。"],["body","\n"],["body","这些值的存储位置在 Config 类内部，特别是  Config.global_defaults;  的返回值; 有关更多详细信息，请参见其API文档。"],["body","\n"],["body","可以使用嵌套点访问或设置  Config and Context  对象"],["body","\n\n"],["body","\n"],["body","The tasks config tree holds settings relating to task execution."],["body","\n"],["body","\n\n"],["body","\n"],["body","tasks.dedupe 控制任务重复取消，默认是TRUE、可以通过运行时指定 --no-dedupe."],["body","\n"],["body","\n"],["body","\n"],["body","tasks.auto_dash_names 是否自动转换短横杠与下划线. Default: True. See also Dashes vs underscores."],["body","\n"],["body","\n"],["body","\n"],["body","tasks.collection_name controls the Python import name sought out by collection discovery, and defaults to \"tasks\"."],["body","\n"],["body","\n"],["body","\n"],["body","tasks.executor_class allows users to override the class instantiated and used for task execution."],["body","\n"],["body","Must be a fully-qualified dotted path of the form module(.submodule...).class, where all but .class will be handed to importlib.import_module, and class is expected to be an attribute on that resulting module object."],["body","\n"],["body","Defaults to None, meaning to use the running Program object’s executor_class attribute."],["body","\n"],["body","Warning"],["body","\n"],["body","Take care if using this setting in tandem with custom program binaries, since custom programs may specify their own default executor class (which your use of this setting will override!) and assume certain behaviors stemming from that."],["body","\n"],["body","\n"],["body","\n"],["body","tasks.search_root allows overriding the default collection discovery root search location. It defaults to None, which indicates to use the executing process’ current working directory."],["body","\n"],["body","\n\n"],["body","\n"],["body","\n"],["body","\n"],["body","The run tree controls the behavior of Runner.run. Each member of this tree (such as run.echo or run.pty) maps directly to a Runner.run keyword argument of the same name; see that method’s docstring for details on what these settings do & what their default values are."],["body","\n"],["body","\n"],["body","\n"],["body","The runners tree controls which runner classes map to which execution contexts; if you’re using Invoke by itself, this will only tend to have a single member, runners.local. Client libraries may extend it with additional key/value pairs, such as runners.remote."],["body","\n"],["body","\n"],["body","\n"],["body","The sudo tree controls the behavior of Context.sudo:"],["body","\n"],["body","\n\n"],["body","\n"],["body","sudo.password controls the autoresponse password submitted to sudo’s password prompt. Default: None."],["body","\n"],["body","Warning"],["body","\n"],["body","While it’s possible to store this setting, like any other, in configuration files – doing so is inherently insecure. We highly recommend filling this config value in at runtime from a secrets management system of some kind."],["body","\n"],["body","\n"],["body","\n"],["body","sudo.prompt holds the sudo password prompt text, which is both supplied to sudo -p, and searched for when performing auto-response. Default: [sudo] password:."],["body","\n"],["body","\n\n"],["body","\n"],["body","\n"],["body","\n"],["body","A top level config setting, debug, controls whether debug-level output is logged; it defaults to False."],["body","\n"],["body","debug can be toggled via the -d CLI flag, which enables debugging after CLI parsing runs. It can also be toggled via the INVOKE_DEBUG environment variable which - unlike regular env vars - is honored from the start of execution and is thus useful for troubleshooting parsing and/or config loading."],["body","\n"],["body","\n"],["body","\n"],["body","A small config tree, timeouts, holds various kinds of timeout controls. At present, for Invoke, this only holds a command subkey, which controls subprocess execution timeouts."],["body","\n"],["body","\n"],["body","Client code often adds more to this tree, and Invoke itself may add more in the future as well."],["body","\n"],["body","\n"],["body","\n\n"],["headingLink","configuration-files"],["heading","Configuration files"],["body","\n"],["headingLink","loading"],["heading","Loading"],["body","\n"],["body","For each configuration file location mentioned in the previous section, we search for files ending in .yaml, .yml, .json or .py (in that order!), load the first one we find, and ignore any others that might exist."],["body","\n"],["body","For example, if Invoke is run on a system containing both /etc/invoke.yml and /etc/invoke.json, only the YAML file will be loaded. This helps keep things simple, both conceptually and in the implementation."],["body","\n"],["headingLink","format"],["heading","Format"],["body","\n"],["body","Invoke’s configuration allows arbitrary nesting, and thus so do our config file formats. All three of the below examples result in a configuration equivalent to {'debug': True, 'run': {'echo': True}}:"],["body","\n\n"],["body","\n"],["body","YAML"],["body","\n"],["body","debug: true\nrun:\n    echo: true\n"],["body","\n"],["body","\n"],["body","\n"],["body","JSON"],["body","\n"],["body","{\n    \"debug\": true,\n    \"run\": {\n        \"echo\": true\n    }\n}\n"],["body","\n"],["body","\n"],["body","\n"],["body","Python:"],["body","\n"],["body","debug = True\nrun = {\n    \"echo\": True\n}\n"],["body","\n"],["body","\n\n"],["body","For further details, see these languages’ own documentation."],["body","\n"],["headingLink","environment-variables"],["heading","Environment variables"],["body","\n"],["body","Environment variables are a bit different from other configuration-setting methods, since they don’t provide a clean way to nest configuration keys, and are also implicitly shared amongst the entire system’s installed application base."],["body","\n"],["body","In addition, due to implementation concerns, env vars must be pre-determined by the levels below them in the config hierarchy (in other words - env vars may only be used to override existing config values). If you need Invoke to understand a FOOBAR environment variable, you must first declare a foobar setting in a configuration file or in your task collections."],["body","\n"],["headingLink","basic-rules"],["heading","Basic rules"],["body","\n"],["body","To mitigate the shell namespace problem, we simply prefix all our env vars with INVOKE_."],["body","\n"],["body","Nesting is performed via underscore separation, so a setting that looks like e.g. {'run': {'echo': True}} at the Python level becomes INVOKE_RUN_ECHO=1 in a typical shell. See Nesting vs underscored names below for more on this."],["body","\n"],["headingLink","type-casting"],["heading","Type casting"],["body","\n"],["body","Since env vars can only be used to override existing settings, the previous value of a given setting is used as a guide in casting the strings we get back from the shell:"],["body","\n\n"],["body","\n"],["body","If the current value is a string or Unicode object, it is replaced with the value from the environment, with no casting whatsoever;"],["body","\n"],["body","\n\n"],["body","Depending on interpreter and environment, this means that a setting defaulting to a non-Unicode string type (eg a str on Python 2) may end up replaced with a Unicode string, or vice versa. This is intentional as it prevents users from accidentally limiting themselves to non-Unicode strings."],["body","\n\n"],["body","\n"],["body","\n"],["body","\n"],["body","If the current value is None, it too is replaced with the string from the environment;"],["body","\n"],["body","\n"],["body","\n"],["body","Booleans are set as follows: 0 and the empty value/string (e.g. SETTING=, or unset SETTING, or etc) evaluate to False, and any other value evaluates to True."],["body","\n"],["body","\n"],["body","\n"],["body","Lists and tuples are currently unsupported and will raise an exception;"],["body","\n"],["body","\n\n"],["body","In the future we may implement convenience transformations, such as splitting on commas to form a list; however since users can always perform such operations themselves, it may not be a high priority."],["body","\n\n"],["body","\n"],["body","\n"],["body","\n"],["body","All other types - integers, longs, floats, etc - are simply used as constructors for the incoming value."],["body","\n"],["body","\n\n"],["body","For example, a foobar setting whose default value is the integer 1 will run all env var inputs through int, and thus FOOBAR=5 will result in the Python value 5, not \"5\"."],["body","\n\n"],["body","\n"],["body","\n\n"],["headingLink","nesting-vs-underscored-names"],["heading","Nesting vs underscored names"],["body","\n"],["body","Since environment variable keys are single strings, we must use some form of string parsing to allow access to nested configuration settings. As mentioned above, in basic use cases this just means using an underscore character: {'run': {'echo': True}} becomes INVOKE_RUN_ECHO=1."],["body","\n"],["body","However, ambiguity is introduced when the settings names themselves contain underscores: is INVOKE_FOO_BAR=baz equivalent to {'foo': {'bar': 'baz'}}, or to {'foo_bar': 'baz'}? Thankfully, because env vars can only be used to modify settings declared at the Python level or in config files, we look at the current state of the config to determine the answer."],["body","\n"],["body","There is still a corner case where both possible interpretations exist as valid config paths (e.g. {'foo': {'bar': 'default'}, 'foo_bar': 'otherdefault'}). In this situation, we honor the Zen of Python and refuse to guess; an error is raised instead, counseling users to modify their configuration layout or avoid using env vars for the setting in question."],["body","\n"],["headingLink","collection-based-configuration"],["heading","Collection-based configuration"],["body","\n"],["body","Collection objects may contain a config mapping, set via Collection.configure, and (as per the hierarchy) this typically forms the lowest level of configuration in the system."],["body","\n"],["body","When collections are nested, configuration is merged ‘downwards’ by default: when conflicts arise, outer namespaces closer to the root will win, versus inner ones closer to the task being invoked."],["body","\n"],["body","Note"],["body","\n"],["body","‘Inner’ tasks here are specifically those on the path from the root to the one housing the invoked task. ‘Sibling’ subcollections are ignored."],["body","\n"],["body","A quick example of what this means:"],["body","\n"],["body","from invoke import Collection, task\n\n# This task & collection could just as easily come from\n# another module somewhere.\n@task\ndef mytask(c):\n    print(c['conflicted'])\ninner = Collection('inner', mytask)\ninner.configure({'conflicted': 'default value'})\n\n# Our project's root namespace.\nns = Collection(inner)\nns.configure({'conflicted': 'override value'})\n"],["body","\n"],["body","The result of calling inner.mytask:"],["body","\n"],["body","$ inv inner.mytask\noverride value\n"],["body","\n"],["headingLink","example-of-real-world-config-use"],["heading","Example of real-world config use"],["body","\n"],["body","The previous sections had small examples within them; this section provides a more realistic-looking set of examples showing how the config system works."],["body","\n"],["headingLink","setup"],["heading","Setup"],["body","\n"],["body","We’ll start out with semi-realistic tasks that hardcode their values, and build up to using the various configuration mechanisms. A small module for building Sphinx docs might begin like this:"],["body","\n"],["body","from invoke import task\n\n@task\ndef clean(c):\n    c.run(\"rm -rf docs/_build\")\n\n@task\ndef build(c):\n    c.run(\"sphinx-build docs docs/_build\")\n"],["body","\n"],["body","Then maybe you refactor the build target:"],["body","\n"],["body","target = \"docs/_build\"\n\n@task\ndef clean(c):\n    c.run(\"rm -rf {}\".format(target))\n\n@task\ndef build(c):\n    c.run(\"sphinx-build docs {}\".format(target))\n"],["body","\n"],["body","We can also allow runtime parameterization:"],["body","\n"],["body","default_target = \"docs/_build\"\n\n@task\ndef clean(c, target=default_target):\n    c.run(\"rm -rf {}\".format(target))\n\n@task\ndef build(c, target=default_target):\n    c.run(\"sphinx-build docs {}\".format(target))\n"],["body","\n"],["body","This task module works for a single set of users, but what if we want to allow reuse? Somebody may want to use this module with a different default target. Using the configuration data (made available via the context arg) to configure these settings is usually the better solution [1]."],["body","\n"],["headingLink","configuring-via-task-collection"],["heading","Configuring via task collection"],["body","\n"],["body","The configuration setting and getting APIs enable moving otherwise ‘hardcoded’ default values into a config structure which downstream users are free to redefine. Let’s apply this to our example. First we add an explicit namespace object:"],["body","\n"],["body","from invoke import Collection, task\n\ndefault_target = \"docs/_build\"\n\n@task\ndef clean(c, target=default_target):\n    c.run(\"rm -rf {}\".format(target))\n\n@task\ndef build(c, target=default_target):\n    c.run(\"sphinx-build docs {}\".format(target))\n\nns = Collection(clean, build)\n"],["body","\n"],["body","Then we can move the default build target value into the collection’s default configuration, and refer to it via the context. At this point we also change our kwarg default value to be None so we can determine whether or not a runtime value was given. The result:"],["body","\n"],["body","@task\ndef clean(c, target=None):\n    if target is None:\n        target = c.sphinx.target\n    c.run(\"rm -rf {}\".format(target))\n\n@task\ndef build(c, target=None):\n    if target is None:\n        target = c.sphinx.target\n    c.run(\"sphinx-build docs {}\".format(target))\n\nns = Collection(clean, build)\nns.configure({'sphinx': {'target': \"docs/_build\"}})\n"],["body","\n"],["body","The result isn’t significantly more complex than what we began with, and as we’ll see next, it’s now trivial for users to override your defaults in various ways."],["body","\n"],["headingLink","configuration-overriding"],["heading","Configuration overriding"],["body","\n"],["body","The lowest-level override is, of course, just modifying the local Collection tree into which a distributed module has been imported. E.g. if the above module is distributed as myproject.docs, someone can define a tasks.py that does this:"],["body","\n"],["body","from invoke import Collection, task\nfrom myproject import docs\n\n@task\ndef mylocaltask(c):\n    # Some local stuff goes here\n    pass\n\n# Add 'docs' to our local root namespace, plus our own task\nns = Collection(mylocaltask, docs)\n"],["body","\n"],["body","And then they can add this to the bottom:"],["body","\n"],["body","# Our docs live in 'built_docs', not 'docs/_build'\nns.configure({'sphinx': {'target': \"built_docs\"}})\n"],["body","\n"],["body","Now we have a docs sub-namespace whose build target defaults to built_docs instead of docs/_build. Runtime users can still override this via flags (e.g. inv docs.build --target='some/other/dir') just as before."],["body","\n"],["body","If you prefer configuration files over in-Python tweaking of your namespace tree, that works just as well; instead of adding the line above to the previous snippet, instead drop this into a file next to tasks.py named invoke.yaml:"],["body","\n"],["body","sphinx:\n    target: built_docs\n"],["body","\n"],["body","For this example, that sort of local-to-project conf file makes the most sense, but don’t forget that the config hierarchy offers additional configuration methods which may be suitable depending on your needs."],["body","\n\n\n\n"],["body","\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python三方库_2_fabric/invoke/2.InvokeCoreUsage.html"],["title","InvokeCoreUsage.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","core-options-and-flags"],["heading","Core options and flags"],["body","\n"],["body","invoke’s usage looks like:"],["body","\n"],["body","$ inv[oke] [--core-opts] task1 [--task1-opts] ... taskN [--taskN-opts]\n"],["body","\n"],["body","所有核心选项和标志都在下面; 几乎所有这些都必须在任何任务名称之前给出，其中一些 (例如 -- help) 在命令行中的任何位置都要特别查找。(有关解析的详细信息，see Basic command line layout.。)"],["body","\n\n"],["body","\n"],["body","--complete"],["body","\n"],["body","打印 (行分隔) 有效的tab-completion ，该选项以 “剩余” (即在--之后) 给出。 Used for building shell completion scripts.。"],["body","\n"],["body","例如： when the local tasks tree contains tasks named foo and bar, and when foo takes flags --foo-arg and --foo-arg-2, you might use it like this"],["body","\n"],["body","\n"],["body","\n\n"],["headingLink","empty-input-just-task-names"],["heading","Empty input: just task names"],["body","\n"],["body","$ inv --complete -- foo bar"],["body","\n"],["headingLink","input-not-ending-with-a-dash-task-names-still"],["heading","Input not ending with a dash: task names still"],["body","\n"],["body","$ inv --complete -- foo --foo-arg foo bar"],["body","\n"],["headingLink","input-ending-with-a-dash-current-contexts-flag-names"],["heading","Input ending with a dash: current context's flag names"],["body","\n"],["body","$ inv --complete -- foo - --foo-arg --foo-arg-2"],["body","\n"],["body","\n详见： [`--print-completion-script`](https://docs.pyinvoke.org/en/stable/invoke.html#cmdoption-print-completion-script).\n\n\n\n- `--hide=STRING`\n\nSet default value of run()’s ‘hide’ kwarg.\n\n- `--no-dedupe`\n\nDisable task deduplication.\n\n- `--print-completion-script=SHELL`\n\nPrint a completion script for desired `SHELL` (e.g. `bash`, `zsh`, etc).\n\n​\t \tThis can be sourced into the current session in order to enjoy [tab-completion for tasks and options](https://docs.pyinvoke.org/en/stable/invoke.html#tab-completion).These scripts are bundled with Invoke’s distributedcodebase, and internally make use of [`--complete`](https://docs.pyinvoke.org/en/stable/invoke.html#cmdoption-complete).\n\n- `--prompt-for-sudo-password`\n\n在会话开始时 (在执行任何任务之前) 提示sudo.password配置值。这允许不想在配置系统或其外壳环境中保留敏感材料的用户依赖用户输入，而不会以其他方式中断程序的流程。\n\n- `--write-pyc`\n\nBy default, Invoke disables bytecode caching as it can cause hard-to-debug problems with task files and (for the kinds of things Invoke is typically used for) offers no noticeable speed benefit. If you really want your `.pyc` files back, give this option.\n\n默认情况下，Invoke会禁用字节码缓存，因为它会导致任务文件难以调试的问题，并且 (对于Invoke通常用于的类型) 不会提供明显的速度优势。如果你真的想要你的。pyc文件返回，给出此选项。\n\n- `-c STRING, --collection=STRING`\n\nSpecify collection name to load.\n\n- `-d,--debug`\n\nEnable debug output.\n\n- `--dry`\n\nEcho命令，而不是实际运行它们; \n\n* 具体来说，导致任何运行调用 操作，就好像echo选项已打开，打印待运行命令到stdout \n\n* 跳过实际的子进程调用 (在任何机器开始运行之前返回); \n\n* 返回具有 'blank' 值的虚拟结果对象 (空stdot/err字符串，0退出代码等)。\n\n\n\n- `-D --list-depth=INT`\n\nLimit [`--list`](https://docs.pyinvoke.org/en/stable/invoke.html#cmdoption-l) display to the specified number of levels\n\n限制 list显示的任务数\n\n1. e.g. `--list-depth 1` to show only top-level tasks and namespaces\n2. If an argument is given to `--list`, then this depth is relative; so `--list build --list-depth 1` shows everything at the top level of the `build` subtree.\n3. 默认行为 (如果未给出) 将显示整个任务树的所有级别。\n\n- `-e, --echo`\n\n运行前Echo已执行命令。\n\n- `-f, --config`\n\n1. Specify a [runtime configuration file](https://docs.pyinvoke.org/en/stable/concepts/configuration.html#config-hierarchy) to load.\n\n2. INVOKE_RUNTIME_CONFIG 环境变量如果指定了，则CLI选项获胜\n\n- `-F,--list-format=STRING`\n\n改变 --list 展示格式\n\n**flat**：平面\n\n**json**：json\n\n**nested**：嵌套展示\n\n\n\n- `-h STRING, --help=STRING`\n\n- `-l,--list=STRING`\n\n- `-p, --pty`\n\nUse a pty when executing shell commands.\n\n- `-r STRING, --search-root=STRING`\n\n更改用于查找任务模块的根目录。.\n\n- `-T INT, --command-timeout=INT`\n* 默认执行任务超时时间\n* 同配置 `timeouts.command`\n\n- `-V, --version`\n\nShow version and exit.\n\n- `-w, --warn-only`\n\nWarn, instead of failing, when shell commands fail.\n\n\n\n## Shell tab completion\n\n### Generating a completion script\n\nInvoke的理念是实现通用api，然后 “烘烤” 一些在这些api之上构建的常见用例\n\ntab completion 没有什么不同。 通用tab completion (为给定的命令行上下文输出与外壳兼容的完成令牌列表) 由上面描述的 -- complete core CLI选项提供。\n\n\n\n但是，您可能不需要自己使用该标志: 我们针对bash和zsh (以及其他) 等最常见的shell分发了一些现成的包装脚本。可以使用 -- print-compliction-script 从Invoke或 [any Invoke-driven command-line tool](https://docs.pyinvoke.org/en/stable/concepts/library.html#reusing-as-a-binary),  自动生成这些脚本; 打印的脚本将包含生成它们的程序的正确二进制名称。\n\n\n\nFor example, the following command prints (to stdout) a script which works for `zsh`, instructs `zsh` to use it for the `inv` and `invoke` programs, and calls `invoke --complete` at runtime to get dynamic completion information:\n\n例如，以下命令打印 (到stdot) 适用于zsh的脚本，指示zsh将其用于inv并调用程序，并在运行时调用invoke -- complete来获取动态完成信息:\n\n"],["body","\n"],["body","$ invoke --print-completion-script zsh"],["body","\n"],["body","\n\n\n您可能希望将此命令源或将其输出永久存储在某个地方; 在下一节中详细介绍。\n同样，[Fabric](http://fabfile.org/) tool  从Invoke继承，并且只有一个二进制名称 (fab); 如果你想在bash中获得结构完成，你会说:\n\n"],["body","\n"],["body","$ fab --print-completion-script bash"],["body","\n"],["body","\n在本节的其余部分中，我们将在示例中使用inv，但是请记住将其替换为您实际使用的程序，如果它不是调用自己的话!\n\n\n\n### Sourcing the script\n\n有几种方法可以利用上述命令的输出，具体取决于您的需求，程序的安装位置以及您的shell:\n\n- 最简单和最少破坏性的方法是源打印完成脚本内联，它不会在磁盘上放置任何东西，只会影响当前的shell会话:\n\n"],["body","\n"],["body","$ source <(inv --print-completion-script zsh)"],["body","\n"],["body","\n-  如果您在系统的全局Python解释器中提供了该程序 (并且您可以在每个shell会话的启动时运行该程序-Python的速度显然不是其强项)，则可以将该代码片段添加到shell的启动文件中，\n\nsuch as `~/.zshrc` or `~/.bashrc`.\n\n- 如果该程序在全局范围内可用，但您希望避免在shell启动时运行额外的Python程序，则可以将命令的输出缓存在自己的文件中; 该文件的运行位置完全取决于您以及shell的配置方式。例如，您可以将其作为隐藏文件放入主目录中:\n\n"],["body","\n"],["body","$ inv --print-completion-script zsh > ~/.invoke-completion.sh\n$ source ~/.invoke-completion.sh"],["body","\n"],["body","\n\n\n如果您使用的是fish，则必须使用此策略，因为我们的fish completion脚本不适合直接采购。Fish shell用户应将命令的输出定向到〜/.config/fish/completion/目录中的文件。\n\n### Utilizing tab completion itself\n\n您已经确保完成脚本在您的环境中处于活动状态-您获得了什么？\n\n- By default, tabbing after typing `inv` or `invoke` will display task names from your current directory/project’s tasks file.\n\n- 默认情况下，键入inv或invoke后的制表将显示当前目录/项目任务文件中的任务名称。\n\n- 键入破折号 (-) 或双破折号 (-) 后的制表将显示当前上下文的有效选项/标志: 如果尚未键入任务名称，则核心调用选项; 否则为最近键入任务的选项。\n\n> - Tabbing while typing a partial long option will complete matching long options, using your shell’s native substring completion. E.g. if no task names have been typed yet, `--e<tab>` will offer `--echo` as a completion option.\n\n- Hitting tab when the most recent typed/completed token is a flag which takes a value, will ‘fall through’ to your shell’s native filename completion.\n\n> - For example, prior to typing a task name, `--config <tab>` will complete local file paths to assist in filling in a config file.\n\n<script src=\"/note-service/python/infisearch_assets/search-ui.chinese.bundle.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n<script src=\"/note-service/python/infisearch_assets/mark.min.js\" type=\"text/javascript\" charset=\"utf-8\"></script>\n\n<script>\nconst base_url = '/note-service/python/';\nconst mode = 'target';\ninfisearch.init({\nsearcherOptions: {\n  url: base_url + 'infisearch_output/',\n},\nuiOptions: {\n  mode,\n  dropdownAlignment: 'bottom-start',\n  target: document.getElementById('infisearch-mdbook-target'),\n  fsButtonPlaceholder: 'Search',\n  sourceFilesUrl: base_url,\n  resultsRenderOpts: {\n    searchedTermsParam: 'search',\n  },\n  multiSelectFilters: [\n    { fieldName: 'partTitle', displayName: 'Section', defaultOptName: 'None' },\n  ],\n},\n});\n\ndocument.getElementById('infi-search').addEventListener('keydown', (ev) => {\nif (['ArrowLeft', 'ArrowRight'].includes(ev.key)) {\n  ev.stopPropagation(); // used in global listener to change pages\n  return;\n}\n});\n\nif (window.location.search) {\n// Adapted from the original searcher.js for mdbook\n// https://github.com/rust-lang/mdBook/blob/master/src/theme/searcher/searcher.js\nconst target = document.getElementById('content');\nconst marker = new Mark(target);\n\nfunction doSearchOrMarkFromUrl() {\n  // Check current URL for search request\n  var url = new URL(window.location.href);\n  var urlParams = new URLSearchParams(url.search);\n\n  if (urlParams.has('search')) {\n    var words = JSON.parse(decodeURIComponent(urlParams.get('search')));\n    marker.mark(words);\n\n    var markers = document.querySelectorAll('mark');\n    function hide() {\n      for (var i = 0; i < markers.length; i++) {\n        markers[i].classList.add('fade-out');\n        window.setTimeout(function () { marker.unmark(); }, 300);\n      }\n    }\n    for (var i = 0; i < markers.length; i++) {\n      markers[i].addEventListener('click', hide);\n    }\n  }\n}\ndoSearchOrMarkFromUrl();\n}\n</script>\n\n<span data-infisearch-part-title=\"README\"></span>\n"],["body","\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/4.Python推导式.html"],["title","Python推导式.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python-推导式"],["heading","Python 推导式"],["body","\n"],["body","Python 推导式是一种独特的数据处理方式，可以从一个数据序列构建另一个新的数据序列的结构体。"],["body","\n"],["body","Python 支持各种数据结构的推导式："],["body","\n\n"],["body","列表(list)推导式"],["body","\n"],["body","字典(dict)推导式"],["body","\n"],["body","集合(set)推导式"],["body","\n"],["body","元组(tuple)推导式"],["body","\n\n"],["headingLink","列表推导式"],["heading","列表推导式"],["body","\n"],["body","列表推导式格式为："],["body","\n"],["body","[表达式 for 变量 in 列表] \n[out_exp_res for out_exp in input_list]\n\n或者 \n\n[表达式 for 变量 in 列表 if 条件]\n[out_exp_res for out_exp in input_list if condition]\n"],["body","\n\n"],["body","out_exp_res：列表生成元素表达式，可以是有返回值的函数。"],["body","\n"],["body","for out_exp in input_list：迭代 input_list 将 out_exp 传入到 out_exp_res 表达式中。"],["body","\n"],["body","if condition：条件语句，可以过滤列表中不符合条件的值。"],["body","\n\n"],["body","过滤掉长度小于或等于3的字符串列表，并将剩下的转换成大写字母："],["body","\n"],["body",">>> names = ['Bob','Tom','alice','Jerry','Wendy','Smith']\n>>> new_names = [name.upper()for name in names if len(name)>3]\n>>> print(new_names)\n['ALICE', 'JERRY', 'WENDY', 'SMITH']\n"],["body","\n"],["body",">>> multiples = [i for i in range(30) if i % 3 == 0]\n>>> print(multiples)\n[0, 3, 6, 9, 12, 15, 18, 21, 24, 27]\n"],["body","\n"],["headingLink","字典推导式"],["heading","字典推导式"],["body","\n"],["body","{ key_expr: value_expr for value in collection }\n\n或\n\n{ key_expr: value_expr for value in collection if condition }\n\n"],["body","\n"],["body","listdemo = ['Google','Runoob', 'Taobao']\n# 将列表中各字符串值为键，各字符串的长度为值，组成键值对\n>>> newdict = {key:len(key) for key in listdemo}\n>>> newdict\n{'Google': 6, 'Runoob': 6, 'Taobao': 6}\n\n"],["body","\n"],["body",">>> dic = {x: x**2 for x in (2, 4, 6)}\n>>> dic\n{2: 4, 4: 16, 6: 36}\n>>> type(dic)\n<class 'dict'>\n"],["body","\n"],["headingLink","set推导式"],["heading","Set推导式"],["body","\n"],["body","{ expression for item in Sequence }\n或\n{ expression for item in Sequence if conditional }\n"],["body","\n"],["body",">>> setnew = {i**2 for i in (1,2,3)}\n>>> setnew\n{1, 4, 9}\n"],["body","\n"],["body",">>> a = {x for x in 'abracadabra' if x not in 'abc'}\n>>> a\n{'d', 'r'}\n>>> type(a)\n<class 'set'>\n"],["body","\n"],["headingLink","元组推导式"],["heading","元组推导式"],["body","\n"],["body","(expression for item in Sequence )\n或\n(expression for item in Sequence if conditional )\n"],["body","\n"],["body","元组推导式和列表推导式的用法也完全相同，只是元组推导式是用 () 圆括号将各部分括起来，而列表推导式用的是中括号 []，另外元组推导式返回的结果是一个生成器对象。"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/17.模块与包.html"],["title","模块与包.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","构建一个模块的层级包"],["heading","构建一个模块的层级包"],["body","\n"],["body","封装成包是很简单的。在文件系统上组织你的代码，并确保每个目录都定义了一个__init__.py文件。 例如："],["body","\n"],["body","graphics/\n    __init__.py\n    primitive/\n        __init__.py\n        line.py\n        fill.py\n        text.py\n    formats/\n        __init__.py\n        png.py\n        jpg.py\n"],["body","\n"],["body","一旦你做到了这一点，你应该能够执行各种import语句，如下："],["body","\n"],["body","import graphics.primitive.line\nfrom graphics.primitive import line\nimport graphics.formats.jpg as jpg\n"],["body","\n"],["headingLink","讨论"],["heading","讨论"],["body","\n\n"],["body","定义模块的层次结构就像在文件系统上建立目录结构一样容易。"],["body","\n"],["body","文件__init__.py的目的是要包含不同运行级别的包的可选的初始化代码。"],["body","\n"],["body","举个例子，如果你执行了语句import graphics， 文件graphics/init.py将被导入,建立graphics命名空间的内容。"],["body","\n"],["body","像import graphics.format.jpg这样导入，文件graphics/init.py和文件graphics/formats/init.py将在文件graphics/formats/jpg.py导入之前导入。"],["body","\n\n"],["body","绝大部分时候让__init__.py空着就好。但是有些情况下可能包含代码。 举个例子，init.py能够用来自动加载子模块:"],["body","\n"],["body","# graphics/formats/__init__.py\nfrom . import jpg\nfrom . import png\n"],["body","\n\n"],["body","\n"],["body","像这样一个文件,用户可以仅仅通过import grahpics.formats来代替import graphics.formats.jpg以及import graphics.formats.png。"],["body","\n"],["body","\n"],["body","\n"],["body","init.py的其他常用用法包括将多个文件合并到一个逻辑命名空间，"],["body","\n"],["body","\n\n"],["body","敏锐的程序员会发现，即使没有__init__.py文件存在，python仍然会导入包。如果你没有定义init.py时，实际上创建了一个所谓的“命名空间包”，"],["body","\n"],["headingLink","控制模块被全部导入的内容"],["heading","控制模块被全部导入的内容"],["body","\n"],["headingLink","问题"],["heading","问题"],["body","\n"],["body","当使用from module import *   语句时，希望对从模块或包导出的符号进行精确控制。"],["body","\n"],["headingLink","解决方案"],["heading","解决方案"],["body","\n"],["body","在你的模块中定义一个变量 all 来明确地列出需要导出的内容。"],["body","\n"],["body","举个例子:"],["body","\n"],["body","# somemodule.py\ndef spam():\n    pass\n\ndef grok():\n    pass\n\nblah = 42\n# Only export 'spam' and 'grok'\n__all__ = ['spam', 'grok']\n"],["body","\n"],["headingLink","讨论-1"],["heading","讨论"],["body","\n"],["body","尽管强烈反对使用 ‘from module import *’, 但是在定义了大量变量名的模块中频繁使用。 如果你不做任何事, 这样的导入将会导入所有不以下划线开头的。"],["body","\n"],["body","另一方面,如果定义了 all , 那么只有被列举出的东西会被导出。"],["body","\n"],["body","如果你将 all 定义成一个空列表, 没有东西将被导入。 如果 all 包含未定义的名字, 在导入时引起AttributeError。"],["body","\n"],["headingLink","使用相对路径名导入包中子模块"],["heading","使用相对路径名导入包中子模块"],["body","\n"],["headingLink","问题-1"],["heading","问题"],["body","\n"],["body","将代码组织成包,想用import语句从另一个包名没有硬编码过的包中导入子模块。"],["body","\n"],["headingLink","解决方案-1"],["heading","解决方案"],["body","\n"],["body","使用包的相对导入，使一个模块导入同一个包的另一个模块 举个例子，假设在你的文件系统上有mypackage包，组织如下："],["body","\n"],["body","mypackage/\n    __init__.py\n    A/\n        __init__.py\n        spam.py\n        grok.py\n    B/\n        __init__.py\n        bar.py\n"],["body","\n"],["body","如果模块mypackage.A.spam要导入同目录下的模块grok，它应该包括的import语句如下："],["body","\n"],["body","# mypackage/A/spam.py\nfrom . import grok\n"],["body","\n"],["body","如果模块mypackage.A.spam要导入不同目录下的模块B.bar，它应该使用的import语句如下："],["body","\n"],["body","# mypackage/A/spam.py\nfrom ..B import bar\n"],["body","\n"],["body","两个import语句都没包含顶层包名，而是使用了spam.py的相对路径。"],["body","\n"],["headingLink","讨论-2"],["heading","讨论"],["body","\n"],["body","在包内，既可以使用相对路径也可以使用绝对路径来导入。 举个例子："],["body","\n"],["body","# mypackage/A/spam.py\nfrom mypackage.A import grok # OK\nfrom . import grok # OK\nimport grok # Error (not found)\n"],["body","\n\n"],["body","\n"],["body","像mypackage.A这样使用绝对路径名的不利之处是这将顶层包名硬编码到你的源码中。如果你想重新组织它，你的代码将更脆，很难工作。"],["body","\n"],["body","\n"],["body","\n"],["body","举个例子，如果你改变了包名，你就必须检查所有文件来修正源码。"],["body","\n"],["body","\n"],["body","\n"],["body","同样，硬编码的名称会使移动代码变得困难。举个例子，也许有人想安装两个不同版本的软件包，只通过名称区分它们。 如果使用相对导入，那一切都ok，然而使用绝对路径名很可能会出问题。"],["body","\n"],["body","\n\n"],["body","import语句的 . 和 .. 看起来很滑稽, 但它指定目录名.为当前目录，..B为目录../B。这种语法只适用于import。 举个例子："],["body","\n"],["body","from . import grok # OK\nimport .grok # ERROR\n"],["body","\n"],["body","尽管使用相对导入看起来像是浏览文件系统，但是不能到定义包的目录之外。也就是说，使用点的这种模式从不是包的目录中导入将会引发错误。"],["body","\n"],["body","最后，相对导入只适用于在合适的包中的模块。尤其是在顶层的脚本的简单模块中，它们将不起作用。如果包的部分被作为脚本直接执行，那它们将不起作用 例如："],["body","\n"],["body","% python3 mypackage/A/spam.py # Relative imports fail\n"],["body","\n"],["body","另一方面，如果你使用Python的-m选项来执行先前的脚本，相对导入将会正确运行。 例如："],["body","\n"],["body","% python3 -m mypackage.A.spam # Relative imports work\n"],["body","\n"],["body","更多的包的相对导入的背景知识,请看 PEP 328 ."],["body","\n"],["headingLink","将模块分割成多个文件"],["heading","将模块分割成多个文件"],["body","\n"],["headingLink","问题-2"],["heading","问题"],["body","\n"],["body","你想将一个模块分割成多个文件。但是你不想将分离的文件统一成一个逻辑模块时使已有的代码遭到破坏。"],["body","\n"],["headingLink","解决方案-2"],["heading","解决方案"],["body","\n"],["body","程序模块可以通过变成包来分割成多个独立的文件。考虑下下面简单的模块："],["body","\n"],["body","# mymodule.py\nclass A:\n    def spam(self):\n        print('A.spam')\n\nclass B(A):\n    def bar(self):\n        print('B.bar')\n"],["body","\n"],["body","假设你想mymodule.py分为两个文件，每个定义的一个类。要做到这一点，首先用mymodule目录来替换文件mymodule.py。 这这个目录下，创建以下文件："],["body","\n"],["body","mymodule/\n    __init__.py\n    a.py\n    b.py\n"],["body","\n"],["body","在a.py文件中插入以下代码："],["body","\n"],["body","# a.py\nclass A:\n    def spam(self):\n        print('A.spam')\n"],["body","\n"],["body","在b.py文件中插入以下代码："],["body","\n"],["body","# b.py\nfrom .a import A\nclass B(A):\n    def bar(self):\n        print('B.bar')\n"],["body","\n"],["body","最后，在 init.py 中，将2个文件粘合在一起："],["body","\n"],["body","# __init__.py\nfrom .a import A\nfrom .b import B\n"],["body","\n"],["body","如果按照这些步骤，所产生的包MyModule将作为一个单一的逻辑模块："],["body","\n"],["body",">>> import mymodule\n>>> a = mymodule.A()\n>>> a.spam()\nA.spam\n>>> b = mymodule.B()\n>>> b.bar()\nB.bar\n>>>\n"],["body","\n"],["headingLink","讨论-3"],["heading","讨论"],["body","\n"],["body","在这个章节中的主要问题是一个设计问题，不管你是否希望用户使用很多小模块或只是一个模块。举个例子，在一个大型的代码库中，你可以将这一切都分割成独立的文件，让用户使用大量的import语句，就像这样："],["body","\n"],["body","from mymodule.a import A\nfrom mymodule.b import B\n...\n"],["body","\n"],["body","这样能工作，但这让用户承受更多的负担，用户要知道不同的部分位于何处。通常情况下，将这些统一起来，使用一条import将更加容易，就像这样："],["body","\n"],["body","from mymodule import A, B\n"],["body","\n"],["body","对后者而言，让mymodule成为一个大的源文件是最常见的。但是，这一章节展示了如何合并多个文件合并成一个单一的逻辑命名空间。 这样做的关键是创建一个包目录，使用 init.py 文件来将每部分粘合在一起。"],["body","\n"],["body","当一个模块被分割，你需要特别注意交叉引用的文件名。举个例子，在这一章节中，B类需要访问A类作为基类。用包的相对导入 from .a import A 来获取。"],["body","\n"],["body","整个章节都使用包的相对导入来避免将顶层模块名硬编码到源代码中。这使得重命名模块或者将它移动到别的位置更容易。（见10.3小节）"],["body","\n"],["body","作为这一章节的延伸，将介绍延迟导入。如图所示，init.py文件一次导入所有必需的组件的。但是对于一个很大的模块，可能你只想组件在需要时被加载。 要做到这一点，init.py有细微的变化："],["body","\n"],["body","# __init__.py\ndef A():\n    from .a import A\n    return A()\n\ndef B():\n    from .b import B\n    return B()\n"],["body","\n"],["body","在这个版本中，类A和类B被替换为在第一次访问时加载所需的类的函数。对于用户，这看起来不会有太大的不同。 例如："],["body","\n"],["body",">>> import mymodule\n>>> a = mymodule.A()\n>>> a.spam()\nA.spam\n>>>\n"],["body","\n"],["body","延迟加载的主要缺点是继承和类型检查可能会中断。你可能会稍微改变你的代码，例如:"],["body","\n"],["body","if isinstance(x, mymodule.A): # Error\n...\n\nif isinstance(x, mymodule.a.A): # Ok\n...\n"],["body","\n"],["body","延迟加载的真实例子, 见标准库 multiprocessing/init.py 的源码."],["body","\n"],["body","Next  Previous"],["body","\n"],["headingLink","利用命名空间导入目录分散的代码"],["heading","利用命名空间导入目录分散的代码"],["body","\n"],["headingLink","问题-3"],["heading","问题"],["body","\n"],["body","你可能有大量的代码，由不同的人来分散地维护。每个部分被组织为文件目录，如一个包。然而，你希望能用共同的包前缀将所有组件连接起来，不是将每一个部分作为独立的包来安装。"],["body","\n"],["headingLink","解决方案-3"],["heading","解决方案"],["body","\n"],["body","从本质上讲，你要定义一个顶级Python包，作为一个大集合分开维护子包的命名空间。这个问题经常出现在大的应用框架中，框架开发者希望鼓励用户发布插件或附加包。"],["body","\n"],["body","在统一不同的目录里统一相同的命名空间，但是要删去用来将组件联合起来的__init__.py文件。假设你有Python代码的两个不同的目录如下："],["body","\n"],["body","foo-package/\n    spam/\n        blah.py\n\nbar-package/\n    spam/\n        grok.py\n"],["body","\n"],["body","在这2个目录里，都有着共同的命名空间spam。在任何一个目录里都没有__init__.py文件。"],["body","\n"],["body","让我们看看，如果将foo-package和bar-package都加到python模块路径并尝试导入会发生什么"],["body","\n"],["body",">>> import sys\n>>> sys.path.extend(['foo-package', 'bar-package'])\n>>> import spam.blah\n>>> import spam.grok\n>>>\n"],["body","\n"],["body","两个不同的包目录被合并到一起，你可以导入spam.blah和spam.grok，并且它们能够工作。"],["body","\n"],["headingLink","讨论-4"],["heading","讨论"],["body","\n\n"],["body","\n"],["body","在这里工作的机制被称为“包命名空间”的一个特征。从本质上讲，包命名空间是一种特殊的封装设计，为合并不同的目录的代码到一个共同的命名空间。"],["body","\n"],["body","\n"],["body","\n"],["body","对于大的框架，这可能是有用的，因为它允许一个框架的部分被单独地安装下载。它也使人们能够轻松地为这样的框架编写第三方附加组件和其他扩展。"],["body","\n"],["body","\n"],["body","\n"],["body","包命名空间的关键是确保顶级目录中没有__init__.py文件来作为共同的命名空间。缺失__init__.py文件使得在导入包的时候会发生有趣的事情：这并没有产生错误，解释器创建了一个由所有包含匹配包名的目录组成的列表。特殊的包命名空间模块被创建，只读的目录列表副本被存储在其__path__变量中。 举个例子："],["body","\n"],["body","\n\n"],["body",">>> import spam\n>>> spam.__path__\n_NamespacePath(['foo-package/spam', 'bar-package/spam'])\n>>>\n"],["body","\n"],["body","在定位包的子组件时，目录__path__将被用到(例如, 当导入spam.grok或者spam.blah的时候)."],["body","\n"],["body","包命名空间的一个重要特点是任何人都可以用自己的代码来扩展命名空间。举个例子，假设你自己的代码目录像这样："],["body","\n"],["body","my-package/\n    spam/\n        custom.py\n"],["body","\n"],["body","如果你将你的代码目录和其他包一起添加到sys.path，这将无缝地合并到别的spam包目录中："],["body","\n"],["body",">>> import spam.custom\n>>> import spam.grok\n>>> import spam.blah\n>>>\n"],["body","\n"],["body","一个包是否被作为一个包命名空间的主要方法是检查其__file__属性。如果没有，那包是个命名空间。这也可以由其字符表现形式中的“namespace”这个词体现出来。"],["body","\n"],["body",">>> spam.__file__\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nAttributeError: 'module' object has no attribute '__file__'\n>>> spam\n<module 'spam' (namespace)>\n>>>\n"],["body","\n"],["headingLink","重新加载模块"],["heading","重新加载模块"],["body","\n"],["headingLink","问题-4"],["heading","问题"],["body","\n"],["body","你想重新加载已经加载的模块，因为你对其源码进行了修改。"],["body","\n"],["headingLink","解决方案-4"],["heading","解决方案"],["body","\n"],["body","使用imp.reload()来重新加载先前加载的模块。举个例子："],["body","\n"],["body",">>> import spam\n>>> import imp\n>>> imp.reload(spam)\n<module 'spam' from './spam.py'>\n>>>\n"],["body","\n"],["headingLink","讨论-5"],["heading","讨论"],["body","\n"],["body","重新加载模块在开发和调试过程中常常很有用。但在生产环境中的代码使用会不安全，因为它并不总是像您期望的那样工作。"],["body","\n"],["body","reload()擦除了模块底层字典的内容，并通过重新执行模块的源代码来刷新它。模块对象本身的身份保持不变。因此，该操作在程序中所有已经被导入了的地方更新了模块。"],["body","\n"],["body","尽管如此，reload()没有更新像”from module import name”这样使用import语句导入的定义。举个例子："],["body","\n"],["body","# spam.py\ndef bar():\n    print('bar')\n\ndef grok():\n    print('grok')\n"],["body","\n"],["body","现在启动交互式会话："],["body","\n"],["body",">>> import spam\n>>> from spam import grok\n>>> spam.bar()\nbar\n>>> grok()\ngrok\n>>>\n"],["body","\n"],["body","不退出Python修改spam.py的源码，将grok()函数改成这样："],["body","\n"],["body","def grok():\n    print('New grok')\n"],["body","\n"],["body","现在回到交互式会话，重新加载模块，尝试下这个实验："],["body","\n"],["body",">>> import imp\n>>> imp.reload(spam)\n<module 'spam' from './spam.py'>\n>>> spam.bar()\nbar\n>>> grok() # Notice old output\ngrok\n>>> spam.grok() # Notice new output\nNew grok\n>>>\n"],["body","\n"],["body","在这个例子中，你看到有2个版本的grok()函数被加载。通常来说，这不是你想要的，而是令人头疼的事。"],["body","\n"],["body","因此，在生产环境中可能需要避免重新加载模块。在交互环境下调试，解释程序并试图弄懂它。"],["body","\n"],["headingLink","运行目录或压缩文件"],["heading","运行目录或压缩文件"],["body","\n"],["headingLink","问题-5"],["heading","问题"],["body","\n"],["body","您有一个已成长为包含多个文件的应用，它已远不再是一个简单的脚本，你想向用户提供一些简单的方法运行这个程序。"],["body","\n"],["headingLink","解决方案-5"],["heading","解决方案"],["body","\n"],["body","如果你的应用程序已经有多个文件，你可以把你的应用程序放进它自己的目录并添加一个__main__.py文件。 举个例子，你可以像这样创建目录："],["body","\n"],["body","myapplication/\n    spam.py\n    bar.py\n    grok.py\n    __main__.py\n"],["body","\n"],["body","如果__main__.py存在，你可以简单地在顶级目录运行Python解释器："],["body","\n"],["body","bash % python3 myapplication\n"],["body","\n"],["body","解释器将执行__main__.py文件作为主程序。"],["body","\n"],["body","如果你将你的代码打包成zip文件，这种技术同样也适用，举个例子："],["body","\n"],["body","bash % ls\nspam.py bar.py grok.py __main__.py\nbash % zip -r myapp.zip *.py\nbash % python3 myapp.zip\n... output from __main__.py ...\n"],["body","\n"],["headingLink","讨论-6"],["heading","讨论"],["body","\n"],["body","创建一个目录或zip文件并添加__main__.py文件来将一个更大的Python应用打包是可行的。这和作为标准库被安装到Python库的代码包是有一点区别的。相反，这只是让别人执行的代码包。"],["body","\n"],["body","由于目录和zip文件与正常文件有一点不同，你可能还需要增加一个shell脚本，使执行更加容易。例如，如果代码文件名为myapp.zip，你可以创建这样一个顶级脚本："],["body","\n"],["body","#!/usr/bin/env python3 /usr/local/bin/myapp.zip\n"],["body","\n"],["headingLink","读取位于包中的数据文件"],["heading","读取位于包中的数据文件"],["body","\n"],["headingLink","问题-6"],["heading","问题"],["body","\n"],["body","你的包中包含代码需要去读取的数据文件。你需要尽可能地用最便捷的方式来做这件事。"],["body","\n"],["headingLink","解决方案-6"],["heading","解决方案"],["body","\n"],["body","假设你的包中的文件组织成如下："],["body","\n"],["body","mypackage/\n    __init__.py\n    somedata.dat\n    spam.py\n"],["body","\n"],["body","现在假设spam.py文件需要读取somedata.dat文件中的内容。你可以用以下代码来完成："],["body","\n"],["body","# spam.py\nimport pkgutil\ndata = pkgutil.get_data(__package__, 'somedata.dat')\n"],["body","\n"],["body","由此产生的变量是包含该文件的原始内容的字节字符串。"],["body","\n"],["headingLink","讨论-7"],["heading","讨论"],["body","\n"],["body","要读取数据文件，你可能会倾向于编写使用内置的I/ O功能的代码，如open()。但是这种方法也有一些问题。"],["body","\n\n"],["body","\n"],["body","首先，一个包对解释器的当前工作目录几乎没有控制权。因此，编程时任何I/O操作都必须使用绝对文件名。由于每个模块包含有完整路径的__file__变量，这弄清楚它的路径不是不可能，但它很凌乱。"],["body","\n"],["body","\n"],["body","\n"],["body","第二，包通常安装作为.zip或.egg文件，这些文件并不像在文件系统上的一个普通目录里那样被保存。因此，你试图用open()对一个包含数据文件的归档文件进行操作，它根本不会工作。"],["body","\n"],["body","\n"],["body","\n"],["body","pkgutil.get_data()函数是一个读取数据文件的高级工具，不用管包是如何安装以及安装在哪。它只是工作并将文件内容以字节字符串返回给你"],["body","\n"],["body","\n\n"],["body","get_data()的第一个参数是包含包名的字符串。你可以直接使用包名，也可以使用特殊的变量，比如__package__。第二个参数是包内文件的相对名称。如果有必要，可以使用标准的Unix命名规范到不同的目录，只要最后的目录仍然位于包中。"],["body","\n"],["headingLink","将文件夹加入到syspath"],["heading","将文件夹加入到sys.path"],["body","\n"],["headingLink","问题-7"],["heading","问题"],["body","\n"],["body","你无法导入你的Python代码因为它所在的目录不在sys.path里。你想将添加新目录到Python路径，但是不想硬链接到你的代码。"],["body","\n"],["headingLink","解决方案-7"],["heading","解决方案"],["body","\n"],["body","有两种常用的方式将新目录添加到sys.path。第一种，你可以使用PYTHONPATH环境变量来添加。例如："],["body","\n"],["body","bash % env PYTHONPATH=/some/dir:/other/dir python3\nPython 3.3.0 (default, Oct 4 2012, 10:17:33)\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import sys\n>>> sys.path\n['', '/some/dir', '/other/dir', ...]\n>>>\n"],["body","\n"],["body","在自定义应用程序中，这样的环境变量可在程序启动时设置或通过shell脚本。"],["body","\n"],["body","第二种方法是创建一个.pth文件，将目录列举出来，像这样："],["body","\n"],["body","# myapplication.pth\n/some/dir\n/other/dir\n"],["body","\n"],["body","这个.pth文件需要放在某个Python的site-packages目录，通常位于/usr/local/lib/python3.3/site-packages 或者 ~/.local/lib/python3.3/sitepackages。当解释器启动时，.pth文件里列举出来的存在于文件系统的目录将被添加到sys.path。安装一个.pth文件可能需要管理员权限，如果它被添加到系统级的Python解释器。"],["body","\n"],["headingLink","讨论-8"],["heading","讨论"],["body","\n"],["body","比起费力地找文件，你可能会倾向于写一个代码手动调节sys.path的值。例如:"],["body","\n"],["body","import sys\nsys.path.insert(0, '/some/dir')\nsys.path.insert(0, '/other/dir')\n"],["body","\n"],["body","虽然这能“工作”，但是在实践中极为脆弱，应尽量避免使用。这种方法的问题是，它将目录名硬编码到了你的源代码。如果你的代码被移到一个新的位置，这会导致维护问题。更好的做法是在不修改源代码的情况下，将path配置到其他地方。如果您使用模块级的变量来精心构造一个适当的绝对路径，有时你可以解决硬编码目录的问题，比如__file__。举个例子："],["body","\n"],["body","import sys\nfrom os.path import abspath, join, dirname\nsys.path.insert(0, join(abspath(dirname(__file__)), 'src'))\n"],["body","\n"],["body","这将src目录添加到path里，和执行插入步骤的代码在同一个目录里。"],["body","\n"],["body","site-packages目录是第三方包和模块安装的目录。如果你手动安装你的代码，它将被安装到site-packages目录。虽然用于配置path的.pth文件必须放置在site-packages里，但它配置的路径可以是系统上任何你希望的目录。因此，你可以把你的代码放在一系列不同的目录，只要那些目录包含在.pth文件里。"],["body","\n"],["headingLink","通过字符串名导入模块"],["heading","通过字符串名导入模块"],["body","\n"],["headingLink","问题-8"],["heading","问题"],["body","\n"],["body","你想导入一个模块，但是模块的名字在字符串里。你想对字符串调用导入命令。"],["body","\n"],["headingLink","解决方案-8"],["heading","解决方案"],["body","\n"],["body","使用importlib.import_module()函数来手动导入名字为字符串给出的一个模块或者包的一部分。举个例子："],["body","\n"],["body",">>> import importlib\n>>> math = importlib.import_module('math')\n>>> math.sin(2)\n0.9092974268256817\n>>> mod = importlib.import_module('urllib.request')\n>>> u = mod.urlopen('http://www.python.org')\n>>>\n"],["body","\n"],["body","import_module只是简单地执行和import相同的步骤，但是返回生成的模块对象。你只需要将其存储在一个变量，然后像正常的模块一样使用。"],["body","\n"],["body","如果你正在使用的包，import_module()也可用于相对导入。但是，你需要给它一个额外的参数。例如："],["body","\n"],["body","import importlib\n# Same as 'from . import b'\nb = importlib.import_module('.b', __package__)\n"],["body","\n"],["headingLink","讨论-9"],["heading","讨论"],["body","\n"],["body","使用import_module()手动导入模块的问题通常出现在以某种方式编写修改或覆盖模块的代码时候。例如，也许你正在执行某种自定义导入机制，需要通过名称来加载一个模块，通过补丁加载代码。"],["body","\n"],["body","在旧的代码，有时你会看到用于导入的内建函数__import__()。尽管它能工作，但是importlib.import_module() 通常更容易使用。"],["body","\n"],["body","自定义导入过程的高级实例 钩子远程加载模块"],["body","\n"],["headingLink","通过钩子远程加载模块"],["heading","通过钩子远程加载模块"],["body","\n"],["headingLink","问题-9"],["heading","问题"],["body","\n"],["body","你想自定义Python的import语句，使得它能从远程机器上面透明的加载模块。"],["body","\n"],["headingLink","解决方案-9"],["heading","解决方案"],["body","\n"],["body","首先要提出来的是安全问题。本节讨论的思想如果没有一些额外的安全和认知机制的话会很糟糕。 也就是说，我们的主要目的是深入分析Python的import语句机制。 如果你理解了本节内部原理，你就能够为其他任何目的而自定义import。 有了这些，让我们继续向前走。"],["body","\n"],["body","本节核心是设计导入语句的扩展功能。有很多种方法可以做这个， 不过为了演示的方便，我们开始先构造下面这个Python代码结构："],["body","\n"],["body","testcode/\n    spam.py\n    fib.py\n    grok/\n        __init__.py\n        blah.py\n"],["body","\n"],["body","这些文件的内容并不重要，不过我们在每个文件中放入了少量的简单语句和函数， 这样你可以测试它们并查看当它们被导入时的输出。例如："],["body","\n"],["body","# spam.py\nprint(\"I'm spam\")\n\ndef hello(name):\n    print('Hello %s' % name)\n\n# fib.py\nprint(\"I'm fib\")\n\ndef fib(n):\n    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\n# grok/__init__.py\nprint(\"I'm grok.__init__\")\n\n# grok/blah.py\nprint(\"I'm grok.blah\")\n"],["body","\n"],["body","这里的目的是允许这些文件作为模块被远程访问。 也许最简单的方式就是将它们发布到一个web服务器上面。在testcode目录中像下面这样运行Python："],["body","\n"],["body","bash % cd testcode\nbash % python3 -m http.server 15000\nServing HTTP on 0.0.0.0 port 15000 ...\n"],["body","\n"],["body","服务器运行起来后再启动一个单独的Python解释器。 确保你可以使用 urllib 访问到远程文件。例如："],["body","\n"],["body",">>> from urllib.request import urlopen\n>>> u = urlopen('http://localhost:15000/fib.py')\n>>> data = u.read().decode('utf-8')\n>>> print(data)\n# fib.py\nprint(\"I'm fib\")\n\ndef fib(n):\n    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n>>>\n"],["body","\n"],["body","从这个服务器加载源代码是接下来本节的基础。 为了替代手动的通过 urlopen() 来收集源文件， 我们通过自定义import语句来在后台自动帮我们做到。"],["body","\n"],["body","加载远程模块的第一种方法是创建一个显式的加载函数来完成它。例如："],["body","\n"],["body","import imp\nimport urllib.request\nimport sys\n\ndef load_module(url):\n    u = urllib.request.urlopen(url)\n    source = u.read().decode('utf-8')\n    mod = sys.modules.setdefault(url, imp.new_module(url))\n    code = compile(source, url, 'exec')\n    mod.__file__ = url\n    mod.__package__ = ''\n    exec(code, mod.__dict__)\n    return mod\n"],["body","\n"],["body","这个函数会下载源代码，并使用 compile() 将其编译到一个代码对象中， 然后在一个新创建的模块对象的字典中来执行它。下面是使用这个函数的方式："],["body","\n"],["body",">>> fib = load_module('http://localhost:15000/fib.py')\nI'm fib\n>>> fib.fib(10)\n89\n>>> spam = load_module('http://localhost:15000/spam.py')\nI'm spam\n>>> spam.hello('Guido')\nHello Guido\n>>> fib\n<module 'http://localhost:15000/fib.py' from 'http://localhost:15000/fib.py'>\n>>> spam\n<module 'http://localhost:15000/spam.py' from 'http://localhost:15000/spam.py'>\n>>>\n"],["body","\n"],["body","正如你所见，对于简单的模块这个是行得通的。 不过它并没有嵌入到通常的import语句中，如果要支持更高级的结构比如包就需要更多的工作了。"],["body","\n"],["body","一个更酷的做法是创建一个自定义导入器。第一种方法是创建一个元路径导入器。如下："],["body","\n"],["body","# urlimport.py\nimport sys\nimport importlib.abc\nimport imp\nfrom urllib.request import urlopen\nfrom urllib.error import HTTPError, URLError\nfrom html.parser import HTMLParser\n\n# Debugging\nimport logging\nlog = logging.getLogger(__name__)\n\n# Get links from a given URL\ndef _get_links(url):\n    class LinkParser(HTMLParser):\n        def handle_starttag(self, tag, attrs):\n            if tag == 'a':\n                attrs = dict(attrs)\n                links.add(attrs.get('href').rstrip('/'))\n    links = set()\n    try:\n        log.debug('Getting links from %s' % url)\n        u = urlopen(url)\n        parser = LinkParser()\n        parser.feed(u.read().decode('utf-8'))\n    except Exception as e:\n        log.debug('Could not get links. %s', e)\n    log.debug('links: %r', links)\n    return links\n\nclass UrlMetaFinder(importlib.abc.MetaPathFinder):\n    def __init__(self, baseurl):\n        self._baseurl = baseurl\n        self._links = { }\n        self._loaders = { baseurl : UrlModuleLoader(baseurl) }\n\n    def find_module(self, fullname, path=None):\n        log.debug('find_module: fullname=%r, path=%r', fullname, path)\n        if path is None:\n            baseurl = self._baseurl\n        else:\n            if not path[0].startswith(self._baseurl):\n                return None\n            baseurl = path[0]\n        parts = fullname.split('.')\n        basename = parts[-1]\n        log.debug('find_module: baseurl=%r, basename=%r', baseurl, basename)\n\n        # Check link cache\n        if basename not in self._links:\n            self._links[baseurl] = _get_links(baseurl)\n\n        # Check if it's a package\n        if basename in self._links[baseurl]:\n            log.debug('find_module: trying package %r', fullname)\n            fullurl = self.base_url + '/' + basename\n            # Attempt to load the package (which accesses __init__.py)\n            loader = UrlPackageLoader(fullurl)\n            try:\n                loader.load_module(fullname)\n                self._links[fullurl] = _get_links(fullurl)\n                self._loaders[fullurl] = UrlModuleLoader(fullurl)\n                log.debug('find_module: package %r loaded', fullname)\n            except ImportError as e:\n                log.debug('find_module: package failed. %s', e)\n                loader = None\n            return loader\n        # A normal module\n        filename = basename + '.py'\n        if filename in self._links[baseurl]:\n            log.debug('find_module: module %r found', fullname)\n            return self._loaders[baseurl]\n        else:\n            log.debug('find_module: module %r not found', fullname)\n            return None\n\n    def invalidate_caches(self):\n        log.debug('invalidating link cache')\n        self._links.clear()\n\n# Module Loader for a URL\nclass UrlModuleLoader(importlib.abc.SourceLoader):\n    def __init__(self, baseurl):\n        self._baseurl = baseurl\n        self._source_cache = {}\n\n    def module_repr(self, module):\n        return '<urlmodule %r from %r>' % (module.__name__, module.__file__)\n\n    # Required method\n    def load_module(self, fullname):\n        code = self.get_code(fullname)\n        mod = sys.modules.setdefault(fullname, imp.new_module(fullname))\n        mod.__file__ = self.get_filename(fullname)\n        mod.__loader__ = self\n        mod.__package__ = fullname.rpartition('.')[0]\n        exec(code, mod.__dict__)\n        return mod\n\n    # Optional extensions\n    def get_code(self, fullname):\n        src = self.get_source(fullname)\n        return compile(src, self.get_filename(fullname), 'exec')\n\n    def get_data(self, path):\n        pass\n\n    def get_filename(self, fullname):\n        return self._baseurl + '/' + fullname.split('.')[-1] + '.py'\n\n    def get_source(self, fullname):\n        filename = self.get_filename(fullname)\n        log.debug('loader: reading %r', filename)\n        if filename in self._source_cache:\n            log.debug('loader: cached %r', filename)\n            return self._source_cache[filename]\n        try:\n            u = urlopen(filename)\n            source = u.read().decode('utf-8')\n            log.debug('loader: %r loaded', filename)\n            self._source_cache[filename] = source\n            return source\n        except (HTTPError, URLError) as e:\n            log.debug('loader: %r failed. %s', filename, e)\n            raise ImportError(\"Can't load %s\" % filename)\n\n    def is_package(self, fullname):\n        return False\n\n# Package loader for a URL\nclass UrlPackageLoader(UrlModuleLoader):\n    def load_module(self, fullname):\n        mod = super().load_module(fullname)\n        mod.__path__ = [ self._baseurl ]\n        mod.__package__ = fullname\n\n    def get_filename(self, fullname):\n        return self._baseurl + '/' + '__init__.py'\n\n    def is_package(self, fullname):\n        return True\n\n# Utility functions for installing/uninstalling the loader\n_installed_meta_cache = { }\ndef install_meta(address):\n    if address not in _installed_meta_cache:\n        finder = UrlMetaFinder(address)\n        _installed_meta_cache[address] = finder\n        sys.meta_path.append(finder)\n        log.debug('%r installed on sys.meta_path', finder)\n\ndef remove_meta(address):\n    if address in _installed_meta_cache:\n        finder = _installed_meta_cache.pop(address)\n        sys.meta_path.remove(finder)\n        log.debug('%r removed from sys.meta_path', finder)\n"],["body","\n"],["body","下面是一个交互会话，演示了如何使用前面的代码："],["body","\n"],["body",">>> # importing currently fails\n>>> import fib\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nImportError: No module named 'fib'\n>>> # Load the importer and retry (it works)\n>>> import urlimport\n>>> urlimport.install_meta('http://localhost:15000')\n>>> import fib\nI'm fib\n>>> import spam\nI'm spam\n>>> import grok.blah\nI'm grok.__init__\nI'm grok.blah\n>>> grok.blah.__file__\n'http://localhost:15000/grok/blah.py'\n>>>\n"],["body","\n"],["body","这个特殊的方案会安装一个特别的查找器 UrlMetaFinder 实例， 作为 sys.meta_path 中最后的实体。 当模块被导入时，会依据 sys.meta_path 中的查找器定位模块。 在这个例子中，UrlMetaFinder 实例是最后一个查找器方案， 当模块在任何一个普通地方都找不到的时候就触发它。"],["body","\n"],["body","作为常见的实现方案，UrlMetaFinder 类包装在一个用户指定的URL上。 在内部，查找器通过抓取指定URL的内容构建合法的链接集合。 导入的时候，模块名会跟已有的链接作对比。如果找到了一个匹配的， 一个单独的 UrlModuleLoader 类被用来从远程机器上加载源代码并创建最终的模块对象。 这里缓存链接的一个原因是避免不必要的HTTP请求重复导入。"],["body","\n"],["body","自定义导入的第二种方法是编写一个钩子直接嵌入到 sys.path 变量中去， 识别某些目录命名模式。 在 urlimport.py 中添加如下的类和支持函数："],["body","\n"],["body","# urlimport.py\n# ... include previous code above ...\n# Path finder class for a URL\nclass UrlPathFinder(importlib.abc.PathEntryFinder):\n    def __init__(self, baseurl):\n        self._links = None\n        self._loader = UrlModuleLoader(baseurl)\n        self._baseurl = baseurl\n\n    def find_loader(self, fullname):\n        log.debug('find_loader: %r', fullname)\n        parts = fullname.split('.')\n        basename = parts[-1]\n        # Check link cache\n        if self._links is None:\n            self._links = [] # See discussion\n            self._links = _get_links(self._baseurl)\n\n        # Check if it's a package\n        if basename in self._links:\n            log.debug('find_loader: trying package %r', fullname)\n            fullurl = self._baseurl + '/' + basename\n            # Attempt to load the package (which accesses __init__.py)\n            loader = UrlPackageLoader(fullurl)\n            try:\n                loader.load_module(fullname)\n                log.debug('find_loader: package %r loaded', fullname)\n            except ImportError as e:\n                log.debug('find_loader: %r is a namespace package', fullname)\n                loader = None\n            return (loader, [fullurl])\n\n        # A normal module\n        filename = basename + '.py'\n        if filename in self._links:\n            log.debug('find_loader: module %r found', fullname)\n            return (self._loader, [])\n        else:\n            log.debug('find_loader: module %r not found', fullname)\n            return (None, [])\n\n    def invalidate_caches(self):\n        log.debug('invalidating link cache')\n        self._links = None\n\n# Check path to see if it looks like a URL\n_url_path_cache = {}\ndef handle_url(path):\n    if path.startswith(('http://', 'https://')):\n        log.debug('Handle path? %s. [Yes]', path)\n        if path in _url_path_cache:\n            finder = _url_path_cache[path]\n        else:\n            finder = UrlPathFinder(path)\n            _url_path_cache[path] = finder\n        return finder\n    else:\n        log.debug('Handle path? %s. [No]', path)\n\ndef install_path_hook():\n    sys.path_hooks.append(handle_url)\n    sys.path_importer_cache.clear()\n    log.debug('Installing handle_url')\n\ndef remove_path_hook():\n    sys.path_hooks.remove(handle_url)\n    sys.path_importer_cache.clear()\n    log.debug('Removing handle_url')\n"],["body","\n"],["body","要使用这个路径查找器，你只需要在 sys.path 中加入URL链接。例如："],["body","\n"],["body",">>> # Initial import fails\n>>> import fib\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nImportError: No module named 'fib'\n\n>>> # Install the path hook\n>>> import urlimport\n>>> urlimport.install_path_hook()\n\n>>> # Imports still fail (not on path)\n>>> import fib\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nImportError: No module named 'fib'\n\n>>> # Add an entry to sys.path and watch it work\n>>> import sys\n>>> sys.path.append('http://localhost:15000')\n>>> import fib\nI'm fib\n>>> import grok.blah\nI'm grok.__init__\nI'm grok.blah\n>>> grok.blah.__file__\n'http://localhost:15000/grok/blah.py'\n>>>\n"],["body","\n"],["body","关键点就是 handle_url() 函数，它被添加到了 sys.path_hooks 变量中。 当 sys.path 的实体被处理时，会调用 sys.path_hooks 中的函数。 如果任何一个函数返回了一个查找器对象，那么这个对象就被用来为 sys.path 实体加载模块。"],["body","\n"],["body","远程模块加载跟其他的加载使用方法几乎是一样的。例如："],["body","\n"],["body",">>> fib\n<urlmodule 'fib' from 'http://localhost:15000/fib.py'>\n>>> fib.__name__\n'fib'\n>>> fib.__file__\n'http://localhost:15000/fib.py'\n>>> import inspect\n>>> print(inspect.getsource(fib))\n# fib.py\nprint(\"I'm fib\")\n\ndef fib(n):\n    if n < 2:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n>>>\n"],["body","\n"],["headingLink","讨论-10"],["heading","讨论"],["body","\n"],["body","在详细讨论之前，有点要强调的是，Python的模块、包和导入机制是整个语言中最复杂的部分， 即使经验丰富的Python程序员也很少能精通它们。 我在这里推荐一些值的去读的文档和书籍，包括 importlib module 和 PEP 302. 文档内容在这里不会被重复提到，不过我在这里会讨论一些最重要的部分。"],["body","\n"],["body","首先，如果你想创建一个新的模块对象，使用 imp.new_module() 函数："],["body","\n"],["body",">>> import imp\n>>> m = imp.new_module('spam')\n>>> m\n<module 'spam'>\n>>> m.__name__\n'spam'\n>>>\n"],["body","\n"],["body","模块对象通常有一些期望属性，包括 __file__ （运行模块加载语句的文件名） 和 __package__ (包名)。"],["body","\n"],["body","其次，模块会被解释器缓存起来。模块缓存可以在字典 sys.modules 中被找到。 因为有了这个缓存机制，通常可以将缓存和模块的创建通过一个步骤完成："],["body","\n"],["body",">>> import sys\n>>> import imp\n>>> m = sys.modules.setdefault('spam', imp.new_module('spam'))\n>>> m\n<module 'spam'>\n>>>\n"],["body","\n"],["body","如果给定模块已经存在那么就会直接获得已经被创建过的模块，例如："],["body","\n"],["body",">>> import math\n>>> m = sys.modules.setdefault('math', imp.new_module('math'))\n>>> m\n<module 'math' from '/usr/local/lib/python3.3/lib-dynload/math.so'>\n>>> m.sin(2)\n0.9092974268256817\n>>> m.cos(2)\n-0.4161468365471424\n>>>\n"],["body","\n"],["body","由于创建模块很简单，很容易编写简单函数比如第一部分的 load_module() 函数。 这个方案的一个缺点是很难处理复杂情况比如包的导入。 为了处理一个包，你要重新实现普通import语句的底层逻辑（比如检查目录，查找__init__.py文件， 执行那些文件，设置路径等）。这个复杂性就是为什么最好直接扩展import语句而不是自定义函数的一个原因。"],["body","\n"],["body","扩展import语句很简单，但是会有很多移动操作。 最高层上，导入操作被一个位于sys.meta_path列表中的“元路径”查找器处理。 如果你输出它的值，会看到下面这样："],["body","\n"],["body",">>> from pprint import pprint\n>>> pprint(sys.meta_path)\n[<class '_frozen_importlib.BuiltinImporter'>,\n<class '_frozen_importlib.FrozenImporter'>,\n<class '_frozen_importlib.PathFinder'>]\n>>>\n"],["body","\n"],["body","当执行一个语句比如 import fib 时，解释器会遍历sys.mata_path中的查找器对象， 调用它们的 find_module() 方法定位正确的模块加载器。 可以通过实验来看看："],["body","\n"],["body",">>> class Finder:\n...     def find_module(self, fullname, path):\n...         print('Looking for', fullname, path)\n...         return None\n...\n>>> import sys\n>>> sys.meta_path.insert(0, Finder()) # Insert as first entry\n>>> import math\nLooking for math None\n>>> import types\nLooking for types None\n>>> import threading\nLooking for threading None\nLooking for time None\nLooking for traceback None\nLooking for linecache None\nLooking for tokenize None\nLooking for token None\n>>>\n"],["body","\n"],["body","注意看 find_module() 方法是怎样在每一个导入就被触发的。 这个方法中的path参数的作用是处理包。 多个包被导入，就是一个可在包的 __path__ 属性中找到的路径列表。 要找到包的子组件就要检查这些路径。 比如注意对于 xml.etree 和 xml.etree.ElementTree 的路径配置："],["body","\n"],["body",">>> import xml.etree.ElementTree\nLooking for xml None\nLooking for xml.etree ['/usr/local/lib/python3.3/xml']\nLooking for xml.etree.ElementTree ['/usr/local/lib/python3.3/xml/etree']\nLooking for warnings None\nLooking for contextlib None\nLooking for xml.etree.ElementPath ['/usr/local/lib/python3.3/xml/etree']\nLooking for _elementtree None\nLooking for copy None\nLooking for org None\nLooking for pyexpat None\nLooking for ElementC14N None\n>>>\n"],["body","\n"],["body","在 sys.meta_path 上查找器的位置很重要，将它从队头移到队尾，然后再试试导入看："],["body","\n"],["body",">>> del sys.meta_path[0]\n>>> sys.meta_path.append(Finder())\n>>> import urllib.request\n>>> import datetime\n"],["body","\n"],["body","现在你看不到任何输出了，因为导入被sys.meta_path中的其他实体处理。 这时候，你只有在导入不存在模块的时候才能看到它被触发："],["body","\n"],["body",">>> import fib\nLooking for fib None\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nImportError: No module named 'fib'\n>>> import xml.superfast\nLooking for xml.superfast ['/usr/local/lib/python3.3/xml']\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nImportError: No module named 'xml.superfast'\n>>>\n"],["body","\n"],["body","你之前安装过一个捕获未知模块的查找器，这个是 UrlMetaFinder 类的关键。 一个 UrlMetaFinder 实例被添加到 sys.meta_path 的末尾，作为最后一个查找器方案。 如果被请求的模块名不能定位，就会被这个查找器处理掉。 处理包的时候需要注意，在path参数中指定的值需要被检查，看它是否以查找器中注册的URL开头。 如果不是，该子模块必须归属于其他查找器并被忽略掉。"],["body","\n"],["body","对于包的其他处理可在 UrlPackageLoader 类中被找到。 这个类不会导入包名，而是去加载对应的 __init__.py 文件。 它也会设置模块的 __path__ 属性，这一步很重要， 因为在加载包的子模块时这个值会被传给后面的 find_module() 调用。 基于路径的导入钩子是这些思想的一个扩展，但是采用了另外的方法。 我们都知道，sys.path 是一个Python查找模块的目录列表，例如："],["body","\n"],["body",">>> from pprint import pprint\n>>> import sys\n>>> pprint(sys.path)\n['',\n'/usr/local/lib/python33.zip',\n'/usr/local/lib/python3.3',\n'/usr/local/lib/python3.3/plat-darwin',\n'/usr/local/lib/python3.3/lib-dynload',\n'/usr/local/lib/...3.3/site-packages']\n>>>\n"],["body","\n"],["body","在 sys.path 中的每一个实体都会被额外的绑定到一个查找器对象上。 你可以通过查看 sys.path_importer_cache 去看下这些查找器："],["body","\n"],["body",">>> pprint(sys.path_importer_cache)\n{'.': FileFinder('.'),\n'/usr/local/lib/python3.3': FileFinder('/usr/local/lib/python3.3'),\n'/usr/local/lib/python3.3/': FileFinder('/usr/local/lib/python3.3/'),\n'/usr/local/lib/python3.3/collections': FileFinder('...python3.3/collections'),\n'/usr/local/lib/python3.3/encodings': FileFinder('...python3.3/encodings'),\n'/usr/local/lib/python3.3/lib-dynload': FileFinder('...python3.3/lib-dynload'),\n'/usr/local/lib/python3.3/plat-darwin': FileFinder('...python3.3/plat-darwin'),\n'/usr/local/lib/python3.3/site-packages': FileFinder('...python3.3/site-packages'),\n'/usr/local/lib/python33.zip': None}\n>>>\n"],["body","\n"],["body","sys.path_importer_cache 比 sys.path 会更大点， 因为它会为所有被加载代码的目录记录它们的查找器。 这包括包的子目录，这些通常在 sys.path 中是不存在的。"],["body","\n"],["body","要执行 import fib ，会顺序检查 sys.path 中的目录。 对于每个目录，名称“fib”会被传给相应的 sys.path_importer_cache 中的查找器。 这个可以让你创建自己的查找器并在缓存中放入一个实体。试试这个："],["body","\n"],["body",">>> class Finder:\n... def find_loader(self, name):\n...     print('Looking for', name)\n...     return (None, [])\n...\n>>> import sys\n>>> # Add a \"debug\" entry to the importer cache\n>>> sys.path_importer_cache['debug'] = Finder()\n>>> # Add a \"debug\" directory to sys.path\n>>> sys.path.insert(0, 'debug')\n>>> import threading\nLooking for threading\nLooking for time\nLooking for traceback\nLooking for linecache\nLooking for tokenize\nLooking for token\n>>>\n"],["body","\n"],["body","在这里，你可以为名字“debug”创建一个新的缓存实体并将它设置成 sys.path 上的第一个。 在所有接下来的导入中，你会看到你的查找器被触发了。 不过，由于它返回 (None, [])，那么处理进程会继续处理下一个实体。"],["body","\n"],["body","sys.path_importer_cache 的使用被一个存储在 sys.path_hooks 中的函数列表控制。 试试下面的例子，它会清除缓存并给 sys.path_hooks 添加一个新的路径检查函数"],["body","\n"],["body",">>> sys.path_importer_cache.clear()\n>>> def check_path(path):\n...     print('Checking', path)\n...     raise ImportError()\n...\n>>> sys.path_hooks.insert(0, check_path)\n>>> import fib\nChecked debug\nChecking .\nChecking /usr/local/lib/python33.zip\nChecking /usr/local/lib/python3.3\nChecking /usr/local/lib/python3.3/plat-darwin\nChecking /usr/local/lib/python3.3/lib-dynload\nChecking /Users/beazley/.local/lib/python3.3/site-packages\nChecking /usr/local/lib/python3.3/site-packages\nLooking for fib\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nImportError: No module named 'fib'\n>>>\n"],["body","\n"],["body","正如你所见，check_path() 函数被每个 sys.path 中的实体调用。 不顾，由于抛出了 ImportError 异常， 啥都不会发生了（仅仅将检查转移到sys.path_hooks的下一个函数）。"],["body","\n"],["body","知道了怎样sys.path是怎样被处理的，你就能构建一个自定义路径检查函数来查找文件名，不然URL。例如："],["body","\n"],["body",">>> def check_url(path):\n...     if path.startswith('http://'):\n...         return Finder()\n...     else:\n...         raise ImportError()\n...\n>>> sys.path.append('http://localhost:15000')\n>>> sys.path_hooks[0] = check_url\n>>> import fib\nLooking for fib # Finder output!\nTraceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\nImportError: No module named 'fib'\n\n>>> # Notice installation of Finder in sys.path_importer_cache\n>>> sys.path_importer_cache['http://localhost:15000']\n<__main__.Finder object at 0x10064c850>\n>>>\n"],["body","\n"],["body","这就是本节最后部分的关键点。事实上，一个用来在sys.path中查找URL的自定义路径检查函数已经构建完毕。 当它们被碰到的时候，一个新的 UrlPathFinder 实例被创建并被放入 sys.path_importer_cache. 之后，所有需要检查 sys.path 的导入语句都会使用你的自定义查找器。"],["body","\n"],["body","基于路径导入的包处理稍微有点复杂，并且跟 find_loader() 方法返回值有关。 对于简单模块，find_loader() 返回一个元组(loader, None)， 其中的loader是一个用于导入模块的加载器实例。"],["body","\n"],["body","对于一个普通的包，find_loader() 返回一个元组(loader, path)， 其中的loader是一个用于导入包（并执行__init__.py）的加载器实例， path是一个会初始化包的 __path__ 属性的目录列表。 例如，如果基础URL是 http://localhost:15000 并且一个用户执行 import grok , 那么 find_loader() 返回的path就会是 [ ‘http://localhost:15000/grok’ ]"],["body","\n"],["body","find_loader() 还要能处理一个命名空间包。 一个命名空间包中有一个合法的包目录名，但是不存在__init__.py文件。 这样的话，find_loader() 必须返回一个元组(None, path)， path是一个目录列表，由它来构建包的定义有__init__.py文件的__path__属性。 对于这种情况，导入机制会继续前行去检查sys.path中的目录。 如果找到了命名空间包，所有的结果路径被加到一起来构建最终的命名空间包。 关于命名空间包的更多信息请参考10.5小节。"],["body","\n"],["body","所有的包都包含了一个内部路径设置，可以在__path__属性中看到，例如："],["body","\n"],["body",">>> import xml.etree.ElementTree\n>>> xml.__path__\n['/usr/local/lib/python3.3/xml']\n>>> xml.etree.__path__\n['/usr/local/lib/python3.3/xml/etree']\n>>>\n"],["body","\n"],["body","之前提到，__path__的设置是通过 find_loader() 方法返回值控制的。 不过，__path__接下来也被sys.path_hooks中的函数处理。 因此，但包的子组件被加载后，位于__path__中的实体会被 handle_url() 函数检查。 这会导致新的 UrlPathFinder 实例被创建并且被加入到 sys.path_importer_cache 中。"],["body","\n"],["body","还有个难点就是 handle_url() 函数以及它跟内部使用的 _get_links() 函数之间的交互。 如果你的查找器实现需要使用到其他模块（比如urllib.request）， 有可能这些模块会在查找器操作期间进行更多的导入。 它可以导致 handle_url() 和其他查找器部分陷入一种递归循环状态。 为了解释这种可能性，实现中有一个被创建的查找器缓存（每一个URL一个）。 它可以避免创建重复查找器的问题。 另外，下面的代码片段可以确保查找器不会在初始化链接集合的时候响应任何导入请求："],["body","\n"],["body","# Check link cache\nif self._links is None:\n    self._links = [] # See discussion\n    self._links = _get_links(self._baseurl)\n"],["body","\n"],["body","最后，查找器的 invalidate_caches() 方法是一个工具方法，用来清理内部缓存。 这个方法再用户调用 importlib.invalidate_caches() 的时候被触发。 如果你想让URL导入者重新读取链接列表的话可以使用它。"],["body","\n"],["body","对比下两种方案（修改sys.meta_path或使用一个路径钩子）。 使用sys.meta_path的导入者可以按照自己的需要自由处理模块。 例如，它们可以从数据库中导入或以不同于一般模块/包处理方式导入。 这种自由同样意味着导入者需要自己进行内部的一些管理。 另外，基于路径的钩子只是适用于对sys.path的处理。 通过这种扩展加载的模块跟普通方式加载的特性是一样的。"],["body","\n"],["body","如果到现在为止你还是不是很明白，那么可以通过增加一些日志打印来测试下本节。像下面这样："],["body","\n"],["body",">>> import logging\n>>> logging.basicConfig(level=logging.DEBUG)\n>>> import urlimport\n>>> urlimport.install_path_hook()\nDEBUG:urlimport:Installing handle_url\n>>> import fib\nDEBUG:urlimport:Handle path? /usr/local/lib/python33.zip. [No]\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nImportError: No module named 'fib'\n>>> import sys\n>>> sys.path.append('http://localhost:15000')\n>>> import fib\nDEBUG:urlimport:Handle path? http://localhost:15000. [Yes]\nDEBUG:urlimport:Getting links from http://localhost:15000\nDEBUG:urlimport:links: {'spam.py', 'fib.py', 'grok'}\nDEBUG:urlimport:find_loader: 'fib'\nDEBUG:urlimport:find_loader: module 'fib' found\nDEBUG:urlimport:loader: reading 'http://localhost:15000/fib.py'\nDEBUG:urlimport:loader: 'http://localhost:15000/fib.py' loaded\nI'm fib\n>>>\n"],["body","\n"],["body","最后，建议你花点时间看看 PEP 302 以及importlib的文档。"],["body","\n"],["headingLink","导入模块的同时修改模块"],["heading","导入模块的同时修改模块"],["body","\n"],["headingLink","问题-10"],["heading","问题"],["body","\n"],["body","你想给某个已存在模块中的函数添加装饰器。 不过，前提是这个模块已经被导入并且被使用过。"],["body","\n"],["headingLink","解决方案-10"],["heading","解决方案"],["body","\n"],["body","这里问题的本质就是你想在模块被加载时执行某个动作。 可能是你想在一个模块被加载时触发某个回调函数来通知你。"],["body","\n"],["body","这个问题可以使用10.11小节中同样的导入钩子机制来实现。下面是一个可能的方案："],["body","\n"],["body","# postimport.py\nimport importlib\nimport sys\nfrom collections import defaultdict\n\n_post_import_hooks = defaultdict(list)\n\nclass PostImportFinder:\n    def __init__(self):\n        self._skip = set()\n\n    def find_module(self, fullname, path=None):\n        if fullname in self._skip:\n            return None\n        self._skip.add(fullname)\n        return PostImportLoader(self)\n\nclass PostImportLoader:\n    def __init__(self, finder):\n        self._finder = finder\n\n    def load_module(self, fullname):\n        importlib.import_module(fullname)\n        module = sys.modules[fullname]\n        for func in _post_import_hooks[fullname]:\n            func(module)\n        self._finder._skip.remove(fullname)\n        return module\n\ndef when_imported(fullname):\n    def decorate(func):\n        if fullname in sys.modules:\n            func(sys.modules[fullname])\n        else:\n            _post_import_hooks[fullname].append(func)\n        return func\n    return decorate\n\nsys.meta_path.insert(0, PostImportFinder())\n"],["body","\n"],["body","这样，你就可以使用 when_imported() 装饰器了，例如："],["body","\n"],["body",">>> from postimport import when_imported\n>>> @when_imported('threading')\n... def warn_threads(mod):\n...     print('Threads? Are you crazy?')\n...\n>>>\n>>> import threading\nThreads? Are you crazy?\n>>>\n"],["body","\n"],["body","作为一个更实际的例子，你可能想在已存在的定义上面添加装饰器，如下所示："],["body","\n"],["body","from functools import wraps\nfrom postimport import when_imported\n\ndef logged(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        print('Calling', func.__name__, args, kwargs)\n        return func(*args, **kwargs)\n    return wrapper\n\n# Example\n@when_imported('math')\ndef add_logging(mod):\n    mod.cos = logged(mod.cos)\n    mod.sin = logged(mod.sin)\n"],["body","\n"],["headingLink","讨论-11"],["heading","讨论"],["body","\n"],["body","本节技术依赖于10.11小节中讲述过的导入钩子，并稍作修改。"],["body","\n"],["body","@when_imported 装饰器的作用是注册在导入时被激活的处理器函数。 该装饰器检查sys.modules来查看模块是否真的已经被加载了。 如果是的话，该处理器被立即调用。不然，处理器被添加到 _post_import_hooks 字典中的一个列表中去。 _post_import_hooks 的作用就是收集所有的为每个模块注册的处理器对象。 一个模块可以注册多个处理器。"],["body","\n"],["body","要让模块导入后触发添加的动作，PostImportFinder 类被设置为sys.meta_path第一个元素。 它会捕获所有模块导入操作。"],["body","\n"],["body","本节中的 PostImportFinder 的作用并不是加载模块，而是自带导入完成后触发相应的动作。 实际的导入被委派给位于sys.meta_path中的其他查找器。 PostImportLoader 类中的 imp.import_module() 函数被递归的调用。 为了避免陷入无线循环，PostImportFinder 保持了一个所有被加载过的模块集合。 如果一个模块名存在就会直接被忽略掉。"],["body","\n"],["body","当一个模块被 imp.import_module() 加载后， 所有在_post_import_hooks被注册的处理器被调用，使用新加载模块作为一个参数。"],["body","\n"],["body","有一点需要注意的是本机不适用于那些通过 imp.reload() 被显式加载的模块。 也就是说，如果你加载一个之前已被加载过的模块，那么导入处理器将不会再被触发。 另外，要是你从sys.modules中删除模块然后再重新导入，处理器又会再一次触发。"],["body","\n"],["body","更多关于导入后钩子信息请参考 PEP 369."],["body","\n"],["headingLink","安装私有的包"],["heading","安装私有的包"],["body","\n"],["headingLink","问题-11"],["heading","问题"],["body","\n"],["body","你想要安装一个第三方包，但是没有权限将它安装到系统Python库中去。 或者，你可能想要安装一个供自己使用的包，而不是系统上面所有用户。"],["body","\n"],["headingLink","解决方案-11"],["heading","解决方案"],["body","\n"],["body","Python有一个用户安装目录，通常类似”~/.local/lib/python3.3/site-packages”。 要强制在这个目录中安装包，可使用安装选项“–user”。例如："],["body","\n"],["body","python3 setup.py install --user\n"],["body","\n"],["body","或者"],["body","\n"],["body","pip install --user packagename\n"],["body","\n"],["body","在sys.path中用户的“site-packages”目录位于系统的“site-packages”目录之前。 因此，你安装在里面的包就比系统已安装的包优先级高 （尽管并不总是这样，要取决于第三方包管理器，比如distribute或pip）。"],["body","\n"],["headingLink","讨论-12"],["heading","讨论"],["body","\n\n"],["body","通常包会被安装到系统的site-packages目录中去，路径类似“/usr/local/lib/python3.3/site-packages”。"],["body","\n"],["body","不过，这样做需要有管理员权限并且使用sudo命令。 就算你有这样的权限去执行命令，使用sudo去安装一个新的，可能没有被验证过的包有时候也不安全。"],["body","\n"],["body","安装包到用户目录中通常是一个有效的方案，它允许你创建一个自定义安装。"],["body","\n\n"],["body","另外，你还可以创建一个虚拟环境，这个我们在下一节会讲到。"],["body","\n"],["headingLink","创建新的python环境"],["heading","创建新的Python环境"],["body","\n"],["headingLink","问题-12"],["heading","问题"],["body","\n"],["body","你想创建一个新的Python环境，用来安装模块和包。 不过，你不想安装一个新的Python克隆，也不想对系统Python环境产生影响。"],["body","\n"],["headingLink","解决方案-12"],["heading","解决方案"],["body","\n"],["body","你可以使用 pyvenv 命令创建一个新的“虚拟”环境。 这个命令被安装在Python解释器同一目录，或Windows上面的Scripts目录中。下面是一个例子："],["body","\n"],["body","bash % pyvenv Spam\nbash %\n"],["body","\n"],["body","传给 pyvenv 命令的名字是将要被创建的目录名。当被创建后，Span目录像下面这样："],["body","\n"],["body","bash % cd Spam\nbash % ls\nbin include lib pyvenv.cfg\nbash %\n"],["body","\n"],["body","在bin目录中，你会找到一个可以使用的Python解释器："],["body","\n"],["body","bash % Spam/bin/python3\nPython 3.3.0 (default, Oct 6 2012, 15:45:22)\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from pprint import pprint\n>>> import sys\n>>> pprint(sys.path)\n['',\n'/usr/local/lib/python33.zip',\n'/usr/local/lib/python3.3',\n'/usr/local/lib/python3.3/plat-darwin',\n'/usr/local/lib/python3.3/lib-dynload',\n'/Users/beazley/Spam/lib/python3.3/site-packages']\n>>>\n"],["body","\n"],["body","这个解释器的特点就是他的site-packages目录被设置为新创建的环境。 如果你要安装第三方包，它们会被安装在那里，而不是通常系统的site-packages目录。"],["body","\n"],["headingLink","讨论-13"],["heading","讨论"],["body","\n\n"],["body","\n"],["body","创建虚拟环境通常是为了安装和管理第三方包。 正如你在例子中看到的那样，sys.path 变量包含来自于系统Python的目录， 而 site-packages目录已经被重定位到一个新的目录。"],["body","\n"],["body","\n"],["body","\n"],["body","有了一个新的虚拟环境，下一步就是安装一个包管理器，比如distribute或pip。 但安装这样的工具和包的时候，你需要确保你使用的是虚拟环境的解释器。 它会将包安装到新创建的site-packages目录中去。"],["body","\n"],["body","\n"],["body","\n"],["body","尽管一个虚拟环境看上去是Python安装的一个复制， 不过它实际上只包含了少量几个文件和一些符号链接。 所有标准库函文件和可执行解释器都来自原来的Python安装。 因此，创建这样的环境是很容易的，并且几乎不会消耗机器资源。"],["body","\n"],["body","\n\n"],["body","默认情况下，虚拟环境是空的，不包含任何额外的第三方库。如果你想将一个已经安装的包作为虚拟环境的一部分， 可以使用“–system-site-packages”选项来创建虚拟环境，例如："],["body","\n"],["body","bash % pyvenv --system-site-packages Spam\nbash %\n"],["body","\n"],["body","跟多关于 pyvenv 和虚拟环境的信息可以参考 PEP 405."],["body","\n"],["headingLink","分发包"],["heading","分发包"],["body","\n"],["headingLink","问题-13"],["heading","问题"],["body","\n"],["body","你已经编写了一个有用的库，想将它分享给其他人。"],["body","\n"],["headingLink","解决方案-13"],["heading","解决方案"],["body","\n"],["body","如果你想分发你的代码，第一件事就是给它一个唯一的名字，并且清理它的目录结构。 例如，一个典型的函数库包会类似下面这样："],["body","\n"],["body","projectname/\n    README.txt\n    Doc/\n        documentation.txt\n    projectname/\n        __init__.py\n        foo.py\n        bar.py\n        utils/\n            __init__.py\n            spam.py\n            grok.py\n    examples/\n        helloworld.py\n        ...\n"],["body","\n"],["body","要让你的包可以发布出去，首先你要编写一个 setup.py ，类似下面这样："],["body","\n"],["body","# setup.py\nfrom distutils.core import setup\n\nsetup(name='projectname',\n    version='1.0',\n    author='Your Name',\n    author_email='you@youraddress.com',\n    url='http://www.you.com/projectname',\n    packages=['projectname', 'projectname.utils'],\n)\n"],["body","\n"],["body","下一步，就是创建一个 MANIFEST.in 文件，列出所有在你的包中需要包含进来的非源码文件："],["body","\n"],["body","# MANIFEST.in\ninclude *.txt\nrecursive-include examples *\nrecursive-include Doc *\n"],["body","\n"],["body","确保 setup.py 和 MANIFEST.in 文件放在你的包的最顶级目录中。 一旦你已经做了这些，你就可以像下面这样执行命令来创建一个源码分发包了："],["body","\n"],["body","% bash python3 setup.py sdist\n"],["body","\n"],["body","它会创建一个文件比如”projectname-1.0.zip” 或 “projectname-1.0.tar.gz”, 具体依赖于你的系统平台。如果一切正常， 这个文件就可以发送给别人使用或者上传至 Python Package Index."],["body","\n"],["headingLink","讨论-14"],["heading","讨论"],["body","\n\n"],["body","\n"],["body","对于纯Python代码，编写一个普通的 setup.py 文件通常很简单。 一个可能的问题是你必须手动列出所有构成包源码的子目录。 一个常见错误就是仅仅只列出一个包的最顶级目录，忘记了包含包的子组件。"],["body","\n"],["body","\n"],["body","\n"],["body","这也是为什么在 setup.py 中对于包的说明包含了列表 packages=['projectname', 'projectname.utils']"],["body","\n"],["body","\n\n"],["body","大部分Python程序员都知道，有很多第三方包管理器供选择，包括setuptools、distribute等等。 有些是为了替代标准库中的distutils。"],["body","\n"],["body","注意如果你依赖这些包， 用户可能不能安装你的软件，除非他们已经事先安装过所需要的包管理器。 正因如此，你更应该时刻记住越简单越好的道理。"],["body","\n"],["body","最好让你的代码使用标准的Python 3安装。 如果其他包也需要的话，可以通过一个可选项来支持。"],["body","\n"],["body","对于涉及到C扩展的代码打包与分发就更复杂点了。 第15章对关于C扩展的这方面知识有一些详细讲解，特别是在15.2小节中。"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/1.python3基础语法.html"],["title","python3基础语法.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","编码"],["heading","编码"],["body","\n"],["body","默认情况下，Python 3 源码文件以 UTF-8 编码，所有字符串都是 unicode 字符串。 当然你也可以为源码文件指定不同的编码："],["body","\n"],["body","# -*- coding: cp-1252 -*-\n"],["body","\n"],["headingLink","标识符"],["heading","标识符"],["body","\n\n"],["body","第一个字符必须是字母表中字母或下划线 _ 。"],["body","\n"],["body","标识符的其他的部分由字母、数字和下划线组成。"],["body","\n"],["body","标识符对大小写敏感。"],["body","\n\n"],["body","在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。"],["body","\n"],["headingLink","python保留字"],["heading","python保留字"],["body","\n"],["body","保留字即关键字，我们不能把它们用作任何标识符名称。Python 的标准库提供了一个 keyword 模块，可以输出当前版本的所有关键字："],["body","\n"],["body",">>> import keyword\n>>> keyword.kwlist\n['False', 'None', 'True', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield']\n"],["body","\n"],["headingLink","注释"],["heading","注释"],["body","\n"],["body","Python中单行注释以 # 开头，实例如下："],["body","\n"],["body","多行注释可以用多个 # 号，还有 ''' 和 \"\"\"："],["body","\n"],["body","'''\n第三注释\n第四注释\n'''\n\n"],["body","\n"],["headingLink","行与缩进"],["heading","行与缩进"],["body","\n"],["body","python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。"],["body","\n"],["body","缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下："],["body","\n"],["body","if True:\n    print (\"True\")\nelse:\n    print (\"False\")\n"],["body","\n"],["body","Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 ** 来实现多行语句，例如："],["body","\n"],["body","total = item_one + \\\n        item_two + \\\n        item_three\n"],["body","\n"],["body","在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 ****，例如："],["body","\n"],["body","total = ['item_one', 'item_two', 'item_three',\n        'item_four', 'item_five']\n"],["body","\n"],["headingLink","数字number类型"],["heading","数字(Number)类型"],["body","\n"],["body","python中数字有四种类型：整数、布尔型、浮点数和复数。"],["body","\n\n"],["body","int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。"],["body","\n"],["body","bool (布尔), 如 True。"],["body","\n"],["body","float (浮点数), 如 1.23、3E-2"],["body","\n"],["body","complex (复数), 如 1 + 2j、 1.1 + 2.2j"],["body","\n\n"],["headingLink","字符串string"],["heading","字符串(String)"],["body","\n\n"],["body","Python 中单引号 ' 和双引号 \" 使用完全相同。"],["body","\n"],["body","使用三引号(''' 或 \"\"\")可以指定一个多行字符串。"],["body","\n"],["body","转义符 ****。"],["body","\n"],["body","反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 如 r\"this is a line with \\n\" 则 \\n 会显示，并不是换行。"],["body","\n"],["body","按字面意义级联字符串，如 \"this \" \"is \" \"string\" 会被自动转换为 this is string。"],["body","\n"],["body","字符串可以用 + 运算符连接在一起，用 ***** 运算符重复。"],["body","\n"],["body","Python 中的字符串有两种索引方式，从左往右以 0 开始，从右往左以 -1 开始。"],["body","\n"],["body","Python 中的字符串不能改变。"],["body","\n"],["body","Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。"],["body","\n"],["body","字符串的截取的语法格式如下：变量[头下标:尾下标:步长]   头下标是 inclusive，尾下标 是 exclusive"],["body","\n\n"],["headingLink","等待用户输入"],["heading","等待用户输入"],["body","\n"],["body","input(\"\\n\\n按下 enter 键后退出。\")\n"],["body","\n"],["headingLink","同一行显示多条语句"],["heading","同一行显示多条语句"],["body","\n"],["body","import sys; x = 'runoob'; sys.stdout.write(x + '\\n')\n"],["body","\n"],["headingLink","print-输出"],["heading","print 输出"],["body","\n"],["body"," \nx=\"a\"\ny=\"b\"\n# 换行输出\nprint( x )\nprint( y )\n \nprint('---------')\n# 不换行输出\nprint( x, end=\" \" )\nprint( y, end=\" \" )\nprint()\n"],["body","\n"],["headingLink","import-与-fromimport"],["heading","import 与 from...import"],["body","\n"],["body","在 python 用 import 或者 from...import 来导入相应的模块。"],["body","\n"],["body","将整个模块(somemodule)导入，格式为： import somemodule"],["body","\n"],["body","从某个模块中导入某个函数,格式为： from somemodule import somefunction"],["body","\n"],["body","从某个模块中导入多个函数,格式为： from somemodule import firstfunc, secondfunc, thirdfunc"],["body","\n"],["body","将某个模块中的全部函数导入，格式为： from somemodule import *"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/README.html"],["title","_python基础 - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["body","Python库"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/5.Python3运算符.html"],["title","Python3运算符.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-运算符"],["heading","Python3 运算符"],["body","\n"],["body","Python 语言支持以下类型的运算符:"],["body","\n\n"],["body","算术运算符"],["body","\n"],["body","比较（关系）运算符"],["body","\n"],["body","赋值运算符"],["body","\n"],["body","逻辑运算符"],["body","\n"],["body","位运算符"],["body","\n"],["body","成员运算符"],["body","\n"],["body","身份运算符"],["body","\n"],["body","运算符优先级"],["body","\n\n"],["headingLink","python算术运算符"],["heading","Python算术运算符"],["body","\n"],["body","运算符"],["body","描述"],["body","实例"],["body","\n"],["body","+"],["body","加 - 两个对象相加"],["body","a + b 输出结果 31"],["body","\n"],["body","-"],["body","减 - 得到负数或是一个数减去另一个数"],["body","a - b 输出结果 -11"],["body","\n"],["body","*"],["body","乘 - 两个数相乘或是返回一个被重复若干次的字符串"],["body","a * b 输出结果 210"],["body","\n"],["body","/"],["body","除 - x 除以 y"],["body","b / a 输出结果 2.1"],["body","\n"],["body","%"],["body","取模 - 返回除法的余数"],["body","b % a 输出结果 1"],["body","\n"],["body","**"],["body","幂 - 返回x的y次幂"],["body","a**b 为10的21次方"],["body","\n"],["body","//"],["body","取整除 - 向下取接近商的整数"],["body",">>> 9//2 4 >>> -9//2 -5"],["body","\n\n\n"],["body","以下实例演示了Python所有算术运算符的操作："],["body","\n"],["headingLink","python比较运算符"],["heading","Python比较运算符"],["body","\n"],["body","运算符"],["body","描述"],["body","实例"],["body","\n"],["body","=="],["body","等于 - 比较对象是否相等"],["body","(a == b) 返回 False。"],["body","\n"],["body","!="],["body","不等于 - 比较两个对象是否不相等"],["body","(a != b) 返回 True。"],["body","\n"],["body",">"],["body","大于 - 返回x是否大于y"],["body","(a > b) 返回 False。"],["body","\n"],["body","<"],["body","小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。注意，这些变量名的大写。"],["body","(a < b) 返回 True。"],["body","\n"],["body",">="],["body","大于等于 - 返回x是否大于等于y。"],["body","(a >= b) 返回 False。"],["body","\n"],["body","<="],["body","小于等于 - 返回x是否小于等于y。"],["body","(a <= b) 返回 True。"],["body","\n\n\n"],["headingLink","python赋值运算符"],["heading","Python赋值运算符"],["body","\n"],["body","运算符"],["body","描述"],["body","实例"],["body","\n"],["body","="],["body","简单的赋值运算符"],["body","c = a + b 将 a + b 的运算结果赋值为 c"],["body","\n"],["body","+="],["body","加法赋值运算符"],["body","c += a 等效于 c = c + a"],["body","\n"],["body","-="],["body","减法赋值运算符"],["body","c -= a 等效于 c = c - a"],["body","\n"],["body","*="],["body","乘法赋值运算符"],["body","c *= a 等效于 c = c * a"],["body","\n"],["body","/="],["body","除法赋值运算符"],["body","c /= a 等效于 c = c / a"],["body","\n"],["body","%="],["body","取模赋值运算符"],["body","c %= a 等效于 c = c % a"],["body","\n"],["body","**="],["body","幂赋值运算符"],["body","c **= a 等效于 c = c ** a"],["body","\n"],["body","//="],["body","取整除赋值运算符"],["body","c //= a 等效于 c = c // a"],["body","\n"],["body",":="],["body","海象运算符，可在表达式内部为变量赋值。Python3.8 版本新增运算符。"],["body","在这个示例中，赋值表达式可以避免调用 len() 两次:if (n := len(a)) > 10:    print(f\"List is too long ({n} elements, expected <= 10)\")"],["body","\n\n\n"],["headingLink","python位运算符"],["heading","Python位运算符"],["body","\n"],["body","运算符"],["body","描述"],["body","实例"],["body","\n"],["body","&"],["body","按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0"],["body","(a & b) 输出结果 12 ，二进制解释： 0000 1100"],["body","\n"],["body","|"],["body","按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。"],["body","(a | b) 输出结果 61 ，二进制解释： 0011 1101"],["body","\n"],["body","^"],["body","按位异或运算符：当两对应的二进位相异时，结果为1"],["body","(a ^ b) 输出结果 49 ，二进制解释： 0011 0001"],["body","\n"],["body","~"],["body","按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1。~x 类似于 -x-1"],["body","(~a ) 输出结果 -61 ，二进制解释： 1100 0011， 在一个有符号二进制数的补码形式。"],["body","\n"],["body","<<"],["body","左移动运算符：运算数的各二进位全部左移若干位，由\"<<\"右边的数指定移动的位数，高位丢弃，低位补0。"],["body","a << 2 输出结果 240 ，二进制解释： 1111 0000"],["body","\n"],["body",">>"],["body","右移动运算符：把\">>\"左边的运算数的各二进位全部右移若干位，\">>\"右边的数指定移动的位数"],["body","a >> 2 输出结果 15 ，二进制解释： 0000 1111"],["body","\n\n\n"],["headingLink","python逻辑运算符"],["heading","Python逻辑运算符"],["body","\n"],["body","Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:"],["body","\n"],["body","运算符"],["body","逻辑表达式"],["body","描述"],["body","实例"],["body","\n"],["body","and"],["body","x and y"],["body","布尔\"与\" - 如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。"],["body","(a and b) 返回 20。"],["body","\n"],["body","or"],["body","x or y"],["body","布尔\"或\" - 如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。"],["body","(a or b) 返回 10。"],["body","\n"],["body","not"],["body","not x"],["body","布尔\"非\" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。"],["body","not(a and b) 返回 False"],["body","\n\n\n"],["headingLink","python成员运算符"],["heading","Python成员运算符"],["body","\n"],["body","除了以上的一些运算符之外，Python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。"],["body","\n"],["body","运算符"],["body","描述"],["body","实例"],["body","\n"],["body","in"],["body","如果在指定的序列中找到值返回 True，否则返回 False。"],["body","x 在 y 序列中 , 如果 x 在 y 序列中返回 True。"],["body","\n"],["body","not in"],["body","如果在指定的序列中没有找到值返回 True，否则返回 False。"],["body","x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。"],["body","\n\n\n"],["headingLink","python身份运算符"],["heading","Python身份运算符"],["body","\n"],["body","身份运算符用于比较两个对象的存储单元"],["body","\n"],["body","运算符"],["body","描述"],["body","实例"],["body","\n"],["body","is"],["body","is 是判断两个标识符是不是引用自一个对象"],["body","x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False"],["body","\n"],["body","is not"],["body","is not 是判断两个标识符是不是引用自不同对象"],["body","x is not y ， 类似 id(x) != id(y)。如果引用的不是同一个对象则返回结果 True，否则返回 False。"],["body","\n\n\n"],["headingLink","python运算符优先级"],["heading","Python运算符优先级"],["body","\n"],["body","以下表格列出了从最高到最低优先级的所有运算符："],["body","\n"],["body","运算符"],["body","描述"],["body","\n"],["body","**"],["body","指数 (最高优先级)"],["body","\n"],["body","~ + -"],["body","按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)"],["body","\n"],["body","* / % //"],["body","乘，除，求余数和取整除"],["body","\n"],["body","+ -"],["body","加法减法"],["body","\n"],["body",">> <<"],["body","右移，左移运算符"],["body","\n"],["body","&"],["body","位 'AND'"],["body","\n"],["body","^ |"],["body","位运算符"],["body","\n"],["body","<= < > >="],["body","比较运算符"],["body","\n"],["body","== !="],["body","等于运算符"],["body","\n"],["body","= %= /= //= -= += *= **="],["body","赋值运算符"],["body","\n"],["body","is is not"],["body","身份运算符"],["body","\n"],["body","in not in"],["body","成员运算符"],["body","\n"],["body","not and or"],["body","逻辑运算符"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/With关键字.html"],["title","With关键字.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python-with语句"],["heading","Python with语句"],["body","\n"],["body","with语句究竟有哪些好处？"],["body","\n"],["body","它有助于简化一些通用资源管理模式，抽象出其中的功能，将其分解并重用。"],["body","\n"],["body","with open('hello.txt', 'w') as f:\n    f.write('hello, world!')\n"],["body","\n"],["body","f = open('hello.txt', 'w')\ntry:\n    f.write('hello, world')\nfinally:\n    f.close()\n"],["body","\n"],["body","threading.Lock类是Python标准库中另一个比较好的示例，它有效地使用了with语句："],["body","\n"],["body","some_lock = threading.Lock()\n\n# 有问题:\nsome_lock.acquire()\ntry:\n    # 执行某些操作……\nfinally:\n    some_lock.release()\n\n# 改进版:\nwith some_lock:\n    # 执行某些操作……\n\n"],["body","\n"],["body","在这两个例子中，使用with语句都可以抽象出大部分资源处理逻辑。不必每次都显式地写一个try...finally语句，with语句会自行处理。"],["body","\n"],["body","with语句不仅让处理系统资源的代码更易读，而且由于绝对不会忘记清理或释放资源，因此还可以避免bug或资源泄漏。"],["body","\n"],["headingLink","python-with语句-在自定义对象中支持with"],["heading","Python with语句 在自定义对象中支持with"],["body","\n"],["body","无论是open()函数和threading.Lock类本身，还是它们与with语句一起使用，这些都没有什么特殊之处。只要实现所谓的上下文管理器（context manager），就可以在自定义的类和函数中获得相同的功能。"],["body","\n"],["body","详见Python文档: “With Statement Context Managers”。"],["body","\n"],["body","上下文管理器是什么？这是一个简单的“协议”（或接口），自定义对象需要遵循这个接口来支持with语句。"],["body","\n"],["body","总的来说，如果想将一个对象作为上下文管理器，需要做的就是向其中添加__enter__和__exit__方法。"],["body","\n"],["body","class ManagedFile:\n    def __init__(self, name):\n        self.name = name\n\n    def __enter__(self):\n        self.file = open(self.name, 'w')\n        return self.file\n\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        if self.file:\n            self.file.close()\nPython\n\n"],["body","\n"],["body","其中的ManagedFile类遵循上下文管理器协议，所以与原来的open()例子一样，也支持with语句："],["body","\n"],["body",">>> with ManagedFile('hello.txt') as f:\nf.write('hello, world!')\nf.write('bye now')\n"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/2.基本数据类型.html"],["title","基本数据类型.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-基本数据类型"],["heading","Python3 基本数据类型"],["body","\n"],["body","Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。"],["body","\n"],["body","在 Python 中，变量就是变量，它没有类型，我们所说的\"类型\"是变量所指的内存中对象的类型。"],["body","\n"],["body","等号（=）用来给变量赋值。"],["body","\n"],["body","等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如："],["body","\n"],["body","\ncounter = 100          # 整型变量\nmiles   = 1000.0       # 浮点型变量\nname    = \"runoob\"     # 字符串\n\nprint (counter)\nprint (miles)\nprint (name)\n"],["body","\n"],["headingLink","多个变量赋值"],["heading","多个变量赋值"],["body","\n"],["body","a = b = c = 1\n"],["body","\n"],["body","以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。"],["body","\n"],["body","您也可以为多个对象指定多个变量。例如："],["body","\n"],["body","a, b, c = 1, 2, \"runoob\"\n\n"],["body","\n"],["headingLink","标准数据类型"],["heading","标准数据类型"],["body","\n"],["body","​\tPython3 中有六个标准的数据类型："],["body","\n\n"],["body","Number（数字）"],["body","\n"],["body","String（字符串）"],["body","\n"],["body","List（列表）"],["body","\n"],["body","Tuple（元组）"],["body","\n"],["body","Set（集合）"],["body","\n"],["body","Dictionary（字典）"],["body","\n\n"],["body","Python3 的六个标准数据类型中："],["body","\n\n"],["body","**不可变数据（3 个）：**Number（数字）、String（字符串）、Tuple（元组）；"],["body","\n"],["body","**可变数据（3 个）：**List（列表）、Dictionary（字典）、Set（集合）。"],["body","\n\n"],["headingLink","number数字"],["heading","Number（数字）"],["body","\n\n"],["body","\n"],["body","Python3 支持 int、float、bool、complex（复数）。"],["body","\n"],["body","\n"],["body","\n"],["body","在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。"],["body","\n"],["body","\n"],["body","\n"],["body","内置的 type() 函数可以用来查询变量所指的对象类型。"],["body","\n"],["body","\n\n"],["body",">>> a, b, c, d = 20, 5.5, True, 4+3j\n>>> print(type(a), type(b), type(c), type(d))\n<class 'int'> <class 'float'> <class 'bool'> <class 'complex'>\n"],["body","\n"],["body","此外还可以用 isinstance 来判断："],["body","\n"],["body",">>> a = 111\n>>> isinstance(a, int)\nTrue\n>>>\n"],["body","\n"],["body","isinstance 和 type 的区别在于："],["body","\n\n"],["body","type()不会认为子类是一种父类类型。"],["body","\n"],["body","isinstance()会认为子类是一种父类类型。"],["body","\n\n"],["body","**注意：**Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加， True==1、False==0 会返回 True，但可以通过 issubclass 来判断类型。"],["body","\n"],["body","当你指定一个值时，Number 对象就会被创建："],["body","\n"],["body","var1 = 1\nvar2 = 10\n"],["body","\n"],["body","您也可以使用del语句删除一些对象引用。"],["body","\n"],["body","del语句的语法是："],["body","\n"],["body","del var1[,var2[,var3[....,varN]]]\n"],["body","\n"],["headingLink","数值运算"],["heading","数值运算"],["body","\n"],["body",">>> 5 + 4  # 加法\n9\n>>> 4.3 - 2 # 减法\n2.3\n>>> 3 * 7  # 乘法\n21\n>>> 2 / 4  # 除法，得到一个浮点数\n0.5\n>>> 2 // 4 # 除法，得到一个整数\n0\n>>> 17 % 3 # 取余\n2\n>>> 2 ** 5 # 乘方\n32\n"],["body","\n"],["body","1、Python可以同时为多个变量赋值，如a, b = 1, 2。"],["body","\n"],["body","2、一个变量可以通过赋值指向不同类型的对象。"],["body","\n"],["body","3、数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。"],["body","\n"],["body","4、在混合计算时，Python会把整型转换成为浮点数。"],["body","\n"],["headingLink","数值类型实例"],["heading","数值类型实例"],["body","\n"],["body","int"],["body","float"],["body","complex"],["body","\n"],["body","10"],["body","0.0"],["body","3.14j"],["body","\n"],["body","100"],["body","15.20"],["body","45.j"],["body","\n"],["body","-786"],["body","-21.9"],["body","9.322e-36j"],["body","\n"],["body","080"],["body","32.3e+18"],["body",".876j"],["body","\n"],["body","-0490"],["body","-90."],["body","-.6545+0J"],["body","\n"],["body","-0x260"],["body","-32.54e100"],["body","3e+26J"],["body","\n"],["body","0x69"],["body","70.2E-12"],["body","4.53e-7j"],["body","\n\n\n"],["body","Python还支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型"],["body","\n"],["headingLink","string字符串"],["heading","String（字符串）"],["body","\n"],["body","Python中的字符串用单引号 ' 或双引号 \" 括起来，同时使用反斜杠 ** 转义特殊字符。"],["body","\n\n"],["body","加号 + 是字符串的连接符， 星号 ***** 表示复制当前字符串，与之结合的数字为复制的次数。实例如下："],["body","\n"],["body","Python 使用反斜杠 ** 转义特殊字符，如果你不想让反斜杠发生转义，可以在字符串前面添加一个 r，表示原始字符串："],["body","\n"],["body","另外，反斜杠()可以作为续行符，表示下一行是上一行的延续。也可以使用 \"\"\"...\"\"\" 或者 '''...''' 跨越多行。"],["body","\n"],["body","注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。"],["body","\n"],["body","与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm'会导致错误。"],["body","\n\n"],["headingLink","list列表"],["heading","List（列表）"],["body","\n\n"],["body","\n"],["body","列表是写在方括号 [] 之间、用逗号分隔开的元素列表。"],["body","\n"],["body","\n"],["body","\n"],["body","索引值以 0 为开始值，-1 为从末尾的开始位置。和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。列表截取的语法格式如下：变量[头下标:尾下标]"],["body","\n"],["body","\n"],["body","\n"],["body","索引值以 0 为开始值，-1 为从末尾的开始位置。"],["body","\n"],["body","\n"],["body","\n"],["body","加号 + 是列表连接运算符，星号 ***** 是重复操作。如下实例："],["body","\n"],["body","#!/usr/bin/python3\n\nlist = [ 'abcd', 786 , 2.23, 'runoob', 70.2 ]\ntinylist = [123, 'runoob']\n\nprint (list)            # 输出完整列表\nprint (list[0])         # 输出列表第一个元素\nprint (list[1:3])       # 从第二个开始输出到第三个元素\nprint (list[2:])        # 输出从第三个元素开始的所有元素\nprint (tinylist * 2)    # 输出两次列表\nprint (list + tinylist) # 连接列表\n"],["body","\n"],["body","\n"],["body","\n"],["body","与Python字符串不一样的是，列表中的元素是可以改变的："],["body","\n"],["body","\n"],["body","\n"],["body","1、List写在方括号之间，元素用逗号隔开。"],["body","\n"],["body","\n"],["body","\n"],["body","2、和字符串一样，list可以被索引和切片。"],["body","\n"],["body","\n"],["body","\n"],["body","3、List可以使用+操作符进行拼接。"],["body","\n"],["body","\n"],["body","\n"],["body","4、List中的元素是可以改变的"],["body","\n"],["body","\n\n"],["body","Python 列表截取可以接收第三个参数，参数作用是截取的步长，以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串："],["body","\n"],["body","如果第三个参数为负数表示逆向读取，以下实例用于翻转字符串："],["body","\n"],["body","def reverseWords(input):\n     \n    # 通过空格将字符串分隔符，把各个单词分隔为列表\n    inputWords = input.split(\" \")\n \n    # 翻转字符串\n    # 假设列表 list = [1,2,3,4],  \n    # list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)\n    # inputWords[-1::-1] 有三个参数\n    # 第一个参数 -1 表示最后一个元素\n    # 第二个参数为空，表示移动到列表末尾\n    # 第三个参数为步长，-1 表示逆向\n    inputWords=inputWords[-1::-1]\n \n    # 重新组合字符串\n    output = ' '.join(inputWords)\n     \n    return output\n \nif __name__ == \"__main__\":\n    input = 'I like runoob'\n    rw = reverseWords(input)\n    print(rw)\n"],["body","\n"],["headingLink","tuple元组"],["heading","Tuple（元组）"],["body","\n"],["body","元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号 () 里，元素之间用逗号隔开。"],["body","\n"],["body","元组中的元素类型也可以不相同："],["body","\n"],["body","#!/usr/bin/python3\n\ntuple = ( 'abcd', 786 , 2.23, 'runoob', 70.2  )\ntinytuple = (123, 'runoob')\n\nprint (tuple)             # 输出完整元组\nprint (tuple[0])          # 输出元组的第一个元素\nprint (tuple[1:3])        # 输出从第二个元素开始到第三个元素\nprint (tuple[2:])         # 输出从第三个元素开始的所有元素\nprint (tinytuple * 2)     # 输出两次元组\nprint (tuple + tinytuple) # 连接元组\n"],["body","\n"],["body","元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。"],["body","\n"],["body","其实，可以把字符串看作一种特殊的元组。"],["body","\n\n"],["body","1、与字符串一样，元组的元素不能修改。"],["body","\n"],["body","2、元组也可以被索引和切片，方法一样。"],["body","\n"],["body","3、注意构造包含 0 或 1 个元素的元组的特殊语法规则。"],["body","\n"],["body","4、元组也可以使用+操作符进行拼接。"],["body","\n\n"],["headingLink","set集合"],["heading","Set（集合）"],["body","\n"],["body","集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。"],["body","\n"],["body","可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。"],["body","\n"],["body","parame = {value01,value02,...}\n或者\nset(value)\n"],["body","\n"],["body","#!/usr/bin/python3\n\nsites = {'Google', 'Taobao', 'Runoob', 'Facebook', 'Zhihu', 'Baidu'}\n\nprint(sites)   # 输出集合，重复的元素被自动去掉\n\n# 成员测试\nif 'Runoob' in sites :\n    print('Runoob 在集合中')\nelse :\n    print('Runoob 不在集合中')\n\n\n# set可以进行集合运算\na = set('abracadabra')\nb = set('alacazam')\n\nprint(a)\n\nprint(a - b)     # a 和 b 的差集\n\nprint(a | b)     # a 和 b 的并集\n\nprint(a & b)     # a 和 b 的交集\n\nprint(a ^ b)     # a 和 b 中不同时存在的元素\n"],["body","\n"],["headingLink","dictionary字典"],["heading","Dictionary（字典）"],["body","\n"],["body","字典（dictionary）是Python中另一个非常有用的内置数据类型。"],["body","\n"],["body","列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。"],["body","\n"],["body","字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。"],["body","\n"],["body","键(key)必须使用不可变类型。"],["body","\n"],["body","在同一个字典中，键(key)必须是唯一的。"],["body","\n"],["body","#!/usr/bin/python3\n\ndict = {}\ndict['one'] = \"1 - 菜鸟教程\"\ndict[2]     = \"2 - 菜鸟工具\"\n\ntinydict = {'name': 'runoob','code':1, 'site': 'www.runoob.com'}\n\n\nprint (dict['one'])       # 输出键为 'one' 的值\nprint (dict[2])           # 输出键为 2 的值\nprint (tinydict)          # 输出完整的字典\nprint (tinydict.keys())   # 输出所有键\nprint (tinydict.values()) # 输出所有值\n"],["body","\n"],["body","构造函数 dict() 可以直接从键值对序列中构建字典如下："],["body","\n"],["body",">>> dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)])\n{'Runoob': 1, 'Google': 2, 'Taobao': 3}\n>>> {x: x**2 for x in (2, 4, 6)}\n{2: 4, 4: 16, 6: 36}\n>>> dict(Runoob=1, Google=2, Taobao=3)\n{'Runoob': 1, 'Google': 2, 'Taobao': 3}\n"],["body","\n"],["body","该代码使用的是字典推导式，更多推导式内容可以参考：Python 推导式。"],["body","\n"],["body","{x: x**2 for x in (2, 4, 6)}\n"],["body","\n"],["body","另外，字典类型也有一些内置的函数，例如 clear()、keys()、values() 等。"],["body","\n\n"],["body","1、字典是一种映射类型，它的元素是键值对。"],["body","\n"],["body","2、字典的关键字必须为不可变类型，且不能重复。"],["body","\n"],["body","3、创建空字典使用 { }。"],["body","\n\n"],["headingLink","python数据类型转换"],["heading","Python数据类型转换"],["body","\n"],["body","有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可，在下一章节 Python3 数据类型转换 会具体介绍。"],["body","\n"],["body","以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。"],["body","\n"],["body","函数"],["body","描述"],["body","\n"],["body","[int(x ,base])"],["body","将x转换为一个整数"],["body","\n"],["body","float(x)"],["body","将x转换到一个浮点数"],["body","\n"],["body","[complex(real ,imag])"],["body","创建一个复数"],["body","\n"],["body","str(x)"],["body","将对象 x 转换为字符串"],["body","\n"],["body","repr(x)"],["body","将对象 x 转换为表达式字符串"],["body","\n"],["body","eval(str)"],["body","用来计算在字符串中的有效Python表达式,并返回一个对象"],["body","\n"],["body","tuple(s)"],["body","将序列 s 转换为一个元组"],["body","\n"],["body","list(s)"],["body","将序列 s 转换为一个列表"],["body","\n"],["body","set(s)"],["body","转换为可变集合"],["body","\n"],["body","dict(d)"],["body","创建一个字典。d 必须是一个 (key, value)元组序列。"],["body","\n"],["body","frozenset(s)"],["body","转换为不可变集合"],["body","\n"],["body","chr(x)"],["body","将一个整数转换为一个字符"],["body","\n"],["body","ord(x)"],["body","将一个字符转换为它的整数值"],["body","\n"],["body","hex(x)"],["body","将一个整数转换为一个十六进制字符串"],["body","\n"],["body","oct(x)"],["body","将一个整数转换为一个八进制字符串"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/13.Python3迭代器与生成器.html"],["title","Python3迭代器与生成器.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-迭代器与生成器"],["heading","Python3 迭代器与生成器"],["body","\n"],["headingLink","迭代器"],["heading","迭代器"],["body","\n\n"],["body","\n"],["body","迭代是Python最强大的功能之一，是访问集合元素的一种方式。"],["body","\n"],["body","\n"],["body","\n"],["body","迭代器是一个可以记住遍历的位置的对象。"],["body","\n"],["body","\n"],["body","\n"],["body","迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。"],["body","\n"],["body","\n"],["body","\n"],["body","迭代器有两个基本的方法：iter() 和 next()。"],["body","\n"],["body","\n"],["body","\n"],["body","字符串，列表或元组对象都可用于创建迭代器："],["body","\n"],["body",">>> list=[1,2,3,4]\n>>> it = iter(list)    # 创建迭代器对象\n>>> print (next(it))   # 输出迭代器的下一个元素\n1\n>>> print (next(it))\n2\n>>>\n"],["body","\n"],["body","\n\n"],["body","迭代器对象可以使用常规for语句进行遍历："],["body","\n"],["body","#!/usr/bin/python3\n \nlist=[1,2,3,4]\nit = iter(list)    # 创建迭代器对象\nfor x in it:\n    print (x, end=\" \")\n"],["body","\n"],["body","也可以使用 next() 函数："],["body","\n"],["body","#!/usr/bin/python3\n \nimport sys         # 引入 sys 模块\n \nlist=[1,2,3,4]\nit = iter(list)    # 创建迭代器对象\n \nwhile True:\n    try:\n        print (next(it))\n    except StopIteration:\n        sys.exit()\n"],["body","\n"],["headingLink","创建一个迭代器"],["heading","创建一个迭代器"],["body","\n\n"],["body","把一个类作为一个迭代器使用需要在类中实现两个方法 iter() 与 next() 。"],["body","\n"],["body","如果你已经了解的面向对象编程，就知道类都有一个构造函数，Python 的构造函数为 init(), 它会在对象初始化的时候执行。"],["body","\n"],["body","iter() 方法返回一个特殊的迭代器对象， 这个迭代器对象实现了 next() 方法并通过 StopIteration 异常标识迭代的完成。"],["body","\n"],["body","next() 方法（Python 2 里是 next()）会返回下一个迭代器对象。"],["body","\n\n"],["body","创建一个返回数字的迭代器，初始值为 1，逐步递增 1："],["body","\n"],["body","class MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n \n  def __next__(self):\n    x = self.a\n    self.a += 1\n    return x\n \nmyclass = MyNumbers()\nmyiter = iter(myclass)\n \nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\nprint(next(myiter))\n"],["body","\n"],["headingLink","stopiteration"],["heading","StopIteration"],["body","\n"],["body","StopIteration 异常用于标识迭代的完成，防止出现无限循环的情况，在 next() 方法中我们可以设置在完成指定循环次数后触发 StopIteration 异常来结束迭代。"],["body","\n"],["body","class MyNumbers:\n  def __iter__(self):\n    self.a = 1\n    return self\n \n  def __next__(self):\n    if self.a <= 20:\n      x = self.a\n      self.a += 1\n      return x\n    else:\n      raise StopIteration\n \nmyclass = MyNumbers()\nmyiter = iter(myclass)\n \nfor x in myiter:\n  print(x)\n"],["body","\n"],["headingLink","生成器"],["heading","生成器"],["body","\n\n"],["body","\n"],["body","在 Python 中，使用了 yield 的函数被称为生成器（generator）。"],["body","\n"],["body","\n"],["body","\n"],["body","跟普通函数不同的是，生成器是一个返回迭代器的函数，只能用于迭代操作，更简单点理解生成器就是一个迭代器。"],["body","\n"],["body","\n"],["body","\n"],["body","在调用生成器运行的过程中，每次遇到 yield 时函数会暂停并保存当前所有的运行信息，返回 yield 的值, 并在下一次执行 next() 方法时从当前位置继续运行。"],["body","\n"],["body","\n"],["body","\n"],["body","调用一个生成器函数，返回的是一个迭代器对象。"],["body","\n"],["body","\n\n"],["body","#!/usr/bin/python3\n \nimport sys\n \ndef fibonacci(n): # 生成器函数 - 斐波那契\n    a, b, counter = 0, 1, 0\n    while True:\n        if (counter > n): \n            return\n        yield a\n        a, b = b, a + b\n        counter += 1\nf = fibonacci(10) # f 是一个迭代器，由生成器返回生成\n \nwhile True:\n    try:\n        print (next(f), end=\" \")\n    except StopIteration:\n        sys.exit()\n"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/18.枚举.html"],["title","枚举.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","前言"],["heading","前言"],["body","\n\n"],["body","\n"],["body","一些具有特殊含义的类，其实例化对象的个数往往是固定的，比如用一个类表示月份，则该类的实例对象最多有 12 个；再比如用一个类表示季节，则该类的实例化对象最多有 4 个。"],["body","\n"],["body","\n"],["body","\n"],["body","针对这种特殊的类，Python 3.4 中新增加了 Enum 枚举类。也就是说，对于这些实例化对象个数固定的类，可以用枚举类来定义。"],["body","\n"],["body","\n\n"],["headingLink","示例"],["heading","示例"],["body","\n"],["body","from enum import Enum\nclass Color(Enum):\n    # 为序列值指定value值\n    red = 1\n    green = 2\n    blue = 3\n"],["body","\n"],["body","注意，枚举类的每个成员都由 2 部分组成，分别为 name 和 value，其中 name 属性值为该枚举值的变量名（如 red），value 代表该枚举值的序号（序号通常从 1 开始）。"],["body","\n"],["body","#调用枚举成员的 3 种方式\nprint(Color.red)\nprint(Color['red'])\nprint(Color(1))\n#调取枚举成员中的 value 和 name\nprint(Color.red.value)\nprint(Color.red.name)\n#遍历枚举类中所有成员的 2 种方式\nfor color in Color:\n    print(color)\n"],["body","\n"],["body","枚举类成员之间不能比较大小，但可以用 == 或者 is 进行比较是否相等，例如："],["body","\n"],["body","print(Color.red == Color.green)\nprint(Color.red.name is Color.green.name)\n"],["body","\n"],["body","需要注意的是，枚举类中各个成员的值，不能在类的外部做任何修改，也就是说，下面语法的做法是错误的："],["body","\n"],["body","\nColor.red = 4\n"],["body","\n"],["body","除此之外，该枚举类还提供了一个 members 属性，该属性是一个包含枚举类中所有成员的字典，通过遍历该属性，也可以访问枚举类中的各个成员。例如："],["body","\n"],["body","\nfor name,member in Color.__members__.items():    print(name,\"->\",member)\n"],["body","\n"],["body","值得一提的是，Python 枚举类中各个成员必须保证 name 互不相同，但 value 可以相同，举个例子："],["body","\n"],["body","除了通过继承 Enum 类的方法创建枚举类，还可以使用 Enum() 函数创建枚举类。例如："],["body","\n"],["body","from enum import Enum\n#创建一个枚举类\nColor = Enum(\"Color\",('red','green','blue'))\n\n#调用枚举成员的 3 种方式\nprint(Color.red)\nprint(Color['red'])\nprint(Color(1))\n#调取枚举成员中的 value 和 name\nprint(Color.red.value)\nprint(Color.red.name)\n#遍历枚举类中所有成员的 2 种方式\nfor color in Color:\n    print(color)\n"],["body","\n"],["body","Enum() 函数可接受 2 个参数，第一个用于指定枚举类的类名，第二个参数用于指定枚举类中的多个成员。"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/20.JsonDictObject互转.html"],["title","JsonDictObject互转.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/14.函数.html"],["title","函数.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-函数"],["heading","Python3 函数"],["body","\n"],["body","函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。"],["body","\n"],["body","函数能提高应用的模块性，和代码的重复利用率。"],["body","\n"],["body","你已经知道Python提供了许多内建函数，比如print()。但你也可以自己创建函数，这被叫做用户自定义函数。"],["body","\n"],["headingLink","定义一个函数"],["heading","定义一个函数"],["body","\n"],["body","你可以定义一个由自己想要功能的函数，以下是简单的规则："],["body","\n\n"],["body","函数代码块以 def 关键词开头，后接函数标识符名称和圆括号 ()。"],["body","\n"],["body","任何传入参数和自变量必须放在圆括号中间，圆括号之间可以用于定义参数。"],["body","\n"],["body","函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。"],["body","\n"],["body","函数内容以冒号 : 起始，并且缩进。"],["body","\n"],["body","return [表达式] 结束函数，选择性地返回一个值给调用方，不带表达式的 return 相当于返回 None。"],["body","\n\n"],["body","Python 定义函数使用 def 关键字，一般格式如下："],["body","\n"],["body","def 函数名（参数列表）:\n    函数体\n"],["body","\n"],["body","默认情况下，参数值和参数名称是按函数声明中定义的顺序匹配起来的。"],["body","\n"],["headingLink","函数调用"],["heading","函数调用"],["body","\n"],["body","定义一个函数：给了函数一个名称，指定了函数里包含的参数，和代码块结构。"],["body","\n"],["body","这个函数的基本结构完成以后，你可以通过另一个函数调用执行，也可以直接从 Python 命令提示符执行。"],["body","\n"],["body","如下实例调用了 printme() 函数："],["body","\n"],["body","#!/usr/bin/python3\n \n# 定义函数\ndef printme( str ):\n   # 打印任何传入的字符串\n   print (str)\n   return\n \n# 调用函数\nprintme(\"我要调用用户自定义函数!\")\nprintme(\"再次调用同一函数\")\n"],["body","\n"],["headingLink","参数传递"],["heading","参数传递"],["body","\n"],["body","在 python 中，类型属于对象，对象有不同类型的区分，变量是没有类型的："],["body","\n"],["body","a=[1,2,3]\n\na=\"Runoob\"\n"],["body","\n"],["body","以上代码中，[1,2,3] 是 List 类型，\"Runoob\" 是 String 类型，而变量 a 是没有类型，她仅仅是一个对象的引用（一个指针），可以是指向 List 类型对象，也可以是指向 String 类型对象。"],["body","\n"],["headingLink","可更改mutable与不可更改immutable对象"],["heading","可更改(mutable)与不可更改(immutable)对象"],["body","\n"],["body","在 python 中，strings, tuples, 和 numbers 是不可更改的对象，而 list,dict 等则是可以修改的对象。"],["body","\n\n"],["body","**不可变类型：**变量赋值 a=5 后再赋值 a=10，这里实际是新生成一个 int 值对象 10，再让 a 指向它，而 5 被丢弃，不是改变 a 的值，相当于新生成了 a。"],["body","\n"],["body","**可变类型：**变量赋值 la=[1,2,3,4] 后再赋值 la[2]=5 则是将 list la 的第三个元素值更改，本身la没有动，只是其内部的一部分值被修改了。"],["body","\n\n"],["body","python 函数的参数传递："],["body","\n\n"],["body","**不可变类型：**类似 C++ 的值传递，如整数、字符串、元组。如 fun(a)，传递的只是 a 的值，没有影响 a 对象本身。如果在 fun(a) 内部修改 a 的值，则是新生成一个 a 的对象。"],["body","\n"],["body","**可变类型：**类似 C++ 的引用传递，如 列表，字典。如 fun(la)，则是将 la 真正的传过去，修改后 fun 外部的 la 也会受影响"],["body","\n\n"],["body","python 中一切都是对象，严格意义我们不能说值传递还是引用传递，我们应该说传不可变对象和传可变对象。"],["body","\n"],["headingLink","python-传不可变对象实例"],["heading","python 传不可变对象实例"],["body","\n"],["body","//通过 id() 函数来查看内存地址变化：\n\ndef change(a):\n    print(id(a))   # 指向的是同一个对象\n    a=10\n    print(id(a))   # 一个新对象\n \na=1\nprint(id(a))\nchange(a)\n\n"],["body","\n"],["body","以上实例输出结果为："],["body","\n"],["body","4379369136\n4379369136\n4379369424\n"],["body","\n"],["body","可以看见在调用函数前后，形参和实参指向的是同一个对象（对象 id 相同），在函数内部修改形参后，形参指向的是不同的 id。"],["body","\n"],["headingLink","传可变对象实例"],["heading","传可变对象实例"],["body","\n"],["body","可变对象在函数里修改了参数，那么在调用这个函数的函数里，原始的参数也被改变了。例如："],["body","\n"],["body","#!/usr/bin/python3\n \n# 可写函数说明\ndef changeme( mylist ):\n   \"修改传入的列表\"\n   mylist.append([1,2,3,4])\n   print (\"函数内取值: \", mylist)\n   return\n \n# 调用changeme函数\nmylist = [10,20,30]\nchangeme( mylist )\nprint (\"函数外取值: \", mylist)\n"],["body","\n"],["headingLink","参数"],["heading","参数"],["body","\n"],["body","以下是调用函数时可使用的正式参数类型："],["body","\n\n"],["body","必需参数"],["body","\n"],["body","关键字参数"],["body","\n"],["body","默认参数"],["body","\n"],["body","不定长参数"],["body","\n\n"],["headingLink","必需参数"],["heading","必需参数"],["body","\n"],["body","必需参数须以正确的顺序传入函数。调用时的数量必须和声明时的一样。"],["body","\n"],["body","调用 printme() 函数，你必须传入一个参数，不然会出现语法错误："],["body","\n"],["headingLink","关键字参数"],["heading","关键字参数"],["body","\n"],["body","关键字参数和函数调用关系紧密，函数调用使用关键字参数来确定传入的参数值。"],["body","\n"],["body","使用关键字参数允许函数调用时参数的顺序与声明时不一致，因为 Python 解释器能够用参数名匹配参数值。"],["body","\n"],["body","以下实例在函数 printme() 调用时使用参数名："],["body","\n"],["body","#!/usr/bin/python3\n \n#可写函数说明\ndef printme( str ):\n   \"打印任何传入的字符串\"\n   print (str)\n   return\n \n#调用printme函数\nprintme( str = \"菜鸟教程\")\n\n"],["body","\n"],["body","以下实例中演示了函数参数的使用不需要使用指定顺序："],["body","\n"],["body"," \n#可写函数说明\ndef printinfo( name, age ):\n   \"打印任何传入的字符串\"\n   print (\"名字: \", name)\n   print (\"年龄: \", age)\n   return\n \n#调用printinfo函数\nprintinfo( age=50, name=\"runoob\" )\n"],["body","\n"],["headingLink","默认参数"],["heading","默认参数"],["body","\n"],["body","调用函数时，如果没有传递参数，则会使用默认参数。以下实例中如果没有传入 age 参数，则使用默认值："],["body","\n"],["body","#!/usr/bin/python3\n \n#可写函数说明\ndef printinfo( name, age = 35 ):\n   \"打印任何传入的字符串\"\n   print (\"名字: \", name)\n   print (\"年龄: \", age)\n   return\n \n#调用printinfo函数\nprintinfo( age=50, name=\"runoob\" )\nprint (\"------------------------\")\nprintinfo( name=\"runoob\" )\n"],["body","\n"],["headingLink","不定长参数"],["heading","不定长参数"],["body","\n"],["body","你可能需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，和上述 2 种参数不同，声明时不会命名。基本语法如下："],["body","\n"],["body","def functionname([formal_args,] *var_args_tuple ):\n   \"函数_文档字符串\"\n   function_suite\n   return [expression]\n"],["body","\n"],["body","加了星号 ***** 的参数会以元组(tuple)的形式导入，存放所有未命名的变量参数。"],["body","\n"],["body","#!/usr/bin/python3\n  \n# 可写函数说明\ndef printinfo( arg1, *vartuple ):\n   \"打印任何传入的参数\"\n   print (\"输出: \")\n   print (arg1)\n   print (vartuple)\n \n# 调用printinfo 函数\nprintinfo( 70, 60, 50 )\n"],["body","\n"],["body","输出: \n70\n(60, 50)\n"],["body","\n"],["body","如果在函数调用时没有指定参数，它就是一个空元组。我们也可以不向函数传递未命名的变量。如下实例："],["body","\n"],["body","#!/usr/bin/python3\n \n# 可写函数说明\ndef printinfo( arg1, *vartuple ):\n   \"打印任何传入的参数\"\n   print (\"输出: \")\n   print (arg1)\n   for var in vartuple:\n      print (var)\n   return\n \n# 调用printinfo 函数\nprintinfo( 10 )\nprintinfo( 70, 60, 50 )\n"],["body","\n"],["body","还有一种就是参数带两个星号 ******基本语法如下："],["body","\n"],["body","def functionname([formal_args,] **var_args_dict ):\n   \"函数_文档字符串\"\n   function_suite\n   return [expression]\n"],["body","\n"],["body","加了两个星号 ** 的参数会以字典的形式导入。"],["body","\n"],["body","#!/usr/bin/python3\n  \n# 可写函数说明\ndef printinfo( arg1, **vardict ):\n   \"打印任何传入的参数\"\n   print (\"输出: \")\n   print (arg1)\n   print (vardict)\n \n# 调用printinfo 函数\nprintinfo(1, a=2,b=3)\n"],["body","\n"],["body","声明函数时，参数中星号 ***** 可以单独出现，例如:"],["body","\n"],["body","def f(a,b,*,c):\n    return a+b+c\n"],["body","\n"],["body","如果单独出现星号 * 后的参数必须用关键字传入。"],["body","\n"],["body",">>> def f(a,b,*,c):\n...     return a+b+c\n... \n>>> f(1,2,3)   # 报错\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: f() takes 2 positional arguments but 3 were given\n>>> f(1,2,c=3) # 正常\n6\n>>>\n"],["body","\n"],["headingLink","匿名函数"],["heading","匿名函数"],["body","\n"],["body","Python 使用 lambda 来创建匿名函数。"],["body","\n"],["body","所谓匿名，意即不再使用 def 语句这样标准的形式定义一个函数。"],["body","\n\n"],["body","lambda 只是一个表达式，函数体比 def 简单很多。"],["body","\n"],["body","lambda 的主体是一个表达式，而不是一个代码块。仅仅能在 lambda 表达式中封装有限的逻辑进去。"],["body","\n"],["body","lambda 函数拥有自己的命名空间，且不能访问自己参数列表之外或全局命名空间里的参数。"],["body","\n"],["body","虽然 lambda 函数看起来只能写一行，却不等同于 C 或 C++ 的内联函数，后者的目的是调用小函数时不占用栈内存从而增加运行效率。"],["body","\n\n"],["body","lambda 函数的语法只包含一个语句，如下："],["body","\n"],["body","lambda [arg1 [,arg2,.....argn]]:expression\n"],["body","\n"],["body","设置参数 a 加上 10:"],["body","\n"],["body","x = lambda a : a + 10 print(x(5))\n"],["body","\n"],["body","以下实例匿名函数设置两个参数："],["body","\n"],["body","#!/usr/bin/python3\n \n# 可写函数说明\nsum = lambda arg1, arg2: arg1 + arg2\n \n# 调用sum函数\nprint (\"相加后的值为 : \", sum( 10, 20 ))\nprint (\"相加后的值为 : \", sum( 20, 20 ))\n"],["body","\n"],["body","我们可以将匿名函数封装在一个函数内，这样可以使用同样的代码来创建多个匿名函数。"],["body","\n"],["body","以下实例将匿名函数封装在 myfunc 函数中，通过传入不同的参数来创建不同的匿名函数："],["body","\n"],["body","def myfunc(n):\n  return lambda a : a * n\n \nmydoubler = myfunc(2)\nmytripler = myfunc(3)\n \nprint(mydoubler(11))\nprint(mytripler(11))\n"],["body","\n"],["headingLink","return语句"],["heading","return语句"],["body","\n"],["body","return [表达式] 语句用于退出函数，选择性地向调用方返回一个表达式。不带参数值的return语句返回None。之前的例子都没有示范如何返回数值，以下实例演示了 return 语句的用法："],["body","\n"],["body","#!/usr/bin/python3\n \n# 可写函数说明\ndef sum( arg1, arg2 ):\n   # 返回2个参数的和.\"\n   total = arg1 + arg2\n   print (\"函数内 : \", total)\n   return total\n \n# 调用sum函数\ntotal = sum( 10, 20 )\nprint (\"函数外 : \", total)\n"],["body","\n"],["body","函数内 :  30\n函数外 :  30\n"],["body","\n"],["headingLink","强制位置参数"],["heading","强制位置参数"],["body","\n"],["body","Python3.8 新增了一个函数形参语法 / 用来指明函数形参必须使用指定位置参数，不能使用关键字参数的形式。"],["body","\n"],["body","在以下的例子中，形参 a 和 b 必须使用指定位置参数，c 或 d 可以是位置形参或关键字形参，而 e 和 f 要求为关键字形参:"],["body","\n"],["body","def f(a, b, /, c, d, *, e, f):\n    print(a, b, c, d, e, f)\n"],["body","\n"],["body","f(10, 20, 30, d=40, e=50, f=60)\n"],["body","\n"],["body","以下使用方法会发生错误:"],["body","\n"],["body","f(10, b=20, c=30, d=40, e=50, f=60)   # b 不能使用关键字参数的形式\nf(10, 20, 30, 40, 50, f=60)           # e 必须使用关键字参数的形式\n"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/9.Python3字典.html"],["title","Python3字典.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-字典"],["heading","Python3 字典"],["body","\n"],["body","字典是另一种可变容器模型，且可存储任意类型对象。"],["body","\n"],["body","字典的每个键值 key=>value 对用冒号 : 分割，每个对之间用逗号(,)分割，整个字典包括在花括号 {} 中 ,格式如下所示："],["body","\n"],["body","d = {key1 : value1, key2 : value2, key3 : value3 }\n\n"],["body","\n"],["body","**注意：**dict 作为 Python 的关键字和内置函数，变量名不建议命名为 dict。"],["body","\n"],["body","tinydict = {'name': 'runoob', 'likes': 123, 'url': 'www.runoob.com'}\n\ntinydict1 = { 'abc': 456 }\ntinydict2 = { 'abc': 123, 98.6: 37 }\n"],["body","\n"],["headingLink","创建空字典"],["heading","创建空字典"],["body","\n"],["body","# 使用大括号 {} 来创建空字典\nemptyDict = {}\n \n# 打印字典\nprint(emptyDict)\n \n# 查看字典的数量\nprint(\"Length:\", len(emptyDict))\n \n# 查看类型\nprint(type(emptyDict))\n"],["body","\n"],["body","使用内建函数 dict() 创建字典："],["body","\n"],["body","emptyDict = dict()\n \n# 打印字典\nprint(emptyDict)\n \n# 查看字典的数量\nprint(\"Length:\",len(emptyDict))\n \n# 查看类型\nprint(type(emptyDict))\n"],["body","\n"],["headingLink","访问字典里的值"],["heading","访问字典里的值"],["body","\n"],["body","#!/usr/bin/python3\n \ntinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}\n \nprint (\"tinydict['Name']: \", tinydict['Name'])\nprint (\"tinydict['Age']: \", tinydict['Age'])\n"],["body","\n"],["body","如果用字典里没有的键访问数据，会输出错误如下："],["body","\n"],["body","#!/usr/bin/python3\n \ntinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}\n \nprint (\"tinydict['Alice']: \", tinydict['Alice'])\n"],["body","\n"],["body","Traceback (most recent call last):\n  File \"test.py\", line 5, in <module>\n    print (\"tinydict['Alice']: \", tinydict['Alice'])\nKeyError: 'Alice'\n"],["body","\n"],["headingLink","修改字典"],["heading","修改字典"],["body","\n"],["body","向字典添加新内容的方法是增加新的键/值对，修改或删除已有键/值对如下实例:"],["body","\n"],["body","#!/usr/bin/python3\n \ntinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}\n \ntinydict['Age'] = 8               # 更新 Age\ntinydict['School'] = \"菜鸟教程\"  # 添加信息\n \n \nprint (\"tinydict['Age']: \", tinydict['Age'])\nprint (\"tinydict['School']: \", tinydict['School'])\n"],["body","\n"],["headingLink","删除字典元素"],["heading","删除字典元素"],["body","\n"],["body","能删单一的元素也能清空字典，清空只需一项操作。"],["body","\n"],["body","显式删除一个字典用del命令，如下实例："],["body","\n"],["body","#!/usr/bin/python3\n \ntinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'}\n \ndel tinydict['Name'] # 删除键 'Name'\ntinydict.clear()     # 清空字典\ndel tinydict         # 删除字典\n \nprint (\"tinydict['Age']: \", tinydict['Age'])\nprint (\"tinydict['School']: \", tinydict['School'])\n"],["body","\n"],["headingLink","字典键的特性"],["heading","字典键的特性"],["body","\n"],["body","字典值可以是任何的 python 对象，既可以是标准的对象，也可以是用户定义的，但键不行。"],["body","\n"],["body","两个重要的点需要记住："],["body","\n"],["body","1）不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住，如下实例："],["body","\n"],["body","2）键必须不可变，所以可以用数字，字符串或元组充当，而用列表就不行，如下实例："],["body","\n"],["headingLink","字典内置函数方法"],["heading","字典内置函数&方法"],["body","\n"],["body","Python字典包含了以下内置函数："],["body","\n"],["body","序号"],["body","函数及描述"],["body","实例"],["body","\n"],["body","1"],["body","len(dict) 计算字典元素个数，即键的总数。"],["body",">>> tinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} >>> len(tinydict) 3"],["body","\n"],["body","2"],["body","str(dict) 输出字典，可以打印的字符串表示。"],["body",">>> tinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} >>> str(tinydict) \"{'Name': 'Runoob', 'Class': 'First', 'Age': 7}\""],["body","\n"],["body","3"],["body","type(variable) 返回输入的变量类型，如果变量是字典就返回字典类型。"],["body",">>> tinydict = {'Name': 'Runoob', 'Age': 7, 'Class': 'First'} >>> type(tinydict) <class 'dict'>"],["body","\n\n\n"],["body","Python字典包含了以下内置方法："],["body","\n"],["body","Python字典包含了以下内置方法："],["body","\n"],["body","序号"],["body","函数及描述"],["body","\n"],["body","1"],["body","dict.clear() 删除字典内所有元素"],["body","\n"],["body","2"],["body","dict.copy() 返回一个字典的浅复制"],["body","\n"],["body","3"],["body","dict.fromkeys() 创建一个新字典，以序列seq中元素做字典的键，val为字典所有键对应的初始值"],["body","\n"],["body","4"],["body","dict.get(key, default=None) 返回指定键的值，如果键不在字典中返回 default 设置的默认值"],["body","\n"],["body","5"],["body","key in dict 如果键在字典dict里返回true，否则返回false"],["body","\n"],["body","6"],["body","dict.items() 以列表返回一个视图对象"],["body","\n"],["body","7"],["body","dict.keys() 返回一个视图对象"],["body","\n"],["body","8"],["body","dict.setdefault(key, default=None) 和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default"],["body","\n"],["body","9"],["body","dict.update(dict2) 把字典dict2的键/值对更新到dict里"],["body","\n"],["body","10"],["body","dict.values() 返回一个视图对象"],["body","\n"],["body","11"],["body","[pop(key,default]) 删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。"],["body","\n"],["body","12"],["body","popitem() 随机返回并删除字典中的最后一对键和值。"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/12.python3流程控制.html"],["title","python3流程控制.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-条件控制"],["heading","Python3 条件控制"],["body","\n"],["body","Python 条件语句是通过一条或多条语句的执行结果（True 或者 False）来决定执行的代码块。"],["body","\n"],["body","if condition_1:\n    statement_block_1\nelif condition_2:\n    statement_block_2\nelse:\n    statement_block_3\n"],["body","\n"],["body","if 表达式1:\n    语句\n    if 表达式2:\n        语句\n    elif 表达式3:\n        语句\n    else:\n        语句\nelif 表达式4:\n    语句\nelse:\n    语句\n"],["body","\n"],["headingLink","python3-循环语句"],["heading","Python3 循环语句"],["body","\n"],["headingLink","while-循环"],["heading","while 循环"],["body","\n"],["body","while 判断条件(condition)：\n    执行语句(statements)……\n"],["body","\n"],["headingLink","无限循环"],["heading","无限循环"],["body","\n"],["body","#!/usr/bin/python3\n \nvar = 1\nwhile var == 1 :  # 表达式永远为 true\n   num = int(input(\"输入一个数字  :\"))\n   print (\"你输入的数字是: \", num)\n \nprint (\"Good bye!\")\n"],["body","\n"],["headingLink","while-循环使用-else-语句"],["heading","while 循环使用 else 语句"],["body","\n"],["body","如果 while 后面的条件语句为 false 时，则执行 else 的语句块。"],["body","\n"],["body","语法格式如下："],["body","\n"],["body","while <expr>:\n    <statement(s)>\nelse:\n    <additional_statement(s)>\n"],["body","\n"],["body","#!/usr/bin/python3\n \ncount = 0\nwhile count < 5:\n   print (count, \" 小于 5\")\n   count = count + 1\nelse:\n   print (count, \" 大于或等于 5\")\n"],["body","\n"],["body","#!/usr/bin/python\n \nflag = 1\n \nwhile (flag): print ('欢迎访问菜鸟教程!')\n \nprint (\"Good bye!\")\n"],["body","\n"],["headingLink","for-语句"],["heading","for 语句"],["body","\n"],["body","for <variable> in <sequence>:\n    <statements>\nelse:\n    <statements>\n"],["body","\n"],["headingLink","range函数"],["heading","range()函数"],["body","\n"],["body","如果你需要遍历数字序列，可以使用内置range()函数。它会生成数列，例如:"],["body","\n"],["body",">>>for i in range(5):\n...     print(i)\n...\n0\n1\n2\n3\n4\n"],["body","\n"],["body","你也可以使用range指定区间的值："],["body","\n"],["body",">>>for i in range(5,9) :\n    print(i)\n \n    \n5\n6\n7\n8\n>>>\n"],["body","\n"],["body","也可以使range以指定数字开始并指定不同的增量(甚至可以是负数，有时这也叫做'步长'):"],["body","\n"],["body",">>>for i in range(0, 10, 3) :\n    print(i)\n \n    \n0\n3\n6\n9\n>>>\n"],["body","\n"],["headingLink","pass-语句"],["heading","pass 语句"],["body","\n"],["body","Python pass是空语句，是为了保持程序结构的完整性。"],["body","\n"],["body","pass 不做任何事情，一般用做占位语句，如下实例"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/11.Number类型.html"],["title","Number类型.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-数字number"],["heading","Python3 数字(Number)"],["body","\n"],["body","Python 支持三种不同的数值类型："],["body","\n\n"],["body","整型(int) - 通常被称为是整型或整数，是正或负整数，不带小数点。Python3 整型是没有限制大小的，可以当作 Long 类型使用，所以 Python3 没有 Python2 的 Long 类型。布尔(bool)是整型的子类型。"],["body","\n"],["body","浮点型(float) - 浮点型由整数部分与小数部分组成，浮点型也可以使用科学计数法表示（2.5e2 = 2.5 x 102 = 250）"],["body","\n"],["body","复数( (complex)) - 复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。"],["body","\n\n"],["body","我们可以使用十六进制和八进制来代表整数："],["body","\n"],["body",">>> number = 0xA0F # 十六进制\n>>> number\n2575\n\n>>> number=0o37 # 八进制\n>>> number\n31\n"],["body","\n"],["body","int"],["body","float"],["body","complex"],["body","\n"],["body","10"],["body","0.0"],["body","3.14j"],["body","\n"],["body","100"],["body","15.20"],["body","45.j"],["body","\n"],["body","-786"],["body","-21.9"],["body","9.322e-36j"],["body","\n"],["body","080"],["body","32.3e+18"],["body",".876j"],["body","\n"],["body","-0490"],["body","-90."],["body","-.6545+0J"],["body","\n"],["body","-0x260"],["body","-32.54e100"],["body","3e+26J"],["body","\n"],["body","0x69"],["body","70.2E-12"],["body","4.53e-7j"],["body","\n\n\n"],["body","Python支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型。"],["body","\n"],["headingLink","python-数字类型转换"],["heading","Python 数字类型转换"],["body","\n"],["body","有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。"],["body","\n\n"],["body","int(x) 将x转换为一个整数。"],["body","\n"],["body","float(x) 将x转换到一个浮点数。"],["body","\n"],["body","complex(x) 将x转换到一个复数，实数部分为 x，虚数部分为 0。"],["body","\n"],["body","complex(x, y) 将 x 和 y 转换到一个复数，实数部分为 x，虚数部分为 y。x 和 y 是数字表达式。"],["body","\n\n"],["body","以下实例将浮点数变量 a 转换为整数："],["body","\n"],["body",">>> a = 1.0\n>>> int(a)\n1\n"],["body","\n"],["headingLink","python-数字运算"],["heading","Python 数字运算"],["body","\n"],["body","Python 解释器可以作为一个简单的计算器，您可以在解释器里输入一个表达式，它将输出表达式的值。"],["body","\n"],["body","表达式的语法很直白： +, -, ***** 和 /, 和其它语言（如Pascal或C）里一样。例如："],["body","\n"],["body",">>> 2 + 2\n4\n>>> 50 - 5*6\n20\n>>> (50 - 5*6) / 4\n5.0\n>>> 8 / 5  # 总是返回一个浮点数\n1.6\n"],["body","\n"],["body","**注意：**在不同的机器上浮点运算的结果可能会不一样。"],["body","\n"],["body","在整数除法中，除法 / 总是返回一个浮点数，如果只想得到整数的结果，丢弃可能的分数部分，可以使用运算符 // ："],["body","\n"],["body",">>> 17 / 3  # 整数除法返回浮点型\n5.666666666666667\n>>>\n>>> 17 // 3  # 整数除法返回向下取整后的结果\n5\n>>> 17 % 3  # ％操作符返回除法的余数\n2\n>>> 5 * 3 + 2 \n17\n\n\n"],["body","\n"],["body","注意：****// 得到的并不一定是整数类型的数，它与分母分子的数据类型有关系。"],["body","\n"],["body",">>> 7//2\n3\n>>> 7.0//2\n3.0\n>>> 7//2.0\n3.0\n>>> \n"],["body","\n"],["body",">>> width = 20\n>>> height = 5*9\n>>> width * height\n900\n"],["body","\n"],["body","Python 可以使用 ** 操作来进行幂运算："],["body","\n"],["body",">>> 5 ** 2  # 5 的平方\n25\n>>> 2 ** 7  # 2的7次方\n128\n\n"],["body","\n"],["body","变量在使用前必须先\"定义\"（即赋予变量一个值），否则会出现错误："],["body","\n"],["body","不同类型的数混合运算时会将整数转换为浮点数："],["body","\n"],["body",">>> 3 * 3.75 / 1.5\n7.5\n>>> 7.0 / 2\n3.5\n\n"],["body","\n"],["body","在交互模式中，最后被输出的表达式结果被赋值给变量 _ 。例如："],["body","\n"],["body",">>> tax = 12.5 / 100\n>>> price = 100.50\n>>> price * tax\n12.5625\n>>> price + _\n113.0625\n>>> round(_, 2)\n113.06\n\n"],["body","\n"],["body","此处， _ 变量应被用户视为只读变量。"],["body","\n"],["headingLink","数学函数"],["heading","数学函数"],["body","\n"],["body","函数"],["body","返回值 ( 描述 )"],["body","\n"],["body","abs(x)"],["body","返回数字的绝对值，如abs(-10) 返回 10"],["body","\n"],["body","ceil(x)"],["body","返回数字的上入整数，如math.ceil(4.1) 返回 5"],["body","\n"],["body","cmp(x, y)"],["body","如果 x < y 返回 -1, 如果 x == y 返回 0, 如果 x > y 返回 1。 Python 3 已废弃，使用 (x>y)-(x<y) 替换。"],["body","\n"],["body","exp(x)"],["body","返回e的x次幂(ex),如math.exp(1) 返回2.718281828459045"],["body","\n"],["body","fabs(x)"],["body","返回数字的绝对值，如math.fabs(-10) 返回10.0"],["body","\n"],["body","floor(x)"],["body","返回数字的下舍整数，如math.floor(4.9)返回 4"],["body","\n"],["body","log(x)"],["body","如math.log(math.e)返回1.0,math.log(100,10)返回2.0"],["body","\n"],["body","log10(x)"],["body","返回以10为基数的x的对数，如math.log10(100)返回 2.0"],["body","\n"],["body","max(x1, x2,...)"],["body","返回给定参数的最大值，参数可以为序列。"],["body","\n"],["body","min(x1, x2,...)"],["body","返回给定参数的最小值，参数可以为序列。"],["body","\n"],["body","modf(x)"],["body","返回x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。"],["body","\n"],["body","pow(x, y)"],["body","x**y 运算后的值。"],["body","\n"],["body","[round(x ,n])"],["body","返回浮点数 x 的四舍五入值，如给出 n 值，则代表舍入到小数点后的位数。其实准确的说是保留值将保留到离上一位更近的一端。"],["body","\n"],["body","sqrt(x)"],["body","返回数字x的平方根。"],["body","\n\n\n"],["body","\n"],["headingLink","随机数函数"],["heading","随机数函数"],["body","\n"],["body","随机数可以用于数学，游戏，安全等领域中，还经常被嵌入到算法中，用以提高算法效率，并提高程序的安全性。"],["body","\n"],["body","Python包含以下常用随机数函数："],["body","\n"],["body","函数"],["body","描述"],["body","\n"],["body","choice(seq)"],["body","从序列的元素中随机挑选一个元素，比如random.choice(range(10))，从0到9中随机挑选一个整数。"],["body","\n"],["body","[randrange (start,] stop [,step])"],["body","从指定范围内，按指定基数递增的集合中获取一个随机数，基数默认值为 1"],["body","\n"],["body","random()"],["body","随机生成下一个实数，它在[0,1)范围内。"],["body","\n"],["body","[seed(x])"],["body","改变随机数生成器的种子seed。如果你不了解其原理，你不必特别去设定seed，Python会帮你选择seed。"],["body","\n"],["body","shuffle(lst)"],["body","将序列的所有元素随机排序"],["body","\n"],["body","uniform(x, y)"],["body","随机生成下一个实数，它在[x,y]范围内。"],["body","\n\n\n"],["body","\n"],["headingLink","三角函数"],["heading","三角函数"],["body","\n"],["body","Python包括以下三角函数："],["body","\n"],["body","函数"],["body","描述"],["body","\n"],["body","acos(x)"],["body","返回x的反余弦弧度值。"],["body","\n"],["body","asin(x)"],["body","返回x的反正弦弧度值。"],["body","\n"],["body","atan(x)"],["body","返回x的反正切弧度值。"],["body","\n"],["body","atan2(y, x)"],["body","返回给定的 X 及 Y 坐标值的反正切值。"],["body","\n"],["body","cos(x)"],["body","返回x的弧度的余弦值。"],["body","\n"],["body","hypot(x, y)"],["body","返回欧几里德范数 sqrt(xx + yy)。"],["body","\n"],["body","sin(x)"],["body","返回的x弧度的正弦值。"],["body","\n"],["body","tan(x)"],["body","返回x弧度的正切值。"],["body","\n"],["body","degrees(x)"],["body","将弧度转换为角度,如degrees(math.pi/2) ， 返回90.0"],["body","\n"],["body","radians(x)"],["body","将角度转换为弧度"],["body","\n\n\n"],["body","\n"],["headingLink","数学常量"],["heading","数学常量"],["body","\n"],["body","常量"],["body","描述"],["body","\n"],["body","pi"],["body","数学常量 pi（圆周率，一般以π来表示）"],["body","\n"],["body","e"],["body","数学常量 e，e即自然常数（自然常数）。"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/6.Python3字符串.html"],["title","Python3字符串.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-字符串"],["heading","Python3 字符串"],["body","\n"],["body","字符串是 Python 中最常用的数据类型。我们可以使用引号( ' 或 \" )来创建字符串。"],["body","\n"],["body","创建字符串很简单，只要为变量分配一个值即可。例如："],["body","\n"],["headingLink","python-访问字符串中的值"],["heading","Python 访问字符串中的值"],["body","\n"],["body","变量[头下标:尾下标]\n"],["body","\n"],["headingLink","python转义字符"],["heading","Python转义字符"],["body","\n"],["body","在需要在字符中使用特殊字符时，python 用反斜杠 ** 转义字符。如下表："],["body","\n"],["body","转义字符"],["body","描述"],["body","实例"],["body","\n"],["body","\\(在行尾时)"],["body","续行符"],["body",">>> print(\"line1 \\ ... line2 \\ ... line3\") line1 line2 line3 >>> "],["body","\n"],["body","\\\\"],["body","反斜杠符号"],["body",">>> print(\"\\\\\") \\"],["body","\n"],["body","\\'"],["body","单引号"],["body",">>> print('\\'') '"],["body","\n"],["body","\\\""],["body","双引号"],["body",">>> print(\"\\\"\") \""],["body","\n"],["body","\\a"],["body","响铃"],["body",">>> print(\"\\a\")执行后电脑有响声。"],["body","\n"],["body","\\b"],["body","退格(Backspace)"],["body",">>> print(\"Hello \\b World!\") Hello World!"],["body","\n"],["body","\\000"],["body","空"],["body",">>> print(\"\\000\") >>> "],["body","\n"],["body","\\n"],["body","换行"],["body",">>> print(\"\\n\")  >>>"],["body","\n"],["body","\\v"],["body","纵向制表符"],["body",">>> print(\"Hello \\v World!\") Hello        World! >>>"],["body","\n"],["body","\\t"],["body","横向制表符"],["body",">>> print(\"Hello \\t World!\") Hello    World! >>>"],["body","\n"],["body","\\r"],["body","回车，将 \\r 后面的内容移到字符串开头，并逐一替换开头部分的字符，直至将 \\r 后面的内容完全替换完成。"],["body",">>> print(\"Hello\\rWorld!\") World! >>> print('google runoob taobao\\r123456') 123456 runoob taobao"],["body","\n"],["body","\\f"],["body","换页"],["body",">>> print(\"Hello \\f World!\") Hello        World! >>> "],["body","\n"],["body","\\yyy"],["body","八进制数，y 代表 0~7 的字符，例如：\\012 代表换行。"],["body",">>> print(\"\\110\\145\\154\\154\\157\\40\\127\\157\\162\\154\\144\\41\") Hello World!"],["body","\n"],["body","\\xyy"],["body","十六进制数，以 \\x 开头，y 代表的字符，例如：\\x0a 代表换行"],["body",">>> print(\"\\x48\\x65\\x6c\\x6c\\x6f\\x20\\x57\\x6f\\x72\\x6c\\x64\\x21\") Hello World!"],["body","\n"],["body","\\other"],["body","其它的字符以普通格式输出"],["body","\n\n\n"],["headingLink","python字符串运算符"],["heading","Python字符串运算符"],["body","\n"],["body","下表实例变量 a 值为字符串 \"Hello\"，b 变量值为 \"Python\"："],["body","\n"],["body","操作符"],["body","描述"],["body","实例"],["body","\n"],["body","+"],["body","字符串连接"],["body","a + b 输出结果： HelloPython"],["body","\n"],["body","*"],["body","重复输出字符串"],["body","a*2 输出结果：HelloHello"],["body","\n"],["body","[]"],["body","通过索引获取字符串中字符"],["body","a[1] 输出结果 e"],["body","\n"],["body","[ : ]"],["body","截取字符串中的一部分，遵循左闭右开原则，str[0:2] 是不包含第 3 个字符的。"],["body","a[1:4] 输出结果 ell"],["body","\n"],["body","in"],["body","成员运算符 - 如果字符串中包含给定的字符返回 True"],["body","'H' in a 输出结果 True"],["body","\n"],["body","not in"],["body","成员运算符 - 如果字符串中不包含给定的字符返回 True"],["body","'M' not in a 输出结果 True"],["body","\n"],["body","r/R"],["body","原始字符串 - 原始字符串：所有的字符串都是直接按照字面的意思来使用，没有转义特殊或不能打印的字符。 原始字符串除在字符串的第一个引号前加上字母 r（可以大小写）以外，与普通字符串有着几乎完全相同的语法。"],["body","print( r'\\n' ) print( R'\\n' )"],["body","\n"],["body","%"],["body","格式字符串"],["body","请看下一节内容。"],["body","\n\n\n"],["headingLink","python-字符串格式化"],["heading","Python 字符串格式化"],["body","\n"],["body","Python 支持格式化字符串的输出 。尽管这样可能会用到非常复杂的表达式，但最基本的用法是将一个值插入到一个有字符串格式符 %s 的字符串中。"],["body","\n"],["body","print (\"我叫 %s 今年 %d 岁!\" % ('小明', 10))\n"],["body","\n"],["body","python字符串格式化符号:"],["body","\n"],["body","符  号"],["body","描述"],["body","\n"],["body","%c"],["body","格式化字符及其ASCII码"],["body","\n"],["body","%s"],["body","格式化字符串"],["body","\n"],["body","%d"],["body","格式化整数"],["body","\n"],["body","%u"],["body","格式化无符号整型"],["body","\n"],["body","%o"],["body","格式化无符号八进制数"],["body","\n"],["body","%x"],["body","格式化无符号十六进制数"],["body","\n"],["body","%X"],["body","格式化无符号十六进制数（大写）"],["body","\n"],["body","%f"],["body","格式化浮点数字，可指定小数点后的精度"],["body","\n"],["body","%e"],["body","用科学计数法格式化浮点数"],["body","\n"],["body","%E"],["body","作用同%e，用科学计数法格式化浮点数"],["body","\n"],["body","%g"],["body","%f和%e的简写"],["body","\n"],["body","%G"],["body","%f 和 %E 的简写"],["body","\n"],["body","%p"],["body","用十六进制数格式化变量的地址"],["body","\n\n\n"],["body","格式化操作符辅助指令:"],["body","\n"],["body","符号"],["body","功能"],["body","\n"],["body","*"],["body","定义宽度或者小数点精度"],["body","\n"],["body","-"],["body","用做左对齐"],["body","\n"],["body","+"],["body","在正数前面显示加号( + )"],["body","\n"],["body","在正数前面显示空格"],["body","\n"],["body","#"],["body","在八进制数前面显示零('0')，在十六进制前面显示'0x'或者'0X'(取决于用的是'x'还是'X')"],["body","\n"],["body","0"],["body","显示的数字前面填充'0'而不是默认的空格"],["body","\n"],["body","%"],["body","'%%'输出一个单一的'%'"],["body","\n"],["body","(var)"],["body","映射变量(字典参数)"],["body","\n"],["body","m.n."],["body","m 是显示的最小总宽度,n 是小数点后的位数(如果可用的话)"],["body","\n\n\n"],["body","Python2.6 开始，新增了一种格式化字符串的函数 str.format()，它增强了字符串格式化的功能。"],["body","\n"],["headingLink","python三引号"],["heading","Python三引号"],["body","\n"],["body","python三引号允许一个字符串跨多行，字符串中可以包含换行符、制表符以及其他特殊字符。实例如下"],["body","\n"],["body","#!/usr/bin/python3\n \npara_str = \"\"\"这是一个多行字符串的实例\n多行字符串可以使用制表符\nTAB ( \\t )。\n也可以使用换行符 [ \\n ]。\n\"\"\"\nprint (para_str)\n"],["body","\n"],["headingLink","f-string"],["heading","f-string"],["body","\n"],["body",">>> name = 'Runoob'\n>>> 'Hello %s' % name\n'Hello Runoob'\n"],["body","\n"],["body","f-string 格式化字符串以 f 开头，后面跟着字符串，字符串中的表达式用大括号 {} 包起来，它会将变量或表达式计算后的值替换进去，实例如下："],["body","\n"],["body",">>> name = 'Runoob'\n>>> f'Hello {name}'  # 替换变量\n'Hello Runoob'\n>>> f'{1+2}'         # 使用表达式\n'3'\n\n>>> w = {'name': 'Runoob', 'url': 'www.runoob.com'}\n>>> f'{w[\"name\"]}: {w[\"url\"]}'\n'Runoob: www.runoob.com'\n"],["body","\n"],["body","用了这种方式明显更简单了，不用再去判断使用 %s，还是 %d。"],["body","\n"],["body","在 Python 3.8 的版本中可以使用 = 符号来拼接运算表达式与结果："],["body","\n"],["body",">>> x = 1\n>>> print(f'{x+1}')   # Python 3.6\n2\n\n>>> x = 1\n>>> print(f'{x+1=}')   # Python 3.8\nx+1=2\n"],["body","\n"],["headingLink","unicode-字符串"],["heading","Unicode 字符串"],["body","\n"],["body","在Python2中，普通字符串是以8位ASCII码进行存储的，而Unicode字符串则存储为16位unicode字符串，这样能够表示更多的字符集。使用的语法是在字符串前面加上前缀 u。"],["body","\n"],["body","在Python3中，所有的字符串都是Unicode字符串。"],["body","\n"],["headingLink","python-的字符串内建函数"],["heading","Python 的字符串内建函数"],["body","\n"],["body","Python 的字符串常用内建函数如下："],["body","\n"],["body","序号"],["body","方法及描述"],["body","\n"],["body","1"],["body","capitalize() 将字符串的第一个字符转换为大写"],["body","\n"],["body","2"],["body","center(width, fillchar)返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。"],["body","\n"],["body","3"],["body","count(str, beg= 0,end=len(string)) 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数"],["body","\n"],["body","4"],["body","bytes.decode(encoding=\"utf-8\", errors=\"strict\") Python3 中没有 decode 方法，但我们可以使用 bytes 对象的 decode() 方法来解码给定的 bytes 对象，这个 bytes 对象可以由 str.encode() 来编码返回。"],["body","\n"],["body","5"],["body","encode(encoding='UTF-8',errors='strict') 以 encoding 指定的编码格式编码字符串，如果出错默认报一个ValueError 的异常，除非 errors 指定的是'ignore'或者'replace'"],["body","\n"],["body","6"],["body","endswith(suffix, beg=0, end=len(string)) 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束，如果是，返回 True,否则返回 False."],["body","\n"],["body","7"],["body","expandtabs(tabsize=8) 把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8 。"],["body","\n"],["body","8"],["body","find(str, beg=0, end=len(string)) 检测 str 是否包含在字符串中，如果指定范围 beg 和 end ，则检查是否包含在指定范围内，如果包含返回开始的索引值，否则返回-1"],["body","\n"],["body","9"],["body","index(str, beg=0, end=len(string)) 跟find()方法一样，只不过如果str不在字符串中会报一个异常。"],["body","\n"],["body","10"],["body","isalnum() 如果字符串至少有一个字符并且所有字符都是字母或数字则返 回 True，否则返回 False"],["body","\n"],["body","11"],["body","isalpha() 如果字符串至少有一个字符并且所有字符都是字母或中文字则返回 True, 否则返回 False"],["body","\n"],["body","12"],["body","isdigit() 如果字符串只包含数字则返回 True 否则返回 False.."],["body","\n"],["body","13"],["body","islower() 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False"],["body","\n"],["body","14"],["body","isnumeric() 如果字符串中只包含数字字符，则返回 True，否则返回 False"],["body","\n"],["body","15"],["body","isspace() 如果字符串中只包含空白，则返回 True，否则返回 False."],["body","\n"],["body","16"],["body","istitle() 如果字符串是标题化的(见 title())则返回 True，否则返回 False"],["body","\n"],["body","17"],["body","isupper() 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False"],["body","\n"],["body","18"],["body","join(seq) 以指定字符串作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串"],["body","\n"],["body","19"],["body","len(string) 返回字符串长度"],["body","\n"],["body","20"],["body","[ljust(width, fillchar]) 返回一个原字符串左对齐,并使用 fillchar 填充至长度 width 的新字符串，fillchar 默认为空格。"],["body","\n"],["body","21"],["body","lower() 转换字符串中所有大写字符为小写."],["body","\n"],["body","22"],["body","lstrip() 截掉字符串左边的空格或指定字符。"],["body","\n"],["body","23"],["body","maketrans() 创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。"],["body","\n"],["body","24"],["body","max(str) 返回字符串 str 中最大的字母。"],["body","\n"],["body","25"],["body","min(str) 返回字符串 str 中最小的字母。"],["body","\n"],["body","26"],["body","[replace(old, new , max]) 把 将字符串中的 old 替换成 new,如果 max 指定，则替换不超过 max 次。"],["body","\n"],["body","27"],["body","rfind(str, beg=0,end=len(string)) 类似于 find()函数，不过是从右边开始查找."],["body","\n"],["body","28"],["body","rindex( str, beg=0, end=len(string)) 类似于 index()，不过是从右边开始."],["body","\n"],["body","29"],["body","[rjust(width,, fillchar]) 返回一个原字符串右对齐,并使用fillchar(默认空格）填充至长度 width 的新字符串"],["body","\n"],["body","30"],["body","rstrip() 删除字符串末尾的空格或指定字符。"],["body","\n"],["body","31"],["body","split(str=\"\", num=string.count(str)) 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num+1 个子字符串"],["body","\n"],["body","32"],["body","[splitlines(keepends]) 按照行('\\r', '\\r\\n', \\n')分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符。"],["body","\n"],["body","33"],["body","startswith(substr, beg=0,end=len(string)) 检查字符串是否是以指定子字符串 substr 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。"],["body","\n"],["body","34"],["body","[strip(chars]) 在字符串上执行 lstrip()和 rstrip()"],["body","\n"],["body","35"],["body","swapcase() 将字符串中大写转换为小写，小写转换为大写"],["body","\n"],["body","36"],["body","title() 返回\"标题化\"的字符串,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())"],["body","\n"],["body","37"],["body","translate(table, deletechars=\"\") 根据 table 给出的表(包含 256 个字符)转换 string 的字符, 要过滤掉的字符放到 deletechars 参数中"],["body","\n"],["body","38"],["body","upper() 转换字符串中的小写字母为大写"],["body","\n"],["body","39"],["body","zfill (width) 返回长度为 width 的字符串，原字符串右对齐，前面填充0"],["body","\n"],["body","40"],["body","isdecimal() 检查字符串是否只包含十进制字符，如果是返回 true，否则返回 false。"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/杂项.html"],["title","杂项.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","切换数据源"],["heading","切换数据源"],["body","\n"],["body","国内镜像源：\n清华：https://pypi.tuna.tsinghua.edu.cn/simple\n\n阿里云：http://mirrors.aliyun.com/pypi/simple/\n\n中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/\n\n华中理工大学：http://pypi.hustunique.com/\n\n山东理工大学：http://pypi.sdutlinux.org/\n\n豆瓣：http://pypi.douban.com/simple/\n"],["body","\n"],["body","pip3 install -i https://pypi.doubanio.com/simple/ 包名\n"],["body","\n"],["body","~/.pip/pip.conf\n\n[global]\nindex-url = https://pypi.tuna.tsinghua.edu.cn/simple\n[install]\ntrusted-host=mirrors.aliyun.com\n"],["body","\n"],["body","windows下，直接在 %userprofile% 目录中创建一个 pip目录，再新建文件 pip.ini。（例如：C:\\Users\\WQP\\pip\\pip.ini）内容同上。\n"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/15.Python3JSON数据解析.html"],["title","Python3JSON数据解析.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-json-数据解析"],["heading","Python3 JSON 数据解析"],["body","\n"],["body","JSON (JavaScript Object Notation) 是一种轻量级的数据交换格式。"],["body","\n"],["body","Python3 中可以使用 json 模块来对 JSON 数据进行编解码，它包含了两个函数："],["body","\n\n"],["body","json.dumps(): 对数据进行编码。"],["body","\n"],["body","json.loads(): 对数据进行解码。"],["body","\n\n"],["body","在 json 的编解码过程中，Python 的原始类型与 json 类型会相互转换，具体的转化对照如下："],["body","\n"],["headingLink","python-编码为-json-类型转换对应表"],["heading","Python 编码为 JSON 类型转换对应表："],["body","\n"],["body","Python"],["body","JSON"],["body","\n"],["body","dict"],["body","object"],["body","\n"],["body","list, tuple"],["body","array"],["body","\n"],["body","str"],["body","string"],["body","\n"],["body","int, float, int- & float-derived Enums"],["body","number"],["body","\n"],["body","True"],["body","true"],["body","\n"],["body","False"],["body","false"],["body","\n"],["body","None"],["body","null"],["body","\n\n\n"],["headingLink","json-解码为-python-类型转换对应表"],["heading","JSON 解码为 Python 类型转换对应表："],["body","\n"],["body","JSON"],["body","Python"],["body","\n"],["body","object"],["body","dict"],["body","\n"],["body","array"],["body","list"],["body","\n"],["body","string"],["body","str"],["body","\n"],["body","number (int)"],["body","int"],["body","\n"],["body","number (real)"],["body","float"],["body","\n"],["body","true"],["body","True"],["body","\n"],["body","false"],["body","False"],["body","\n"],["body","null"],["body","None"],["body","\n\n\n"],["headingLink","jsondumps-与-jsonloads-实例以下实例演示了-python-数据结构转换为json"],["heading","json.dumps 与 json.loads 实例以下实例演示了 Python 数据结构转换为JSON："],["body","\n"],["body","#!/usr/bin/python3\n \nimport json\n \n# Python 字典类型转换为 JSON 对象\ndata = {\n    'no' : 1,\n    'name' : 'Runoob',\n    'url' : 'http://www.runoob.com'\n}\n \njson_str = json.dumps(data)\nprint (\"Python 原始数据：\", repr(data))\nprint (\"JSON 对象：\", json_str)\n"],["body","\n"],["body","Python 原始数据： {'url': 'http://www.runoob.com', 'no': 1, 'name': 'Runoob'}\nJSON 对象： {\"url\": \"http://www.runoob.com\", \"no\": 1, \"name\": \"Runoob\"}\n"],["body","\n"],["body","通过输出的结果可以看出，简单类型通过编码后跟其原始的repr()输出结果非常相似。"],["body","\n"],["body","接着以上实例，我们可以将一个JSON编码的字符串转换回一个Python数据结构："],["body","\n"],["body","#!/usr/bin/python3\n \nimport json\n \n# Python 字典类型转换为 JSON 对象\ndata1 = {\n    'no' : 1,\n    'name' : 'Runoob',\n    'url' : 'http://www.runoob.com'\n}\n \njson_str = json.dumps(data1)\nprint (\"Python 原始数据：\", repr(data1))\nprint (\"JSON 对象：\", json_str)\n \n# 将 JSON 对象转换为 Python 字典\ndata2 = json.loads(json_str)\nprint (\"data2['name']: \", data2['name'])\nprint (\"data2['url']: \", data2['url'])\n"],["body","\n"],["body","如果你要处理的是文件而不是字符串，你可以使用 json.dump() 和 json.load() 来编码和解码JSON数据。例如："],["body","\n"],["body","# 写入 JSON 数据\nwith open('data.json', 'w') as f:\n    json.dump(data, f)\n \n# 读取数据\nwith open('data.json', 'r') as f:\n    data = json.load(f)\n"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/19.装饰器.html"],["title","装饰器.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python-函数装饰器"],["heading","Python 函数装饰器"],["body","\n"],["body","装饰器(Decorators)是 Python 的一个重要部分。简单地说：他们是修改其他函数的功能的函数。他们有助于让我们的代码更简短，也更Pythonic（Python范儿）。"],["body","\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/7.python3列表.html"],["title","python3列表.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-列表"],["heading","Python3 列表"],["body","\n"],["body","序列是 Python 中最基本的数据结构。"],["body","\n\n"],["body","\n"],["body","Python 有 6 个序列的内置类型，但最常见的是列表和元组。"],["body","\n"],["body","\n"],["body","\n"],["body","列表都可以进行的操作包括索引，切片，加，乘，检查成员。"],["body","\n"],["body","\n"],["body","\n"],["body","此外，Python 已经内置确定序列的长度以及确定最大和最小的元素的方法。"],["body","\n"],["body","\n"],["body","\n"],["body","列表的数据项不需要具有相同的类型"],["body","\n"],["body","\n"],["body","\n"],["body","创建一个列表，只要把逗号分隔的不同的数据项使用方括号括起来即可。如下所示："],["body","\n"],["body","\n\n"],["body","list1 = ['Google', 'Runoob', 1997, 2000]\nlist2 = [1, 2, 3, 4, 5 ]\nlist3 = [\"a\", \"b\", \"c\", \"d\"]\nlist4 = ['red', 'green', 'blue', 'yellow', 'white', 'black']\n"],["body","\n"],["headingLink","更新列表"],["heading","更新列表"],["body","\n"],["body","#!/usr/bin/python3\n \nlist = ['Google', 'Runoob', 1997, 2000]\n \nprint (\"第三个元素为 : \", list[2])\nlist[2] = 2001\nprint (\"更新后的第三个元素为 : \", list[2])\n \nlist1 = ['Google', 'Runoob', 'Taobao']\nlist1.append('Baidu')\nprint (\"更新后的列表 : \", list1)\n"],["body","\n"],["headingLink","删除列表元素"],["heading","删除列表元素"],["body","\n"],["body","#!/usr/bin/python3\n \nlist = ['Google', 'Runoob', 1997, 2000]\n \nprint (\"原始列表 : \", list)\ndel list[2]\nprint (\"删除第三个元素 : \", list)\n"],["body","\n"],["headingLink","python列表脚本操作符"],["heading","Python列表脚本操作符"],["body","\n"],["body","Python 表达式"],["body","结果"],["body","描述"],["body","\n"],["body","len([1, 2, 3])"],["body","3"],["body","长度"],["body","\n"],["body","[1, 2, 3] + [4, 5, 6]"],["body","[1, 2, 3, 4, 5, 6]"],["body","组合"],["body","\n"],["body","['Hi!'] * 4"],["body","['Hi!', 'Hi!', 'Hi!', 'Hi!']"],["body","重复"],["body","\n"],["body","3 in [1, 2, 3]"],["body","True"],["body","元素是否存在于列表中"],["body","\n"],["body","for x in [1, 2, 3]: print(x, end=\" \")"],["body","1 2 3"],["body","迭代"],["body","\n\n\n"],["headingLink","python列表截取与拼接"],["heading","Python列表截取与拼接"],["body","\n"],["body","Python的列表截取与字符串操作类型，如下所示："],["body","\n"],["body","L=['Google', 'Runoob', 'Taobao']"],["body","\n"],["body","Python 表达式"],["body","结果"],["body","描述"],["body","\n"],["body","L[2]"],["body","'Taobao'"],["body","读取第三个元素"],["body","\n"],["body","L[-2]"],["body","'Runoob'"],["body","从右侧开始读取倒数第二个元素: count from the right"],["body","\n"],["body","L[1:]"],["body","['Runoob', 'Taobao']"],["body","输出从第二个元素开始后的所有元素"],["body","\n\n\n"],["body","列表还支持拼接操作："],["body","\n"],["body",">>>squares = [1, 4, 9, 16, 25]\n>>> squares += [36, 49, 64, 81, 100]\n>>> squares\n[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n>>>\n"],["body","\n"],["headingLink","python列表函数方法"],["heading","Python列表函数&方法"],["body","\n"],["body","序号"],["body","函数"],["body","\n"],["body","1"],["body","len(list) 列表元素个数"],["body","\n"],["body","2"],["body","max(list) 返回列表元素最大值"],["body","\n"],["body","3"],["body","min(list) 返回列表元素最小值"],["body","\n"],["body","4"],["body","list(seq) 将元组转换为列表"],["body","\n\n\n"],["body","Python包含以下方法:"],["body","\n"],["body","序号"],["body","方法"],["body","\n"],["body","1"],["body","list.append(obj) 在列表末尾添加新的对象"],["body","\n"],["body","2"],["body","list.count(obj) 统计某个元素在列表中出现的次数"],["body","\n"],["body","3"],["body","list.extend(seq) 在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）"],["body","\n"],["body","4"],["body","list.index(obj) 从列表中找出某个值第一个匹配项的索引位置"],["body","\n"],["body","5"],["body","list.insert(index, obj) 将对象插入列表"],["body","\n"],["body","6"],["body","[list.pop(index=-1]) 移除列表中的一个元素（默认最后一个元素），并且返回该元素的值"],["body","\n"],["body","7"],["body","list.remove(obj) 移除列表中某个值的第一个匹配项"],["body","\n"],["body","8"],["body","list.reverse() 反向列表中元素"],["body","\n"],["body","9"],["body","list.sort( key=None, reverse=False) 对原列表进行排序"],["body","\n"],["body","10"],["body","list.clear() 清空列表"],["body","\n"],["body","11"],["body","list.copy() 复制列表"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/10.Python3集合.html"],["title","Python3集合.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-集合"],["heading","Python3 集合"],["body","\n"],["body","集合（set）是一个无序的不重复元素序列。"],["body","\n"],["body","可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。"],["body","\n"],["body","parame = {value01,value02,...}\n或者\nset(value)\n"],["body","\n"],["headingLink","集合的基本操作"],["heading","集合的基本操作"],["body","\n"],["headingLink","1添加元素"],["heading","1、添加元素"],["body","\n"],["body","s.add( x )\n\n"],["body","\n"],["body","将元素 x 添加到集合 s 中，如果元素已存在，则不进行任何操作。"],["body","\n"],["body",">>> thisset = set((\"Google\", \"Runoob\", \"Taobao\"))\n>>> thisset.add(\"Facebook\")\n>>> print(thisset)\n{'Taobao', 'Facebook', 'Google', 'Runoob'}\n"],["body","\n"],["body","还有一个方法，也可以添加元素，且参数可以是列表，元组，字典等，语法格式如下："],["body","\n"],["body","s.update( x )\n"],["body","\n"],["body","x 可以有多个，用逗号分开。"],["body","\n"],["body",">>> thisset = set((\"Google\", \"Runoob\", \"Taobao\"))\n>>> thisset.update({1,3})\n>>> print(thisset)\n{1, 3, 'Google', 'Taobao', 'Runoob'}\n>>> thisset.update([1,4],[5,6])  \n>>> print(thisset)\n{1, 3, 4, 5, 6, 'Google', 'Taobao', 'Runoob'}\n>>>\n"],["body","\n"],["headingLink","2移除元素"],["heading","2、移除元素"],["body","\n"],["body","s.remove( x )\n"],["body","\n"],["body","将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。"],["body","\n"],["body","此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。格式如下所示："],["body","\n"],["body","s.discard( x )\n"],["body","\n"],["body","我们也可以设置随机删除集合中的一个元素，语法格式如下："],["body","\n"],["body","s.pop() \n"],["body","\n"],["body","set 集合的 pop 方法会对集合进行无序的排列，然后将这个无序排列集合的左面第一个元素进行删除。"],["body","\n"],["headingLink","3计算集合元素个数"],["heading","3、计算集合元素个数"],["body","\n"],["body","len(s)\t\n"],["body","\n"],["headingLink","4清空集合"],["heading","4、清空集合"],["body","\n"],["body","s.clear()\n\n"],["body","\n"],["body",">>> thisset = set((\"Google\", \"Runoob\", \"Taobao\"))\n>>> thisset.clear()\n>>> print(thisset)\nset()\n"],["body","\n"],["headingLink","5判断元素是否在集合中存在"],["heading","5、判断元素是否在集合中存在"],["body","\n"],["body","x in s\n\n"],["body","\n"],["headingLink","集合内置方法完整列表"],["heading","集合内置方法完整列表"],["body","\n"],["body","方法"],["body","描述"],["body","\n"],["body","add()"],["body","为集合添加元素"],["body","\n"],["body","clear()"],["body","移除集合中的所有元素"],["body","\n"],["body","copy()"],["body","拷贝一个集合"],["body","\n"],["body","difference()"],["body","返回多个集合的差集"],["body","\n"],["body","difference_update()"],["body","移除集合中的元素，该元素在指定的集合也存在。"],["body","\n"],["body","discard()"],["body","删除集合中指定的元素"],["body","\n"],["body","intersection()"],["body","返回集合的交集"],["body","\n"],["body","intersection_update()"],["body","返回集合的交集。"],["body","\n"],["body","isdisjoint()"],["body","判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。"],["body","\n"],["body","issubset()"],["body","判断指定集合是否为该方法参数集合的子集。"],["body","\n"],["body","issuperset()"],["body","判断该方法的参数集合是否为指定集合的子集"],["body","\n"],["body","pop()"],["body","随机移除元素"],["body","\n"],["body","remove()"],["body","移除指定元素"],["body","\n"],["body","symmetric_difference()"],["body","返回两个集合中不重复的元素集合。"],["body","\n"],["body","symmetric_difference_update()"],["body","移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。"],["body","\n"],["body","union()"],["body","返回两个集合的并集"],["body","\n"],["body","update()"],["body","给集合添加元素"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/3.Python3数据类型转换.html"],["title","Python3数据类型转换.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-数据类型转换"],["heading","Python3 数据类型转换"],["body","\n"],["body","有时候，我们需要对数据内置的类型进行转换，数据类型的转换，一般情况下你只需要将数据类型作为函数名即可。"],["body","\n"],["body","Python 数据类型转换可以分为两种："],["body","\n\n"],["body","隐式类型转换 - 自动完成"],["body","\n"],["body","显式类型转换 - 需要使用类型函数来转换"],["body","\n\n"],["body","​"],["body","\n"],["headingLink","隐式类型转换"],["heading","隐式类型转换"],["body","\n"],["body","在隐式类型转换中，Python 会自动将一种数据类型转换为另一种数据类型，不需要我们去干预。"],["body","\n"],["body","以下实例中，我们对两种不同类型的数据进行运算，较低数据类型（整数）就会转换为较高数据类型（浮点数）以避免数据丢失。"],["body","\n"],["body","\nnum_int = 123\nnum_flo = 1.23\n\nnum_new = num_int + num_flo\n\nprint(\"datatype of num_int:\",type(num_int))\nprint(\"datatype of num_flo:\",type(num_flo))\n\nprint(\"Value of num_new:\",num_new)\nprint(\"datatype of num_new:\",type(num_new))\n"],["body","\n"],["body","num_int 数据类型为: <class 'int'>\nnum_flo 数据类型为: <class 'float'>\nnum_new: 值为: 124.23\nnum_new 数据类型为: <class 'float'>\n"],["body","\n"],["headingLink","显式类型转换"],["heading","显式类型转换"],["body","\n"],["body","在显式类型转换中，用户将对象的数据类型转换为所需的数据类型。 我们使用 int()、float()、str() 等预定义函数来执行显式类型转换。"],["body","\n"],["body","num_int = 123\nnum_str = \"456\"\n\nprint(\"Data type of num_int:\",type(num_int))\nprint(\"Data type of num_str:\",type(num_str))\n\nprint(num_int+num_str)\n"],["body","\n"],["headingLink","实例"],["heading","实例"],["body","\n"],["body","int() 强制转换为整型："],["body","\n"],["body","x = int(1)  # x 输出结果为 1\ny = int(2.8) # y 输出结果为 2\nz = int(\"3\") # z 输出结果为 3\n"],["body","\n"],["body","float() 强制转换为浮点型："],["body","\n"],["headingLink","实例-1"],["heading","实例"],["body","\n"],["body","x = float(1)   # x 输出结果为 1.0\ny = float(2.8)  # y 输出结果为 2.8\nz = float(\"3\")  # z 输出结果为 3.0\nw = float(\"4.2\") # w 输出结果为 4.2\n"],["body","\n"],["body","str() 强制转换为字符串类型："],["body","\n"],["headingLink","实例-2"],["heading","实例"],["body","\n"],["body","x = str(\"s1\") # x 输出结果为 's1'\ny = str(2)   # y 输出结果为 '2'\nz = str(3.0) # z 输出结果为 '3.0'\n"],["body","\n"],["body","以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。"],["body","\n"],["body","函数"],["body","描述"],["body","\n"],["body","[int(x ,base])"],["body","将x转换为一个整数"],["body","\n"],["body","float(x)"],["body","将x转换到一个浮点数"],["body","\n"],["body","[complex(real ,imag])"],["body","创建一个复数"],["body","\n"],["body","str(x)"],["body","将对象 x 转换为字符串"],["body","\n"],["body","repr(x)"],["body","将对象 x 转换为表达式字符串"],["body","\n"],["body","eval(str)"],["body","用来计算在字符串中的有效Python表达式,并返回一个对象"],["body","\n"],["body","tuple(s)"],["body","将序列 s 转换为一个元组"],["body","\n"],["body","list(s)"],["body","将序列 s 转换为一个列表"],["body","\n"],["body","set(s)"],["body","转换为可变集合"],["body","\n"],["body","dict(d)"],["body","创建一个字典。d 必须是一个 (key, value)元组序列。"],["body","\n"],["body","frozenset(s)"],["body","转换为不可变集合"],["body","\n"],["body","chr(x)"],["body","将一个整数转换为一个字符"],["body","\n"],["body","ord(x)"],["body","将一个字符转换为它的整数值"],["body","\n"],["body","hex(x)"],["body","将一个整数转换为一个十六进制字符串"],["body","\n"],["body","oct(x)"],["body","将一个整数转换为一个八进制字符串"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/8.元祖.html"],["title","元祖.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-元组"],["heading","Python3 元组"],["body","\n"],["body","Python 的元组与列表类似，不同之处在于元组的元素不能修改。"],["body","\n"],["body","元组使用小括号 ( )，列表使用方括号 [ ]。"],["body","\n"],["body","元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。"],["body","\n"],["body",">>> tup1 = ('Google', 'Runoob', 1997, 2000)\n>>> tup2 = (1, 2, 3, 4, 5 )\n>>> tup3 = \"a\", \"b\", \"c\", \"d\"   #  不需要括号也可以\n>>> type(tup3)\n<class 'tuple'>\n"],["body","\n"],["body","元组中只包含一个元素时，需要在元素后面添加逗号 , ，否则括号会被当作运算符使用："],["body","\n"],["body","## 实例(Python 3.0+)\n\n\\>>> tup1 = (50)\n\\>>> type(tup1)   # 不加逗号，类型为整型\n<**class** 'int'>\n\n\\>>> tup1 = (50,)\n\\>>> type(tup1)   # 加上逗号，类型为元组\n<**class** 'tuple'>\n"],["body","\n"],["headingLink","访问元组"],["heading","访问元组"],["body","\n"],["body","#!/usr/bin/python3\n \ntup1 = ('Google', 'Runoob', 1997, 2000)\ntup2 = (1, 2, 3, 4, 5, 6, 7 )\n \nprint (\"tup1[0]: \", tup1[0])\nprint (\"tup2[1:5]: \", tup2[1:5])\n\n"],["body","\n"],["headingLink","修改元组"],["heading","修改元组"],["body","\n"],["body","元组中的元素值是不允许修改的，但我们可以对元组进行连接组合，如下实例:"],["body","\n"],["body","#!/usr/bin/python3\n \ntup1 = (12, 34.56)\ntup2 = ('abc', 'xyz')\n \n# 以下修改元组元素操作是非法的。\n# tup1[0] = 100\n \n# 创建一个新的元组\ntup3 = tup1 + tup2\nprint (tup3)\n"],["body","\n"],["headingLink","删除元组"],["heading","删除元组"],["body","\n"],["body","元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组，如下实例:"],["body","\n"],["body","#!/usr/bin/python3\n \ntup = ('Google', 'Runoob', 1997, 2000)\n \nprint (tup)\ndel tup\nprint (\"删除后的元组 tup : \")\nprint (tup)\n"],["body","\n"],["headingLink","元组运算符"],["heading","元组运算符"],["body","\n"],["body","与字符串一样，元组之间可以使用 + 号和 ***** 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。"],["body","\n"],["body","Python 表达式"],["body","结果"],["body","描述"],["body","\n"],["body","len((1, 2, 3))"],["body","3"],["body","计算元素个数"],["body","\n"],["body","(1, 2, 3) + (4, 5, 6)"],["body","(1, 2, 3, 4, 5, 6)"],["body","连接"],["body","\n"],["body","('Hi!',) * 4"],["body","('Hi!', 'Hi!', 'Hi!', 'Hi!')"],["body","复制"],["body","\n"],["body","3 in (1, 2, 3)"],["body","True"],["body","元素是否存在"],["body","\n"],["body","for x in (1, 2, 3):     print (x, end=\" \")"],["body","1 2 3"],["body","迭代"],["body","\n\n\n"],["body","\n"],["headingLink","元组索引截取"],["heading","元组索引，截取"],["body","\n"],["body","tup = ('Google', 'Runoob', 'Taobao', 'Wiki', 'Weibo','Weixin')\n"],["body","\n"],["body","Python 表达式"],["body","结果"],["body","描述"],["body","\n"],["body","tup[1]"],["body","'Runoob'"],["body","读取第二个元素"],["body","\n"],["body","tup[-2]"],["body","'Weibo'"],["body","反向读取，读取倒数第二个元素"],["body","\n"],["body","tup[1:]"],["body","('Runoob', 'Taobao', 'Wiki', 'Weibo', 'Weixin')"],["body","截取元素，从第二个开始后的所有元素。"],["body","\n"],["body","tup[1:4]"],["body","('Runoob', 'Taobao', 'Wiki')"],["body","截取元素，从第二个开始到第四个元素（索引为 3）。"],["body","\n\n\n"],["headingLink","元组内置函数"],["heading","元组内置函数"],["body","\n"],["body","Python元组包含了以下内置函数"],["body","\n"],["body","序号"],["body","方法及描述"],["body","实例"],["body","\n"],["body","1"],["body","len(tuple) 计算元组元素个数。"],["body",">>> tuple1 = ('Google', 'Runoob', 'Taobao') >>> len(tuple1) 3 >>> "],["body","\n"],["body","2"],["body","max(tuple) 返回元组中元素最大值。"],["body",">>> tuple2 = ('5', '4', '8') >>> max(tuple2) '8' >>> "],["body","\n"],["body","3"],["body","min(tuple) 返回元组中元素最小值。"],["body",">>> tuple2 = ('5', '4', '8') >>> min(tuple2) '4' >>> "],["body","\n"],["body","4"],["body","tuple(iterable) 将可迭代系列转换为元组。"],["body",">>> list1= ['Google', 'Taobao', 'Runoob', 'Baidu'] >>> tuple1=tuple(list1) >>> tuple1 ('Google', 'Taobao', 'Runoob', 'Baidu')"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]],[["_relative_fp","python基础_1_python基础/16.Python3面向对象.html"],["title","Python3面向对象.md - Python笔记库"],["body","\n    \n        \n        \n\n        \n        \n\n        \n\n        \n        \n\n        \n\n        \n\n            \n                \n                \n                    \n                        "],["body","\n                            \n                        "],["body","\n                        "],["body","\n                            \n                        "],["body","\n                        \n                            "],["body","Light"],["body","\n                            "],["body","Rust"],["body","\n                            "],["body","Coal"],["body","\n                            "],["body","Navy"],["body","\n                            "],["body","Ayu"],["body","\n                        \n                    \n\n                    "],["heading","Python笔记库"],["body","\n\n                    \n\n                    \n                \n\n\n                \n                \n\n                \n                    "],["body","\n                        \n\n"],["body","\n"],["body","\n\n"],["headingLink","python3-面向对象"],["heading","Python3 面向对象"],["body","\n"],["body","Python从设计之初就已经是一门面向对象的语言，正因为如此，在Python中创建一个类和对象是很容易的。本章节我们将详细介绍Python的面向对象编程。"],["body","\n"],["body","接下来我们先来简单的了解下面向对象的一些基本特征。"],["body","\n"],["body","\n"],["headingLink","面向对象技术简介"],["heading","面向对象技术简介"],["body","\n\n"],["body","类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。"],["body","\n"],["body","**方法：**类中定义的函数。"],["body","\n"],["body","**类变量：**类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。"],["body","\n"],["body","**数据成员：**类变量或者实例变量用于处理类及其实例对象的相关的数据。"],["body","\n"],["body","**方法重写：**如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。"],["body","\n"],["body","**局部变量：**定义在方法中的变量，只作用于当前实例的类。"],["body","\n"],["body","**实例变量：**在类的声明中，属性是用变量来表示的，这种变量就称为实例变量，实例变量就是一个用 self 修饰的变量。"],["body","\n"],["body","**继承：**即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟\"是一个（is-a）\"关系（例图，Dog是一个Animal）。"],["body","\n"],["body","**实例化：**创建一个类的实例，类的具体对象。"],["body","\n"],["body","**对象：**通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。"],["body","\n\n"],["body","和其它编程语言相比，Python 在尽可能不增加新的语法和语义的情况下加入了类机制。"],["body","\n"],["body","Python中的类提供了面向对象编程的所有基本功能：类的继承机制允许多个基类，派生类可以覆盖基类中的任何方法，方法中可以调用基类中的同名方法。"],["body","\n"],["body","对象可以包含任意数量和类型的数据。"],["body","\n"],["headingLink","类定义"],["heading","类定义"],["body","\n"],["body","语法格式如下："],["body","\n"],["body","class ClassName:    <statement-1>    .    .    .    <statement-N>\n"],["body","\n"],["body","类实例化后，可以使用其属性，实际上，创建一个类之后，可以通过类名访问其属性。"],["body","\n"],["headingLink","创建类"],["heading","创建类"],["body","\n"],["body","使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾:"],["body","\n"],["body","class ClassName:\n   '类的帮助信息'   #类文档字符串\n   class_suite  #类体\n  \n  \n // 类的帮助信息可以通过ClassName.__doc__查看。\n // class_suite 由类成员，方法，数据属性组成。\n"],["body","\n"],["headingLink","python内置类属性"],["heading","Python内置类属性"],["body","\n\n"],["body","__dict__ : 类的属性（包含一个字典，由类的数据属性组成）"],["body","\n"],["body","__doc__ :类的文档字符串"],["body","\n"],["body","__name__: 类名"],["body","\n"],["body","__module__: 类定义所在的模块（类的全名是'main.className'，如果类位于一个导入模块mymod中，那么className.module 等于 mymod）"],["body","\n"],["body","__bases__ : 类的所有父类构成元素（包含了一个由所有父类组成的元组）"],["body","\n\n"],["headingLink","类对象"],["heading","类对象"],["body","\n"],["body","类对象支持两种操作：属性引用和实例化。"],["body","\n"],["body","属性引用使用和 Python 中所有的属性引用一样的标准语法：obj.name。"],["body","\n"],["body","类对象创建后，类命名空间中所有的命名都是有效属性名。所以如果类定义是这样:"],["body","\n"],["body","实例(Python 3.0+)"],["body","\n"],["body","#!/usr/bin/python3  \nclass MyClass:    \n  \"\"\"一个简单的类实例\"\"\"    \n  i = 12345    \n  def f(self): return 'hello world'  \n# 实例化类 \nx = MyClass()  \n# 访问类的属性和方法 \nprint(\"MyClass 类的属性 i 为：\", x.i) \nprint(\"MyClass 类的方法 f 输出为：\", x.f())\n"],["body","\n"],["body","以上创建了一个新的类实例并将该对象赋给局部变量 x，x 为空的对象。"],["body","\n"],["body","执行以上程序输出结果为："],["body","\n"],["body","MyClass 类的属性 i 为： 12345\nMyClass 类的方法 f 输出为： hello world\n"],["body","\n"],["body","\n"],["body","类有一个名为 init() 的特殊方法（构造方法），该方法在类实例化时会自动调用，像下面这样："],["body","\n"],["body","def __init__(self):    self.data = []\n"],["body","\n"],["body","类定义了 init() 方法，类的实例化操作会自动调用 init() 方法。如下实例化类 MyClass，对应的 init() 方法就会被调用:"],["body","\n"],["body","x = MyClass()\n"],["body","\n"],["body","当然， init() 方法可以有参数，参数通过 init() 传递到类的实例化操作上。例如:"],["body","\n"],["body","实例(Python 3.0+)"],["body","\n"],["body","#!/usr/bin/python3  \nclass Complex:    \n\tdef __init__(self, realpart, imagpart):        \n\t\tself.r = realpart        \n\t\tself.i = imagpart \n\nx = Complex(3.0, -4.5) \nprint(x.r, x.i)   \n# 输出结果：3.0 -4.5\n"],["body","\n"],["headingLink","self代表类的实例而非类"],["heading","self代表类的实例，而非类"],["body","\n"],["body","类的方法与普通的函数只有一个特别的区别——它们必须有一个额外的第一个参数名称, 按照惯例它的名称是 self。"],["body","\n"],["body","class Test:    \n\tdef prt(self):        \n\t\tprint(self)        \n\t\tprint(self.__class__)  \n\t\t\nt = Test() \nt.prt()\n"],["body","\n"],["body","以上实例执行结果为："],["body","\n"],["body","<__main__.Test instance at 0x100771878>\n__main__.Test\n"],["body","\n"],["body","从执行结果可以很明显的看出，self 代表的是类的实例，代表当前对象的地址，而 self.class 则指向类。"],["body","\n"],["body","self 不是 python 关键字，我们把他换成 runoob 也是可以正常执行的:"],["body","\n"],["body","class Test:    \n\tdef prt(runoob):        \n\tprint(runoob)        \n\tprint(runoob.__class__)  \n\nt = Test() \nt.prt()\n"],["body","\n"],["body","以上实例执行结果为："],["body","\n"],["body","<__main__.Test instance at 0x100771878>\n__main__.Test\n"],["body","\n"],["body","\n"],["headingLink","类的方法"],["heading","类的方法"],["body","\n"],["body","在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数，self 代表的是类的实例。"],["body","\n"],["body","实例(Python 3.0+)"],["body","\n"],["body","#!/usr/bin/python3  \n#类定义 \nclass people:    \n#定义基本属性   \n\tname = ''    \n  age = 0    \n#定义私有属性,私有属性在类外部无法直接进行访问    \n__weight = 0    \n#定义构造方法    \ndef __init__(self,n,a,w):        \n  self.name = n        \n  self.age = a        \n  self.__weight = w    \n  \ndef speak(self):        \n  print(\"%s 说: 我 %d 岁。\" %(self.name,self.age))  \n # 实例化类 \np = people('runoob',10,30) \np.speak()\n"],["body","\n"],["body","执行以上程序输出结果为："],["body","\n"],["body","runoob 说: 我 10 岁。\n"],["body","\n"],["body","\n"],["headingLink","继承"],["heading","继承"],["body","\n"],["body","Python 同样支持类的继承，如果一种语言不支持继承，类就没有什么意义。派生类的定义如下所示:"],["body","\n"],["body","class DerivedClassName(BaseClassName):    <statement-1>    .    .    .    <statement-N>\n"],["body","\n"],["body","子类（派生类 DerivedClassName）会继承父类（基类 BaseClassName）的属性和方法。"],["body","\n"],["body","BaseClassName（实例中的基类名）必须与派生类定义在一个作用域内。除了类，还可以用表达式，基类定义在另一个模块中时这一点非常有用:"],["body","\n"],["body","class DerivedClassName(modname.BaseClassName):\n"],["body","\n"],["body","实例(Python 3.0+)"],["body","\n"],["body","#!/usr/bin/python3  \n#类定义 \nclass people:    \n#定义基本属性    \n\tname = ''    \n\tage = 0    \n#定义私有属性,私有属性在类外部无法直接进行访问    \n\t__weight = 0    \n#定义构造方法    \ndef __init__(self,n,a,w):        \n\tself.name = n        \n  self.age = a        \n  self.__weight = w    \ndef speak(self):        \n  print(\"%s 说: 我 %d 岁。\" %(self.name,self.age))  \n#单继承示例 \nclass student(people):    \n  grade = ''    \n  def __init__(self,n,a,w,g):        \n#调用父类的构函        \n\tpeople.__init__(self,n,a,w)        \n  self.grade = g    \n#覆写父类的方法    \n\tdef speak(self):        \n  print(\"%s 说: 我 %d 岁了，我在读 %d 年级\"%(self.name,self.age,self.grade))    \n  \ns = student('ken',10,60,3) \ns.speak()\n"],["body","\n"],["body","执行以上程序输出结果为："],["body","\n"],["body","ken 说: 我 10 岁了，我在读 3 年级\n"],["body","\n"],["body","\n"],["headingLink","多继承"],["heading","多继承"],["body","\n"],["body","Python同样有限的支持多继承形式。多继承的类定义形如下例:"],["body","\n"],["body","class DerivedClassName(Base1, Base2, Base3):    <statement-1>    .    .    .    <statement-N>\n"],["body","\n"],["body","需要注意圆括号中父类的顺序，若是父类中有相同的方法名，而在子类使用时未指定，python从左至右搜索 即方法在子类中未找到时，从左到右查找父类中是否包含方法。"],["body","\n"],["body","实例(Python 3.0+)"],["body","\n"],["body","#!/usr/bin/python3  \n#类定义 \nclass people:    \n#定义基本属性    \nname = ''    age = 0   \n#定义私有属性,私有属性在类外部无法直接进行访问   \n__weight = 0    \n#定义构造方法    \ndef __init__(self,n,a,w):        \n  self.name = n        \n  self.age = a        \n  self.__weight = w    \ndef speak(self):        \n  print(\"%s 说: 我 %d 岁。\" %(self.name,self.age))  \n#单继承示例 \nclass student(people):    \n  grade = ''    \n  def __init__(self,n,a,w,g):        \n    #调用父类的构函        \n    people.__init__(self,n,a,w)        \n    self.grade = g    \n#覆写父类的方法    \n\tdef speak(self):        \n    print(\"%s 说: 我 %d 岁了，我在读 %d 年级\"%(self.name,self.age,self.grade))  \n#另一个类，多重继承之前的准备 \nclass speaker():    \n  topic = ''    \n  name = ''    \n  def __init__(self,n,t):        \n    self.name = n        \n    self.topic = t    \ndef speak(self):        \n  print(\"我叫 %s，我是一个演说家，我演讲的主题是 %s\"%(self.name,self.topic))  \n#多重继承 \nclass sample(speaker,student):    \n\ta =''    def __init__(self,n,a,w,g,t):        \n\tstudent.__init__(self,n,a,w,g)        \n  speaker.__init__(self,n,t)  \n  \ntest = sample(\"Tim\",25,80,4,\"Python\") \ntest.speak()   #方法名同，默认调用的是在括号中参数位置排前父类的方法\n"],["body","\n"],["body","执行以上程序输出结果为："],["body","\n"],["body","我叫 Tim，我是一个演说家，我演讲的主题是 Python\n"],["body","\n"],["body","\n"],["headingLink","方法重写"],["heading","方法重写"],["body","\n"],["body","如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法，实例如下："],["body","\n"],["body","实例(Python 3.0+)"],["body","\n"],["body","#!/usr/bin/python3  \nclass Parent:        \n  # 定义父类   \n  def myMethod(self):      \n    print ('调用父类方法')  \nclass Child(Parent): \n  # 定义子类   \n  def myMethod(self):      \n    print ('调用子类方法')  \n    \nc = Child()          \n# 子类实例 \nc.myMethod()         \n# 子类调用重写方法 \nsuper(Child,c).myMethod() #用子类对象调用父类已被覆盖的方法\n"],["body","\n"],["body","super() 函数是用于调用父类(超类)的一个方法。"],["body","\n"],["body","执行以上程序输出结果为："],["body","\n"],["body","调用子类方法\n调用父类方法\n"],["body","\n"],["body","更多文档："],["body","\n"],["body","Python 子类继承父类构造函数说明"],["body","\n"],["body","\n"],["headingLink","类属性与方法"],["heading","类属性与方法"],["body","\n"],["headingLink","类的私有属性"],["heading","类的私有属性"],["body","\n"],["body","__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。"],["body","\n"],["headingLink","类的方法-1"],["heading","类的方法"],["body","\n"],["body","在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，self 代表的是类的实例。"],["body","\n"],["body","self 的名字并不是规定死的，也可以使用 this，但是最好还是按照约定使用 self。"],["body","\n"],["headingLink","类的私有方法"],["heading","类的私有方法"],["body","\n"],["body","__private_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。self.__private_methods。"],["body","\n"],["headingLink","实例"],["heading","实例"],["body","\n"],["body","类的私有属性实例如下："],["body","\n"],["body","实例(Python 3.0+)"],["body","\n"],["body","#!/usr/bin/python3 \nclass JustCounter:    \n  __secretCount = 0  \n# 私有变量    \n\tpublicCount = 0    \n# 公开变量     \n\tdef count(self):       \n    self.__secretCount += 1        \n    self.publicCount += 1        \n    print (self.__secretCount)  \ncounter = JustCounter() \ncounter.count() \ncounter.count() \nprint (counter.publicCount) \nprint (counter.__secretCount)  # 报错，实例不能访问私有变量\n"],["body","\n"],["body","执行以上程序输出结果为："],["body","\n"],["body","1\n2\n2\nTraceback (most recent call last):\n  File \"test.py\", line 16, in <module>\n    print (counter.__secretCount)  # 报错，实例不能访问私有变量\nAttributeError: 'JustCounter' object has no attribute '__secretCount'\n"],["body","\n"],["body","类的私有方法实例如下："],["body","\n"],["body","实例(Python 3.0+)"],["body","\n"],["body","#!/usr/bin/python3\n \nclass Site:\n    def __init__(self, name, url):\n        self.name = name       # public\n        self.__url = url   # private\n \n    def who(self):\n        print('name  : ', self.name)\n        print('url : ', self.__url)\n \n    def __foo(self):          # 私有方法\n        print('这是私有方法')\n \n    def foo(self):            # 公共方法\n        print('这是公共方法')\n        self.__foo()\n \nx = Site('菜鸟教程', 'www.runoob.com')\nx.who()        # 正常输出\nx.foo()        # 正常输出\nx.__foo()      # 报错\n"],["body","\n"],["headingLink","类的专有方法"],["heading","类的专有方法："],["body","\n\n"],["body","init : 构造函数，在生成对象时调用"],["body","\n"],["body","del : 析构函数，释放对象时使用"],["body","\n"],["body","repr : 打印，转换"],["body","\n"],["body","setitem : 按照索引赋值"],["body","\n"],["body","getitem: 按照索引获取值"],["body","\n"],["body","len: 获得长度"],["body","\n"],["body","cmp: 比较运算"],["body","\n"],["body","call: 函数调用"],["body","\n"],["body","add: 加运算"],["body","\n"],["body","sub: 减运算"],["body","\n"],["body","mul: 乘运算"],["body","\n"],["body","truediv: 除运算"],["body","\n"],["body","mod: 求余运算"],["body","\n"],["body","pow: 乘方"],["body","\n\n"],["headingLink","运算符重载"],["heading","运算符重载"],["body","\n"],["body","Python同样支持运算符重载，我们可以对类的专有方法进行重载，实例如下："],["body","\n"],["body","实例(Python 3.0+)"],["body","\n"],["body","#!/usr/bin/python3  \nclass Vector:   \n  def __init__(self, a, b):      \n    self.a = a      \n    self.b = b    \n  def __str__(self):      \n    return 'Vector (%d, %d)' % (self.a, self.b)      \n  def __add__(self,other):      \n    return Vector(self.a + other.a, self.b + other.b)  \n\n  v1 = Vector(2,10) \n  v2 = Vector(5,-2) \n  print (v1 + v2)\n"],["body","\n"],["body","以上代码执行结果如下所示:"],["body","\n"],["body","Vector(7,8)\n"],["body","\n"],["headingLink","单下划线双下划线头尾双下划线说明"],["heading","单下划线、双下划线、头尾双下划线说明："],["body","\n\n"],["body","foo: 定义的是特殊方法，一般是系统定义名字 ，类似 init() 之类的。"],["body","\n"],["body","_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *"],["body","\n"],["body","__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。"],["body","\n\n"],["headingLink","python对象销毁垃圾回收"],["heading","python对象销毁(垃圾回收)"],["body","\n"],["body","Python 使用了引用计数这一简单技术来跟踪和回收垃圾。"],["body","\n"],["body","在 Python 内部记录着所有使用中的对象各有多少引用。"],["body","\n"],["body","一个内部跟踪变量，称为一个引用计数器。"],["body","\n"],["body","当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时， 也就是说， 这个对象的引用计数变为0 时， 它被垃圾回收。但是回收不是\"立即\"的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。"],["body","\n"],["body","a = 40      # 创建对象  <40>\nb = a       # 增加引用， <40> 的计数\nc = [b]     # 增加引用.  <40> 的计数\n\ndel a       # 减少引用 <40> 的计数\nb = 100     # 减少引用 <40> 的计数\nc[0] = -1   # 减少引用 <40> 的计数\n\n"],["body","\n"],["body","垃圾回收机制不仅针对引用计数为0的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充， 垃圾收集器也会留心被分配的总量很大（即未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。"],["body","\n"],["headingLink","基础重载方法"],["heading","基础重载方法"],["body","\n"],["body","下表列出了一些通用的功能，你可以在自己的类重写："],["body","\n"],["body","序号"],["body","方法, 描述 & 简单的调用"],["body","\n"],["body","1"],["body","init ( self [,args...] ) 构造函数 简单的调用方法: obj = className(args)"],["body","\n"],["body","2"],["body","del( self ) 析构方法, 删除一个对象 简单的调用方法 : del obj"],["body","\n"],["body","3"],["body","repr( self ) 转化为供解释器读取的形式 简单的调用方法 : repr(obj)"],["body","\n"],["body","4"],["body","str( self ) 用于将值转化为适于人阅读的形式 简单的调用方法 : str(obj)"],["body","\n"],["body","5"],["body","cmp ( self, x ) 对象比较 简单的调用方法 : cmp(obj, x)"],["body","\n\n\n\n\n                    "],["body","\n\n                    \n                \n            \n\n            \n\n        \n\n\n\n\n        \n\n\n\n        \n        \n        \n\n        \n\n\n    \n    \n\n"]]]